-- crypto_test_mm_interconnect_0.vhd

-- This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
-- will probably be lost.
-- 
-- Generated using ACDS version 14.1 190 at 2015.03.23.23:30:20

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity crypto_test_mm_interconnect_0 is
	port (
		clk_clk_clk                                      : in  std_logic                     := '0';             --                                    clk_clk.clk
		nios2_qsys_0_reset_n_reset_bridge_in_reset_reset : in  std_logic                     := '0';             -- nios2_qsys_0_reset_n_reset_bridge_in_reset.reset
		crypto_module_read_master_address                : in  std_logic_vector(31 downto 0) := (others => '0'); --                  crypto_module_read_master.address
		crypto_module_read_master_waitrequest            : out std_logic;                                        --                                           .waitrequest
		crypto_module_read_master_read                   : in  std_logic                     := '0';             --                                           .read
		crypto_module_read_master_readdata               : out std_logic_vector(31 downto 0);                    --                                           .readdata
		crypto_module_write_master_address               : in  std_logic_vector(31 downto 0) := (others => '0'); --                 crypto_module_write_master.address
		crypto_module_write_master_waitrequest           : out std_logic;                                        --                                           .waitrequest
		crypto_module_write_master_write                 : in  std_logic                     := '0';             --                                           .write
		crypto_module_write_master_writedata             : in  std_logic_vector(31 downto 0) := (others => '0'); --                                           .writedata
		nios2_qsys_0_data_master_address                 : in  std_logic_vector(19 downto 0) := (others => '0'); --                   nios2_qsys_0_data_master.address
		nios2_qsys_0_data_master_waitrequest             : out std_logic;                                        --                                           .waitrequest
		nios2_qsys_0_data_master_byteenable              : in  std_logic_vector(3 downto 0)  := (others => '0'); --                                           .byteenable
		nios2_qsys_0_data_master_read                    : in  std_logic                     := '0';             --                                           .read
		nios2_qsys_0_data_master_readdata                : out std_logic_vector(31 downto 0);                    --                                           .readdata
		nios2_qsys_0_data_master_write                   : in  std_logic                     := '0';             --                                           .write
		nios2_qsys_0_data_master_writedata               : in  std_logic_vector(31 downto 0) := (others => '0'); --                                           .writedata
		nios2_qsys_0_data_master_debugaccess             : in  std_logic                     := '0';             --                                           .debugaccess
		nios2_qsys_0_instruction_master_address          : in  std_logic_vector(19 downto 0) := (others => '0'); --            nios2_qsys_0_instruction_master.address
		nios2_qsys_0_instruction_master_waitrequest      : out std_logic;                                        --                                           .waitrequest
		nios2_qsys_0_instruction_master_read             : in  std_logic                     := '0';             --                                           .read
		nios2_qsys_0_instruction_master_readdata         : out std_logic_vector(31 downto 0);                    --                                           .readdata
		crypto_module_csr_address                        : out std_logic_vector(2 downto 0);                     --                          crypto_module_csr.address
		crypto_module_csr_write                          : out std_logic;                                        --                                           .write
		crypto_module_csr_readdata                       : in  std_logic_vector(31 downto 0) := (others => '0'); --                                           .readdata
		crypto_module_csr_writedata                      : out std_logic_vector(31 downto 0);                    --                                           .writedata
		incoming_memory_s1_address                       : out std_logic_vector(11 downto 0);                    --                         incoming_memory_s1.address
		incoming_memory_s1_write                         : out std_logic;                                        --                                           .write
		incoming_memory_s1_readdata                      : in  std_logic_vector(31 downto 0) := (others => '0'); --                                           .readdata
		incoming_memory_s1_writedata                     : out std_logic_vector(31 downto 0);                    --                                           .writedata
		incoming_memory_s1_byteenable                    : out std_logic_vector(3 downto 0);                     --                                           .byteenable
		incoming_memory_s1_chipselect                    : out std_logic;                                        --                                           .chipselect
		incoming_memory_s1_clken                         : out std_logic;                                        --                                           .clken
		instruction_memory_s1_address                    : out std_logic_vector(15 downto 0);                    --                      instruction_memory_s1.address
		instruction_memory_s1_write                      : out std_logic;                                        --                                           .write
		instruction_memory_s1_readdata                   : in  std_logic_vector(31 downto 0) := (others => '0'); --                                           .readdata
		instruction_memory_s1_writedata                  : out std_logic_vector(31 downto 0);                    --                                           .writedata
		instruction_memory_s1_byteenable                 : out std_logic_vector(3 downto 0);                     --                                           .byteenable
		instruction_memory_s1_chipselect                 : out std_logic;                                        --                                           .chipselect
		instruction_memory_s1_clken                      : out std_logic;                                        --                                           .clken
		jtag_uart_0_avalon_jtag_slave_address            : out std_logic_vector(0 downto 0);                     --              jtag_uart_0_avalon_jtag_slave.address
		jtag_uart_0_avalon_jtag_slave_write              : out std_logic;                                        --                                           .write
		jtag_uart_0_avalon_jtag_slave_read               : out std_logic;                                        --                                           .read
		jtag_uart_0_avalon_jtag_slave_readdata           : in  std_logic_vector(31 downto 0) := (others => '0'); --                                           .readdata
		jtag_uart_0_avalon_jtag_slave_writedata          : out std_logic_vector(31 downto 0);                    --                                           .writedata
		jtag_uart_0_avalon_jtag_slave_waitrequest        : in  std_logic                     := '0';             --                                           .waitrequest
		jtag_uart_0_avalon_jtag_slave_chipselect         : out std_logic;                                        --                                           .chipselect
		nios2_qsys_0_jtag_debug_module_address           : out std_logic_vector(8 downto 0);                     --             nios2_qsys_0_jtag_debug_module.address
		nios2_qsys_0_jtag_debug_module_write             : out std_logic;                                        --                                           .write
		nios2_qsys_0_jtag_debug_module_read              : out std_logic;                                        --                                           .read
		nios2_qsys_0_jtag_debug_module_readdata          : in  std_logic_vector(31 downto 0) := (others => '0'); --                                           .readdata
		nios2_qsys_0_jtag_debug_module_writedata         : out std_logic_vector(31 downto 0);                    --                                           .writedata
		nios2_qsys_0_jtag_debug_module_byteenable        : out std_logic_vector(3 downto 0);                     --                                           .byteenable
		nios2_qsys_0_jtag_debug_module_waitrequest       : in  std_logic                     := '0';             --                                           .waitrequest
		nios2_qsys_0_jtag_debug_module_debugaccess       : out std_logic;                                        --                                           .debugaccess
		outgoing_memory_s1_address                       : out std_logic_vector(11 downto 0);                    --                         outgoing_memory_s1.address
		outgoing_memory_s1_write                         : out std_logic;                                        --                                           .write
		outgoing_memory_s1_readdata                      : in  std_logic_vector(31 downto 0) := (others => '0'); --                                           .readdata
		outgoing_memory_s1_writedata                     : out std_logic_vector(31 downto 0);                    --                                           .writedata
		outgoing_memory_s1_byteenable                    : out std_logic_vector(3 downto 0);                     --                                           .byteenable
		outgoing_memory_s1_chipselect                    : out std_logic;                                        --                                           .chipselect
		outgoing_memory_s1_clken                         : out std_logic;                                        --                                           .clken
		stack_heap_s1_address                            : out std_logic_vector(11 downto 0);                    --                              stack_heap_s1.address
		stack_heap_s1_write                              : out std_logic;                                        --                                           .write
		stack_heap_s1_readdata                           : in  std_logic_vector(31 downto 0) := (others => '0'); --                                           .readdata
		stack_heap_s1_writedata                          : out std_logic_vector(31 downto 0);                    --                                           .writedata
		stack_heap_s1_byteenable                         : out std_logic_vector(3 downto 0);                     --                                           .byteenable
		stack_heap_s1_chipselect                         : out std_logic;                                        --                                           .chipselect
		stack_heap_s1_clken                              : out std_logic;                                        --                                           .clken
		sysid_qsys_0_control_slave_address               : out std_logic_vector(0 downto 0);                     --                 sysid_qsys_0_control_slave.address
		sysid_qsys_0_control_slave_readdata              : in  std_logic_vector(31 downto 0) := (others => '0'); --                                           .readdata
		timer_0_s1_address                               : out std_logic_vector(3 downto 0);                     --                                 timer_0_s1.address
		timer_0_s1_write                                 : out std_logic;                                        --                                           .write
		timer_0_s1_readdata                              : in  std_logic_vector(15 downto 0) := (others => '0'); --                                           .readdata
		timer_0_s1_writedata                             : out std_logic_vector(15 downto 0);                    --                                           .writedata
		timer_0_s1_chipselect                            : out std_logic;                                        --                                           .chipselect
		timestamp_timer_s1_address                       : out std_logic_vector(3 downto 0);                     --                         timestamp_timer_s1.address
		timestamp_timer_s1_write                         : out std_logic;                                        --                                           .write
		timestamp_timer_s1_readdata                      : in  std_logic_vector(15 downto 0) := (others => '0'); --                                           .readdata
		timestamp_timer_s1_writedata                     : out std_logic_vector(15 downto 0);                    --                                           .writedata
		timestamp_timer_s1_chipselect                    : out std_logic                                         --                                           .chipselect
	);
end entity crypto_test_mm_interconnect_0;

architecture rtl of crypto_test_mm_interconnect_0 is
	component altera_merlin_master_agent is
		generic (
			PKT_ORI_BURST_SIZE_H      : integer := 116;
			PKT_ORI_BURST_SIZE_L      : integer := 114;
			PKT_RESPONSE_STATUS_H     : integer := 113;
			PKT_RESPONSE_STATUS_L     : integer := 112;
			PKT_QOS_H                 : integer := 111;
			PKT_QOS_L                 : integer := 108;
			PKT_DATA_SIDEBAND_H       : integer := 107;
			PKT_DATA_SIDEBAND_L       : integer := 100;
			PKT_ADDR_SIDEBAND_H       : integer := 99;
			PKT_ADDR_SIDEBAND_L       : integer := 95;
			PKT_BURST_TYPE_H          : integer := 94;
			PKT_BURST_TYPE_L          : integer := 93;
			PKT_CACHE_H               : integer := 92;
			PKT_CACHE_L               : integer := 89;
			PKT_THREAD_ID_H           : integer := 88;
			PKT_THREAD_ID_L           : integer := 87;
			PKT_BURST_SIZE_H          : integer := 86;
			PKT_BURST_SIZE_L          : integer := 84;
			PKT_TRANS_EXCLUSIVE       : integer := 83;
			PKT_TRANS_LOCK            : integer := 82;
			PKT_BEGIN_BURST           : integer := 81;
			PKT_PROTECTION_H          : integer := 80;
			PKT_PROTECTION_L          : integer := 80;
			PKT_BURSTWRAP_H           : integer := 79;
			PKT_BURSTWRAP_L           : integer := 77;
			PKT_BYTE_CNT_H            : integer := 76;
			PKT_BYTE_CNT_L            : integer := 74;
			PKT_ADDR_H                : integer := 73;
			PKT_ADDR_L                : integer := 42;
			PKT_TRANS_COMPRESSED_READ : integer := 41;
			PKT_TRANS_POSTED          : integer := 40;
			PKT_TRANS_WRITE           : integer := 39;
			PKT_TRANS_READ            : integer := 38;
			PKT_DATA_H                : integer := 37;
			PKT_DATA_L                : integer := 6;
			PKT_BYTEEN_H              : integer := 5;
			PKT_BYTEEN_L              : integer := 2;
			PKT_SRC_ID_H              : integer := 1;
			PKT_SRC_ID_L              : integer := 1;
			PKT_DEST_ID_H             : integer := 0;
			PKT_DEST_ID_L             : integer := 0;
			ST_DATA_W                 : integer := 115;
			ST_CHANNEL_W              : integer := 1;
			AV_BURSTCOUNT_W           : integer := 3;
			SUPPRESS_0_BYTEEN_RSP     : integer := 1;
			ID                        : integer := 1;
			BURSTWRAP_VALUE           : integer := 4;
			CACHE_VALUE               : integer := 0;
			SECURE_ACCESS_BIT         : integer := 1;
			USE_READRESPONSE          : integer := 0;
			USE_WRITERESPONSE         : integer := 0
		);
		port (
			clk                   : in  std_logic                      := 'X';             -- clk
			reset                 : in  std_logic                      := 'X';             -- reset
			av_address            : in  std_logic_vector(31 downto 0)  := (others => 'X'); -- address
			av_write              : in  std_logic                      := 'X';             -- write
			av_read               : in  std_logic                      := 'X';             -- read
			av_writedata          : in  std_logic_vector(31 downto 0)  := (others => 'X'); -- writedata
			av_readdata           : out std_logic_vector(31 downto 0);                     -- readdata
			av_waitrequest        : out std_logic;                                         -- waitrequest
			av_readdatavalid      : out std_logic;                                         -- readdatavalid
			av_byteenable         : in  std_logic_vector(3 downto 0)   := (others => 'X'); -- byteenable
			av_burstcount         : in  std_logic_vector(2 downto 0)   := (others => 'X'); -- burstcount
			av_debugaccess        : in  std_logic                      := 'X';             -- debugaccess
			av_lock               : in  std_logic                      := 'X';             -- lock
			cp_valid              : out std_logic;                                         -- valid
			cp_data               : out std_logic_vector(109 downto 0);                    -- data
			cp_startofpacket      : out std_logic;                                         -- startofpacket
			cp_endofpacket        : out std_logic;                                         -- endofpacket
			cp_ready              : in  std_logic                      := 'X';             -- ready
			rp_valid              : in  std_logic                      := 'X';             -- valid
			rp_data               : in  std_logic_vector(109 downto 0) := (others => 'X'); -- data
			rp_channel            : in  std_logic_vector(9 downto 0)   := (others => 'X'); -- channel
			rp_startofpacket      : in  std_logic                      := 'X';             -- startofpacket
			rp_endofpacket        : in  std_logic                      := 'X';             -- endofpacket
			rp_ready              : out std_logic;                                         -- ready
			av_response           : out std_logic_vector(1 downto 0);                      -- response
			av_writeresponsevalid : out std_logic                                          -- writeresponsevalid
		);
	end component altera_merlin_master_agent;

	component altera_merlin_slave_agent is
		generic (
			PKT_ORI_BURST_SIZE_H      : integer := 90;
			PKT_ORI_BURST_SIZE_L      : integer := 88;
			PKT_RESPONSE_STATUS_H     : integer := 87;
			PKT_RESPONSE_STATUS_L     : integer := 86;
			PKT_BURST_SIZE_H          : integer := 85;
			PKT_BURST_SIZE_L          : integer := 83;
			PKT_TRANS_LOCK            : integer := 82;
			PKT_BEGIN_BURST           : integer := 81;
			PKT_PROTECTION_H          : integer := 80;
			PKT_PROTECTION_L          : integer := 80;
			PKT_BURSTWRAP_H           : integer := 79;
			PKT_BURSTWRAP_L           : integer := 77;
			PKT_BYTE_CNT_H            : integer := 76;
			PKT_BYTE_CNT_L            : integer := 74;
			PKT_ADDR_H                : integer := 73;
			PKT_ADDR_L                : integer := 42;
			PKT_TRANS_COMPRESSED_READ : integer := 41;
			PKT_TRANS_POSTED          : integer := 40;
			PKT_TRANS_WRITE           : integer := 39;
			PKT_TRANS_READ            : integer := 38;
			PKT_DATA_H                : integer := 37;
			PKT_DATA_L                : integer := 6;
			PKT_BYTEEN_H              : integer := 5;
			PKT_BYTEEN_L              : integer := 2;
			PKT_SRC_ID_H              : integer := 1;
			PKT_SRC_ID_L              : integer := 1;
			PKT_DEST_ID_H             : integer := 0;
			PKT_DEST_ID_L             : integer := 0;
			PKT_SYMBOL_W              : integer := 8;
			ST_CHANNEL_W              : integer := 8;
			ST_DATA_W                 : integer := 96;
			AVS_BURSTCOUNT_W          : integer := 4;
			SUPPRESS_0_BYTEEN_CMD     : integer := 1;
			PREVENT_FIFO_OVERFLOW     : integer := 0;
			USE_READRESPONSE          : integer := 0;
			USE_WRITERESPONSE         : integer := 0
		);
		port (
			clk                     : in  std_logic                      := 'X';             -- clk
			reset                   : in  std_logic                      := 'X';             -- reset
			m0_address              : out std_logic_vector(31 downto 0);                     -- address
			m0_burstcount           : out std_logic_vector(2 downto 0);                      -- burstcount
			m0_byteenable           : out std_logic_vector(3 downto 0);                      -- byteenable
			m0_debugaccess          : out std_logic;                                         -- debugaccess
			m0_lock                 : out std_logic;                                         -- lock
			m0_readdata             : in  std_logic_vector(31 downto 0)  := (others => 'X'); -- readdata
			m0_readdatavalid        : in  std_logic                      := 'X';             -- readdatavalid
			m0_read                 : out std_logic;                                         -- read
			m0_waitrequest          : in  std_logic                      := 'X';             -- waitrequest
			m0_writedata            : out std_logic_vector(31 downto 0);                     -- writedata
			m0_write                : out std_logic;                                         -- write
			rp_endofpacket          : out std_logic;                                         -- endofpacket
			rp_ready                : in  std_logic                      := 'X';             -- ready
			rp_valid                : out std_logic;                                         -- valid
			rp_data                 : out std_logic_vector(109 downto 0);                    -- data
			rp_startofpacket        : out std_logic;                                         -- startofpacket
			cp_ready                : out std_logic;                                         -- ready
			cp_valid                : in  std_logic                      := 'X';             -- valid
			cp_data                 : in  std_logic_vector(109 downto 0) := (others => 'X'); -- data
			cp_startofpacket        : in  std_logic                      := 'X';             -- startofpacket
			cp_endofpacket          : in  std_logic                      := 'X';             -- endofpacket
			cp_channel              : in  std_logic_vector(9 downto 0)   := (others => 'X'); -- channel
			rf_sink_ready           : out std_logic;                                         -- ready
			rf_sink_valid           : in  std_logic                      := 'X';             -- valid
			rf_sink_startofpacket   : in  std_logic                      := 'X';             -- startofpacket
			rf_sink_endofpacket     : in  std_logic                      := 'X';             -- endofpacket
			rf_sink_data            : in  std_logic_vector(110 downto 0) := (others => 'X'); -- data
			rf_source_ready         : in  std_logic                      := 'X';             -- ready
			rf_source_valid         : out std_logic;                                         -- valid
			rf_source_startofpacket : out std_logic;                                         -- startofpacket
			rf_source_endofpacket   : out std_logic;                                         -- endofpacket
			rf_source_data          : out std_logic_vector(110 downto 0);                    -- data
			rdata_fifo_sink_ready   : out std_logic;                                         -- ready
			rdata_fifo_sink_valid   : in  std_logic                      := 'X';             -- valid
			rdata_fifo_sink_data    : in  std_logic_vector(33 downto 0)  := (others => 'X'); -- data
			rdata_fifo_src_ready    : in  std_logic                      := 'X';             -- ready
			rdata_fifo_src_valid    : out std_logic;                                         -- valid
			rdata_fifo_src_data     : out std_logic_vector(33 downto 0);                     -- data
			m0_response             : in  std_logic_vector(1 downto 0)   := (others => 'X'); -- response
			m0_writeresponsevalid   : in  std_logic                      := 'X'              -- writeresponsevalid
		);
	end component altera_merlin_slave_agent;

	component crypto_test_mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo is
		port (
			clk               : in  std_logic                      := 'X';             -- clk
			reset             : in  std_logic                      := 'X';             -- reset
			in_data           : in  std_logic_vector(110 downto 0) := (others => 'X'); -- data
			in_valid          : in  std_logic                      := 'X';             -- valid
			in_ready          : out std_logic;                                         -- ready
			in_startofpacket  : in  std_logic                      := 'X';             -- startofpacket
			in_endofpacket    : in  std_logic                      := 'X';             -- endofpacket
			out_data          : out std_logic_vector(110 downto 0);                    -- data
			out_valid         : out std_logic;                                         -- valid
			out_ready         : in  std_logic                      := 'X';             -- ready
			out_startofpacket : out std_logic;                                         -- startofpacket
			out_endofpacket   : out std_logic                                          -- endofpacket
		);
	end component crypto_test_mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo;

	component crypto_test_mm_interconnect_0_router is
		port (
			sink_ready         : out std_logic;                                         -- ready
			sink_valid         : in  std_logic                      := 'X';             -- valid
			sink_data          : in  std_logic_vector(109 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			clk                : in  std_logic                      := 'X';             -- clk
			reset              : in  std_logic                      := 'X';             -- reset
			src_ready          : in  std_logic                      := 'X';             -- ready
			src_valid          : out std_logic;                                         -- valid
			src_data           : out std_logic_vector(109 downto 0);                    -- data
			src_channel        : out std_logic_vector(9 downto 0);                      -- channel
			src_startofpacket  : out std_logic;                                         -- startofpacket
			src_endofpacket    : out std_logic                                          -- endofpacket
		);
	end component crypto_test_mm_interconnect_0_router;

	component crypto_test_mm_interconnect_0_router_001 is
		port (
			sink_ready         : out std_logic;                                         -- ready
			sink_valid         : in  std_logic                      := 'X';             -- valid
			sink_data          : in  std_logic_vector(109 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			clk                : in  std_logic                      := 'X';             -- clk
			reset              : in  std_logic                      := 'X';             -- reset
			src_ready          : in  std_logic                      := 'X';             -- ready
			src_valid          : out std_logic;                                         -- valid
			src_data           : out std_logic_vector(109 downto 0);                    -- data
			src_channel        : out std_logic_vector(9 downto 0);                      -- channel
			src_startofpacket  : out std_logic;                                         -- startofpacket
			src_endofpacket    : out std_logic                                          -- endofpacket
		);
	end component crypto_test_mm_interconnect_0_router_001;

	component crypto_test_mm_interconnect_0_router_003 is
		port (
			sink_ready         : out std_logic;                                         -- ready
			sink_valid         : in  std_logic                      := 'X';             -- valid
			sink_data          : in  std_logic_vector(109 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			clk                : in  std_logic                      := 'X';             -- clk
			reset              : in  std_logic                      := 'X';             -- reset
			src_ready          : in  std_logic                      := 'X';             -- ready
			src_valid          : out std_logic;                                         -- valid
			src_data           : out std_logic_vector(109 downto 0);                    -- data
			src_channel        : out std_logic_vector(9 downto 0);                      -- channel
			src_startofpacket  : out std_logic;                                         -- startofpacket
			src_endofpacket    : out std_logic                                          -- endofpacket
		);
	end component crypto_test_mm_interconnect_0_router_003;

	component crypto_test_mm_interconnect_0_router_004 is
		port (
			sink_ready         : out std_logic;                                         -- ready
			sink_valid         : in  std_logic                      := 'X';             -- valid
			sink_data          : in  std_logic_vector(109 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			clk                : in  std_logic                      := 'X';             -- clk
			reset              : in  std_logic                      := 'X';             -- reset
			src_ready          : in  std_logic                      := 'X';             -- ready
			src_valid          : out std_logic;                                         -- valid
			src_data           : out std_logic_vector(109 downto 0);                    -- data
			src_channel        : out std_logic_vector(9 downto 0);                      -- channel
			src_startofpacket  : out std_logic;                                         -- startofpacket
			src_endofpacket    : out std_logic                                          -- endofpacket
		);
	end component crypto_test_mm_interconnect_0_router_004;

	component crypto_test_mm_interconnect_0_router_007 is
		port (
			sink_ready         : out std_logic;                                         -- ready
			sink_valid         : in  std_logic                      := 'X';             -- valid
			sink_data          : in  std_logic_vector(109 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			clk                : in  std_logic                      := 'X';             -- clk
			reset              : in  std_logic                      := 'X';             -- reset
			src_ready          : in  std_logic                      := 'X';             -- ready
			src_valid          : out std_logic;                                         -- valid
			src_data           : out std_logic_vector(109 downto 0);                    -- data
			src_channel        : out std_logic_vector(9 downto 0);                      -- channel
			src_startofpacket  : out std_logic;                                         -- startofpacket
			src_endofpacket    : out std_logic                                          -- endofpacket
		);
	end component crypto_test_mm_interconnect_0_router_007;

	component crypto_test_mm_interconnect_0_router_011 is
		port (
			sink_ready         : out std_logic;                                         -- ready
			sink_valid         : in  std_logic                      := 'X';             -- valid
			sink_data          : in  std_logic_vector(109 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			clk                : in  std_logic                      := 'X';             -- clk
			reset              : in  std_logic                      := 'X';             -- reset
			src_ready          : in  std_logic                      := 'X';             -- ready
			src_valid          : out std_logic;                                         -- valid
			src_data           : out std_logic_vector(109 downto 0);                    -- data
			src_channel        : out std_logic_vector(9 downto 0);                      -- channel
			src_startofpacket  : out std_logic;                                         -- startofpacket
			src_endofpacket    : out std_logic                                          -- endofpacket
		);
	end component crypto_test_mm_interconnect_0_router_011;

	component crypto_test_mm_interconnect_0_cmd_demux is
		port (
			clk                : in  std_logic                      := 'X';             -- clk
			reset              : in  std_logic                      := 'X';             -- reset
			sink_ready         : out std_logic;                                         -- ready
			sink_channel       : in  std_logic_vector(9 downto 0)   := (others => 'X'); -- channel
			sink_data          : in  std_logic_vector(109 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			sink_valid         : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- valid
			src0_ready         : in  std_logic                      := 'X';             -- ready
			src0_valid         : out std_logic;                                         -- valid
			src0_data          : out std_logic_vector(109 downto 0);                    -- data
			src0_channel       : out std_logic_vector(9 downto 0);                      -- channel
			src0_startofpacket : out std_logic;                                         -- startofpacket
			src0_endofpacket   : out std_logic;                                         -- endofpacket
			src1_ready         : in  std_logic                      := 'X';             -- ready
			src1_valid         : out std_logic;                                         -- valid
			src1_data          : out std_logic_vector(109 downto 0);                    -- data
			src1_channel       : out std_logic_vector(9 downto 0);                      -- channel
			src1_startofpacket : out std_logic;                                         -- startofpacket
			src1_endofpacket   : out std_logic;                                         -- endofpacket
			src2_ready         : in  std_logic                      := 'X';             -- ready
			src2_valid         : out std_logic;                                         -- valid
			src2_data          : out std_logic_vector(109 downto 0);                    -- data
			src2_channel       : out std_logic_vector(9 downto 0);                      -- channel
			src2_startofpacket : out std_logic;                                         -- startofpacket
			src2_endofpacket   : out std_logic;                                         -- endofpacket
			src3_ready         : in  std_logic                      := 'X';             -- ready
			src3_valid         : out std_logic;                                         -- valid
			src3_data          : out std_logic_vector(109 downto 0);                    -- data
			src3_channel       : out std_logic_vector(9 downto 0);                      -- channel
			src3_startofpacket : out std_logic;                                         -- startofpacket
			src3_endofpacket   : out std_logic;                                         -- endofpacket
			src4_ready         : in  std_logic                      := 'X';             -- ready
			src4_valid         : out std_logic;                                         -- valid
			src4_data          : out std_logic_vector(109 downto 0);                    -- data
			src4_channel       : out std_logic_vector(9 downto 0);                      -- channel
			src4_startofpacket : out std_logic;                                         -- startofpacket
			src4_endofpacket   : out std_logic;                                         -- endofpacket
			src5_ready         : in  std_logic                      := 'X';             -- ready
			src5_valid         : out std_logic;                                         -- valid
			src5_data          : out std_logic_vector(109 downto 0);                    -- data
			src5_channel       : out std_logic_vector(9 downto 0);                      -- channel
			src5_startofpacket : out std_logic;                                         -- startofpacket
			src5_endofpacket   : out std_logic;                                         -- endofpacket
			src6_ready         : in  std_logic                      := 'X';             -- ready
			src6_valid         : out std_logic;                                         -- valid
			src6_data          : out std_logic_vector(109 downto 0);                    -- data
			src6_channel       : out std_logic_vector(9 downto 0);                      -- channel
			src6_startofpacket : out std_logic;                                         -- startofpacket
			src6_endofpacket   : out std_logic;                                         -- endofpacket
			src7_ready         : in  std_logic                      := 'X';             -- ready
			src7_valid         : out std_logic;                                         -- valid
			src7_data          : out std_logic_vector(109 downto 0);                    -- data
			src7_channel       : out std_logic_vector(9 downto 0);                      -- channel
			src7_startofpacket : out std_logic;                                         -- startofpacket
			src7_endofpacket   : out std_logic;                                         -- endofpacket
			src8_ready         : in  std_logic                      := 'X';             -- ready
			src8_valid         : out std_logic;                                         -- valid
			src8_data          : out std_logic_vector(109 downto 0);                    -- data
			src8_channel       : out std_logic_vector(9 downto 0);                      -- channel
			src8_startofpacket : out std_logic;                                         -- startofpacket
			src8_endofpacket   : out std_logic;                                         -- endofpacket
			src9_ready         : in  std_logic                      := 'X';             -- ready
			src9_valid         : out std_logic;                                         -- valid
			src9_data          : out std_logic_vector(109 downto 0);                    -- data
			src9_channel       : out std_logic_vector(9 downto 0);                      -- channel
			src9_startofpacket : out std_logic;                                         -- startofpacket
			src9_endofpacket   : out std_logic                                          -- endofpacket
		);
	end component crypto_test_mm_interconnect_0_cmd_demux;

	component crypto_test_mm_interconnect_0_cmd_demux_001 is
		port (
			clk                : in  std_logic                      := 'X';             -- clk
			reset              : in  std_logic                      := 'X';             -- reset
			sink_ready         : out std_logic;                                         -- ready
			sink_channel       : in  std_logic_vector(9 downto 0)   := (others => 'X'); -- channel
			sink_data          : in  std_logic_vector(109 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			sink_valid         : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- valid
			src0_ready         : in  std_logic                      := 'X';             -- ready
			src0_valid         : out std_logic;                                         -- valid
			src0_data          : out std_logic_vector(109 downto 0);                    -- data
			src0_channel       : out std_logic_vector(9 downto 0);                      -- channel
			src0_startofpacket : out std_logic;                                         -- startofpacket
			src0_endofpacket   : out std_logic;                                         -- endofpacket
			src1_ready         : in  std_logic                      := 'X';             -- ready
			src1_valid         : out std_logic;                                         -- valid
			src1_data          : out std_logic_vector(109 downto 0);                    -- data
			src1_channel       : out std_logic_vector(9 downto 0);                      -- channel
			src1_startofpacket : out std_logic;                                         -- startofpacket
			src1_endofpacket   : out std_logic                                          -- endofpacket
		);
	end component crypto_test_mm_interconnect_0_cmd_demux_001;

	component crypto_test_mm_interconnect_0_cmd_mux is
		port (
			clk                 : in  std_logic                      := 'X';             -- clk
			reset               : in  std_logic                      := 'X';             -- reset
			src_ready           : in  std_logic                      := 'X';             -- ready
			src_valid           : out std_logic;                                         -- valid
			src_data            : out std_logic_vector(109 downto 0);                    -- data
			src_channel         : out std_logic_vector(9 downto 0);                      -- channel
			src_startofpacket   : out std_logic;                                         -- startofpacket
			src_endofpacket     : out std_logic;                                         -- endofpacket
			sink0_ready         : out std_logic;                                         -- ready
			sink0_valid         : in  std_logic                      := 'X';             -- valid
			sink0_channel       : in  std_logic_vector(9 downto 0)   := (others => 'X'); -- channel
			sink0_data          : in  std_logic_vector(109 downto 0) := (others => 'X'); -- data
			sink0_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink0_endofpacket   : in  std_logic                      := 'X'              -- endofpacket
		);
	end component crypto_test_mm_interconnect_0_cmd_mux;

	component crypto_test_mm_interconnect_0_cmd_mux_003 is
		port (
			clk                 : in  std_logic                      := 'X';             -- clk
			reset               : in  std_logic                      := 'X';             -- reset
			src_ready           : in  std_logic                      := 'X';             -- ready
			src_valid           : out std_logic;                                         -- valid
			src_data            : out std_logic_vector(109 downto 0);                    -- data
			src_channel         : out std_logic_vector(9 downto 0);                      -- channel
			src_startofpacket   : out std_logic;                                         -- startofpacket
			src_endofpacket     : out std_logic;                                         -- endofpacket
			sink0_ready         : out std_logic;                                         -- ready
			sink0_valid         : in  std_logic                      := 'X';             -- valid
			sink0_channel       : in  std_logic_vector(9 downto 0)   := (others => 'X'); -- channel
			sink0_data          : in  std_logic_vector(109 downto 0) := (others => 'X'); -- data
			sink0_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink0_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			sink1_ready         : out std_logic;                                         -- ready
			sink1_valid         : in  std_logic                      := 'X';             -- valid
			sink1_channel       : in  std_logic_vector(9 downto 0)   := (others => 'X'); -- channel
			sink1_data          : in  std_logic_vector(109 downto 0) := (others => 'X'); -- data
			sink1_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink1_endofpacket   : in  std_logic                      := 'X'              -- endofpacket
		);
	end component crypto_test_mm_interconnect_0_cmd_mux_003;

	component crypto_test_mm_interconnect_0_cmd_mux_007 is
		port (
			clk                 : in  std_logic                      := 'X';             -- clk
			reset               : in  std_logic                      := 'X';             -- reset
			src_ready           : in  std_logic                      := 'X';             -- ready
			src_valid           : out std_logic;                                         -- valid
			src_data            : out std_logic_vector(109 downto 0);                    -- data
			src_channel         : out std_logic_vector(9 downto 0);                      -- channel
			src_startofpacket   : out std_logic;                                         -- startofpacket
			src_endofpacket     : out std_logic;                                         -- endofpacket
			sink0_ready         : out std_logic;                                         -- ready
			sink0_valid         : in  std_logic                      := 'X';             -- valid
			sink0_channel       : in  std_logic_vector(9 downto 0)   := (others => 'X'); -- channel
			sink0_data          : in  std_logic_vector(109 downto 0) := (others => 'X'); -- data
			sink0_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink0_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			sink1_ready         : out std_logic;                                         -- ready
			sink1_valid         : in  std_logic                      := 'X';             -- valid
			sink1_channel       : in  std_logic_vector(9 downto 0)   := (others => 'X'); -- channel
			sink1_data          : in  std_logic_vector(109 downto 0) := (others => 'X'); -- data
			sink1_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink1_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			sink2_ready         : out std_logic;                                         -- ready
			sink2_valid         : in  std_logic                      := 'X';             -- valid
			sink2_channel       : in  std_logic_vector(9 downto 0)   := (others => 'X'); -- channel
			sink2_data          : in  std_logic_vector(109 downto 0) := (others => 'X'); -- data
			sink2_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink2_endofpacket   : in  std_logic                      := 'X'              -- endofpacket
		);
	end component crypto_test_mm_interconnect_0_cmd_mux_007;

	component crypto_test_mm_interconnect_0_rsp_demux is
		port (
			clk                : in  std_logic                      := 'X';             -- clk
			reset              : in  std_logic                      := 'X';             -- reset
			sink_ready         : out std_logic;                                         -- ready
			sink_channel       : in  std_logic_vector(9 downto 0)   := (others => 'X'); -- channel
			sink_data          : in  std_logic_vector(109 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			sink_valid         : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- valid
			src0_ready         : in  std_logic                      := 'X';             -- ready
			src0_valid         : out std_logic;                                         -- valid
			src0_data          : out std_logic_vector(109 downto 0);                    -- data
			src0_channel       : out std_logic_vector(9 downto 0);                      -- channel
			src0_startofpacket : out std_logic;                                         -- startofpacket
			src0_endofpacket   : out std_logic                                          -- endofpacket
		);
	end component crypto_test_mm_interconnect_0_rsp_demux;

	component crypto_test_mm_interconnect_0_rsp_demux_007 is
		port (
			clk                : in  std_logic                      := 'X';             -- clk
			reset              : in  std_logic                      := 'X';             -- reset
			sink_ready         : out std_logic;                                         -- ready
			sink_channel       : in  std_logic_vector(9 downto 0)   := (others => 'X'); -- channel
			sink_data          : in  std_logic_vector(109 downto 0) := (others => 'X'); -- data
			sink_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			sink_valid         : in  std_logic_vector(0 downto 0)   := (others => 'X'); -- valid
			src0_ready         : in  std_logic                      := 'X';             -- ready
			src0_valid         : out std_logic;                                         -- valid
			src0_data          : out std_logic_vector(109 downto 0);                    -- data
			src0_channel       : out std_logic_vector(9 downto 0);                      -- channel
			src0_startofpacket : out std_logic;                                         -- startofpacket
			src0_endofpacket   : out std_logic;                                         -- endofpacket
			src1_ready         : in  std_logic                      := 'X';             -- ready
			src1_valid         : out std_logic;                                         -- valid
			src1_data          : out std_logic_vector(109 downto 0);                    -- data
			src1_channel       : out std_logic_vector(9 downto 0);                      -- channel
			src1_startofpacket : out std_logic;                                         -- startofpacket
			src1_endofpacket   : out std_logic;                                         -- endofpacket
			src2_ready         : in  std_logic                      := 'X';             -- ready
			src2_valid         : out std_logic;                                         -- valid
			src2_data          : out std_logic_vector(109 downto 0);                    -- data
			src2_channel       : out std_logic_vector(9 downto 0);                      -- channel
			src2_startofpacket : out std_logic;                                         -- startofpacket
			src2_endofpacket   : out std_logic                                          -- endofpacket
		);
	end component crypto_test_mm_interconnect_0_rsp_demux_007;

	component crypto_test_mm_interconnect_0_rsp_mux is
		port (
			clk                 : in  std_logic                      := 'X';             -- clk
			reset               : in  std_logic                      := 'X';             -- reset
			src_ready           : in  std_logic                      := 'X';             -- ready
			src_valid           : out std_logic;                                         -- valid
			src_data            : out std_logic_vector(109 downto 0);                    -- data
			src_channel         : out std_logic_vector(9 downto 0);                      -- channel
			src_startofpacket   : out std_logic;                                         -- startofpacket
			src_endofpacket     : out std_logic;                                         -- endofpacket
			sink0_ready         : out std_logic;                                         -- ready
			sink0_valid         : in  std_logic                      := 'X';             -- valid
			sink0_channel       : in  std_logic_vector(9 downto 0)   := (others => 'X'); -- channel
			sink0_data          : in  std_logic_vector(109 downto 0) := (others => 'X'); -- data
			sink0_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink0_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			sink1_ready         : out std_logic;                                         -- ready
			sink1_valid         : in  std_logic                      := 'X';             -- valid
			sink1_channel       : in  std_logic_vector(9 downto 0)   := (others => 'X'); -- channel
			sink1_data          : in  std_logic_vector(109 downto 0) := (others => 'X'); -- data
			sink1_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink1_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			sink2_ready         : out std_logic;                                         -- ready
			sink2_valid         : in  std_logic                      := 'X';             -- valid
			sink2_channel       : in  std_logic_vector(9 downto 0)   := (others => 'X'); -- channel
			sink2_data          : in  std_logic_vector(109 downto 0) := (others => 'X'); -- data
			sink2_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink2_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			sink3_ready         : out std_logic;                                         -- ready
			sink3_valid         : in  std_logic                      := 'X';             -- valid
			sink3_channel       : in  std_logic_vector(9 downto 0)   := (others => 'X'); -- channel
			sink3_data          : in  std_logic_vector(109 downto 0) := (others => 'X'); -- data
			sink3_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink3_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			sink4_ready         : out std_logic;                                         -- ready
			sink4_valid         : in  std_logic                      := 'X';             -- valid
			sink4_channel       : in  std_logic_vector(9 downto 0)   := (others => 'X'); -- channel
			sink4_data          : in  std_logic_vector(109 downto 0) := (others => 'X'); -- data
			sink4_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink4_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			sink5_ready         : out std_logic;                                         -- ready
			sink5_valid         : in  std_logic                      := 'X';             -- valid
			sink5_channel       : in  std_logic_vector(9 downto 0)   := (others => 'X'); -- channel
			sink5_data          : in  std_logic_vector(109 downto 0) := (others => 'X'); -- data
			sink5_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink5_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			sink6_ready         : out std_logic;                                         -- ready
			sink6_valid         : in  std_logic                      := 'X';             -- valid
			sink6_channel       : in  std_logic_vector(9 downto 0)   := (others => 'X'); -- channel
			sink6_data          : in  std_logic_vector(109 downto 0) := (others => 'X'); -- data
			sink6_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink6_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			sink7_ready         : out std_logic;                                         -- ready
			sink7_valid         : in  std_logic                      := 'X';             -- valid
			sink7_channel       : in  std_logic_vector(9 downto 0)   := (others => 'X'); -- channel
			sink7_data          : in  std_logic_vector(109 downto 0) := (others => 'X'); -- data
			sink7_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink7_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			sink8_ready         : out std_logic;                                         -- ready
			sink8_valid         : in  std_logic                      := 'X';             -- valid
			sink8_channel       : in  std_logic_vector(9 downto 0)   := (others => 'X'); -- channel
			sink8_data          : in  std_logic_vector(109 downto 0) := (others => 'X'); -- data
			sink8_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink8_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			sink9_ready         : out std_logic;                                         -- ready
			sink9_valid         : in  std_logic                      := 'X';             -- valid
			sink9_channel       : in  std_logic_vector(9 downto 0)   := (others => 'X'); -- channel
			sink9_data          : in  std_logic_vector(109 downto 0) := (others => 'X'); -- data
			sink9_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink9_endofpacket   : in  std_logic                      := 'X'              -- endofpacket
		);
	end component crypto_test_mm_interconnect_0_rsp_mux;

	component crypto_test_mm_interconnect_0_rsp_mux_001 is
		port (
			clk                 : in  std_logic                      := 'X';             -- clk
			reset               : in  std_logic                      := 'X';             -- reset
			src_ready           : in  std_logic                      := 'X';             -- ready
			src_valid           : out std_logic;                                         -- valid
			src_data            : out std_logic_vector(109 downto 0);                    -- data
			src_channel         : out std_logic_vector(9 downto 0);                      -- channel
			src_startofpacket   : out std_logic;                                         -- startofpacket
			src_endofpacket     : out std_logic;                                         -- endofpacket
			sink0_ready         : out std_logic;                                         -- ready
			sink0_valid         : in  std_logic                      := 'X';             -- valid
			sink0_channel       : in  std_logic_vector(9 downto 0)   := (others => 'X'); -- channel
			sink0_data          : in  std_logic_vector(109 downto 0) := (others => 'X'); -- data
			sink0_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink0_endofpacket   : in  std_logic                      := 'X';             -- endofpacket
			sink1_ready         : out std_logic;                                         -- ready
			sink1_valid         : in  std_logic                      := 'X';             -- valid
			sink1_channel       : in  std_logic_vector(9 downto 0)   := (others => 'X'); -- channel
			sink1_data          : in  std_logic_vector(109 downto 0) := (others => 'X'); -- data
			sink1_startofpacket : in  std_logic                      := 'X';             -- startofpacket
			sink1_endofpacket   : in  std_logic                      := 'X'              -- endofpacket
		);
	end component crypto_test_mm_interconnect_0_rsp_mux_001;

	component crypto_test_mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- address
			uav_burstcount         : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			uav_read               : in  std_logic                     := 'X';             -- read
			uav_write              : in  std_logic                     := 'X';             -- write
			uav_waitrequest        : out std_logic;                                        -- waitrequest
			uav_readdatavalid      : out std_logic;                                        -- readdatavalid
			uav_byteenable         : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata           : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock               : in  std_logic                     := 'X';             -- lock
			uav_debugaccess        : in  std_logic                     := 'X';             -- debugaccess
			av_address             : out std_logic_vector(0 downto 0);                     -- address
			av_write               : out std_logic;                                        -- write
			av_read                : out std_logic;                                        -- read
			av_readdata            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			av_writedata           : out std_logic_vector(31 downto 0);                    -- writedata
			av_waitrequest         : in  std_logic                     := 'X';             -- waitrequest
			av_chipselect          : out std_logic;                                        -- chipselect
			av_begintransfer       : out std_logic;                                        -- begintransfer
			av_beginbursttransfer  : out std_logic;                                        -- beginbursttransfer
			av_burstcount          : out std_logic_vector(0 downto 0);                     -- burstcount
			av_byteenable          : out std_logic_vector(0 downto 0);                     -- byteenable
			av_readdatavalid       : in  std_logic                     := 'X';             -- readdatavalid
			av_writebyteenable     : out std_logic_vector(0 downto 0);                     -- writebyteenable
			av_lock                : out std_logic;                                        -- lock
			av_clken               : out std_logic;                                        -- clken
			uav_clken              : in  std_logic                     := 'X';             -- clken
			av_debugaccess         : out std_logic;                                        -- debugaccess
			av_outputenable        : out std_logic;                                        -- outputenable
			uav_response           : out std_logic_vector(1 downto 0);                     -- response
			av_response            : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponsevalid : out std_logic;                                        -- writeresponsevalid
			av_writeresponsevalid  : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component crypto_test_mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_translator;

	component crypto_test_mm_interconnect_0_sysid_qsys_0_control_slave_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- address
			uav_burstcount         : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			uav_read               : in  std_logic                     := 'X';             -- read
			uav_write              : in  std_logic                     := 'X';             -- write
			uav_waitrequest        : out std_logic;                                        -- waitrequest
			uav_readdatavalid      : out std_logic;                                        -- readdatavalid
			uav_byteenable         : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata           : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock               : in  std_logic                     := 'X';             -- lock
			uav_debugaccess        : in  std_logic                     := 'X';             -- debugaccess
			av_address             : out std_logic_vector(0 downto 0);                     -- address
			av_readdata            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			av_write               : out std_logic;                                        -- write
			av_read                : out std_logic;                                        -- read
			av_writedata           : out std_logic_vector(31 downto 0);                    -- writedata
			av_begintransfer       : out std_logic;                                        -- begintransfer
			av_beginbursttransfer  : out std_logic;                                        -- beginbursttransfer
			av_burstcount          : out std_logic_vector(0 downto 0);                     -- burstcount
			av_byteenable          : out std_logic_vector(3 downto 0);                     -- byteenable
			av_readdatavalid       : in  std_logic                     := 'X';             -- readdatavalid
			av_waitrequest         : in  std_logic                     := 'X';             -- waitrequest
			av_writebyteenable     : out std_logic_vector(3 downto 0);                     -- writebyteenable
			av_lock                : out std_logic;                                        -- lock
			av_chipselect          : out std_logic;                                        -- chipselect
			av_clken               : out std_logic;                                        -- clken
			uav_clken              : in  std_logic                     := 'X';             -- clken
			av_debugaccess         : out std_logic;                                        -- debugaccess
			av_outputenable        : out std_logic;                                        -- outputenable
			uav_response           : out std_logic_vector(1 downto 0);                     -- response
			av_response            : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponsevalid : out std_logic;                                        -- writeresponsevalid
			av_writeresponsevalid  : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component crypto_test_mm_interconnect_0_sysid_qsys_0_control_slave_translator;

	component crypto_test_mm_interconnect_0_crypto_module_csr_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- address
			uav_burstcount         : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			uav_read               : in  std_logic                     := 'X';             -- read
			uav_write              : in  std_logic                     := 'X';             -- write
			uav_waitrequest        : out std_logic;                                        -- waitrequest
			uav_readdatavalid      : out std_logic;                                        -- readdatavalid
			uav_byteenable         : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata           : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock               : in  std_logic                     := 'X';             -- lock
			uav_debugaccess        : in  std_logic                     := 'X';             -- debugaccess
			av_address             : out std_logic_vector(2 downto 0);                     -- address
			av_write               : out std_logic;                                        -- write
			av_readdata            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			av_writedata           : out std_logic_vector(31 downto 0);                    -- writedata
			av_read                : out std_logic;                                        -- read
			av_begintransfer       : out std_logic;                                        -- begintransfer
			av_beginbursttransfer  : out std_logic;                                        -- beginbursttransfer
			av_burstcount          : out std_logic_vector(0 downto 0);                     -- burstcount
			av_byteenable          : out std_logic_vector(3 downto 0);                     -- byteenable
			av_readdatavalid       : in  std_logic                     := 'X';             -- readdatavalid
			av_waitrequest         : in  std_logic                     := 'X';             -- waitrequest
			av_writebyteenable     : out std_logic_vector(3 downto 0);                     -- writebyteenable
			av_lock                : out std_logic;                                        -- lock
			av_chipselect          : out std_logic;                                        -- chipselect
			av_clken               : out std_logic;                                        -- clken
			uav_clken              : in  std_logic                     := 'X';             -- clken
			av_debugaccess         : out std_logic;                                        -- debugaccess
			av_outputenable        : out std_logic;                                        -- outputenable
			uav_response           : out std_logic_vector(1 downto 0);                     -- response
			av_response            : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponsevalid : out std_logic;                                        -- writeresponsevalid
			av_writeresponsevalid  : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component crypto_test_mm_interconnect_0_crypto_module_csr_translator;

	component crypto_test_mm_interconnect_0_nios2_qsys_0_jtag_debug_module_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- address
			uav_burstcount         : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			uav_read               : in  std_logic                     := 'X';             -- read
			uav_write              : in  std_logic                     := 'X';             -- write
			uav_waitrequest        : out std_logic;                                        -- waitrequest
			uav_readdatavalid      : out std_logic;                                        -- readdatavalid
			uav_byteenable         : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata           : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock               : in  std_logic                     := 'X';             -- lock
			uav_debugaccess        : in  std_logic                     := 'X';             -- debugaccess
			av_address             : out std_logic_vector(8 downto 0);                     -- address
			av_write               : out std_logic;                                        -- write
			av_read                : out std_logic;                                        -- read
			av_readdata            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			av_writedata           : out std_logic_vector(31 downto 0);                    -- writedata
			av_byteenable          : out std_logic_vector(3 downto 0);                     -- byteenable
			av_waitrequest         : in  std_logic                     := 'X';             -- waitrequest
			av_debugaccess         : out std_logic;                                        -- debugaccess
			av_begintransfer       : out std_logic;                                        -- begintransfer
			av_beginbursttransfer  : out std_logic;                                        -- beginbursttransfer
			av_burstcount          : out std_logic_vector(0 downto 0);                     -- burstcount
			av_readdatavalid       : in  std_logic                     := 'X';             -- readdatavalid
			av_writebyteenable     : out std_logic_vector(3 downto 0);                     -- writebyteenable
			av_lock                : out std_logic;                                        -- lock
			av_chipselect          : out std_logic;                                        -- chipselect
			av_clken               : out std_logic;                                        -- clken
			uav_clken              : in  std_logic                     := 'X';             -- clken
			av_outputenable        : out std_logic;                                        -- outputenable
			uav_response           : out std_logic_vector(1 downto 0);                     -- response
			av_response            : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponsevalid : out std_logic;                                        -- writeresponsevalid
			av_writeresponsevalid  : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component crypto_test_mm_interconnect_0_nios2_qsys_0_jtag_debug_module_translator;

	component crypto_test_mm_interconnect_0_instruction_memory_s1_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- address
			uav_burstcount         : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			uav_read               : in  std_logic                     := 'X';             -- read
			uav_write              : in  std_logic                     := 'X';             -- write
			uav_waitrequest        : out std_logic;                                        -- waitrequest
			uav_readdatavalid      : out std_logic;                                        -- readdatavalid
			uav_byteenable         : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata           : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock               : in  std_logic                     := 'X';             -- lock
			uav_debugaccess        : in  std_logic                     := 'X';             -- debugaccess
			av_address             : out std_logic_vector(15 downto 0);                    -- address
			av_write               : out std_logic;                                        -- write
			av_readdata            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			av_writedata           : out std_logic_vector(31 downto 0);                    -- writedata
			av_byteenable          : out std_logic_vector(3 downto 0);                     -- byteenable
			av_chipselect          : out std_logic;                                        -- chipselect
			av_clken               : out std_logic;                                        -- clken
			av_read                : out std_logic;                                        -- read
			av_begintransfer       : out std_logic;                                        -- begintransfer
			av_beginbursttransfer  : out std_logic;                                        -- beginbursttransfer
			av_burstcount          : out std_logic_vector(0 downto 0);                     -- burstcount
			av_readdatavalid       : in  std_logic                     := 'X';             -- readdatavalid
			av_waitrequest         : in  std_logic                     := 'X';             -- waitrequest
			av_writebyteenable     : out std_logic_vector(3 downto 0);                     -- writebyteenable
			av_lock                : out std_logic;                                        -- lock
			uav_clken              : in  std_logic                     := 'X';             -- clken
			av_debugaccess         : out std_logic;                                        -- debugaccess
			av_outputenable        : out std_logic;                                        -- outputenable
			uav_response           : out std_logic_vector(1 downto 0);                     -- response
			av_response            : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponsevalid : out std_logic;                                        -- writeresponsevalid
			av_writeresponsevalid  : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component crypto_test_mm_interconnect_0_instruction_memory_s1_translator;

	component crypto_test_mm_interconnect_0_timer_0_s1_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- address
			uav_burstcount         : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			uav_read               : in  std_logic                     := 'X';             -- read
			uav_write              : in  std_logic                     := 'X';             -- write
			uav_waitrequest        : out std_logic;                                        -- waitrequest
			uav_readdatavalid      : out std_logic;                                        -- readdatavalid
			uav_byteenable         : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata           : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock               : in  std_logic                     := 'X';             -- lock
			uav_debugaccess        : in  std_logic                     := 'X';             -- debugaccess
			av_address             : out std_logic_vector(3 downto 0);                     -- address
			av_write               : out std_logic;                                        -- write
			av_readdata            : in  std_logic_vector(15 downto 0) := (others => 'X'); -- readdata
			av_writedata           : out std_logic_vector(15 downto 0);                    -- writedata
			av_chipselect          : out std_logic;                                        -- chipselect
			av_read                : out std_logic;                                        -- read
			av_begintransfer       : out std_logic;                                        -- begintransfer
			av_beginbursttransfer  : out std_logic;                                        -- beginbursttransfer
			av_burstcount          : out std_logic_vector(0 downto 0);                     -- burstcount
			av_byteenable          : out std_logic_vector(0 downto 0);                     -- byteenable
			av_readdatavalid       : in  std_logic                     := 'X';             -- readdatavalid
			av_waitrequest         : in  std_logic                     := 'X';             -- waitrequest
			av_writebyteenable     : out std_logic_vector(0 downto 0);                     -- writebyteenable
			av_lock                : out std_logic;                                        -- lock
			av_clken               : out std_logic;                                        -- clken
			uav_clken              : in  std_logic                     := 'X';             -- clken
			av_debugaccess         : out std_logic;                                        -- debugaccess
			av_outputenable        : out std_logic;                                        -- outputenable
			uav_response           : out std_logic_vector(1 downto 0);                     -- response
			av_response            : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponsevalid : out std_logic;                                        -- writeresponsevalid
			av_writeresponsevalid  : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component crypto_test_mm_interconnect_0_timer_0_s1_translator;

	component crypto_test_mm_interconnect_0_stack_heap_s1_translator is
		generic (
			AV_ADDRESS_W                   : integer := 30;
			AV_DATA_W                      : integer := 32;
			UAV_DATA_W                     : integer := 32;
			AV_BURSTCOUNT_W                : integer := 4;
			AV_BYTEENABLE_W                : integer := 4;
			UAV_BYTEENABLE_W               : integer := 4;
			UAV_ADDRESS_W                  : integer := 32;
			UAV_BURSTCOUNT_W               : integer := 4;
			AV_READLATENCY                 : integer := 0;
			USE_READDATAVALID              : integer := 1;
			USE_WAITREQUEST                : integer := 1;
			USE_UAV_CLKEN                  : integer := 0;
			USE_READRESPONSE               : integer := 0;
			USE_WRITERESPONSE              : integer := 0;
			AV_SYMBOLS_PER_WORD            : integer := 4;
			AV_ADDRESS_SYMBOLS             : integer := 0;
			AV_BURSTCOUNT_SYMBOLS          : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR     : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR    : integer := 0;
			AV_REQUIRE_UNALIGNED_ADDRESSES : integer := 0;
			CHIPSELECT_THROUGH_READLATENCY : integer := 0;
			AV_READ_WAIT_CYCLES            : integer := 0;
			AV_WRITE_WAIT_CYCLES           : integer := 0;
			AV_SETUP_WAIT_CYCLES           : integer := 0;
			AV_DATA_HOLD_CYCLES            : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- address
			uav_burstcount         : in  std_logic_vector(2 downto 0)  := (others => 'X'); -- burstcount
			uav_read               : in  std_logic                     := 'X';             -- read
			uav_write              : in  std_logic                     := 'X';             -- write
			uav_waitrequest        : out std_logic;                                        -- waitrequest
			uav_readdatavalid      : out std_logic;                                        -- readdatavalid
			uav_byteenable         : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			uav_readdata           : out std_logic_vector(31 downto 0);                    -- readdata
			uav_writedata          : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			uav_lock               : in  std_logic                     := 'X';             -- lock
			uav_debugaccess        : in  std_logic                     := 'X';             -- debugaccess
			av_address             : out std_logic_vector(11 downto 0);                    -- address
			av_write               : out std_logic;                                        -- write
			av_readdata            : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			av_writedata           : out std_logic_vector(31 downto 0);                    -- writedata
			av_byteenable          : out std_logic_vector(3 downto 0);                     -- byteenable
			av_chipselect          : out std_logic;                                        -- chipselect
			av_clken               : out std_logic;                                        -- clken
			av_read                : out std_logic;                                        -- read
			av_begintransfer       : out std_logic;                                        -- begintransfer
			av_beginbursttransfer  : out std_logic;                                        -- beginbursttransfer
			av_burstcount          : out std_logic_vector(0 downto 0);                     -- burstcount
			av_readdatavalid       : in  std_logic                     := 'X';             -- readdatavalid
			av_waitrequest         : in  std_logic                     := 'X';             -- waitrequest
			av_writebyteenable     : out std_logic_vector(3 downto 0);                     -- writebyteenable
			av_lock                : out std_logic;                                        -- lock
			uav_clken              : in  std_logic                     := 'X';             -- clken
			av_debugaccess         : out std_logic;                                        -- debugaccess
			av_outputenable        : out std_logic;                                        -- outputenable
			uav_response           : out std_logic_vector(1 downto 0);                     -- response
			av_response            : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			uav_writeresponsevalid : out std_logic;                                        -- writeresponsevalid
			av_writeresponsevalid  : in  std_logic                     := 'X'              -- writeresponsevalid
		);
	end component crypto_test_mm_interconnect_0_stack_heap_s1_translator;

	component crypto_test_mm_interconnect_0_nios2_qsys_0_data_master_translator is
		generic (
			AV_ADDRESS_W                : integer := 32;
			AV_DATA_W                   : integer := 32;
			AV_BURSTCOUNT_W             : integer := 4;
			AV_BYTEENABLE_W             : integer := 4;
			UAV_ADDRESS_W               : integer := 38;
			UAV_BURSTCOUNT_W            : integer := 10;
			USE_READ                    : integer := 1;
			USE_WRITE                   : integer := 1;
			USE_BEGINBURSTTRANSFER      : integer := 0;
			USE_BEGINTRANSFER           : integer := 0;
			USE_CHIPSELECT              : integer := 0;
			USE_BURSTCOUNT              : integer := 1;
			USE_READDATAVALID           : integer := 1;
			USE_WAITREQUEST             : integer := 1;
			USE_READRESPONSE            : integer := 0;
			USE_WRITERESPONSE           : integer := 0;
			AV_SYMBOLS_PER_WORD         : integer := 4;
			AV_ADDRESS_SYMBOLS          : integer := 0;
			AV_BURSTCOUNT_SYMBOLS       : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR  : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR : integer := 0;
			AV_LINEWRAPBURSTS           : integer := 0;
			AV_REGISTERINCOMINGSIGNALS  : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : out std_logic_vector(31 downto 0);                    -- address
			uav_burstcount         : out std_logic_vector(2 downto 0);                     -- burstcount
			uav_read               : out std_logic;                                        -- read
			uav_write              : out std_logic;                                        -- write
			uav_waitrequest        : in  std_logic                     := 'X';             -- waitrequest
			uav_readdatavalid      : in  std_logic                     := 'X';             -- readdatavalid
			uav_byteenable         : out std_logic_vector(3 downto 0);                     -- byteenable
			uav_readdata           : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			uav_writedata          : out std_logic_vector(31 downto 0);                    -- writedata
			uav_lock               : out std_logic;                                        -- lock
			uav_debugaccess        : out std_logic;                                        -- debugaccess
			av_address             : in  std_logic_vector(19 downto 0) := (others => 'X'); -- address
			av_waitrequest         : out std_logic;                                        -- waitrequest
			av_byteenable          : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			av_read                : in  std_logic                     := 'X';             -- read
			av_readdata            : out std_logic_vector(31 downto 0);                    -- readdata
			av_write               : in  std_logic                     := 'X';             -- write
			av_writedata           : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			av_debugaccess         : in  std_logic                     := 'X';             -- debugaccess
			av_burstcount          : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- burstcount
			av_beginbursttransfer  : in  std_logic                     := 'X';             -- beginbursttransfer
			av_begintransfer       : in  std_logic                     := 'X';             -- begintransfer
			av_chipselect          : in  std_logic                     := 'X';             -- chipselect
			av_readdatavalid       : out std_logic;                                        -- readdatavalid
			av_lock                : in  std_logic                     := 'X';             -- lock
			uav_clken              : out std_logic;                                        -- clken
			av_clken               : in  std_logic                     := 'X';             -- clken
			uav_response           : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			av_response            : out std_logic_vector(1 downto 0);                     -- response
			uav_writeresponsevalid : in  std_logic                     := 'X';             -- writeresponsevalid
			av_writeresponsevalid  : out std_logic                                         -- writeresponsevalid
		);
	end component crypto_test_mm_interconnect_0_nios2_qsys_0_data_master_translator;

	component crypto_test_mm_interconnect_0_crypto_module_read_master_translator is
		generic (
			AV_ADDRESS_W                : integer := 32;
			AV_DATA_W                   : integer := 32;
			AV_BURSTCOUNT_W             : integer := 4;
			AV_BYTEENABLE_W             : integer := 4;
			UAV_ADDRESS_W               : integer := 38;
			UAV_BURSTCOUNT_W            : integer := 10;
			USE_READ                    : integer := 1;
			USE_WRITE                   : integer := 1;
			USE_BEGINBURSTTRANSFER      : integer := 0;
			USE_BEGINTRANSFER           : integer := 0;
			USE_CHIPSELECT              : integer := 0;
			USE_BURSTCOUNT              : integer := 1;
			USE_READDATAVALID           : integer := 1;
			USE_WAITREQUEST             : integer := 1;
			USE_READRESPONSE            : integer := 0;
			USE_WRITERESPONSE           : integer := 0;
			AV_SYMBOLS_PER_WORD         : integer := 4;
			AV_ADDRESS_SYMBOLS          : integer := 0;
			AV_BURSTCOUNT_SYMBOLS       : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR  : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR : integer := 0;
			AV_LINEWRAPBURSTS           : integer := 0;
			AV_REGISTERINCOMINGSIGNALS  : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : out std_logic_vector(31 downto 0);                    -- address
			uav_burstcount         : out std_logic_vector(2 downto 0);                     -- burstcount
			uav_read               : out std_logic;                                        -- read
			uav_write              : out std_logic;                                        -- write
			uav_waitrequest        : in  std_logic                     := 'X';             -- waitrequest
			uav_readdatavalid      : in  std_logic                     := 'X';             -- readdatavalid
			uav_byteenable         : out std_logic_vector(3 downto 0);                     -- byteenable
			uav_readdata           : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			uav_writedata          : out std_logic_vector(31 downto 0);                    -- writedata
			uav_lock               : out std_logic;                                        -- lock
			uav_debugaccess        : out std_logic;                                        -- debugaccess
			av_address             : in  std_logic_vector(31 downto 0) := (others => 'X'); -- address
			av_waitrequest         : out std_logic;                                        -- waitrequest
			av_read                : in  std_logic                     := 'X';             -- read
			av_readdata            : out std_logic_vector(31 downto 0);                    -- readdata
			av_burstcount          : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- burstcount
			av_byteenable          : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			av_beginbursttransfer  : in  std_logic                     := 'X';             -- beginbursttransfer
			av_begintransfer       : in  std_logic                     := 'X';             -- begintransfer
			av_chipselect          : in  std_logic                     := 'X';             -- chipselect
			av_readdatavalid       : out std_logic;                                        -- readdatavalid
			av_write               : in  std_logic                     := 'X';             -- write
			av_writedata           : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			av_lock                : in  std_logic                     := 'X';             -- lock
			av_debugaccess         : in  std_logic                     := 'X';             -- debugaccess
			uav_clken              : out std_logic;                                        -- clken
			av_clken               : in  std_logic                     := 'X';             -- clken
			uav_response           : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			av_response            : out std_logic_vector(1 downto 0);                     -- response
			uav_writeresponsevalid : in  std_logic                     := 'X';             -- writeresponsevalid
			av_writeresponsevalid  : out std_logic                                         -- writeresponsevalid
		);
	end component crypto_test_mm_interconnect_0_crypto_module_read_master_translator;

	component crypto_test_mm_interconnect_0_crypto_module_write_master_translator is
		generic (
			AV_ADDRESS_W                : integer := 32;
			AV_DATA_W                   : integer := 32;
			AV_BURSTCOUNT_W             : integer := 4;
			AV_BYTEENABLE_W             : integer := 4;
			UAV_ADDRESS_W               : integer := 38;
			UAV_BURSTCOUNT_W            : integer := 10;
			USE_READ                    : integer := 1;
			USE_WRITE                   : integer := 1;
			USE_BEGINBURSTTRANSFER      : integer := 0;
			USE_BEGINTRANSFER           : integer := 0;
			USE_CHIPSELECT              : integer := 0;
			USE_BURSTCOUNT              : integer := 1;
			USE_READDATAVALID           : integer := 1;
			USE_WAITREQUEST             : integer := 1;
			USE_READRESPONSE            : integer := 0;
			USE_WRITERESPONSE           : integer := 0;
			AV_SYMBOLS_PER_WORD         : integer := 4;
			AV_ADDRESS_SYMBOLS          : integer := 0;
			AV_BURSTCOUNT_SYMBOLS       : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR  : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR : integer := 0;
			AV_LINEWRAPBURSTS           : integer := 0;
			AV_REGISTERINCOMINGSIGNALS  : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : out std_logic_vector(31 downto 0);                    -- address
			uav_burstcount         : out std_logic_vector(2 downto 0);                     -- burstcount
			uav_read               : out std_logic;                                        -- read
			uav_write              : out std_logic;                                        -- write
			uav_waitrequest        : in  std_logic                     := 'X';             -- waitrequest
			uav_readdatavalid      : in  std_logic                     := 'X';             -- readdatavalid
			uav_byteenable         : out std_logic_vector(3 downto 0);                     -- byteenable
			uav_readdata           : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			uav_writedata          : out std_logic_vector(31 downto 0);                    -- writedata
			uav_lock               : out std_logic;                                        -- lock
			uav_debugaccess        : out std_logic;                                        -- debugaccess
			av_address             : in  std_logic_vector(31 downto 0) := (others => 'X'); -- address
			av_waitrequest         : out std_logic;                                        -- waitrequest
			av_write               : in  std_logic                     := 'X';             -- write
			av_writedata           : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			av_burstcount          : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- burstcount
			av_byteenable          : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			av_beginbursttransfer  : in  std_logic                     := 'X';             -- beginbursttransfer
			av_begintransfer       : in  std_logic                     := 'X';             -- begintransfer
			av_chipselect          : in  std_logic                     := 'X';             -- chipselect
			av_read                : in  std_logic                     := 'X';             -- read
			av_readdata            : out std_logic_vector(31 downto 0);                    -- readdata
			av_readdatavalid       : out std_logic;                                        -- readdatavalid
			av_lock                : in  std_logic                     := 'X';             -- lock
			av_debugaccess         : in  std_logic                     := 'X';             -- debugaccess
			uav_clken              : out std_logic;                                        -- clken
			av_clken               : in  std_logic                     := 'X';             -- clken
			uav_response           : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			av_response            : out std_logic_vector(1 downto 0);                     -- response
			uav_writeresponsevalid : in  std_logic                     := 'X';             -- writeresponsevalid
			av_writeresponsevalid  : out std_logic                                         -- writeresponsevalid
		);
	end component crypto_test_mm_interconnect_0_crypto_module_write_master_translator;

	component crypto_test_mm_interconnect_0_nios2_qsys_0_instruction_master_translator is
		generic (
			AV_ADDRESS_W                : integer := 32;
			AV_DATA_W                   : integer := 32;
			AV_BURSTCOUNT_W             : integer := 4;
			AV_BYTEENABLE_W             : integer := 4;
			UAV_ADDRESS_W               : integer := 38;
			UAV_BURSTCOUNT_W            : integer := 10;
			USE_READ                    : integer := 1;
			USE_WRITE                   : integer := 1;
			USE_BEGINBURSTTRANSFER      : integer := 0;
			USE_BEGINTRANSFER           : integer := 0;
			USE_CHIPSELECT              : integer := 0;
			USE_BURSTCOUNT              : integer := 1;
			USE_READDATAVALID           : integer := 1;
			USE_WAITREQUEST             : integer := 1;
			USE_READRESPONSE            : integer := 0;
			USE_WRITERESPONSE           : integer := 0;
			AV_SYMBOLS_PER_WORD         : integer := 4;
			AV_ADDRESS_SYMBOLS          : integer := 0;
			AV_BURSTCOUNT_SYMBOLS       : integer := 0;
			AV_CONSTANT_BURST_BEHAVIOR  : integer := 0;
			UAV_CONSTANT_BURST_BEHAVIOR : integer := 0;
			AV_LINEWRAPBURSTS           : integer := 0;
			AV_REGISTERINCOMINGSIGNALS  : integer := 0
		);
		port (
			clk                    : in  std_logic                     := 'X';             -- clk
			reset                  : in  std_logic                     := 'X';             -- reset
			uav_address            : out std_logic_vector(31 downto 0);                    -- address
			uav_burstcount         : out std_logic_vector(2 downto 0);                     -- burstcount
			uav_read               : out std_logic;                                        -- read
			uav_write              : out std_logic;                                        -- write
			uav_waitrequest        : in  std_logic                     := 'X';             -- waitrequest
			uav_readdatavalid      : in  std_logic                     := 'X';             -- readdatavalid
			uav_byteenable         : out std_logic_vector(3 downto 0);                     -- byteenable
			uav_readdata           : in  std_logic_vector(31 downto 0) := (others => 'X'); -- readdata
			uav_writedata          : out std_logic_vector(31 downto 0);                    -- writedata
			uav_lock               : out std_logic;                                        -- lock
			uav_debugaccess        : out std_logic;                                        -- debugaccess
			av_address             : in  std_logic_vector(19 downto 0) := (others => 'X'); -- address
			av_waitrequest         : out std_logic;                                        -- waitrequest
			av_read                : in  std_logic                     := 'X';             -- read
			av_readdata            : out std_logic_vector(31 downto 0);                    -- readdata
			av_burstcount          : in  std_logic_vector(0 downto 0)  := (others => 'X'); -- burstcount
			av_byteenable          : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- byteenable
			av_beginbursttransfer  : in  std_logic                     := 'X';             -- beginbursttransfer
			av_begintransfer       : in  std_logic                     := 'X';             -- begintransfer
			av_chipselect          : in  std_logic                     := 'X';             -- chipselect
			av_readdatavalid       : out std_logic;                                        -- readdatavalid
			av_write               : in  std_logic                     := 'X';             -- write
			av_writedata           : in  std_logic_vector(31 downto 0) := (others => 'X'); -- writedata
			av_lock                : in  std_logic                     := 'X';             -- lock
			av_debugaccess         : in  std_logic                     := 'X';             -- debugaccess
			uav_clken              : out std_logic;                                        -- clken
			av_clken               : in  std_logic                     := 'X';             -- clken
			uav_response           : in  std_logic_vector(1 downto 0)  := (others => 'X'); -- response
			av_response            : out std_logic_vector(1 downto 0);                     -- response
			uav_writeresponsevalid : in  std_logic                     := 'X';             -- writeresponsevalid
			av_writeresponsevalid  : out std_logic                                         -- writeresponsevalid
		);
	end component crypto_test_mm_interconnect_0_nios2_qsys_0_instruction_master_translator;

	signal nios2_qsys_0_data_master_translator_avalon_universal_master_0_waitrequest          : std_logic;                      -- nios2_qsys_0_data_master_agent:av_waitrequest -> nios2_qsys_0_data_master_translator:uav_waitrequest
	signal nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdata             : std_logic_vector(31 downto 0);  -- nios2_qsys_0_data_master_agent:av_readdata -> nios2_qsys_0_data_master_translator:uav_readdata
	signal nios2_qsys_0_data_master_translator_avalon_universal_master_0_debugaccess          : std_logic;                      -- nios2_qsys_0_data_master_translator:uav_debugaccess -> nios2_qsys_0_data_master_agent:av_debugaccess
	signal nios2_qsys_0_data_master_translator_avalon_universal_master_0_address              : std_logic_vector(31 downto 0);  -- nios2_qsys_0_data_master_translator:uav_address -> nios2_qsys_0_data_master_agent:av_address
	signal nios2_qsys_0_data_master_translator_avalon_universal_master_0_read                 : std_logic;                      -- nios2_qsys_0_data_master_translator:uav_read -> nios2_qsys_0_data_master_agent:av_read
	signal nios2_qsys_0_data_master_translator_avalon_universal_master_0_byteenable           : std_logic_vector(3 downto 0);   -- nios2_qsys_0_data_master_translator:uav_byteenable -> nios2_qsys_0_data_master_agent:av_byteenable
	signal nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdatavalid        : std_logic;                      -- nios2_qsys_0_data_master_agent:av_readdatavalid -> nios2_qsys_0_data_master_translator:uav_readdatavalid
	signal nios2_qsys_0_data_master_translator_avalon_universal_master_0_lock                 : std_logic;                      -- nios2_qsys_0_data_master_translator:uav_lock -> nios2_qsys_0_data_master_agent:av_lock
	signal nios2_qsys_0_data_master_translator_avalon_universal_master_0_write                : std_logic;                      -- nios2_qsys_0_data_master_translator:uav_write -> nios2_qsys_0_data_master_agent:av_write
	signal nios2_qsys_0_data_master_translator_avalon_universal_master_0_writedata            : std_logic_vector(31 downto 0);  -- nios2_qsys_0_data_master_translator:uav_writedata -> nios2_qsys_0_data_master_agent:av_writedata
	signal nios2_qsys_0_data_master_translator_avalon_universal_master_0_burstcount           : std_logic_vector(2 downto 0);   -- nios2_qsys_0_data_master_translator:uav_burstcount -> nios2_qsys_0_data_master_agent:av_burstcount
	signal rsp_mux_src_valid                                                                  : std_logic;                      -- rsp_mux:src_valid -> nios2_qsys_0_data_master_agent:rp_valid
	signal rsp_mux_src_data                                                                   : std_logic_vector(109 downto 0); -- rsp_mux:src_data -> nios2_qsys_0_data_master_agent:rp_data
	signal rsp_mux_src_ready                                                                  : std_logic;                      -- nios2_qsys_0_data_master_agent:rp_ready -> rsp_mux:src_ready
	signal rsp_mux_src_channel                                                                : std_logic_vector(9 downto 0);   -- rsp_mux:src_channel -> nios2_qsys_0_data_master_agent:rp_channel
	signal rsp_mux_src_startofpacket                                                          : std_logic;                      -- rsp_mux:src_startofpacket -> nios2_qsys_0_data_master_agent:rp_startofpacket
	signal rsp_mux_src_endofpacket                                                            : std_logic;                      -- rsp_mux:src_endofpacket -> nios2_qsys_0_data_master_agent:rp_endofpacket
	signal crypto_module_read_master_translator_avalon_universal_master_0_waitrequest         : std_logic;                      -- crypto_module_read_master_agent:av_waitrequest -> crypto_module_read_master_translator:uav_waitrequest
	signal crypto_module_read_master_translator_avalon_universal_master_0_readdata            : std_logic_vector(31 downto 0);  -- crypto_module_read_master_agent:av_readdata -> crypto_module_read_master_translator:uav_readdata
	signal crypto_module_read_master_translator_avalon_universal_master_0_debugaccess         : std_logic;                      -- crypto_module_read_master_translator:uav_debugaccess -> crypto_module_read_master_agent:av_debugaccess
	signal crypto_module_read_master_translator_avalon_universal_master_0_address             : std_logic_vector(31 downto 0);  -- crypto_module_read_master_translator:uav_address -> crypto_module_read_master_agent:av_address
	signal crypto_module_read_master_translator_avalon_universal_master_0_read                : std_logic;                      -- crypto_module_read_master_translator:uav_read -> crypto_module_read_master_agent:av_read
	signal crypto_module_read_master_translator_avalon_universal_master_0_byteenable          : std_logic_vector(3 downto 0);   -- crypto_module_read_master_translator:uav_byteenable -> crypto_module_read_master_agent:av_byteenable
	signal crypto_module_read_master_translator_avalon_universal_master_0_readdatavalid       : std_logic;                      -- crypto_module_read_master_agent:av_readdatavalid -> crypto_module_read_master_translator:uav_readdatavalid
	signal crypto_module_read_master_translator_avalon_universal_master_0_lock                : std_logic;                      -- crypto_module_read_master_translator:uav_lock -> crypto_module_read_master_agent:av_lock
	signal crypto_module_read_master_translator_avalon_universal_master_0_write               : std_logic;                      -- crypto_module_read_master_translator:uav_write -> crypto_module_read_master_agent:av_write
	signal crypto_module_read_master_translator_avalon_universal_master_0_writedata           : std_logic_vector(31 downto 0);  -- crypto_module_read_master_translator:uav_writedata -> crypto_module_read_master_agent:av_writedata
	signal crypto_module_read_master_translator_avalon_universal_master_0_burstcount          : std_logic_vector(2 downto 0);   -- crypto_module_read_master_translator:uav_burstcount -> crypto_module_read_master_agent:av_burstcount
	signal rsp_mux_001_src_valid                                                              : std_logic;                      -- rsp_mux_001:src_valid -> crypto_module_read_master_agent:rp_valid
	signal rsp_mux_001_src_data                                                               : std_logic_vector(109 downto 0); -- rsp_mux_001:src_data -> crypto_module_read_master_agent:rp_data
	signal rsp_mux_001_src_ready                                                              : std_logic;                      -- crypto_module_read_master_agent:rp_ready -> rsp_mux_001:src_ready
	signal rsp_mux_001_src_channel                                                            : std_logic_vector(9 downto 0);   -- rsp_mux_001:src_channel -> crypto_module_read_master_agent:rp_channel
	signal rsp_mux_001_src_startofpacket                                                      : std_logic;                      -- rsp_mux_001:src_startofpacket -> crypto_module_read_master_agent:rp_startofpacket
	signal rsp_mux_001_src_endofpacket                                                        : std_logic;                      -- rsp_mux_001:src_endofpacket -> crypto_module_read_master_agent:rp_endofpacket
	signal crypto_module_write_master_translator_avalon_universal_master_0_waitrequest        : std_logic;                      -- crypto_module_write_master_agent:av_waitrequest -> crypto_module_write_master_translator:uav_waitrequest
	signal crypto_module_write_master_translator_avalon_universal_master_0_readdata           : std_logic_vector(31 downto 0);  -- crypto_module_write_master_agent:av_readdata -> crypto_module_write_master_translator:uav_readdata
	signal crypto_module_write_master_translator_avalon_universal_master_0_debugaccess        : std_logic;                      -- crypto_module_write_master_translator:uav_debugaccess -> crypto_module_write_master_agent:av_debugaccess
	signal crypto_module_write_master_translator_avalon_universal_master_0_address            : std_logic_vector(31 downto 0);  -- crypto_module_write_master_translator:uav_address -> crypto_module_write_master_agent:av_address
	signal crypto_module_write_master_translator_avalon_universal_master_0_read               : std_logic;                      -- crypto_module_write_master_translator:uav_read -> crypto_module_write_master_agent:av_read
	signal crypto_module_write_master_translator_avalon_universal_master_0_byteenable         : std_logic_vector(3 downto 0);   -- crypto_module_write_master_translator:uav_byteenable -> crypto_module_write_master_agent:av_byteenable
	signal crypto_module_write_master_translator_avalon_universal_master_0_readdatavalid      : std_logic;                      -- crypto_module_write_master_agent:av_readdatavalid -> crypto_module_write_master_translator:uav_readdatavalid
	signal crypto_module_write_master_translator_avalon_universal_master_0_lock               : std_logic;                      -- crypto_module_write_master_translator:uav_lock -> crypto_module_write_master_agent:av_lock
	signal crypto_module_write_master_translator_avalon_universal_master_0_write              : std_logic;                      -- crypto_module_write_master_translator:uav_write -> crypto_module_write_master_agent:av_write
	signal crypto_module_write_master_translator_avalon_universal_master_0_writedata          : std_logic_vector(31 downto 0);  -- crypto_module_write_master_translator:uav_writedata -> crypto_module_write_master_agent:av_writedata
	signal crypto_module_write_master_translator_avalon_universal_master_0_burstcount         : std_logic_vector(2 downto 0);   -- crypto_module_write_master_translator:uav_burstcount -> crypto_module_write_master_agent:av_burstcount
	signal rsp_mux_002_src_valid                                                              : std_logic;                      -- rsp_mux_002:src_valid -> crypto_module_write_master_agent:rp_valid
	signal rsp_mux_002_src_data                                                               : std_logic_vector(109 downto 0); -- rsp_mux_002:src_data -> crypto_module_write_master_agent:rp_data
	signal rsp_mux_002_src_ready                                                              : std_logic;                      -- crypto_module_write_master_agent:rp_ready -> rsp_mux_002:src_ready
	signal rsp_mux_002_src_channel                                                            : std_logic_vector(9 downto 0);   -- rsp_mux_002:src_channel -> crypto_module_write_master_agent:rp_channel
	signal rsp_mux_002_src_startofpacket                                                      : std_logic;                      -- rsp_mux_002:src_startofpacket -> crypto_module_write_master_agent:rp_startofpacket
	signal rsp_mux_002_src_endofpacket                                                        : std_logic;                      -- rsp_mux_002:src_endofpacket -> crypto_module_write_master_agent:rp_endofpacket
	signal nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_waitrequest   : std_logic;                      -- nios2_qsys_0_instruction_master_agent:av_waitrequest -> nios2_qsys_0_instruction_master_translator:uav_waitrequest
	signal nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdata      : std_logic_vector(31 downto 0);  -- nios2_qsys_0_instruction_master_agent:av_readdata -> nios2_qsys_0_instruction_master_translator:uav_readdata
	signal nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_debugaccess   : std_logic;                      -- nios2_qsys_0_instruction_master_translator:uav_debugaccess -> nios2_qsys_0_instruction_master_agent:av_debugaccess
	signal nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_address       : std_logic_vector(31 downto 0);  -- nios2_qsys_0_instruction_master_translator:uav_address -> nios2_qsys_0_instruction_master_agent:av_address
	signal nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_read          : std_logic;                      -- nios2_qsys_0_instruction_master_translator:uav_read -> nios2_qsys_0_instruction_master_agent:av_read
	signal nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_byteenable    : std_logic_vector(3 downto 0);   -- nios2_qsys_0_instruction_master_translator:uav_byteenable -> nios2_qsys_0_instruction_master_agent:av_byteenable
	signal nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdatavalid : std_logic;                      -- nios2_qsys_0_instruction_master_agent:av_readdatavalid -> nios2_qsys_0_instruction_master_translator:uav_readdatavalid
	signal nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_lock          : std_logic;                      -- nios2_qsys_0_instruction_master_translator:uav_lock -> nios2_qsys_0_instruction_master_agent:av_lock
	signal nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_write         : std_logic;                      -- nios2_qsys_0_instruction_master_translator:uav_write -> nios2_qsys_0_instruction_master_agent:av_write
	signal nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_writedata     : std_logic_vector(31 downto 0);  -- nios2_qsys_0_instruction_master_translator:uav_writedata -> nios2_qsys_0_instruction_master_agent:av_writedata
	signal nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_burstcount    : std_logic_vector(2 downto 0);   -- nios2_qsys_0_instruction_master_translator:uav_burstcount -> nios2_qsys_0_instruction_master_agent:av_burstcount
	signal rsp_mux_003_src_valid                                                              : std_logic;                      -- rsp_mux_003:src_valid -> nios2_qsys_0_instruction_master_agent:rp_valid
	signal rsp_mux_003_src_data                                                               : std_logic_vector(109 downto 0); -- rsp_mux_003:src_data -> nios2_qsys_0_instruction_master_agent:rp_data
	signal rsp_mux_003_src_ready                                                              : std_logic;                      -- nios2_qsys_0_instruction_master_agent:rp_ready -> rsp_mux_003:src_ready
	signal rsp_mux_003_src_channel                                                            : std_logic_vector(9 downto 0);   -- rsp_mux_003:src_channel -> nios2_qsys_0_instruction_master_agent:rp_channel
	signal rsp_mux_003_src_startofpacket                                                      : std_logic;                      -- rsp_mux_003:src_startofpacket -> nios2_qsys_0_instruction_master_agent:rp_startofpacket
	signal rsp_mux_003_src_endofpacket                                                        : std_logic;                      -- rsp_mux_003:src_endofpacket -> nios2_qsys_0_instruction_master_agent:rp_endofpacket
	signal jtag_uart_0_avalon_jtag_slave_agent_m0_readdata                                    : std_logic_vector(31 downto 0);  -- jtag_uart_0_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdata
	signal jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest                                 : std_logic;                      -- jtag_uart_0_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_0_avalon_jtag_slave_agent:m0_waitrequest
	signal jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess                                 : std_logic;                      -- jtag_uart_0_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_0_avalon_jtag_slave_translator:uav_debugaccess
	signal jtag_uart_0_avalon_jtag_slave_agent_m0_address                                     : std_logic_vector(31 downto 0);  -- jtag_uart_0_avalon_jtag_slave_agent:m0_address -> jtag_uart_0_avalon_jtag_slave_translator:uav_address
	signal jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable                                  : std_logic_vector(3 downto 0);   -- jtag_uart_0_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_0_avalon_jtag_slave_translator:uav_byteenable
	signal jtag_uart_0_avalon_jtag_slave_agent_m0_read                                        : std_logic;                      -- jtag_uart_0_avalon_jtag_slave_agent:m0_read -> jtag_uart_0_avalon_jtag_slave_translator:uav_read
	signal jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid                               : std_logic;                      -- jtag_uart_0_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_0_avalon_jtag_slave_agent:m0_readdatavalid
	signal jtag_uart_0_avalon_jtag_slave_agent_m0_lock                                        : std_logic;                      -- jtag_uart_0_avalon_jtag_slave_agent:m0_lock -> jtag_uart_0_avalon_jtag_slave_translator:uav_lock
	signal jtag_uart_0_avalon_jtag_slave_agent_m0_writedata                                   : std_logic_vector(31 downto 0);  -- jtag_uart_0_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_0_avalon_jtag_slave_translator:uav_writedata
	signal jtag_uart_0_avalon_jtag_slave_agent_m0_write                                       : std_logic;                      -- jtag_uart_0_avalon_jtag_slave_agent:m0_write -> jtag_uart_0_avalon_jtag_slave_translator:uav_write
	signal jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount                                  : std_logic_vector(2 downto 0);   -- jtag_uart_0_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_0_avalon_jtag_slave_translator:uav_burstcount
	signal jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid                                : std_logic;                      -- jtag_uart_0_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_valid
	signal jtag_uart_0_avalon_jtag_slave_agent_rf_source_data                                 : std_logic_vector(110 downto 0); -- jtag_uart_0_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_data
	signal jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready                                : std_logic;                      -- jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_0_avalon_jtag_slave_agent:rf_source_ready
	signal jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket                        : std_logic;                      -- jtag_uart_0_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	signal jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket                          : std_logic;                      -- jtag_uart_0_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	signal jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid                             : std_logic;                      -- jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_valid
	signal jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data                              : std_logic_vector(110 downto 0); -- jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_data
	signal jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready                             : std_logic;                      -- jtag_uart_0_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_ready
	signal jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket                     : std_logic;                      -- jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_startofpacket
	signal jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket                       : std_logic;                      -- jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:rf_sink_endofpacket
	signal jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid                           : std_logic;                      -- jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	signal jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data                            : std_logic_vector(33 downto 0);  -- jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_data
	signal jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready                           : std_logic;                      -- jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rdata_fifo_src_ready
	signal cmd_mux_src_valid                                                                  : std_logic;                      -- cmd_mux:src_valid -> jtag_uart_0_avalon_jtag_slave_agent:cp_valid
	signal cmd_mux_src_data                                                                   : std_logic_vector(109 downto 0); -- cmd_mux:src_data -> jtag_uart_0_avalon_jtag_slave_agent:cp_data
	signal cmd_mux_src_ready                                                                  : std_logic;                      -- jtag_uart_0_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	signal cmd_mux_src_channel                                                                : std_logic_vector(9 downto 0);   -- cmd_mux:src_channel -> jtag_uart_0_avalon_jtag_slave_agent:cp_channel
	signal cmd_mux_src_startofpacket                                                          : std_logic;                      -- cmd_mux:src_startofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_startofpacket
	signal cmd_mux_src_endofpacket                                                            : std_logic;                      -- cmd_mux:src_endofpacket -> jtag_uart_0_avalon_jtag_slave_agent:cp_endofpacket
	signal sysid_qsys_0_control_slave_agent_m0_readdata                                       : std_logic_vector(31 downto 0);  -- sysid_qsys_0_control_slave_translator:uav_readdata -> sysid_qsys_0_control_slave_agent:m0_readdata
	signal sysid_qsys_0_control_slave_agent_m0_waitrequest                                    : std_logic;                      -- sysid_qsys_0_control_slave_translator:uav_waitrequest -> sysid_qsys_0_control_slave_agent:m0_waitrequest
	signal sysid_qsys_0_control_slave_agent_m0_debugaccess                                    : std_logic;                      -- sysid_qsys_0_control_slave_agent:m0_debugaccess -> sysid_qsys_0_control_slave_translator:uav_debugaccess
	signal sysid_qsys_0_control_slave_agent_m0_address                                        : std_logic_vector(31 downto 0);  -- sysid_qsys_0_control_slave_agent:m0_address -> sysid_qsys_0_control_slave_translator:uav_address
	signal sysid_qsys_0_control_slave_agent_m0_byteenable                                     : std_logic_vector(3 downto 0);   -- sysid_qsys_0_control_slave_agent:m0_byteenable -> sysid_qsys_0_control_slave_translator:uav_byteenable
	signal sysid_qsys_0_control_slave_agent_m0_read                                           : std_logic;                      -- sysid_qsys_0_control_slave_agent:m0_read -> sysid_qsys_0_control_slave_translator:uav_read
	signal sysid_qsys_0_control_slave_agent_m0_readdatavalid                                  : std_logic;                      -- sysid_qsys_0_control_slave_translator:uav_readdatavalid -> sysid_qsys_0_control_slave_agent:m0_readdatavalid
	signal sysid_qsys_0_control_slave_agent_m0_lock                                           : std_logic;                      -- sysid_qsys_0_control_slave_agent:m0_lock -> sysid_qsys_0_control_slave_translator:uav_lock
	signal sysid_qsys_0_control_slave_agent_m0_writedata                                      : std_logic_vector(31 downto 0);  -- sysid_qsys_0_control_slave_agent:m0_writedata -> sysid_qsys_0_control_slave_translator:uav_writedata
	signal sysid_qsys_0_control_slave_agent_m0_write                                          : std_logic;                      -- sysid_qsys_0_control_slave_agent:m0_write -> sysid_qsys_0_control_slave_translator:uav_write
	signal sysid_qsys_0_control_slave_agent_m0_burstcount                                     : std_logic_vector(2 downto 0);   -- sysid_qsys_0_control_slave_agent:m0_burstcount -> sysid_qsys_0_control_slave_translator:uav_burstcount
	signal sysid_qsys_0_control_slave_agent_rf_source_valid                                   : std_logic;                      -- sysid_qsys_0_control_slave_agent:rf_source_valid -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_valid
	signal sysid_qsys_0_control_slave_agent_rf_source_data                                    : std_logic_vector(110 downto 0); -- sysid_qsys_0_control_slave_agent:rf_source_data -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_data
	signal sysid_qsys_0_control_slave_agent_rf_source_ready                                   : std_logic;                      -- sysid_qsys_0_control_slave_agent_rsp_fifo:in_ready -> sysid_qsys_0_control_slave_agent:rf_source_ready
	signal sysid_qsys_0_control_slave_agent_rf_source_startofpacket                           : std_logic;                      -- sysid_qsys_0_control_slave_agent:rf_source_startofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_startofpacket
	signal sysid_qsys_0_control_slave_agent_rf_source_endofpacket                             : std_logic;                      -- sysid_qsys_0_control_slave_agent:rf_source_endofpacket -> sysid_qsys_0_control_slave_agent_rsp_fifo:in_endofpacket
	signal sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid                                : std_logic;                      -- sysid_qsys_0_control_slave_agent_rsp_fifo:out_valid -> sysid_qsys_0_control_slave_agent:rf_sink_valid
	signal sysid_qsys_0_control_slave_agent_rsp_fifo_out_data                                 : std_logic_vector(110 downto 0); -- sysid_qsys_0_control_slave_agent_rsp_fifo:out_data -> sysid_qsys_0_control_slave_agent:rf_sink_data
	signal sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready                                : std_logic;                      -- sysid_qsys_0_control_slave_agent:rf_sink_ready -> sysid_qsys_0_control_slave_agent_rsp_fifo:out_ready
	signal sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket                        : std_logic;                      -- sysid_qsys_0_control_slave_agent_rsp_fifo:out_startofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_startofpacket
	signal sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket                          : std_logic;                      -- sysid_qsys_0_control_slave_agent_rsp_fifo:out_endofpacket -> sysid_qsys_0_control_slave_agent:rf_sink_endofpacket
	signal sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid                              : std_logic;                      -- sysid_qsys_0_control_slave_agent:rdata_fifo_src_valid -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_valid
	signal sysid_qsys_0_control_slave_agent_rdata_fifo_src_data                               : std_logic_vector(33 downto 0);  -- sysid_qsys_0_control_slave_agent:rdata_fifo_src_data -> sysid_qsys_0_control_slave_agent:rdata_fifo_sink_data
	signal sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready                              : std_logic;                      -- sysid_qsys_0_control_slave_agent:rdata_fifo_sink_ready -> sysid_qsys_0_control_slave_agent:rdata_fifo_src_ready
	signal cmd_mux_001_src_valid                                                              : std_logic;                      -- cmd_mux_001:src_valid -> sysid_qsys_0_control_slave_agent:cp_valid
	signal cmd_mux_001_src_data                                                               : std_logic_vector(109 downto 0); -- cmd_mux_001:src_data -> sysid_qsys_0_control_slave_agent:cp_data
	signal cmd_mux_001_src_ready                                                              : std_logic;                      -- sysid_qsys_0_control_slave_agent:cp_ready -> cmd_mux_001:src_ready
	signal cmd_mux_001_src_channel                                                            : std_logic_vector(9 downto 0);   -- cmd_mux_001:src_channel -> sysid_qsys_0_control_slave_agent:cp_channel
	signal cmd_mux_001_src_startofpacket                                                      : std_logic;                      -- cmd_mux_001:src_startofpacket -> sysid_qsys_0_control_slave_agent:cp_startofpacket
	signal cmd_mux_001_src_endofpacket                                                        : std_logic;                      -- cmd_mux_001:src_endofpacket -> sysid_qsys_0_control_slave_agent:cp_endofpacket
	signal crypto_module_csr_agent_m0_readdata                                                : std_logic_vector(31 downto 0);  -- crypto_module_csr_translator:uav_readdata -> crypto_module_csr_agent:m0_readdata
	signal crypto_module_csr_agent_m0_waitrequest                                             : std_logic;                      -- crypto_module_csr_translator:uav_waitrequest -> crypto_module_csr_agent:m0_waitrequest
	signal crypto_module_csr_agent_m0_debugaccess                                             : std_logic;                      -- crypto_module_csr_agent:m0_debugaccess -> crypto_module_csr_translator:uav_debugaccess
	signal crypto_module_csr_agent_m0_address                                                 : std_logic_vector(31 downto 0);  -- crypto_module_csr_agent:m0_address -> crypto_module_csr_translator:uav_address
	signal crypto_module_csr_agent_m0_byteenable                                              : std_logic_vector(3 downto 0);   -- crypto_module_csr_agent:m0_byteenable -> crypto_module_csr_translator:uav_byteenable
	signal crypto_module_csr_agent_m0_read                                                    : std_logic;                      -- crypto_module_csr_agent:m0_read -> crypto_module_csr_translator:uav_read
	signal crypto_module_csr_agent_m0_readdatavalid                                           : std_logic;                      -- crypto_module_csr_translator:uav_readdatavalid -> crypto_module_csr_agent:m0_readdatavalid
	signal crypto_module_csr_agent_m0_lock                                                    : std_logic;                      -- crypto_module_csr_agent:m0_lock -> crypto_module_csr_translator:uav_lock
	signal crypto_module_csr_agent_m0_writedata                                               : std_logic_vector(31 downto 0);  -- crypto_module_csr_agent:m0_writedata -> crypto_module_csr_translator:uav_writedata
	signal crypto_module_csr_agent_m0_write                                                   : std_logic;                      -- crypto_module_csr_agent:m0_write -> crypto_module_csr_translator:uav_write
	signal crypto_module_csr_agent_m0_burstcount                                              : std_logic_vector(2 downto 0);   -- crypto_module_csr_agent:m0_burstcount -> crypto_module_csr_translator:uav_burstcount
	signal crypto_module_csr_agent_rf_source_valid                                            : std_logic;                      -- crypto_module_csr_agent:rf_source_valid -> crypto_module_csr_agent_rsp_fifo:in_valid
	signal crypto_module_csr_agent_rf_source_data                                             : std_logic_vector(110 downto 0); -- crypto_module_csr_agent:rf_source_data -> crypto_module_csr_agent_rsp_fifo:in_data
	signal crypto_module_csr_agent_rf_source_ready                                            : std_logic;                      -- crypto_module_csr_agent_rsp_fifo:in_ready -> crypto_module_csr_agent:rf_source_ready
	signal crypto_module_csr_agent_rf_source_startofpacket                                    : std_logic;                      -- crypto_module_csr_agent:rf_source_startofpacket -> crypto_module_csr_agent_rsp_fifo:in_startofpacket
	signal crypto_module_csr_agent_rf_source_endofpacket                                      : std_logic;                      -- crypto_module_csr_agent:rf_source_endofpacket -> crypto_module_csr_agent_rsp_fifo:in_endofpacket
	signal crypto_module_csr_agent_rsp_fifo_out_valid                                         : std_logic;                      -- crypto_module_csr_agent_rsp_fifo:out_valid -> crypto_module_csr_agent:rf_sink_valid
	signal crypto_module_csr_agent_rsp_fifo_out_data                                          : std_logic_vector(110 downto 0); -- crypto_module_csr_agent_rsp_fifo:out_data -> crypto_module_csr_agent:rf_sink_data
	signal crypto_module_csr_agent_rsp_fifo_out_ready                                         : std_logic;                      -- crypto_module_csr_agent:rf_sink_ready -> crypto_module_csr_agent_rsp_fifo:out_ready
	signal crypto_module_csr_agent_rsp_fifo_out_startofpacket                                 : std_logic;                      -- crypto_module_csr_agent_rsp_fifo:out_startofpacket -> crypto_module_csr_agent:rf_sink_startofpacket
	signal crypto_module_csr_agent_rsp_fifo_out_endofpacket                                   : std_logic;                      -- crypto_module_csr_agent_rsp_fifo:out_endofpacket -> crypto_module_csr_agent:rf_sink_endofpacket
	signal crypto_module_csr_agent_rdata_fifo_src_valid                                       : std_logic;                      -- crypto_module_csr_agent:rdata_fifo_src_valid -> crypto_module_csr_agent:rdata_fifo_sink_valid
	signal crypto_module_csr_agent_rdata_fifo_src_data                                        : std_logic_vector(33 downto 0);  -- crypto_module_csr_agent:rdata_fifo_src_data -> crypto_module_csr_agent:rdata_fifo_sink_data
	signal crypto_module_csr_agent_rdata_fifo_src_ready                                       : std_logic;                      -- crypto_module_csr_agent:rdata_fifo_sink_ready -> crypto_module_csr_agent:rdata_fifo_src_ready
	signal cmd_mux_002_src_valid                                                              : std_logic;                      -- cmd_mux_002:src_valid -> crypto_module_csr_agent:cp_valid
	signal cmd_mux_002_src_data                                                               : std_logic_vector(109 downto 0); -- cmd_mux_002:src_data -> crypto_module_csr_agent:cp_data
	signal cmd_mux_002_src_ready                                                              : std_logic;                      -- crypto_module_csr_agent:cp_ready -> cmd_mux_002:src_ready
	signal cmd_mux_002_src_channel                                                            : std_logic_vector(9 downto 0);   -- cmd_mux_002:src_channel -> crypto_module_csr_agent:cp_channel
	signal cmd_mux_002_src_startofpacket                                                      : std_logic;                      -- cmd_mux_002:src_startofpacket -> crypto_module_csr_agent:cp_startofpacket
	signal cmd_mux_002_src_endofpacket                                                        : std_logic;                      -- cmd_mux_002:src_endofpacket -> crypto_module_csr_agent:cp_endofpacket
	signal nios2_qsys_0_jtag_debug_module_agent_m0_readdata                                   : std_logic_vector(31 downto 0);  -- nios2_qsys_0_jtag_debug_module_translator:uav_readdata -> nios2_qsys_0_jtag_debug_module_agent:m0_readdata
	signal nios2_qsys_0_jtag_debug_module_agent_m0_waitrequest                                : std_logic;                      -- nios2_qsys_0_jtag_debug_module_translator:uav_waitrequest -> nios2_qsys_0_jtag_debug_module_agent:m0_waitrequest
	signal nios2_qsys_0_jtag_debug_module_agent_m0_debugaccess                                : std_logic;                      -- nios2_qsys_0_jtag_debug_module_agent:m0_debugaccess -> nios2_qsys_0_jtag_debug_module_translator:uav_debugaccess
	signal nios2_qsys_0_jtag_debug_module_agent_m0_address                                    : std_logic_vector(31 downto 0);  -- nios2_qsys_0_jtag_debug_module_agent:m0_address -> nios2_qsys_0_jtag_debug_module_translator:uav_address
	signal nios2_qsys_0_jtag_debug_module_agent_m0_byteenable                                 : std_logic_vector(3 downto 0);   -- nios2_qsys_0_jtag_debug_module_agent:m0_byteenable -> nios2_qsys_0_jtag_debug_module_translator:uav_byteenable
	signal nios2_qsys_0_jtag_debug_module_agent_m0_read                                       : std_logic;                      -- nios2_qsys_0_jtag_debug_module_agent:m0_read -> nios2_qsys_0_jtag_debug_module_translator:uav_read
	signal nios2_qsys_0_jtag_debug_module_agent_m0_readdatavalid                              : std_logic;                      -- nios2_qsys_0_jtag_debug_module_translator:uav_readdatavalid -> nios2_qsys_0_jtag_debug_module_agent:m0_readdatavalid
	signal nios2_qsys_0_jtag_debug_module_agent_m0_lock                                       : std_logic;                      -- nios2_qsys_0_jtag_debug_module_agent:m0_lock -> nios2_qsys_0_jtag_debug_module_translator:uav_lock
	signal nios2_qsys_0_jtag_debug_module_agent_m0_writedata                                  : std_logic_vector(31 downto 0);  -- nios2_qsys_0_jtag_debug_module_agent:m0_writedata -> nios2_qsys_0_jtag_debug_module_translator:uav_writedata
	signal nios2_qsys_0_jtag_debug_module_agent_m0_write                                      : std_logic;                      -- nios2_qsys_0_jtag_debug_module_agent:m0_write -> nios2_qsys_0_jtag_debug_module_translator:uav_write
	signal nios2_qsys_0_jtag_debug_module_agent_m0_burstcount                                 : std_logic_vector(2 downto 0);   -- nios2_qsys_0_jtag_debug_module_agent:m0_burstcount -> nios2_qsys_0_jtag_debug_module_translator:uav_burstcount
	signal nios2_qsys_0_jtag_debug_module_agent_rf_source_valid                               : std_logic;                      -- nios2_qsys_0_jtag_debug_module_agent:rf_source_valid -> nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:in_valid
	signal nios2_qsys_0_jtag_debug_module_agent_rf_source_data                                : std_logic_vector(110 downto 0); -- nios2_qsys_0_jtag_debug_module_agent:rf_source_data -> nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:in_data
	signal nios2_qsys_0_jtag_debug_module_agent_rf_source_ready                               : std_logic;                      -- nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:in_ready -> nios2_qsys_0_jtag_debug_module_agent:rf_source_ready
	signal nios2_qsys_0_jtag_debug_module_agent_rf_source_startofpacket                       : std_logic;                      -- nios2_qsys_0_jtag_debug_module_agent:rf_source_startofpacket -> nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:in_startofpacket
	signal nios2_qsys_0_jtag_debug_module_agent_rf_source_endofpacket                         : std_logic;                      -- nios2_qsys_0_jtag_debug_module_agent:rf_source_endofpacket -> nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:in_endofpacket
	signal nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_valid                            : std_logic;                      -- nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:out_valid -> nios2_qsys_0_jtag_debug_module_agent:rf_sink_valid
	signal nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_data                             : std_logic_vector(110 downto 0); -- nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:out_data -> nios2_qsys_0_jtag_debug_module_agent:rf_sink_data
	signal nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_ready                            : std_logic;                      -- nios2_qsys_0_jtag_debug_module_agent:rf_sink_ready -> nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:out_ready
	signal nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_startofpacket                    : std_logic;                      -- nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:out_startofpacket -> nios2_qsys_0_jtag_debug_module_agent:rf_sink_startofpacket
	signal nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_endofpacket                      : std_logic;                      -- nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:out_endofpacket -> nios2_qsys_0_jtag_debug_module_agent:rf_sink_endofpacket
	signal nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_valid                          : std_logic;                      -- nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_src_valid -> nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_sink_valid
	signal nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_data                           : std_logic_vector(33 downto 0);  -- nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_src_data -> nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_sink_data
	signal nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_ready                          : std_logic;                      -- nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_sink_ready -> nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_src_ready
	signal cmd_mux_003_src_valid                                                              : std_logic;                      -- cmd_mux_003:src_valid -> nios2_qsys_0_jtag_debug_module_agent:cp_valid
	signal cmd_mux_003_src_data                                                               : std_logic_vector(109 downto 0); -- cmd_mux_003:src_data -> nios2_qsys_0_jtag_debug_module_agent:cp_data
	signal cmd_mux_003_src_ready                                                              : std_logic;                      -- nios2_qsys_0_jtag_debug_module_agent:cp_ready -> cmd_mux_003:src_ready
	signal cmd_mux_003_src_channel                                                            : std_logic_vector(9 downto 0);   -- cmd_mux_003:src_channel -> nios2_qsys_0_jtag_debug_module_agent:cp_channel
	signal cmd_mux_003_src_startofpacket                                                      : std_logic;                      -- cmd_mux_003:src_startofpacket -> nios2_qsys_0_jtag_debug_module_agent:cp_startofpacket
	signal cmd_mux_003_src_endofpacket                                                        : std_logic;                      -- cmd_mux_003:src_endofpacket -> nios2_qsys_0_jtag_debug_module_agent:cp_endofpacket
	signal instruction_memory_s1_agent_m0_readdata                                            : std_logic_vector(31 downto 0);  -- instruction_memory_s1_translator:uav_readdata -> instruction_memory_s1_agent:m0_readdata
	signal instruction_memory_s1_agent_m0_waitrequest                                         : std_logic;                      -- instruction_memory_s1_translator:uav_waitrequest -> instruction_memory_s1_agent:m0_waitrequest
	signal instruction_memory_s1_agent_m0_debugaccess                                         : std_logic;                      -- instruction_memory_s1_agent:m0_debugaccess -> instruction_memory_s1_translator:uav_debugaccess
	signal instruction_memory_s1_agent_m0_address                                             : std_logic_vector(31 downto 0);  -- instruction_memory_s1_agent:m0_address -> instruction_memory_s1_translator:uav_address
	signal instruction_memory_s1_agent_m0_byteenable                                          : std_logic_vector(3 downto 0);   -- instruction_memory_s1_agent:m0_byteenable -> instruction_memory_s1_translator:uav_byteenable
	signal instruction_memory_s1_agent_m0_read                                                : std_logic;                      -- instruction_memory_s1_agent:m0_read -> instruction_memory_s1_translator:uav_read
	signal instruction_memory_s1_agent_m0_readdatavalid                                       : std_logic;                      -- instruction_memory_s1_translator:uav_readdatavalid -> instruction_memory_s1_agent:m0_readdatavalid
	signal instruction_memory_s1_agent_m0_lock                                                : std_logic;                      -- instruction_memory_s1_agent:m0_lock -> instruction_memory_s1_translator:uav_lock
	signal instruction_memory_s1_agent_m0_writedata                                           : std_logic_vector(31 downto 0);  -- instruction_memory_s1_agent:m0_writedata -> instruction_memory_s1_translator:uav_writedata
	signal instruction_memory_s1_agent_m0_write                                               : std_logic;                      -- instruction_memory_s1_agent:m0_write -> instruction_memory_s1_translator:uav_write
	signal instruction_memory_s1_agent_m0_burstcount                                          : std_logic_vector(2 downto 0);   -- instruction_memory_s1_agent:m0_burstcount -> instruction_memory_s1_translator:uav_burstcount
	signal instruction_memory_s1_agent_rf_source_valid                                        : std_logic;                      -- instruction_memory_s1_agent:rf_source_valid -> instruction_memory_s1_agent_rsp_fifo:in_valid
	signal instruction_memory_s1_agent_rf_source_data                                         : std_logic_vector(110 downto 0); -- instruction_memory_s1_agent:rf_source_data -> instruction_memory_s1_agent_rsp_fifo:in_data
	signal instruction_memory_s1_agent_rf_source_ready                                        : std_logic;                      -- instruction_memory_s1_agent_rsp_fifo:in_ready -> instruction_memory_s1_agent:rf_source_ready
	signal instruction_memory_s1_agent_rf_source_startofpacket                                : std_logic;                      -- instruction_memory_s1_agent:rf_source_startofpacket -> instruction_memory_s1_agent_rsp_fifo:in_startofpacket
	signal instruction_memory_s1_agent_rf_source_endofpacket                                  : std_logic;                      -- instruction_memory_s1_agent:rf_source_endofpacket -> instruction_memory_s1_agent_rsp_fifo:in_endofpacket
	signal instruction_memory_s1_agent_rsp_fifo_out_valid                                     : std_logic;                      -- instruction_memory_s1_agent_rsp_fifo:out_valid -> instruction_memory_s1_agent:rf_sink_valid
	signal instruction_memory_s1_agent_rsp_fifo_out_data                                      : std_logic_vector(110 downto 0); -- instruction_memory_s1_agent_rsp_fifo:out_data -> instruction_memory_s1_agent:rf_sink_data
	signal instruction_memory_s1_agent_rsp_fifo_out_ready                                     : std_logic;                      -- instruction_memory_s1_agent:rf_sink_ready -> instruction_memory_s1_agent_rsp_fifo:out_ready
	signal instruction_memory_s1_agent_rsp_fifo_out_startofpacket                             : std_logic;                      -- instruction_memory_s1_agent_rsp_fifo:out_startofpacket -> instruction_memory_s1_agent:rf_sink_startofpacket
	signal instruction_memory_s1_agent_rsp_fifo_out_endofpacket                               : std_logic;                      -- instruction_memory_s1_agent_rsp_fifo:out_endofpacket -> instruction_memory_s1_agent:rf_sink_endofpacket
	signal instruction_memory_s1_agent_rdata_fifo_src_valid                                   : std_logic;                      -- instruction_memory_s1_agent:rdata_fifo_src_valid -> instruction_memory_s1_agent:rdata_fifo_sink_valid
	signal instruction_memory_s1_agent_rdata_fifo_src_data                                    : std_logic_vector(33 downto 0);  -- instruction_memory_s1_agent:rdata_fifo_src_data -> instruction_memory_s1_agent:rdata_fifo_sink_data
	signal instruction_memory_s1_agent_rdata_fifo_src_ready                                   : std_logic;                      -- instruction_memory_s1_agent:rdata_fifo_sink_ready -> instruction_memory_s1_agent:rdata_fifo_src_ready
	signal cmd_mux_004_src_valid                                                              : std_logic;                      -- cmd_mux_004:src_valid -> instruction_memory_s1_agent:cp_valid
	signal cmd_mux_004_src_data                                                               : std_logic_vector(109 downto 0); -- cmd_mux_004:src_data -> instruction_memory_s1_agent:cp_data
	signal cmd_mux_004_src_ready                                                              : std_logic;                      -- instruction_memory_s1_agent:cp_ready -> cmd_mux_004:src_ready
	signal cmd_mux_004_src_channel                                                            : std_logic_vector(9 downto 0);   -- cmd_mux_004:src_channel -> instruction_memory_s1_agent:cp_channel
	signal cmd_mux_004_src_startofpacket                                                      : std_logic;                      -- cmd_mux_004:src_startofpacket -> instruction_memory_s1_agent:cp_startofpacket
	signal cmd_mux_004_src_endofpacket                                                        : std_logic;                      -- cmd_mux_004:src_endofpacket -> instruction_memory_s1_agent:cp_endofpacket
	signal timer_0_s1_agent_m0_readdata                                                       : std_logic_vector(31 downto 0);  -- timer_0_s1_translator:uav_readdata -> timer_0_s1_agent:m0_readdata
	signal timer_0_s1_agent_m0_waitrequest                                                    : std_logic;                      -- timer_0_s1_translator:uav_waitrequest -> timer_0_s1_agent:m0_waitrequest
	signal timer_0_s1_agent_m0_debugaccess                                                    : std_logic;                      -- timer_0_s1_agent:m0_debugaccess -> timer_0_s1_translator:uav_debugaccess
	signal timer_0_s1_agent_m0_address                                                        : std_logic_vector(31 downto 0);  -- timer_0_s1_agent:m0_address -> timer_0_s1_translator:uav_address
	signal timer_0_s1_agent_m0_byteenable                                                     : std_logic_vector(3 downto 0);   -- timer_0_s1_agent:m0_byteenable -> timer_0_s1_translator:uav_byteenable
	signal timer_0_s1_agent_m0_read                                                           : std_logic;                      -- timer_0_s1_agent:m0_read -> timer_0_s1_translator:uav_read
	signal timer_0_s1_agent_m0_readdatavalid                                                  : std_logic;                      -- timer_0_s1_translator:uav_readdatavalid -> timer_0_s1_agent:m0_readdatavalid
	signal timer_0_s1_agent_m0_lock                                                           : std_logic;                      -- timer_0_s1_agent:m0_lock -> timer_0_s1_translator:uav_lock
	signal timer_0_s1_agent_m0_writedata                                                      : std_logic_vector(31 downto 0);  -- timer_0_s1_agent:m0_writedata -> timer_0_s1_translator:uav_writedata
	signal timer_0_s1_agent_m0_write                                                          : std_logic;                      -- timer_0_s1_agent:m0_write -> timer_0_s1_translator:uav_write
	signal timer_0_s1_agent_m0_burstcount                                                     : std_logic_vector(2 downto 0);   -- timer_0_s1_agent:m0_burstcount -> timer_0_s1_translator:uav_burstcount
	signal timer_0_s1_agent_rf_source_valid                                                   : std_logic;                      -- timer_0_s1_agent:rf_source_valid -> timer_0_s1_agent_rsp_fifo:in_valid
	signal timer_0_s1_agent_rf_source_data                                                    : std_logic_vector(110 downto 0); -- timer_0_s1_agent:rf_source_data -> timer_0_s1_agent_rsp_fifo:in_data
	signal timer_0_s1_agent_rf_source_ready                                                   : std_logic;                      -- timer_0_s1_agent_rsp_fifo:in_ready -> timer_0_s1_agent:rf_source_ready
	signal timer_0_s1_agent_rf_source_startofpacket                                           : std_logic;                      -- timer_0_s1_agent:rf_source_startofpacket -> timer_0_s1_agent_rsp_fifo:in_startofpacket
	signal timer_0_s1_agent_rf_source_endofpacket                                             : std_logic;                      -- timer_0_s1_agent:rf_source_endofpacket -> timer_0_s1_agent_rsp_fifo:in_endofpacket
	signal timer_0_s1_agent_rsp_fifo_out_valid                                                : std_logic;                      -- timer_0_s1_agent_rsp_fifo:out_valid -> timer_0_s1_agent:rf_sink_valid
	signal timer_0_s1_agent_rsp_fifo_out_data                                                 : std_logic_vector(110 downto 0); -- timer_0_s1_agent_rsp_fifo:out_data -> timer_0_s1_agent:rf_sink_data
	signal timer_0_s1_agent_rsp_fifo_out_ready                                                : std_logic;                      -- timer_0_s1_agent:rf_sink_ready -> timer_0_s1_agent_rsp_fifo:out_ready
	signal timer_0_s1_agent_rsp_fifo_out_startofpacket                                        : std_logic;                      -- timer_0_s1_agent_rsp_fifo:out_startofpacket -> timer_0_s1_agent:rf_sink_startofpacket
	signal timer_0_s1_agent_rsp_fifo_out_endofpacket                                          : std_logic;                      -- timer_0_s1_agent_rsp_fifo:out_endofpacket -> timer_0_s1_agent:rf_sink_endofpacket
	signal timer_0_s1_agent_rdata_fifo_src_valid                                              : std_logic;                      -- timer_0_s1_agent:rdata_fifo_src_valid -> timer_0_s1_agent:rdata_fifo_sink_valid
	signal timer_0_s1_agent_rdata_fifo_src_data                                               : std_logic_vector(33 downto 0);  -- timer_0_s1_agent:rdata_fifo_src_data -> timer_0_s1_agent:rdata_fifo_sink_data
	signal timer_0_s1_agent_rdata_fifo_src_ready                                              : std_logic;                      -- timer_0_s1_agent:rdata_fifo_sink_ready -> timer_0_s1_agent:rdata_fifo_src_ready
	signal cmd_mux_005_src_valid                                                              : std_logic;                      -- cmd_mux_005:src_valid -> timer_0_s1_agent:cp_valid
	signal cmd_mux_005_src_data                                                               : std_logic_vector(109 downto 0); -- cmd_mux_005:src_data -> timer_0_s1_agent:cp_data
	signal cmd_mux_005_src_ready                                                              : std_logic;                      -- timer_0_s1_agent:cp_ready -> cmd_mux_005:src_ready
	signal cmd_mux_005_src_channel                                                            : std_logic_vector(9 downto 0);   -- cmd_mux_005:src_channel -> timer_0_s1_agent:cp_channel
	signal cmd_mux_005_src_startofpacket                                                      : std_logic;                      -- cmd_mux_005:src_startofpacket -> timer_0_s1_agent:cp_startofpacket
	signal cmd_mux_005_src_endofpacket                                                        : std_logic;                      -- cmd_mux_005:src_endofpacket -> timer_0_s1_agent:cp_endofpacket
	signal stack_heap_s1_agent_m0_readdata                                                    : std_logic_vector(31 downto 0);  -- stack_heap_s1_translator:uav_readdata -> stack_heap_s1_agent:m0_readdata
	signal stack_heap_s1_agent_m0_waitrequest                                                 : std_logic;                      -- stack_heap_s1_translator:uav_waitrequest -> stack_heap_s1_agent:m0_waitrequest
	signal stack_heap_s1_agent_m0_debugaccess                                                 : std_logic;                      -- stack_heap_s1_agent:m0_debugaccess -> stack_heap_s1_translator:uav_debugaccess
	signal stack_heap_s1_agent_m0_address                                                     : std_logic_vector(31 downto 0);  -- stack_heap_s1_agent:m0_address -> stack_heap_s1_translator:uav_address
	signal stack_heap_s1_agent_m0_byteenable                                                  : std_logic_vector(3 downto 0);   -- stack_heap_s1_agent:m0_byteenable -> stack_heap_s1_translator:uav_byteenable
	signal stack_heap_s1_agent_m0_read                                                        : std_logic;                      -- stack_heap_s1_agent:m0_read -> stack_heap_s1_translator:uav_read
	signal stack_heap_s1_agent_m0_readdatavalid                                               : std_logic;                      -- stack_heap_s1_translator:uav_readdatavalid -> stack_heap_s1_agent:m0_readdatavalid
	signal stack_heap_s1_agent_m0_lock                                                        : std_logic;                      -- stack_heap_s1_agent:m0_lock -> stack_heap_s1_translator:uav_lock
	signal stack_heap_s1_agent_m0_writedata                                                   : std_logic_vector(31 downto 0);  -- stack_heap_s1_agent:m0_writedata -> stack_heap_s1_translator:uav_writedata
	signal stack_heap_s1_agent_m0_write                                                       : std_logic;                      -- stack_heap_s1_agent:m0_write -> stack_heap_s1_translator:uav_write
	signal stack_heap_s1_agent_m0_burstcount                                                  : std_logic_vector(2 downto 0);   -- stack_heap_s1_agent:m0_burstcount -> stack_heap_s1_translator:uav_burstcount
	signal stack_heap_s1_agent_rf_source_valid                                                : std_logic;                      -- stack_heap_s1_agent:rf_source_valid -> stack_heap_s1_agent_rsp_fifo:in_valid
	signal stack_heap_s1_agent_rf_source_data                                                 : std_logic_vector(110 downto 0); -- stack_heap_s1_agent:rf_source_data -> stack_heap_s1_agent_rsp_fifo:in_data
	signal stack_heap_s1_agent_rf_source_ready                                                : std_logic;                      -- stack_heap_s1_agent_rsp_fifo:in_ready -> stack_heap_s1_agent:rf_source_ready
	signal stack_heap_s1_agent_rf_source_startofpacket                                        : std_logic;                      -- stack_heap_s1_agent:rf_source_startofpacket -> stack_heap_s1_agent_rsp_fifo:in_startofpacket
	signal stack_heap_s1_agent_rf_source_endofpacket                                          : std_logic;                      -- stack_heap_s1_agent:rf_source_endofpacket -> stack_heap_s1_agent_rsp_fifo:in_endofpacket
	signal stack_heap_s1_agent_rsp_fifo_out_valid                                             : std_logic;                      -- stack_heap_s1_agent_rsp_fifo:out_valid -> stack_heap_s1_agent:rf_sink_valid
	signal stack_heap_s1_agent_rsp_fifo_out_data                                              : std_logic_vector(110 downto 0); -- stack_heap_s1_agent_rsp_fifo:out_data -> stack_heap_s1_agent:rf_sink_data
	signal stack_heap_s1_agent_rsp_fifo_out_ready                                             : std_logic;                      -- stack_heap_s1_agent:rf_sink_ready -> stack_heap_s1_agent_rsp_fifo:out_ready
	signal stack_heap_s1_agent_rsp_fifo_out_startofpacket                                     : std_logic;                      -- stack_heap_s1_agent_rsp_fifo:out_startofpacket -> stack_heap_s1_agent:rf_sink_startofpacket
	signal stack_heap_s1_agent_rsp_fifo_out_endofpacket                                       : std_logic;                      -- stack_heap_s1_agent_rsp_fifo:out_endofpacket -> stack_heap_s1_agent:rf_sink_endofpacket
	signal stack_heap_s1_agent_rdata_fifo_src_valid                                           : std_logic;                      -- stack_heap_s1_agent:rdata_fifo_src_valid -> stack_heap_s1_agent:rdata_fifo_sink_valid
	signal stack_heap_s1_agent_rdata_fifo_src_data                                            : std_logic_vector(33 downto 0);  -- stack_heap_s1_agent:rdata_fifo_src_data -> stack_heap_s1_agent:rdata_fifo_sink_data
	signal stack_heap_s1_agent_rdata_fifo_src_ready                                           : std_logic;                      -- stack_heap_s1_agent:rdata_fifo_sink_ready -> stack_heap_s1_agent:rdata_fifo_src_ready
	signal cmd_mux_006_src_valid                                                              : std_logic;                      -- cmd_mux_006:src_valid -> stack_heap_s1_agent:cp_valid
	signal cmd_mux_006_src_data                                                               : std_logic_vector(109 downto 0); -- cmd_mux_006:src_data -> stack_heap_s1_agent:cp_data
	signal cmd_mux_006_src_ready                                                              : std_logic;                      -- stack_heap_s1_agent:cp_ready -> cmd_mux_006:src_ready
	signal cmd_mux_006_src_channel                                                            : std_logic_vector(9 downto 0);   -- cmd_mux_006:src_channel -> stack_heap_s1_agent:cp_channel
	signal cmd_mux_006_src_startofpacket                                                      : std_logic;                      -- cmd_mux_006:src_startofpacket -> stack_heap_s1_agent:cp_startofpacket
	signal cmd_mux_006_src_endofpacket                                                        : std_logic;                      -- cmd_mux_006:src_endofpacket -> stack_heap_s1_agent:cp_endofpacket
	signal incoming_memory_s1_agent_m0_readdata                                               : std_logic_vector(31 downto 0);  -- incoming_memory_s1_translator:uav_readdata -> incoming_memory_s1_agent:m0_readdata
	signal incoming_memory_s1_agent_m0_waitrequest                                            : std_logic;                      -- incoming_memory_s1_translator:uav_waitrequest -> incoming_memory_s1_agent:m0_waitrequest
	signal incoming_memory_s1_agent_m0_debugaccess                                            : std_logic;                      -- incoming_memory_s1_agent:m0_debugaccess -> incoming_memory_s1_translator:uav_debugaccess
	signal incoming_memory_s1_agent_m0_address                                                : std_logic_vector(31 downto 0);  -- incoming_memory_s1_agent:m0_address -> incoming_memory_s1_translator:uav_address
	signal incoming_memory_s1_agent_m0_byteenable                                             : std_logic_vector(3 downto 0);   -- incoming_memory_s1_agent:m0_byteenable -> incoming_memory_s1_translator:uav_byteenable
	signal incoming_memory_s1_agent_m0_read                                                   : std_logic;                      -- incoming_memory_s1_agent:m0_read -> incoming_memory_s1_translator:uav_read
	signal incoming_memory_s1_agent_m0_readdatavalid                                          : std_logic;                      -- incoming_memory_s1_translator:uav_readdatavalid -> incoming_memory_s1_agent:m0_readdatavalid
	signal incoming_memory_s1_agent_m0_lock                                                   : std_logic;                      -- incoming_memory_s1_agent:m0_lock -> incoming_memory_s1_translator:uav_lock
	signal incoming_memory_s1_agent_m0_writedata                                              : std_logic_vector(31 downto 0);  -- incoming_memory_s1_agent:m0_writedata -> incoming_memory_s1_translator:uav_writedata
	signal incoming_memory_s1_agent_m0_write                                                  : std_logic;                      -- incoming_memory_s1_agent:m0_write -> incoming_memory_s1_translator:uav_write
	signal incoming_memory_s1_agent_m0_burstcount                                             : std_logic_vector(2 downto 0);   -- incoming_memory_s1_agent:m0_burstcount -> incoming_memory_s1_translator:uav_burstcount
	signal incoming_memory_s1_agent_rf_source_valid                                           : std_logic;                      -- incoming_memory_s1_agent:rf_source_valid -> incoming_memory_s1_agent_rsp_fifo:in_valid
	signal incoming_memory_s1_agent_rf_source_data                                            : std_logic_vector(110 downto 0); -- incoming_memory_s1_agent:rf_source_data -> incoming_memory_s1_agent_rsp_fifo:in_data
	signal incoming_memory_s1_agent_rf_source_ready                                           : std_logic;                      -- incoming_memory_s1_agent_rsp_fifo:in_ready -> incoming_memory_s1_agent:rf_source_ready
	signal incoming_memory_s1_agent_rf_source_startofpacket                                   : std_logic;                      -- incoming_memory_s1_agent:rf_source_startofpacket -> incoming_memory_s1_agent_rsp_fifo:in_startofpacket
	signal incoming_memory_s1_agent_rf_source_endofpacket                                     : std_logic;                      -- incoming_memory_s1_agent:rf_source_endofpacket -> incoming_memory_s1_agent_rsp_fifo:in_endofpacket
	signal incoming_memory_s1_agent_rsp_fifo_out_valid                                        : std_logic;                      -- incoming_memory_s1_agent_rsp_fifo:out_valid -> incoming_memory_s1_agent:rf_sink_valid
	signal incoming_memory_s1_agent_rsp_fifo_out_data                                         : std_logic_vector(110 downto 0); -- incoming_memory_s1_agent_rsp_fifo:out_data -> incoming_memory_s1_agent:rf_sink_data
	signal incoming_memory_s1_agent_rsp_fifo_out_ready                                        : std_logic;                      -- incoming_memory_s1_agent:rf_sink_ready -> incoming_memory_s1_agent_rsp_fifo:out_ready
	signal incoming_memory_s1_agent_rsp_fifo_out_startofpacket                                : std_logic;                      -- incoming_memory_s1_agent_rsp_fifo:out_startofpacket -> incoming_memory_s1_agent:rf_sink_startofpacket
	signal incoming_memory_s1_agent_rsp_fifo_out_endofpacket                                  : std_logic;                      -- incoming_memory_s1_agent_rsp_fifo:out_endofpacket -> incoming_memory_s1_agent:rf_sink_endofpacket
	signal incoming_memory_s1_agent_rdata_fifo_src_valid                                      : std_logic;                      -- incoming_memory_s1_agent:rdata_fifo_src_valid -> incoming_memory_s1_agent:rdata_fifo_sink_valid
	signal incoming_memory_s1_agent_rdata_fifo_src_data                                       : std_logic_vector(33 downto 0);  -- incoming_memory_s1_agent:rdata_fifo_src_data -> incoming_memory_s1_agent:rdata_fifo_sink_data
	signal incoming_memory_s1_agent_rdata_fifo_src_ready                                      : std_logic;                      -- incoming_memory_s1_agent:rdata_fifo_sink_ready -> incoming_memory_s1_agent:rdata_fifo_src_ready
	signal cmd_mux_007_src_valid                                                              : std_logic;                      -- cmd_mux_007:src_valid -> incoming_memory_s1_agent:cp_valid
	signal cmd_mux_007_src_data                                                               : std_logic_vector(109 downto 0); -- cmd_mux_007:src_data -> incoming_memory_s1_agent:cp_data
	signal cmd_mux_007_src_ready                                                              : std_logic;                      -- incoming_memory_s1_agent:cp_ready -> cmd_mux_007:src_ready
	signal cmd_mux_007_src_channel                                                            : std_logic_vector(9 downto 0);   -- cmd_mux_007:src_channel -> incoming_memory_s1_agent:cp_channel
	signal cmd_mux_007_src_startofpacket                                                      : std_logic;                      -- cmd_mux_007:src_startofpacket -> incoming_memory_s1_agent:cp_startofpacket
	signal cmd_mux_007_src_endofpacket                                                        : std_logic;                      -- cmd_mux_007:src_endofpacket -> incoming_memory_s1_agent:cp_endofpacket
	signal outgoing_memory_s1_agent_m0_readdata                                               : std_logic_vector(31 downto 0);  -- outgoing_memory_s1_translator:uav_readdata -> outgoing_memory_s1_agent:m0_readdata
	signal outgoing_memory_s1_agent_m0_waitrequest                                            : std_logic;                      -- outgoing_memory_s1_translator:uav_waitrequest -> outgoing_memory_s1_agent:m0_waitrequest
	signal outgoing_memory_s1_agent_m0_debugaccess                                            : std_logic;                      -- outgoing_memory_s1_agent:m0_debugaccess -> outgoing_memory_s1_translator:uav_debugaccess
	signal outgoing_memory_s1_agent_m0_address                                                : std_logic_vector(31 downto 0);  -- outgoing_memory_s1_agent:m0_address -> outgoing_memory_s1_translator:uav_address
	signal outgoing_memory_s1_agent_m0_byteenable                                             : std_logic_vector(3 downto 0);   -- outgoing_memory_s1_agent:m0_byteenable -> outgoing_memory_s1_translator:uav_byteenable
	signal outgoing_memory_s1_agent_m0_read                                                   : std_logic;                      -- outgoing_memory_s1_agent:m0_read -> outgoing_memory_s1_translator:uav_read
	signal outgoing_memory_s1_agent_m0_readdatavalid                                          : std_logic;                      -- outgoing_memory_s1_translator:uav_readdatavalid -> outgoing_memory_s1_agent:m0_readdatavalid
	signal outgoing_memory_s1_agent_m0_lock                                                   : std_logic;                      -- outgoing_memory_s1_agent:m0_lock -> outgoing_memory_s1_translator:uav_lock
	signal outgoing_memory_s1_agent_m0_writedata                                              : std_logic_vector(31 downto 0);  -- outgoing_memory_s1_agent:m0_writedata -> outgoing_memory_s1_translator:uav_writedata
	signal outgoing_memory_s1_agent_m0_write                                                  : std_logic;                      -- outgoing_memory_s1_agent:m0_write -> outgoing_memory_s1_translator:uav_write
	signal outgoing_memory_s1_agent_m0_burstcount                                             : std_logic_vector(2 downto 0);   -- outgoing_memory_s1_agent:m0_burstcount -> outgoing_memory_s1_translator:uav_burstcount
	signal outgoing_memory_s1_agent_rf_source_valid                                           : std_logic;                      -- outgoing_memory_s1_agent:rf_source_valid -> outgoing_memory_s1_agent_rsp_fifo:in_valid
	signal outgoing_memory_s1_agent_rf_source_data                                            : std_logic_vector(110 downto 0); -- outgoing_memory_s1_agent:rf_source_data -> outgoing_memory_s1_agent_rsp_fifo:in_data
	signal outgoing_memory_s1_agent_rf_source_ready                                           : std_logic;                      -- outgoing_memory_s1_agent_rsp_fifo:in_ready -> outgoing_memory_s1_agent:rf_source_ready
	signal outgoing_memory_s1_agent_rf_source_startofpacket                                   : std_logic;                      -- outgoing_memory_s1_agent:rf_source_startofpacket -> outgoing_memory_s1_agent_rsp_fifo:in_startofpacket
	signal outgoing_memory_s1_agent_rf_source_endofpacket                                     : std_logic;                      -- outgoing_memory_s1_agent:rf_source_endofpacket -> outgoing_memory_s1_agent_rsp_fifo:in_endofpacket
	signal outgoing_memory_s1_agent_rsp_fifo_out_valid                                        : std_logic;                      -- outgoing_memory_s1_agent_rsp_fifo:out_valid -> outgoing_memory_s1_agent:rf_sink_valid
	signal outgoing_memory_s1_agent_rsp_fifo_out_data                                         : std_logic_vector(110 downto 0); -- outgoing_memory_s1_agent_rsp_fifo:out_data -> outgoing_memory_s1_agent:rf_sink_data
	signal outgoing_memory_s1_agent_rsp_fifo_out_ready                                        : std_logic;                      -- outgoing_memory_s1_agent:rf_sink_ready -> outgoing_memory_s1_agent_rsp_fifo:out_ready
	signal outgoing_memory_s1_agent_rsp_fifo_out_startofpacket                                : std_logic;                      -- outgoing_memory_s1_agent_rsp_fifo:out_startofpacket -> outgoing_memory_s1_agent:rf_sink_startofpacket
	signal outgoing_memory_s1_agent_rsp_fifo_out_endofpacket                                  : std_logic;                      -- outgoing_memory_s1_agent_rsp_fifo:out_endofpacket -> outgoing_memory_s1_agent:rf_sink_endofpacket
	signal outgoing_memory_s1_agent_rdata_fifo_src_valid                                      : std_logic;                      -- outgoing_memory_s1_agent:rdata_fifo_src_valid -> outgoing_memory_s1_agent:rdata_fifo_sink_valid
	signal outgoing_memory_s1_agent_rdata_fifo_src_data                                       : std_logic_vector(33 downto 0);  -- outgoing_memory_s1_agent:rdata_fifo_src_data -> outgoing_memory_s1_agent:rdata_fifo_sink_data
	signal outgoing_memory_s1_agent_rdata_fifo_src_ready                                      : std_logic;                      -- outgoing_memory_s1_agent:rdata_fifo_sink_ready -> outgoing_memory_s1_agent:rdata_fifo_src_ready
	signal cmd_mux_008_src_valid                                                              : std_logic;                      -- cmd_mux_008:src_valid -> outgoing_memory_s1_agent:cp_valid
	signal cmd_mux_008_src_data                                                               : std_logic_vector(109 downto 0); -- cmd_mux_008:src_data -> outgoing_memory_s1_agent:cp_data
	signal cmd_mux_008_src_ready                                                              : std_logic;                      -- outgoing_memory_s1_agent:cp_ready -> cmd_mux_008:src_ready
	signal cmd_mux_008_src_channel                                                            : std_logic_vector(9 downto 0);   -- cmd_mux_008:src_channel -> outgoing_memory_s1_agent:cp_channel
	signal cmd_mux_008_src_startofpacket                                                      : std_logic;                      -- cmd_mux_008:src_startofpacket -> outgoing_memory_s1_agent:cp_startofpacket
	signal cmd_mux_008_src_endofpacket                                                        : std_logic;                      -- cmd_mux_008:src_endofpacket -> outgoing_memory_s1_agent:cp_endofpacket
	signal timestamp_timer_s1_agent_m0_readdata                                               : std_logic_vector(31 downto 0);  -- timestamp_timer_s1_translator:uav_readdata -> timestamp_timer_s1_agent:m0_readdata
	signal timestamp_timer_s1_agent_m0_waitrequest                                            : std_logic;                      -- timestamp_timer_s1_translator:uav_waitrequest -> timestamp_timer_s1_agent:m0_waitrequest
	signal timestamp_timer_s1_agent_m0_debugaccess                                            : std_logic;                      -- timestamp_timer_s1_agent:m0_debugaccess -> timestamp_timer_s1_translator:uav_debugaccess
	signal timestamp_timer_s1_agent_m0_address                                                : std_logic_vector(31 downto 0);  -- timestamp_timer_s1_agent:m0_address -> timestamp_timer_s1_translator:uav_address
	signal timestamp_timer_s1_agent_m0_byteenable                                             : std_logic_vector(3 downto 0);   -- timestamp_timer_s1_agent:m0_byteenable -> timestamp_timer_s1_translator:uav_byteenable
	signal timestamp_timer_s1_agent_m0_read                                                   : std_logic;                      -- timestamp_timer_s1_agent:m0_read -> timestamp_timer_s1_translator:uav_read
	signal timestamp_timer_s1_agent_m0_readdatavalid                                          : std_logic;                      -- timestamp_timer_s1_translator:uav_readdatavalid -> timestamp_timer_s1_agent:m0_readdatavalid
	signal timestamp_timer_s1_agent_m0_lock                                                   : std_logic;                      -- timestamp_timer_s1_agent:m0_lock -> timestamp_timer_s1_translator:uav_lock
	signal timestamp_timer_s1_agent_m0_writedata                                              : std_logic_vector(31 downto 0);  -- timestamp_timer_s1_agent:m0_writedata -> timestamp_timer_s1_translator:uav_writedata
	signal timestamp_timer_s1_agent_m0_write                                                  : std_logic;                      -- timestamp_timer_s1_agent:m0_write -> timestamp_timer_s1_translator:uav_write
	signal timestamp_timer_s1_agent_m0_burstcount                                             : std_logic_vector(2 downto 0);   -- timestamp_timer_s1_agent:m0_burstcount -> timestamp_timer_s1_translator:uav_burstcount
	signal timestamp_timer_s1_agent_rf_source_valid                                           : std_logic;                      -- timestamp_timer_s1_agent:rf_source_valid -> timestamp_timer_s1_agent_rsp_fifo:in_valid
	signal timestamp_timer_s1_agent_rf_source_data                                            : std_logic_vector(110 downto 0); -- timestamp_timer_s1_agent:rf_source_data -> timestamp_timer_s1_agent_rsp_fifo:in_data
	signal timestamp_timer_s1_agent_rf_source_ready                                           : std_logic;                      -- timestamp_timer_s1_agent_rsp_fifo:in_ready -> timestamp_timer_s1_agent:rf_source_ready
	signal timestamp_timer_s1_agent_rf_source_startofpacket                                   : std_logic;                      -- timestamp_timer_s1_agent:rf_source_startofpacket -> timestamp_timer_s1_agent_rsp_fifo:in_startofpacket
	signal timestamp_timer_s1_agent_rf_source_endofpacket                                     : std_logic;                      -- timestamp_timer_s1_agent:rf_source_endofpacket -> timestamp_timer_s1_agent_rsp_fifo:in_endofpacket
	signal timestamp_timer_s1_agent_rsp_fifo_out_valid                                        : std_logic;                      -- timestamp_timer_s1_agent_rsp_fifo:out_valid -> timestamp_timer_s1_agent:rf_sink_valid
	signal timestamp_timer_s1_agent_rsp_fifo_out_data                                         : std_logic_vector(110 downto 0); -- timestamp_timer_s1_agent_rsp_fifo:out_data -> timestamp_timer_s1_agent:rf_sink_data
	signal timestamp_timer_s1_agent_rsp_fifo_out_ready                                        : std_logic;                      -- timestamp_timer_s1_agent:rf_sink_ready -> timestamp_timer_s1_agent_rsp_fifo:out_ready
	signal timestamp_timer_s1_agent_rsp_fifo_out_startofpacket                                : std_logic;                      -- timestamp_timer_s1_agent_rsp_fifo:out_startofpacket -> timestamp_timer_s1_agent:rf_sink_startofpacket
	signal timestamp_timer_s1_agent_rsp_fifo_out_endofpacket                                  : std_logic;                      -- timestamp_timer_s1_agent_rsp_fifo:out_endofpacket -> timestamp_timer_s1_agent:rf_sink_endofpacket
	signal timestamp_timer_s1_agent_rdata_fifo_src_valid                                      : std_logic;                      -- timestamp_timer_s1_agent:rdata_fifo_src_valid -> timestamp_timer_s1_agent:rdata_fifo_sink_valid
	signal timestamp_timer_s1_agent_rdata_fifo_src_data                                       : std_logic_vector(33 downto 0);  -- timestamp_timer_s1_agent:rdata_fifo_src_data -> timestamp_timer_s1_agent:rdata_fifo_sink_data
	signal timestamp_timer_s1_agent_rdata_fifo_src_ready                                      : std_logic;                      -- timestamp_timer_s1_agent:rdata_fifo_sink_ready -> timestamp_timer_s1_agent:rdata_fifo_src_ready
	signal cmd_mux_009_src_valid                                                              : std_logic;                      -- cmd_mux_009:src_valid -> timestamp_timer_s1_agent:cp_valid
	signal cmd_mux_009_src_data                                                               : std_logic_vector(109 downto 0); -- cmd_mux_009:src_data -> timestamp_timer_s1_agent:cp_data
	signal cmd_mux_009_src_ready                                                              : std_logic;                      -- timestamp_timer_s1_agent:cp_ready -> cmd_mux_009:src_ready
	signal cmd_mux_009_src_channel                                                            : std_logic_vector(9 downto 0);   -- cmd_mux_009:src_channel -> timestamp_timer_s1_agent:cp_channel
	signal cmd_mux_009_src_startofpacket                                                      : std_logic;                      -- cmd_mux_009:src_startofpacket -> timestamp_timer_s1_agent:cp_startofpacket
	signal cmd_mux_009_src_endofpacket                                                        : std_logic;                      -- cmd_mux_009:src_endofpacket -> timestamp_timer_s1_agent:cp_endofpacket
	signal nios2_qsys_0_data_master_agent_cp_valid                                            : std_logic;                      -- nios2_qsys_0_data_master_agent:cp_valid -> router:sink_valid
	signal nios2_qsys_0_data_master_agent_cp_data                                             : std_logic_vector(109 downto 0); -- nios2_qsys_0_data_master_agent:cp_data -> router:sink_data
	signal nios2_qsys_0_data_master_agent_cp_ready                                            : std_logic;                      -- router:sink_ready -> nios2_qsys_0_data_master_agent:cp_ready
	signal nios2_qsys_0_data_master_agent_cp_startofpacket                                    : std_logic;                      -- nios2_qsys_0_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	signal nios2_qsys_0_data_master_agent_cp_endofpacket                                      : std_logic;                      -- nios2_qsys_0_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	signal router_src_valid                                                                   : std_logic;                      -- router:src_valid -> cmd_demux:sink_valid
	signal router_src_data                                                                    : std_logic_vector(109 downto 0); -- router:src_data -> cmd_demux:sink_data
	signal router_src_ready                                                                   : std_logic;                      -- cmd_demux:sink_ready -> router:src_ready
	signal router_src_channel                                                                 : std_logic_vector(9 downto 0);   -- router:src_channel -> cmd_demux:sink_channel
	signal router_src_startofpacket                                                           : std_logic;                      -- router:src_startofpacket -> cmd_demux:sink_startofpacket
	signal router_src_endofpacket                                                             : std_logic;                      -- router:src_endofpacket -> cmd_demux:sink_endofpacket
	signal crypto_module_read_master_agent_cp_valid                                           : std_logic;                      -- crypto_module_read_master_agent:cp_valid -> router_001:sink_valid
	signal crypto_module_read_master_agent_cp_data                                            : std_logic_vector(109 downto 0); -- crypto_module_read_master_agent:cp_data -> router_001:sink_data
	signal crypto_module_read_master_agent_cp_ready                                           : std_logic;                      -- router_001:sink_ready -> crypto_module_read_master_agent:cp_ready
	signal crypto_module_read_master_agent_cp_startofpacket                                   : std_logic;                      -- crypto_module_read_master_agent:cp_startofpacket -> router_001:sink_startofpacket
	signal crypto_module_read_master_agent_cp_endofpacket                                     : std_logic;                      -- crypto_module_read_master_agent:cp_endofpacket -> router_001:sink_endofpacket
	signal router_001_src_valid                                                               : std_logic;                      -- router_001:src_valid -> cmd_demux_001:sink_valid
	signal router_001_src_data                                                                : std_logic_vector(109 downto 0); -- router_001:src_data -> cmd_demux_001:sink_data
	signal router_001_src_ready                                                               : std_logic;                      -- cmd_demux_001:sink_ready -> router_001:src_ready
	signal router_001_src_channel                                                             : std_logic_vector(9 downto 0);   -- router_001:src_channel -> cmd_demux_001:sink_channel
	signal router_001_src_startofpacket                                                       : std_logic;                      -- router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	signal router_001_src_endofpacket                                                         : std_logic;                      -- router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	signal crypto_module_write_master_agent_cp_valid                                          : std_logic;                      -- crypto_module_write_master_agent:cp_valid -> router_002:sink_valid
	signal crypto_module_write_master_agent_cp_data                                           : std_logic_vector(109 downto 0); -- crypto_module_write_master_agent:cp_data -> router_002:sink_data
	signal crypto_module_write_master_agent_cp_ready                                          : std_logic;                      -- router_002:sink_ready -> crypto_module_write_master_agent:cp_ready
	signal crypto_module_write_master_agent_cp_startofpacket                                  : std_logic;                      -- crypto_module_write_master_agent:cp_startofpacket -> router_002:sink_startofpacket
	signal crypto_module_write_master_agent_cp_endofpacket                                    : std_logic;                      -- crypto_module_write_master_agent:cp_endofpacket -> router_002:sink_endofpacket
	signal router_002_src_valid                                                               : std_logic;                      -- router_002:src_valid -> cmd_demux_002:sink_valid
	signal router_002_src_data                                                                : std_logic_vector(109 downto 0); -- router_002:src_data -> cmd_demux_002:sink_data
	signal router_002_src_ready                                                               : std_logic;                      -- cmd_demux_002:sink_ready -> router_002:src_ready
	signal router_002_src_channel                                                             : std_logic_vector(9 downto 0);   -- router_002:src_channel -> cmd_demux_002:sink_channel
	signal router_002_src_startofpacket                                                       : std_logic;                      -- router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	signal router_002_src_endofpacket                                                         : std_logic;                      -- router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	signal nios2_qsys_0_instruction_master_agent_cp_valid                                     : std_logic;                      -- nios2_qsys_0_instruction_master_agent:cp_valid -> router_003:sink_valid
	signal nios2_qsys_0_instruction_master_agent_cp_data                                      : std_logic_vector(109 downto 0); -- nios2_qsys_0_instruction_master_agent:cp_data -> router_003:sink_data
	signal nios2_qsys_0_instruction_master_agent_cp_ready                                     : std_logic;                      -- router_003:sink_ready -> nios2_qsys_0_instruction_master_agent:cp_ready
	signal nios2_qsys_0_instruction_master_agent_cp_startofpacket                             : std_logic;                      -- nios2_qsys_0_instruction_master_agent:cp_startofpacket -> router_003:sink_startofpacket
	signal nios2_qsys_0_instruction_master_agent_cp_endofpacket                               : std_logic;                      -- nios2_qsys_0_instruction_master_agent:cp_endofpacket -> router_003:sink_endofpacket
	signal router_003_src_valid                                                               : std_logic;                      -- router_003:src_valid -> cmd_demux_003:sink_valid
	signal router_003_src_data                                                                : std_logic_vector(109 downto 0); -- router_003:src_data -> cmd_demux_003:sink_data
	signal router_003_src_ready                                                               : std_logic;                      -- cmd_demux_003:sink_ready -> router_003:src_ready
	signal router_003_src_channel                                                             : std_logic_vector(9 downto 0);   -- router_003:src_channel -> cmd_demux_003:sink_channel
	signal router_003_src_startofpacket                                                       : std_logic;                      -- router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	signal router_003_src_endofpacket                                                         : std_logic;                      -- router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	signal jtag_uart_0_avalon_jtag_slave_agent_rp_valid                                       : std_logic;                      -- jtag_uart_0_avalon_jtag_slave_agent:rp_valid -> router_004:sink_valid
	signal jtag_uart_0_avalon_jtag_slave_agent_rp_data                                        : std_logic_vector(109 downto 0); -- jtag_uart_0_avalon_jtag_slave_agent:rp_data -> router_004:sink_data
	signal jtag_uart_0_avalon_jtag_slave_agent_rp_ready                                       : std_logic;                      -- router_004:sink_ready -> jtag_uart_0_avalon_jtag_slave_agent:rp_ready
	signal jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket                               : std_logic;                      -- jtag_uart_0_avalon_jtag_slave_agent:rp_startofpacket -> router_004:sink_startofpacket
	signal jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket                                 : std_logic;                      -- jtag_uart_0_avalon_jtag_slave_agent:rp_endofpacket -> router_004:sink_endofpacket
	signal router_004_src_valid                                                               : std_logic;                      -- router_004:src_valid -> rsp_demux:sink_valid
	signal router_004_src_data                                                                : std_logic_vector(109 downto 0); -- router_004:src_data -> rsp_demux:sink_data
	signal router_004_src_ready                                                               : std_logic;                      -- rsp_demux:sink_ready -> router_004:src_ready
	signal router_004_src_channel                                                             : std_logic_vector(9 downto 0);   -- router_004:src_channel -> rsp_demux:sink_channel
	signal router_004_src_startofpacket                                                       : std_logic;                      -- router_004:src_startofpacket -> rsp_demux:sink_startofpacket
	signal router_004_src_endofpacket                                                         : std_logic;                      -- router_004:src_endofpacket -> rsp_demux:sink_endofpacket
	signal sysid_qsys_0_control_slave_agent_rp_valid                                          : std_logic;                      -- sysid_qsys_0_control_slave_agent:rp_valid -> router_005:sink_valid
	signal sysid_qsys_0_control_slave_agent_rp_data                                           : std_logic_vector(109 downto 0); -- sysid_qsys_0_control_slave_agent:rp_data -> router_005:sink_data
	signal sysid_qsys_0_control_slave_agent_rp_ready                                          : std_logic;                      -- router_005:sink_ready -> sysid_qsys_0_control_slave_agent:rp_ready
	signal sysid_qsys_0_control_slave_agent_rp_startofpacket                                  : std_logic;                      -- sysid_qsys_0_control_slave_agent:rp_startofpacket -> router_005:sink_startofpacket
	signal sysid_qsys_0_control_slave_agent_rp_endofpacket                                    : std_logic;                      -- sysid_qsys_0_control_slave_agent:rp_endofpacket -> router_005:sink_endofpacket
	signal router_005_src_valid                                                               : std_logic;                      -- router_005:src_valid -> rsp_demux_001:sink_valid
	signal router_005_src_data                                                                : std_logic_vector(109 downto 0); -- router_005:src_data -> rsp_demux_001:sink_data
	signal router_005_src_ready                                                               : std_logic;                      -- rsp_demux_001:sink_ready -> router_005:src_ready
	signal router_005_src_channel                                                             : std_logic_vector(9 downto 0);   -- router_005:src_channel -> rsp_demux_001:sink_channel
	signal router_005_src_startofpacket                                                       : std_logic;                      -- router_005:src_startofpacket -> rsp_demux_001:sink_startofpacket
	signal router_005_src_endofpacket                                                         : std_logic;                      -- router_005:src_endofpacket -> rsp_demux_001:sink_endofpacket
	signal crypto_module_csr_agent_rp_valid                                                   : std_logic;                      -- crypto_module_csr_agent:rp_valid -> router_006:sink_valid
	signal crypto_module_csr_agent_rp_data                                                    : std_logic_vector(109 downto 0); -- crypto_module_csr_agent:rp_data -> router_006:sink_data
	signal crypto_module_csr_agent_rp_ready                                                   : std_logic;                      -- router_006:sink_ready -> crypto_module_csr_agent:rp_ready
	signal crypto_module_csr_agent_rp_startofpacket                                           : std_logic;                      -- crypto_module_csr_agent:rp_startofpacket -> router_006:sink_startofpacket
	signal crypto_module_csr_agent_rp_endofpacket                                             : std_logic;                      -- crypto_module_csr_agent:rp_endofpacket -> router_006:sink_endofpacket
	signal router_006_src_valid                                                               : std_logic;                      -- router_006:src_valid -> rsp_demux_002:sink_valid
	signal router_006_src_data                                                                : std_logic_vector(109 downto 0); -- router_006:src_data -> rsp_demux_002:sink_data
	signal router_006_src_ready                                                               : std_logic;                      -- rsp_demux_002:sink_ready -> router_006:src_ready
	signal router_006_src_channel                                                             : std_logic_vector(9 downto 0);   -- router_006:src_channel -> rsp_demux_002:sink_channel
	signal router_006_src_startofpacket                                                       : std_logic;                      -- router_006:src_startofpacket -> rsp_demux_002:sink_startofpacket
	signal router_006_src_endofpacket                                                         : std_logic;                      -- router_006:src_endofpacket -> rsp_demux_002:sink_endofpacket
	signal nios2_qsys_0_jtag_debug_module_agent_rp_valid                                      : std_logic;                      -- nios2_qsys_0_jtag_debug_module_agent:rp_valid -> router_007:sink_valid
	signal nios2_qsys_0_jtag_debug_module_agent_rp_data                                       : std_logic_vector(109 downto 0); -- nios2_qsys_0_jtag_debug_module_agent:rp_data -> router_007:sink_data
	signal nios2_qsys_0_jtag_debug_module_agent_rp_ready                                      : std_logic;                      -- router_007:sink_ready -> nios2_qsys_0_jtag_debug_module_agent:rp_ready
	signal nios2_qsys_0_jtag_debug_module_agent_rp_startofpacket                              : std_logic;                      -- nios2_qsys_0_jtag_debug_module_agent:rp_startofpacket -> router_007:sink_startofpacket
	signal nios2_qsys_0_jtag_debug_module_agent_rp_endofpacket                                : std_logic;                      -- nios2_qsys_0_jtag_debug_module_agent:rp_endofpacket -> router_007:sink_endofpacket
	signal router_007_src_valid                                                               : std_logic;                      -- router_007:src_valid -> rsp_demux_003:sink_valid
	signal router_007_src_data                                                                : std_logic_vector(109 downto 0); -- router_007:src_data -> rsp_demux_003:sink_data
	signal router_007_src_ready                                                               : std_logic;                      -- rsp_demux_003:sink_ready -> router_007:src_ready
	signal router_007_src_channel                                                             : std_logic_vector(9 downto 0);   -- router_007:src_channel -> rsp_demux_003:sink_channel
	signal router_007_src_startofpacket                                                       : std_logic;                      -- router_007:src_startofpacket -> rsp_demux_003:sink_startofpacket
	signal router_007_src_endofpacket                                                         : std_logic;                      -- router_007:src_endofpacket -> rsp_demux_003:sink_endofpacket
	signal instruction_memory_s1_agent_rp_valid                                               : std_logic;                      -- instruction_memory_s1_agent:rp_valid -> router_008:sink_valid
	signal instruction_memory_s1_agent_rp_data                                                : std_logic_vector(109 downto 0); -- instruction_memory_s1_agent:rp_data -> router_008:sink_data
	signal instruction_memory_s1_agent_rp_ready                                               : std_logic;                      -- router_008:sink_ready -> instruction_memory_s1_agent:rp_ready
	signal instruction_memory_s1_agent_rp_startofpacket                                       : std_logic;                      -- instruction_memory_s1_agent:rp_startofpacket -> router_008:sink_startofpacket
	signal instruction_memory_s1_agent_rp_endofpacket                                         : std_logic;                      -- instruction_memory_s1_agent:rp_endofpacket -> router_008:sink_endofpacket
	signal router_008_src_valid                                                               : std_logic;                      -- router_008:src_valid -> rsp_demux_004:sink_valid
	signal router_008_src_data                                                                : std_logic_vector(109 downto 0); -- router_008:src_data -> rsp_demux_004:sink_data
	signal router_008_src_ready                                                               : std_logic;                      -- rsp_demux_004:sink_ready -> router_008:src_ready
	signal router_008_src_channel                                                             : std_logic_vector(9 downto 0);   -- router_008:src_channel -> rsp_demux_004:sink_channel
	signal router_008_src_startofpacket                                                       : std_logic;                      -- router_008:src_startofpacket -> rsp_demux_004:sink_startofpacket
	signal router_008_src_endofpacket                                                         : std_logic;                      -- router_008:src_endofpacket -> rsp_demux_004:sink_endofpacket
	signal timer_0_s1_agent_rp_valid                                                          : std_logic;                      -- timer_0_s1_agent:rp_valid -> router_009:sink_valid
	signal timer_0_s1_agent_rp_data                                                           : std_logic_vector(109 downto 0); -- timer_0_s1_agent:rp_data -> router_009:sink_data
	signal timer_0_s1_agent_rp_ready                                                          : std_logic;                      -- router_009:sink_ready -> timer_0_s1_agent:rp_ready
	signal timer_0_s1_agent_rp_startofpacket                                                  : std_logic;                      -- timer_0_s1_agent:rp_startofpacket -> router_009:sink_startofpacket
	signal timer_0_s1_agent_rp_endofpacket                                                    : std_logic;                      -- timer_0_s1_agent:rp_endofpacket -> router_009:sink_endofpacket
	signal router_009_src_valid                                                               : std_logic;                      -- router_009:src_valid -> rsp_demux_005:sink_valid
	signal router_009_src_data                                                                : std_logic_vector(109 downto 0); -- router_009:src_data -> rsp_demux_005:sink_data
	signal router_009_src_ready                                                               : std_logic;                      -- rsp_demux_005:sink_ready -> router_009:src_ready
	signal router_009_src_channel                                                             : std_logic_vector(9 downto 0);   -- router_009:src_channel -> rsp_demux_005:sink_channel
	signal router_009_src_startofpacket                                                       : std_logic;                      -- router_009:src_startofpacket -> rsp_demux_005:sink_startofpacket
	signal router_009_src_endofpacket                                                         : std_logic;                      -- router_009:src_endofpacket -> rsp_demux_005:sink_endofpacket
	signal stack_heap_s1_agent_rp_valid                                                       : std_logic;                      -- stack_heap_s1_agent:rp_valid -> router_010:sink_valid
	signal stack_heap_s1_agent_rp_data                                                        : std_logic_vector(109 downto 0); -- stack_heap_s1_agent:rp_data -> router_010:sink_data
	signal stack_heap_s1_agent_rp_ready                                                       : std_logic;                      -- router_010:sink_ready -> stack_heap_s1_agent:rp_ready
	signal stack_heap_s1_agent_rp_startofpacket                                               : std_logic;                      -- stack_heap_s1_agent:rp_startofpacket -> router_010:sink_startofpacket
	signal stack_heap_s1_agent_rp_endofpacket                                                 : std_logic;                      -- stack_heap_s1_agent:rp_endofpacket -> router_010:sink_endofpacket
	signal router_010_src_valid                                                               : std_logic;                      -- router_010:src_valid -> rsp_demux_006:sink_valid
	signal router_010_src_data                                                                : std_logic_vector(109 downto 0); -- router_010:src_data -> rsp_demux_006:sink_data
	signal router_010_src_ready                                                               : std_logic;                      -- rsp_demux_006:sink_ready -> router_010:src_ready
	signal router_010_src_channel                                                             : std_logic_vector(9 downto 0);   -- router_010:src_channel -> rsp_demux_006:sink_channel
	signal router_010_src_startofpacket                                                       : std_logic;                      -- router_010:src_startofpacket -> rsp_demux_006:sink_startofpacket
	signal router_010_src_endofpacket                                                         : std_logic;                      -- router_010:src_endofpacket -> rsp_demux_006:sink_endofpacket
	signal incoming_memory_s1_agent_rp_valid                                                  : std_logic;                      -- incoming_memory_s1_agent:rp_valid -> router_011:sink_valid
	signal incoming_memory_s1_agent_rp_data                                                   : std_logic_vector(109 downto 0); -- incoming_memory_s1_agent:rp_data -> router_011:sink_data
	signal incoming_memory_s1_agent_rp_ready                                                  : std_logic;                      -- router_011:sink_ready -> incoming_memory_s1_agent:rp_ready
	signal incoming_memory_s1_agent_rp_startofpacket                                          : std_logic;                      -- incoming_memory_s1_agent:rp_startofpacket -> router_011:sink_startofpacket
	signal incoming_memory_s1_agent_rp_endofpacket                                            : std_logic;                      -- incoming_memory_s1_agent:rp_endofpacket -> router_011:sink_endofpacket
	signal router_011_src_valid                                                               : std_logic;                      -- router_011:src_valid -> rsp_demux_007:sink_valid
	signal router_011_src_data                                                                : std_logic_vector(109 downto 0); -- router_011:src_data -> rsp_demux_007:sink_data
	signal router_011_src_ready                                                               : std_logic;                      -- rsp_demux_007:sink_ready -> router_011:src_ready
	signal router_011_src_channel                                                             : std_logic_vector(9 downto 0);   -- router_011:src_channel -> rsp_demux_007:sink_channel
	signal router_011_src_startofpacket                                                       : std_logic;                      -- router_011:src_startofpacket -> rsp_demux_007:sink_startofpacket
	signal router_011_src_endofpacket                                                         : std_logic;                      -- router_011:src_endofpacket -> rsp_demux_007:sink_endofpacket
	signal outgoing_memory_s1_agent_rp_valid                                                  : std_logic;                      -- outgoing_memory_s1_agent:rp_valid -> router_012:sink_valid
	signal outgoing_memory_s1_agent_rp_data                                                   : std_logic_vector(109 downto 0); -- outgoing_memory_s1_agent:rp_data -> router_012:sink_data
	signal outgoing_memory_s1_agent_rp_ready                                                  : std_logic;                      -- router_012:sink_ready -> outgoing_memory_s1_agent:rp_ready
	signal outgoing_memory_s1_agent_rp_startofpacket                                          : std_logic;                      -- outgoing_memory_s1_agent:rp_startofpacket -> router_012:sink_startofpacket
	signal outgoing_memory_s1_agent_rp_endofpacket                                            : std_logic;                      -- outgoing_memory_s1_agent:rp_endofpacket -> router_012:sink_endofpacket
	signal router_012_src_valid                                                               : std_logic;                      -- router_012:src_valid -> rsp_demux_008:sink_valid
	signal router_012_src_data                                                                : std_logic_vector(109 downto 0); -- router_012:src_data -> rsp_demux_008:sink_data
	signal router_012_src_ready                                                               : std_logic;                      -- rsp_demux_008:sink_ready -> router_012:src_ready
	signal router_012_src_channel                                                             : std_logic_vector(9 downto 0);   -- router_012:src_channel -> rsp_demux_008:sink_channel
	signal router_012_src_startofpacket                                                       : std_logic;                      -- router_012:src_startofpacket -> rsp_demux_008:sink_startofpacket
	signal router_012_src_endofpacket                                                         : std_logic;                      -- router_012:src_endofpacket -> rsp_demux_008:sink_endofpacket
	signal timestamp_timer_s1_agent_rp_valid                                                  : std_logic;                      -- timestamp_timer_s1_agent:rp_valid -> router_013:sink_valid
	signal timestamp_timer_s1_agent_rp_data                                                   : std_logic_vector(109 downto 0); -- timestamp_timer_s1_agent:rp_data -> router_013:sink_data
	signal timestamp_timer_s1_agent_rp_ready                                                  : std_logic;                      -- router_013:sink_ready -> timestamp_timer_s1_agent:rp_ready
	signal timestamp_timer_s1_agent_rp_startofpacket                                          : std_logic;                      -- timestamp_timer_s1_agent:rp_startofpacket -> router_013:sink_startofpacket
	signal timestamp_timer_s1_agent_rp_endofpacket                                            : std_logic;                      -- timestamp_timer_s1_agent:rp_endofpacket -> router_013:sink_endofpacket
	signal router_013_src_valid                                                               : std_logic;                      -- router_013:src_valid -> rsp_demux_009:sink_valid
	signal router_013_src_data                                                                : std_logic_vector(109 downto 0); -- router_013:src_data -> rsp_demux_009:sink_data
	signal router_013_src_ready                                                               : std_logic;                      -- rsp_demux_009:sink_ready -> router_013:src_ready
	signal router_013_src_channel                                                             : std_logic_vector(9 downto 0);   -- router_013:src_channel -> rsp_demux_009:sink_channel
	signal router_013_src_startofpacket                                                       : std_logic;                      -- router_013:src_startofpacket -> rsp_demux_009:sink_startofpacket
	signal router_013_src_endofpacket                                                         : std_logic;                      -- router_013:src_endofpacket -> rsp_demux_009:sink_endofpacket
	signal cmd_demux_src0_valid                                                               : std_logic;                      -- cmd_demux:src0_valid -> cmd_mux:sink0_valid
	signal cmd_demux_src0_data                                                                : std_logic_vector(109 downto 0); -- cmd_demux:src0_data -> cmd_mux:sink0_data
	signal cmd_demux_src0_ready                                                               : std_logic;                      -- cmd_mux:sink0_ready -> cmd_demux:src0_ready
	signal cmd_demux_src0_channel                                                             : std_logic_vector(9 downto 0);   -- cmd_demux:src0_channel -> cmd_mux:sink0_channel
	signal cmd_demux_src0_startofpacket                                                       : std_logic;                      -- cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	signal cmd_demux_src0_endofpacket                                                         : std_logic;                      -- cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	signal cmd_demux_src1_valid                                                               : std_logic;                      -- cmd_demux:src1_valid -> cmd_mux_001:sink0_valid
	signal cmd_demux_src1_data                                                                : std_logic_vector(109 downto 0); -- cmd_demux:src1_data -> cmd_mux_001:sink0_data
	signal cmd_demux_src1_ready                                                               : std_logic;                      -- cmd_mux_001:sink0_ready -> cmd_demux:src1_ready
	signal cmd_demux_src1_channel                                                             : std_logic_vector(9 downto 0);   -- cmd_demux:src1_channel -> cmd_mux_001:sink0_channel
	signal cmd_demux_src1_startofpacket                                                       : std_logic;                      -- cmd_demux:src1_startofpacket -> cmd_mux_001:sink0_startofpacket
	signal cmd_demux_src1_endofpacket                                                         : std_logic;                      -- cmd_demux:src1_endofpacket -> cmd_mux_001:sink0_endofpacket
	signal cmd_demux_src2_valid                                                               : std_logic;                      -- cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	signal cmd_demux_src2_data                                                                : std_logic_vector(109 downto 0); -- cmd_demux:src2_data -> cmd_mux_002:sink0_data
	signal cmd_demux_src2_ready                                                               : std_logic;                      -- cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	signal cmd_demux_src2_channel                                                             : std_logic_vector(9 downto 0);   -- cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	signal cmd_demux_src2_startofpacket                                                       : std_logic;                      -- cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	signal cmd_demux_src2_endofpacket                                                         : std_logic;                      -- cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	signal cmd_demux_src3_valid                                                               : std_logic;                      -- cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	signal cmd_demux_src3_data                                                                : std_logic_vector(109 downto 0); -- cmd_demux:src3_data -> cmd_mux_003:sink0_data
	signal cmd_demux_src3_ready                                                               : std_logic;                      -- cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	signal cmd_demux_src3_channel                                                             : std_logic_vector(9 downto 0);   -- cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	signal cmd_demux_src3_startofpacket                                                       : std_logic;                      -- cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	signal cmd_demux_src3_endofpacket                                                         : std_logic;                      -- cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	signal cmd_demux_src4_valid                                                               : std_logic;                      -- cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	signal cmd_demux_src4_data                                                                : std_logic_vector(109 downto 0); -- cmd_demux:src4_data -> cmd_mux_004:sink0_data
	signal cmd_demux_src4_ready                                                               : std_logic;                      -- cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	signal cmd_demux_src4_channel                                                             : std_logic_vector(9 downto 0);   -- cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	signal cmd_demux_src4_startofpacket                                                       : std_logic;                      -- cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	signal cmd_demux_src4_endofpacket                                                         : std_logic;                      -- cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	signal cmd_demux_src5_valid                                                               : std_logic;                      -- cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	signal cmd_demux_src5_data                                                                : std_logic_vector(109 downto 0); -- cmd_demux:src5_data -> cmd_mux_005:sink0_data
	signal cmd_demux_src5_ready                                                               : std_logic;                      -- cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	signal cmd_demux_src5_channel                                                             : std_logic_vector(9 downto 0);   -- cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	signal cmd_demux_src5_startofpacket                                                       : std_logic;                      -- cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	signal cmd_demux_src5_endofpacket                                                         : std_logic;                      -- cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	signal cmd_demux_src6_valid                                                               : std_logic;                      -- cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	signal cmd_demux_src6_data                                                                : std_logic_vector(109 downto 0); -- cmd_demux:src6_data -> cmd_mux_006:sink0_data
	signal cmd_demux_src6_ready                                                               : std_logic;                      -- cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	signal cmd_demux_src6_channel                                                             : std_logic_vector(9 downto 0);   -- cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	signal cmd_demux_src6_startofpacket                                                       : std_logic;                      -- cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	signal cmd_demux_src6_endofpacket                                                         : std_logic;                      -- cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	signal cmd_demux_src7_valid                                                               : std_logic;                      -- cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	signal cmd_demux_src7_data                                                                : std_logic_vector(109 downto 0); -- cmd_demux:src7_data -> cmd_mux_007:sink0_data
	signal cmd_demux_src7_ready                                                               : std_logic;                      -- cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	signal cmd_demux_src7_channel                                                             : std_logic_vector(9 downto 0);   -- cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	signal cmd_demux_src7_startofpacket                                                       : std_logic;                      -- cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	signal cmd_demux_src7_endofpacket                                                         : std_logic;                      -- cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	signal cmd_demux_src8_valid                                                               : std_logic;                      -- cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	signal cmd_demux_src8_data                                                                : std_logic_vector(109 downto 0); -- cmd_demux:src8_data -> cmd_mux_008:sink0_data
	signal cmd_demux_src8_ready                                                               : std_logic;                      -- cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	signal cmd_demux_src8_channel                                                             : std_logic_vector(9 downto 0);   -- cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	signal cmd_demux_src8_startofpacket                                                       : std_logic;                      -- cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	signal cmd_demux_src8_endofpacket                                                         : std_logic;                      -- cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	signal cmd_demux_src9_valid                                                               : std_logic;                      -- cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	signal cmd_demux_src9_data                                                                : std_logic_vector(109 downto 0); -- cmd_demux:src9_data -> cmd_mux_009:sink0_data
	signal cmd_demux_src9_ready                                                               : std_logic;                      -- cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	signal cmd_demux_src9_channel                                                             : std_logic_vector(9 downto 0);   -- cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	signal cmd_demux_src9_startofpacket                                                       : std_logic;                      -- cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	signal cmd_demux_src9_endofpacket                                                         : std_logic;                      -- cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	signal cmd_demux_001_src0_valid                                                           : std_logic;                      -- cmd_demux_001:src0_valid -> cmd_mux_007:sink1_valid
	signal cmd_demux_001_src0_data                                                            : std_logic_vector(109 downto 0); -- cmd_demux_001:src0_data -> cmd_mux_007:sink1_data
	signal cmd_demux_001_src0_ready                                                           : std_logic;                      -- cmd_mux_007:sink1_ready -> cmd_demux_001:src0_ready
	signal cmd_demux_001_src0_channel                                                         : std_logic_vector(9 downto 0);   -- cmd_demux_001:src0_channel -> cmd_mux_007:sink1_channel
	signal cmd_demux_001_src0_startofpacket                                                   : std_logic;                      -- cmd_demux_001:src0_startofpacket -> cmd_mux_007:sink1_startofpacket
	signal cmd_demux_001_src0_endofpacket                                                     : std_logic;                      -- cmd_demux_001:src0_endofpacket -> cmd_mux_007:sink1_endofpacket
	signal cmd_demux_001_src1_valid                                                           : std_logic;                      -- cmd_demux_001:src1_valid -> cmd_mux_008:sink1_valid
	signal cmd_demux_001_src1_data                                                            : std_logic_vector(109 downto 0); -- cmd_demux_001:src1_data -> cmd_mux_008:sink1_data
	signal cmd_demux_001_src1_ready                                                           : std_logic;                      -- cmd_mux_008:sink1_ready -> cmd_demux_001:src1_ready
	signal cmd_demux_001_src1_channel                                                         : std_logic_vector(9 downto 0);   -- cmd_demux_001:src1_channel -> cmd_mux_008:sink1_channel
	signal cmd_demux_001_src1_startofpacket                                                   : std_logic;                      -- cmd_demux_001:src1_startofpacket -> cmd_mux_008:sink1_startofpacket
	signal cmd_demux_001_src1_endofpacket                                                     : std_logic;                      -- cmd_demux_001:src1_endofpacket -> cmd_mux_008:sink1_endofpacket
	signal cmd_demux_002_src0_valid                                                           : std_logic;                      -- cmd_demux_002:src0_valid -> cmd_mux_007:sink2_valid
	signal cmd_demux_002_src0_data                                                            : std_logic_vector(109 downto 0); -- cmd_demux_002:src0_data -> cmd_mux_007:sink2_data
	signal cmd_demux_002_src0_ready                                                           : std_logic;                      -- cmd_mux_007:sink2_ready -> cmd_demux_002:src0_ready
	signal cmd_demux_002_src0_channel                                                         : std_logic_vector(9 downto 0);   -- cmd_demux_002:src0_channel -> cmd_mux_007:sink2_channel
	signal cmd_demux_002_src0_startofpacket                                                   : std_logic;                      -- cmd_demux_002:src0_startofpacket -> cmd_mux_007:sink2_startofpacket
	signal cmd_demux_002_src0_endofpacket                                                     : std_logic;                      -- cmd_demux_002:src0_endofpacket -> cmd_mux_007:sink2_endofpacket
	signal cmd_demux_002_src1_valid                                                           : std_logic;                      -- cmd_demux_002:src1_valid -> cmd_mux_008:sink2_valid
	signal cmd_demux_002_src1_data                                                            : std_logic_vector(109 downto 0); -- cmd_demux_002:src1_data -> cmd_mux_008:sink2_data
	signal cmd_demux_002_src1_ready                                                           : std_logic;                      -- cmd_mux_008:sink2_ready -> cmd_demux_002:src1_ready
	signal cmd_demux_002_src1_channel                                                         : std_logic_vector(9 downto 0);   -- cmd_demux_002:src1_channel -> cmd_mux_008:sink2_channel
	signal cmd_demux_002_src1_startofpacket                                                   : std_logic;                      -- cmd_demux_002:src1_startofpacket -> cmd_mux_008:sink2_startofpacket
	signal cmd_demux_002_src1_endofpacket                                                     : std_logic;                      -- cmd_demux_002:src1_endofpacket -> cmd_mux_008:sink2_endofpacket
	signal cmd_demux_003_src0_valid                                                           : std_logic;                      -- cmd_demux_003:src0_valid -> cmd_mux_003:sink1_valid
	signal cmd_demux_003_src0_data                                                            : std_logic_vector(109 downto 0); -- cmd_demux_003:src0_data -> cmd_mux_003:sink1_data
	signal cmd_demux_003_src0_ready                                                           : std_logic;                      -- cmd_mux_003:sink1_ready -> cmd_demux_003:src0_ready
	signal cmd_demux_003_src0_channel                                                         : std_logic_vector(9 downto 0);   -- cmd_demux_003:src0_channel -> cmd_mux_003:sink1_channel
	signal cmd_demux_003_src0_startofpacket                                                   : std_logic;                      -- cmd_demux_003:src0_startofpacket -> cmd_mux_003:sink1_startofpacket
	signal cmd_demux_003_src0_endofpacket                                                     : std_logic;                      -- cmd_demux_003:src0_endofpacket -> cmd_mux_003:sink1_endofpacket
	signal cmd_demux_003_src1_valid                                                           : std_logic;                      -- cmd_demux_003:src1_valid -> cmd_mux_004:sink1_valid
	signal cmd_demux_003_src1_data                                                            : std_logic_vector(109 downto 0); -- cmd_demux_003:src1_data -> cmd_mux_004:sink1_data
	signal cmd_demux_003_src1_ready                                                           : std_logic;                      -- cmd_mux_004:sink1_ready -> cmd_demux_003:src1_ready
	signal cmd_demux_003_src1_channel                                                         : std_logic_vector(9 downto 0);   -- cmd_demux_003:src1_channel -> cmd_mux_004:sink1_channel
	signal cmd_demux_003_src1_startofpacket                                                   : std_logic;                      -- cmd_demux_003:src1_startofpacket -> cmd_mux_004:sink1_startofpacket
	signal cmd_demux_003_src1_endofpacket                                                     : std_logic;                      -- cmd_demux_003:src1_endofpacket -> cmd_mux_004:sink1_endofpacket
	signal rsp_demux_src0_valid                                                               : std_logic;                      -- rsp_demux:src0_valid -> rsp_mux:sink0_valid
	signal rsp_demux_src0_data                                                                : std_logic_vector(109 downto 0); -- rsp_demux:src0_data -> rsp_mux:sink0_data
	signal rsp_demux_src0_ready                                                               : std_logic;                      -- rsp_mux:sink0_ready -> rsp_demux:src0_ready
	signal rsp_demux_src0_channel                                                             : std_logic_vector(9 downto 0);   -- rsp_demux:src0_channel -> rsp_mux:sink0_channel
	signal rsp_demux_src0_startofpacket                                                       : std_logic;                      -- rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	signal rsp_demux_src0_endofpacket                                                         : std_logic;                      -- rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	signal rsp_demux_001_src0_valid                                                           : std_logic;                      -- rsp_demux_001:src0_valid -> rsp_mux:sink1_valid
	signal rsp_demux_001_src0_data                                                            : std_logic_vector(109 downto 0); -- rsp_demux_001:src0_data -> rsp_mux:sink1_data
	signal rsp_demux_001_src0_ready                                                           : std_logic;                      -- rsp_mux:sink1_ready -> rsp_demux_001:src0_ready
	signal rsp_demux_001_src0_channel                                                         : std_logic_vector(9 downto 0);   -- rsp_demux_001:src0_channel -> rsp_mux:sink1_channel
	signal rsp_demux_001_src0_startofpacket                                                   : std_logic;                      -- rsp_demux_001:src0_startofpacket -> rsp_mux:sink1_startofpacket
	signal rsp_demux_001_src0_endofpacket                                                     : std_logic;                      -- rsp_demux_001:src0_endofpacket -> rsp_mux:sink1_endofpacket
	signal rsp_demux_002_src0_valid                                                           : std_logic;                      -- rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	signal rsp_demux_002_src0_data                                                            : std_logic_vector(109 downto 0); -- rsp_demux_002:src0_data -> rsp_mux:sink2_data
	signal rsp_demux_002_src0_ready                                                           : std_logic;                      -- rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	signal rsp_demux_002_src0_channel                                                         : std_logic_vector(9 downto 0);   -- rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	signal rsp_demux_002_src0_startofpacket                                                   : std_logic;                      -- rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	signal rsp_demux_002_src0_endofpacket                                                     : std_logic;                      -- rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	signal rsp_demux_003_src0_valid                                                           : std_logic;                      -- rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	signal rsp_demux_003_src0_data                                                            : std_logic_vector(109 downto 0); -- rsp_demux_003:src0_data -> rsp_mux:sink3_data
	signal rsp_demux_003_src0_ready                                                           : std_logic;                      -- rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	signal rsp_demux_003_src0_channel                                                         : std_logic_vector(9 downto 0);   -- rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	signal rsp_demux_003_src0_startofpacket                                                   : std_logic;                      -- rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	signal rsp_demux_003_src0_endofpacket                                                     : std_logic;                      -- rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	signal rsp_demux_003_src1_valid                                                           : std_logic;                      -- rsp_demux_003:src1_valid -> rsp_mux_003:sink0_valid
	signal rsp_demux_003_src1_data                                                            : std_logic_vector(109 downto 0); -- rsp_demux_003:src1_data -> rsp_mux_003:sink0_data
	signal rsp_demux_003_src1_ready                                                           : std_logic;                      -- rsp_mux_003:sink0_ready -> rsp_demux_003:src1_ready
	signal rsp_demux_003_src1_channel                                                         : std_logic_vector(9 downto 0);   -- rsp_demux_003:src1_channel -> rsp_mux_003:sink0_channel
	signal rsp_demux_003_src1_startofpacket                                                   : std_logic;                      -- rsp_demux_003:src1_startofpacket -> rsp_mux_003:sink0_startofpacket
	signal rsp_demux_003_src1_endofpacket                                                     : std_logic;                      -- rsp_demux_003:src1_endofpacket -> rsp_mux_003:sink0_endofpacket
	signal rsp_demux_004_src0_valid                                                           : std_logic;                      -- rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	signal rsp_demux_004_src0_data                                                            : std_logic_vector(109 downto 0); -- rsp_demux_004:src0_data -> rsp_mux:sink4_data
	signal rsp_demux_004_src0_ready                                                           : std_logic;                      -- rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	signal rsp_demux_004_src0_channel                                                         : std_logic_vector(9 downto 0);   -- rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	signal rsp_demux_004_src0_startofpacket                                                   : std_logic;                      -- rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	signal rsp_demux_004_src0_endofpacket                                                     : std_logic;                      -- rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	signal rsp_demux_004_src1_valid                                                           : std_logic;                      -- rsp_demux_004:src1_valid -> rsp_mux_003:sink1_valid
	signal rsp_demux_004_src1_data                                                            : std_logic_vector(109 downto 0); -- rsp_demux_004:src1_data -> rsp_mux_003:sink1_data
	signal rsp_demux_004_src1_ready                                                           : std_logic;                      -- rsp_mux_003:sink1_ready -> rsp_demux_004:src1_ready
	signal rsp_demux_004_src1_channel                                                         : std_logic_vector(9 downto 0);   -- rsp_demux_004:src1_channel -> rsp_mux_003:sink1_channel
	signal rsp_demux_004_src1_startofpacket                                                   : std_logic;                      -- rsp_demux_004:src1_startofpacket -> rsp_mux_003:sink1_startofpacket
	signal rsp_demux_004_src1_endofpacket                                                     : std_logic;                      -- rsp_demux_004:src1_endofpacket -> rsp_mux_003:sink1_endofpacket
	signal rsp_demux_005_src0_valid                                                           : std_logic;                      -- rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	signal rsp_demux_005_src0_data                                                            : std_logic_vector(109 downto 0); -- rsp_demux_005:src0_data -> rsp_mux:sink5_data
	signal rsp_demux_005_src0_ready                                                           : std_logic;                      -- rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	signal rsp_demux_005_src0_channel                                                         : std_logic_vector(9 downto 0);   -- rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	signal rsp_demux_005_src0_startofpacket                                                   : std_logic;                      -- rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	signal rsp_demux_005_src0_endofpacket                                                     : std_logic;                      -- rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	signal rsp_demux_006_src0_valid                                                           : std_logic;                      -- rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	signal rsp_demux_006_src0_data                                                            : std_logic_vector(109 downto 0); -- rsp_demux_006:src0_data -> rsp_mux:sink6_data
	signal rsp_demux_006_src0_ready                                                           : std_logic;                      -- rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	signal rsp_demux_006_src0_channel                                                         : std_logic_vector(9 downto 0);   -- rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	signal rsp_demux_006_src0_startofpacket                                                   : std_logic;                      -- rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	signal rsp_demux_006_src0_endofpacket                                                     : std_logic;                      -- rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	signal rsp_demux_007_src0_valid                                                           : std_logic;                      -- rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	signal rsp_demux_007_src0_data                                                            : std_logic_vector(109 downto 0); -- rsp_demux_007:src0_data -> rsp_mux:sink7_data
	signal rsp_demux_007_src0_ready                                                           : std_logic;                      -- rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	signal rsp_demux_007_src0_channel                                                         : std_logic_vector(9 downto 0);   -- rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	signal rsp_demux_007_src0_startofpacket                                                   : std_logic;                      -- rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	signal rsp_demux_007_src0_endofpacket                                                     : std_logic;                      -- rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	signal rsp_demux_007_src1_valid                                                           : std_logic;                      -- rsp_demux_007:src1_valid -> rsp_mux_001:sink0_valid
	signal rsp_demux_007_src1_data                                                            : std_logic_vector(109 downto 0); -- rsp_demux_007:src1_data -> rsp_mux_001:sink0_data
	signal rsp_demux_007_src1_ready                                                           : std_logic;                      -- rsp_mux_001:sink0_ready -> rsp_demux_007:src1_ready
	signal rsp_demux_007_src1_channel                                                         : std_logic_vector(9 downto 0);   -- rsp_demux_007:src1_channel -> rsp_mux_001:sink0_channel
	signal rsp_demux_007_src1_startofpacket                                                   : std_logic;                      -- rsp_demux_007:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	signal rsp_demux_007_src1_endofpacket                                                     : std_logic;                      -- rsp_demux_007:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	signal rsp_demux_007_src2_valid                                                           : std_logic;                      -- rsp_demux_007:src2_valid -> rsp_mux_002:sink0_valid
	signal rsp_demux_007_src2_data                                                            : std_logic_vector(109 downto 0); -- rsp_demux_007:src2_data -> rsp_mux_002:sink0_data
	signal rsp_demux_007_src2_ready                                                           : std_logic;                      -- rsp_mux_002:sink0_ready -> rsp_demux_007:src2_ready
	signal rsp_demux_007_src2_channel                                                         : std_logic_vector(9 downto 0);   -- rsp_demux_007:src2_channel -> rsp_mux_002:sink0_channel
	signal rsp_demux_007_src2_startofpacket                                                   : std_logic;                      -- rsp_demux_007:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	signal rsp_demux_007_src2_endofpacket                                                     : std_logic;                      -- rsp_demux_007:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	signal rsp_demux_008_src0_valid                                                           : std_logic;                      -- rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	signal rsp_demux_008_src0_data                                                            : std_logic_vector(109 downto 0); -- rsp_demux_008:src0_data -> rsp_mux:sink8_data
	signal rsp_demux_008_src0_ready                                                           : std_logic;                      -- rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	signal rsp_demux_008_src0_channel                                                         : std_logic_vector(9 downto 0);   -- rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	signal rsp_demux_008_src0_startofpacket                                                   : std_logic;                      -- rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	signal rsp_demux_008_src0_endofpacket                                                     : std_logic;                      -- rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	signal rsp_demux_008_src1_valid                                                           : std_logic;                      -- rsp_demux_008:src1_valid -> rsp_mux_001:sink1_valid
	signal rsp_demux_008_src1_data                                                            : std_logic_vector(109 downto 0); -- rsp_demux_008:src1_data -> rsp_mux_001:sink1_data
	signal rsp_demux_008_src1_ready                                                           : std_logic;                      -- rsp_mux_001:sink1_ready -> rsp_demux_008:src1_ready
	signal rsp_demux_008_src1_channel                                                         : std_logic_vector(9 downto 0);   -- rsp_demux_008:src1_channel -> rsp_mux_001:sink1_channel
	signal rsp_demux_008_src1_startofpacket                                                   : std_logic;                      -- rsp_demux_008:src1_startofpacket -> rsp_mux_001:sink1_startofpacket
	signal rsp_demux_008_src1_endofpacket                                                     : std_logic;                      -- rsp_demux_008:src1_endofpacket -> rsp_mux_001:sink1_endofpacket
	signal rsp_demux_008_src2_valid                                                           : std_logic;                      -- rsp_demux_008:src2_valid -> rsp_mux_002:sink1_valid
	signal rsp_demux_008_src2_data                                                            : std_logic_vector(109 downto 0); -- rsp_demux_008:src2_data -> rsp_mux_002:sink1_data
	signal rsp_demux_008_src2_ready                                                           : std_logic;                      -- rsp_mux_002:sink1_ready -> rsp_demux_008:src2_ready
	signal rsp_demux_008_src2_channel                                                         : std_logic_vector(9 downto 0);   -- rsp_demux_008:src2_channel -> rsp_mux_002:sink1_channel
	signal rsp_demux_008_src2_startofpacket                                                   : std_logic;                      -- rsp_demux_008:src2_startofpacket -> rsp_mux_002:sink1_startofpacket
	signal rsp_demux_008_src2_endofpacket                                                     : std_logic;                      -- rsp_demux_008:src2_endofpacket -> rsp_mux_002:sink1_endofpacket
	signal rsp_demux_009_src0_valid                                                           : std_logic;                      -- rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	signal rsp_demux_009_src0_data                                                            : std_logic_vector(109 downto 0); -- rsp_demux_009:src0_data -> rsp_mux:sink9_data
	signal rsp_demux_009_src0_ready                                                           : std_logic;                      -- rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	signal rsp_demux_009_src0_channel                                                         : std_logic_vector(9 downto 0);   -- rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	signal rsp_demux_009_src0_startofpacket                                                   : std_logic;                      -- rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	signal rsp_demux_009_src0_endofpacket                                                     : std_logic;                      -- rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket

begin

	nios2_qsys_0_data_master_translator : component crypto_test_mm_interconnect_0_nios2_qsys_0_data_master_translator
		generic map (
			AV_ADDRESS_W                => 20,
			AV_DATA_W                   => 32,
			AV_BURSTCOUNT_W             => 1,
			AV_BYTEENABLE_W             => 4,
			UAV_ADDRESS_W               => 32,
			UAV_BURSTCOUNT_W            => 3,
			USE_READ                    => 1,
			USE_WRITE                   => 1,
			USE_BEGINBURSTTRANSFER      => 0,
			USE_BEGINTRANSFER           => 0,
			USE_CHIPSELECT              => 0,
			USE_BURSTCOUNT              => 0,
			USE_READDATAVALID           => 0,
			USE_WAITREQUEST             => 1,
			USE_READRESPONSE            => 0,
			USE_WRITERESPONSE           => 0,
			AV_SYMBOLS_PER_WORD         => 4,
			AV_ADDRESS_SYMBOLS          => 1,
			AV_BURSTCOUNT_SYMBOLS       => 0,
			AV_CONSTANT_BURST_BEHAVIOR  => 0,
			UAV_CONSTANT_BURST_BEHAVIOR => 0,
			AV_LINEWRAPBURSTS           => 0,
			AV_REGISTERINCOMINGSIGNALS  => 1
		)
		port map (
			clk                    => clk_clk_clk,                                                                 --                       clk.clk
			reset                  => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,                            --                     reset.reset
			uav_address            => nios2_qsys_0_data_master_translator_avalon_universal_master_0_address,       -- avalon_universal_master_0.address
			uav_burstcount         => nios2_qsys_0_data_master_translator_avalon_universal_master_0_burstcount,    --                          .burstcount
			uav_read               => nios2_qsys_0_data_master_translator_avalon_universal_master_0_read,          --                          .read
			uav_write              => nios2_qsys_0_data_master_translator_avalon_universal_master_0_write,         --                          .write
			uav_waitrequest        => nios2_qsys_0_data_master_translator_avalon_universal_master_0_waitrequest,   --                          .waitrequest
			uav_readdatavalid      => nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdatavalid, --                          .readdatavalid
			uav_byteenable         => nios2_qsys_0_data_master_translator_avalon_universal_master_0_byteenable,    --                          .byteenable
			uav_readdata           => nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdata,      --                          .readdata
			uav_writedata          => nios2_qsys_0_data_master_translator_avalon_universal_master_0_writedata,     --                          .writedata
			uav_lock               => nios2_qsys_0_data_master_translator_avalon_universal_master_0_lock,          --                          .lock
			uav_debugaccess        => nios2_qsys_0_data_master_translator_avalon_universal_master_0_debugaccess,   --                          .debugaccess
			av_address             => nios2_qsys_0_data_master_address,                                            --      avalon_anti_master_0.address
			av_waitrequest         => nios2_qsys_0_data_master_waitrequest,                                        --                          .waitrequest
			av_byteenable          => nios2_qsys_0_data_master_byteenable,                                         --                          .byteenable
			av_read                => nios2_qsys_0_data_master_read,                                               --                          .read
			av_readdata            => nios2_qsys_0_data_master_readdata,                                           --                          .readdata
			av_write               => nios2_qsys_0_data_master_write,                                              --                          .write
			av_writedata           => nios2_qsys_0_data_master_writedata,                                          --                          .writedata
			av_debugaccess         => nios2_qsys_0_data_master_debugaccess,                                        --                          .debugaccess
			av_burstcount          => "1",                                                                         --               (terminated)
			av_beginbursttransfer  => '0',                                                                         --               (terminated)
			av_begintransfer       => '0',                                                                         --               (terminated)
			av_chipselect          => '0',                                                                         --               (terminated)
			av_readdatavalid       => open,                                                                        --               (terminated)
			av_lock                => '0',                                                                         --               (terminated)
			uav_clken              => open,                                                                        --               (terminated)
			av_clken               => '1',                                                                         --               (terminated)
			uav_response           => "00",                                                                        --               (terminated)
			av_response            => open,                                                                        --               (terminated)
			uav_writeresponsevalid => '0',                                                                         --               (terminated)
			av_writeresponsevalid  => open                                                                         --               (terminated)
		);

	crypto_module_read_master_translator : component crypto_test_mm_interconnect_0_crypto_module_read_master_translator
		generic map (
			AV_ADDRESS_W                => 32,
			AV_DATA_W                   => 32,
			AV_BURSTCOUNT_W             => 1,
			AV_BYTEENABLE_W             => 4,
			UAV_ADDRESS_W               => 32,
			UAV_BURSTCOUNT_W            => 3,
			USE_READ                    => 1,
			USE_WRITE                   => 0,
			USE_BEGINBURSTTRANSFER      => 0,
			USE_BEGINTRANSFER           => 0,
			USE_CHIPSELECT              => 0,
			USE_BURSTCOUNT              => 0,
			USE_READDATAVALID           => 0,
			USE_WAITREQUEST             => 1,
			USE_READRESPONSE            => 0,
			USE_WRITERESPONSE           => 0,
			AV_SYMBOLS_PER_WORD         => 4,
			AV_ADDRESS_SYMBOLS          => 1,
			AV_BURSTCOUNT_SYMBOLS       => 0,
			AV_CONSTANT_BURST_BEHAVIOR  => 0,
			UAV_CONSTANT_BURST_BEHAVIOR => 0,
			AV_LINEWRAPBURSTS           => 0,
			AV_REGISTERINCOMINGSIGNALS  => 0
		)
		port map (
			clk                    => clk_clk_clk,                                                                  --                       clk.clk
			reset                  => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,                             --                     reset.reset
			uav_address            => crypto_module_read_master_translator_avalon_universal_master_0_address,       -- avalon_universal_master_0.address
			uav_burstcount         => crypto_module_read_master_translator_avalon_universal_master_0_burstcount,    --                          .burstcount
			uav_read               => crypto_module_read_master_translator_avalon_universal_master_0_read,          --                          .read
			uav_write              => crypto_module_read_master_translator_avalon_universal_master_0_write,         --                          .write
			uav_waitrequest        => crypto_module_read_master_translator_avalon_universal_master_0_waitrequest,   --                          .waitrequest
			uav_readdatavalid      => crypto_module_read_master_translator_avalon_universal_master_0_readdatavalid, --                          .readdatavalid
			uav_byteenable         => crypto_module_read_master_translator_avalon_universal_master_0_byteenable,    --                          .byteenable
			uav_readdata           => crypto_module_read_master_translator_avalon_universal_master_0_readdata,      --                          .readdata
			uav_writedata          => crypto_module_read_master_translator_avalon_universal_master_0_writedata,     --                          .writedata
			uav_lock               => crypto_module_read_master_translator_avalon_universal_master_0_lock,          --                          .lock
			uav_debugaccess        => crypto_module_read_master_translator_avalon_universal_master_0_debugaccess,   --                          .debugaccess
			av_address             => crypto_module_read_master_address,                                            --      avalon_anti_master_0.address
			av_waitrequest         => crypto_module_read_master_waitrequest,                                        --                          .waitrequest
			av_read                => crypto_module_read_master_read,                                               --                          .read
			av_readdata            => crypto_module_read_master_readdata,                                           --                          .readdata
			av_burstcount          => "1",                                                                          --               (terminated)
			av_byteenable          => "1111",                                                                       --               (terminated)
			av_beginbursttransfer  => '0',                                                                          --               (terminated)
			av_begintransfer       => '0',                                                                          --               (terminated)
			av_chipselect          => '0',                                                                          --               (terminated)
			av_readdatavalid       => open,                                                                         --               (terminated)
			av_write               => '0',                                                                          --               (terminated)
			av_writedata           => "00000000000000000000000000000000",                                           --               (terminated)
			av_lock                => '0',                                                                          --               (terminated)
			av_debugaccess         => '0',                                                                          --               (terminated)
			uav_clken              => open,                                                                         --               (terminated)
			av_clken               => '1',                                                                          --               (terminated)
			uav_response           => "00",                                                                         --               (terminated)
			av_response            => open,                                                                         --               (terminated)
			uav_writeresponsevalid => '0',                                                                          --               (terminated)
			av_writeresponsevalid  => open                                                                          --               (terminated)
		);

	crypto_module_write_master_translator : component crypto_test_mm_interconnect_0_crypto_module_write_master_translator
		generic map (
			AV_ADDRESS_W                => 32,
			AV_DATA_W                   => 32,
			AV_BURSTCOUNT_W             => 1,
			AV_BYTEENABLE_W             => 4,
			UAV_ADDRESS_W               => 32,
			UAV_BURSTCOUNT_W            => 3,
			USE_READ                    => 0,
			USE_WRITE                   => 1,
			USE_BEGINBURSTTRANSFER      => 0,
			USE_BEGINTRANSFER           => 0,
			USE_CHIPSELECT              => 0,
			USE_BURSTCOUNT              => 0,
			USE_READDATAVALID           => 0,
			USE_WAITREQUEST             => 1,
			USE_READRESPONSE            => 0,
			USE_WRITERESPONSE           => 0,
			AV_SYMBOLS_PER_WORD         => 4,
			AV_ADDRESS_SYMBOLS          => 1,
			AV_BURSTCOUNT_SYMBOLS       => 0,
			AV_CONSTANT_BURST_BEHAVIOR  => 0,
			UAV_CONSTANT_BURST_BEHAVIOR => 0,
			AV_LINEWRAPBURSTS           => 0,
			AV_REGISTERINCOMINGSIGNALS  => 0
		)
		port map (
			clk                    => clk_clk_clk,                                                                   --                       clk.clk
			reset                  => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,                              --                     reset.reset
			uav_address            => crypto_module_write_master_translator_avalon_universal_master_0_address,       -- avalon_universal_master_0.address
			uav_burstcount         => crypto_module_write_master_translator_avalon_universal_master_0_burstcount,    --                          .burstcount
			uav_read               => crypto_module_write_master_translator_avalon_universal_master_0_read,          --                          .read
			uav_write              => crypto_module_write_master_translator_avalon_universal_master_0_write,         --                          .write
			uav_waitrequest        => crypto_module_write_master_translator_avalon_universal_master_0_waitrequest,   --                          .waitrequest
			uav_readdatavalid      => crypto_module_write_master_translator_avalon_universal_master_0_readdatavalid, --                          .readdatavalid
			uav_byteenable         => crypto_module_write_master_translator_avalon_universal_master_0_byteenable,    --                          .byteenable
			uav_readdata           => crypto_module_write_master_translator_avalon_universal_master_0_readdata,      --                          .readdata
			uav_writedata          => crypto_module_write_master_translator_avalon_universal_master_0_writedata,     --                          .writedata
			uav_lock               => crypto_module_write_master_translator_avalon_universal_master_0_lock,          --                          .lock
			uav_debugaccess        => crypto_module_write_master_translator_avalon_universal_master_0_debugaccess,   --                          .debugaccess
			av_address             => crypto_module_write_master_address,                                            --      avalon_anti_master_0.address
			av_waitrequest         => crypto_module_write_master_waitrequest,                                        --                          .waitrequest
			av_write               => crypto_module_write_master_write,                                              --                          .write
			av_writedata           => crypto_module_write_master_writedata,                                          --                          .writedata
			av_burstcount          => "1",                                                                           --               (terminated)
			av_byteenable          => "1111",                                                                        --               (terminated)
			av_beginbursttransfer  => '0',                                                                           --               (terminated)
			av_begintransfer       => '0',                                                                           --               (terminated)
			av_chipselect          => '0',                                                                           --               (terminated)
			av_read                => '0',                                                                           --               (terminated)
			av_readdata            => open,                                                                          --               (terminated)
			av_readdatavalid       => open,                                                                          --               (terminated)
			av_lock                => '0',                                                                           --               (terminated)
			av_debugaccess         => '0',                                                                           --               (terminated)
			uav_clken              => open,                                                                          --               (terminated)
			av_clken               => '1',                                                                           --               (terminated)
			uav_response           => "00",                                                                          --               (terminated)
			av_response            => open,                                                                          --               (terminated)
			uav_writeresponsevalid => '0',                                                                           --               (terminated)
			av_writeresponsevalid  => open                                                                           --               (terminated)
		);

	nios2_qsys_0_instruction_master_translator : component crypto_test_mm_interconnect_0_nios2_qsys_0_instruction_master_translator
		generic map (
			AV_ADDRESS_W                => 20,
			AV_DATA_W                   => 32,
			AV_BURSTCOUNT_W             => 1,
			AV_BYTEENABLE_W             => 4,
			UAV_ADDRESS_W               => 32,
			UAV_BURSTCOUNT_W            => 3,
			USE_READ                    => 1,
			USE_WRITE                   => 0,
			USE_BEGINBURSTTRANSFER      => 0,
			USE_BEGINTRANSFER           => 0,
			USE_CHIPSELECT              => 0,
			USE_BURSTCOUNT              => 0,
			USE_READDATAVALID           => 0,
			USE_WAITREQUEST             => 1,
			USE_READRESPONSE            => 0,
			USE_WRITERESPONSE           => 0,
			AV_SYMBOLS_PER_WORD         => 4,
			AV_ADDRESS_SYMBOLS          => 1,
			AV_BURSTCOUNT_SYMBOLS       => 0,
			AV_CONSTANT_BURST_BEHAVIOR  => 0,
			UAV_CONSTANT_BURST_BEHAVIOR => 0,
			AV_LINEWRAPBURSTS           => 1,
			AV_REGISTERINCOMINGSIGNALS  => 0
		)
		port map (
			clk                    => clk_clk_clk,                                                                        --                       clk.clk
			reset                  => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,                                   --                     reset.reset
			uav_address            => nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_address,       -- avalon_universal_master_0.address
			uav_burstcount         => nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_burstcount,    --                          .burstcount
			uav_read               => nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_read,          --                          .read
			uav_write              => nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_write,         --                          .write
			uav_waitrequest        => nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_waitrequest,   --                          .waitrequest
			uav_readdatavalid      => nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdatavalid, --                          .readdatavalid
			uav_byteenable         => nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_byteenable,    --                          .byteenable
			uav_readdata           => nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdata,      --                          .readdata
			uav_writedata          => nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_writedata,     --                          .writedata
			uav_lock               => nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_lock,          --                          .lock
			uav_debugaccess        => nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_debugaccess,   --                          .debugaccess
			av_address             => nios2_qsys_0_instruction_master_address,                                            --      avalon_anti_master_0.address
			av_waitrequest         => nios2_qsys_0_instruction_master_waitrequest,                                        --                          .waitrequest
			av_read                => nios2_qsys_0_instruction_master_read,                                               --                          .read
			av_readdata            => nios2_qsys_0_instruction_master_readdata,                                           --                          .readdata
			av_burstcount          => "1",                                                                                --               (terminated)
			av_byteenable          => "1111",                                                                             --               (terminated)
			av_beginbursttransfer  => '0',                                                                                --               (terminated)
			av_begintransfer       => '0',                                                                                --               (terminated)
			av_chipselect          => '0',                                                                                --               (terminated)
			av_readdatavalid       => open,                                                                               --               (terminated)
			av_write               => '0',                                                                                --               (terminated)
			av_writedata           => "00000000000000000000000000000000",                                                 --               (terminated)
			av_lock                => '0',                                                                                --               (terminated)
			av_debugaccess         => '0',                                                                                --               (terminated)
			uav_clken              => open,                                                                               --               (terminated)
			av_clken               => '1',                                                                                --               (terminated)
			uav_response           => "00",                                                                               --               (terminated)
			av_response            => open,                                                                               --               (terminated)
			uav_writeresponsevalid => '0',                                                                                --               (terminated)
			av_writeresponsevalid  => open                                                                                --               (terminated)
		);

	jtag_uart_0_avalon_jtag_slave_translator : component crypto_test_mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_translator
		generic map (
			AV_ADDRESS_W                   => 1,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 1,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 32,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 1,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => clk_clk_clk,                                          --                      clk.clk
			reset                  => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,     --                    reset.reset
			uav_address            => jtag_uart_0_avalon_jtag_slave_agent_m0_address,       -- avalon_universal_slave_0.address
			uav_burstcount         => jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount,    --                         .burstcount
			uav_read               => jtag_uart_0_avalon_jtag_slave_agent_m0_read,          --                         .read
			uav_write              => jtag_uart_0_avalon_jtag_slave_agent_m0_write,         --                         .write
			uav_waitrequest        => jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest,   --                         .waitrequest
			uav_readdatavalid      => jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid, --                         .readdatavalid
			uav_byteenable         => jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable,    --                         .byteenable
			uav_readdata           => jtag_uart_0_avalon_jtag_slave_agent_m0_readdata,      --                         .readdata
			uav_writedata          => jtag_uart_0_avalon_jtag_slave_agent_m0_writedata,     --                         .writedata
			uav_lock               => jtag_uart_0_avalon_jtag_slave_agent_m0_lock,          --                         .lock
			uav_debugaccess        => jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess,   --                         .debugaccess
			av_address             => jtag_uart_0_avalon_jtag_slave_address,                --      avalon_anti_slave_0.address
			av_write               => jtag_uart_0_avalon_jtag_slave_write,                  --                         .write
			av_read                => jtag_uart_0_avalon_jtag_slave_read,                   --                         .read
			av_readdata            => jtag_uart_0_avalon_jtag_slave_readdata,               --                         .readdata
			av_writedata           => jtag_uart_0_avalon_jtag_slave_writedata,              --                         .writedata
			av_waitrequest         => jtag_uart_0_avalon_jtag_slave_waitrequest,            --                         .waitrequest
			av_chipselect          => jtag_uart_0_avalon_jtag_slave_chipselect,             --                         .chipselect
			av_begintransfer       => open,                                                 --              (terminated)
			av_beginbursttransfer  => open,                                                 --              (terminated)
			av_burstcount          => open,                                                 --              (terminated)
			av_byteenable          => open,                                                 --              (terminated)
			av_readdatavalid       => '0',                                                  --              (terminated)
			av_writebyteenable     => open,                                                 --              (terminated)
			av_lock                => open,                                                 --              (terminated)
			av_clken               => open,                                                 --              (terminated)
			uav_clken              => '0',                                                  --              (terminated)
			av_debugaccess         => open,                                                 --              (terminated)
			av_outputenable        => open,                                                 --              (terminated)
			uav_response           => open,                                                 --              (terminated)
			av_response            => "00",                                                 --              (terminated)
			uav_writeresponsevalid => open,                                                 --              (terminated)
			av_writeresponsevalid  => '0'                                                   --              (terminated)
		);

	sysid_qsys_0_control_slave_translator : component crypto_test_mm_interconnect_0_sysid_qsys_0_control_slave_translator
		generic map (
			AV_ADDRESS_W                   => 1,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 4,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 32,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 0,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => clk_clk_clk,                                       --                      clk.clk
			reset                  => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,  --                    reset.reset
			uav_address            => sysid_qsys_0_control_slave_agent_m0_address,       -- avalon_universal_slave_0.address
			uav_burstcount         => sysid_qsys_0_control_slave_agent_m0_burstcount,    --                         .burstcount
			uav_read               => sysid_qsys_0_control_slave_agent_m0_read,          --                         .read
			uav_write              => sysid_qsys_0_control_slave_agent_m0_write,         --                         .write
			uav_waitrequest        => sysid_qsys_0_control_slave_agent_m0_waitrequest,   --                         .waitrequest
			uav_readdatavalid      => sysid_qsys_0_control_slave_agent_m0_readdatavalid, --                         .readdatavalid
			uav_byteenable         => sysid_qsys_0_control_slave_agent_m0_byteenable,    --                         .byteenable
			uav_readdata           => sysid_qsys_0_control_slave_agent_m0_readdata,      --                         .readdata
			uav_writedata          => sysid_qsys_0_control_slave_agent_m0_writedata,     --                         .writedata
			uav_lock               => sysid_qsys_0_control_slave_agent_m0_lock,          --                         .lock
			uav_debugaccess        => sysid_qsys_0_control_slave_agent_m0_debugaccess,   --                         .debugaccess
			av_address             => sysid_qsys_0_control_slave_address,                --      avalon_anti_slave_0.address
			av_readdata            => sysid_qsys_0_control_slave_readdata,               --                         .readdata
			av_write               => open,                                              --              (terminated)
			av_read                => open,                                              --              (terminated)
			av_writedata           => open,                                              --              (terminated)
			av_begintransfer       => open,                                              --              (terminated)
			av_beginbursttransfer  => open,                                              --              (terminated)
			av_burstcount          => open,                                              --              (terminated)
			av_byteenable          => open,                                              --              (terminated)
			av_readdatavalid       => '0',                                               --              (terminated)
			av_waitrequest         => '0',                                               --              (terminated)
			av_writebyteenable     => open,                                              --              (terminated)
			av_lock                => open,                                              --              (terminated)
			av_chipselect          => open,                                              --              (terminated)
			av_clken               => open,                                              --              (terminated)
			uav_clken              => '0',                                               --              (terminated)
			av_debugaccess         => open,                                              --              (terminated)
			av_outputenable        => open,                                              --              (terminated)
			uav_response           => open,                                              --              (terminated)
			av_response            => "00",                                              --              (terminated)
			uav_writeresponsevalid => open,                                              --              (terminated)
			av_writeresponsevalid  => '0'                                                --              (terminated)
		);

	crypto_module_csr_translator : component crypto_test_mm_interconnect_0_crypto_module_csr_translator
		generic map (
			AV_ADDRESS_W                   => 3,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 4,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 32,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 0,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => clk_clk_clk,                                      --                      clk.clk
			reset                  => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, --                    reset.reset
			uav_address            => crypto_module_csr_agent_m0_address,               -- avalon_universal_slave_0.address
			uav_burstcount         => crypto_module_csr_agent_m0_burstcount,            --                         .burstcount
			uav_read               => crypto_module_csr_agent_m0_read,                  --                         .read
			uav_write              => crypto_module_csr_agent_m0_write,                 --                         .write
			uav_waitrequest        => crypto_module_csr_agent_m0_waitrequest,           --                         .waitrequest
			uav_readdatavalid      => crypto_module_csr_agent_m0_readdatavalid,         --                         .readdatavalid
			uav_byteenable         => crypto_module_csr_agent_m0_byteenable,            --                         .byteenable
			uav_readdata           => crypto_module_csr_agent_m0_readdata,              --                         .readdata
			uav_writedata          => crypto_module_csr_agent_m0_writedata,             --                         .writedata
			uav_lock               => crypto_module_csr_agent_m0_lock,                  --                         .lock
			uav_debugaccess        => crypto_module_csr_agent_m0_debugaccess,           --                         .debugaccess
			av_address             => crypto_module_csr_address,                        --      avalon_anti_slave_0.address
			av_write               => crypto_module_csr_write,                          --                         .write
			av_readdata            => crypto_module_csr_readdata,                       --                         .readdata
			av_writedata           => crypto_module_csr_writedata,                      --                         .writedata
			av_read                => open,                                             --              (terminated)
			av_begintransfer       => open,                                             --              (terminated)
			av_beginbursttransfer  => open,                                             --              (terminated)
			av_burstcount          => open,                                             --              (terminated)
			av_byteenable          => open,                                             --              (terminated)
			av_readdatavalid       => '0',                                              --              (terminated)
			av_waitrequest         => '0',                                              --              (terminated)
			av_writebyteenable     => open,                                             --              (terminated)
			av_lock                => open,                                             --              (terminated)
			av_chipselect          => open,                                             --              (terminated)
			av_clken               => open,                                             --              (terminated)
			uav_clken              => '0',                                              --              (terminated)
			av_debugaccess         => open,                                             --              (terminated)
			av_outputenable        => open,                                             --              (terminated)
			uav_response           => open,                                             --              (terminated)
			av_response            => "00",                                             --              (terminated)
			uav_writeresponsevalid => open,                                             --              (terminated)
			av_writeresponsevalid  => '0'                                               --              (terminated)
		);

	nios2_qsys_0_jtag_debug_module_translator : component crypto_test_mm_interconnect_0_nios2_qsys_0_jtag_debug_module_translator
		generic map (
			AV_ADDRESS_W                   => 9,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 4,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 32,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 1,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => clk_clk_clk,                                           --                      clk.clk
			reset                  => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,      --                    reset.reset
			uav_address            => nios2_qsys_0_jtag_debug_module_agent_m0_address,       -- avalon_universal_slave_0.address
			uav_burstcount         => nios2_qsys_0_jtag_debug_module_agent_m0_burstcount,    --                         .burstcount
			uav_read               => nios2_qsys_0_jtag_debug_module_agent_m0_read,          --                         .read
			uav_write              => nios2_qsys_0_jtag_debug_module_agent_m0_write,         --                         .write
			uav_waitrequest        => nios2_qsys_0_jtag_debug_module_agent_m0_waitrequest,   --                         .waitrequest
			uav_readdatavalid      => nios2_qsys_0_jtag_debug_module_agent_m0_readdatavalid, --                         .readdatavalid
			uav_byteenable         => nios2_qsys_0_jtag_debug_module_agent_m0_byteenable,    --                         .byteenable
			uav_readdata           => nios2_qsys_0_jtag_debug_module_agent_m0_readdata,      --                         .readdata
			uav_writedata          => nios2_qsys_0_jtag_debug_module_agent_m0_writedata,     --                         .writedata
			uav_lock               => nios2_qsys_0_jtag_debug_module_agent_m0_lock,          --                         .lock
			uav_debugaccess        => nios2_qsys_0_jtag_debug_module_agent_m0_debugaccess,   --                         .debugaccess
			av_address             => nios2_qsys_0_jtag_debug_module_address,                --      avalon_anti_slave_0.address
			av_write               => nios2_qsys_0_jtag_debug_module_write,                  --                         .write
			av_read                => nios2_qsys_0_jtag_debug_module_read,                   --                         .read
			av_readdata            => nios2_qsys_0_jtag_debug_module_readdata,               --                         .readdata
			av_writedata           => nios2_qsys_0_jtag_debug_module_writedata,              --                         .writedata
			av_byteenable          => nios2_qsys_0_jtag_debug_module_byteenable,             --                         .byteenable
			av_waitrequest         => nios2_qsys_0_jtag_debug_module_waitrequest,            --                         .waitrequest
			av_debugaccess         => nios2_qsys_0_jtag_debug_module_debugaccess,            --                         .debugaccess
			av_begintransfer       => open,                                                  --              (terminated)
			av_beginbursttransfer  => open,                                                  --              (terminated)
			av_burstcount          => open,                                                  --              (terminated)
			av_readdatavalid       => '0',                                                   --              (terminated)
			av_writebyteenable     => open,                                                  --              (terminated)
			av_lock                => open,                                                  --              (terminated)
			av_chipselect          => open,                                                  --              (terminated)
			av_clken               => open,                                                  --              (terminated)
			uav_clken              => '0',                                                   --              (terminated)
			av_outputenable        => open,                                                  --              (terminated)
			uav_response           => open,                                                  --              (terminated)
			av_response            => "00",                                                  --              (terminated)
			uav_writeresponsevalid => open,                                                  --              (terminated)
			av_writeresponsevalid  => '0'                                                    --              (terminated)
		);

	instruction_memory_s1_translator : component crypto_test_mm_interconnect_0_instruction_memory_s1_translator
		generic map (
			AV_ADDRESS_W                   => 16,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 4,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 32,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 1,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 0,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 0,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => clk_clk_clk,                                      --                      clk.clk
			reset                  => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, --                    reset.reset
			uav_address            => instruction_memory_s1_agent_m0_address,           -- avalon_universal_slave_0.address
			uav_burstcount         => instruction_memory_s1_agent_m0_burstcount,        --                         .burstcount
			uav_read               => instruction_memory_s1_agent_m0_read,              --                         .read
			uav_write              => instruction_memory_s1_agent_m0_write,             --                         .write
			uav_waitrequest        => instruction_memory_s1_agent_m0_waitrequest,       --                         .waitrequest
			uav_readdatavalid      => instruction_memory_s1_agent_m0_readdatavalid,     --                         .readdatavalid
			uav_byteenable         => instruction_memory_s1_agent_m0_byteenable,        --                         .byteenable
			uav_readdata           => instruction_memory_s1_agent_m0_readdata,          --                         .readdata
			uav_writedata          => instruction_memory_s1_agent_m0_writedata,         --                         .writedata
			uav_lock               => instruction_memory_s1_agent_m0_lock,              --                         .lock
			uav_debugaccess        => instruction_memory_s1_agent_m0_debugaccess,       --                         .debugaccess
			av_address             => instruction_memory_s1_address,                    --      avalon_anti_slave_0.address
			av_write               => instruction_memory_s1_write,                      --                         .write
			av_readdata            => instruction_memory_s1_readdata,                   --                         .readdata
			av_writedata           => instruction_memory_s1_writedata,                  --                         .writedata
			av_byteenable          => instruction_memory_s1_byteenable,                 --                         .byteenable
			av_chipselect          => instruction_memory_s1_chipselect,                 --                         .chipselect
			av_clken               => instruction_memory_s1_clken,                      --                         .clken
			av_read                => open,                                             --              (terminated)
			av_begintransfer       => open,                                             --              (terminated)
			av_beginbursttransfer  => open,                                             --              (terminated)
			av_burstcount          => open,                                             --              (terminated)
			av_readdatavalid       => '0',                                              --              (terminated)
			av_waitrequest         => '0',                                              --              (terminated)
			av_writebyteenable     => open,                                             --              (terminated)
			av_lock                => open,                                             --              (terminated)
			uav_clken              => '0',                                              --              (terminated)
			av_debugaccess         => open,                                             --              (terminated)
			av_outputenable        => open,                                             --              (terminated)
			uav_response           => open,                                             --              (terminated)
			av_response            => "00",                                             --              (terminated)
			uav_writeresponsevalid => open,                                             --              (terminated)
			av_writeresponsevalid  => '0'                                               --              (terminated)
		);

	timer_0_s1_translator : component crypto_test_mm_interconnect_0_timer_0_s1_translator
		generic map (
			AV_ADDRESS_W                   => 4,
			AV_DATA_W                      => 16,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 1,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 32,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 0,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => clk_clk_clk,                                      --                      clk.clk
			reset                  => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, --                    reset.reset
			uav_address            => timer_0_s1_agent_m0_address,                      -- avalon_universal_slave_0.address
			uav_burstcount         => timer_0_s1_agent_m0_burstcount,                   --                         .burstcount
			uav_read               => timer_0_s1_agent_m0_read,                         --                         .read
			uav_write              => timer_0_s1_agent_m0_write,                        --                         .write
			uav_waitrequest        => timer_0_s1_agent_m0_waitrequest,                  --                         .waitrequest
			uav_readdatavalid      => timer_0_s1_agent_m0_readdatavalid,                --                         .readdatavalid
			uav_byteenable         => timer_0_s1_agent_m0_byteenable,                   --                         .byteenable
			uav_readdata           => timer_0_s1_agent_m0_readdata,                     --                         .readdata
			uav_writedata          => timer_0_s1_agent_m0_writedata,                    --                         .writedata
			uav_lock               => timer_0_s1_agent_m0_lock,                         --                         .lock
			uav_debugaccess        => timer_0_s1_agent_m0_debugaccess,                  --                         .debugaccess
			av_address             => timer_0_s1_address,                               --      avalon_anti_slave_0.address
			av_write               => timer_0_s1_write,                                 --                         .write
			av_readdata            => timer_0_s1_readdata,                              --                         .readdata
			av_writedata           => timer_0_s1_writedata,                             --                         .writedata
			av_chipselect          => timer_0_s1_chipselect,                            --                         .chipselect
			av_read                => open,                                             --              (terminated)
			av_begintransfer       => open,                                             --              (terminated)
			av_beginbursttransfer  => open,                                             --              (terminated)
			av_burstcount          => open,                                             --              (terminated)
			av_byteenable          => open,                                             --              (terminated)
			av_readdatavalid       => '0',                                              --              (terminated)
			av_waitrequest         => '0',                                              --              (terminated)
			av_writebyteenable     => open,                                             --              (terminated)
			av_lock                => open,                                             --              (terminated)
			av_clken               => open,                                             --              (terminated)
			uav_clken              => '0',                                              --              (terminated)
			av_debugaccess         => open,                                             --              (terminated)
			av_outputenable        => open,                                             --              (terminated)
			uav_response           => open,                                             --              (terminated)
			av_response            => "00",                                             --              (terminated)
			uav_writeresponsevalid => open,                                             --              (terminated)
			av_writeresponsevalid  => '0'                                               --              (terminated)
		);

	stack_heap_s1_translator : component crypto_test_mm_interconnect_0_stack_heap_s1_translator
		generic map (
			AV_ADDRESS_W                   => 12,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 4,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 32,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 1,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 0,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 0,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => clk_clk_clk,                                      --                      clk.clk
			reset                  => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, --                    reset.reset
			uav_address            => stack_heap_s1_agent_m0_address,                   -- avalon_universal_slave_0.address
			uav_burstcount         => stack_heap_s1_agent_m0_burstcount,                --                         .burstcount
			uav_read               => stack_heap_s1_agent_m0_read,                      --                         .read
			uav_write              => stack_heap_s1_agent_m0_write,                     --                         .write
			uav_waitrequest        => stack_heap_s1_agent_m0_waitrequest,               --                         .waitrequest
			uav_readdatavalid      => stack_heap_s1_agent_m0_readdatavalid,             --                         .readdatavalid
			uav_byteenable         => stack_heap_s1_agent_m0_byteenable,                --                         .byteenable
			uav_readdata           => stack_heap_s1_agent_m0_readdata,                  --                         .readdata
			uav_writedata          => stack_heap_s1_agent_m0_writedata,                 --                         .writedata
			uav_lock               => stack_heap_s1_agent_m0_lock,                      --                         .lock
			uav_debugaccess        => stack_heap_s1_agent_m0_debugaccess,               --                         .debugaccess
			av_address             => stack_heap_s1_address,                            --      avalon_anti_slave_0.address
			av_write               => stack_heap_s1_write,                              --                         .write
			av_readdata            => stack_heap_s1_readdata,                           --                         .readdata
			av_writedata           => stack_heap_s1_writedata,                          --                         .writedata
			av_byteenable          => stack_heap_s1_byteenable,                         --                         .byteenable
			av_chipselect          => stack_heap_s1_chipselect,                         --                         .chipselect
			av_clken               => stack_heap_s1_clken,                              --                         .clken
			av_read                => open,                                             --              (terminated)
			av_begintransfer       => open,                                             --              (terminated)
			av_beginbursttransfer  => open,                                             --              (terminated)
			av_burstcount          => open,                                             --              (terminated)
			av_readdatavalid       => '0',                                              --              (terminated)
			av_waitrequest         => '0',                                              --              (terminated)
			av_writebyteenable     => open,                                             --              (terminated)
			av_lock                => open,                                             --              (terminated)
			uav_clken              => '0',                                              --              (terminated)
			av_debugaccess         => open,                                             --              (terminated)
			av_outputenable        => open,                                             --              (terminated)
			uav_response           => open,                                             --              (terminated)
			av_response            => "00",                                             --              (terminated)
			uav_writeresponsevalid => open,                                             --              (terminated)
			av_writeresponsevalid  => '0'                                               --              (terminated)
		);

	incoming_memory_s1_translator : component crypto_test_mm_interconnect_0_stack_heap_s1_translator
		generic map (
			AV_ADDRESS_W                   => 12,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 4,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 32,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 1,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 0,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 0,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => clk_clk_clk,                                      --                      clk.clk
			reset                  => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, --                    reset.reset
			uav_address            => incoming_memory_s1_agent_m0_address,              -- avalon_universal_slave_0.address
			uav_burstcount         => incoming_memory_s1_agent_m0_burstcount,           --                         .burstcount
			uav_read               => incoming_memory_s1_agent_m0_read,                 --                         .read
			uav_write              => incoming_memory_s1_agent_m0_write,                --                         .write
			uav_waitrequest        => incoming_memory_s1_agent_m0_waitrequest,          --                         .waitrequest
			uav_readdatavalid      => incoming_memory_s1_agent_m0_readdatavalid,        --                         .readdatavalid
			uav_byteenable         => incoming_memory_s1_agent_m0_byteenable,           --                         .byteenable
			uav_readdata           => incoming_memory_s1_agent_m0_readdata,             --                         .readdata
			uav_writedata          => incoming_memory_s1_agent_m0_writedata,            --                         .writedata
			uav_lock               => incoming_memory_s1_agent_m0_lock,                 --                         .lock
			uav_debugaccess        => incoming_memory_s1_agent_m0_debugaccess,          --                         .debugaccess
			av_address             => incoming_memory_s1_address,                       --      avalon_anti_slave_0.address
			av_write               => incoming_memory_s1_write,                         --                         .write
			av_readdata            => incoming_memory_s1_readdata,                      --                         .readdata
			av_writedata           => incoming_memory_s1_writedata,                     --                         .writedata
			av_byteenable          => incoming_memory_s1_byteenable,                    --                         .byteenable
			av_chipselect          => incoming_memory_s1_chipselect,                    --                         .chipselect
			av_clken               => incoming_memory_s1_clken,                         --                         .clken
			av_read                => open,                                             --              (terminated)
			av_begintransfer       => open,                                             --              (terminated)
			av_beginbursttransfer  => open,                                             --              (terminated)
			av_burstcount          => open,                                             --              (terminated)
			av_readdatavalid       => '0',                                              --              (terminated)
			av_waitrequest         => '0',                                              --              (terminated)
			av_writebyteenable     => open,                                             --              (terminated)
			av_lock                => open,                                             --              (terminated)
			uav_clken              => '0',                                              --              (terminated)
			av_debugaccess         => open,                                             --              (terminated)
			av_outputenable        => open,                                             --              (terminated)
			uav_response           => open,                                             --              (terminated)
			av_response            => "00",                                             --              (terminated)
			uav_writeresponsevalid => open,                                             --              (terminated)
			av_writeresponsevalid  => '0'                                               --              (terminated)
		);

	outgoing_memory_s1_translator : component crypto_test_mm_interconnect_0_stack_heap_s1_translator
		generic map (
			AV_ADDRESS_W                   => 12,
			AV_DATA_W                      => 32,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 4,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 32,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 1,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 0,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 0,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => clk_clk_clk,                                      --                      clk.clk
			reset                  => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, --                    reset.reset
			uav_address            => outgoing_memory_s1_agent_m0_address,              -- avalon_universal_slave_0.address
			uav_burstcount         => outgoing_memory_s1_agent_m0_burstcount,           --                         .burstcount
			uav_read               => outgoing_memory_s1_agent_m0_read,                 --                         .read
			uav_write              => outgoing_memory_s1_agent_m0_write,                --                         .write
			uav_waitrequest        => outgoing_memory_s1_agent_m0_waitrequest,          --                         .waitrequest
			uav_readdatavalid      => outgoing_memory_s1_agent_m0_readdatavalid,        --                         .readdatavalid
			uav_byteenable         => outgoing_memory_s1_agent_m0_byteenable,           --                         .byteenable
			uav_readdata           => outgoing_memory_s1_agent_m0_readdata,             --                         .readdata
			uav_writedata          => outgoing_memory_s1_agent_m0_writedata,            --                         .writedata
			uav_lock               => outgoing_memory_s1_agent_m0_lock,                 --                         .lock
			uav_debugaccess        => outgoing_memory_s1_agent_m0_debugaccess,          --                         .debugaccess
			av_address             => outgoing_memory_s1_address,                       --      avalon_anti_slave_0.address
			av_write               => outgoing_memory_s1_write,                         --                         .write
			av_readdata            => outgoing_memory_s1_readdata,                      --                         .readdata
			av_writedata           => outgoing_memory_s1_writedata,                     --                         .writedata
			av_byteenable          => outgoing_memory_s1_byteenable,                    --                         .byteenable
			av_chipselect          => outgoing_memory_s1_chipselect,                    --                         .chipselect
			av_clken               => outgoing_memory_s1_clken,                         --                         .clken
			av_read                => open,                                             --              (terminated)
			av_begintransfer       => open,                                             --              (terminated)
			av_beginbursttransfer  => open,                                             --              (terminated)
			av_burstcount          => open,                                             --              (terminated)
			av_readdatavalid       => '0',                                              --              (terminated)
			av_waitrequest         => '0',                                              --              (terminated)
			av_writebyteenable     => open,                                             --              (terminated)
			av_lock                => open,                                             --              (terminated)
			uav_clken              => '0',                                              --              (terminated)
			av_debugaccess         => open,                                             --              (terminated)
			av_outputenable        => open,                                             --              (terminated)
			uav_response           => open,                                             --              (terminated)
			av_response            => "00",                                             --              (terminated)
			uav_writeresponsevalid => open,                                             --              (terminated)
			av_writeresponsevalid  => '0'                                               --              (terminated)
		);

	timestamp_timer_s1_translator : component crypto_test_mm_interconnect_0_timer_0_s1_translator
		generic map (
			AV_ADDRESS_W                   => 4,
			AV_DATA_W                      => 16,
			UAV_DATA_W                     => 32,
			AV_BURSTCOUNT_W                => 1,
			AV_BYTEENABLE_W                => 1,
			UAV_BYTEENABLE_W               => 4,
			UAV_ADDRESS_W                  => 32,
			UAV_BURSTCOUNT_W               => 3,
			AV_READLATENCY                 => 0,
			USE_READDATAVALID              => 0,
			USE_WAITREQUEST                => 0,
			USE_UAV_CLKEN                  => 0,
			USE_READRESPONSE               => 0,
			USE_WRITERESPONSE              => 0,
			AV_SYMBOLS_PER_WORD            => 4,
			AV_ADDRESS_SYMBOLS             => 0,
			AV_BURSTCOUNT_SYMBOLS          => 0,
			AV_CONSTANT_BURST_BEHAVIOR     => 0,
			UAV_CONSTANT_BURST_BEHAVIOR    => 0,
			AV_REQUIRE_UNALIGNED_ADDRESSES => 0,
			CHIPSELECT_THROUGH_READLATENCY => 0,
			AV_READ_WAIT_CYCLES            => 1,
			AV_WRITE_WAIT_CYCLES           => 0,
			AV_SETUP_WAIT_CYCLES           => 0,
			AV_DATA_HOLD_CYCLES            => 0
		)
		port map (
			clk                    => clk_clk_clk,                                      --                      clk.clk
			reset                  => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, --                    reset.reset
			uav_address            => timestamp_timer_s1_agent_m0_address,              -- avalon_universal_slave_0.address
			uav_burstcount         => timestamp_timer_s1_agent_m0_burstcount,           --                         .burstcount
			uav_read               => timestamp_timer_s1_agent_m0_read,                 --                         .read
			uav_write              => timestamp_timer_s1_agent_m0_write,                --                         .write
			uav_waitrequest        => timestamp_timer_s1_agent_m0_waitrequest,          --                         .waitrequest
			uav_readdatavalid      => timestamp_timer_s1_agent_m0_readdatavalid,        --                         .readdatavalid
			uav_byteenable         => timestamp_timer_s1_agent_m0_byteenable,           --                         .byteenable
			uav_readdata           => timestamp_timer_s1_agent_m0_readdata,             --                         .readdata
			uav_writedata          => timestamp_timer_s1_agent_m0_writedata,            --                         .writedata
			uav_lock               => timestamp_timer_s1_agent_m0_lock,                 --                         .lock
			uav_debugaccess        => timestamp_timer_s1_agent_m0_debugaccess,          --                         .debugaccess
			av_address             => timestamp_timer_s1_address,                       --      avalon_anti_slave_0.address
			av_write               => timestamp_timer_s1_write,                         --                         .write
			av_readdata            => timestamp_timer_s1_readdata,                      --                         .readdata
			av_writedata           => timestamp_timer_s1_writedata,                     --                         .writedata
			av_chipselect          => timestamp_timer_s1_chipselect,                    --                         .chipselect
			av_read                => open,                                             --              (terminated)
			av_begintransfer       => open,                                             --              (terminated)
			av_beginbursttransfer  => open,                                             --              (terminated)
			av_burstcount          => open,                                             --              (terminated)
			av_byteenable          => open,                                             --              (terminated)
			av_readdatavalid       => '0',                                              --              (terminated)
			av_waitrequest         => '0',                                              --              (terminated)
			av_writebyteenable     => open,                                             --              (terminated)
			av_lock                => open,                                             --              (terminated)
			av_clken               => open,                                             --              (terminated)
			uav_clken              => '0',                                              --              (terminated)
			av_debugaccess         => open,                                             --              (terminated)
			av_outputenable        => open,                                             --              (terminated)
			uav_response           => open,                                             --              (terminated)
			av_response            => "00",                                             --              (terminated)
			uav_writeresponsevalid => open,                                             --              (terminated)
			av_writeresponsevalid  => '0'                                               --              (terminated)
		);

	nios2_qsys_0_data_master_agent : component altera_merlin_master_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 109,
			PKT_ORI_BURST_SIZE_L      => 107,
			PKT_RESPONSE_STATUS_H     => 106,
			PKT_RESPONSE_STATUS_L     => 105,
			PKT_QOS_H                 => 88,
			PKT_QOS_L                 => 88,
			PKT_DATA_SIDEBAND_H       => 86,
			PKT_DATA_SIDEBAND_L       => 86,
			PKT_ADDR_SIDEBAND_H       => 85,
			PKT_ADDR_SIDEBAND_L       => 85,
			PKT_BURST_TYPE_H          => 84,
			PKT_BURST_TYPE_L          => 83,
			PKT_CACHE_H               => 104,
			PKT_CACHE_L               => 101,
			PKT_THREAD_ID_H           => 97,
			PKT_THREAD_ID_L           => 97,
			PKT_BURST_SIZE_H          => 82,
			PKT_BURST_SIZE_L          => 80,
			PKT_TRANS_EXCLUSIVE       => 73,
			PKT_TRANS_LOCK            => 72,
			PKT_BEGIN_BURST           => 87,
			PKT_PROTECTION_H          => 100,
			PKT_PROTECTION_L          => 98,
			PKT_BURSTWRAP_H           => 79,
			PKT_BURSTWRAP_L           => 77,
			PKT_BYTE_CNT_H            => 76,
			PKT_BYTE_CNT_L            => 74,
			PKT_ADDR_H                => 67,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 68,
			PKT_TRANS_POSTED          => 69,
			PKT_TRANS_WRITE           => 70,
			PKT_TRANS_READ            => 71,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 92,
			PKT_SRC_ID_L              => 89,
			PKT_DEST_ID_H             => 96,
			PKT_DEST_ID_L             => 93,
			ST_DATA_W                 => 110,
			ST_CHANNEL_W              => 10,
			AV_BURSTCOUNT_W           => 3,
			SUPPRESS_0_BYTEEN_RSP     => 0,
			ID                        => 2,
			BURSTWRAP_VALUE           => 7,
			CACHE_VALUE               => 0,
			SECURE_ACCESS_BIT         => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                   => clk_clk_clk,                                                                 --       clk.clk
			reset                 => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,                            -- clk_reset.reset
			av_address            => nios2_qsys_0_data_master_translator_avalon_universal_master_0_address,       --        av.address
			av_write              => nios2_qsys_0_data_master_translator_avalon_universal_master_0_write,         --          .write
			av_read               => nios2_qsys_0_data_master_translator_avalon_universal_master_0_read,          --          .read
			av_writedata          => nios2_qsys_0_data_master_translator_avalon_universal_master_0_writedata,     --          .writedata
			av_readdata           => nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdata,      --          .readdata
			av_waitrequest        => nios2_qsys_0_data_master_translator_avalon_universal_master_0_waitrequest,   --          .waitrequest
			av_readdatavalid      => nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdatavalid, --          .readdatavalid
			av_byteenable         => nios2_qsys_0_data_master_translator_avalon_universal_master_0_byteenable,    --          .byteenable
			av_burstcount         => nios2_qsys_0_data_master_translator_avalon_universal_master_0_burstcount,    --          .burstcount
			av_debugaccess        => nios2_qsys_0_data_master_translator_avalon_universal_master_0_debugaccess,   --          .debugaccess
			av_lock               => nios2_qsys_0_data_master_translator_avalon_universal_master_0_lock,          --          .lock
			cp_valid              => nios2_qsys_0_data_master_agent_cp_valid,                                     --        cp.valid
			cp_data               => nios2_qsys_0_data_master_agent_cp_data,                                      --          .data
			cp_startofpacket      => nios2_qsys_0_data_master_agent_cp_startofpacket,                             --          .startofpacket
			cp_endofpacket        => nios2_qsys_0_data_master_agent_cp_endofpacket,                               --          .endofpacket
			cp_ready              => nios2_qsys_0_data_master_agent_cp_ready,                                     --          .ready
			rp_valid              => rsp_mux_src_valid,                                                           --        rp.valid
			rp_data               => rsp_mux_src_data,                                                            --          .data
			rp_channel            => rsp_mux_src_channel,                                                         --          .channel
			rp_startofpacket      => rsp_mux_src_startofpacket,                                                   --          .startofpacket
			rp_endofpacket        => rsp_mux_src_endofpacket,                                                     --          .endofpacket
			rp_ready              => rsp_mux_src_ready,                                                           --          .ready
			av_response           => open,                                                                        -- (terminated)
			av_writeresponsevalid => open                                                                         -- (terminated)
		);

	crypto_module_read_master_agent : component altera_merlin_master_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 109,
			PKT_ORI_BURST_SIZE_L      => 107,
			PKT_RESPONSE_STATUS_H     => 106,
			PKT_RESPONSE_STATUS_L     => 105,
			PKT_QOS_H                 => 88,
			PKT_QOS_L                 => 88,
			PKT_DATA_SIDEBAND_H       => 86,
			PKT_DATA_SIDEBAND_L       => 86,
			PKT_ADDR_SIDEBAND_H       => 85,
			PKT_ADDR_SIDEBAND_L       => 85,
			PKT_BURST_TYPE_H          => 84,
			PKT_BURST_TYPE_L          => 83,
			PKT_CACHE_H               => 104,
			PKT_CACHE_L               => 101,
			PKT_THREAD_ID_H           => 97,
			PKT_THREAD_ID_L           => 97,
			PKT_BURST_SIZE_H          => 82,
			PKT_BURST_SIZE_L          => 80,
			PKT_TRANS_EXCLUSIVE       => 73,
			PKT_TRANS_LOCK            => 72,
			PKT_BEGIN_BURST           => 87,
			PKT_PROTECTION_H          => 100,
			PKT_PROTECTION_L          => 98,
			PKT_BURSTWRAP_H           => 79,
			PKT_BURSTWRAP_L           => 77,
			PKT_BYTE_CNT_H            => 76,
			PKT_BYTE_CNT_L            => 74,
			PKT_ADDR_H                => 67,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 68,
			PKT_TRANS_POSTED          => 69,
			PKT_TRANS_WRITE           => 70,
			PKT_TRANS_READ            => 71,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 92,
			PKT_SRC_ID_L              => 89,
			PKT_DEST_ID_H             => 96,
			PKT_DEST_ID_L             => 93,
			ST_DATA_W                 => 110,
			ST_CHANNEL_W              => 10,
			AV_BURSTCOUNT_W           => 3,
			SUPPRESS_0_BYTEEN_RSP     => 0,
			ID                        => 0,
			BURSTWRAP_VALUE           => 7,
			CACHE_VALUE               => 0,
			SECURE_ACCESS_BIT         => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                   => clk_clk_clk,                                                                  --       clk.clk
			reset                 => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,                             -- clk_reset.reset
			av_address            => crypto_module_read_master_translator_avalon_universal_master_0_address,       --        av.address
			av_write              => crypto_module_read_master_translator_avalon_universal_master_0_write,         --          .write
			av_read               => crypto_module_read_master_translator_avalon_universal_master_0_read,          --          .read
			av_writedata          => crypto_module_read_master_translator_avalon_universal_master_0_writedata,     --          .writedata
			av_readdata           => crypto_module_read_master_translator_avalon_universal_master_0_readdata,      --          .readdata
			av_waitrequest        => crypto_module_read_master_translator_avalon_universal_master_0_waitrequest,   --          .waitrequest
			av_readdatavalid      => crypto_module_read_master_translator_avalon_universal_master_0_readdatavalid, --          .readdatavalid
			av_byteenable         => crypto_module_read_master_translator_avalon_universal_master_0_byteenable,    --          .byteenable
			av_burstcount         => crypto_module_read_master_translator_avalon_universal_master_0_burstcount,    --          .burstcount
			av_debugaccess        => crypto_module_read_master_translator_avalon_universal_master_0_debugaccess,   --          .debugaccess
			av_lock               => crypto_module_read_master_translator_avalon_universal_master_0_lock,          --          .lock
			cp_valid              => crypto_module_read_master_agent_cp_valid,                                     --        cp.valid
			cp_data               => crypto_module_read_master_agent_cp_data,                                      --          .data
			cp_startofpacket      => crypto_module_read_master_agent_cp_startofpacket,                             --          .startofpacket
			cp_endofpacket        => crypto_module_read_master_agent_cp_endofpacket,                               --          .endofpacket
			cp_ready              => crypto_module_read_master_agent_cp_ready,                                     --          .ready
			rp_valid              => rsp_mux_001_src_valid,                                                        --        rp.valid
			rp_data               => rsp_mux_001_src_data,                                                         --          .data
			rp_channel            => rsp_mux_001_src_channel,                                                      --          .channel
			rp_startofpacket      => rsp_mux_001_src_startofpacket,                                                --          .startofpacket
			rp_endofpacket        => rsp_mux_001_src_endofpacket,                                                  --          .endofpacket
			rp_ready              => rsp_mux_001_src_ready,                                                        --          .ready
			av_response           => open,                                                                         -- (terminated)
			av_writeresponsevalid => open                                                                          -- (terminated)
		);

	crypto_module_write_master_agent : component altera_merlin_master_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 109,
			PKT_ORI_BURST_SIZE_L      => 107,
			PKT_RESPONSE_STATUS_H     => 106,
			PKT_RESPONSE_STATUS_L     => 105,
			PKT_QOS_H                 => 88,
			PKT_QOS_L                 => 88,
			PKT_DATA_SIDEBAND_H       => 86,
			PKT_DATA_SIDEBAND_L       => 86,
			PKT_ADDR_SIDEBAND_H       => 85,
			PKT_ADDR_SIDEBAND_L       => 85,
			PKT_BURST_TYPE_H          => 84,
			PKT_BURST_TYPE_L          => 83,
			PKT_CACHE_H               => 104,
			PKT_CACHE_L               => 101,
			PKT_THREAD_ID_H           => 97,
			PKT_THREAD_ID_L           => 97,
			PKT_BURST_SIZE_H          => 82,
			PKT_BURST_SIZE_L          => 80,
			PKT_TRANS_EXCLUSIVE       => 73,
			PKT_TRANS_LOCK            => 72,
			PKT_BEGIN_BURST           => 87,
			PKT_PROTECTION_H          => 100,
			PKT_PROTECTION_L          => 98,
			PKT_BURSTWRAP_H           => 79,
			PKT_BURSTWRAP_L           => 77,
			PKT_BYTE_CNT_H            => 76,
			PKT_BYTE_CNT_L            => 74,
			PKT_ADDR_H                => 67,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 68,
			PKT_TRANS_POSTED          => 69,
			PKT_TRANS_WRITE           => 70,
			PKT_TRANS_READ            => 71,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 92,
			PKT_SRC_ID_L              => 89,
			PKT_DEST_ID_H             => 96,
			PKT_DEST_ID_L             => 93,
			ST_DATA_W                 => 110,
			ST_CHANNEL_W              => 10,
			AV_BURSTCOUNT_W           => 3,
			SUPPRESS_0_BYTEEN_RSP     => 0,
			ID                        => 1,
			BURSTWRAP_VALUE           => 7,
			CACHE_VALUE               => 0,
			SECURE_ACCESS_BIT         => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                   => clk_clk_clk,                                                                   --       clk.clk
			reset                 => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,                              -- clk_reset.reset
			av_address            => crypto_module_write_master_translator_avalon_universal_master_0_address,       --        av.address
			av_write              => crypto_module_write_master_translator_avalon_universal_master_0_write,         --          .write
			av_read               => crypto_module_write_master_translator_avalon_universal_master_0_read,          --          .read
			av_writedata          => crypto_module_write_master_translator_avalon_universal_master_0_writedata,     --          .writedata
			av_readdata           => crypto_module_write_master_translator_avalon_universal_master_0_readdata,      --          .readdata
			av_waitrequest        => crypto_module_write_master_translator_avalon_universal_master_0_waitrequest,   --          .waitrequest
			av_readdatavalid      => crypto_module_write_master_translator_avalon_universal_master_0_readdatavalid, --          .readdatavalid
			av_byteenable         => crypto_module_write_master_translator_avalon_universal_master_0_byteenable,    --          .byteenable
			av_burstcount         => crypto_module_write_master_translator_avalon_universal_master_0_burstcount,    --          .burstcount
			av_debugaccess        => crypto_module_write_master_translator_avalon_universal_master_0_debugaccess,   --          .debugaccess
			av_lock               => crypto_module_write_master_translator_avalon_universal_master_0_lock,          --          .lock
			cp_valid              => crypto_module_write_master_agent_cp_valid,                                     --        cp.valid
			cp_data               => crypto_module_write_master_agent_cp_data,                                      --          .data
			cp_startofpacket      => crypto_module_write_master_agent_cp_startofpacket,                             --          .startofpacket
			cp_endofpacket        => crypto_module_write_master_agent_cp_endofpacket,                               --          .endofpacket
			cp_ready              => crypto_module_write_master_agent_cp_ready,                                     --          .ready
			rp_valid              => rsp_mux_002_src_valid,                                                         --        rp.valid
			rp_data               => rsp_mux_002_src_data,                                                          --          .data
			rp_channel            => rsp_mux_002_src_channel,                                                       --          .channel
			rp_startofpacket      => rsp_mux_002_src_startofpacket,                                                 --          .startofpacket
			rp_endofpacket        => rsp_mux_002_src_endofpacket,                                                   --          .endofpacket
			rp_ready              => rsp_mux_002_src_ready,                                                         --          .ready
			av_response           => open,                                                                          -- (terminated)
			av_writeresponsevalid => open                                                                           -- (terminated)
		);

	nios2_qsys_0_instruction_master_agent : component altera_merlin_master_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 109,
			PKT_ORI_BURST_SIZE_L      => 107,
			PKT_RESPONSE_STATUS_H     => 106,
			PKT_RESPONSE_STATUS_L     => 105,
			PKT_QOS_H                 => 88,
			PKT_QOS_L                 => 88,
			PKT_DATA_SIDEBAND_H       => 86,
			PKT_DATA_SIDEBAND_L       => 86,
			PKT_ADDR_SIDEBAND_H       => 85,
			PKT_ADDR_SIDEBAND_L       => 85,
			PKT_BURST_TYPE_H          => 84,
			PKT_BURST_TYPE_L          => 83,
			PKT_CACHE_H               => 104,
			PKT_CACHE_L               => 101,
			PKT_THREAD_ID_H           => 97,
			PKT_THREAD_ID_L           => 97,
			PKT_BURST_SIZE_H          => 82,
			PKT_BURST_SIZE_L          => 80,
			PKT_TRANS_EXCLUSIVE       => 73,
			PKT_TRANS_LOCK            => 72,
			PKT_BEGIN_BURST           => 87,
			PKT_PROTECTION_H          => 100,
			PKT_PROTECTION_L          => 98,
			PKT_BURSTWRAP_H           => 79,
			PKT_BURSTWRAP_L           => 77,
			PKT_BYTE_CNT_H            => 76,
			PKT_BYTE_CNT_L            => 74,
			PKT_ADDR_H                => 67,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 68,
			PKT_TRANS_POSTED          => 69,
			PKT_TRANS_WRITE           => 70,
			PKT_TRANS_READ            => 71,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 92,
			PKT_SRC_ID_L              => 89,
			PKT_DEST_ID_H             => 96,
			PKT_DEST_ID_L             => 93,
			ST_DATA_W                 => 110,
			ST_CHANNEL_W              => 10,
			AV_BURSTCOUNT_W           => 3,
			SUPPRESS_0_BYTEEN_RSP     => 0,
			ID                        => 3,
			BURSTWRAP_VALUE           => 3,
			CACHE_VALUE               => 0,
			SECURE_ACCESS_BIT         => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                   => clk_clk_clk,                                                                        --       clk.clk
			reset                 => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,                                   -- clk_reset.reset
			av_address            => nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_address,       --        av.address
			av_write              => nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_write,         --          .write
			av_read               => nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_read,          --          .read
			av_writedata          => nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_writedata,     --          .writedata
			av_readdata           => nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdata,      --          .readdata
			av_waitrequest        => nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_waitrequest,   --          .waitrequest
			av_readdatavalid      => nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdatavalid, --          .readdatavalid
			av_byteenable         => nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_byteenable,    --          .byteenable
			av_burstcount         => nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_burstcount,    --          .burstcount
			av_debugaccess        => nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_debugaccess,   --          .debugaccess
			av_lock               => nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_lock,          --          .lock
			cp_valid              => nios2_qsys_0_instruction_master_agent_cp_valid,                                     --        cp.valid
			cp_data               => nios2_qsys_0_instruction_master_agent_cp_data,                                      --          .data
			cp_startofpacket      => nios2_qsys_0_instruction_master_agent_cp_startofpacket,                             --          .startofpacket
			cp_endofpacket        => nios2_qsys_0_instruction_master_agent_cp_endofpacket,                               --          .endofpacket
			cp_ready              => nios2_qsys_0_instruction_master_agent_cp_ready,                                     --          .ready
			rp_valid              => rsp_mux_003_src_valid,                                                              --        rp.valid
			rp_data               => rsp_mux_003_src_data,                                                               --          .data
			rp_channel            => rsp_mux_003_src_channel,                                                            --          .channel
			rp_startofpacket      => rsp_mux_003_src_startofpacket,                                                      --          .startofpacket
			rp_endofpacket        => rsp_mux_003_src_endofpacket,                                                        --          .endofpacket
			rp_ready              => rsp_mux_003_src_ready,                                                              --          .ready
			av_response           => open,                                                                               -- (terminated)
			av_writeresponsevalid => open                                                                                -- (terminated)
		);

	jtag_uart_0_avalon_jtag_slave_agent : component altera_merlin_slave_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 109,
			PKT_ORI_BURST_SIZE_L      => 107,
			PKT_RESPONSE_STATUS_H     => 106,
			PKT_RESPONSE_STATUS_L     => 105,
			PKT_BURST_SIZE_H          => 82,
			PKT_BURST_SIZE_L          => 80,
			PKT_TRANS_LOCK            => 72,
			PKT_BEGIN_BURST           => 87,
			PKT_PROTECTION_H          => 100,
			PKT_PROTECTION_L          => 98,
			PKT_BURSTWRAP_H           => 79,
			PKT_BURSTWRAP_L           => 77,
			PKT_BYTE_CNT_H            => 76,
			PKT_BYTE_CNT_L            => 74,
			PKT_ADDR_H                => 67,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 68,
			PKT_TRANS_POSTED          => 69,
			PKT_TRANS_WRITE           => 70,
			PKT_TRANS_READ            => 71,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 92,
			PKT_SRC_ID_L              => 89,
			PKT_DEST_ID_H             => 96,
			PKT_DEST_ID_L             => 93,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 10,
			ST_DATA_W                 => 110,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                     => clk_clk_clk,                                                    --             clk.clk
			reset                   => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,               --       clk_reset.reset
			m0_address              => jtag_uart_0_avalon_jtag_slave_agent_m0_address,                 --              m0.address
			m0_burstcount           => jtag_uart_0_avalon_jtag_slave_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => jtag_uart_0_avalon_jtag_slave_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => jtag_uart_0_avalon_jtag_slave_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => jtag_uart_0_avalon_jtag_slave_agent_m0_lock,                    --                .lock
			m0_readdata             => jtag_uart_0_avalon_jtag_slave_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => jtag_uart_0_avalon_jtag_slave_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => jtag_uart_0_avalon_jtag_slave_agent_m0_read,                    --                .read
			m0_waitrequest          => jtag_uart_0_avalon_jtag_slave_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => jtag_uart_0_avalon_jtag_slave_agent_m0_writedata,               --                .writedata
			m0_write                => jtag_uart_0_avalon_jtag_slave_agent_m0_write,                   --                .write
			rp_endofpacket          => jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => jtag_uart_0_avalon_jtag_slave_agent_rp_ready,                   --                .ready
			rp_valid                => jtag_uart_0_avalon_jtag_slave_agent_rp_valid,                   --                .valid
			rp_data                 => jtag_uart_0_avalon_jtag_slave_agent_rp_data,                    --                .data
			rp_startofpacket        => jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_src_ready,                                              --              cp.ready
			cp_valid                => cmd_mux_src_valid,                                              --                .valid
			cp_data                 => cmd_mux_src_data,                                               --                .data
			cp_startofpacket        => cmd_mux_src_startofpacket,                                      --                .startofpacket
			cp_endofpacket          => cmd_mux_src_endofpacket,                                        --                .endofpacket
			cp_channel              => cmd_mux_src_channel,                                            --                .channel
			rf_sink_ready           => jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => jtag_uart_0_avalon_jtag_slave_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready,       -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_sink_data    => jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data,        --                .data
			rdata_fifo_src_ready    => jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => jtag_uart_0_avalon_jtag_slave_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                                           --     (terminated)
			m0_writeresponsevalid   => '0'                                                             --     (terminated)
		);

	jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo : component crypto_test_mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo
		port map (
			clk               => clk_clk_clk,                                                    --       clk.clk
			reset             => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,               -- clk_reset.reset
			in_data           => jtag_uart_0_avalon_jtag_slave_agent_rf_source_data,             --        in.data
			in_valid          => jtag_uart_0_avalon_jtag_slave_agent_rf_source_valid,            --          .valid
			in_ready          => jtag_uart_0_avalon_jtag_slave_agent_rf_source_ready,            --          .ready
			in_startofpacket  => jtag_uart_0_avalon_jtag_slave_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => jtag_uart_0_avalon_jtag_slave_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	sysid_qsys_0_control_slave_agent : component altera_merlin_slave_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 109,
			PKT_ORI_BURST_SIZE_L      => 107,
			PKT_RESPONSE_STATUS_H     => 106,
			PKT_RESPONSE_STATUS_L     => 105,
			PKT_BURST_SIZE_H          => 82,
			PKT_BURST_SIZE_L          => 80,
			PKT_TRANS_LOCK            => 72,
			PKT_BEGIN_BURST           => 87,
			PKT_PROTECTION_H          => 100,
			PKT_PROTECTION_L          => 98,
			PKT_BURSTWRAP_H           => 79,
			PKT_BURSTWRAP_L           => 77,
			PKT_BYTE_CNT_H            => 76,
			PKT_BYTE_CNT_L            => 74,
			PKT_ADDR_H                => 67,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 68,
			PKT_TRANS_POSTED          => 69,
			PKT_TRANS_WRITE           => 70,
			PKT_TRANS_READ            => 71,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 92,
			PKT_SRC_ID_L              => 89,
			PKT_DEST_ID_H             => 96,
			PKT_DEST_ID_L             => 93,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 10,
			ST_DATA_W                 => 110,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                     => clk_clk_clk,                                                 --             clk.clk
			reset                   => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,            --       clk_reset.reset
			m0_address              => sysid_qsys_0_control_slave_agent_m0_address,                 --              m0.address
			m0_burstcount           => sysid_qsys_0_control_slave_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => sysid_qsys_0_control_slave_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => sysid_qsys_0_control_slave_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => sysid_qsys_0_control_slave_agent_m0_lock,                    --                .lock
			m0_readdata             => sysid_qsys_0_control_slave_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => sysid_qsys_0_control_slave_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => sysid_qsys_0_control_slave_agent_m0_read,                    --                .read
			m0_waitrequest          => sysid_qsys_0_control_slave_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => sysid_qsys_0_control_slave_agent_m0_writedata,               --                .writedata
			m0_write                => sysid_qsys_0_control_slave_agent_m0_write,                   --                .write
			rp_endofpacket          => sysid_qsys_0_control_slave_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => sysid_qsys_0_control_slave_agent_rp_ready,                   --                .ready
			rp_valid                => sysid_qsys_0_control_slave_agent_rp_valid,                   --                .valid
			rp_data                 => sysid_qsys_0_control_slave_agent_rp_data,                    --                .data
			rp_startofpacket        => sysid_qsys_0_control_slave_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_001_src_ready,                                       --              cp.ready
			cp_valid                => cmd_mux_001_src_valid,                                       --                .valid
			cp_data                 => cmd_mux_001_src_data,                                        --                .data
			cp_startofpacket        => cmd_mux_001_src_startofpacket,                               --                .startofpacket
			cp_endofpacket          => cmd_mux_001_src_endofpacket,                                 --                .endofpacket
			cp_channel              => cmd_mux_001_src_channel,                                     --                .channel
			rf_sink_ready           => sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => sysid_qsys_0_control_slave_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => sysid_qsys_0_control_slave_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => sysid_qsys_0_control_slave_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => sysid_qsys_0_control_slave_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => sysid_qsys_0_control_slave_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => sysid_qsys_0_control_slave_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready,       -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_sink_data    => sysid_qsys_0_control_slave_agent_rdata_fifo_src_data,        --                .data
			rdata_fifo_src_ready    => sysid_qsys_0_control_slave_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => sysid_qsys_0_control_slave_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => sysid_qsys_0_control_slave_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                                        --     (terminated)
			m0_writeresponsevalid   => '0'                                                          --     (terminated)
		);

	sysid_qsys_0_control_slave_agent_rsp_fifo : component crypto_test_mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo
		port map (
			clk               => clk_clk_clk,                                                 --       clk.clk
			reset             => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,            -- clk_reset.reset
			in_data           => sysid_qsys_0_control_slave_agent_rf_source_data,             --        in.data
			in_valid          => sysid_qsys_0_control_slave_agent_rf_source_valid,            --          .valid
			in_ready          => sysid_qsys_0_control_slave_agent_rf_source_ready,            --          .ready
			in_startofpacket  => sysid_qsys_0_control_slave_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => sysid_qsys_0_control_slave_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => sysid_qsys_0_control_slave_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => sysid_qsys_0_control_slave_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => sysid_qsys_0_control_slave_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => sysid_qsys_0_control_slave_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => sysid_qsys_0_control_slave_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	crypto_module_csr_agent : component altera_merlin_slave_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 109,
			PKT_ORI_BURST_SIZE_L      => 107,
			PKT_RESPONSE_STATUS_H     => 106,
			PKT_RESPONSE_STATUS_L     => 105,
			PKT_BURST_SIZE_H          => 82,
			PKT_BURST_SIZE_L          => 80,
			PKT_TRANS_LOCK            => 72,
			PKT_BEGIN_BURST           => 87,
			PKT_PROTECTION_H          => 100,
			PKT_PROTECTION_L          => 98,
			PKT_BURSTWRAP_H           => 79,
			PKT_BURSTWRAP_L           => 77,
			PKT_BYTE_CNT_H            => 76,
			PKT_BYTE_CNT_L            => 74,
			PKT_ADDR_H                => 67,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 68,
			PKT_TRANS_POSTED          => 69,
			PKT_TRANS_WRITE           => 70,
			PKT_TRANS_READ            => 71,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 92,
			PKT_SRC_ID_L              => 89,
			PKT_DEST_ID_H             => 96,
			PKT_DEST_ID_L             => 93,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 10,
			ST_DATA_W                 => 110,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                     => clk_clk_clk,                                        --             clk.clk
			reset                   => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,   --       clk_reset.reset
			m0_address              => crypto_module_csr_agent_m0_address,                 --              m0.address
			m0_burstcount           => crypto_module_csr_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => crypto_module_csr_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => crypto_module_csr_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => crypto_module_csr_agent_m0_lock,                    --                .lock
			m0_readdata             => crypto_module_csr_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => crypto_module_csr_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => crypto_module_csr_agent_m0_read,                    --                .read
			m0_waitrequest          => crypto_module_csr_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => crypto_module_csr_agent_m0_writedata,               --                .writedata
			m0_write                => crypto_module_csr_agent_m0_write,                   --                .write
			rp_endofpacket          => crypto_module_csr_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => crypto_module_csr_agent_rp_ready,                   --                .ready
			rp_valid                => crypto_module_csr_agent_rp_valid,                   --                .valid
			rp_data                 => crypto_module_csr_agent_rp_data,                    --                .data
			rp_startofpacket        => crypto_module_csr_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_002_src_ready,                              --              cp.ready
			cp_valid                => cmd_mux_002_src_valid,                              --                .valid
			cp_data                 => cmd_mux_002_src_data,                               --                .data
			cp_startofpacket        => cmd_mux_002_src_startofpacket,                      --                .startofpacket
			cp_endofpacket          => cmd_mux_002_src_endofpacket,                        --                .endofpacket
			cp_channel              => cmd_mux_002_src_channel,                            --                .channel
			rf_sink_ready           => crypto_module_csr_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => crypto_module_csr_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => crypto_module_csr_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => crypto_module_csr_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => crypto_module_csr_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => crypto_module_csr_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => crypto_module_csr_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => crypto_module_csr_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => crypto_module_csr_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => crypto_module_csr_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => crypto_module_csr_agent_rdata_fifo_src_ready,       -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => crypto_module_csr_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_sink_data    => crypto_module_csr_agent_rdata_fifo_src_data,        --                .data
			rdata_fifo_src_ready    => crypto_module_csr_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => crypto_module_csr_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => crypto_module_csr_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                               --     (terminated)
			m0_writeresponsevalid   => '0'                                                 --     (terminated)
		);

	crypto_module_csr_agent_rsp_fifo : component crypto_test_mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo
		port map (
			clk               => clk_clk_clk,                                        --       clk.clk
			reset             => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,   -- clk_reset.reset
			in_data           => crypto_module_csr_agent_rf_source_data,             --        in.data
			in_valid          => crypto_module_csr_agent_rf_source_valid,            --          .valid
			in_ready          => crypto_module_csr_agent_rf_source_ready,            --          .ready
			in_startofpacket  => crypto_module_csr_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => crypto_module_csr_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => crypto_module_csr_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => crypto_module_csr_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => crypto_module_csr_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => crypto_module_csr_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => crypto_module_csr_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	nios2_qsys_0_jtag_debug_module_agent : component altera_merlin_slave_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 109,
			PKT_ORI_BURST_SIZE_L      => 107,
			PKT_RESPONSE_STATUS_H     => 106,
			PKT_RESPONSE_STATUS_L     => 105,
			PKT_BURST_SIZE_H          => 82,
			PKT_BURST_SIZE_L          => 80,
			PKT_TRANS_LOCK            => 72,
			PKT_BEGIN_BURST           => 87,
			PKT_PROTECTION_H          => 100,
			PKT_PROTECTION_L          => 98,
			PKT_BURSTWRAP_H           => 79,
			PKT_BURSTWRAP_L           => 77,
			PKT_BYTE_CNT_H            => 76,
			PKT_BYTE_CNT_L            => 74,
			PKT_ADDR_H                => 67,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 68,
			PKT_TRANS_POSTED          => 69,
			PKT_TRANS_WRITE           => 70,
			PKT_TRANS_READ            => 71,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 92,
			PKT_SRC_ID_L              => 89,
			PKT_DEST_ID_H             => 96,
			PKT_DEST_ID_L             => 93,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 10,
			ST_DATA_W                 => 110,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                     => clk_clk_clk,                                                     --             clk.clk
			reset                   => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,                --       clk_reset.reset
			m0_address              => nios2_qsys_0_jtag_debug_module_agent_m0_address,                 --              m0.address
			m0_burstcount           => nios2_qsys_0_jtag_debug_module_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => nios2_qsys_0_jtag_debug_module_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => nios2_qsys_0_jtag_debug_module_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => nios2_qsys_0_jtag_debug_module_agent_m0_lock,                    --                .lock
			m0_readdata             => nios2_qsys_0_jtag_debug_module_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => nios2_qsys_0_jtag_debug_module_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => nios2_qsys_0_jtag_debug_module_agent_m0_read,                    --                .read
			m0_waitrequest          => nios2_qsys_0_jtag_debug_module_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => nios2_qsys_0_jtag_debug_module_agent_m0_writedata,               --                .writedata
			m0_write                => nios2_qsys_0_jtag_debug_module_agent_m0_write,                   --                .write
			rp_endofpacket          => nios2_qsys_0_jtag_debug_module_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => nios2_qsys_0_jtag_debug_module_agent_rp_ready,                   --                .ready
			rp_valid                => nios2_qsys_0_jtag_debug_module_agent_rp_valid,                   --                .valid
			rp_data                 => nios2_qsys_0_jtag_debug_module_agent_rp_data,                    --                .data
			rp_startofpacket        => nios2_qsys_0_jtag_debug_module_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_003_src_ready,                                           --              cp.ready
			cp_valid                => cmd_mux_003_src_valid,                                           --                .valid
			cp_data                 => cmd_mux_003_src_data,                                            --                .data
			cp_startofpacket        => cmd_mux_003_src_startofpacket,                                   --                .startofpacket
			cp_endofpacket          => cmd_mux_003_src_endofpacket,                                     --                .endofpacket
			cp_channel              => cmd_mux_003_src_channel,                                         --                .channel
			rf_sink_ready           => nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => nios2_qsys_0_jtag_debug_module_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => nios2_qsys_0_jtag_debug_module_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => nios2_qsys_0_jtag_debug_module_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => nios2_qsys_0_jtag_debug_module_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => nios2_qsys_0_jtag_debug_module_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_ready,       -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_sink_data    => nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_data,        --                .data
			rdata_fifo_src_ready    => nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                                            --     (terminated)
			m0_writeresponsevalid   => '0'                                                              --     (terminated)
		);

	nios2_qsys_0_jtag_debug_module_agent_rsp_fifo : component crypto_test_mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo
		port map (
			clk               => clk_clk_clk,                                                     --       clk.clk
			reset             => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,                -- clk_reset.reset
			in_data           => nios2_qsys_0_jtag_debug_module_agent_rf_source_data,             --        in.data
			in_valid          => nios2_qsys_0_jtag_debug_module_agent_rf_source_valid,            --          .valid
			in_ready          => nios2_qsys_0_jtag_debug_module_agent_rf_source_ready,            --          .ready
			in_startofpacket  => nios2_qsys_0_jtag_debug_module_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => nios2_qsys_0_jtag_debug_module_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	instruction_memory_s1_agent : component altera_merlin_slave_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 109,
			PKT_ORI_BURST_SIZE_L      => 107,
			PKT_RESPONSE_STATUS_H     => 106,
			PKT_RESPONSE_STATUS_L     => 105,
			PKT_BURST_SIZE_H          => 82,
			PKT_BURST_SIZE_L          => 80,
			PKT_TRANS_LOCK            => 72,
			PKT_BEGIN_BURST           => 87,
			PKT_PROTECTION_H          => 100,
			PKT_PROTECTION_L          => 98,
			PKT_BURSTWRAP_H           => 79,
			PKT_BURSTWRAP_L           => 77,
			PKT_BYTE_CNT_H            => 76,
			PKT_BYTE_CNT_L            => 74,
			PKT_ADDR_H                => 67,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 68,
			PKT_TRANS_POSTED          => 69,
			PKT_TRANS_WRITE           => 70,
			PKT_TRANS_READ            => 71,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 92,
			PKT_SRC_ID_L              => 89,
			PKT_DEST_ID_H             => 96,
			PKT_DEST_ID_L             => 93,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 10,
			ST_DATA_W                 => 110,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                     => clk_clk_clk,                                            --             clk.clk
			reset                   => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,       --       clk_reset.reset
			m0_address              => instruction_memory_s1_agent_m0_address,                 --              m0.address
			m0_burstcount           => instruction_memory_s1_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => instruction_memory_s1_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => instruction_memory_s1_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => instruction_memory_s1_agent_m0_lock,                    --                .lock
			m0_readdata             => instruction_memory_s1_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => instruction_memory_s1_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => instruction_memory_s1_agent_m0_read,                    --                .read
			m0_waitrequest          => instruction_memory_s1_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => instruction_memory_s1_agent_m0_writedata,               --                .writedata
			m0_write                => instruction_memory_s1_agent_m0_write,                   --                .write
			rp_endofpacket          => instruction_memory_s1_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => instruction_memory_s1_agent_rp_ready,                   --                .ready
			rp_valid                => instruction_memory_s1_agent_rp_valid,                   --                .valid
			rp_data                 => instruction_memory_s1_agent_rp_data,                    --                .data
			rp_startofpacket        => instruction_memory_s1_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_004_src_ready,                                  --              cp.ready
			cp_valid                => cmd_mux_004_src_valid,                                  --                .valid
			cp_data                 => cmd_mux_004_src_data,                                   --                .data
			cp_startofpacket        => cmd_mux_004_src_startofpacket,                          --                .startofpacket
			cp_endofpacket          => cmd_mux_004_src_endofpacket,                            --                .endofpacket
			cp_channel              => cmd_mux_004_src_channel,                                --                .channel
			rf_sink_ready           => instruction_memory_s1_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => instruction_memory_s1_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => instruction_memory_s1_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => instruction_memory_s1_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => instruction_memory_s1_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => instruction_memory_s1_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => instruction_memory_s1_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => instruction_memory_s1_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => instruction_memory_s1_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => instruction_memory_s1_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => instruction_memory_s1_agent_rdata_fifo_src_ready,       -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => instruction_memory_s1_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_sink_data    => instruction_memory_s1_agent_rdata_fifo_src_data,        --                .data
			rdata_fifo_src_ready    => instruction_memory_s1_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => instruction_memory_s1_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => instruction_memory_s1_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                                   --     (terminated)
			m0_writeresponsevalid   => '0'                                                     --     (terminated)
		);

	instruction_memory_s1_agent_rsp_fifo : component crypto_test_mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo
		port map (
			clk               => clk_clk_clk,                                            --       clk.clk
			reset             => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,       -- clk_reset.reset
			in_data           => instruction_memory_s1_agent_rf_source_data,             --        in.data
			in_valid          => instruction_memory_s1_agent_rf_source_valid,            --          .valid
			in_ready          => instruction_memory_s1_agent_rf_source_ready,            --          .ready
			in_startofpacket  => instruction_memory_s1_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => instruction_memory_s1_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => instruction_memory_s1_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => instruction_memory_s1_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => instruction_memory_s1_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => instruction_memory_s1_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => instruction_memory_s1_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	timer_0_s1_agent : component altera_merlin_slave_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 109,
			PKT_ORI_BURST_SIZE_L      => 107,
			PKT_RESPONSE_STATUS_H     => 106,
			PKT_RESPONSE_STATUS_L     => 105,
			PKT_BURST_SIZE_H          => 82,
			PKT_BURST_SIZE_L          => 80,
			PKT_TRANS_LOCK            => 72,
			PKT_BEGIN_BURST           => 87,
			PKT_PROTECTION_H          => 100,
			PKT_PROTECTION_L          => 98,
			PKT_BURSTWRAP_H           => 79,
			PKT_BURSTWRAP_L           => 77,
			PKT_BYTE_CNT_H            => 76,
			PKT_BYTE_CNT_L            => 74,
			PKT_ADDR_H                => 67,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 68,
			PKT_TRANS_POSTED          => 69,
			PKT_TRANS_WRITE           => 70,
			PKT_TRANS_READ            => 71,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 92,
			PKT_SRC_ID_L              => 89,
			PKT_DEST_ID_H             => 96,
			PKT_DEST_ID_L             => 93,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 10,
			ST_DATA_W                 => 110,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                     => clk_clk_clk,                                      --             clk.clk
			reset                   => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, --       clk_reset.reset
			m0_address              => timer_0_s1_agent_m0_address,                      --              m0.address
			m0_burstcount           => timer_0_s1_agent_m0_burstcount,                   --                .burstcount
			m0_byteenable           => timer_0_s1_agent_m0_byteenable,                   --                .byteenable
			m0_debugaccess          => timer_0_s1_agent_m0_debugaccess,                  --                .debugaccess
			m0_lock                 => timer_0_s1_agent_m0_lock,                         --                .lock
			m0_readdata             => timer_0_s1_agent_m0_readdata,                     --                .readdata
			m0_readdatavalid        => timer_0_s1_agent_m0_readdatavalid,                --                .readdatavalid
			m0_read                 => timer_0_s1_agent_m0_read,                         --                .read
			m0_waitrequest          => timer_0_s1_agent_m0_waitrequest,                  --                .waitrequest
			m0_writedata            => timer_0_s1_agent_m0_writedata,                    --                .writedata
			m0_write                => timer_0_s1_agent_m0_write,                        --                .write
			rp_endofpacket          => timer_0_s1_agent_rp_endofpacket,                  --              rp.endofpacket
			rp_ready                => timer_0_s1_agent_rp_ready,                        --                .ready
			rp_valid                => timer_0_s1_agent_rp_valid,                        --                .valid
			rp_data                 => timer_0_s1_agent_rp_data,                         --                .data
			rp_startofpacket        => timer_0_s1_agent_rp_startofpacket,                --                .startofpacket
			cp_ready                => cmd_mux_005_src_ready,                            --              cp.ready
			cp_valid                => cmd_mux_005_src_valid,                            --                .valid
			cp_data                 => cmd_mux_005_src_data,                             --                .data
			cp_startofpacket        => cmd_mux_005_src_startofpacket,                    --                .startofpacket
			cp_endofpacket          => cmd_mux_005_src_endofpacket,                      --                .endofpacket
			cp_channel              => cmd_mux_005_src_channel,                          --                .channel
			rf_sink_ready           => timer_0_s1_agent_rsp_fifo_out_ready,              --         rf_sink.ready
			rf_sink_valid           => timer_0_s1_agent_rsp_fifo_out_valid,              --                .valid
			rf_sink_startofpacket   => timer_0_s1_agent_rsp_fifo_out_startofpacket,      --                .startofpacket
			rf_sink_endofpacket     => timer_0_s1_agent_rsp_fifo_out_endofpacket,        --                .endofpacket
			rf_sink_data            => timer_0_s1_agent_rsp_fifo_out_data,               --                .data
			rf_source_ready         => timer_0_s1_agent_rf_source_ready,                 --       rf_source.ready
			rf_source_valid         => timer_0_s1_agent_rf_source_valid,                 --                .valid
			rf_source_startofpacket => timer_0_s1_agent_rf_source_startofpacket,         --                .startofpacket
			rf_source_endofpacket   => timer_0_s1_agent_rf_source_endofpacket,           --                .endofpacket
			rf_source_data          => timer_0_s1_agent_rf_source_data,                  --                .data
			rdata_fifo_sink_ready   => timer_0_s1_agent_rdata_fifo_src_ready,            -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => timer_0_s1_agent_rdata_fifo_src_valid,            --                .valid
			rdata_fifo_sink_data    => timer_0_s1_agent_rdata_fifo_src_data,             --                .data
			rdata_fifo_src_ready    => timer_0_s1_agent_rdata_fifo_src_ready,            --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => timer_0_s1_agent_rdata_fifo_src_valid,            --                .valid
			rdata_fifo_src_data     => timer_0_s1_agent_rdata_fifo_src_data,             --                .data
			m0_response             => "00",                                             --     (terminated)
			m0_writeresponsevalid   => '0'                                               --     (terminated)
		);

	timer_0_s1_agent_rsp_fifo : component crypto_test_mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo
		port map (
			clk               => clk_clk_clk,                                      --       clk.clk
			reset             => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			in_data           => timer_0_s1_agent_rf_source_data,                  --        in.data
			in_valid          => timer_0_s1_agent_rf_source_valid,                 --          .valid
			in_ready          => timer_0_s1_agent_rf_source_ready,                 --          .ready
			in_startofpacket  => timer_0_s1_agent_rf_source_startofpacket,         --          .startofpacket
			in_endofpacket    => timer_0_s1_agent_rf_source_endofpacket,           --          .endofpacket
			out_data          => timer_0_s1_agent_rsp_fifo_out_data,               --       out.data
			out_valid         => timer_0_s1_agent_rsp_fifo_out_valid,              --          .valid
			out_ready         => timer_0_s1_agent_rsp_fifo_out_ready,              --          .ready
			out_startofpacket => timer_0_s1_agent_rsp_fifo_out_startofpacket,      --          .startofpacket
			out_endofpacket   => timer_0_s1_agent_rsp_fifo_out_endofpacket         --          .endofpacket
		);

	stack_heap_s1_agent : component altera_merlin_slave_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 109,
			PKT_ORI_BURST_SIZE_L      => 107,
			PKT_RESPONSE_STATUS_H     => 106,
			PKT_RESPONSE_STATUS_L     => 105,
			PKT_BURST_SIZE_H          => 82,
			PKT_BURST_SIZE_L          => 80,
			PKT_TRANS_LOCK            => 72,
			PKT_BEGIN_BURST           => 87,
			PKT_PROTECTION_H          => 100,
			PKT_PROTECTION_L          => 98,
			PKT_BURSTWRAP_H           => 79,
			PKT_BURSTWRAP_L           => 77,
			PKT_BYTE_CNT_H            => 76,
			PKT_BYTE_CNT_L            => 74,
			PKT_ADDR_H                => 67,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 68,
			PKT_TRANS_POSTED          => 69,
			PKT_TRANS_WRITE           => 70,
			PKT_TRANS_READ            => 71,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 92,
			PKT_SRC_ID_L              => 89,
			PKT_DEST_ID_H             => 96,
			PKT_DEST_ID_L             => 93,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 10,
			ST_DATA_W                 => 110,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                     => clk_clk_clk,                                      --             clk.clk
			reset                   => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, --       clk_reset.reset
			m0_address              => stack_heap_s1_agent_m0_address,                   --              m0.address
			m0_burstcount           => stack_heap_s1_agent_m0_burstcount,                --                .burstcount
			m0_byteenable           => stack_heap_s1_agent_m0_byteenable,                --                .byteenable
			m0_debugaccess          => stack_heap_s1_agent_m0_debugaccess,               --                .debugaccess
			m0_lock                 => stack_heap_s1_agent_m0_lock,                      --                .lock
			m0_readdata             => stack_heap_s1_agent_m0_readdata,                  --                .readdata
			m0_readdatavalid        => stack_heap_s1_agent_m0_readdatavalid,             --                .readdatavalid
			m0_read                 => stack_heap_s1_agent_m0_read,                      --                .read
			m0_waitrequest          => stack_heap_s1_agent_m0_waitrequest,               --                .waitrequest
			m0_writedata            => stack_heap_s1_agent_m0_writedata,                 --                .writedata
			m0_write                => stack_heap_s1_agent_m0_write,                     --                .write
			rp_endofpacket          => stack_heap_s1_agent_rp_endofpacket,               --              rp.endofpacket
			rp_ready                => stack_heap_s1_agent_rp_ready,                     --                .ready
			rp_valid                => stack_heap_s1_agent_rp_valid,                     --                .valid
			rp_data                 => stack_heap_s1_agent_rp_data,                      --                .data
			rp_startofpacket        => stack_heap_s1_agent_rp_startofpacket,             --                .startofpacket
			cp_ready                => cmd_mux_006_src_ready,                            --              cp.ready
			cp_valid                => cmd_mux_006_src_valid,                            --                .valid
			cp_data                 => cmd_mux_006_src_data,                             --                .data
			cp_startofpacket        => cmd_mux_006_src_startofpacket,                    --                .startofpacket
			cp_endofpacket          => cmd_mux_006_src_endofpacket,                      --                .endofpacket
			cp_channel              => cmd_mux_006_src_channel,                          --                .channel
			rf_sink_ready           => stack_heap_s1_agent_rsp_fifo_out_ready,           --         rf_sink.ready
			rf_sink_valid           => stack_heap_s1_agent_rsp_fifo_out_valid,           --                .valid
			rf_sink_startofpacket   => stack_heap_s1_agent_rsp_fifo_out_startofpacket,   --                .startofpacket
			rf_sink_endofpacket     => stack_heap_s1_agent_rsp_fifo_out_endofpacket,     --                .endofpacket
			rf_sink_data            => stack_heap_s1_agent_rsp_fifo_out_data,            --                .data
			rf_source_ready         => stack_heap_s1_agent_rf_source_ready,              --       rf_source.ready
			rf_source_valid         => stack_heap_s1_agent_rf_source_valid,              --                .valid
			rf_source_startofpacket => stack_heap_s1_agent_rf_source_startofpacket,      --                .startofpacket
			rf_source_endofpacket   => stack_heap_s1_agent_rf_source_endofpacket,        --                .endofpacket
			rf_source_data          => stack_heap_s1_agent_rf_source_data,               --                .data
			rdata_fifo_sink_ready   => stack_heap_s1_agent_rdata_fifo_src_ready,         -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => stack_heap_s1_agent_rdata_fifo_src_valid,         --                .valid
			rdata_fifo_sink_data    => stack_heap_s1_agent_rdata_fifo_src_data,          --                .data
			rdata_fifo_src_ready    => stack_heap_s1_agent_rdata_fifo_src_ready,         --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => stack_heap_s1_agent_rdata_fifo_src_valid,         --                .valid
			rdata_fifo_src_data     => stack_heap_s1_agent_rdata_fifo_src_data,          --                .data
			m0_response             => "00",                                             --     (terminated)
			m0_writeresponsevalid   => '0'                                               --     (terminated)
		);

	stack_heap_s1_agent_rsp_fifo : component crypto_test_mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo
		port map (
			clk               => clk_clk_clk,                                      --       clk.clk
			reset             => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			in_data           => stack_heap_s1_agent_rf_source_data,               --        in.data
			in_valid          => stack_heap_s1_agent_rf_source_valid,              --          .valid
			in_ready          => stack_heap_s1_agent_rf_source_ready,              --          .ready
			in_startofpacket  => stack_heap_s1_agent_rf_source_startofpacket,      --          .startofpacket
			in_endofpacket    => stack_heap_s1_agent_rf_source_endofpacket,        --          .endofpacket
			out_data          => stack_heap_s1_agent_rsp_fifo_out_data,            --       out.data
			out_valid         => stack_heap_s1_agent_rsp_fifo_out_valid,           --          .valid
			out_ready         => stack_heap_s1_agent_rsp_fifo_out_ready,           --          .ready
			out_startofpacket => stack_heap_s1_agent_rsp_fifo_out_startofpacket,   --          .startofpacket
			out_endofpacket   => stack_heap_s1_agent_rsp_fifo_out_endofpacket      --          .endofpacket
		);

	incoming_memory_s1_agent : component altera_merlin_slave_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 109,
			PKT_ORI_BURST_SIZE_L      => 107,
			PKT_RESPONSE_STATUS_H     => 106,
			PKT_RESPONSE_STATUS_L     => 105,
			PKT_BURST_SIZE_H          => 82,
			PKT_BURST_SIZE_L          => 80,
			PKT_TRANS_LOCK            => 72,
			PKT_BEGIN_BURST           => 87,
			PKT_PROTECTION_H          => 100,
			PKT_PROTECTION_L          => 98,
			PKT_BURSTWRAP_H           => 79,
			PKT_BURSTWRAP_L           => 77,
			PKT_BYTE_CNT_H            => 76,
			PKT_BYTE_CNT_L            => 74,
			PKT_ADDR_H                => 67,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 68,
			PKT_TRANS_POSTED          => 69,
			PKT_TRANS_WRITE           => 70,
			PKT_TRANS_READ            => 71,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 92,
			PKT_SRC_ID_L              => 89,
			PKT_DEST_ID_H             => 96,
			PKT_DEST_ID_L             => 93,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 10,
			ST_DATA_W                 => 110,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                     => clk_clk_clk,                                         --             clk.clk
			reset                   => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,    --       clk_reset.reset
			m0_address              => incoming_memory_s1_agent_m0_address,                 --              m0.address
			m0_burstcount           => incoming_memory_s1_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => incoming_memory_s1_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => incoming_memory_s1_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => incoming_memory_s1_agent_m0_lock,                    --                .lock
			m0_readdata             => incoming_memory_s1_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => incoming_memory_s1_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => incoming_memory_s1_agent_m0_read,                    --                .read
			m0_waitrequest          => incoming_memory_s1_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => incoming_memory_s1_agent_m0_writedata,               --                .writedata
			m0_write                => incoming_memory_s1_agent_m0_write,                   --                .write
			rp_endofpacket          => incoming_memory_s1_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => incoming_memory_s1_agent_rp_ready,                   --                .ready
			rp_valid                => incoming_memory_s1_agent_rp_valid,                   --                .valid
			rp_data                 => incoming_memory_s1_agent_rp_data,                    --                .data
			rp_startofpacket        => incoming_memory_s1_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_007_src_ready,                               --              cp.ready
			cp_valid                => cmd_mux_007_src_valid,                               --                .valid
			cp_data                 => cmd_mux_007_src_data,                                --                .data
			cp_startofpacket        => cmd_mux_007_src_startofpacket,                       --                .startofpacket
			cp_endofpacket          => cmd_mux_007_src_endofpacket,                         --                .endofpacket
			cp_channel              => cmd_mux_007_src_channel,                             --                .channel
			rf_sink_ready           => incoming_memory_s1_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => incoming_memory_s1_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => incoming_memory_s1_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => incoming_memory_s1_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => incoming_memory_s1_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => incoming_memory_s1_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => incoming_memory_s1_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => incoming_memory_s1_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => incoming_memory_s1_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => incoming_memory_s1_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => incoming_memory_s1_agent_rdata_fifo_src_ready,       -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => incoming_memory_s1_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_sink_data    => incoming_memory_s1_agent_rdata_fifo_src_data,        --                .data
			rdata_fifo_src_ready    => incoming_memory_s1_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => incoming_memory_s1_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => incoming_memory_s1_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                                --     (terminated)
			m0_writeresponsevalid   => '0'                                                  --     (terminated)
		);

	incoming_memory_s1_agent_rsp_fifo : component crypto_test_mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo
		port map (
			clk               => clk_clk_clk,                                         --       clk.clk
			reset             => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,    -- clk_reset.reset
			in_data           => incoming_memory_s1_agent_rf_source_data,             --        in.data
			in_valid          => incoming_memory_s1_agent_rf_source_valid,            --          .valid
			in_ready          => incoming_memory_s1_agent_rf_source_ready,            --          .ready
			in_startofpacket  => incoming_memory_s1_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => incoming_memory_s1_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => incoming_memory_s1_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => incoming_memory_s1_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => incoming_memory_s1_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => incoming_memory_s1_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => incoming_memory_s1_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	outgoing_memory_s1_agent : component altera_merlin_slave_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 109,
			PKT_ORI_BURST_SIZE_L      => 107,
			PKT_RESPONSE_STATUS_H     => 106,
			PKT_RESPONSE_STATUS_L     => 105,
			PKT_BURST_SIZE_H          => 82,
			PKT_BURST_SIZE_L          => 80,
			PKT_TRANS_LOCK            => 72,
			PKT_BEGIN_BURST           => 87,
			PKT_PROTECTION_H          => 100,
			PKT_PROTECTION_L          => 98,
			PKT_BURSTWRAP_H           => 79,
			PKT_BURSTWRAP_L           => 77,
			PKT_BYTE_CNT_H            => 76,
			PKT_BYTE_CNT_L            => 74,
			PKT_ADDR_H                => 67,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 68,
			PKT_TRANS_POSTED          => 69,
			PKT_TRANS_WRITE           => 70,
			PKT_TRANS_READ            => 71,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 92,
			PKT_SRC_ID_L              => 89,
			PKT_DEST_ID_H             => 96,
			PKT_DEST_ID_L             => 93,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 10,
			ST_DATA_W                 => 110,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                     => clk_clk_clk,                                         --             clk.clk
			reset                   => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,    --       clk_reset.reset
			m0_address              => outgoing_memory_s1_agent_m0_address,                 --              m0.address
			m0_burstcount           => outgoing_memory_s1_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => outgoing_memory_s1_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => outgoing_memory_s1_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => outgoing_memory_s1_agent_m0_lock,                    --                .lock
			m0_readdata             => outgoing_memory_s1_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => outgoing_memory_s1_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => outgoing_memory_s1_agent_m0_read,                    --                .read
			m0_waitrequest          => outgoing_memory_s1_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => outgoing_memory_s1_agent_m0_writedata,               --                .writedata
			m0_write                => outgoing_memory_s1_agent_m0_write,                   --                .write
			rp_endofpacket          => outgoing_memory_s1_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => outgoing_memory_s1_agent_rp_ready,                   --                .ready
			rp_valid                => outgoing_memory_s1_agent_rp_valid,                   --                .valid
			rp_data                 => outgoing_memory_s1_agent_rp_data,                    --                .data
			rp_startofpacket        => outgoing_memory_s1_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_008_src_ready,                               --              cp.ready
			cp_valid                => cmd_mux_008_src_valid,                               --                .valid
			cp_data                 => cmd_mux_008_src_data,                                --                .data
			cp_startofpacket        => cmd_mux_008_src_startofpacket,                       --                .startofpacket
			cp_endofpacket          => cmd_mux_008_src_endofpacket,                         --                .endofpacket
			cp_channel              => cmd_mux_008_src_channel,                             --                .channel
			rf_sink_ready           => outgoing_memory_s1_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => outgoing_memory_s1_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => outgoing_memory_s1_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => outgoing_memory_s1_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => outgoing_memory_s1_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => outgoing_memory_s1_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => outgoing_memory_s1_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => outgoing_memory_s1_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => outgoing_memory_s1_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => outgoing_memory_s1_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => outgoing_memory_s1_agent_rdata_fifo_src_ready,       -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => outgoing_memory_s1_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_sink_data    => outgoing_memory_s1_agent_rdata_fifo_src_data,        --                .data
			rdata_fifo_src_ready    => outgoing_memory_s1_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => outgoing_memory_s1_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => outgoing_memory_s1_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                                --     (terminated)
			m0_writeresponsevalid   => '0'                                                  --     (terminated)
		);

	outgoing_memory_s1_agent_rsp_fifo : component crypto_test_mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo
		port map (
			clk               => clk_clk_clk,                                         --       clk.clk
			reset             => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,    -- clk_reset.reset
			in_data           => outgoing_memory_s1_agent_rf_source_data,             --        in.data
			in_valid          => outgoing_memory_s1_agent_rf_source_valid,            --          .valid
			in_ready          => outgoing_memory_s1_agent_rf_source_ready,            --          .ready
			in_startofpacket  => outgoing_memory_s1_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => outgoing_memory_s1_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => outgoing_memory_s1_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => outgoing_memory_s1_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => outgoing_memory_s1_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => outgoing_memory_s1_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => outgoing_memory_s1_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	timestamp_timer_s1_agent : component altera_merlin_slave_agent
		generic map (
			PKT_ORI_BURST_SIZE_H      => 109,
			PKT_ORI_BURST_SIZE_L      => 107,
			PKT_RESPONSE_STATUS_H     => 106,
			PKT_RESPONSE_STATUS_L     => 105,
			PKT_BURST_SIZE_H          => 82,
			PKT_BURST_SIZE_L          => 80,
			PKT_TRANS_LOCK            => 72,
			PKT_BEGIN_BURST           => 87,
			PKT_PROTECTION_H          => 100,
			PKT_PROTECTION_L          => 98,
			PKT_BURSTWRAP_H           => 79,
			PKT_BURSTWRAP_L           => 77,
			PKT_BYTE_CNT_H            => 76,
			PKT_BYTE_CNT_L            => 74,
			PKT_ADDR_H                => 67,
			PKT_ADDR_L                => 36,
			PKT_TRANS_COMPRESSED_READ => 68,
			PKT_TRANS_POSTED          => 69,
			PKT_TRANS_WRITE           => 70,
			PKT_TRANS_READ            => 71,
			PKT_DATA_H                => 31,
			PKT_DATA_L                => 0,
			PKT_BYTEEN_H              => 35,
			PKT_BYTEEN_L              => 32,
			PKT_SRC_ID_H              => 92,
			PKT_SRC_ID_L              => 89,
			PKT_DEST_ID_H             => 96,
			PKT_DEST_ID_L             => 93,
			PKT_SYMBOL_W              => 8,
			ST_CHANNEL_W              => 10,
			ST_DATA_W                 => 110,
			AVS_BURSTCOUNT_W          => 3,
			SUPPRESS_0_BYTEEN_CMD     => 0,
			PREVENT_FIFO_OVERFLOW     => 1,
			USE_READRESPONSE          => 0,
			USE_WRITERESPONSE         => 0
		)
		port map (
			clk                     => clk_clk_clk,                                         --             clk.clk
			reset                   => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,    --       clk_reset.reset
			m0_address              => timestamp_timer_s1_agent_m0_address,                 --              m0.address
			m0_burstcount           => timestamp_timer_s1_agent_m0_burstcount,              --                .burstcount
			m0_byteenable           => timestamp_timer_s1_agent_m0_byteenable,              --                .byteenable
			m0_debugaccess          => timestamp_timer_s1_agent_m0_debugaccess,             --                .debugaccess
			m0_lock                 => timestamp_timer_s1_agent_m0_lock,                    --                .lock
			m0_readdata             => timestamp_timer_s1_agent_m0_readdata,                --                .readdata
			m0_readdatavalid        => timestamp_timer_s1_agent_m0_readdatavalid,           --                .readdatavalid
			m0_read                 => timestamp_timer_s1_agent_m0_read,                    --                .read
			m0_waitrequest          => timestamp_timer_s1_agent_m0_waitrequest,             --                .waitrequest
			m0_writedata            => timestamp_timer_s1_agent_m0_writedata,               --                .writedata
			m0_write                => timestamp_timer_s1_agent_m0_write,                   --                .write
			rp_endofpacket          => timestamp_timer_s1_agent_rp_endofpacket,             --              rp.endofpacket
			rp_ready                => timestamp_timer_s1_agent_rp_ready,                   --                .ready
			rp_valid                => timestamp_timer_s1_agent_rp_valid,                   --                .valid
			rp_data                 => timestamp_timer_s1_agent_rp_data,                    --                .data
			rp_startofpacket        => timestamp_timer_s1_agent_rp_startofpacket,           --                .startofpacket
			cp_ready                => cmd_mux_009_src_ready,                               --              cp.ready
			cp_valid                => cmd_mux_009_src_valid,                               --                .valid
			cp_data                 => cmd_mux_009_src_data,                                --                .data
			cp_startofpacket        => cmd_mux_009_src_startofpacket,                       --                .startofpacket
			cp_endofpacket          => cmd_mux_009_src_endofpacket,                         --                .endofpacket
			cp_channel              => cmd_mux_009_src_channel,                             --                .channel
			rf_sink_ready           => timestamp_timer_s1_agent_rsp_fifo_out_ready,         --         rf_sink.ready
			rf_sink_valid           => timestamp_timer_s1_agent_rsp_fifo_out_valid,         --                .valid
			rf_sink_startofpacket   => timestamp_timer_s1_agent_rsp_fifo_out_startofpacket, --                .startofpacket
			rf_sink_endofpacket     => timestamp_timer_s1_agent_rsp_fifo_out_endofpacket,   --                .endofpacket
			rf_sink_data            => timestamp_timer_s1_agent_rsp_fifo_out_data,          --                .data
			rf_source_ready         => timestamp_timer_s1_agent_rf_source_ready,            --       rf_source.ready
			rf_source_valid         => timestamp_timer_s1_agent_rf_source_valid,            --                .valid
			rf_source_startofpacket => timestamp_timer_s1_agent_rf_source_startofpacket,    --                .startofpacket
			rf_source_endofpacket   => timestamp_timer_s1_agent_rf_source_endofpacket,      --                .endofpacket
			rf_source_data          => timestamp_timer_s1_agent_rf_source_data,             --                .data
			rdata_fifo_sink_ready   => timestamp_timer_s1_agent_rdata_fifo_src_ready,       -- rdata_fifo_sink.ready
			rdata_fifo_sink_valid   => timestamp_timer_s1_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_sink_data    => timestamp_timer_s1_agent_rdata_fifo_src_data,        --                .data
			rdata_fifo_src_ready    => timestamp_timer_s1_agent_rdata_fifo_src_ready,       --  rdata_fifo_src.ready
			rdata_fifo_src_valid    => timestamp_timer_s1_agent_rdata_fifo_src_valid,       --                .valid
			rdata_fifo_src_data     => timestamp_timer_s1_agent_rdata_fifo_src_data,        --                .data
			m0_response             => "00",                                                --     (terminated)
			m0_writeresponsevalid   => '0'                                                  --     (terminated)
		);

	timestamp_timer_s1_agent_rsp_fifo : component crypto_test_mm_interconnect_0_jtag_uart_0_avalon_jtag_slave_agent_rsp_fifo
		port map (
			clk               => clk_clk_clk,                                         --       clk.clk
			reset             => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,    -- clk_reset.reset
			in_data           => timestamp_timer_s1_agent_rf_source_data,             --        in.data
			in_valid          => timestamp_timer_s1_agent_rf_source_valid,            --          .valid
			in_ready          => timestamp_timer_s1_agent_rf_source_ready,            --          .ready
			in_startofpacket  => timestamp_timer_s1_agent_rf_source_startofpacket,    --          .startofpacket
			in_endofpacket    => timestamp_timer_s1_agent_rf_source_endofpacket,      --          .endofpacket
			out_data          => timestamp_timer_s1_agent_rsp_fifo_out_data,          --       out.data
			out_valid         => timestamp_timer_s1_agent_rsp_fifo_out_valid,         --          .valid
			out_ready         => timestamp_timer_s1_agent_rsp_fifo_out_ready,         --          .ready
			out_startofpacket => timestamp_timer_s1_agent_rsp_fifo_out_startofpacket, --          .startofpacket
			out_endofpacket   => timestamp_timer_s1_agent_rsp_fifo_out_endofpacket    --          .endofpacket
		);

	router : component crypto_test_mm_interconnect_0_router
		port map (
			sink_ready         => nios2_qsys_0_data_master_agent_cp_ready,          --      sink.ready
			sink_valid         => nios2_qsys_0_data_master_agent_cp_valid,          --          .valid
			sink_data          => nios2_qsys_0_data_master_agent_cp_data,           --          .data
			sink_startofpacket => nios2_qsys_0_data_master_agent_cp_startofpacket,  --          .startofpacket
			sink_endofpacket   => nios2_qsys_0_data_master_agent_cp_endofpacket,    --          .endofpacket
			clk                => clk_clk_clk,                                      --       clk.clk
			reset              => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_src_ready,                                 --       src.ready
			src_valid          => router_src_valid,                                 --          .valid
			src_data           => router_src_data,                                  --          .data
			src_channel        => router_src_channel,                               --          .channel
			src_startofpacket  => router_src_startofpacket,                         --          .startofpacket
			src_endofpacket    => router_src_endofpacket                            --          .endofpacket
		);

	router_001 : component crypto_test_mm_interconnect_0_router_001
		port map (
			sink_ready         => crypto_module_read_master_agent_cp_ready,         --      sink.ready
			sink_valid         => crypto_module_read_master_agent_cp_valid,         --          .valid
			sink_data          => crypto_module_read_master_agent_cp_data,          --          .data
			sink_startofpacket => crypto_module_read_master_agent_cp_startofpacket, --          .startofpacket
			sink_endofpacket   => crypto_module_read_master_agent_cp_endofpacket,   --          .endofpacket
			clk                => clk_clk_clk,                                      --       clk.clk
			reset              => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_001_src_ready,                             --       src.ready
			src_valid          => router_001_src_valid,                             --          .valid
			src_data           => router_001_src_data,                              --          .data
			src_channel        => router_001_src_channel,                           --          .channel
			src_startofpacket  => router_001_src_startofpacket,                     --          .startofpacket
			src_endofpacket    => router_001_src_endofpacket                        --          .endofpacket
		);

	router_002 : component crypto_test_mm_interconnect_0_router_001
		port map (
			sink_ready         => crypto_module_write_master_agent_cp_ready,         --      sink.ready
			sink_valid         => crypto_module_write_master_agent_cp_valid,         --          .valid
			sink_data          => crypto_module_write_master_agent_cp_data,          --          .data
			sink_startofpacket => crypto_module_write_master_agent_cp_startofpacket, --          .startofpacket
			sink_endofpacket   => crypto_module_write_master_agent_cp_endofpacket,   --          .endofpacket
			clk                => clk_clk_clk,                                       --       clk.clk
			reset              => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,  -- clk_reset.reset
			src_ready          => router_002_src_ready,                              --       src.ready
			src_valid          => router_002_src_valid,                              --          .valid
			src_data           => router_002_src_data,                               --          .data
			src_channel        => router_002_src_channel,                            --          .channel
			src_startofpacket  => router_002_src_startofpacket,                      --          .startofpacket
			src_endofpacket    => router_002_src_endofpacket                         --          .endofpacket
		);

	router_003 : component crypto_test_mm_interconnect_0_router_003
		port map (
			sink_ready         => nios2_qsys_0_instruction_master_agent_cp_ready,         --      sink.ready
			sink_valid         => nios2_qsys_0_instruction_master_agent_cp_valid,         --          .valid
			sink_data          => nios2_qsys_0_instruction_master_agent_cp_data,          --          .data
			sink_startofpacket => nios2_qsys_0_instruction_master_agent_cp_startofpacket, --          .startofpacket
			sink_endofpacket   => nios2_qsys_0_instruction_master_agent_cp_endofpacket,   --          .endofpacket
			clk                => clk_clk_clk,                                            --       clk.clk
			reset              => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,       -- clk_reset.reset
			src_ready          => router_003_src_ready,                                   --       src.ready
			src_valid          => router_003_src_valid,                                   --          .valid
			src_data           => router_003_src_data,                                    --          .data
			src_channel        => router_003_src_channel,                                 --          .channel
			src_startofpacket  => router_003_src_startofpacket,                           --          .startofpacket
			src_endofpacket    => router_003_src_endofpacket                              --          .endofpacket
		);

	router_004 : component crypto_test_mm_interconnect_0_router_004
		port map (
			sink_ready         => jtag_uart_0_avalon_jtag_slave_agent_rp_ready,         --      sink.ready
			sink_valid         => jtag_uart_0_avalon_jtag_slave_agent_rp_valid,         --          .valid
			sink_data          => jtag_uart_0_avalon_jtag_slave_agent_rp_data,          --          .data
			sink_startofpacket => jtag_uart_0_avalon_jtag_slave_agent_rp_startofpacket, --          .startofpacket
			sink_endofpacket   => jtag_uart_0_avalon_jtag_slave_agent_rp_endofpacket,   --          .endofpacket
			clk                => clk_clk_clk,                                          --       clk.clk
			reset              => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,     -- clk_reset.reset
			src_ready          => router_004_src_ready,                                 --       src.ready
			src_valid          => router_004_src_valid,                                 --          .valid
			src_data           => router_004_src_data,                                  --          .data
			src_channel        => router_004_src_channel,                               --          .channel
			src_startofpacket  => router_004_src_startofpacket,                         --          .startofpacket
			src_endofpacket    => router_004_src_endofpacket                            --          .endofpacket
		);

	router_005 : component crypto_test_mm_interconnect_0_router_004
		port map (
			sink_ready         => sysid_qsys_0_control_slave_agent_rp_ready,         --      sink.ready
			sink_valid         => sysid_qsys_0_control_slave_agent_rp_valid,         --          .valid
			sink_data          => sysid_qsys_0_control_slave_agent_rp_data,          --          .data
			sink_startofpacket => sysid_qsys_0_control_slave_agent_rp_startofpacket, --          .startofpacket
			sink_endofpacket   => sysid_qsys_0_control_slave_agent_rp_endofpacket,   --          .endofpacket
			clk                => clk_clk_clk,                                       --       clk.clk
			reset              => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,  -- clk_reset.reset
			src_ready          => router_005_src_ready,                              --       src.ready
			src_valid          => router_005_src_valid,                              --          .valid
			src_data           => router_005_src_data,                               --          .data
			src_channel        => router_005_src_channel,                            --          .channel
			src_startofpacket  => router_005_src_startofpacket,                      --          .startofpacket
			src_endofpacket    => router_005_src_endofpacket                         --          .endofpacket
		);

	router_006 : component crypto_test_mm_interconnect_0_router_004
		port map (
			sink_ready         => crypto_module_csr_agent_rp_ready,                 --      sink.ready
			sink_valid         => crypto_module_csr_agent_rp_valid,                 --          .valid
			sink_data          => crypto_module_csr_agent_rp_data,                  --          .data
			sink_startofpacket => crypto_module_csr_agent_rp_startofpacket,         --          .startofpacket
			sink_endofpacket   => crypto_module_csr_agent_rp_endofpacket,           --          .endofpacket
			clk                => clk_clk_clk,                                      --       clk.clk
			reset              => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_006_src_ready,                             --       src.ready
			src_valid          => router_006_src_valid,                             --          .valid
			src_data           => router_006_src_data,                              --          .data
			src_channel        => router_006_src_channel,                           --          .channel
			src_startofpacket  => router_006_src_startofpacket,                     --          .startofpacket
			src_endofpacket    => router_006_src_endofpacket                        --          .endofpacket
		);

	router_007 : component crypto_test_mm_interconnect_0_router_007
		port map (
			sink_ready         => nios2_qsys_0_jtag_debug_module_agent_rp_ready,         --      sink.ready
			sink_valid         => nios2_qsys_0_jtag_debug_module_agent_rp_valid,         --          .valid
			sink_data          => nios2_qsys_0_jtag_debug_module_agent_rp_data,          --          .data
			sink_startofpacket => nios2_qsys_0_jtag_debug_module_agent_rp_startofpacket, --          .startofpacket
			sink_endofpacket   => nios2_qsys_0_jtag_debug_module_agent_rp_endofpacket,   --          .endofpacket
			clk                => clk_clk_clk,                                           --       clk.clk
			reset              => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset,      -- clk_reset.reset
			src_ready          => router_007_src_ready,                                  --       src.ready
			src_valid          => router_007_src_valid,                                  --          .valid
			src_data           => router_007_src_data,                                   --          .data
			src_channel        => router_007_src_channel,                                --          .channel
			src_startofpacket  => router_007_src_startofpacket,                          --          .startofpacket
			src_endofpacket    => router_007_src_endofpacket                             --          .endofpacket
		);

	router_008 : component crypto_test_mm_interconnect_0_router_007
		port map (
			sink_ready         => instruction_memory_s1_agent_rp_ready,             --      sink.ready
			sink_valid         => instruction_memory_s1_agent_rp_valid,             --          .valid
			sink_data          => instruction_memory_s1_agent_rp_data,              --          .data
			sink_startofpacket => instruction_memory_s1_agent_rp_startofpacket,     --          .startofpacket
			sink_endofpacket   => instruction_memory_s1_agent_rp_endofpacket,       --          .endofpacket
			clk                => clk_clk_clk,                                      --       clk.clk
			reset              => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_008_src_ready,                             --       src.ready
			src_valid          => router_008_src_valid,                             --          .valid
			src_data           => router_008_src_data,                              --          .data
			src_channel        => router_008_src_channel,                           --          .channel
			src_startofpacket  => router_008_src_startofpacket,                     --          .startofpacket
			src_endofpacket    => router_008_src_endofpacket                        --          .endofpacket
		);

	router_009 : component crypto_test_mm_interconnect_0_router_004
		port map (
			sink_ready         => timer_0_s1_agent_rp_ready,                        --      sink.ready
			sink_valid         => timer_0_s1_agent_rp_valid,                        --          .valid
			sink_data          => timer_0_s1_agent_rp_data,                         --          .data
			sink_startofpacket => timer_0_s1_agent_rp_startofpacket,                --          .startofpacket
			sink_endofpacket   => timer_0_s1_agent_rp_endofpacket,                  --          .endofpacket
			clk                => clk_clk_clk,                                      --       clk.clk
			reset              => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_009_src_ready,                             --       src.ready
			src_valid          => router_009_src_valid,                             --          .valid
			src_data           => router_009_src_data,                              --          .data
			src_channel        => router_009_src_channel,                           --          .channel
			src_startofpacket  => router_009_src_startofpacket,                     --          .startofpacket
			src_endofpacket    => router_009_src_endofpacket                        --          .endofpacket
		);

	router_010 : component crypto_test_mm_interconnect_0_router_004
		port map (
			sink_ready         => stack_heap_s1_agent_rp_ready,                     --      sink.ready
			sink_valid         => stack_heap_s1_agent_rp_valid,                     --          .valid
			sink_data          => stack_heap_s1_agent_rp_data,                      --          .data
			sink_startofpacket => stack_heap_s1_agent_rp_startofpacket,             --          .startofpacket
			sink_endofpacket   => stack_heap_s1_agent_rp_endofpacket,               --          .endofpacket
			clk                => clk_clk_clk,                                      --       clk.clk
			reset              => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_010_src_ready,                             --       src.ready
			src_valid          => router_010_src_valid,                             --          .valid
			src_data           => router_010_src_data,                              --          .data
			src_channel        => router_010_src_channel,                           --          .channel
			src_startofpacket  => router_010_src_startofpacket,                     --          .startofpacket
			src_endofpacket    => router_010_src_endofpacket                        --          .endofpacket
		);

	router_011 : component crypto_test_mm_interconnect_0_router_011
		port map (
			sink_ready         => incoming_memory_s1_agent_rp_ready,                --      sink.ready
			sink_valid         => incoming_memory_s1_agent_rp_valid,                --          .valid
			sink_data          => incoming_memory_s1_agent_rp_data,                 --          .data
			sink_startofpacket => incoming_memory_s1_agent_rp_startofpacket,        --          .startofpacket
			sink_endofpacket   => incoming_memory_s1_agent_rp_endofpacket,          --          .endofpacket
			clk                => clk_clk_clk,                                      --       clk.clk
			reset              => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_011_src_ready,                             --       src.ready
			src_valid          => router_011_src_valid,                             --          .valid
			src_data           => router_011_src_data,                              --          .data
			src_channel        => router_011_src_channel,                           --          .channel
			src_startofpacket  => router_011_src_startofpacket,                     --          .startofpacket
			src_endofpacket    => router_011_src_endofpacket                        --          .endofpacket
		);

	router_012 : component crypto_test_mm_interconnect_0_router_011
		port map (
			sink_ready         => outgoing_memory_s1_agent_rp_ready,                --      sink.ready
			sink_valid         => outgoing_memory_s1_agent_rp_valid,                --          .valid
			sink_data          => outgoing_memory_s1_agent_rp_data,                 --          .data
			sink_startofpacket => outgoing_memory_s1_agent_rp_startofpacket,        --          .startofpacket
			sink_endofpacket   => outgoing_memory_s1_agent_rp_endofpacket,          --          .endofpacket
			clk                => clk_clk_clk,                                      --       clk.clk
			reset              => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_012_src_ready,                             --       src.ready
			src_valid          => router_012_src_valid,                             --          .valid
			src_data           => router_012_src_data,                              --          .data
			src_channel        => router_012_src_channel,                           --          .channel
			src_startofpacket  => router_012_src_startofpacket,                     --          .startofpacket
			src_endofpacket    => router_012_src_endofpacket                        --          .endofpacket
		);

	router_013 : component crypto_test_mm_interconnect_0_router_004
		port map (
			sink_ready         => timestamp_timer_s1_agent_rp_ready,                --      sink.ready
			sink_valid         => timestamp_timer_s1_agent_rp_valid,                --          .valid
			sink_data          => timestamp_timer_s1_agent_rp_data,                 --          .data
			sink_startofpacket => timestamp_timer_s1_agent_rp_startofpacket,        --          .startofpacket
			sink_endofpacket   => timestamp_timer_s1_agent_rp_endofpacket,          --          .endofpacket
			clk                => clk_clk_clk,                                      --       clk.clk
			reset              => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready          => router_013_src_ready,                             --       src.ready
			src_valid          => router_013_src_valid,                             --          .valid
			src_data           => router_013_src_data,                              --          .data
			src_channel        => router_013_src_channel,                           --          .channel
			src_startofpacket  => router_013_src_startofpacket,                     --          .startofpacket
			src_endofpacket    => router_013_src_endofpacket                        --          .endofpacket
		);

	cmd_demux : component crypto_test_mm_interconnect_0_cmd_demux
		port map (
			clk                => clk_clk_clk,                                      --       clk.clk
			reset              => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_src_ready,                                 --      sink.ready
			sink_channel       => router_src_channel,                               --          .channel
			sink_data          => router_src_data,                                  --          .data
			sink_startofpacket => router_src_startofpacket,                         --          .startofpacket
			sink_endofpacket   => router_src_endofpacket,                           --          .endofpacket
			sink_valid(0)      => router_src_valid,                                 --          .valid
			src0_ready         => cmd_demux_src0_ready,                             --      src0.ready
			src0_valid         => cmd_demux_src0_valid,                             --          .valid
			src0_data          => cmd_demux_src0_data,                              --          .data
			src0_channel       => cmd_demux_src0_channel,                           --          .channel
			src0_startofpacket => cmd_demux_src0_startofpacket,                     --          .startofpacket
			src0_endofpacket   => cmd_demux_src0_endofpacket,                       --          .endofpacket
			src1_ready         => cmd_demux_src1_ready,                             --      src1.ready
			src1_valid         => cmd_demux_src1_valid,                             --          .valid
			src1_data          => cmd_demux_src1_data,                              --          .data
			src1_channel       => cmd_demux_src1_channel,                           --          .channel
			src1_startofpacket => cmd_demux_src1_startofpacket,                     --          .startofpacket
			src1_endofpacket   => cmd_demux_src1_endofpacket,                       --          .endofpacket
			src2_ready         => cmd_demux_src2_ready,                             --      src2.ready
			src2_valid         => cmd_demux_src2_valid,                             --          .valid
			src2_data          => cmd_demux_src2_data,                              --          .data
			src2_channel       => cmd_demux_src2_channel,                           --          .channel
			src2_startofpacket => cmd_demux_src2_startofpacket,                     --          .startofpacket
			src2_endofpacket   => cmd_demux_src2_endofpacket,                       --          .endofpacket
			src3_ready         => cmd_demux_src3_ready,                             --      src3.ready
			src3_valid         => cmd_demux_src3_valid,                             --          .valid
			src3_data          => cmd_demux_src3_data,                              --          .data
			src3_channel       => cmd_demux_src3_channel,                           --          .channel
			src3_startofpacket => cmd_demux_src3_startofpacket,                     --          .startofpacket
			src3_endofpacket   => cmd_demux_src3_endofpacket,                       --          .endofpacket
			src4_ready         => cmd_demux_src4_ready,                             --      src4.ready
			src4_valid         => cmd_demux_src4_valid,                             --          .valid
			src4_data          => cmd_demux_src4_data,                              --          .data
			src4_channel       => cmd_demux_src4_channel,                           --          .channel
			src4_startofpacket => cmd_demux_src4_startofpacket,                     --          .startofpacket
			src4_endofpacket   => cmd_demux_src4_endofpacket,                       --          .endofpacket
			src5_ready         => cmd_demux_src5_ready,                             --      src5.ready
			src5_valid         => cmd_demux_src5_valid,                             --          .valid
			src5_data          => cmd_demux_src5_data,                              --          .data
			src5_channel       => cmd_demux_src5_channel,                           --          .channel
			src5_startofpacket => cmd_demux_src5_startofpacket,                     --          .startofpacket
			src5_endofpacket   => cmd_demux_src5_endofpacket,                       --          .endofpacket
			src6_ready         => cmd_demux_src6_ready,                             --      src6.ready
			src6_valid         => cmd_demux_src6_valid,                             --          .valid
			src6_data          => cmd_demux_src6_data,                              --          .data
			src6_channel       => cmd_demux_src6_channel,                           --          .channel
			src6_startofpacket => cmd_demux_src6_startofpacket,                     --          .startofpacket
			src6_endofpacket   => cmd_demux_src6_endofpacket,                       --          .endofpacket
			src7_ready         => cmd_demux_src7_ready,                             --      src7.ready
			src7_valid         => cmd_demux_src7_valid,                             --          .valid
			src7_data          => cmd_demux_src7_data,                              --          .data
			src7_channel       => cmd_demux_src7_channel,                           --          .channel
			src7_startofpacket => cmd_demux_src7_startofpacket,                     --          .startofpacket
			src7_endofpacket   => cmd_demux_src7_endofpacket,                       --          .endofpacket
			src8_ready         => cmd_demux_src8_ready,                             --      src8.ready
			src8_valid         => cmd_demux_src8_valid,                             --          .valid
			src8_data          => cmd_demux_src8_data,                              --          .data
			src8_channel       => cmd_demux_src8_channel,                           --          .channel
			src8_startofpacket => cmd_demux_src8_startofpacket,                     --          .startofpacket
			src8_endofpacket   => cmd_demux_src8_endofpacket,                       --          .endofpacket
			src9_ready         => cmd_demux_src9_ready,                             --      src9.ready
			src9_valid         => cmd_demux_src9_valid,                             --          .valid
			src9_data          => cmd_demux_src9_data,                              --          .data
			src9_channel       => cmd_demux_src9_channel,                           --          .channel
			src9_startofpacket => cmd_demux_src9_startofpacket,                     --          .startofpacket
			src9_endofpacket   => cmd_demux_src9_endofpacket                        --          .endofpacket
		);

	cmd_demux_001 : component crypto_test_mm_interconnect_0_cmd_demux_001
		port map (
			clk                => clk_clk_clk,                                      --       clk.clk
			reset              => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_001_src_ready,                             --      sink.ready
			sink_channel       => router_001_src_channel,                           --          .channel
			sink_data          => router_001_src_data,                              --          .data
			sink_startofpacket => router_001_src_startofpacket,                     --          .startofpacket
			sink_endofpacket   => router_001_src_endofpacket,                       --          .endofpacket
			sink_valid(0)      => router_001_src_valid,                             --          .valid
			src0_ready         => cmd_demux_001_src0_ready,                         --      src0.ready
			src0_valid         => cmd_demux_001_src0_valid,                         --          .valid
			src0_data          => cmd_demux_001_src0_data,                          --          .data
			src0_channel       => cmd_demux_001_src0_channel,                       --          .channel
			src0_startofpacket => cmd_demux_001_src0_startofpacket,                 --          .startofpacket
			src0_endofpacket   => cmd_demux_001_src0_endofpacket,                   --          .endofpacket
			src1_ready         => cmd_demux_001_src1_ready,                         --      src1.ready
			src1_valid         => cmd_demux_001_src1_valid,                         --          .valid
			src1_data          => cmd_demux_001_src1_data,                          --          .data
			src1_channel       => cmd_demux_001_src1_channel,                       --          .channel
			src1_startofpacket => cmd_demux_001_src1_startofpacket,                 --          .startofpacket
			src1_endofpacket   => cmd_demux_001_src1_endofpacket                    --          .endofpacket
		);

	cmd_demux_002 : component crypto_test_mm_interconnect_0_cmd_demux_001
		port map (
			clk                => clk_clk_clk,                                      --       clk.clk
			reset              => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_002_src_ready,                             --      sink.ready
			sink_channel       => router_002_src_channel,                           --          .channel
			sink_data          => router_002_src_data,                              --          .data
			sink_startofpacket => router_002_src_startofpacket,                     --          .startofpacket
			sink_endofpacket   => router_002_src_endofpacket,                       --          .endofpacket
			sink_valid(0)      => router_002_src_valid,                             --          .valid
			src0_ready         => cmd_demux_002_src0_ready,                         --      src0.ready
			src0_valid         => cmd_demux_002_src0_valid,                         --          .valid
			src0_data          => cmd_demux_002_src0_data,                          --          .data
			src0_channel       => cmd_demux_002_src0_channel,                       --          .channel
			src0_startofpacket => cmd_demux_002_src0_startofpacket,                 --          .startofpacket
			src0_endofpacket   => cmd_demux_002_src0_endofpacket,                   --          .endofpacket
			src1_ready         => cmd_demux_002_src1_ready,                         --      src1.ready
			src1_valid         => cmd_demux_002_src1_valid,                         --          .valid
			src1_data          => cmd_demux_002_src1_data,                          --          .data
			src1_channel       => cmd_demux_002_src1_channel,                       --          .channel
			src1_startofpacket => cmd_demux_002_src1_startofpacket,                 --          .startofpacket
			src1_endofpacket   => cmd_demux_002_src1_endofpacket                    --          .endofpacket
		);

	cmd_demux_003 : component crypto_test_mm_interconnect_0_cmd_demux_001
		port map (
			clk                => clk_clk_clk,                                      --       clk.clk
			reset              => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_003_src_ready,                             --      sink.ready
			sink_channel       => router_003_src_channel,                           --          .channel
			sink_data          => router_003_src_data,                              --          .data
			sink_startofpacket => router_003_src_startofpacket,                     --          .startofpacket
			sink_endofpacket   => router_003_src_endofpacket,                       --          .endofpacket
			sink_valid(0)      => router_003_src_valid,                             --          .valid
			src0_ready         => cmd_demux_003_src0_ready,                         --      src0.ready
			src0_valid         => cmd_demux_003_src0_valid,                         --          .valid
			src0_data          => cmd_demux_003_src0_data,                          --          .data
			src0_channel       => cmd_demux_003_src0_channel,                       --          .channel
			src0_startofpacket => cmd_demux_003_src0_startofpacket,                 --          .startofpacket
			src0_endofpacket   => cmd_demux_003_src0_endofpacket,                   --          .endofpacket
			src1_ready         => cmd_demux_003_src1_ready,                         --      src1.ready
			src1_valid         => cmd_demux_003_src1_valid,                         --          .valid
			src1_data          => cmd_demux_003_src1_data,                          --          .data
			src1_channel       => cmd_demux_003_src1_channel,                       --          .channel
			src1_startofpacket => cmd_demux_003_src1_startofpacket,                 --          .startofpacket
			src1_endofpacket   => cmd_demux_003_src1_endofpacket                    --          .endofpacket
		);

	cmd_mux : component crypto_test_mm_interconnect_0_cmd_mux
		port map (
			clk                 => clk_clk_clk,                                      --       clk.clk
			reset               => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_src_ready,                                --       src.ready
			src_valid           => cmd_mux_src_valid,                                --          .valid
			src_data            => cmd_mux_src_data,                                 --          .data
			src_channel         => cmd_mux_src_channel,                              --          .channel
			src_startofpacket   => cmd_mux_src_startofpacket,                        --          .startofpacket
			src_endofpacket     => cmd_mux_src_endofpacket,                          --          .endofpacket
			sink0_ready         => cmd_demux_src0_ready,                             --     sink0.ready
			sink0_valid         => cmd_demux_src0_valid,                             --          .valid
			sink0_channel       => cmd_demux_src0_channel,                           --          .channel
			sink0_data          => cmd_demux_src0_data,                              --          .data
			sink0_startofpacket => cmd_demux_src0_startofpacket,                     --          .startofpacket
			sink0_endofpacket   => cmd_demux_src0_endofpacket                        --          .endofpacket
		);

	cmd_mux_001 : component crypto_test_mm_interconnect_0_cmd_mux
		port map (
			clk                 => clk_clk_clk,                                      --       clk.clk
			reset               => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_001_src_ready,                            --       src.ready
			src_valid           => cmd_mux_001_src_valid,                            --          .valid
			src_data            => cmd_mux_001_src_data,                             --          .data
			src_channel         => cmd_mux_001_src_channel,                          --          .channel
			src_startofpacket   => cmd_mux_001_src_startofpacket,                    --          .startofpacket
			src_endofpacket     => cmd_mux_001_src_endofpacket,                      --          .endofpacket
			sink0_ready         => cmd_demux_src1_ready,                             --     sink0.ready
			sink0_valid         => cmd_demux_src1_valid,                             --          .valid
			sink0_channel       => cmd_demux_src1_channel,                           --          .channel
			sink0_data          => cmd_demux_src1_data,                              --          .data
			sink0_startofpacket => cmd_demux_src1_startofpacket,                     --          .startofpacket
			sink0_endofpacket   => cmd_demux_src1_endofpacket                        --          .endofpacket
		);

	cmd_mux_002 : component crypto_test_mm_interconnect_0_cmd_mux
		port map (
			clk                 => clk_clk_clk,                                      --       clk.clk
			reset               => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_002_src_ready,                            --       src.ready
			src_valid           => cmd_mux_002_src_valid,                            --          .valid
			src_data            => cmd_mux_002_src_data,                             --          .data
			src_channel         => cmd_mux_002_src_channel,                          --          .channel
			src_startofpacket   => cmd_mux_002_src_startofpacket,                    --          .startofpacket
			src_endofpacket     => cmd_mux_002_src_endofpacket,                      --          .endofpacket
			sink0_ready         => cmd_demux_src2_ready,                             --     sink0.ready
			sink0_valid         => cmd_demux_src2_valid,                             --          .valid
			sink0_channel       => cmd_demux_src2_channel,                           --          .channel
			sink0_data          => cmd_demux_src2_data,                              --          .data
			sink0_startofpacket => cmd_demux_src2_startofpacket,                     --          .startofpacket
			sink0_endofpacket   => cmd_demux_src2_endofpacket                        --          .endofpacket
		);

	cmd_mux_003 : component crypto_test_mm_interconnect_0_cmd_mux_003
		port map (
			clk                 => clk_clk_clk,                                      --       clk.clk
			reset               => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_003_src_ready,                            --       src.ready
			src_valid           => cmd_mux_003_src_valid,                            --          .valid
			src_data            => cmd_mux_003_src_data,                             --          .data
			src_channel         => cmd_mux_003_src_channel,                          --          .channel
			src_startofpacket   => cmd_mux_003_src_startofpacket,                    --          .startofpacket
			src_endofpacket     => cmd_mux_003_src_endofpacket,                      --          .endofpacket
			sink0_ready         => cmd_demux_src3_ready,                             --     sink0.ready
			sink0_valid         => cmd_demux_src3_valid,                             --          .valid
			sink0_channel       => cmd_demux_src3_channel,                           --          .channel
			sink0_data          => cmd_demux_src3_data,                              --          .data
			sink0_startofpacket => cmd_demux_src3_startofpacket,                     --          .startofpacket
			sink0_endofpacket   => cmd_demux_src3_endofpacket,                       --          .endofpacket
			sink1_ready         => cmd_demux_003_src0_ready,                         --     sink1.ready
			sink1_valid         => cmd_demux_003_src0_valid,                         --          .valid
			sink1_channel       => cmd_demux_003_src0_channel,                       --          .channel
			sink1_data          => cmd_demux_003_src0_data,                          --          .data
			sink1_startofpacket => cmd_demux_003_src0_startofpacket,                 --          .startofpacket
			sink1_endofpacket   => cmd_demux_003_src0_endofpacket                    --          .endofpacket
		);

	cmd_mux_004 : component crypto_test_mm_interconnect_0_cmd_mux_003
		port map (
			clk                 => clk_clk_clk,                                      --       clk.clk
			reset               => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_004_src_ready,                            --       src.ready
			src_valid           => cmd_mux_004_src_valid,                            --          .valid
			src_data            => cmd_mux_004_src_data,                             --          .data
			src_channel         => cmd_mux_004_src_channel,                          --          .channel
			src_startofpacket   => cmd_mux_004_src_startofpacket,                    --          .startofpacket
			src_endofpacket     => cmd_mux_004_src_endofpacket,                      --          .endofpacket
			sink0_ready         => cmd_demux_src4_ready,                             --     sink0.ready
			sink0_valid         => cmd_demux_src4_valid,                             --          .valid
			sink0_channel       => cmd_demux_src4_channel,                           --          .channel
			sink0_data          => cmd_demux_src4_data,                              --          .data
			sink0_startofpacket => cmd_demux_src4_startofpacket,                     --          .startofpacket
			sink0_endofpacket   => cmd_demux_src4_endofpacket,                       --          .endofpacket
			sink1_ready         => cmd_demux_003_src1_ready,                         --     sink1.ready
			sink1_valid         => cmd_demux_003_src1_valid,                         --          .valid
			sink1_channel       => cmd_demux_003_src1_channel,                       --          .channel
			sink1_data          => cmd_demux_003_src1_data,                          --          .data
			sink1_startofpacket => cmd_demux_003_src1_startofpacket,                 --          .startofpacket
			sink1_endofpacket   => cmd_demux_003_src1_endofpacket                    --          .endofpacket
		);

	cmd_mux_005 : component crypto_test_mm_interconnect_0_cmd_mux
		port map (
			clk                 => clk_clk_clk,                                      --       clk.clk
			reset               => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_005_src_ready,                            --       src.ready
			src_valid           => cmd_mux_005_src_valid,                            --          .valid
			src_data            => cmd_mux_005_src_data,                             --          .data
			src_channel         => cmd_mux_005_src_channel,                          --          .channel
			src_startofpacket   => cmd_mux_005_src_startofpacket,                    --          .startofpacket
			src_endofpacket     => cmd_mux_005_src_endofpacket,                      --          .endofpacket
			sink0_ready         => cmd_demux_src5_ready,                             --     sink0.ready
			sink0_valid         => cmd_demux_src5_valid,                             --          .valid
			sink0_channel       => cmd_demux_src5_channel,                           --          .channel
			sink0_data          => cmd_demux_src5_data,                              --          .data
			sink0_startofpacket => cmd_demux_src5_startofpacket,                     --          .startofpacket
			sink0_endofpacket   => cmd_demux_src5_endofpacket                        --          .endofpacket
		);

	cmd_mux_006 : component crypto_test_mm_interconnect_0_cmd_mux
		port map (
			clk                 => clk_clk_clk,                                      --       clk.clk
			reset               => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_006_src_ready,                            --       src.ready
			src_valid           => cmd_mux_006_src_valid,                            --          .valid
			src_data            => cmd_mux_006_src_data,                             --          .data
			src_channel         => cmd_mux_006_src_channel,                          --          .channel
			src_startofpacket   => cmd_mux_006_src_startofpacket,                    --          .startofpacket
			src_endofpacket     => cmd_mux_006_src_endofpacket,                      --          .endofpacket
			sink0_ready         => cmd_demux_src6_ready,                             --     sink0.ready
			sink0_valid         => cmd_demux_src6_valid,                             --          .valid
			sink0_channel       => cmd_demux_src6_channel,                           --          .channel
			sink0_data          => cmd_demux_src6_data,                              --          .data
			sink0_startofpacket => cmd_demux_src6_startofpacket,                     --          .startofpacket
			sink0_endofpacket   => cmd_demux_src6_endofpacket                        --          .endofpacket
		);

	cmd_mux_007 : component crypto_test_mm_interconnect_0_cmd_mux_007
		port map (
			clk                 => clk_clk_clk,                                      --       clk.clk
			reset               => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_007_src_ready,                            --       src.ready
			src_valid           => cmd_mux_007_src_valid,                            --          .valid
			src_data            => cmd_mux_007_src_data,                             --          .data
			src_channel         => cmd_mux_007_src_channel,                          --          .channel
			src_startofpacket   => cmd_mux_007_src_startofpacket,                    --          .startofpacket
			src_endofpacket     => cmd_mux_007_src_endofpacket,                      --          .endofpacket
			sink0_ready         => cmd_demux_src7_ready,                             --     sink0.ready
			sink0_valid         => cmd_demux_src7_valid,                             --          .valid
			sink0_channel       => cmd_demux_src7_channel,                           --          .channel
			sink0_data          => cmd_demux_src7_data,                              --          .data
			sink0_startofpacket => cmd_demux_src7_startofpacket,                     --          .startofpacket
			sink0_endofpacket   => cmd_demux_src7_endofpacket,                       --          .endofpacket
			sink1_ready         => cmd_demux_001_src0_ready,                         --     sink1.ready
			sink1_valid         => cmd_demux_001_src0_valid,                         --          .valid
			sink1_channel       => cmd_demux_001_src0_channel,                       --          .channel
			sink1_data          => cmd_demux_001_src0_data,                          --          .data
			sink1_startofpacket => cmd_demux_001_src0_startofpacket,                 --          .startofpacket
			sink1_endofpacket   => cmd_demux_001_src0_endofpacket,                   --          .endofpacket
			sink2_ready         => cmd_demux_002_src0_ready,                         --     sink2.ready
			sink2_valid         => cmd_demux_002_src0_valid,                         --          .valid
			sink2_channel       => cmd_demux_002_src0_channel,                       --          .channel
			sink2_data          => cmd_demux_002_src0_data,                          --          .data
			sink2_startofpacket => cmd_demux_002_src0_startofpacket,                 --          .startofpacket
			sink2_endofpacket   => cmd_demux_002_src0_endofpacket                    --          .endofpacket
		);

	cmd_mux_008 : component crypto_test_mm_interconnect_0_cmd_mux_007
		port map (
			clk                 => clk_clk_clk,                                      --       clk.clk
			reset               => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_008_src_ready,                            --       src.ready
			src_valid           => cmd_mux_008_src_valid,                            --          .valid
			src_data            => cmd_mux_008_src_data,                             --          .data
			src_channel         => cmd_mux_008_src_channel,                          --          .channel
			src_startofpacket   => cmd_mux_008_src_startofpacket,                    --          .startofpacket
			src_endofpacket     => cmd_mux_008_src_endofpacket,                      --          .endofpacket
			sink0_ready         => cmd_demux_src8_ready,                             --     sink0.ready
			sink0_valid         => cmd_demux_src8_valid,                             --          .valid
			sink0_channel       => cmd_demux_src8_channel,                           --          .channel
			sink0_data          => cmd_demux_src8_data,                              --          .data
			sink0_startofpacket => cmd_demux_src8_startofpacket,                     --          .startofpacket
			sink0_endofpacket   => cmd_demux_src8_endofpacket,                       --          .endofpacket
			sink1_ready         => cmd_demux_001_src1_ready,                         --     sink1.ready
			sink1_valid         => cmd_demux_001_src1_valid,                         --          .valid
			sink1_channel       => cmd_demux_001_src1_channel,                       --          .channel
			sink1_data          => cmd_demux_001_src1_data,                          --          .data
			sink1_startofpacket => cmd_demux_001_src1_startofpacket,                 --          .startofpacket
			sink1_endofpacket   => cmd_demux_001_src1_endofpacket,                   --          .endofpacket
			sink2_ready         => cmd_demux_002_src1_ready,                         --     sink2.ready
			sink2_valid         => cmd_demux_002_src1_valid,                         --          .valid
			sink2_channel       => cmd_demux_002_src1_channel,                       --          .channel
			sink2_data          => cmd_demux_002_src1_data,                          --          .data
			sink2_startofpacket => cmd_demux_002_src1_startofpacket,                 --          .startofpacket
			sink2_endofpacket   => cmd_demux_002_src1_endofpacket                    --          .endofpacket
		);

	cmd_mux_009 : component crypto_test_mm_interconnect_0_cmd_mux
		port map (
			clk                 => clk_clk_clk,                                      --       clk.clk
			reset               => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => cmd_mux_009_src_ready,                            --       src.ready
			src_valid           => cmd_mux_009_src_valid,                            --          .valid
			src_data            => cmd_mux_009_src_data,                             --          .data
			src_channel         => cmd_mux_009_src_channel,                          --          .channel
			src_startofpacket   => cmd_mux_009_src_startofpacket,                    --          .startofpacket
			src_endofpacket     => cmd_mux_009_src_endofpacket,                      --          .endofpacket
			sink0_ready         => cmd_demux_src9_ready,                             --     sink0.ready
			sink0_valid         => cmd_demux_src9_valid,                             --          .valid
			sink0_channel       => cmd_demux_src9_channel,                           --          .channel
			sink0_data          => cmd_demux_src9_data,                              --          .data
			sink0_startofpacket => cmd_demux_src9_startofpacket,                     --          .startofpacket
			sink0_endofpacket   => cmd_demux_src9_endofpacket                        --          .endofpacket
		);

	rsp_demux : component crypto_test_mm_interconnect_0_rsp_demux
		port map (
			clk                => clk_clk_clk,                                      --       clk.clk
			reset              => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_004_src_ready,                             --      sink.ready
			sink_channel       => router_004_src_channel,                           --          .channel
			sink_data          => router_004_src_data,                              --          .data
			sink_startofpacket => router_004_src_startofpacket,                     --          .startofpacket
			sink_endofpacket   => router_004_src_endofpacket,                       --          .endofpacket
			sink_valid(0)      => router_004_src_valid,                             --          .valid
			src0_ready         => rsp_demux_src0_ready,                             --      src0.ready
			src0_valid         => rsp_demux_src0_valid,                             --          .valid
			src0_data          => rsp_demux_src0_data,                              --          .data
			src0_channel       => rsp_demux_src0_channel,                           --          .channel
			src0_startofpacket => rsp_demux_src0_startofpacket,                     --          .startofpacket
			src0_endofpacket   => rsp_demux_src0_endofpacket                        --          .endofpacket
		);

	rsp_demux_001 : component crypto_test_mm_interconnect_0_rsp_demux
		port map (
			clk                => clk_clk_clk,                                      --       clk.clk
			reset              => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_005_src_ready,                             --      sink.ready
			sink_channel       => router_005_src_channel,                           --          .channel
			sink_data          => router_005_src_data,                              --          .data
			sink_startofpacket => router_005_src_startofpacket,                     --          .startofpacket
			sink_endofpacket   => router_005_src_endofpacket,                       --          .endofpacket
			sink_valid(0)      => router_005_src_valid,                             --          .valid
			src0_ready         => rsp_demux_001_src0_ready,                         --      src0.ready
			src0_valid         => rsp_demux_001_src0_valid,                         --          .valid
			src0_data          => rsp_demux_001_src0_data,                          --          .data
			src0_channel       => rsp_demux_001_src0_channel,                       --          .channel
			src0_startofpacket => rsp_demux_001_src0_startofpacket,                 --          .startofpacket
			src0_endofpacket   => rsp_demux_001_src0_endofpacket                    --          .endofpacket
		);

	rsp_demux_002 : component crypto_test_mm_interconnect_0_rsp_demux
		port map (
			clk                => clk_clk_clk,                                      --       clk.clk
			reset              => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_006_src_ready,                             --      sink.ready
			sink_channel       => router_006_src_channel,                           --          .channel
			sink_data          => router_006_src_data,                              --          .data
			sink_startofpacket => router_006_src_startofpacket,                     --          .startofpacket
			sink_endofpacket   => router_006_src_endofpacket,                       --          .endofpacket
			sink_valid(0)      => router_006_src_valid,                             --          .valid
			src0_ready         => rsp_demux_002_src0_ready,                         --      src0.ready
			src0_valid         => rsp_demux_002_src0_valid,                         --          .valid
			src0_data          => rsp_demux_002_src0_data,                          --          .data
			src0_channel       => rsp_demux_002_src0_channel,                       --          .channel
			src0_startofpacket => rsp_demux_002_src0_startofpacket,                 --          .startofpacket
			src0_endofpacket   => rsp_demux_002_src0_endofpacket                    --          .endofpacket
		);

	rsp_demux_003 : component crypto_test_mm_interconnect_0_cmd_demux_001
		port map (
			clk                => clk_clk_clk,                                      --       clk.clk
			reset              => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_007_src_ready,                             --      sink.ready
			sink_channel       => router_007_src_channel,                           --          .channel
			sink_data          => router_007_src_data,                              --          .data
			sink_startofpacket => router_007_src_startofpacket,                     --          .startofpacket
			sink_endofpacket   => router_007_src_endofpacket,                       --          .endofpacket
			sink_valid(0)      => router_007_src_valid,                             --          .valid
			src0_ready         => rsp_demux_003_src0_ready,                         --      src0.ready
			src0_valid         => rsp_demux_003_src0_valid,                         --          .valid
			src0_data          => rsp_demux_003_src0_data,                          --          .data
			src0_channel       => rsp_demux_003_src0_channel,                       --          .channel
			src0_startofpacket => rsp_demux_003_src0_startofpacket,                 --          .startofpacket
			src0_endofpacket   => rsp_demux_003_src0_endofpacket,                   --          .endofpacket
			src1_ready         => rsp_demux_003_src1_ready,                         --      src1.ready
			src1_valid         => rsp_demux_003_src1_valid,                         --          .valid
			src1_data          => rsp_demux_003_src1_data,                          --          .data
			src1_channel       => rsp_demux_003_src1_channel,                       --          .channel
			src1_startofpacket => rsp_demux_003_src1_startofpacket,                 --          .startofpacket
			src1_endofpacket   => rsp_demux_003_src1_endofpacket                    --          .endofpacket
		);

	rsp_demux_004 : component crypto_test_mm_interconnect_0_cmd_demux_001
		port map (
			clk                => clk_clk_clk,                                      --       clk.clk
			reset              => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_008_src_ready,                             --      sink.ready
			sink_channel       => router_008_src_channel,                           --          .channel
			sink_data          => router_008_src_data,                              --          .data
			sink_startofpacket => router_008_src_startofpacket,                     --          .startofpacket
			sink_endofpacket   => router_008_src_endofpacket,                       --          .endofpacket
			sink_valid(0)      => router_008_src_valid,                             --          .valid
			src0_ready         => rsp_demux_004_src0_ready,                         --      src0.ready
			src0_valid         => rsp_demux_004_src0_valid,                         --          .valid
			src0_data          => rsp_demux_004_src0_data,                          --          .data
			src0_channel       => rsp_demux_004_src0_channel,                       --          .channel
			src0_startofpacket => rsp_demux_004_src0_startofpacket,                 --          .startofpacket
			src0_endofpacket   => rsp_demux_004_src0_endofpacket,                   --          .endofpacket
			src1_ready         => rsp_demux_004_src1_ready,                         --      src1.ready
			src1_valid         => rsp_demux_004_src1_valid,                         --          .valid
			src1_data          => rsp_demux_004_src1_data,                          --          .data
			src1_channel       => rsp_demux_004_src1_channel,                       --          .channel
			src1_startofpacket => rsp_demux_004_src1_startofpacket,                 --          .startofpacket
			src1_endofpacket   => rsp_demux_004_src1_endofpacket                    --          .endofpacket
		);

	rsp_demux_005 : component crypto_test_mm_interconnect_0_rsp_demux
		port map (
			clk                => clk_clk_clk,                                      --       clk.clk
			reset              => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_009_src_ready,                             --      sink.ready
			sink_channel       => router_009_src_channel,                           --          .channel
			sink_data          => router_009_src_data,                              --          .data
			sink_startofpacket => router_009_src_startofpacket,                     --          .startofpacket
			sink_endofpacket   => router_009_src_endofpacket,                       --          .endofpacket
			sink_valid(0)      => router_009_src_valid,                             --          .valid
			src0_ready         => rsp_demux_005_src0_ready,                         --      src0.ready
			src0_valid         => rsp_demux_005_src0_valid,                         --          .valid
			src0_data          => rsp_demux_005_src0_data,                          --          .data
			src0_channel       => rsp_demux_005_src0_channel,                       --          .channel
			src0_startofpacket => rsp_demux_005_src0_startofpacket,                 --          .startofpacket
			src0_endofpacket   => rsp_demux_005_src0_endofpacket                    --          .endofpacket
		);

	rsp_demux_006 : component crypto_test_mm_interconnect_0_rsp_demux
		port map (
			clk                => clk_clk_clk,                                      --       clk.clk
			reset              => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_010_src_ready,                             --      sink.ready
			sink_channel       => router_010_src_channel,                           --          .channel
			sink_data          => router_010_src_data,                              --          .data
			sink_startofpacket => router_010_src_startofpacket,                     --          .startofpacket
			sink_endofpacket   => router_010_src_endofpacket,                       --          .endofpacket
			sink_valid(0)      => router_010_src_valid,                             --          .valid
			src0_ready         => rsp_demux_006_src0_ready,                         --      src0.ready
			src0_valid         => rsp_demux_006_src0_valid,                         --          .valid
			src0_data          => rsp_demux_006_src0_data,                          --          .data
			src0_channel       => rsp_demux_006_src0_channel,                       --          .channel
			src0_startofpacket => rsp_demux_006_src0_startofpacket,                 --          .startofpacket
			src0_endofpacket   => rsp_demux_006_src0_endofpacket                    --          .endofpacket
		);

	rsp_demux_007 : component crypto_test_mm_interconnect_0_rsp_demux_007
		port map (
			clk                => clk_clk_clk,                                      --       clk.clk
			reset              => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_011_src_ready,                             --      sink.ready
			sink_channel       => router_011_src_channel,                           --          .channel
			sink_data          => router_011_src_data,                              --          .data
			sink_startofpacket => router_011_src_startofpacket,                     --          .startofpacket
			sink_endofpacket   => router_011_src_endofpacket,                       --          .endofpacket
			sink_valid(0)      => router_011_src_valid,                             --          .valid
			src0_ready         => rsp_demux_007_src0_ready,                         --      src0.ready
			src0_valid         => rsp_demux_007_src0_valid,                         --          .valid
			src0_data          => rsp_demux_007_src0_data,                          --          .data
			src0_channel       => rsp_demux_007_src0_channel,                       --          .channel
			src0_startofpacket => rsp_demux_007_src0_startofpacket,                 --          .startofpacket
			src0_endofpacket   => rsp_demux_007_src0_endofpacket,                   --          .endofpacket
			src1_ready         => rsp_demux_007_src1_ready,                         --      src1.ready
			src1_valid         => rsp_demux_007_src1_valid,                         --          .valid
			src1_data          => rsp_demux_007_src1_data,                          --          .data
			src1_channel       => rsp_demux_007_src1_channel,                       --          .channel
			src1_startofpacket => rsp_demux_007_src1_startofpacket,                 --          .startofpacket
			src1_endofpacket   => rsp_demux_007_src1_endofpacket,                   --          .endofpacket
			src2_ready         => rsp_demux_007_src2_ready,                         --      src2.ready
			src2_valid         => rsp_demux_007_src2_valid,                         --          .valid
			src2_data          => rsp_demux_007_src2_data,                          --          .data
			src2_channel       => rsp_demux_007_src2_channel,                       --          .channel
			src2_startofpacket => rsp_demux_007_src2_startofpacket,                 --          .startofpacket
			src2_endofpacket   => rsp_demux_007_src2_endofpacket                    --          .endofpacket
		);

	rsp_demux_008 : component crypto_test_mm_interconnect_0_rsp_demux_007
		port map (
			clk                => clk_clk_clk,                                      --       clk.clk
			reset              => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_012_src_ready,                             --      sink.ready
			sink_channel       => router_012_src_channel,                           --          .channel
			sink_data          => router_012_src_data,                              --          .data
			sink_startofpacket => router_012_src_startofpacket,                     --          .startofpacket
			sink_endofpacket   => router_012_src_endofpacket,                       --          .endofpacket
			sink_valid(0)      => router_012_src_valid,                             --          .valid
			src0_ready         => rsp_demux_008_src0_ready,                         --      src0.ready
			src0_valid         => rsp_demux_008_src0_valid,                         --          .valid
			src0_data          => rsp_demux_008_src0_data,                          --          .data
			src0_channel       => rsp_demux_008_src0_channel,                       --          .channel
			src0_startofpacket => rsp_demux_008_src0_startofpacket,                 --          .startofpacket
			src0_endofpacket   => rsp_demux_008_src0_endofpacket,                   --          .endofpacket
			src1_ready         => rsp_demux_008_src1_ready,                         --      src1.ready
			src1_valid         => rsp_demux_008_src1_valid,                         --          .valid
			src1_data          => rsp_demux_008_src1_data,                          --          .data
			src1_channel       => rsp_demux_008_src1_channel,                       --          .channel
			src1_startofpacket => rsp_demux_008_src1_startofpacket,                 --          .startofpacket
			src1_endofpacket   => rsp_demux_008_src1_endofpacket,                   --          .endofpacket
			src2_ready         => rsp_demux_008_src2_ready,                         --      src2.ready
			src2_valid         => rsp_demux_008_src2_valid,                         --          .valid
			src2_data          => rsp_demux_008_src2_data,                          --          .data
			src2_channel       => rsp_demux_008_src2_channel,                       --          .channel
			src2_startofpacket => rsp_demux_008_src2_startofpacket,                 --          .startofpacket
			src2_endofpacket   => rsp_demux_008_src2_endofpacket                    --          .endofpacket
		);

	rsp_demux_009 : component crypto_test_mm_interconnect_0_rsp_demux
		port map (
			clk                => clk_clk_clk,                                      --       clk.clk
			reset              => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			sink_ready         => router_013_src_ready,                             --      sink.ready
			sink_channel       => router_013_src_channel,                           --          .channel
			sink_data          => router_013_src_data,                              --          .data
			sink_startofpacket => router_013_src_startofpacket,                     --          .startofpacket
			sink_endofpacket   => router_013_src_endofpacket,                       --          .endofpacket
			sink_valid(0)      => router_013_src_valid,                             --          .valid
			src0_ready         => rsp_demux_009_src0_ready,                         --      src0.ready
			src0_valid         => rsp_demux_009_src0_valid,                         --          .valid
			src0_data          => rsp_demux_009_src0_data,                          --          .data
			src0_channel       => rsp_demux_009_src0_channel,                       --          .channel
			src0_startofpacket => rsp_demux_009_src0_startofpacket,                 --          .startofpacket
			src0_endofpacket   => rsp_demux_009_src0_endofpacket                    --          .endofpacket
		);

	rsp_mux : component crypto_test_mm_interconnect_0_rsp_mux
		port map (
			clk                 => clk_clk_clk,                                      --       clk.clk
			reset               => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => rsp_mux_src_ready,                                --       src.ready
			src_valid           => rsp_mux_src_valid,                                --          .valid
			src_data            => rsp_mux_src_data,                                 --          .data
			src_channel         => rsp_mux_src_channel,                              --          .channel
			src_startofpacket   => rsp_mux_src_startofpacket,                        --          .startofpacket
			src_endofpacket     => rsp_mux_src_endofpacket,                          --          .endofpacket
			sink0_ready         => rsp_demux_src0_ready,                             --     sink0.ready
			sink0_valid         => rsp_demux_src0_valid,                             --          .valid
			sink0_channel       => rsp_demux_src0_channel,                           --          .channel
			sink0_data          => rsp_demux_src0_data,                              --          .data
			sink0_startofpacket => rsp_demux_src0_startofpacket,                     --          .startofpacket
			sink0_endofpacket   => rsp_demux_src0_endofpacket,                       --          .endofpacket
			sink1_ready         => rsp_demux_001_src0_ready,                         --     sink1.ready
			sink1_valid         => rsp_demux_001_src0_valid,                         --          .valid
			sink1_channel       => rsp_demux_001_src0_channel,                       --          .channel
			sink1_data          => rsp_demux_001_src0_data,                          --          .data
			sink1_startofpacket => rsp_demux_001_src0_startofpacket,                 --          .startofpacket
			sink1_endofpacket   => rsp_demux_001_src0_endofpacket,                   --          .endofpacket
			sink2_ready         => rsp_demux_002_src0_ready,                         --     sink2.ready
			sink2_valid         => rsp_demux_002_src0_valid,                         --          .valid
			sink2_channel       => rsp_demux_002_src0_channel,                       --          .channel
			sink2_data          => rsp_demux_002_src0_data,                          --          .data
			sink2_startofpacket => rsp_demux_002_src0_startofpacket,                 --          .startofpacket
			sink2_endofpacket   => rsp_demux_002_src0_endofpacket,                   --          .endofpacket
			sink3_ready         => rsp_demux_003_src0_ready,                         --     sink3.ready
			sink3_valid         => rsp_demux_003_src0_valid,                         --          .valid
			sink3_channel       => rsp_demux_003_src0_channel,                       --          .channel
			sink3_data          => rsp_demux_003_src0_data,                          --          .data
			sink3_startofpacket => rsp_demux_003_src0_startofpacket,                 --          .startofpacket
			sink3_endofpacket   => rsp_demux_003_src0_endofpacket,                   --          .endofpacket
			sink4_ready         => rsp_demux_004_src0_ready,                         --     sink4.ready
			sink4_valid         => rsp_demux_004_src0_valid,                         --          .valid
			sink4_channel       => rsp_demux_004_src0_channel,                       --          .channel
			sink4_data          => rsp_demux_004_src0_data,                          --          .data
			sink4_startofpacket => rsp_demux_004_src0_startofpacket,                 --          .startofpacket
			sink4_endofpacket   => rsp_demux_004_src0_endofpacket,                   --          .endofpacket
			sink5_ready         => rsp_demux_005_src0_ready,                         --     sink5.ready
			sink5_valid         => rsp_demux_005_src0_valid,                         --          .valid
			sink5_channel       => rsp_demux_005_src0_channel,                       --          .channel
			sink5_data          => rsp_demux_005_src0_data,                          --          .data
			sink5_startofpacket => rsp_demux_005_src0_startofpacket,                 --          .startofpacket
			sink5_endofpacket   => rsp_demux_005_src0_endofpacket,                   --          .endofpacket
			sink6_ready         => rsp_demux_006_src0_ready,                         --     sink6.ready
			sink6_valid         => rsp_demux_006_src0_valid,                         --          .valid
			sink6_channel       => rsp_demux_006_src0_channel,                       --          .channel
			sink6_data          => rsp_demux_006_src0_data,                          --          .data
			sink6_startofpacket => rsp_demux_006_src0_startofpacket,                 --          .startofpacket
			sink6_endofpacket   => rsp_demux_006_src0_endofpacket,                   --          .endofpacket
			sink7_ready         => rsp_demux_007_src0_ready,                         --     sink7.ready
			sink7_valid         => rsp_demux_007_src0_valid,                         --          .valid
			sink7_channel       => rsp_demux_007_src0_channel,                       --          .channel
			sink7_data          => rsp_demux_007_src0_data,                          --          .data
			sink7_startofpacket => rsp_demux_007_src0_startofpacket,                 --          .startofpacket
			sink7_endofpacket   => rsp_demux_007_src0_endofpacket,                   --          .endofpacket
			sink8_ready         => rsp_demux_008_src0_ready,                         --     sink8.ready
			sink8_valid         => rsp_demux_008_src0_valid,                         --          .valid
			sink8_channel       => rsp_demux_008_src0_channel,                       --          .channel
			sink8_data          => rsp_demux_008_src0_data,                          --          .data
			sink8_startofpacket => rsp_demux_008_src0_startofpacket,                 --          .startofpacket
			sink8_endofpacket   => rsp_demux_008_src0_endofpacket,                   --          .endofpacket
			sink9_ready         => rsp_demux_009_src0_ready,                         --     sink9.ready
			sink9_valid         => rsp_demux_009_src0_valid,                         --          .valid
			sink9_channel       => rsp_demux_009_src0_channel,                       --          .channel
			sink9_data          => rsp_demux_009_src0_data,                          --          .data
			sink9_startofpacket => rsp_demux_009_src0_startofpacket,                 --          .startofpacket
			sink9_endofpacket   => rsp_demux_009_src0_endofpacket                    --          .endofpacket
		);

	rsp_mux_001 : component crypto_test_mm_interconnect_0_rsp_mux_001
		port map (
			clk                 => clk_clk_clk,                                      --       clk.clk
			reset               => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => rsp_mux_001_src_ready,                            --       src.ready
			src_valid           => rsp_mux_001_src_valid,                            --          .valid
			src_data            => rsp_mux_001_src_data,                             --          .data
			src_channel         => rsp_mux_001_src_channel,                          --          .channel
			src_startofpacket   => rsp_mux_001_src_startofpacket,                    --          .startofpacket
			src_endofpacket     => rsp_mux_001_src_endofpacket,                      --          .endofpacket
			sink0_ready         => rsp_demux_007_src1_ready,                         --     sink0.ready
			sink0_valid         => rsp_demux_007_src1_valid,                         --          .valid
			sink0_channel       => rsp_demux_007_src1_channel,                       --          .channel
			sink0_data          => rsp_demux_007_src1_data,                          --          .data
			sink0_startofpacket => rsp_demux_007_src1_startofpacket,                 --          .startofpacket
			sink0_endofpacket   => rsp_demux_007_src1_endofpacket,                   --          .endofpacket
			sink1_ready         => rsp_demux_008_src1_ready,                         --     sink1.ready
			sink1_valid         => rsp_demux_008_src1_valid,                         --          .valid
			sink1_channel       => rsp_demux_008_src1_channel,                       --          .channel
			sink1_data          => rsp_demux_008_src1_data,                          --          .data
			sink1_startofpacket => rsp_demux_008_src1_startofpacket,                 --          .startofpacket
			sink1_endofpacket   => rsp_demux_008_src1_endofpacket                    --          .endofpacket
		);

	rsp_mux_002 : component crypto_test_mm_interconnect_0_rsp_mux_001
		port map (
			clk                 => clk_clk_clk,                                      --       clk.clk
			reset               => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => rsp_mux_002_src_ready,                            --       src.ready
			src_valid           => rsp_mux_002_src_valid,                            --          .valid
			src_data            => rsp_mux_002_src_data,                             --          .data
			src_channel         => rsp_mux_002_src_channel,                          --          .channel
			src_startofpacket   => rsp_mux_002_src_startofpacket,                    --          .startofpacket
			src_endofpacket     => rsp_mux_002_src_endofpacket,                      --          .endofpacket
			sink0_ready         => rsp_demux_007_src2_ready,                         --     sink0.ready
			sink0_valid         => rsp_demux_007_src2_valid,                         --          .valid
			sink0_channel       => rsp_demux_007_src2_channel,                       --          .channel
			sink0_data          => rsp_demux_007_src2_data,                          --          .data
			sink0_startofpacket => rsp_demux_007_src2_startofpacket,                 --          .startofpacket
			sink0_endofpacket   => rsp_demux_007_src2_endofpacket,                   --          .endofpacket
			sink1_ready         => rsp_demux_008_src2_ready,                         --     sink1.ready
			sink1_valid         => rsp_demux_008_src2_valid,                         --          .valid
			sink1_channel       => rsp_demux_008_src2_channel,                       --          .channel
			sink1_data          => rsp_demux_008_src2_data,                          --          .data
			sink1_startofpacket => rsp_demux_008_src2_startofpacket,                 --          .startofpacket
			sink1_endofpacket   => rsp_demux_008_src2_endofpacket                    --          .endofpacket
		);

	rsp_mux_003 : component crypto_test_mm_interconnect_0_rsp_mux_001
		port map (
			clk                 => clk_clk_clk,                                      --       clk.clk
			reset               => nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, -- clk_reset.reset
			src_ready           => rsp_mux_003_src_ready,                            --       src.ready
			src_valid           => rsp_mux_003_src_valid,                            --          .valid
			src_data            => rsp_mux_003_src_data,                             --          .data
			src_channel         => rsp_mux_003_src_channel,                          --          .channel
			src_startofpacket   => rsp_mux_003_src_startofpacket,                    --          .startofpacket
			src_endofpacket     => rsp_mux_003_src_endofpacket,                      --          .endofpacket
			sink0_ready         => rsp_demux_003_src1_ready,                         --     sink0.ready
			sink0_valid         => rsp_demux_003_src1_valid,                         --          .valid
			sink0_channel       => rsp_demux_003_src1_channel,                       --          .channel
			sink0_data          => rsp_demux_003_src1_data,                          --          .data
			sink0_startofpacket => rsp_demux_003_src1_startofpacket,                 --          .startofpacket
			sink0_endofpacket   => rsp_demux_003_src1_endofpacket,                   --          .endofpacket
			sink1_ready         => rsp_demux_004_src1_ready,                         --     sink1.ready
			sink1_valid         => rsp_demux_004_src1_valid,                         --          .valid
			sink1_channel       => rsp_demux_004_src1_channel,                       --          .channel
			sink1_data          => rsp_demux_004_src1_data,                          --          .data
			sink1_startofpacket => rsp_demux_004_src1_startofpacket,                 --          .startofpacket
			sink1_endofpacket   => rsp_demux_004_src1_endofpacket                    --          .endofpacket
		);

end architecture rtl; -- of crypto_test_mm_interconnect_0
