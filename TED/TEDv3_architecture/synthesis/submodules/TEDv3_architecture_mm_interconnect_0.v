// TEDv3_architecture_mm_interconnect_0.v

// This file was auto-generated from altera_mm_interconnect_hw.tcl.  If you edit it your changes
// will probably be lost.
// 
// Generated using ACDS version 14.1 190 at 2015.03.30.18:28:02

`timescale 1 ps / 1 ps
module TEDv3_architecture_mm_interconnect_0 (
		input  wire        lcd_clk_c0_clk,                                   //                                 lcd_clk_c0.clk
		input  wire        sys_clk_clk_clk,                                  //                                sys_clk_clk.clk
		input  wire        lcd_reset_reset_bridge_in_reset_reset,            //            lcd_reset_reset_bridge_in_reset.reset
		input  wire        nios2_qsys_0_reset_n_reset_bridge_in_reset_reset, // nios2_qsys_0_reset_n_reset_bridge_in_reset.reset
		input  wire [31:0] black_rx_descriptor_read_address,                 //                   black_rx_descriptor_read.address
		output wire        black_rx_descriptor_read_waitrequest,             //                                           .waitrequest
		input  wire        black_rx_descriptor_read_read,                    //                                           .read
		output wire [31:0] black_rx_descriptor_read_readdata,                //                                           .readdata
		output wire        black_rx_descriptor_read_readdatavalid,           //                                           .readdatavalid
		input  wire [31:0] black_rx_descriptor_write_address,                //                  black_rx_descriptor_write.address
		output wire        black_rx_descriptor_write_waitrequest,            //                                           .waitrequest
		input  wire        black_rx_descriptor_write_write,                  //                                           .write
		input  wire [31:0] black_rx_descriptor_write_writedata,              //                                           .writedata
		input  wire [31:0] black_rx_m_write_address,                         //                           black_rx_m_write.address
		output wire        black_rx_m_write_waitrequest,                     //                                           .waitrequest
		input  wire [3:0]  black_rx_m_write_byteenable,                      //                                           .byteenable
		input  wire        black_rx_m_write_write,                           //                                           .write
		input  wire [31:0] black_rx_m_write_writedata,                       //                                           .writedata
		input  wire [31:0] black_tx_descriptor_read_address,                 //                   black_tx_descriptor_read.address
		output wire        black_tx_descriptor_read_waitrequest,             //                                           .waitrequest
		input  wire        black_tx_descriptor_read_read,                    //                                           .read
		output wire [31:0] black_tx_descriptor_read_readdata,                //                                           .readdata
		output wire        black_tx_descriptor_read_readdatavalid,           //                                           .readdatavalid
		input  wire [31:0] black_tx_descriptor_write_address,                //                  black_tx_descriptor_write.address
		output wire        black_tx_descriptor_write_waitrequest,            //                                           .waitrequest
		input  wire        black_tx_descriptor_write_write,                  //                                           .write
		input  wire [31:0] black_tx_descriptor_write_writedata,              //                                           .writedata
		input  wire [31:0] black_tx_m_read_address,                          //                            black_tx_m_read.address
		output wire        black_tx_m_read_waitrequest,                      //                                           .waitrequest
		input  wire        black_tx_m_read_read,                             //                                           .read
		output wire [31:0] black_tx_m_read_readdata,                         //                                           .readdata
		output wire        black_tx_m_read_readdatavalid,                    //                                           .readdatavalid
		input  wire [25:0] nios2_qsys_0_data_master_address,                 //                   nios2_qsys_0_data_master.address
		output wire        nios2_qsys_0_data_master_waitrequest,             //                                           .waitrequest
		input  wire [3:0]  nios2_qsys_0_data_master_byteenable,              //                                           .byteenable
		input  wire        nios2_qsys_0_data_master_read,                    //                                           .read
		output wire [31:0] nios2_qsys_0_data_master_readdata,                //                                           .readdata
		input  wire        nios2_qsys_0_data_master_write,                   //                                           .write
		input  wire [31:0] nios2_qsys_0_data_master_writedata,               //                                           .writedata
		input  wire        nios2_qsys_0_data_master_debugaccess,             //                                           .debugaccess
		input  wire [20:0] nios2_qsys_0_instruction_master_address,          //            nios2_qsys_0_instruction_master.address
		output wire        nios2_qsys_0_instruction_master_waitrequest,      //                                           .waitrequest
		input  wire        nios2_qsys_0_instruction_master_read,             //                                           .read
		output wire [31:0] nios2_qsys_0_instruction_master_readdata,         //                                           .readdata
		input  wire [31:0] red_rx_descriptor_read_address,                   //                     red_rx_descriptor_read.address
		output wire        red_rx_descriptor_read_waitrequest,               //                                           .waitrequest
		input  wire        red_rx_descriptor_read_read,                      //                                           .read
		output wire [31:0] red_rx_descriptor_read_readdata,                  //                                           .readdata
		output wire        red_rx_descriptor_read_readdatavalid,             //                                           .readdatavalid
		input  wire [31:0] red_rx_descriptor_write_address,                  //                    red_rx_descriptor_write.address
		output wire        red_rx_descriptor_write_waitrequest,              //                                           .waitrequest
		input  wire        red_rx_descriptor_write_write,                    //                                           .write
		input  wire [31:0] red_rx_descriptor_write_writedata,                //                                           .writedata
		input  wire [31:0] red_rx_m_write_address,                           //                             red_rx_m_write.address
		output wire        red_rx_m_write_waitrequest,                       //                                           .waitrequest
		input  wire [3:0]  red_rx_m_write_byteenable,                        //                                           .byteenable
		input  wire        red_rx_m_write_write,                             //                                           .write
		input  wire [31:0] red_rx_m_write_writedata,                         //                                           .writedata
		input  wire [31:0] red_tx_descriptor_read_address,                   //                     red_tx_descriptor_read.address
		output wire        red_tx_descriptor_read_waitrequest,               //                                           .waitrequest
		input  wire        red_tx_descriptor_read_read,                      //                                           .read
		output wire [31:0] red_tx_descriptor_read_readdata,                  //                                           .readdata
		output wire        red_tx_descriptor_read_readdatavalid,             //                                           .readdatavalid
		input  wire [31:0] red_tx_descriptor_write_address,                  //                    red_tx_descriptor_write.address
		output wire        red_tx_descriptor_write_waitrequest,              //                                           .waitrequest
		input  wire        red_tx_descriptor_write_write,                    //                                           .write
		input  wire [31:0] red_tx_descriptor_write_writedata,                //                                           .writedata
		input  wire [31:0] red_tx_m_read_address,                            //                              red_tx_m_read.address
		output wire        red_tx_m_read_waitrequest,                        //                                           .waitrequest
		input  wire        red_tx_m_read_read,                               //                                           .read
		output wire [31:0] red_tx_m_read_readdata,                           //                                           .readdata
		output wire        red_tx_m_read_readdatavalid,                      //                                           .readdatavalid
		input  wire [31:0] ted_decryptor_read_master_address,                //                  ted_decryptor_read_master.address
		output wire        ted_decryptor_read_master_waitrequest,            //                                           .waitrequest
		input  wire        ted_decryptor_read_master_read,                   //                                           .read
		output wire [31:0] ted_decryptor_read_master_readdata,               //                                           .readdata
		input  wire [31:0] ted_decryptor_write_master_address,               //                 ted_decryptor_write_master.address
		output wire        ted_decryptor_write_master_waitrequest,           //                                           .waitrequest
		input  wire        ted_decryptor_write_master_write,                 //                                           .write
		input  wire [31:0] ted_decryptor_write_master_writedata,             //                                           .writedata
		input  wire [31:0] ted_encryptor_read_master_address,                //                  ted_encryptor_read_master.address
		output wire        ted_encryptor_read_master_waitrequest,            //                                           .waitrequest
		input  wire        ted_encryptor_read_master_read,                   //                                           .read
		output wire [31:0] ted_encryptor_read_master_readdata,               //                                           .readdata
		input  wire [31:0] ted_encryptor_write_master_address,               //                 ted_encryptor_write_master.address
		output wire        ted_encryptor_write_master_waitrequest,           //                                           .waitrequest
		input  wire        ted_encryptor_write_master_write,                 //                                           .write
		input  wire [31:0] ted_encryptor_write_master_writedata,             //                                           .writedata
		output wire [7:0]  black_interface_control_port_address,             //               black_interface_control_port.address
		output wire        black_interface_control_port_write,               //                                           .write
		output wire        black_interface_control_port_read,                //                                           .read
		input  wire [31:0] black_interface_control_port_readdata,            //                                           .readdata
		output wire [31:0] black_interface_control_port_writedata,           //                                           .writedata
		input  wire        black_interface_control_port_waitrequest,         //                                           .waitrequest
		output wire [3:0]  black_rx_csr_address,                             //                               black_rx_csr.address
		output wire        black_rx_csr_write,                               //                                           .write
		output wire        black_rx_csr_read,                                //                                           .read
		input  wire [31:0] black_rx_csr_readdata,                            //                                           .readdata
		output wire [31:0] black_rx_csr_writedata,                           //                                           .writedata
		output wire        black_rx_csr_chipselect,                          //                                           .chipselect
		output wire [13:0] black_to_red_memory_s1_address,                   //                     black_to_red_memory_s1.address
		output wire        black_to_red_memory_s1_write,                     //                                           .write
		input  wire [31:0] black_to_red_memory_s1_readdata,                  //                                           .readdata
		output wire [31:0] black_to_red_memory_s1_writedata,                 //                                           .writedata
		output wire [3:0]  black_to_red_memory_s1_byteenable,                //                                           .byteenable
		output wire        black_to_red_memory_s1_chipselect,                //                                           .chipselect
		output wire        black_to_red_memory_s1_clken,                     //                                           .clken
		output wire [3:0]  black_tx_csr_address,                             //                               black_tx_csr.address
		output wire        black_tx_csr_write,                               //                                           .write
		output wire        black_tx_csr_read,                                //                                           .read
		input  wire [31:0] black_tx_csr_readdata,                            //                                           .readdata
		output wire [31:0] black_tx_csr_writedata,                           //                                           .writedata
		output wire        black_tx_csr_chipselect,                          //                                           .chipselect
		output wire [12:0] descriptor_mem_s1_address,                        //                          descriptor_mem_s1.address
		output wire        descriptor_mem_s1_write,                          //                                           .write
		input  wire [31:0] descriptor_mem_s1_readdata,                       //                                           .readdata
		output wire [31:0] descriptor_mem_s1_writedata,                      //                                           .writedata
		output wire [3:0]  descriptor_mem_s1_byteenable,                     //                                           .byteenable
		output wire        descriptor_mem_s1_chipselect,                     //                                           .chipselect
		output wire        descriptor_mem_s1_clken,                          //                                           .clken
		output wire [12:0] heap_stack_s1_address,                            //                              heap_stack_s1.address
		output wire        heap_stack_s1_write,                              //                                           .write
		input  wire [31:0] heap_stack_s1_readdata,                           //                                           .readdata
		output wire [31:0] heap_stack_s1_writedata,                          //                                           .writedata
		output wire [3:0]  heap_stack_s1_byteenable,                         //                                           .byteenable
		output wire        heap_stack_s1_chipselect,                         //                                           .chipselect
		output wire        heap_stack_s1_clken,                              //                                           .clken
		output wire        hex_avalon_slave_0_write,                         //                         hex_avalon_slave_0.write
		output wire        hex_avalon_slave_0_read,                          //                                           .read
		input  wire [31:0] hex_avalon_slave_0_readdata,                      //                                           .readdata
		output wire [31:0] hex_avalon_slave_0_writedata,                     //                                           .writedata
		output wire [3:0]  hex_avalon_slave_0_byteenable,                    //                                           .byteenable
		output wire        hex_avalon_slave_0_chipselect,                    //                                           .chipselect
		output wire [1:0]  input_port_s1_address,                            //                              input_port_s1.address
		input  wire [31:0] input_port_s1_readdata,                           //                                           .readdata
		output wire [15:0] instruction_memory_s1_address,                    //                      instruction_memory_s1.address
		output wire        instruction_memory_s1_write,                      //                                           .write
		input  wire [31:0] instruction_memory_s1_readdata,                   //                                           .readdata
		output wire [31:0] instruction_memory_s1_writedata,                  //                                           .writedata
		output wire [3:0]  instruction_memory_s1_byteenable,                 //                                           .byteenable
		output wire        instruction_memory_s1_chipselect,                 //                                           .chipselect
		output wire        instruction_memory_s1_clken,                      //                                           .clken
		output wire [0:0]  jtag_uart_avalon_jtag_slave_address,              //                jtag_uart_avalon_jtag_slave.address
		output wire        jtag_uart_avalon_jtag_slave_write,                //                                           .write
		output wire        jtag_uart_avalon_jtag_slave_read,                 //                                           .read
		input  wire [31:0] jtag_uart_avalon_jtag_slave_readdata,             //                                           .readdata
		output wire [31:0] jtag_uart_avalon_jtag_slave_writedata,            //                                           .writedata
		input  wire        jtag_uart_avalon_jtag_slave_waitrequest,          //                                           .waitrequest
		output wire        jtag_uart_avalon_jtag_slave_chipselect,           //                                           .chipselect
		output wire [0:0]  lcd_avalon_lcd_slave_address,                     //                       lcd_avalon_lcd_slave.address
		output wire        lcd_avalon_lcd_slave_write,                       //                                           .write
		output wire        lcd_avalon_lcd_slave_read,                        //                                           .read
		input  wire [7:0]  lcd_avalon_lcd_slave_readdata,                    //                                           .readdata
		output wire [7:0]  lcd_avalon_lcd_slave_writedata,                   //                                           .writedata
		input  wire        lcd_avalon_lcd_slave_waitrequest,                 //                                           .waitrequest
		output wire        lcd_avalon_lcd_slave_chipselect,                  //                                           .chipselect
		output wire [1:0]  lcd_clk_pll_slave_address,                        //                          lcd_clk_pll_slave.address
		output wire        lcd_clk_pll_slave_write,                          //                                           .write
		output wire        lcd_clk_pll_slave_read,                           //                                           .read
		input  wire [31:0] lcd_clk_pll_slave_readdata,                       //                                           .readdata
		output wire [31:0] lcd_clk_pll_slave_writedata,                      //                                           .writedata
		output wire [8:0]  nios2_qsys_0_jtag_debug_module_address,           //             nios2_qsys_0_jtag_debug_module.address
		output wire        nios2_qsys_0_jtag_debug_module_write,             //                                           .write
		output wire        nios2_qsys_0_jtag_debug_module_read,              //                                           .read
		input  wire [31:0] nios2_qsys_0_jtag_debug_module_readdata,          //                                           .readdata
		output wire [31:0] nios2_qsys_0_jtag_debug_module_writedata,         //                                           .writedata
		output wire [3:0]  nios2_qsys_0_jtag_debug_module_byteenable,        //                                           .byteenable
		input  wire        nios2_qsys_0_jtag_debug_module_waitrequest,       //                                           .waitrequest
		output wire        nios2_qsys_0_jtag_debug_module_debugaccess,       //                                           .debugaccess
		output wire [1:0]  output_port_s1_address,                           //                             output_port_s1.address
		output wire        output_port_s1_write,                             //                                           .write
		input  wire [31:0] output_port_s1_readdata,                          //                                           .readdata
		output wire [31:0] output_port_s1_writedata,                         //                                           .writedata
		output wire        output_port_s1_chipselect,                        //                                           .chipselect
		output wire [7:0]  red_interface_control_port_address,               //                 red_interface_control_port.address
		output wire        red_interface_control_port_write,                 //                                           .write
		output wire        red_interface_control_port_read,                  //                                           .read
		input  wire [31:0] red_interface_control_port_readdata,              //                                           .readdata
		output wire [31:0] red_interface_control_port_writedata,             //                                           .writedata
		input  wire        red_interface_control_port_waitrequest,           //                                           .waitrequest
		output wire [3:0]  red_rx_csr_address,                               //                                 red_rx_csr.address
		output wire        red_rx_csr_write,                                 //                                           .write
		output wire        red_rx_csr_read,                                  //                                           .read
		input  wire [31:0] red_rx_csr_readdata,                              //                                           .readdata
		output wire [31:0] red_rx_csr_writedata,                             //                                           .writedata
		output wire        red_rx_csr_chipselect,                            //                                           .chipselect
		output wire [13:0] red_to_black_memory_s1_address,                   //                     red_to_black_memory_s1.address
		output wire        red_to_black_memory_s1_write,                     //                                           .write
		input  wire [31:0] red_to_black_memory_s1_readdata,                  //                                           .readdata
		output wire [31:0] red_to_black_memory_s1_writedata,                 //                                           .writedata
		output wire [3:0]  red_to_black_memory_s1_byteenable,                //                                           .byteenable
		output wire        red_to_black_memory_s1_chipselect,                //                                           .chipselect
		output wire        red_to_black_memory_s1_clken,                     //                                           .clken
		output wire [3:0]  red_tx_csr_address,                               //                                 red_tx_csr.address
		output wire        red_tx_csr_write,                                 //                                           .write
		output wire        red_tx_csr_read,                                  //                                           .read
		input  wire [31:0] red_tx_csr_readdata,                              //                                           .readdata
		output wire [31:0] red_tx_csr_writedata,                             //                                           .writedata
		output wire        red_tx_csr_chipselect,                            //                                           .chipselect
		output wire [0:0]  system_id_control_slave_address,                  //                    system_id_control_slave.address
		input  wire [31:0] system_id_control_slave_readdata,                 //                                           .readdata
		output wire [3:0]  system_timer_s1_address,                          //                            system_timer_s1.address
		output wire        system_timer_s1_write,                            //                                           .write
		input  wire [15:0] system_timer_s1_readdata,                         //                                           .readdata
		output wire [15:0] system_timer_s1_writedata,                        //                                           .writedata
		output wire        system_timer_s1_chipselect,                       //                                           .chipselect
		output wire [2:0]  ted_decryptor_csr_address,                        //                          ted_decryptor_csr.address
		output wire        ted_decryptor_csr_write,                          //                                           .write
		input  wire [31:0] ted_decryptor_csr_readdata,                       //                                           .readdata
		output wire [31:0] ted_decryptor_csr_writedata,                      //                                           .writedata
		output wire [2:0]  ted_encryptor_csr_address,                        //                          ted_encryptor_csr.address
		output wire        ted_encryptor_csr_write,                          //                                           .write
		input  wire [31:0] ted_encryptor_csr_readdata,                       //                                           .readdata
		output wire [31:0] ted_encryptor_csr_writedata                       //                                           .writedata
	);

	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_waitrequest;          // nios2_qsys_0_data_master_agent:av_waitrequest -> nios2_qsys_0_data_master_translator:uav_waitrequest
	wire   [31:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdata;             // nios2_qsys_0_data_master_agent:av_readdata -> nios2_qsys_0_data_master_translator:uav_readdata
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_debugaccess;          // nios2_qsys_0_data_master_translator:uav_debugaccess -> nios2_qsys_0_data_master_agent:av_debugaccess
	wire   [31:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_address;              // nios2_qsys_0_data_master_translator:uav_address -> nios2_qsys_0_data_master_agent:av_address
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_read;                 // nios2_qsys_0_data_master_translator:uav_read -> nios2_qsys_0_data_master_agent:av_read
	wire    [3:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_byteenable;           // nios2_qsys_0_data_master_translator:uav_byteenable -> nios2_qsys_0_data_master_agent:av_byteenable
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdatavalid;        // nios2_qsys_0_data_master_agent:av_readdatavalid -> nios2_qsys_0_data_master_translator:uav_readdatavalid
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_lock;                 // nios2_qsys_0_data_master_translator:uav_lock -> nios2_qsys_0_data_master_agent:av_lock
	wire          nios2_qsys_0_data_master_translator_avalon_universal_master_0_write;                // nios2_qsys_0_data_master_translator:uav_write -> nios2_qsys_0_data_master_agent:av_write
	wire   [31:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_writedata;            // nios2_qsys_0_data_master_translator:uav_writedata -> nios2_qsys_0_data_master_agent:av_writedata
	wire    [2:0] nios2_qsys_0_data_master_translator_avalon_universal_master_0_burstcount;           // nios2_qsys_0_data_master_translator:uav_burstcount -> nios2_qsys_0_data_master_agent:av_burstcount
	wire          rsp_mux_src_valid;                                                                  // rsp_mux:src_valid -> nios2_qsys_0_data_master_agent:rp_valid
	wire  [111:0] rsp_mux_src_data;                                                                   // rsp_mux:src_data -> nios2_qsys_0_data_master_agent:rp_data
	wire          rsp_mux_src_ready;                                                                  // nios2_qsys_0_data_master_agent:rp_ready -> rsp_mux:src_ready
	wire   [21:0] rsp_mux_src_channel;                                                                // rsp_mux:src_channel -> nios2_qsys_0_data_master_agent:rp_channel
	wire          rsp_mux_src_startofpacket;                                                          // rsp_mux:src_startofpacket -> nios2_qsys_0_data_master_agent:rp_startofpacket
	wire          rsp_mux_src_endofpacket;                                                            // rsp_mux:src_endofpacket -> nios2_qsys_0_data_master_agent:rp_endofpacket
	wire          red_rx_descriptor_read_translator_avalon_universal_master_0_waitrequest;            // red_rx_descriptor_read_agent:av_waitrequest -> red_rx_descriptor_read_translator:uav_waitrequest
	wire   [31:0] red_rx_descriptor_read_translator_avalon_universal_master_0_readdata;               // red_rx_descriptor_read_agent:av_readdata -> red_rx_descriptor_read_translator:uav_readdata
	wire          red_rx_descriptor_read_translator_avalon_universal_master_0_debugaccess;            // red_rx_descriptor_read_translator:uav_debugaccess -> red_rx_descriptor_read_agent:av_debugaccess
	wire   [31:0] red_rx_descriptor_read_translator_avalon_universal_master_0_address;                // red_rx_descriptor_read_translator:uav_address -> red_rx_descriptor_read_agent:av_address
	wire          red_rx_descriptor_read_translator_avalon_universal_master_0_read;                   // red_rx_descriptor_read_translator:uav_read -> red_rx_descriptor_read_agent:av_read
	wire    [3:0] red_rx_descriptor_read_translator_avalon_universal_master_0_byteenable;             // red_rx_descriptor_read_translator:uav_byteenable -> red_rx_descriptor_read_agent:av_byteenable
	wire          red_rx_descriptor_read_translator_avalon_universal_master_0_readdatavalid;          // red_rx_descriptor_read_agent:av_readdatavalid -> red_rx_descriptor_read_translator:uav_readdatavalid
	wire          red_rx_descriptor_read_translator_avalon_universal_master_0_lock;                   // red_rx_descriptor_read_translator:uav_lock -> red_rx_descriptor_read_agent:av_lock
	wire          red_rx_descriptor_read_translator_avalon_universal_master_0_write;                  // red_rx_descriptor_read_translator:uav_write -> red_rx_descriptor_read_agent:av_write
	wire   [31:0] red_rx_descriptor_read_translator_avalon_universal_master_0_writedata;              // red_rx_descriptor_read_translator:uav_writedata -> red_rx_descriptor_read_agent:av_writedata
	wire    [2:0] red_rx_descriptor_read_translator_avalon_universal_master_0_burstcount;             // red_rx_descriptor_read_translator:uav_burstcount -> red_rx_descriptor_read_agent:av_burstcount
	wire          rsp_mux_001_src_valid;                                                              // rsp_mux_001:src_valid -> red_rx_descriptor_read_agent:rp_valid
	wire  [111:0] rsp_mux_001_src_data;                                                               // rsp_mux_001:src_data -> red_rx_descriptor_read_agent:rp_data
	wire          rsp_mux_001_src_ready;                                                              // red_rx_descriptor_read_agent:rp_ready -> rsp_mux_001:src_ready
	wire   [21:0] rsp_mux_001_src_channel;                                                            // rsp_mux_001:src_channel -> red_rx_descriptor_read_agent:rp_channel
	wire          rsp_mux_001_src_startofpacket;                                                      // rsp_mux_001:src_startofpacket -> red_rx_descriptor_read_agent:rp_startofpacket
	wire          rsp_mux_001_src_endofpacket;                                                        // rsp_mux_001:src_endofpacket -> red_rx_descriptor_read_agent:rp_endofpacket
	wire          red_tx_descriptor_read_translator_avalon_universal_master_0_waitrequest;            // red_tx_descriptor_read_agent:av_waitrequest -> red_tx_descriptor_read_translator:uav_waitrequest
	wire   [31:0] red_tx_descriptor_read_translator_avalon_universal_master_0_readdata;               // red_tx_descriptor_read_agent:av_readdata -> red_tx_descriptor_read_translator:uav_readdata
	wire          red_tx_descriptor_read_translator_avalon_universal_master_0_debugaccess;            // red_tx_descriptor_read_translator:uav_debugaccess -> red_tx_descriptor_read_agent:av_debugaccess
	wire   [31:0] red_tx_descriptor_read_translator_avalon_universal_master_0_address;                // red_tx_descriptor_read_translator:uav_address -> red_tx_descriptor_read_agent:av_address
	wire          red_tx_descriptor_read_translator_avalon_universal_master_0_read;                   // red_tx_descriptor_read_translator:uav_read -> red_tx_descriptor_read_agent:av_read
	wire    [3:0] red_tx_descriptor_read_translator_avalon_universal_master_0_byteenable;             // red_tx_descriptor_read_translator:uav_byteenable -> red_tx_descriptor_read_agent:av_byteenable
	wire          red_tx_descriptor_read_translator_avalon_universal_master_0_readdatavalid;          // red_tx_descriptor_read_agent:av_readdatavalid -> red_tx_descriptor_read_translator:uav_readdatavalid
	wire          red_tx_descriptor_read_translator_avalon_universal_master_0_lock;                   // red_tx_descriptor_read_translator:uav_lock -> red_tx_descriptor_read_agent:av_lock
	wire          red_tx_descriptor_read_translator_avalon_universal_master_0_write;                  // red_tx_descriptor_read_translator:uav_write -> red_tx_descriptor_read_agent:av_write
	wire   [31:0] red_tx_descriptor_read_translator_avalon_universal_master_0_writedata;              // red_tx_descriptor_read_translator:uav_writedata -> red_tx_descriptor_read_agent:av_writedata
	wire    [2:0] red_tx_descriptor_read_translator_avalon_universal_master_0_burstcount;             // red_tx_descriptor_read_translator:uav_burstcount -> red_tx_descriptor_read_agent:av_burstcount
	wire          rsp_mux_002_src_valid;                                                              // rsp_mux_002:src_valid -> red_tx_descriptor_read_agent:rp_valid
	wire  [111:0] rsp_mux_002_src_data;                                                               // rsp_mux_002:src_data -> red_tx_descriptor_read_agent:rp_data
	wire          rsp_mux_002_src_ready;                                                              // red_tx_descriptor_read_agent:rp_ready -> rsp_mux_002:src_ready
	wire   [21:0] rsp_mux_002_src_channel;                                                            // rsp_mux_002:src_channel -> red_tx_descriptor_read_agent:rp_channel
	wire          rsp_mux_002_src_startofpacket;                                                      // rsp_mux_002:src_startofpacket -> red_tx_descriptor_read_agent:rp_startofpacket
	wire          rsp_mux_002_src_endofpacket;                                                        // rsp_mux_002:src_endofpacket -> red_tx_descriptor_read_agent:rp_endofpacket
	wire          black_rx_descriptor_read_translator_avalon_universal_master_0_waitrequest;          // black_rx_descriptor_read_agent:av_waitrequest -> black_rx_descriptor_read_translator:uav_waitrequest
	wire   [31:0] black_rx_descriptor_read_translator_avalon_universal_master_0_readdata;             // black_rx_descriptor_read_agent:av_readdata -> black_rx_descriptor_read_translator:uav_readdata
	wire          black_rx_descriptor_read_translator_avalon_universal_master_0_debugaccess;          // black_rx_descriptor_read_translator:uav_debugaccess -> black_rx_descriptor_read_agent:av_debugaccess
	wire   [31:0] black_rx_descriptor_read_translator_avalon_universal_master_0_address;              // black_rx_descriptor_read_translator:uav_address -> black_rx_descriptor_read_agent:av_address
	wire          black_rx_descriptor_read_translator_avalon_universal_master_0_read;                 // black_rx_descriptor_read_translator:uav_read -> black_rx_descriptor_read_agent:av_read
	wire    [3:0] black_rx_descriptor_read_translator_avalon_universal_master_0_byteenable;           // black_rx_descriptor_read_translator:uav_byteenable -> black_rx_descriptor_read_agent:av_byteenable
	wire          black_rx_descriptor_read_translator_avalon_universal_master_0_readdatavalid;        // black_rx_descriptor_read_agent:av_readdatavalid -> black_rx_descriptor_read_translator:uav_readdatavalid
	wire          black_rx_descriptor_read_translator_avalon_universal_master_0_lock;                 // black_rx_descriptor_read_translator:uav_lock -> black_rx_descriptor_read_agent:av_lock
	wire          black_rx_descriptor_read_translator_avalon_universal_master_0_write;                // black_rx_descriptor_read_translator:uav_write -> black_rx_descriptor_read_agent:av_write
	wire   [31:0] black_rx_descriptor_read_translator_avalon_universal_master_0_writedata;            // black_rx_descriptor_read_translator:uav_writedata -> black_rx_descriptor_read_agent:av_writedata
	wire    [2:0] black_rx_descriptor_read_translator_avalon_universal_master_0_burstcount;           // black_rx_descriptor_read_translator:uav_burstcount -> black_rx_descriptor_read_agent:av_burstcount
	wire          rsp_mux_003_src_valid;                                                              // rsp_mux_003:src_valid -> black_rx_descriptor_read_agent:rp_valid
	wire  [111:0] rsp_mux_003_src_data;                                                               // rsp_mux_003:src_data -> black_rx_descriptor_read_agent:rp_data
	wire          rsp_mux_003_src_ready;                                                              // black_rx_descriptor_read_agent:rp_ready -> rsp_mux_003:src_ready
	wire   [21:0] rsp_mux_003_src_channel;                                                            // rsp_mux_003:src_channel -> black_rx_descriptor_read_agent:rp_channel
	wire          rsp_mux_003_src_startofpacket;                                                      // rsp_mux_003:src_startofpacket -> black_rx_descriptor_read_agent:rp_startofpacket
	wire          rsp_mux_003_src_endofpacket;                                                        // rsp_mux_003:src_endofpacket -> black_rx_descriptor_read_agent:rp_endofpacket
	wire          black_tx_descriptor_read_translator_avalon_universal_master_0_waitrequest;          // black_tx_descriptor_read_agent:av_waitrequest -> black_tx_descriptor_read_translator:uav_waitrequest
	wire   [31:0] black_tx_descriptor_read_translator_avalon_universal_master_0_readdata;             // black_tx_descriptor_read_agent:av_readdata -> black_tx_descriptor_read_translator:uav_readdata
	wire          black_tx_descriptor_read_translator_avalon_universal_master_0_debugaccess;          // black_tx_descriptor_read_translator:uav_debugaccess -> black_tx_descriptor_read_agent:av_debugaccess
	wire   [31:0] black_tx_descriptor_read_translator_avalon_universal_master_0_address;              // black_tx_descriptor_read_translator:uav_address -> black_tx_descriptor_read_agent:av_address
	wire          black_tx_descriptor_read_translator_avalon_universal_master_0_read;                 // black_tx_descriptor_read_translator:uav_read -> black_tx_descriptor_read_agent:av_read
	wire    [3:0] black_tx_descriptor_read_translator_avalon_universal_master_0_byteenable;           // black_tx_descriptor_read_translator:uav_byteenable -> black_tx_descriptor_read_agent:av_byteenable
	wire          black_tx_descriptor_read_translator_avalon_universal_master_0_readdatavalid;        // black_tx_descriptor_read_agent:av_readdatavalid -> black_tx_descriptor_read_translator:uav_readdatavalid
	wire          black_tx_descriptor_read_translator_avalon_universal_master_0_lock;                 // black_tx_descriptor_read_translator:uav_lock -> black_tx_descriptor_read_agent:av_lock
	wire          black_tx_descriptor_read_translator_avalon_universal_master_0_write;                // black_tx_descriptor_read_translator:uav_write -> black_tx_descriptor_read_agent:av_write
	wire   [31:0] black_tx_descriptor_read_translator_avalon_universal_master_0_writedata;            // black_tx_descriptor_read_translator:uav_writedata -> black_tx_descriptor_read_agent:av_writedata
	wire    [2:0] black_tx_descriptor_read_translator_avalon_universal_master_0_burstcount;           // black_tx_descriptor_read_translator:uav_burstcount -> black_tx_descriptor_read_agent:av_burstcount
	wire          rsp_mux_004_src_valid;                                                              // rsp_mux_004:src_valid -> black_tx_descriptor_read_agent:rp_valid
	wire  [111:0] rsp_mux_004_src_data;                                                               // rsp_mux_004:src_data -> black_tx_descriptor_read_agent:rp_data
	wire          rsp_mux_004_src_ready;                                                              // black_tx_descriptor_read_agent:rp_ready -> rsp_mux_004:src_ready
	wire   [21:0] rsp_mux_004_src_channel;                                                            // rsp_mux_004:src_channel -> black_tx_descriptor_read_agent:rp_channel
	wire          rsp_mux_004_src_startofpacket;                                                      // rsp_mux_004:src_startofpacket -> black_tx_descriptor_read_agent:rp_startofpacket
	wire          rsp_mux_004_src_endofpacket;                                                        // rsp_mux_004:src_endofpacket -> black_tx_descriptor_read_agent:rp_endofpacket
	wire          red_rx_descriptor_write_translator_avalon_universal_master_0_waitrequest;           // red_rx_descriptor_write_agent:av_waitrequest -> red_rx_descriptor_write_translator:uav_waitrequest
	wire   [31:0] red_rx_descriptor_write_translator_avalon_universal_master_0_readdata;              // red_rx_descriptor_write_agent:av_readdata -> red_rx_descriptor_write_translator:uav_readdata
	wire          red_rx_descriptor_write_translator_avalon_universal_master_0_debugaccess;           // red_rx_descriptor_write_translator:uav_debugaccess -> red_rx_descriptor_write_agent:av_debugaccess
	wire   [31:0] red_rx_descriptor_write_translator_avalon_universal_master_0_address;               // red_rx_descriptor_write_translator:uav_address -> red_rx_descriptor_write_agent:av_address
	wire          red_rx_descriptor_write_translator_avalon_universal_master_0_read;                  // red_rx_descriptor_write_translator:uav_read -> red_rx_descriptor_write_agent:av_read
	wire    [3:0] red_rx_descriptor_write_translator_avalon_universal_master_0_byteenable;            // red_rx_descriptor_write_translator:uav_byteenable -> red_rx_descriptor_write_agent:av_byteenable
	wire          red_rx_descriptor_write_translator_avalon_universal_master_0_readdatavalid;         // red_rx_descriptor_write_agent:av_readdatavalid -> red_rx_descriptor_write_translator:uav_readdatavalid
	wire          red_rx_descriptor_write_translator_avalon_universal_master_0_lock;                  // red_rx_descriptor_write_translator:uav_lock -> red_rx_descriptor_write_agent:av_lock
	wire          red_rx_descriptor_write_translator_avalon_universal_master_0_write;                 // red_rx_descriptor_write_translator:uav_write -> red_rx_descriptor_write_agent:av_write
	wire   [31:0] red_rx_descriptor_write_translator_avalon_universal_master_0_writedata;             // red_rx_descriptor_write_translator:uav_writedata -> red_rx_descriptor_write_agent:av_writedata
	wire    [2:0] red_rx_descriptor_write_translator_avalon_universal_master_0_burstcount;            // red_rx_descriptor_write_translator:uav_burstcount -> red_rx_descriptor_write_agent:av_burstcount
	wire          rsp_mux_005_src_valid;                                                              // rsp_mux_005:src_valid -> red_rx_descriptor_write_agent:rp_valid
	wire  [111:0] rsp_mux_005_src_data;                                                               // rsp_mux_005:src_data -> red_rx_descriptor_write_agent:rp_data
	wire          rsp_mux_005_src_ready;                                                              // red_rx_descriptor_write_agent:rp_ready -> rsp_mux_005:src_ready
	wire   [21:0] rsp_mux_005_src_channel;                                                            // rsp_mux_005:src_channel -> red_rx_descriptor_write_agent:rp_channel
	wire          rsp_mux_005_src_startofpacket;                                                      // rsp_mux_005:src_startofpacket -> red_rx_descriptor_write_agent:rp_startofpacket
	wire          rsp_mux_005_src_endofpacket;                                                        // rsp_mux_005:src_endofpacket -> red_rx_descriptor_write_agent:rp_endofpacket
	wire          red_tx_descriptor_write_translator_avalon_universal_master_0_waitrequest;           // red_tx_descriptor_write_agent:av_waitrequest -> red_tx_descriptor_write_translator:uav_waitrequest
	wire   [31:0] red_tx_descriptor_write_translator_avalon_universal_master_0_readdata;              // red_tx_descriptor_write_agent:av_readdata -> red_tx_descriptor_write_translator:uav_readdata
	wire          red_tx_descriptor_write_translator_avalon_universal_master_0_debugaccess;           // red_tx_descriptor_write_translator:uav_debugaccess -> red_tx_descriptor_write_agent:av_debugaccess
	wire   [31:0] red_tx_descriptor_write_translator_avalon_universal_master_0_address;               // red_tx_descriptor_write_translator:uav_address -> red_tx_descriptor_write_agent:av_address
	wire          red_tx_descriptor_write_translator_avalon_universal_master_0_read;                  // red_tx_descriptor_write_translator:uav_read -> red_tx_descriptor_write_agent:av_read
	wire    [3:0] red_tx_descriptor_write_translator_avalon_universal_master_0_byteenable;            // red_tx_descriptor_write_translator:uav_byteenable -> red_tx_descriptor_write_agent:av_byteenable
	wire          red_tx_descriptor_write_translator_avalon_universal_master_0_readdatavalid;         // red_tx_descriptor_write_agent:av_readdatavalid -> red_tx_descriptor_write_translator:uav_readdatavalid
	wire          red_tx_descriptor_write_translator_avalon_universal_master_0_lock;                  // red_tx_descriptor_write_translator:uav_lock -> red_tx_descriptor_write_agent:av_lock
	wire          red_tx_descriptor_write_translator_avalon_universal_master_0_write;                 // red_tx_descriptor_write_translator:uav_write -> red_tx_descriptor_write_agent:av_write
	wire   [31:0] red_tx_descriptor_write_translator_avalon_universal_master_0_writedata;             // red_tx_descriptor_write_translator:uav_writedata -> red_tx_descriptor_write_agent:av_writedata
	wire    [2:0] red_tx_descriptor_write_translator_avalon_universal_master_0_burstcount;            // red_tx_descriptor_write_translator:uav_burstcount -> red_tx_descriptor_write_agent:av_burstcount
	wire          rsp_mux_006_src_valid;                                                              // rsp_mux_006:src_valid -> red_tx_descriptor_write_agent:rp_valid
	wire  [111:0] rsp_mux_006_src_data;                                                               // rsp_mux_006:src_data -> red_tx_descriptor_write_agent:rp_data
	wire          rsp_mux_006_src_ready;                                                              // red_tx_descriptor_write_agent:rp_ready -> rsp_mux_006:src_ready
	wire   [21:0] rsp_mux_006_src_channel;                                                            // rsp_mux_006:src_channel -> red_tx_descriptor_write_agent:rp_channel
	wire          rsp_mux_006_src_startofpacket;                                                      // rsp_mux_006:src_startofpacket -> red_tx_descriptor_write_agent:rp_startofpacket
	wire          rsp_mux_006_src_endofpacket;                                                        // rsp_mux_006:src_endofpacket -> red_tx_descriptor_write_agent:rp_endofpacket
	wire          black_rx_descriptor_write_translator_avalon_universal_master_0_waitrequest;         // black_rx_descriptor_write_agent:av_waitrequest -> black_rx_descriptor_write_translator:uav_waitrequest
	wire   [31:0] black_rx_descriptor_write_translator_avalon_universal_master_0_readdata;            // black_rx_descriptor_write_agent:av_readdata -> black_rx_descriptor_write_translator:uav_readdata
	wire          black_rx_descriptor_write_translator_avalon_universal_master_0_debugaccess;         // black_rx_descriptor_write_translator:uav_debugaccess -> black_rx_descriptor_write_agent:av_debugaccess
	wire   [31:0] black_rx_descriptor_write_translator_avalon_universal_master_0_address;             // black_rx_descriptor_write_translator:uav_address -> black_rx_descriptor_write_agent:av_address
	wire          black_rx_descriptor_write_translator_avalon_universal_master_0_read;                // black_rx_descriptor_write_translator:uav_read -> black_rx_descriptor_write_agent:av_read
	wire    [3:0] black_rx_descriptor_write_translator_avalon_universal_master_0_byteenable;          // black_rx_descriptor_write_translator:uav_byteenable -> black_rx_descriptor_write_agent:av_byteenable
	wire          black_rx_descriptor_write_translator_avalon_universal_master_0_readdatavalid;       // black_rx_descriptor_write_agent:av_readdatavalid -> black_rx_descriptor_write_translator:uav_readdatavalid
	wire          black_rx_descriptor_write_translator_avalon_universal_master_0_lock;                // black_rx_descriptor_write_translator:uav_lock -> black_rx_descriptor_write_agent:av_lock
	wire          black_rx_descriptor_write_translator_avalon_universal_master_0_write;               // black_rx_descriptor_write_translator:uav_write -> black_rx_descriptor_write_agent:av_write
	wire   [31:0] black_rx_descriptor_write_translator_avalon_universal_master_0_writedata;           // black_rx_descriptor_write_translator:uav_writedata -> black_rx_descriptor_write_agent:av_writedata
	wire    [2:0] black_rx_descriptor_write_translator_avalon_universal_master_0_burstcount;          // black_rx_descriptor_write_translator:uav_burstcount -> black_rx_descriptor_write_agent:av_burstcount
	wire          rsp_mux_007_src_valid;                                                              // rsp_mux_007:src_valid -> black_rx_descriptor_write_agent:rp_valid
	wire  [111:0] rsp_mux_007_src_data;                                                               // rsp_mux_007:src_data -> black_rx_descriptor_write_agent:rp_data
	wire          rsp_mux_007_src_ready;                                                              // black_rx_descriptor_write_agent:rp_ready -> rsp_mux_007:src_ready
	wire   [21:0] rsp_mux_007_src_channel;                                                            // rsp_mux_007:src_channel -> black_rx_descriptor_write_agent:rp_channel
	wire          rsp_mux_007_src_startofpacket;                                                      // rsp_mux_007:src_startofpacket -> black_rx_descriptor_write_agent:rp_startofpacket
	wire          rsp_mux_007_src_endofpacket;                                                        // rsp_mux_007:src_endofpacket -> black_rx_descriptor_write_agent:rp_endofpacket
	wire          black_tx_descriptor_write_translator_avalon_universal_master_0_waitrequest;         // black_tx_descriptor_write_agent:av_waitrequest -> black_tx_descriptor_write_translator:uav_waitrequest
	wire   [31:0] black_tx_descriptor_write_translator_avalon_universal_master_0_readdata;            // black_tx_descriptor_write_agent:av_readdata -> black_tx_descriptor_write_translator:uav_readdata
	wire          black_tx_descriptor_write_translator_avalon_universal_master_0_debugaccess;         // black_tx_descriptor_write_translator:uav_debugaccess -> black_tx_descriptor_write_agent:av_debugaccess
	wire   [31:0] black_tx_descriptor_write_translator_avalon_universal_master_0_address;             // black_tx_descriptor_write_translator:uav_address -> black_tx_descriptor_write_agent:av_address
	wire          black_tx_descriptor_write_translator_avalon_universal_master_0_read;                // black_tx_descriptor_write_translator:uav_read -> black_tx_descriptor_write_agent:av_read
	wire    [3:0] black_tx_descriptor_write_translator_avalon_universal_master_0_byteenable;          // black_tx_descriptor_write_translator:uav_byteenable -> black_tx_descriptor_write_agent:av_byteenable
	wire          black_tx_descriptor_write_translator_avalon_universal_master_0_readdatavalid;       // black_tx_descriptor_write_agent:av_readdatavalid -> black_tx_descriptor_write_translator:uav_readdatavalid
	wire          black_tx_descriptor_write_translator_avalon_universal_master_0_lock;                // black_tx_descriptor_write_translator:uav_lock -> black_tx_descriptor_write_agent:av_lock
	wire          black_tx_descriptor_write_translator_avalon_universal_master_0_write;               // black_tx_descriptor_write_translator:uav_write -> black_tx_descriptor_write_agent:av_write
	wire   [31:0] black_tx_descriptor_write_translator_avalon_universal_master_0_writedata;           // black_tx_descriptor_write_translator:uav_writedata -> black_tx_descriptor_write_agent:av_writedata
	wire    [2:0] black_tx_descriptor_write_translator_avalon_universal_master_0_burstcount;          // black_tx_descriptor_write_translator:uav_burstcount -> black_tx_descriptor_write_agent:av_burstcount
	wire          rsp_mux_008_src_valid;                                                              // rsp_mux_008:src_valid -> black_tx_descriptor_write_agent:rp_valid
	wire  [111:0] rsp_mux_008_src_data;                                                               // rsp_mux_008:src_data -> black_tx_descriptor_write_agent:rp_data
	wire          rsp_mux_008_src_ready;                                                              // black_tx_descriptor_write_agent:rp_ready -> rsp_mux_008:src_ready
	wire   [21:0] rsp_mux_008_src_channel;                                                            // rsp_mux_008:src_channel -> black_tx_descriptor_write_agent:rp_channel
	wire          rsp_mux_008_src_startofpacket;                                                      // rsp_mux_008:src_startofpacket -> black_tx_descriptor_write_agent:rp_startofpacket
	wire          rsp_mux_008_src_endofpacket;                                                        // rsp_mux_008:src_endofpacket -> black_tx_descriptor_write_agent:rp_endofpacket
	wire          red_tx_m_read_translator_avalon_universal_master_0_waitrequest;                     // red_tx_m_read_agent:av_waitrequest -> red_tx_m_read_translator:uav_waitrequest
	wire   [31:0] red_tx_m_read_translator_avalon_universal_master_0_readdata;                        // red_tx_m_read_agent:av_readdata -> red_tx_m_read_translator:uav_readdata
	wire          red_tx_m_read_translator_avalon_universal_master_0_debugaccess;                     // red_tx_m_read_translator:uav_debugaccess -> red_tx_m_read_agent:av_debugaccess
	wire   [31:0] red_tx_m_read_translator_avalon_universal_master_0_address;                         // red_tx_m_read_translator:uav_address -> red_tx_m_read_agent:av_address
	wire          red_tx_m_read_translator_avalon_universal_master_0_read;                            // red_tx_m_read_translator:uav_read -> red_tx_m_read_agent:av_read
	wire    [3:0] red_tx_m_read_translator_avalon_universal_master_0_byteenable;                      // red_tx_m_read_translator:uav_byteenable -> red_tx_m_read_agent:av_byteenable
	wire          red_tx_m_read_translator_avalon_universal_master_0_readdatavalid;                   // red_tx_m_read_agent:av_readdatavalid -> red_tx_m_read_translator:uav_readdatavalid
	wire          red_tx_m_read_translator_avalon_universal_master_0_lock;                            // red_tx_m_read_translator:uav_lock -> red_tx_m_read_agent:av_lock
	wire          red_tx_m_read_translator_avalon_universal_master_0_write;                           // red_tx_m_read_translator:uav_write -> red_tx_m_read_agent:av_write
	wire   [31:0] red_tx_m_read_translator_avalon_universal_master_0_writedata;                       // red_tx_m_read_translator:uav_writedata -> red_tx_m_read_agent:av_writedata
	wire    [2:0] red_tx_m_read_translator_avalon_universal_master_0_burstcount;                      // red_tx_m_read_translator:uav_burstcount -> red_tx_m_read_agent:av_burstcount
	wire          rsp_mux_009_src_valid;                                                              // rsp_mux_009:src_valid -> red_tx_m_read_agent:rp_valid
	wire  [111:0] rsp_mux_009_src_data;                                                               // rsp_mux_009:src_data -> red_tx_m_read_agent:rp_data
	wire          rsp_mux_009_src_ready;                                                              // red_tx_m_read_agent:rp_ready -> rsp_mux_009:src_ready
	wire   [21:0] rsp_mux_009_src_channel;                                                            // rsp_mux_009:src_channel -> red_tx_m_read_agent:rp_channel
	wire          rsp_mux_009_src_startofpacket;                                                      // rsp_mux_009:src_startofpacket -> red_tx_m_read_agent:rp_startofpacket
	wire          rsp_mux_009_src_endofpacket;                                                        // rsp_mux_009:src_endofpacket -> red_tx_m_read_agent:rp_endofpacket
	wire          black_rx_m_write_translator_avalon_universal_master_0_waitrequest;                  // black_rx_m_write_agent:av_waitrequest -> black_rx_m_write_translator:uav_waitrequest
	wire   [31:0] black_rx_m_write_translator_avalon_universal_master_0_readdata;                     // black_rx_m_write_agent:av_readdata -> black_rx_m_write_translator:uav_readdata
	wire          black_rx_m_write_translator_avalon_universal_master_0_debugaccess;                  // black_rx_m_write_translator:uav_debugaccess -> black_rx_m_write_agent:av_debugaccess
	wire   [31:0] black_rx_m_write_translator_avalon_universal_master_0_address;                      // black_rx_m_write_translator:uav_address -> black_rx_m_write_agent:av_address
	wire          black_rx_m_write_translator_avalon_universal_master_0_read;                         // black_rx_m_write_translator:uav_read -> black_rx_m_write_agent:av_read
	wire    [3:0] black_rx_m_write_translator_avalon_universal_master_0_byteenable;                   // black_rx_m_write_translator:uav_byteenable -> black_rx_m_write_agent:av_byteenable
	wire          black_rx_m_write_translator_avalon_universal_master_0_readdatavalid;                // black_rx_m_write_agent:av_readdatavalid -> black_rx_m_write_translator:uav_readdatavalid
	wire          black_rx_m_write_translator_avalon_universal_master_0_lock;                         // black_rx_m_write_translator:uav_lock -> black_rx_m_write_agent:av_lock
	wire          black_rx_m_write_translator_avalon_universal_master_0_write;                        // black_rx_m_write_translator:uav_write -> black_rx_m_write_agent:av_write
	wire   [31:0] black_rx_m_write_translator_avalon_universal_master_0_writedata;                    // black_rx_m_write_translator:uav_writedata -> black_rx_m_write_agent:av_writedata
	wire    [2:0] black_rx_m_write_translator_avalon_universal_master_0_burstcount;                   // black_rx_m_write_translator:uav_burstcount -> black_rx_m_write_agent:av_burstcount
	wire          rsp_mux_010_src_valid;                                                              // rsp_mux_010:src_valid -> black_rx_m_write_agent:rp_valid
	wire  [111:0] rsp_mux_010_src_data;                                                               // rsp_mux_010:src_data -> black_rx_m_write_agent:rp_data
	wire          rsp_mux_010_src_ready;                                                              // black_rx_m_write_agent:rp_ready -> rsp_mux_010:src_ready
	wire   [21:0] rsp_mux_010_src_channel;                                                            // rsp_mux_010:src_channel -> black_rx_m_write_agent:rp_channel
	wire          rsp_mux_010_src_startofpacket;                                                      // rsp_mux_010:src_startofpacket -> black_rx_m_write_agent:rp_startofpacket
	wire          rsp_mux_010_src_endofpacket;                                                        // rsp_mux_010:src_endofpacket -> black_rx_m_write_agent:rp_endofpacket
	wire          ted_decryptor_read_master_translator_avalon_universal_master_0_waitrequest;         // ted_decryptor_read_master_agent:av_waitrequest -> ted_decryptor_read_master_translator:uav_waitrequest
	wire   [31:0] ted_decryptor_read_master_translator_avalon_universal_master_0_readdata;            // ted_decryptor_read_master_agent:av_readdata -> ted_decryptor_read_master_translator:uav_readdata
	wire          ted_decryptor_read_master_translator_avalon_universal_master_0_debugaccess;         // ted_decryptor_read_master_translator:uav_debugaccess -> ted_decryptor_read_master_agent:av_debugaccess
	wire   [31:0] ted_decryptor_read_master_translator_avalon_universal_master_0_address;             // ted_decryptor_read_master_translator:uav_address -> ted_decryptor_read_master_agent:av_address
	wire          ted_decryptor_read_master_translator_avalon_universal_master_0_read;                // ted_decryptor_read_master_translator:uav_read -> ted_decryptor_read_master_agent:av_read
	wire    [3:0] ted_decryptor_read_master_translator_avalon_universal_master_0_byteenable;          // ted_decryptor_read_master_translator:uav_byteenable -> ted_decryptor_read_master_agent:av_byteenable
	wire          ted_decryptor_read_master_translator_avalon_universal_master_0_readdatavalid;       // ted_decryptor_read_master_agent:av_readdatavalid -> ted_decryptor_read_master_translator:uav_readdatavalid
	wire          ted_decryptor_read_master_translator_avalon_universal_master_0_lock;                // ted_decryptor_read_master_translator:uav_lock -> ted_decryptor_read_master_agent:av_lock
	wire          ted_decryptor_read_master_translator_avalon_universal_master_0_write;               // ted_decryptor_read_master_translator:uav_write -> ted_decryptor_read_master_agent:av_write
	wire   [31:0] ted_decryptor_read_master_translator_avalon_universal_master_0_writedata;           // ted_decryptor_read_master_translator:uav_writedata -> ted_decryptor_read_master_agent:av_writedata
	wire    [2:0] ted_decryptor_read_master_translator_avalon_universal_master_0_burstcount;          // ted_decryptor_read_master_translator:uav_burstcount -> ted_decryptor_read_master_agent:av_burstcount
	wire          rsp_mux_011_src_valid;                                                              // rsp_mux_011:src_valid -> ted_decryptor_read_master_agent:rp_valid
	wire  [111:0] rsp_mux_011_src_data;                                                               // rsp_mux_011:src_data -> ted_decryptor_read_master_agent:rp_data
	wire          rsp_mux_011_src_ready;                                                              // ted_decryptor_read_master_agent:rp_ready -> rsp_mux_011:src_ready
	wire   [21:0] rsp_mux_011_src_channel;                                                            // rsp_mux_011:src_channel -> ted_decryptor_read_master_agent:rp_channel
	wire          rsp_mux_011_src_startofpacket;                                                      // rsp_mux_011:src_startofpacket -> ted_decryptor_read_master_agent:rp_startofpacket
	wire          rsp_mux_011_src_endofpacket;                                                        // rsp_mux_011:src_endofpacket -> ted_decryptor_read_master_agent:rp_endofpacket
	wire          ted_decryptor_write_master_translator_avalon_universal_master_0_waitrequest;        // ted_decryptor_write_master_agent:av_waitrequest -> ted_decryptor_write_master_translator:uav_waitrequest
	wire   [31:0] ted_decryptor_write_master_translator_avalon_universal_master_0_readdata;           // ted_decryptor_write_master_agent:av_readdata -> ted_decryptor_write_master_translator:uav_readdata
	wire          ted_decryptor_write_master_translator_avalon_universal_master_0_debugaccess;        // ted_decryptor_write_master_translator:uav_debugaccess -> ted_decryptor_write_master_agent:av_debugaccess
	wire   [31:0] ted_decryptor_write_master_translator_avalon_universal_master_0_address;            // ted_decryptor_write_master_translator:uav_address -> ted_decryptor_write_master_agent:av_address
	wire          ted_decryptor_write_master_translator_avalon_universal_master_0_read;               // ted_decryptor_write_master_translator:uav_read -> ted_decryptor_write_master_agent:av_read
	wire    [3:0] ted_decryptor_write_master_translator_avalon_universal_master_0_byteenable;         // ted_decryptor_write_master_translator:uav_byteenable -> ted_decryptor_write_master_agent:av_byteenable
	wire          ted_decryptor_write_master_translator_avalon_universal_master_0_readdatavalid;      // ted_decryptor_write_master_agent:av_readdatavalid -> ted_decryptor_write_master_translator:uav_readdatavalid
	wire          ted_decryptor_write_master_translator_avalon_universal_master_0_lock;               // ted_decryptor_write_master_translator:uav_lock -> ted_decryptor_write_master_agent:av_lock
	wire          ted_decryptor_write_master_translator_avalon_universal_master_0_write;              // ted_decryptor_write_master_translator:uav_write -> ted_decryptor_write_master_agent:av_write
	wire   [31:0] ted_decryptor_write_master_translator_avalon_universal_master_0_writedata;          // ted_decryptor_write_master_translator:uav_writedata -> ted_decryptor_write_master_agent:av_writedata
	wire    [2:0] ted_decryptor_write_master_translator_avalon_universal_master_0_burstcount;         // ted_decryptor_write_master_translator:uav_burstcount -> ted_decryptor_write_master_agent:av_burstcount
	wire          rsp_mux_012_src_valid;                                                              // rsp_mux_012:src_valid -> ted_decryptor_write_master_agent:rp_valid
	wire  [111:0] rsp_mux_012_src_data;                                                               // rsp_mux_012:src_data -> ted_decryptor_write_master_agent:rp_data
	wire          rsp_mux_012_src_ready;                                                              // ted_decryptor_write_master_agent:rp_ready -> rsp_mux_012:src_ready
	wire   [21:0] rsp_mux_012_src_channel;                                                            // rsp_mux_012:src_channel -> ted_decryptor_write_master_agent:rp_channel
	wire          rsp_mux_012_src_startofpacket;                                                      // rsp_mux_012:src_startofpacket -> ted_decryptor_write_master_agent:rp_startofpacket
	wire          rsp_mux_012_src_endofpacket;                                                        // rsp_mux_012:src_endofpacket -> ted_decryptor_write_master_agent:rp_endofpacket
	wire          black_tx_m_read_translator_avalon_universal_master_0_waitrequest;                   // black_tx_m_read_agent:av_waitrequest -> black_tx_m_read_translator:uav_waitrequest
	wire   [31:0] black_tx_m_read_translator_avalon_universal_master_0_readdata;                      // black_tx_m_read_agent:av_readdata -> black_tx_m_read_translator:uav_readdata
	wire          black_tx_m_read_translator_avalon_universal_master_0_debugaccess;                   // black_tx_m_read_translator:uav_debugaccess -> black_tx_m_read_agent:av_debugaccess
	wire   [31:0] black_tx_m_read_translator_avalon_universal_master_0_address;                       // black_tx_m_read_translator:uav_address -> black_tx_m_read_agent:av_address
	wire          black_tx_m_read_translator_avalon_universal_master_0_read;                          // black_tx_m_read_translator:uav_read -> black_tx_m_read_agent:av_read
	wire    [3:0] black_tx_m_read_translator_avalon_universal_master_0_byteenable;                    // black_tx_m_read_translator:uav_byteenable -> black_tx_m_read_agent:av_byteenable
	wire          black_tx_m_read_translator_avalon_universal_master_0_readdatavalid;                 // black_tx_m_read_agent:av_readdatavalid -> black_tx_m_read_translator:uav_readdatavalid
	wire          black_tx_m_read_translator_avalon_universal_master_0_lock;                          // black_tx_m_read_translator:uav_lock -> black_tx_m_read_agent:av_lock
	wire          black_tx_m_read_translator_avalon_universal_master_0_write;                         // black_tx_m_read_translator:uav_write -> black_tx_m_read_agent:av_write
	wire   [31:0] black_tx_m_read_translator_avalon_universal_master_0_writedata;                     // black_tx_m_read_translator:uav_writedata -> black_tx_m_read_agent:av_writedata
	wire    [2:0] black_tx_m_read_translator_avalon_universal_master_0_burstcount;                    // black_tx_m_read_translator:uav_burstcount -> black_tx_m_read_agent:av_burstcount
	wire          rsp_mux_013_src_valid;                                                              // rsp_mux_013:src_valid -> black_tx_m_read_agent:rp_valid
	wire  [111:0] rsp_mux_013_src_data;                                                               // rsp_mux_013:src_data -> black_tx_m_read_agent:rp_data
	wire          rsp_mux_013_src_ready;                                                              // black_tx_m_read_agent:rp_ready -> rsp_mux_013:src_ready
	wire   [21:0] rsp_mux_013_src_channel;                                                            // rsp_mux_013:src_channel -> black_tx_m_read_agent:rp_channel
	wire          rsp_mux_013_src_startofpacket;                                                      // rsp_mux_013:src_startofpacket -> black_tx_m_read_agent:rp_startofpacket
	wire          rsp_mux_013_src_endofpacket;                                                        // rsp_mux_013:src_endofpacket -> black_tx_m_read_agent:rp_endofpacket
	wire          red_rx_m_write_translator_avalon_universal_master_0_waitrequest;                    // red_rx_m_write_agent:av_waitrequest -> red_rx_m_write_translator:uav_waitrequest
	wire   [31:0] red_rx_m_write_translator_avalon_universal_master_0_readdata;                       // red_rx_m_write_agent:av_readdata -> red_rx_m_write_translator:uav_readdata
	wire          red_rx_m_write_translator_avalon_universal_master_0_debugaccess;                    // red_rx_m_write_translator:uav_debugaccess -> red_rx_m_write_agent:av_debugaccess
	wire   [31:0] red_rx_m_write_translator_avalon_universal_master_0_address;                        // red_rx_m_write_translator:uav_address -> red_rx_m_write_agent:av_address
	wire          red_rx_m_write_translator_avalon_universal_master_0_read;                           // red_rx_m_write_translator:uav_read -> red_rx_m_write_agent:av_read
	wire    [3:0] red_rx_m_write_translator_avalon_universal_master_0_byteenable;                     // red_rx_m_write_translator:uav_byteenable -> red_rx_m_write_agent:av_byteenable
	wire          red_rx_m_write_translator_avalon_universal_master_0_readdatavalid;                  // red_rx_m_write_agent:av_readdatavalid -> red_rx_m_write_translator:uav_readdatavalid
	wire          red_rx_m_write_translator_avalon_universal_master_0_lock;                           // red_rx_m_write_translator:uav_lock -> red_rx_m_write_agent:av_lock
	wire          red_rx_m_write_translator_avalon_universal_master_0_write;                          // red_rx_m_write_translator:uav_write -> red_rx_m_write_agent:av_write
	wire   [31:0] red_rx_m_write_translator_avalon_universal_master_0_writedata;                      // red_rx_m_write_translator:uav_writedata -> red_rx_m_write_agent:av_writedata
	wire    [2:0] red_rx_m_write_translator_avalon_universal_master_0_burstcount;                     // red_rx_m_write_translator:uav_burstcount -> red_rx_m_write_agent:av_burstcount
	wire          rsp_mux_014_src_valid;                                                              // rsp_mux_014:src_valid -> red_rx_m_write_agent:rp_valid
	wire  [111:0] rsp_mux_014_src_data;                                                               // rsp_mux_014:src_data -> red_rx_m_write_agent:rp_data
	wire          rsp_mux_014_src_ready;                                                              // red_rx_m_write_agent:rp_ready -> rsp_mux_014:src_ready
	wire   [21:0] rsp_mux_014_src_channel;                                                            // rsp_mux_014:src_channel -> red_rx_m_write_agent:rp_channel
	wire          rsp_mux_014_src_startofpacket;                                                      // rsp_mux_014:src_startofpacket -> red_rx_m_write_agent:rp_startofpacket
	wire          rsp_mux_014_src_endofpacket;                                                        // rsp_mux_014:src_endofpacket -> red_rx_m_write_agent:rp_endofpacket
	wire          ted_encryptor_read_master_translator_avalon_universal_master_0_waitrequest;         // ted_encryptor_read_master_agent:av_waitrequest -> ted_encryptor_read_master_translator:uav_waitrequest
	wire   [31:0] ted_encryptor_read_master_translator_avalon_universal_master_0_readdata;            // ted_encryptor_read_master_agent:av_readdata -> ted_encryptor_read_master_translator:uav_readdata
	wire          ted_encryptor_read_master_translator_avalon_universal_master_0_debugaccess;         // ted_encryptor_read_master_translator:uav_debugaccess -> ted_encryptor_read_master_agent:av_debugaccess
	wire   [31:0] ted_encryptor_read_master_translator_avalon_universal_master_0_address;             // ted_encryptor_read_master_translator:uav_address -> ted_encryptor_read_master_agent:av_address
	wire          ted_encryptor_read_master_translator_avalon_universal_master_0_read;                // ted_encryptor_read_master_translator:uav_read -> ted_encryptor_read_master_agent:av_read
	wire    [3:0] ted_encryptor_read_master_translator_avalon_universal_master_0_byteenable;          // ted_encryptor_read_master_translator:uav_byteenable -> ted_encryptor_read_master_agent:av_byteenable
	wire          ted_encryptor_read_master_translator_avalon_universal_master_0_readdatavalid;       // ted_encryptor_read_master_agent:av_readdatavalid -> ted_encryptor_read_master_translator:uav_readdatavalid
	wire          ted_encryptor_read_master_translator_avalon_universal_master_0_lock;                // ted_encryptor_read_master_translator:uav_lock -> ted_encryptor_read_master_agent:av_lock
	wire          ted_encryptor_read_master_translator_avalon_universal_master_0_write;               // ted_encryptor_read_master_translator:uav_write -> ted_encryptor_read_master_agent:av_write
	wire   [31:0] ted_encryptor_read_master_translator_avalon_universal_master_0_writedata;           // ted_encryptor_read_master_translator:uav_writedata -> ted_encryptor_read_master_agent:av_writedata
	wire    [2:0] ted_encryptor_read_master_translator_avalon_universal_master_0_burstcount;          // ted_encryptor_read_master_translator:uav_burstcount -> ted_encryptor_read_master_agent:av_burstcount
	wire          rsp_mux_015_src_valid;                                                              // rsp_mux_015:src_valid -> ted_encryptor_read_master_agent:rp_valid
	wire  [111:0] rsp_mux_015_src_data;                                                               // rsp_mux_015:src_data -> ted_encryptor_read_master_agent:rp_data
	wire          rsp_mux_015_src_ready;                                                              // ted_encryptor_read_master_agent:rp_ready -> rsp_mux_015:src_ready
	wire   [21:0] rsp_mux_015_src_channel;                                                            // rsp_mux_015:src_channel -> ted_encryptor_read_master_agent:rp_channel
	wire          rsp_mux_015_src_startofpacket;                                                      // rsp_mux_015:src_startofpacket -> ted_encryptor_read_master_agent:rp_startofpacket
	wire          rsp_mux_015_src_endofpacket;                                                        // rsp_mux_015:src_endofpacket -> ted_encryptor_read_master_agent:rp_endofpacket
	wire          ted_encryptor_write_master_translator_avalon_universal_master_0_waitrequest;        // ted_encryptor_write_master_agent:av_waitrequest -> ted_encryptor_write_master_translator:uav_waitrequest
	wire   [31:0] ted_encryptor_write_master_translator_avalon_universal_master_0_readdata;           // ted_encryptor_write_master_agent:av_readdata -> ted_encryptor_write_master_translator:uav_readdata
	wire          ted_encryptor_write_master_translator_avalon_universal_master_0_debugaccess;        // ted_encryptor_write_master_translator:uav_debugaccess -> ted_encryptor_write_master_agent:av_debugaccess
	wire   [31:0] ted_encryptor_write_master_translator_avalon_universal_master_0_address;            // ted_encryptor_write_master_translator:uav_address -> ted_encryptor_write_master_agent:av_address
	wire          ted_encryptor_write_master_translator_avalon_universal_master_0_read;               // ted_encryptor_write_master_translator:uav_read -> ted_encryptor_write_master_agent:av_read
	wire    [3:0] ted_encryptor_write_master_translator_avalon_universal_master_0_byteenable;         // ted_encryptor_write_master_translator:uav_byteenable -> ted_encryptor_write_master_agent:av_byteenable
	wire          ted_encryptor_write_master_translator_avalon_universal_master_0_readdatavalid;      // ted_encryptor_write_master_agent:av_readdatavalid -> ted_encryptor_write_master_translator:uav_readdatavalid
	wire          ted_encryptor_write_master_translator_avalon_universal_master_0_lock;               // ted_encryptor_write_master_translator:uav_lock -> ted_encryptor_write_master_agent:av_lock
	wire          ted_encryptor_write_master_translator_avalon_universal_master_0_write;              // ted_encryptor_write_master_translator:uav_write -> ted_encryptor_write_master_agent:av_write
	wire   [31:0] ted_encryptor_write_master_translator_avalon_universal_master_0_writedata;          // ted_encryptor_write_master_translator:uav_writedata -> ted_encryptor_write_master_agent:av_writedata
	wire    [2:0] ted_encryptor_write_master_translator_avalon_universal_master_0_burstcount;         // ted_encryptor_write_master_translator:uav_burstcount -> ted_encryptor_write_master_agent:av_burstcount
	wire          rsp_mux_016_src_valid;                                                              // rsp_mux_016:src_valid -> ted_encryptor_write_master_agent:rp_valid
	wire  [111:0] rsp_mux_016_src_data;                                                               // rsp_mux_016:src_data -> ted_encryptor_write_master_agent:rp_data
	wire          rsp_mux_016_src_ready;                                                              // ted_encryptor_write_master_agent:rp_ready -> rsp_mux_016:src_ready
	wire   [21:0] rsp_mux_016_src_channel;                                                            // rsp_mux_016:src_channel -> ted_encryptor_write_master_agent:rp_channel
	wire          rsp_mux_016_src_startofpacket;                                                      // rsp_mux_016:src_startofpacket -> ted_encryptor_write_master_agent:rp_startofpacket
	wire          rsp_mux_016_src_endofpacket;                                                        // rsp_mux_016:src_endofpacket -> ted_encryptor_write_master_agent:rp_endofpacket
	wire          nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_waitrequest;   // nios2_qsys_0_instruction_master_agent:av_waitrequest -> nios2_qsys_0_instruction_master_translator:uav_waitrequest
	wire   [31:0] nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdata;      // nios2_qsys_0_instruction_master_agent:av_readdata -> nios2_qsys_0_instruction_master_translator:uav_readdata
	wire          nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_debugaccess;   // nios2_qsys_0_instruction_master_translator:uav_debugaccess -> nios2_qsys_0_instruction_master_agent:av_debugaccess
	wire   [31:0] nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_address;       // nios2_qsys_0_instruction_master_translator:uav_address -> nios2_qsys_0_instruction_master_agent:av_address
	wire          nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_read;          // nios2_qsys_0_instruction_master_translator:uav_read -> nios2_qsys_0_instruction_master_agent:av_read
	wire    [3:0] nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_byteenable;    // nios2_qsys_0_instruction_master_translator:uav_byteenable -> nios2_qsys_0_instruction_master_agent:av_byteenable
	wire          nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdatavalid; // nios2_qsys_0_instruction_master_agent:av_readdatavalid -> nios2_qsys_0_instruction_master_translator:uav_readdatavalid
	wire          nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_lock;          // nios2_qsys_0_instruction_master_translator:uav_lock -> nios2_qsys_0_instruction_master_agent:av_lock
	wire          nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_write;         // nios2_qsys_0_instruction_master_translator:uav_write -> nios2_qsys_0_instruction_master_agent:av_write
	wire   [31:0] nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_writedata;     // nios2_qsys_0_instruction_master_translator:uav_writedata -> nios2_qsys_0_instruction_master_agent:av_writedata
	wire    [2:0] nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_burstcount;    // nios2_qsys_0_instruction_master_translator:uav_burstcount -> nios2_qsys_0_instruction_master_agent:av_burstcount
	wire          rsp_mux_017_src_valid;                                                              // rsp_mux_017:src_valid -> nios2_qsys_0_instruction_master_agent:rp_valid
	wire  [111:0] rsp_mux_017_src_data;                                                               // rsp_mux_017:src_data -> nios2_qsys_0_instruction_master_agent:rp_data
	wire          rsp_mux_017_src_ready;                                                              // nios2_qsys_0_instruction_master_agent:rp_ready -> rsp_mux_017:src_ready
	wire   [21:0] rsp_mux_017_src_channel;                                                            // rsp_mux_017:src_channel -> nios2_qsys_0_instruction_master_agent:rp_channel
	wire          rsp_mux_017_src_startofpacket;                                                      // rsp_mux_017:src_startofpacket -> nios2_qsys_0_instruction_master_agent:rp_startofpacket
	wire          rsp_mux_017_src_endofpacket;                                                        // rsp_mux_017:src_endofpacket -> nios2_qsys_0_instruction_master_agent:rp_endofpacket
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_readdata;                                      // jtag_uart_avalon_jtag_slave_translator:uav_readdata -> jtag_uart_avalon_jtag_slave_agent:m0_readdata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_waitrequest;                                   // jtag_uart_avalon_jtag_slave_translator:uav_waitrequest -> jtag_uart_avalon_jtag_slave_agent:m0_waitrequest
	wire          jtag_uart_avalon_jtag_slave_agent_m0_debugaccess;                                   // jtag_uart_avalon_jtag_slave_agent:m0_debugaccess -> jtag_uart_avalon_jtag_slave_translator:uav_debugaccess
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_address;                                       // jtag_uart_avalon_jtag_slave_agent:m0_address -> jtag_uart_avalon_jtag_slave_translator:uav_address
	wire    [3:0] jtag_uart_avalon_jtag_slave_agent_m0_byteenable;                                    // jtag_uart_avalon_jtag_slave_agent:m0_byteenable -> jtag_uart_avalon_jtag_slave_translator:uav_byteenable
	wire          jtag_uart_avalon_jtag_slave_agent_m0_read;                                          // jtag_uart_avalon_jtag_slave_agent:m0_read -> jtag_uart_avalon_jtag_slave_translator:uav_read
	wire          jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid;                                 // jtag_uart_avalon_jtag_slave_translator:uav_readdatavalid -> jtag_uart_avalon_jtag_slave_agent:m0_readdatavalid
	wire          jtag_uart_avalon_jtag_slave_agent_m0_lock;                                          // jtag_uart_avalon_jtag_slave_agent:m0_lock -> jtag_uart_avalon_jtag_slave_translator:uav_lock
	wire   [31:0] jtag_uart_avalon_jtag_slave_agent_m0_writedata;                                     // jtag_uart_avalon_jtag_slave_agent:m0_writedata -> jtag_uart_avalon_jtag_slave_translator:uav_writedata
	wire          jtag_uart_avalon_jtag_slave_agent_m0_write;                                         // jtag_uart_avalon_jtag_slave_agent:m0_write -> jtag_uart_avalon_jtag_slave_translator:uav_write
	wire    [2:0] jtag_uart_avalon_jtag_slave_agent_m0_burstcount;                                    // jtag_uart_avalon_jtag_slave_agent:m0_burstcount -> jtag_uart_avalon_jtag_slave_translator:uav_burstcount
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_valid;                                  // jtag_uart_avalon_jtag_slave_agent:rf_source_valid -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_valid
	wire  [112:0] jtag_uart_avalon_jtag_slave_agent_rf_source_data;                                   // jtag_uart_avalon_jtag_slave_agent:rf_source_data -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_data
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_ready;                                  // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_ready -> jtag_uart_avalon_jtag_slave_agent:rf_source_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket;                          // jtag_uart_avalon_jtag_slave_agent:rf_source_startofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket;                            // jtag_uart_avalon_jtag_slave_agent:rf_source_endofpacket -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:in_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid;                               // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_valid -> jtag_uart_avalon_jtag_slave_agent:rf_sink_valid
	wire  [112:0] jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data;                                // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_data -> jtag_uart_avalon_jtag_slave_agent:rf_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready;                               // jtag_uart_avalon_jtag_slave_agent:rf_sink_ready -> jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket;                       // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_startofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket;                         // jtag_uart_avalon_jtag_slave_agent_rsp_fifo:out_endofpacket -> jtag_uart_avalon_jtag_slave_agent:rf_sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid;                             // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_valid -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data;                              // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_data -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready;                             // jtag_uart_avalon_jtag_slave_agent:rdata_fifo_sink_ready -> jtag_uart_avalon_jtag_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_src_valid;                                                                  // cmd_mux:src_valid -> jtag_uart_avalon_jtag_slave_agent:cp_valid
	wire  [111:0] cmd_mux_src_data;                                                                   // cmd_mux:src_data -> jtag_uart_avalon_jtag_slave_agent:cp_data
	wire          cmd_mux_src_ready;                                                                  // jtag_uart_avalon_jtag_slave_agent:cp_ready -> cmd_mux:src_ready
	wire   [21:0] cmd_mux_src_channel;                                                                // cmd_mux:src_channel -> jtag_uart_avalon_jtag_slave_agent:cp_channel
	wire          cmd_mux_src_startofpacket;                                                          // cmd_mux:src_startofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_startofpacket
	wire          cmd_mux_src_endofpacket;                                                            // cmd_mux:src_endofpacket -> jtag_uart_avalon_jtag_slave_agent:cp_endofpacket
	wire    [7:0] lcd_avalon_lcd_slave_agent_m0_readdata;                                             // lcd_avalon_lcd_slave_translator:uav_readdata -> lcd_avalon_lcd_slave_agent:m0_readdata
	wire          lcd_avalon_lcd_slave_agent_m0_waitrequest;                                          // lcd_avalon_lcd_slave_translator:uav_waitrequest -> lcd_avalon_lcd_slave_agent:m0_waitrequest
	wire          lcd_avalon_lcd_slave_agent_m0_debugaccess;                                          // lcd_avalon_lcd_slave_agent:m0_debugaccess -> lcd_avalon_lcd_slave_translator:uav_debugaccess
	wire   [31:0] lcd_avalon_lcd_slave_agent_m0_address;                                              // lcd_avalon_lcd_slave_agent:m0_address -> lcd_avalon_lcd_slave_translator:uav_address
	wire    [0:0] lcd_avalon_lcd_slave_agent_m0_byteenable;                                           // lcd_avalon_lcd_slave_agent:m0_byteenable -> lcd_avalon_lcd_slave_translator:uav_byteenable
	wire          lcd_avalon_lcd_slave_agent_m0_read;                                                 // lcd_avalon_lcd_slave_agent:m0_read -> lcd_avalon_lcd_slave_translator:uav_read
	wire          lcd_avalon_lcd_slave_agent_m0_readdatavalid;                                        // lcd_avalon_lcd_slave_translator:uav_readdatavalid -> lcd_avalon_lcd_slave_agent:m0_readdatavalid
	wire          lcd_avalon_lcd_slave_agent_m0_lock;                                                 // lcd_avalon_lcd_slave_agent:m0_lock -> lcd_avalon_lcd_slave_translator:uav_lock
	wire    [7:0] lcd_avalon_lcd_slave_agent_m0_writedata;                                            // lcd_avalon_lcd_slave_agent:m0_writedata -> lcd_avalon_lcd_slave_translator:uav_writedata
	wire          lcd_avalon_lcd_slave_agent_m0_write;                                                // lcd_avalon_lcd_slave_agent:m0_write -> lcd_avalon_lcd_slave_translator:uav_write
	wire    [0:0] lcd_avalon_lcd_slave_agent_m0_burstcount;                                           // lcd_avalon_lcd_slave_agent:m0_burstcount -> lcd_avalon_lcd_slave_translator:uav_burstcount
	wire          lcd_avalon_lcd_slave_agent_rf_source_valid;                                         // lcd_avalon_lcd_slave_agent:rf_source_valid -> lcd_avalon_lcd_slave_agent_rsp_fifo:in_valid
	wire   [85:0] lcd_avalon_lcd_slave_agent_rf_source_data;                                          // lcd_avalon_lcd_slave_agent:rf_source_data -> lcd_avalon_lcd_slave_agent_rsp_fifo:in_data
	wire          lcd_avalon_lcd_slave_agent_rf_source_ready;                                         // lcd_avalon_lcd_slave_agent_rsp_fifo:in_ready -> lcd_avalon_lcd_slave_agent:rf_source_ready
	wire          lcd_avalon_lcd_slave_agent_rf_source_startofpacket;                                 // lcd_avalon_lcd_slave_agent:rf_source_startofpacket -> lcd_avalon_lcd_slave_agent_rsp_fifo:in_startofpacket
	wire          lcd_avalon_lcd_slave_agent_rf_source_endofpacket;                                   // lcd_avalon_lcd_slave_agent:rf_source_endofpacket -> lcd_avalon_lcd_slave_agent_rsp_fifo:in_endofpacket
	wire          lcd_avalon_lcd_slave_agent_rsp_fifo_out_valid;                                      // lcd_avalon_lcd_slave_agent_rsp_fifo:out_valid -> lcd_avalon_lcd_slave_agent:rf_sink_valid
	wire   [85:0] lcd_avalon_lcd_slave_agent_rsp_fifo_out_data;                                       // lcd_avalon_lcd_slave_agent_rsp_fifo:out_data -> lcd_avalon_lcd_slave_agent:rf_sink_data
	wire          lcd_avalon_lcd_slave_agent_rsp_fifo_out_ready;                                      // lcd_avalon_lcd_slave_agent:rf_sink_ready -> lcd_avalon_lcd_slave_agent_rsp_fifo:out_ready
	wire          lcd_avalon_lcd_slave_agent_rsp_fifo_out_startofpacket;                              // lcd_avalon_lcd_slave_agent_rsp_fifo:out_startofpacket -> lcd_avalon_lcd_slave_agent:rf_sink_startofpacket
	wire          lcd_avalon_lcd_slave_agent_rsp_fifo_out_endofpacket;                                // lcd_avalon_lcd_slave_agent_rsp_fifo:out_endofpacket -> lcd_avalon_lcd_slave_agent:rf_sink_endofpacket
	wire          lcd_avalon_lcd_slave_agent_rdata_fifo_src_valid;                                    // lcd_avalon_lcd_slave_agent:rdata_fifo_src_valid -> lcd_avalon_lcd_slave_agent_rdata_fifo:in_valid
	wire    [9:0] lcd_avalon_lcd_slave_agent_rdata_fifo_src_data;                                     // lcd_avalon_lcd_slave_agent:rdata_fifo_src_data -> lcd_avalon_lcd_slave_agent_rdata_fifo:in_data
	wire          lcd_avalon_lcd_slave_agent_rdata_fifo_src_ready;                                    // lcd_avalon_lcd_slave_agent_rdata_fifo:in_ready -> lcd_avalon_lcd_slave_agent:rdata_fifo_src_ready
	wire          lcd_avalon_lcd_slave_agent_rdata_fifo_out_valid;                                    // lcd_avalon_lcd_slave_agent_rdata_fifo:out_valid -> lcd_avalon_lcd_slave_agent:rdata_fifo_sink_valid
	wire    [9:0] lcd_avalon_lcd_slave_agent_rdata_fifo_out_data;                                     // lcd_avalon_lcd_slave_agent_rdata_fifo:out_data -> lcd_avalon_lcd_slave_agent:rdata_fifo_sink_data
	wire          lcd_avalon_lcd_slave_agent_rdata_fifo_out_ready;                                    // lcd_avalon_lcd_slave_agent:rdata_fifo_sink_ready -> lcd_avalon_lcd_slave_agent_rdata_fifo:out_ready
	wire   [31:0] hex_avalon_slave_0_agent_m0_readdata;                                               // hex_avalon_slave_0_translator:uav_readdata -> hex_avalon_slave_0_agent:m0_readdata
	wire          hex_avalon_slave_0_agent_m0_waitrequest;                                            // hex_avalon_slave_0_translator:uav_waitrequest -> hex_avalon_slave_0_agent:m0_waitrequest
	wire          hex_avalon_slave_0_agent_m0_debugaccess;                                            // hex_avalon_slave_0_agent:m0_debugaccess -> hex_avalon_slave_0_translator:uav_debugaccess
	wire   [31:0] hex_avalon_slave_0_agent_m0_address;                                                // hex_avalon_slave_0_agent:m0_address -> hex_avalon_slave_0_translator:uav_address
	wire    [3:0] hex_avalon_slave_0_agent_m0_byteenable;                                             // hex_avalon_slave_0_agent:m0_byteenable -> hex_avalon_slave_0_translator:uav_byteenable
	wire          hex_avalon_slave_0_agent_m0_read;                                                   // hex_avalon_slave_0_agent:m0_read -> hex_avalon_slave_0_translator:uav_read
	wire          hex_avalon_slave_0_agent_m0_readdatavalid;                                          // hex_avalon_slave_0_translator:uav_readdatavalid -> hex_avalon_slave_0_agent:m0_readdatavalid
	wire          hex_avalon_slave_0_agent_m0_lock;                                                   // hex_avalon_slave_0_agent:m0_lock -> hex_avalon_slave_0_translator:uav_lock
	wire   [31:0] hex_avalon_slave_0_agent_m0_writedata;                                              // hex_avalon_slave_0_agent:m0_writedata -> hex_avalon_slave_0_translator:uav_writedata
	wire          hex_avalon_slave_0_agent_m0_write;                                                  // hex_avalon_slave_0_agent:m0_write -> hex_avalon_slave_0_translator:uav_write
	wire    [2:0] hex_avalon_slave_0_agent_m0_burstcount;                                             // hex_avalon_slave_0_agent:m0_burstcount -> hex_avalon_slave_0_translator:uav_burstcount
	wire          hex_avalon_slave_0_agent_rf_source_valid;                                           // hex_avalon_slave_0_agent:rf_source_valid -> hex_avalon_slave_0_agent_rsp_fifo:in_valid
	wire  [112:0] hex_avalon_slave_0_agent_rf_source_data;                                            // hex_avalon_slave_0_agent:rf_source_data -> hex_avalon_slave_0_agent_rsp_fifo:in_data
	wire          hex_avalon_slave_0_agent_rf_source_ready;                                           // hex_avalon_slave_0_agent_rsp_fifo:in_ready -> hex_avalon_slave_0_agent:rf_source_ready
	wire          hex_avalon_slave_0_agent_rf_source_startofpacket;                                   // hex_avalon_slave_0_agent:rf_source_startofpacket -> hex_avalon_slave_0_agent_rsp_fifo:in_startofpacket
	wire          hex_avalon_slave_0_agent_rf_source_endofpacket;                                     // hex_avalon_slave_0_agent:rf_source_endofpacket -> hex_avalon_slave_0_agent_rsp_fifo:in_endofpacket
	wire          hex_avalon_slave_0_agent_rsp_fifo_out_valid;                                        // hex_avalon_slave_0_agent_rsp_fifo:out_valid -> hex_avalon_slave_0_agent:rf_sink_valid
	wire  [112:0] hex_avalon_slave_0_agent_rsp_fifo_out_data;                                         // hex_avalon_slave_0_agent_rsp_fifo:out_data -> hex_avalon_slave_0_agent:rf_sink_data
	wire          hex_avalon_slave_0_agent_rsp_fifo_out_ready;                                        // hex_avalon_slave_0_agent:rf_sink_ready -> hex_avalon_slave_0_agent_rsp_fifo:out_ready
	wire          hex_avalon_slave_0_agent_rsp_fifo_out_startofpacket;                                // hex_avalon_slave_0_agent_rsp_fifo:out_startofpacket -> hex_avalon_slave_0_agent:rf_sink_startofpacket
	wire          hex_avalon_slave_0_agent_rsp_fifo_out_endofpacket;                                  // hex_avalon_slave_0_agent_rsp_fifo:out_endofpacket -> hex_avalon_slave_0_agent:rf_sink_endofpacket
	wire          hex_avalon_slave_0_agent_rdata_fifo_src_valid;                                      // hex_avalon_slave_0_agent:rdata_fifo_src_valid -> hex_avalon_slave_0_agent:rdata_fifo_sink_valid
	wire   [33:0] hex_avalon_slave_0_agent_rdata_fifo_src_data;                                       // hex_avalon_slave_0_agent:rdata_fifo_src_data -> hex_avalon_slave_0_agent:rdata_fifo_sink_data
	wire          hex_avalon_slave_0_agent_rdata_fifo_src_ready;                                      // hex_avalon_slave_0_agent:rdata_fifo_sink_ready -> hex_avalon_slave_0_agent:rdata_fifo_src_ready
	wire          cmd_mux_002_src_valid;                                                              // cmd_mux_002:src_valid -> hex_avalon_slave_0_agent:cp_valid
	wire  [111:0] cmd_mux_002_src_data;                                                               // cmd_mux_002:src_data -> hex_avalon_slave_0_agent:cp_data
	wire          cmd_mux_002_src_ready;                                                              // hex_avalon_slave_0_agent:cp_ready -> cmd_mux_002:src_ready
	wire   [21:0] cmd_mux_002_src_channel;                                                            // cmd_mux_002:src_channel -> hex_avalon_slave_0_agent:cp_channel
	wire          cmd_mux_002_src_startofpacket;                                                      // cmd_mux_002:src_startofpacket -> hex_avalon_slave_0_agent:cp_startofpacket
	wire          cmd_mux_002_src_endofpacket;                                                        // cmd_mux_002:src_endofpacket -> hex_avalon_slave_0_agent:cp_endofpacket
	wire   [31:0] black_interface_control_port_agent_m0_readdata;                                     // black_interface_control_port_translator:uav_readdata -> black_interface_control_port_agent:m0_readdata
	wire          black_interface_control_port_agent_m0_waitrequest;                                  // black_interface_control_port_translator:uav_waitrequest -> black_interface_control_port_agent:m0_waitrequest
	wire          black_interface_control_port_agent_m0_debugaccess;                                  // black_interface_control_port_agent:m0_debugaccess -> black_interface_control_port_translator:uav_debugaccess
	wire   [31:0] black_interface_control_port_agent_m0_address;                                      // black_interface_control_port_agent:m0_address -> black_interface_control_port_translator:uav_address
	wire    [3:0] black_interface_control_port_agent_m0_byteenable;                                   // black_interface_control_port_agent:m0_byteenable -> black_interface_control_port_translator:uav_byteenable
	wire          black_interface_control_port_agent_m0_read;                                         // black_interface_control_port_agent:m0_read -> black_interface_control_port_translator:uav_read
	wire          black_interface_control_port_agent_m0_readdatavalid;                                // black_interface_control_port_translator:uav_readdatavalid -> black_interface_control_port_agent:m0_readdatavalid
	wire          black_interface_control_port_agent_m0_lock;                                         // black_interface_control_port_agent:m0_lock -> black_interface_control_port_translator:uav_lock
	wire   [31:0] black_interface_control_port_agent_m0_writedata;                                    // black_interface_control_port_agent:m0_writedata -> black_interface_control_port_translator:uav_writedata
	wire          black_interface_control_port_agent_m0_write;                                        // black_interface_control_port_agent:m0_write -> black_interface_control_port_translator:uav_write
	wire    [2:0] black_interface_control_port_agent_m0_burstcount;                                   // black_interface_control_port_agent:m0_burstcount -> black_interface_control_port_translator:uav_burstcount
	wire          black_interface_control_port_agent_rf_source_valid;                                 // black_interface_control_port_agent:rf_source_valid -> black_interface_control_port_agent_rsp_fifo:in_valid
	wire  [112:0] black_interface_control_port_agent_rf_source_data;                                  // black_interface_control_port_agent:rf_source_data -> black_interface_control_port_agent_rsp_fifo:in_data
	wire          black_interface_control_port_agent_rf_source_ready;                                 // black_interface_control_port_agent_rsp_fifo:in_ready -> black_interface_control_port_agent:rf_source_ready
	wire          black_interface_control_port_agent_rf_source_startofpacket;                         // black_interface_control_port_agent:rf_source_startofpacket -> black_interface_control_port_agent_rsp_fifo:in_startofpacket
	wire          black_interface_control_port_agent_rf_source_endofpacket;                           // black_interface_control_port_agent:rf_source_endofpacket -> black_interface_control_port_agent_rsp_fifo:in_endofpacket
	wire          black_interface_control_port_agent_rsp_fifo_out_valid;                              // black_interface_control_port_agent_rsp_fifo:out_valid -> black_interface_control_port_agent:rf_sink_valid
	wire  [112:0] black_interface_control_port_agent_rsp_fifo_out_data;                               // black_interface_control_port_agent_rsp_fifo:out_data -> black_interface_control_port_agent:rf_sink_data
	wire          black_interface_control_port_agent_rsp_fifo_out_ready;                              // black_interface_control_port_agent:rf_sink_ready -> black_interface_control_port_agent_rsp_fifo:out_ready
	wire          black_interface_control_port_agent_rsp_fifo_out_startofpacket;                      // black_interface_control_port_agent_rsp_fifo:out_startofpacket -> black_interface_control_port_agent:rf_sink_startofpacket
	wire          black_interface_control_port_agent_rsp_fifo_out_endofpacket;                        // black_interface_control_port_agent_rsp_fifo:out_endofpacket -> black_interface_control_port_agent:rf_sink_endofpacket
	wire          black_interface_control_port_agent_rdata_fifo_src_valid;                            // black_interface_control_port_agent:rdata_fifo_src_valid -> black_interface_control_port_agent:rdata_fifo_sink_valid
	wire   [33:0] black_interface_control_port_agent_rdata_fifo_src_data;                             // black_interface_control_port_agent:rdata_fifo_src_data -> black_interface_control_port_agent:rdata_fifo_sink_data
	wire          black_interface_control_port_agent_rdata_fifo_src_ready;                            // black_interface_control_port_agent:rdata_fifo_sink_ready -> black_interface_control_port_agent:rdata_fifo_src_ready
	wire          cmd_mux_003_src_valid;                                                              // cmd_mux_003:src_valid -> black_interface_control_port_agent:cp_valid
	wire  [111:0] cmd_mux_003_src_data;                                                               // cmd_mux_003:src_data -> black_interface_control_port_agent:cp_data
	wire          cmd_mux_003_src_ready;                                                              // black_interface_control_port_agent:cp_ready -> cmd_mux_003:src_ready
	wire   [21:0] cmd_mux_003_src_channel;                                                            // cmd_mux_003:src_channel -> black_interface_control_port_agent:cp_channel
	wire          cmd_mux_003_src_startofpacket;                                                      // cmd_mux_003:src_startofpacket -> black_interface_control_port_agent:cp_startofpacket
	wire          cmd_mux_003_src_endofpacket;                                                        // cmd_mux_003:src_endofpacket -> black_interface_control_port_agent:cp_endofpacket
	wire   [31:0] red_interface_control_port_agent_m0_readdata;                                       // red_interface_control_port_translator:uav_readdata -> red_interface_control_port_agent:m0_readdata
	wire          red_interface_control_port_agent_m0_waitrequest;                                    // red_interface_control_port_translator:uav_waitrequest -> red_interface_control_port_agent:m0_waitrequest
	wire          red_interface_control_port_agent_m0_debugaccess;                                    // red_interface_control_port_agent:m0_debugaccess -> red_interface_control_port_translator:uav_debugaccess
	wire   [31:0] red_interface_control_port_agent_m0_address;                                        // red_interface_control_port_agent:m0_address -> red_interface_control_port_translator:uav_address
	wire    [3:0] red_interface_control_port_agent_m0_byteenable;                                     // red_interface_control_port_agent:m0_byteenable -> red_interface_control_port_translator:uav_byteenable
	wire          red_interface_control_port_agent_m0_read;                                           // red_interface_control_port_agent:m0_read -> red_interface_control_port_translator:uav_read
	wire          red_interface_control_port_agent_m0_readdatavalid;                                  // red_interface_control_port_translator:uav_readdatavalid -> red_interface_control_port_agent:m0_readdatavalid
	wire          red_interface_control_port_agent_m0_lock;                                           // red_interface_control_port_agent:m0_lock -> red_interface_control_port_translator:uav_lock
	wire   [31:0] red_interface_control_port_agent_m0_writedata;                                      // red_interface_control_port_agent:m0_writedata -> red_interface_control_port_translator:uav_writedata
	wire          red_interface_control_port_agent_m0_write;                                          // red_interface_control_port_agent:m0_write -> red_interface_control_port_translator:uav_write
	wire    [2:0] red_interface_control_port_agent_m0_burstcount;                                     // red_interface_control_port_agent:m0_burstcount -> red_interface_control_port_translator:uav_burstcount
	wire          red_interface_control_port_agent_rf_source_valid;                                   // red_interface_control_port_agent:rf_source_valid -> red_interface_control_port_agent_rsp_fifo:in_valid
	wire  [112:0] red_interface_control_port_agent_rf_source_data;                                    // red_interface_control_port_agent:rf_source_data -> red_interface_control_port_agent_rsp_fifo:in_data
	wire          red_interface_control_port_agent_rf_source_ready;                                   // red_interface_control_port_agent_rsp_fifo:in_ready -> red_interface_control_port_agent:rf_source_ready
	wire          red_interface_control_port_agent_rf_source_startofpacket;                           // red_interface_control_port_agent:rf_source_startofpacket -> red_interface_control_port_agent_rsp_fifo:in_startofpacket
	wire          red_interface_control_port_agent_rf_source_endofpacket;                             // red_interface_control_port_agent:rf_source_endofpacket -> red_interface_control_port_agent_rsp_fifo:in_endofpacket
	wire          red_interface_control_port_agent_rsp_fifo_out_valid;                                // red_interface_control_port_agent_rsp_fifo:out_valid -> red_interface_control_port_agent:rf_sink_valid
	wire  [112:0] red_interface_control_port_agent_rsp_fifo_out_data;                                 // red_interface_control_port_agent_rsp_fifo:out_data -> red_interface_control_port_agent:rf_sink_data
	wire          red_interface_control_port_agent_rsp_fifo_out_ready;                                // red_interface_control_port_agent:rf_sink_ready -> red_interface_control_port_agent_rsp_fifo:out_ready
	wire          red_interface_control_port_agent_rsp_fifo_out_startofpacket;                        // red_interface_control_port_agent_rsp_fifo:out_startofpacket -> red_interface_control_port_agent:rf_sink_startofpacket
	wire          red_interface_control_port_agent_rsp_fifo_out_endofpacket;                          // red_interface_control_port_agent_rsp_fifo:out_endofpacket -> red_interface_control_port_agent:rf_sink_endofpacket
	wire          red_interface_control_port_agent_rdata_fifo_src_valid;                              // red_interface_control_port_agent:rdata_fifo_src_valid -> red_interface_control_port_agent:rdata_fifo_sink_valid
	wire   [33:0] red_interface_control_port_agent_rdata_fifo_src_data;                               // red_interface_control_port_agent:rdata_fifo_src_data -> red_interface_control_port_agent:rdata_fifo_sink_data
	wire          red_interface_control_port_agent_rdata_fifo_src_ready;                              // red_interface_control_port_agent:rdata_fifo_sink_ready -> red_interface_control_port_agent:rdata_fifo_src_ready
	wire          cmd_mux_004_src_valid;                                                              // cmd_mux_004:src_valid -> red_interface_control_port_agent:cp_valid
	wire  [111:0] cmd_mux_004_src_data;                                                               // cmd_mux_004:src_data -> red_interface_control_port_agent:cp_data
	wire          cmd_mux_004_src_ready;                                                              // red_interface_control_port_agent:cp_ready -> cmd_mux_004:src_ready
	wire   [21:0] cmd_mux_004_src_channel;                                                            // cmd_mux_004:src_channel -> red_interface_control_port_agent:cp_channel
	wire          cmd_mux_004_src_startofpacket;                                                      // cmd_mux_004:src_startofpacket -> red_interface_control_port_agent:cp_startofpacket
	wire          cmd_mux_004_src_endofpacket;                                                        // cmd_mux_004:src_endofpacket -> red_interface_control_port_agent:cp_endofpacket
	wire   [31:0] system_id_control_slave_agent_m0_readdata;                                          // system_id_control_slave_translator:uav_readdata -> system_id_control_slave_agent:m0_readdata
	wire          system_id_control_slave_agent_m0_waitrequest;                                       // system_id_control_slave_translator:uav_waitrequest -> system_id_control_slave_agent:m0_waitrequest
	wire          system_id_control_slave_agent_m0_debugaccess;                                       // system_id_control_slave_agent:m0_debugaccess -> system_id_control_slave_translator:uav_debugaccess
	wire   [31:0] system_id_control_slave_agent_m0_address;                                           // system_id_control_slave_agent:m0_address -> system_id_control_slave_translator:uav_address
	wire    [3:0] system_id_control_slave_agent_m0_byteenable;                                        // system_id_control_slave_agent:m0_byteenable -> system_id_control_slave_translator:uav_byteenable
	wire          system_id_control_slave_agent_m0_read;                                              // system_id_control_slave_agent:m0_read -> system_id_control_slave_translator:uav_read
	wire          system_id_control_slave_agent_m0_readdatavalid;                                     // system_id_control_slave_translator:uav_readdatavalid -> system_id_control_slave_agent:m0_readdatavalid
	wire          system_id_control_slave_agent_m0_lock;                                              // system_id_control_slave_agent:m0_lock -> system_id_control_slave_translator:uav_lock
	wire   [31:0] system_id_control_slave_agent_m0_writedata;                                         // system_id_control_slave_agent:m0_writedata -> system_id_control_slave_translator:uav_writedata
	wire          system_id_control_slave_agent_m0_write;                                             // system_id_control_slave_agent:m0_write -> system_id_control_slave_translator:uav_write
	wire    [2:0] system_id_control_slave_agent_m0_burstcount;                                        // system_id_control_slave_agent:m0_burstcount -> system_id_control_slave_translator:uav_burstcount
	wire          system_id_control_slave_agent_rf_source_valid;                                      // system_id_control_slave_agent:rf_source_valid -> system_id_control_slave_agent_rsp_fifo:in_valid
	wire  [112:0] system_id_control_slave_agent_rf_source_data;                                       // system_id_control_slave_agent:rf_source_data -> system_id_control_slave_agent_rsp_fifo:in_data
	wire          system_id_control_slave_agent_rf_source_ready;                                      // system_id_control_slave_agent_rsp_fifo:in_ready -> system_id_control_slave_agent:rf_source_ready
	wire          system_id_control_slave_agent_rf_source_startofpacket;                              // system_id_control_slave_agent:rf_source_startofpacket -> system_id_control_slave_agent_rsp_fifo:in_startofpacket
	wire          system_id_control_slave_agent_rf_source_endofpacket;                                // system_id_control_slave_agent:rf_source_endofpacket -> system_id_control_slave_agent_rsp_fifo:in_endofpacket
	wire          system_id_control_slave_agent_rsp_fifo_out_valid;                                   // system_id_control_slave_agent_rsp_fifo:out_valid -> system_id_control_slave_agent:rf_sink_valid
	wire  [112:0] system_id_control_slave_agent_rsp_fifo_out_data;                                    // system_id_control_slave_agent_rsp_fifo:out_data -> system_id_control_slave_agent:rf_sink_data
	wire          system_id_control_slave_agent_rsp_fifo_out_ready;                                   // system_id_control_slave_agent:rf_sink_ready -> system_id_control_slave_agent_rsp_fifo:out_ready
	wire          system_id_control_slave_agent_rsp_fifo_out_startofpacket;                           // system_id_control_slave_agent_rsp_fifo:out_startofpacket -> system_id_control_slave_agent:rf_sink_startofpacket
	wire          system_id_control_slave_agent_rsp_fifo_out_endofpacket;                             // system_id_control_slave_agent_rsp_fifo:out_endofpacket -> system_id_control_slave_agent:rf_sink_endofpacket
	wire          system_id_control_slave_agent_rdata_fifo_src_valid;                                 // system_id_control_slave_agent:rdata_fifo_src_valid -> system_id_control_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] system_id_control_slave_agent_rdata_fifo_src_data;                                  // system_id_control_slave_agent:rdata_fifo_src_data -> system_id_control_slave_agent:rdata_fifo_sink_data
	wire          system_id_control_slave_agent_rdata_fifo_src_ready;                                 // system_id_control_slave_agent:rdata_fifo_sink_ready -> system_id_control_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_005_src_valid;                                                              // cmd_mux_005:src_valid -> system_id_control_slave_agent:cp_valid
	wire  [111:0] cmd_mux_005_src_data;                                                               // cmd_mux_005:src_data -> system_id_control_slave_agent:cp_data
	wire          cmd_mux_005_src_ready;                                                              // system_id_control_slave_agent:cp_ready -> cmd_mux_005:src_ready
	wire   [21:0] cmd_mux_005_src_channel;                                                            // cmd_mux_005:src_channel -> system_id_control_slave_agent:cp_channel
	wire          cmd_mux_005_src_startofpacket;                                                      // cmd_mux_005:src_startofpacket -> system_id_control_slave_agent:cp_startofpacket
	wire          cmd_mux_005_src_endofpacket;                                                        // cmd_mux_005:src_endofpacket -> system_id_control_slave_agent:cp_endofpacket
	wire   [31:0] ted_encryptor_csr_agent_m0_readdata;                                                // ted_encryptor_csr_translator:uav_readdata -> ted_encryptor_csr_agent:m0_readdata
	wire          ted_encryptor_csr_agent_m0_waitrequest;                                             // ted_encryptor_csr_translator:uav_waitrequest -> ted_encryptor_csr_agent:m0_waitrequest
	wire          ted_encryptor_csr_agent_m0_debugaccess;                                             // ted_encryptor_csr_agent:m0_debugaccess -> ted_encryptor_csr_translator:uav_debugaccess
	wire   [31:0] ted_encryptor_csr_agent_m0_address;                                                 // ted_encryptor_csr_agent:m0_address -> ted_encryptor_csr_translator:uav_address
	wire    [3:0] ted_encryptor_csr_agent_m0_byteenable;                                              // ted_encryptor_csr_agent:m0_byteenable -> ted_encryptor_csr_translator:uav_byteenable
	wire          ted_encryptor_csr_agent_m0_read;                                                    // ted_encryptor_csr_agent:m0_read -> ted_encryptor_csr_translator:uav_read
	wire          ted_encryptor_csr_agent_m0_readdatavalid;                                           // ted_encryptor_csr_translator:uav_readdatavalid -> ted_encryptor_csr_agent:m0_readdatavalid
	wire          ted_encryptor_csr_agent_m0_lock;                                                    // ted_encryptor_csr_agent:m0_lock -> ted_encryptor_csr_translator:uav_lock
	wire   [31:0] ted_encryptor_csr_agent_m0_writedata;                                               // ted_encryptor_csr_agent:m0_writedata -> ted_encryptor_csr_translator:uav_writedata
	wire          ted_encryptor_csr_agent_m0_write;                                                   // ted_encryptor_csr_agent:m0_write -> ted_encryptor_csr_translator:uav_write
	wire    [2:0] ted_encryptor_csr_agent_m0_burstcount;                                              // ted_encryptor_csr_agent:m0_burstcount -> ted_encryptor_csr_translator:uav_burstcount
	wire          ted_encryptor_csr_agent_rf_source_valid;                                            // ted_encryptor_csr_agent:rf_source_valid -> ted_encryptor_csr_agent_rsp_fifo:in_valid
	wire  [112:0] ted_encryptor_csr_agent_rf_source_data;                                             // ted_encryptor_csr_agent:rf_source_data -> ted_encryptor_csr_agent_rsp_fifo:in_data
	wire          ted_encryptor_csr_agent_rf_source_ready;                                            // ted_encryptor_csr_agent_rsp_fifo:in_ready -> ted_encryptor_csr_agent:rf_source_ready
	wire          ted_encryptor_csr_agent_rf_source_startofpacket;                                    // ted_encryptor_csr_agent:rf_source_startofpacket -> ted_encryptor_csr_agent_rsp_fifo:in_startofpacket
	wire          ted_encryptor_csr_agent_rf_source_endofpacket;                                      // ted_encryptor_csr_agent:rf_source_endofpacket -> ted_encryptor_csr_agent_rsp_fifo:in_endofpacket
	wire          ted_encryptor_csr_agent_rsp_fifo_out_valid;                                         // ted_encryptor_csr_agent_rsp_fifo:out_valid -> ted_encryptor_csr_agent:rf_sink_valid
	wire  [112:0] ted_encryptor_csr_agent_rsp_fifo_out_data;                                          // ted_encryptor_csr_agent_rsp_fifo:out_data -> ted_encryptor_csr_agent:rf_sink_data
	wire          ted_encryptor_csr_agent_rsp_fifo_out_ready;                                         // ted_encryptor_csr_agent:rf_sink_ready -> ted_encryptor_csr_agent_rsp_fifo:out_ready
	wire          ted_encryptor_csr_agent_rsp_fifo_out_startofpacket;                                 // ted_encryptor_csr_agent_rsp_fifo:out_startofpacket -> ted_encryptor_csr_agent:rf_sink_startofpacket
	wire          ted_encryptor_csr_agent_rsp_fifo_out_endofpacket;                                   // ted_encryptor_csr_agent_rsp_fifo:out_endofpacket -> ted_encryptor_csr_agent:rf_sink_endofpacket
	wire          ted_encryptor_csr_agent_rdata_fifo_src_valid;                                       // ted_encryptor_csr_agent:rdata_fifo_src_valid -> ted_encryptor_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] ted_encryptor_csr_agent_rdata_fifo_src_data;                                        // ted_encryptor_csr_agent:rdata_fifo_src_data -> ted_encryptor_csr_agent:rdata_fifo_sink_data
	wire          ted_encryptor_csr_agent_rdata_fifo_src_ready;                                       // ted_encryptor_csr_agent:rdata_fifo_sink_ready -> ted_encryptor_csr_agent:rdata_fifo_src_ready
	wire          cmd_mux_006_src_valid;                                                              // cmd_mux_006:src_valid -> ted_encryptor_csr_agent:cp_valid
	wire  [111:0] cmd_mux_006_src_data;                                                               // cmd_mux_006:src_data -> ted_encryptor_csr_agent:cp_data
	wire          cmd_mux_006_src_ready;                                                              // ted_encryptor_csr_agent:cp_ready -> cmd_mux_006:src_ready
	wire   [21:0] cmd_mux_006_src_channel;                                                            // cmd_mux_006:src_channel -> ted_encryptor_csr_agent:cp_channel
	wire          cmd_mux_006_src_startofpacket;                                                      // cmd_mux_006:src_startofpacket -> ted_encryptor_csr_agent:cp_startofpacket
	wire          cmd_mux_006_src_endofpacket;                                                        // cmd_mux_006:src_endofpacket -> ted_encryptor_csr_agent:cp_endofpacket
	wire   [31:0] ted_decryptor_csr_agent_m0_readdata;                                                // ted_decryptor_csr_translator:uav_readdata -> ted_decryptor_csr_agent:m0_readdata
	wire          ted_decryptor_csr_agent_m0_waitrequest;                                             // ted_decryptor_csr_translator:uav_waitrequest -> ted_decryptor_csr_agent:m0_waitrequest
	wire          ted_decryptor_csr_agent_m0_debugaccess;                                             // ted_decryptor_csr_agent:m0_debugaccess -> ted_decryptor_csr_translator:uav_debugaccess
	wire   [31:0] ted_decryptor_csr_agent_m0_address;                                                 // ted_decryptor_csr_agent:m0_address -> ted_decryptor_csr_translator:uav_address
	wire    [3:0] ted_decryptor_csr_agent_m0_byteenable;                                              // ted_decryptor_csr_agent:m0_byteenable -> ted_decryptor_csr_translator:uav_byteenable
	wire          ted_decryptor_csr_agent_m0_read;                                                    // ted_decryptor_csr_agent:m0_read -> ted_decryptor_csr_translator:uav_read
	wire          ted_decryptor_csr_agent_m0_readdatavalid;                                           // ted_decryptor_csr_translator:uav_readdatavalid -> ted_decryptor_csr_agent:m0_readdatavalid
	wire          ted_decryptor_csr_agent_m0_lock;                                                    // ted_decryptor_csr_agent:m0_lock -> ted_decryptor_csr_translator:uav_lock
	wire   [31:0] ted_decryptor_csr_agent_m0_writedata;                                               // ted_decryptor_csr_agent:m0_writedata -> ted_decryptor_csr_translator:uav_writedata
	wire          ted_decryptor_csr_agent_m0_write;                                                   // ted_decryptor_csr_agent:m0_write -> ted_decryptor_csr_translator:uav_write
	wire    [2:0] ted_decryptor_csr_agent_m0_burstcount;                                              // ted_decryptor_csr_agent:m0_burstcount -> ted_decryptor_csr_translator:uav_burstcount
	wire          ted_decryptor_csr_agent_rf_source_valid;                                            // ted_decryptor_csr_agent:rf_source_valid -> ted_decryptor_csr_agent_rsp_fifo:in_valid
	wire  [112:0] ted_decryptor_csr_agent_rf_source_data;                                             // ted_decryptor_csr_agent:rf_source_data -> ted_decryptor_csr_agent_rsp_fifo:in_data
	wire          ted_decryptor_csr_agent_rf_source_ready;                                            // ted_decryptor_csr_agent_rsp_fifo:in_ready -> ted_decryptor_csr_agent:rf_source_ready
	wire          ted_decryptor_csr_agent_rf_source_startofpacket;                                    // ted_decryptor_csr_agent:rf_source_startofpacket -> ted_decryptor_csr_agent_rsp_fifo:in_startofpacket
	wire          ted_decryptor_csr_agent_rf_source_endofpacket;                                      // ted_decryptor_csr_agent:rf_source_endofpacket -> ted_decryptor_csr_agent_rsp_fifo:in_endofpacket
	wire          ted_decryptor_csr_agent_rsp_fifo_out_valid;                                         // ted_decryptor_csr_agent_rsp_fifo:out_valid -> ted_decryptor_csr_agent:rf_sink_valid
	wire  [112:0] ted_decryptor_csr_agent_rsp_fifo_out_data;                                          // ted_decryptor_csr_agent_rsp_fifo:out_data -> ted_decryptor_csr_agent:rf_sink_data
	wire          ted_decryptor_csr_agent_rsp_fifo_out_ready;                                         // ted_decryptor_csr_agent:rf_sink_ready -> ted_decryptor_csr_agent_rsp_fifo:out_ready
	wire          ted_decryptor_csr_agent_rsp_fifo_out_startofpacket;                                 // ted_decryptor_csr_agent_rsp_fifo:out_startofpacket -> ted_decryptor_csr_agent:rf_sink_startofpacket
	wire          ted_decryptor_csr_agent_rsp_fifo_out_endofpacket;                                   // ted_decryptor_csr_agent_rsp_fifo:out_endofpacket -> ted_decryptor_csr_agent:rf_sink_endofpacket
	wire          ted_decryptor_csr_agent_rdata_fifo_src_valid;                                       // ted_decryptor_csr_agent:rdata_fifo_src_valid -> ted_decryptor_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] ted_decryptor_csr_agent_rdata_fifo_src_data;                                        // ted_decryptor_csr_agent:rdata_fifo_src_data -> ted_decryptor_csr_agent:rdata_fifo_sink_data
	wire          ted_decryptor_csr_agent_rdata_fifo_src_ready;                                       // ted_decryptor_csr_agent:rdata_fifo_sink_ready -> ted_decryptor_csr_agent:rdata_fifo_src_ready
	wire          cmd_mux_007_src_valid;                                                              // cmd_mux_007:src_valid -> ted_decryptor_csr_agent:cp_valid
	wire  [111:0] cmd_mux_007_src_data;                                                               // cmd_mux_007:src_data -> ted_decryptor_csr_agent:cp_data
	wire          cmd_mux_007_src_ready;                                                              // ted_decryptor_csr_agent:cp_ready -> cmd_mux_007:src_ready
	wire   [21:0] cmd_mux_007_src_channel;                                                            // cmd_mux_007:src_channel -> ted_decryptor_csr_agent:cp_channel
	wire          cmd_mux_007_src_startofpacket;                                                      // cmd_mux_007:src_startofpacket -> ted_decryptor_csr_agent:cp_startofpacket
	wire          cmd_mux_007_src_endofpacket;                                                        // cmd_mux_007:src_endofpacket -> ted_decryptor_csr_agent:cp_endofpacket
	wire   [31:0] red_rx_csr_agent_m0_readdata;                                                       // red_rx_csr_translator:uav_readdata -> red_rx_csr_agent:m0_readdata
	wire          red_rx_csr_agent_m0_waitrequest;                                                    // red_rx_csr_translator:uav_waitrequest -> red_rx_csr_agent:m0_waitrequest
	wire          red_rx_csr_agent_m0_debugaccess;                                                    // red_rx_csr_agent:m0_debugaccess -> red_rx_csr_translator:uav_debugaccess
	wire   [31:0] red_rx_csr_agent_m0_address;                                                        // red_rx_csr_agent:m0_address -> red_rx_csr_translator:uav_address
	wire    [3:0] red_rx_csr_agent_m0_byteenable;                                                     // red_rx_csr_agent:m0_byteenable -> red_rx_csr_translator:uav_byteenable
	wire          red_rx_csr_agent_m0_read;                                                           // red_rx_csr_agent:m0_read -> red_rx_csr_translator:uav_read
	wire          red_rx_csr_agent_m0_readdatavalid;                                                  // red_rx_csr_translator:uav_readdatavalid -> red_rx_csr_agent:m0_readdatavalid
	wire          red_rx_csr_agent_m0_lock;                                                           // red_rx_csr_agent:m0_lock -> red_rx_csr_translator:uav_lock
	wire   [31:0] red_rx_csr_agent_m0_writedata;                                                      // red_rx_csr_agent:m0_writedata -> red_rx_csr_translator:uav_writedata
	wire          red_rx_csr_agent_m0_write;                                                          // red_rx_csr_agent:m0_write -> red_rx_csr_translator:uav_write
	wire    [2:0] red_rx_csr_agent_m0_burstcount;                                                     // red_rx_csr_agent:m0_burstcount -> red_rx_csr_translator:uav_burstcount
	wire          red_rx_csr_agent_rf_source_valid;                                                   // red_rx_csr_agent:rf_source_valid -> red_rx_csr_agent_rsp_fifo:in_valid
	wire  [112:0] red_rx_csr_agent_rf_source_data;                                                    // red_rx_csr_agent:rf_source_data -> red_rx_csr_agent_rsp_fifo:in_data
	wire          red_rx_csr_agent_rf_source_ready;                                                   // red_rx_csr_agent_rsp_fifo:in_ready -> red_rx_csr_agent:rf_source_ready
	wire          red_rx_csr_agent_rf_source_startofpacket;                                           // red_rx_csr_agent:rf_source_startofpacket -> red_rx_csr_agent_rsp_fifo:in_startofpacket
	wire          red_rx_csr_agent_rf_source_endofpacket;                                             // red_rx_csr_agent:rf_source_endofpacket -> red_rx_csr_agent_rsp_fifo:in_endofpacket
	wire          red_rx_csr_agent_rsp_fifo_out_valid;                                                // red_rx_csr_agent_rsp_fifo:out_valid -> red_rx_csr_agent:rf_sink_valid
	wire  [112:0] red_rx_csr_agent_rsp_fifo_out_data;                                                 // red_rx_csr_agent_rsp_fifo:out_data -> red_rx_csr_agent:rf_sink_data
	wire          red_rx_csr_agent_rsp_fifo_out_ready;                                                // red_rx_csr_agent:rf_sink_ready -> red_rx_csr_agent_rsp_fifo:out_ready
	wire          red_rx_csr_agent_rsp_fifo_out_startofpacket;                                        // red_rx_csr_agent_rsp_fifo:out_startofpacket -> red_rx_csr_agent:rf_sink_startofpacket
	wire          red_rx_csr_agent_rsp_fifo_out_endofpacket;                                          // red_rx_csr_agent_rsp_fifo:out_endofpacket -> red_rx_csr_agent:rf_sink_endofpacket
	wire          red_rx_csr_agent_rdata_fifo_src_valid;                                              // red_rx_csr_agent:rdata_fifo_src_valid -> red_rx_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] red_rx_csr_agent_rdata_fifo_src_data;                                               // red_rx_csr_agent:rdata_fifo_src_data -> red_rx_csr_agent:rdata_fifo_sink_data
	wire          red_rx_csr_agent_rdata_fifo_src_ready;                                              // red_rx_csr_agent:rdata_fifo_sink_ready -> red_rx_csr_agent:rdata_fifo_src_ready
	wire          cmd_mux_008_src_valid;                                                              // cmd_mux_008:src_valid -> red_rx_csr_agent:cp_valid
	wire  [111:0] cmd_mux_008_src_data;                                                               // cmd_mux_008:src_data -> red_rx_csr_agent:cp_data
	wire          cmd_mux_008_src_ready;                                                              // red_rx_csr_agent:cp_ready -> cmd_mux_008:src_ready
	wire   [21:0] cmd_mux_008_src_channel;                                                            // cmd_mux_008:src_channel -> red_rx_csr_agent:cp_channel
	wire          cmd_mux_008_src_startofpacket;                                                      // cmd_mux_008:src_startofpacket -> red_rx_csr_agent:cp_startofpacket
	wire          cmd_mux_008_src_endofpacket;                                                        // cmd_mux_008:src_endofpacket -> red_rx_csr_agent:cp_endofpacket
	wire   [31:0] red_tx_csr_agent_m0_readdata;                                                       // red_tx_csr_translator:uav_readdata -> red_tx_csr_agent:m0_readdata
	wire          red_tx_csr_agent_m0_waitrequest;                                                    // red_tx_csr_translator:uav_waitrequest -> red_tx_csr_agent:m0_waitrequest
	wire          red_tx_csr_agent_m0_debugaccess;                                                    // red_tx_csr_agent:m0_debugaccess -> red_tx_csr_translator:uav_debugaccess
	wire   [31:0] red_tx_csr_agent_m0_address;                                                        // red_tx_csr_agent:m0_address -> red_tx_csr_translator:uav_address
	wire    [3:0] red_tx_csr_agent_m0_byteenable;                                                     // red_tx_csr_agent:m0_byteenable -> red_tx_csr_translator:uav_byteenable
	wire          red_tx_csr_agent_m0_read;                                                           // red_tx_csr_agent:m0_read -> red_tx_csr_translator:uav_read
	wire          red_tx_csr_agent_m0_readdatavalid;                                                  // red_tx_csr_translator:uav_readdatavalid -> red_tx_csr_agent:m0_readdatavalid
	wire          red_tx_csr_agent_m0_lock;                                                           // red_tx_csr_agent:m0_lock -> red_tx_csr_translator:uav_lock
	wire   [31:0] red_tx_csr_agent_m0_writedata;                                                      // red_tx_csr_agent:m0_writedata -> red_tx_csr_translator:uav_writedata
	wire          red_tx_csr_agent_m0_write;                                                          // red_tx_csr_agent:m0_write -> red_tx_csr_translator:uav_write
	wire    [2:0] red_tx_csr_agent_m0_burstcount;                                                     // red_tx_csr_agent:m0_burstcount -> red_tx_csr_translator:uav_burstcount
	wire          red_tx_csr_agent_rf_source_valid;                                                   // red_tx_csr_agent:rf_source_valid -> red_tx_csr_agent_rsp_fifo:in_valid
	wire  [112:0] red_tx_csr_agent_rf_source_data;                                                    // red_tx_csr_agent:rf_source_data -> red_tx_csr_agent_rsp_fifo:in_data
	wire          red_tx_csr_agent_rf_source_ready;                                                   // red_tx_csr_agent_rsp_fifo:in_ready -> red_tx_csr_agent:rf_source_ready
	wire          red_tx_csr_agent_rf_source_startofpacket;                                           // red_tx_csr_agent:rf_source_startofpacket -> red_tx_csr_agent_rsp_fifo:in_startofpacket
	wire          red_tx_csr_agent_rf_source_endofpacket;                                             // red_tx_csr_agent:rf_source_endofpacket -> red_tx_csr_agent_rsp_fifo:in_endofpacket
	wire          red_tx_csr_agent_rsp_fifo_out_valid;                                                // red_tx_csr_agent_rsp_fifo:out_valid -> red_tx_csr_agent:rf_sink_valid
	wire  [112:0] red_tx_csr_agent_rsp_fifo_out_data;                                                 // red_tx_csr_agent_rsp_fifo:out_data -> red_tx_csr_agent:rf_sink_data
	wire          red_tx_csr_agent_rsp_fifo_out_ready;                                                // red_tx_csr_agent:rf_sink_ready -> red_tx_csr_agent_rsp_fifo:out_ready
	wire          red_tx_csr_agent_rsp_fifo_out_startofpacket;                                        // red_tx_csr_agent_rsp_fifo:out_startofpacket -> red_tx_csr_agent:rf_sink_startofpacket
	wire          red_tx_csr_agent_rsp_fifo_out_endofpacket;                                          // red_tx_csr_agent_rsp_fifo:out_endofpacket -> red_tx_csr_agent:rf_sink_endofpacket
	wire          red_tx_csr_agent_rdata_fifo_src_valid;                                              // red_tx_csr_agent:rdata_fifo_src_valid -> red_tx_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] red_tx_csr_agent_rdata_fifo_src_data;                                               // red_tx_csr_agent:rdata_fifo_src_data -> red_tx_csr_agent:rdata_fifo_sink_data
	wire          red_tx_csr_agent_rdata_fifo_src_ready;                                              // red_tx_csr_agent:rdata_fifo_sink_ready -> red_tx_csr_agent:rdata_fifo_src_ready
	wire          cmd_mux_009_src_valid;                                                              // cmd_mux_009:src_valid -> red_tx_csr_agent:cp_valid
	wire  [111:0] cmd_mux_009_src_data;                                                               // cmd_mux_009:src_data -> red_tx_csr_agent:cp_data
	wire          cmd_mux_009_src_ready;                                                              // red_tx_csr_agent:cp_ready -> cmd_mux_009:src_ready
	wire   [21:0] cmd_mux_009_src_channel;                                                            // cmd_mux_009:src_channel -> red_tx_csr_agent:cp_channel
	wire          cmd_mux_009_src_startofpacket;                                                      // cmd_mux_009:src_startofpacket -> red_tx_csr_agent:cp_startofpacket
	wire          cmd_mux_009_src_endofpacket;                                                        // cmd_mux_009:src_endofpacket -> red_tx_csr_agent:cp_endofpacket
	wire   [31:0] black_rx_csr_agent_m0_readdata;                                                     // black_rx_csr_translator:uav_readdata -> black_rx_csr_agent:m0_readdata
	wire          black_rx_csr_agent_m0_waitrequest;                                                  // black_rx_csr_translator:uav_waitrequest -> black_rx_csr_agent:m0_waitrequest
	wire          black_rx_csr_agent_m0_debugaccess;                                                  // black_rx_csr_agent:m0_debugaccess -> black_rx_csr_translator:uav_debugaccess
	wire   [31:0] black_rx_csr_agent_m0_address;                                                      // black_rx_csr_agent:m0_address -> black_rx_csr_translator:uav_address
	wire    [3:0] black_rx_csr_agent_m0_byteenable;                                                   // black_rx_csr_agent:m0_byteenable -> black_rx_csr_translator:uav_byteenable
	wire          black_rx_csr_agent_m0_read;                                                         // black_rx_csr_agent:m0_read -> black_rx_csr_translator:uav_read
	wire          black_rx_csr_agent_m0_readdatavalid;                                                // black_rx_csr_translator:uav_readdatavalid -> black_rx_csr_agent:m0_readdatavalid
	wire          black_rx_csr_agent_m0_lock;                                                         // black_rx_csr_agent:m0_lock -> black_rx_csr_translator:uav_lock
	wire   [31:0] black_rx_csr_agent_m0_writedata;                                                    // black_rx_csr_agent:m0_writedata -> black_rx_csr_translator:uav_writedata
	wire          black_rx_csr_agent_m0_write;                                                        // black_rx_csr_agent:m0_write -> black_rx_csr_translator:uav_write
	wire    [2:0] black_rx_csr_agent_m0_burstcount;                                                   // black_rx_csr_agent:m0_burstcount -> black_rx_csr_translator:uav_burstcount
	wire          black_rx_csr_agent_rf_source_valid;                                                 // black_rx_csr_agent:rf_source_valid -> black_rx_csr_agent_rsp_fifo:in_valid
	wire  [112:0] black_rx_csr_agent_rf_source_data;                                                  // black_rx_csr_agent:rf_source_data -> black_rx_csr_agent_rsp_fifo:in_data
	wire          black_rx_csr_agent_rf_source_ready;                                                 // black_rx_csr_agent_rsp_fifo:in_ready -> black_rx_csr_agent:rf_source_ready
	wire          black_rx_csr_agent_rf_source_startofpacket;                                         // black_rx_csr_agent:rf_source_startofpacket -> black_rx_csr_agent_rsp_fifo:in_startofpacket
	wire          black_rx_csr_agent_rf_source_endofpacket;                                           // black_rx_csr_agent:rf_source_endofpacket -> black_rx_csr_agent_rsp_fifo:in_endofpacket
	wire          black_rx_csr_agent_rsp_fifo_out_valid;                                              // black_rx_csr_agent_rsp_fifo:out_valid -> black_rx_csr_agent:rf_sink_valid
	wire  [112:0] black_rx_csr_agent_rsp_fifo_out_data;                                               // black_rx_csr_agent_rsp_fifo:out_data -> black_rx_csr_agent:rf_sink_data
	wire          black_rx_csr_agent_rsp_fifo_out_ready;                                              // black_rx_csr_agent:rf_sink_ready -> black_rx_csr_agent_rsp_fifo:out_ready
	wire          black_rx_csr_agent_rsp_fifo_out_startofpacket;                                      // black_rx_csr_agent_rsp_fifo:out_startofpacket -> black_rx_csr_agent:rf_sink_startofpacket
	wire          black_rx_csr_agent_rsp_fifo_out_endofpacket;                                        // black_rx_csr_agent_rsp_fifo:out_endofpacket -> black_rx_csr_agent:rf_sink_endofpacket
	wire          black_rx_csr_agent_rdata_fifo_src_valid;                                            // black_rx_csr_agent:rdata_fifo_src_valid -> black_rx_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] black_rx_csr_agent_rdata_fifo_src_data;                                             // black_rx_csr_agent:rdata_fifo_src_data -> black_rx_csr_agent:rdata_fifo_sink_data
	wire          black_rx_csr_agent_rdata_fifo_src_ready;                                            // black_rx_csr_agent:rdata_fifo_sink_ready -> black_rx_csr_agent:rdata_fifo_src_ready
	wire          cmd_mux_010_src_valid;                                                              // cmd_mux_010:src_valid -> black_rx_csr_agent:cp_valid
	wire  [111:0] cmd_mux_010_src_data;                                                               // cmd_mux_010:src_data -> black_rx_csr_agent:cp_data
	wire          cmd_mux_010_src_ready;                                                              // black_rx_csr_agent:cp_ready -> cmd_mux_010:src_ready
	wire   [21:0] cmd_mux_010_src_channel;                                                            // cmd_mux_010:src_channel -> black_rx_csr_agent:cp_channel
	wire          cmd_mux_010_src_startofpacket;                                                      // cmd_mux_010:src_startofpacket -> black_rx_csr_agent:cp_startofpacket
	wire          cmd_mux_010_src_endofpacket;                                                        // cmd_mux_010:src_endofpacket -> black_rx_csr_agent:cp_endofpacket
	wire   [31:0] black_tx_csr_agent_m0_readdata;                                                     // black_tx_csr_translator:uav_readdata -> black_tx_csr_agent:m0_readdata
	wire          black_tx_csr_agent_m0_waitrequest;                                                  // black_tx_csr_translator:uav_waitrequest -> black_tx_csr_agent:m0_waitrequest
	wire          black_tx_csr_agent_m0_debugaccess;                                                  // black_tx_csr_agent:m0_debugaccess -> black_tx_csr_translator:uav_debugaccess
	wire   [31:0] black_tx_csr_agent_m0_address;                                                      // black_tx_csr_agent:m0_address -> black_tx_csr_translator:uav_address
	wire    [3:0] black_tx_csr_agent_m0_byteenable;                                                   // black_tx_csr_agent:m0_byteenable -> black_tx_csr_translator:uav_byteenable
	wire          black_tx_csr_agent_m0_read;                                                         // black_tx_csr_agent:m0_read -> black_tx_csr_translator:uav_read
	wire          black_tx_csr_agent_m0_readdatavalid;                                                // black_tx_csr_translator:uav_readdatavalid -> black_tx_csr_agent:m0_readdatavalid
	wire          black_tx_csr_agent_m0_lock;                                                         // black_tx_csr_agent:m0_lock -> black_tx_csr_translator:uav_lock
	wire   [31:0] black_tx_csr_agent_m0_writedata;                                                    // black_tx_csr_agent:m0_writedata -> black_tx_csr_translator:uav_writedata
	wire          black_tx_csr_agent_m0_write;                                                        // black_tx_csr_agent:m0_write -> black_tx_csr_translator:uav_write
	wire    [2:0] black_tx_csr_agent_m0_burstcount;                                                   // black_tx_csr_agent:m0_burstcount -> black_tx_csr_translator:uav_burstcount
	wire          black_tx_csr_agent_rf_source_valid;                                                 // black_tx_csr_agent:rf_source_valid -> black_tx_csr_agent_rsp_fifo:in_valid
	wire  [112:0] black_tx_csr_agent_rf_source_data;                                                  // black_tx_csr_agent:rf_source_data -> black_tx_csr_agent_rsp_fifo:in_data
	wire          black_tx_csr_agent_rf_source_ready;                                                 // black_tx_csr_agent_rsp_fifo:in_ready -> black_tx_csr_agent:rf_source_ready
	wire          black_tx_csr_agent_rf_source_startofpacket;                                         // black_tx_csr_agent:rf_source_startofpacket -> black_tx_csr_agent_rsp_fifo:in_startofpacket
	wire          black_tx_csr_agent_rf_source_endofpacket;                                           // black_tx_csr_agent:rf_source_endofpacket -> black_tx_csr_agent_rsp_fifo:in_endofpacket
	wire          black_tx_csr_agent_rsp_fifo_out_valid;                                              // black_tx_csr_agent_rsp_fifo:out_valid -> black_tx_csr_agent:rf_sink_valid
	wire  [112:0] black_tx_csr_agent_rsp_fifo_out_data;                                               // black_tx_csr_agent_rsp_fifo:out_data -> black_tx_csr_agent:rf_sink_data
	wire          black_tx_csr_agent_rsp_fifo_out_ready;                                              // black_tx_csr_agent:rf_sink_ready -> black_tx_csr_agent_rsp_fifo:out_ready
	wire          black_tx_csr_agent_rsp_fifo_out_startofpacket;                                      // black_tx_csr_agent_rsp_fifo:out_startofpacket -> black_tx_csr_agent:rf_sink_startofpacket
	wire          black_tx_csr_agent_rsp_fifo_out_endofpacket;                                        // black_tx_csr_agent_rsp_fifo:out_endofpacket -> black_tx_csr_agent:rf_sink_endofpacket
	wire          black_tx_csr_agent_rdata_fifo_src_valid;                                            // black_tx_csr_agent:rdata_fifo_src_valid -> black_tx_csr_agent:rdata_fifo_sink_valid
	wire   [33:0] black_tx_csr_agent_rdata_fifo_src_data;                                             // black_tx_csr_agent:rdata_fifo_src_data -> black_tx_csr_agent:rdata_fifo_sink_data
	wire          black_tx_csr_agent_rdata_fifo_src_ready;                                            // black_tx_csr_agent:rdata_fifo_sink_ready -> black_tx_csr_agent:rdata_fifo_src_ready
	wire          cmd_mux_011_src_valid;                                                              // cmd_mux_011:src_valid -> black_tx_csr_agent:cp_valid
	wire  [111:0] cmd_mux_011_src_data;                                                               // cmd_mux_011:src_data -> black_tx_csr_agent:cp_data
	wire          cmd_mux_011_src_ready;                                                              // black_tx_csr_agent:cp_ready -> cmd_mux_011:src_ready
	wire   [21:0] cmd_mux_011_src_channel;                                                            // cmd_mux_011:src_channel -> black_tx_csr_agent:cp_channel
	wire          cmd_mux_011_src_startofpacket;                                                      // cmd_mux_011:src_startofpacket -> black_tx_csr_agent:cp_startofpacket
	wire          cmd_mux_011_src_endofpacket;                                                        // cmd_mux_011:src_endofpacket -> black_tx_csr_agent:cp_endofpacket
	wire   [31:0] nios2_qsys_0_jtag_debug_module_agent_m0_readdata;                                   // nios2_qsys_0_jtag_debug_module_translator:uav_readdata -> nios2_qsys_0_jtag_debug_module_agent:m0_readdata
	wire          nios2_qsys_0_jtag_debug_module_agent_m0_waitrequest;                                // nios2_qsys_0_jtag_debug_module_translator:uav_waitrequest -> nios2_qsys_0_jtag_debug_module_agent:m0_waitrequest
	wire          nios2_qsys_0_jtag_debug_module_agent_m0_debugaccess;                                // nios2_qsys_0_jtag_debug_module_agent:m0_debugaccess -> nios2_qsys_0_jtag_debug_module_translator:uav_debugaccess
	wire   [31:0] nios2_qsys_0_jtag_debug_module_agent_m0_address;                                    // nios2_qsys_0_jtag_debug_module_agent:m0_address -> nios2_qsys_0_jtag_debug_module_translator:uav_address
	wire    [3:0] nios2_qsys_0_jtag_debug_module_agent_m0_byteenable;                                 // nios2_qsys_0_jtag_debug_module_agent:m0_byteenable -> nios2_qsys_0_jtag_debug_module_translator:uav_byteenable
	wire          nios2_qsys_0_jtag_debug_module_agent_m0_read;                                       // nios2_qsys_0_jtag_debug_module_agent:m0_read -> nios2_qsys_0_jtag_debug_module_translator:uav_read
	wire          nios2_qsys_0_jtag_debug_module_agent_m0_readdatavalid;                              // nios2_qsys_0_jtag_debug_module_translator:uav_readdatavalid -> nios2_qsys_0_jtag_debug_module_agent:m0_readdatavalid
	wire          nios2_qsys_0_jtag_debug_module_agent_m0_lock;                                       // nios2_qsys_0_jtag_debug_module_agent:m0_lock -> nios2_qsys_0_jtag_debug_module_translator:uav_lock
	wire   [31:0] nios2_qsys_0_jtag_debug_module_agent_m0_writedata;                                  // nios2_qsys_0_jtag_debug_module_agent:m0_writedata -> nios2_qsys_0_jtag_debug_module_translator:uav_writedata
	wire          nios2_qsys_0_jtag_debug_module_agent_m0_write;                                      // nios2_qsys_0_jtag_debug_module_agent:m0_write -> nios2_qsys_0_jtag_debug_module_translator:uav_write
	wire    [2:0] nios2_qsys_0_jtag_debug_module_agent_m0_burstcount;                                 // nios2_qsys_0_jtag_debug_module_agent:m0_burstcount -> nios2_qsys_0_jtag_debug_module_translator:uav_burstcount
	wire          nios2_qsys_0_jtag_debug_module_agent_rf_source_valid;                               // nios2_qsys_0_jtag_debug_module_agent:rf_source_valid -> nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:in_valid
	wire  [112:0] nios2_qsys_0_jtag_debug_module_agent_rf_source_data;                                // nios2_qsys_0_jtag_debug_module_agent:rf_source_data -> nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:in_data
	wire          nios2_qsys_0_jtag_debug_module_agent_rf_source_ready;                               // nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:in_ready -> nios2_qsys_0_jtag_debug_module_agent:rf_source_ready
	wire          nios2_qsys_0_jtag_debug_module_agent_rf_source_startofpacket;                       // nios2_qsys_0_jtag_debug_module_agent:rf_source_startofpacket -> nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:in_startofpacket
	wire          nios2_qsys_0_jtag_debug_module_agent_rf_source_endofpacket;                         // nios2_qsys_0_jtag_debug_module_agent:rf_source_endofpacket -> nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:in_endofpacket
	wire          nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_valid;                            // nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:out_valid -> nios2_qsys_0_jtag_debug_module_agent:rf_sink_valid
	wire  [112:0] nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_data;                             // nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:out_data -> nios2_qsys_0_jtag_debug_module_agent:rf_sink_data
	wire          nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_ready;                            // nios2_qsys_0_jtag_debug_module_agent:rf_sink_ready -> nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:out_ready
	wire          nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_startofpacket;                    // nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:out_startofpacket -> nios2_qsys_0_jtag_debug_module_agent:rf_sink_startofpacket
	wire          nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_endofpacket;                      // nios2_qsys_0_jtag_debug_module_agent_rsp_fifo:out_endofpacket -> nios2_qsys_0_jtag_debug_module_agent:rf_sink_endofpacket
	wire          nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_valid;                          // nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_src_valid -> nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_sink_valid
	wire   [33:0] nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_data;                           // nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_src_data -> nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_sink_data
	wire          nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_ready;                          // nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_sink_ready -> nios2_qsys_0_jtag_debug_module_agent:rdata_fifo_src_ready
	wire          cmd_mux_012_src_valid;                                                              // cmd_mux_012:src_valid -> nios2_qsys_0_jtag_debug_module_agent:cp_valid
	wire  [111:0] cmd_mux_012_src_data;                                                               // cmd_mux_012:src_data -> nios2_qsys_0_jtag_debug_module_agent:cp_data
	wire          cmd_mux_012_src_ready;                                                              // nios2_qsys_0_jtag_debug_module_agent:cp_ready -> cmd_mux_012:src_ready
	wire   [21:0] cmd_mux_012_src_channel;                                                            // cmd_mux_012:src_channel -> nios2_qsys_0_jtag_debug_module_agent:cp_channel
	wire          cmd_mux_012_src_startofpacket;                                                      // cmd_mux_012:src_startofpacket -> nios2_qsys_0_jtag_debug_module_agent:cp_startofpacket
	wire          cmd_mux_012_src_endofpacket;                                                        // cmd_mux_012:src_endofpacket -> nios2_qsys_0_jtag_debug_module_agent:cp_endofpacket
	wire   [31:0] lcd_clk_pll_slave_agent_m0_readdata;                                                // lcd_clk_pll_slave_translator:uav_readdata -> lcd_clk_pll_slave_agent:m0_readdata
	wire          lcd_clk_pll_slave_agent_m0_waitrequest;                                             // lcd_clk_pll_slave_translator:uav_waitrequest -> lcd_clk_pll_slave_agent:m0_waitrequest
	wire          lcd_clk_pll_slave_agent_m0_debugaccess;                                             // lcd_clk_pll_slave_agent:m0_debugaccess -> lcd_clk_pll_slave_translator:uav_debugaccess
	wire   [31:0] lcd_clk_pll_slave_agent_m0_address;                                                 // lcd_clk_pll_slave_agent:m0_address -> lcd_clk_pll_slave_translator:uav_address
	wire    [3:0] lcd_clk_pll_slave_agent_m0_byteenable;                                              // lcd_clk_pll_slave_agent:m0_byteenable -> lcd_clk_pll_slave_translator:uav_byteenable
	wire          lcd_clk_pll_slave_agent_m0_read;                                                    // lcd_clk_pll_slave_agent:m0_read -> lcd_clk_pll_slave_translator:uav_read
	wire          lcd_clk_pll_slave_agent_m0_readdatavalid;                                           // lcd_clk_pll_slave_translator:uav_readdatavalid -> lcd_clk_pll_slave_agent:m0_readdatavalid
	wire          lcd_clk_pll_slave_agent_m0_lock;                                                    // lcd_clk_pll_slave_agent:m0_lock -> lcd_clk_pll_slave_translator:uav_lock
	wire   [31:0] lcd_clk_pll_slave_agent_m0_writedata;                                               // lcd_clk_pll_slave_agent:m0_writedata -> lcd_clk_pll_slave_translator:uav_writedata
	wire          lcd_clk_pll_slave_agent_m0_write;                                                   // lcd_clk_pll_slave_agent:m0_write -> lcd_clk_pll_slave_translator:uav_write
	wire    [2:0] lcd_clk_pll_slave_agent_m0_burstcount;                                              // lcd_clk_pll_slave_agent:m0_burstcount -> lcd_clk_pll_slave_translator:uav_burstcount
	wire          lcd_clk_pll_slave_agent_rf_source_valid;                                            // lcd_clk_pll_slave_agent:rf_source_valid -> lcd_clk_pll_slave_agent_rsp_fifo:in_valid
	wire  [112:0] lcd_clk_pll_slave_agent_rf_source_data;                                             // lcd_clk_pll_slave_agent:rf_source_data -> lcd_clk_pll_slave_agent_rsp_fifo:in_data
	wire          lcd_clk_pll_slave_agent_rf_source_ready;                                            // lcd_clk_pll_slave_agent_rsp_fifo:in_ready -> lcd_clk_pll_slave_agent:rf_source_ready
	wire          lcd_clk_pll_slave_agent_rf_source_startofpacket;                                    // lcd_clk_pll_slave_agent:rf_source_startofpacket -> lcd_clk_pll_slave_agent_rsp_fifo:in_startofpacket
	wire          lcd_clk_pll_slave_agent_rf_source_endofpacket;                                      // lcd_clk_pll_slave_agent:rf_source_endofpacket -> lcd_clk_pll_slave_agent_rsp_fifo:in_endofpacket
	wire          lcd_clk_pll_slave_agent_rsp_fifo_out_valid;                                         // lcd_clk_pll_slave_agent_rsp_fifo:out_valid -> lcd_clk_pll_slave_agent:rf_sink_valid
	wire  [112:0] lcd_clk_pll_slave_agent_rsp_fifo_out_data;                                          // lcd_clk_pll_slave_agent_rsp_fifo:out_data -> lcd_clk_pll_slave_agent:rf_sink_data
	wire          lcd_clk_pll_slave_agent_rsp_fifo_out_ready;                                         // lcd_clk_pll_slave_agent:rf_sink_ready -> lcd_clk_pll_slave_agent_rsp_fifo:out_ready
	wire          lcd_clk_pll_slave_agent_rsp_fifo_out_startofpacket;                                 // lcd_clk_pll_slave_agent_rsp_fifo:out_startofpacket -> lcd_clk_pll_slave_agent:rf_sink_startofpacket
	wire          lcd_clk_pll_slave_agent_rsp_fifo_out_endofpacket;                                   // lcd_clk_pll_slave_agent_rsp_fifo:out_endofpacket -> lcd_clk_pll_slave_agent:rf_sink_endofpacket
	wire          lcd_clk_pll_slave_agent_rdata_fifo_src_valid;                                       // lcd_clk_pll_slave_agent:rdata_fifo_src_valid -> lcd_clk_pll_slave_agent:rdata_fifo_sink_valid
	wire   [33:0] lcd_clk_pll_slave_agent_rdata_fifo_src_data;                                        // lcd_clk_pll_slave_agent:rdata_fifo_src_data -> lcd_clk_pll_slave_agent:rdata_fifo_sink_data
	wire          lcd_clk_pll_slave_agent_rdata_fifo_src_ready;                                       // lcd_clk_pll_slave_agent:rdata_fifo_sink_ready -> lcd_clk_pll_slave_agent:rdata_fifo_src_ready
	wire          cmd_mux_013_src_valid;                                                              // cmd_mux_013:src_valid -> lcd_clk_pll_slave_agent:cp_valid
	wire  [111:0] cmd_mux_013_src_data;                                                               // cmd_mux_013:src_data -> lcd_clk_pll_slave_agent:cp_data
	wire          cmd_mux_013_src_ready;                                                              // lcd_clk_pll_slave_agent:cp_ready -> cmd_mux_013:src_ready
	wire   [21:0] cmd_mux_013_src_channel;                                                            // cmd_mux_013:src_channel -> lcd_clk_pll_slave_agent:cp_channel
	wire          cmd_mux_013_src_startofpacket;                                                      // cmd_mux_013:src_startofpacket -> lcd_clk_pll_slave_agent:cp_startofpacket
	wire          cmd_mux_013_src_endofpacket;                                                        // cmd_mux_013:src_endofpacket -> lcd_clk_pll_slave_agent:cp_endofpacket
	wire   [31:0] output_port_s1_agent_m0_readdata;                                                   // output_port_s1_translator:uav_readdata -> output_port_s1_agent:m0_readdata
	wire          output_port_s1_agent_m0_waitrequest;                                                // output_port_s1_translator:uav_waitrequest -> output_port_s1_agent:m0_waitrequest
	wire          output_port_s1_agent_m0_debugaccess;                                                // output_port_s1_agent:m0_debugaccess -> output_port_s1_translator:uav_debugaccess
	wire   [31:0] output_port_s1_agent_m0_address;                                                    // output_port_s1_agent:m0_address -> output_port_s1_translator:uav_address
	wire    [3:0] output_port_s1_agent_m0_byteenable;                                                 // output_port_s1_agent:m0_byteenable -> output_port_s1_translator:uav_byteenable
	wire          output_port_s1_agent_m0_read;                                                       // output_port_s1_agent:m0_read -> output_port_s1_translator:uav_read
	wire          output_port_s1_agent_m0_readdatavalid;                                              // output_port_s1_translator:uav_readdatavalid -> output_port_s1_agent:m0_readdatavalid
	wire          output_port_s1_agent_m0_lock;                                                       // output_port_s1_agent:m0_lock -> output_port_s1_translator:uav_lock
	wire   [31:0] output_port_s1_agent_m0_writedata;                                                  // output_port_s1_agent:m0_writedata -> output_port_s1_translator:uav_writedata
	wire          output_port_s1_agent_m0_write;                                                      // output_port_s1_agent:m0_write -> output_port_s1_translator:uav_write
	wire    [2:0] output_port_s1_agent_m0_burstcount;                                                 // output_port_s1_agent:m0_burstcount -> output_port_s1_translator:uav_burstcount
	wire          output_port_s1_agent_rf_source_valid;                                               // output_port_s1_agent:rf_source_valid -> output_port_s1_agent_rsp_fifo:in_valid
	wire  [112:0] output_port_s1_agent_rf_source_data;                                                // output_port_s1_agent:rf_source_data -> output_port_s1_agent_rsp_fifo:in_data
	wire          output_port_s1_agent_rf_source_ready;                                               // output_port_s1_agent_rsp_fifo:in_ready -> output_port_s1_agent:rf_source_ready
	wire          output_port_s1_agent_rf_source_startofpacket;                                       // output_port_s1_agent:rf_source_startofpacket -> output_port_s1_agent_rsp_fifo:in_startofpacket
	wire          output_port_s1_agent_rf_source_endofpacket;                                         // output_port_s1_agent:rf_source_endofpacket -> output_port_s1_agent_rsp_fifo:in_endofpacket
	wire          output_port_s1_agent_rsp_fifo_out_valid;                                            // output_port_s1_agent_rsp_fifo:out_valid -> output_port_s1_agent:rf_sink_valid
	wire  [112:0] output_port_s1_agent_rsp_fifo_out_data;                                             // output_port_s1_agent_rsp_fifo:out_data -> output_port_s1_agent:rf_sink_data
	wire          output_port_s1_agent_rsp_fifo_out_ready;                                            // output_port_s1_agent:rf_sink_ready -> output_port_s1_agent_rsp_fifo:out_ready
	wire          output_port_s1_agent_rsp_fifo_out_startofpacket;                                    // output_port_s1_agent_rsp_fifo:out_startofpacket -> output_port_s1_agent:rf_sink_startofpacket
	wire          output_port_s1_agent_rsp_fifo_out_endofpacket;                                      // output_port_s1_agent_rsp_fifo:out_endofpacket -> output_port_s1_agent:rf_sink_endofpacket
	wire          output_port_s1_agent_rdata_fifo_src_valid;                                          // output_port_s1_agent:rdata_fifo_src_valid -> output_port_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] output_port_s1_agent_rdata_fifo_src_data;                                           // output_port_s1_agent:rdata_fifo_src_data -> output_port_s1_agent:rdata_fifo_sink_data
	wire          output_port_s1_agent_rdata_fifo_src_ready;                                          // output_port_s1_agent:rdata_fifo_sink_ready -> output_port_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_014_src_valid;                                                              // cmd_mux_014:src_valid -> output_port_s1_agent:cp_valid
	wire  [111:0] cmd_mux_014_src_data;                                                               // cmd_mux_014:src_data -> output_port_s1_agent:cp_data
	wire          cmd_mux_014_src_ready;                                                              // output_port_s1_agent:cp_ready -> cmd_mux_014:src_ready
	wire   [21:0] cmd_mux_014_src_channel;                                                            // cmd_mux_014:src_channel -> output_port_s1_agent:cp_channel
	wire          cmd_mux_014_src_startofpacket;                                                      // cmd_mux_014:src_startofpacket -> output_port_s1_agent:cp_startofpacket
	wire          cmd_mux_014_src_endofpacket;                                                        // cmd_mux_014:src_endofpacket -> output_port_s1_agent:cp_endofpacket
	wire   [31:0] input_port_s1_agent_m0_readdata;                                                    // input_port_s1_translator:uav_readdata -> input_port_s1_agent:m0_readdata
	wire          input_port_s1_agent_m0_waitrequest;                                                 // input_port_s1_translator:uav_waitrequest -> input_port_s1_agent:m0_waitrequest
	wire          input_port_s1_agent_m0_debugaccess;                                                 // input_port_s1_agent:m0_debugaccess -> input_port_s1_translator:uav_debugaccess
	wire   [31:0] input_port_s1_agent_m0_address;                                                     // input_port_s1_agent:m0_address -> input_port_s1_translator:uav_address
	wire    [3:0] input_port_s1_agent_m0_byteenable;                                                  // input_port_s1_agent:m0_byteenable -> input_port_s1_translator:uav_byteenable
	wire          input_port_s1_agent_m0_read;                                                        // input_port_s1_agent:m0_read -> input_port_s1_translator:uav_read
	wire          input_port_s1_agent_m0_readdatavalid;                                               // input_port_s1_translator:uav_readdatavalid -> input_port_s1_agent:m0_readdatavalid
	wire          input_port_s1_agent_m0_lock;                                                        // input_port_s1_agent:m0_lock -> input_port_s1_translator:uav_lock
	wire   [31:0] input_port_s1_agent_m0_writedata;                                                   // input_port_s1_agent:m0_writedata -> input_port_s1_translator:uav_writedata
	wire          input_port_s1_agent_m0_write;                                                       // input_port_s1_agent:m0_write -> input_port_s1_translator:uav_write
	wire    [2:0] input_port_s1_agent_m0_burstcount;                                                  // input_port_s1_agent:m0_burstcount -> input_port_s1_translator:uav_burstcount
	wire          input_port_s1_agent_rf_source_valid;                                                // input_port_s1_agent:rf_source_valid -> input_port_s1_agent_rsp_fifo:in_valid
	wire  [112:0] input_port_s1_agent_rf_source_data;                                                 // input_port_s1_agent:rf_source_data -> input_port_s1_agent_rsp_fifo:in_data
	wire          input_port_s1_agent_rf_source_ready;                                                // input_port_s1_agent_rsp_fifo:in_ready -> input_port_s1_agent:rf_source_ready
	wire          input_port_s1_agent_rf_source_startofpacket;                                        // input_port_s1_agent:rf_source_startofpacket -> input_port_s1_agent_rsp_fifo:in_startofpacket
	wire          input_port_s1_agent_rf_source_endofpacket;                                          // input_port_s1_agent:rf_source_endofpacket -> input_port_s1_agent_rsp_fifo:in_endofpacket
	wire          input_port_s1_agent_rsp_fifo_out_valid;                                             // input_port_s1_agent_rsp_fifo:out_valid -> input_port_s1_agent:rf_sink_valid
	wire  [112:0] input_port_s1_agent_rsp_fifo_out_data;                                              // input_port_s1_agent_rsp_fifo:out_data -> input_port_s1_agent:rf_sink_data
	wire          input_port_s1_agent_rsp_fifo_out_ready;                                             // input_port_s1_agent:rf_sink_ready -> input_port_s1_agent_rsp_fifo:out_ready
	wire          input_port_s1_agent_rsp_fifo_out_startofpacket;                                     // input_port_s1_agent_rsp_fifo:out_startofpacket -> input_port_s1_agent:rf_sink_startofpacket
	wire          input_port_s1_agent_rsp_fifo_out_endofpacket;                                       // input_port_s1_agent_rsp_fifo:out_endofpacket -> input_port_s1_agent:rf_sink_endofpacket
	wire          input_port_s1_agent_rdata_fifo_src_valid;                                           // input_port_s1_agent:rdata_fifo_src_valid -> input_port_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] input_port_s1_agent_rdata_fifo_src_data;                                            // input_port_s1_agent:rdata_fifo_src_data -> input_port_s1_agent:rdata_fifo_sink_data
	wire          input_port_s1_agent_rdata_fifo_src_ready;                                           // input_port_s1_agent:rdata_fifo_sink_ready -> input_port_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_015_src_valid;                                                              // cmd_mux_015:src_valid -> input_port_s1_agent:cp_valid
	wire  [111:0] cmd_mux_015_src_data;                                                               // cmd_mux_015:src_data -> input_port_s1_agent:cp_data
	wire          cmd_mux_015_src_ready;                                                              // input_port_s1_agent:cp_ready -> cmd_mux_015:src_ready
	wire   [21:0] cmd_mux_015_src_channel;                                                            // cmd_mux_015:src_channel -> input_port_s1_agent:cp_channel
	wire          cmd_mux_015_src_startofpacket;                                                      // cmd_mux_015:src_startofpacket -> input_port_s1_agent:cp_startofpacket
	wire          cmd_mux_015_src_endofpacket;                                                        // cmd_mux_015:src_endofpacket -> input_port_s1_agent:cp_endofpacket
	wire   [31:0] instruction_memory_s1_agent_m0_readdata;                                            // instruction_memory_s1_translator:uav_readdata -> instruction_memory_s1_agent:m0_readdata
	wire          instruction_memory_s1_agent_m0_waitrequest;                                         // instruction_memory_s1_translator:uav_waitrequest -> instruction_memory_s1_agent:m0_waitrequest
	wire          instruction_memory_s1_agent_m0_debugaccess;                                         // instruction_memory_s1_agent:m0_debugaccess -> instruction_memory_s1_translator:uav_debugaccess
	wire   [31:0] instruction_memory_s1_agent_m0_address;                                             // instruction_memory_s1_agent:m0_address -> instruction_memory_s1_translator:uav_address
	wire    [3:0] instruction_memory_s1_agent_m0_byteenable;                                          // instruction_memory_s1_agent:m0_byteenable -> instruction_memory_s1_translator:uav_byteenable
	wire          instruction_memory_s1_agent_m0_read;                                                // instruction_memory_s1_agent:m0_read -> instruction_memory_s1_translator:uav_read
	wire          instruction_memory_s1_agent_m0_readdatavalid;                                       // instruction_memory_s1_translator:uav_readdatavalid -> instruction_memory_s1_agent:m0_readdatavalid
	wire          instruction_memory_s1_agent_m0_lock;                                                // instruction_memory_s1_agent:m0_lock -> instruction_memory_s1_translator:uav_lock
	wire   [31:0] instruction_memory_s1_agent_m0_writedata;                                           // instruction_memory_s1_agent:m0_writedata -> instruction_memory_s1_translator:uav_writedata
	wire          instruction_memory_s1_agent_m0_write;                                               // instruction_memory_s1_agent:m0_write -> instruction_memory_s1_translator:uav_write
	wire    [2:0] instruction_memory_s1_agent_m0_burstcount;                                          // instruction_memory_s1_agent:m0_burstcount -> instruction_memory_s1_translator:uav_burstcount
	wire          instruction_memory_s1_agent_rf_source_valid;                                        // instruction_memory_s1_agent:rf_source_valid -> instruction_memory_s1_agent_rsp_fifo:in_valid
	wire  [112:0] instruction_memory_s1_agent_rf_source_data;                                         // instruction_memory_s1_agent:rf_source_data -> instruction_memory_s1_agent_rsp_fifo:in_data
	wire          instruction_memory_s1_agent_rf_source_ready;                                        // instruction_memory_s1_agent_rsp_fifo:in_ready -> instruction_memory_s1_agent:rf_source_ready
	wire          instruction_memory_s1_agent_rf_source_startofpacket;                                // instruction_memory_s1_agent:rf_source_startofpacket -> instruction_memory_s1_agent_rsp_fifo:in_startofpacket
	wire          instruction_memory_s1_agent_rf_source_endofpacket;                                  // instruction_memory_s1_agent:rf_source_endofpacket -> instruction_memory_s1_agent_rsp_fifo:in_endofpacket
	wire          instruction_memory_s1_agent_rsp_fifo_out_valid;                                     // instruction_memory_s1_agent_rsp_fifo:out_valid -> instruction_memory_s1_agent:rf_sink_valid
	wire  [112:0] instruction_memory_s1_agent_rsp_fifo_out_data;                                      // instruction_memory_s1_agent_rsp_fifo:out_data -> instruction_memory_s1_agent:rf_sink_data
	wire          instruction_memory_s1_agent_rsp_fifo_out_ready;                                     // instruction_memory_s1_agent:rf_sink_ready -> instruction_memory_s1_agent_rsp_fifo:out_ready
	wire          instruction_memory_s1_agent_rsp_fifo_out_startofpacket;                             // instruction_memory_s1_agent_rsp_fifo:out_startofpacket -> instruction_memory_s1_agent:rf_sink_startofpacket
	wire          instruction_memory_s1_agent_rsp_fifo_out_endofpacket;                               // instruction_memory_s1_agent_rsp_fifo:out_endofpacket -> instruction_memory_s1_agent:rf_sink_endofpacket
	wire          instruction_memory_s1_agent_rdata_fifo_src_valid;                                   // instruction_memory_s1_agent:rdata_fifo_src_valid -> instruction_memory_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] instruction_memory_s1_agent_rdata_fifo_src_data;                                    // instruction_memory_s1_agent:rdata_fifo_src_data -> instruction_memory_s1_agent:rdata_fifo_sink_data
	wire          instruction_memory_s1_agent_rdata_fifo_src_ready;                                   // instruction_memory_s1_agent:rdata_fifo_sink_ready -> instruction_memory_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_016_src_valid;                                                              // cmd_mux_016:src_valid -> instruction_memory_s1_agent:cp_valid
	wire  [111:0] cmd_mux_016_src_data;                                                               // cmd_mux_016:src_data -> instruction_memory_s1_agent:cp_data
	wire          cmd_mux_016_src_ready;                                                              // instruction_memory_s1_agent:cp_ready -> cmd_mux_016:src_ready
	wire   [21:0] cmd_mux_016_src_channel;                                                            // cmd_mux_016:src_channel -> instruction_memory_s1_agent:cp_channel
	wire          cmd_mux_016_src_startofpacket;                                                      // cmd_mux_016:src_startofpacket -> instruction_memory_s1_agent:cp_startofpacket
	wire          cmd_mux_016_src_endofpacket;                                                        // cmd_mux_016:src_endofpacket -> instruction_memory_s1_agent:cp_endofpacket
	wire   [31:0] heap_stack_s1_agent_m0_readdata;                                                    // heap_stack_s1_translator:uav_readdata -> heap_stack_s1_agent:m0_readdata
	wire          heap_stack_s1_agent_m0_waitrequest;                                                 // heap_stack_s1_translator:uav_waitrequest -> heap_stack_s1_agent:m0_waitrequest
	wire          heap_stack_s1_agent_m0_debugaccess;                                                 // heap_stack_s1_agent:m0_debugaccess -> heap_stack_s1_translator:uav_debugaccess
	wire   [31:0] heap_stack_s1_agent_m0_address;                                                     // heap_stack_s1_agent:m0_address -> heap_stack_s1_translator:uav_address
	wire    [3:0] heap_stack_s1_agent_m0_byteenable;                                                  // heap_stack_s1_agent:m0_byteenable -> heap_stack_s1_translator:uav_byteenable
	wire          heap_stack_s1_agent_m0_read;                                                        // heap_stack_s1_agent:m0_read -> heap_stack_s1_translator:uav_read
	wire          heap_stack_s1_agent_m0_readdatavalid;                                               // heap_stack_s1_translator:uav_readdatavalid -> heap_stack_s1_agent:m0_readdatavalid
	wire          heap_stack_s1_agent_m0_lock;                                                        // heap_stack_s1_agent:m0_lock -> heap_stack_s1_translator:uav_lock
	wire   [31:0] heap_stack_s1_agent_m0_writedata;                                                   // heap_stack_s1_agent:m0_writedata -> heap_stack_s1_translator:uav_writedata
	wire          heap_stack_s1_agent_m0_write;                                                       // heap_stack_s1_agent:m0_write -> heap_stack_s1_translator:uav_write
	wire    [2:0] heap_stack_s1_agent_m0_burstcount;                                                  // heap_stack_s1_agent:m0_burstcount -> heap_stack_s1_translator:uav_burstcount
	wire          heap_stack_s1_agent_rf_source_valid;                                                // heap_stack_s1_agent:rf_source_valid -> heap_stack_s1_agent_rsp_fifo:in_valid
	wire  [112:0] heap_stack_s1_agent_rf_source_data;                                                 // heap_stack_s1_agent:rf_source_data -> heap_stack_s1_agent_rsp_fifo:in_data
	wire          heap_stack_s1_agent_rf_source_ready;                                                // heap_stack_s1_agent_rsp_fifo:in_ready -> heap_stack_s1_agent:rf_source_ready
	wire          heap_stack_s1_agent_rf_source_startofpacket;                                        // heap_stack_s1_agent:rf_source_startofpacket -> heap_stack_s1_agent_rsp_fifo:in_startofpacket
	wire          heap_stack_s1_agent_rf_source_endofpacket;                                          // heap_stack_s1_agent:rf_source_endofpacket -> heap_stack_s1_agent_rsp_fifo:in_endofpacket
	wire          heap_stack_s1_agent_rsp_fifo_out_valid;                                             // heap_stack_s1_agent_rsp_fifo:out_valid -> heap_stack_s1_agent:rf_sink_valid
	wire  [112:0] heap_stack_s1_agent_rsp_fifo_out_data;                                              // heap_stack_s1_agent_rsp_fifo:out_data -> heap_stack_s1_agent:rf_sink_data
	wire          heap_stack_s1_agent_rsp_fifo_out_ready;                                             // heap_stack_s1_agent:rf_sink_ready -> heap_stack_s1_agent_rsp_fifo:out_ready
	wire          heap_stack_s1_agent_rsp_fifo_out_startofpacket;                                     // heap_stack_s1_agent_rsp_fifo:out_startofpacket -> heap_stack_s1_agent:rf_sink_startofpacket
	wire          heap_stack_s1_agent_rsp_fifo_out_endofpacket;                                       // heap_stack_s1_agent_rsp_fifo:out_endofpacket -> heap_stack_s1_agent:rf_sink_endofpacket
	wire          heap_stack_s1_agent_rdata_fifo_src_valid;                                           // heap_stack_s1_agent:rdata_fifo_src_valid -> heap_stack_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] heap_stack_s1_agent_rdata_fifo_src_data;                                            // heap_stack_s1_agent:rdata_fifo_src_data -> heap_stack_s1_agent:rdata_fifo_sink_data
	wire          heap_stack_s1_agent_rdata_fifo_src_ready;                                           // heap_stack_s1_agent:rdata_fifo_sink_ready -> heap_stack_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_017_src_valid;                                                              // cmd_mux_017:src_valid -> heap_stack_s1_agent:cp_valid
	wire  [111:0] cmd_mux_017_src_data;                                                               // cmd_mux_017:src_data -> heap_stack_s1_agent:cp_data
	wire          cmd_mux_017_src_ready;                                                              // heap_stack_s1_agent:cp_ready -> cmd_mux_017:src_ready
	wire   [21:0] cmd_mux_017_src_channel;                                                            // cmd_mux_017:src_channel -> heap_stack_s1_agent:cp_channel
	wire          cmd_mux_017_src_startofpacket;                                                      // cmd_mux_017:src_startofpacket -> heap_stack_s1_agent:cp_startofpacket
	wire          cmd_mux_017_src_endofpacket;                                                        // cmd_mux_017:src_endofpacket -> heap_stack_s1_agent:cp_endofpacket
	wire   [31:0] system_timer_s1_agent_m0_readdata;                                                  // system_timer_s1_translator:uav_readdata -> system_timer_s1_agent:m0_readdata
	wire          system_timer_s1_agent_m0_waitrequest;                                               // system_timer_s1_translator:uav_waitrequest -> system_timer_s1_agent:m0_waitrequest
	wire          system_timer_s1_agent_m0_debugaccess;                                               // system_timer_s1_agent:m0_debugaccess -> system_timer_s1_translator:uav_debugaccess
	wire   [31:0] system_timer_s1_agent_m0_address;                                                   // system_timer_s1_agent:m0_address -> system_timer_s1_translator:uav_address
	wire    [3:0] system_timer_s1_agent_m0_byteenable;                                                // system_timer_s1_agent:m0_byteenable -> system_timer_s1_translator:uav_byteenable
	wire          system_timer_s1_agent_m0_read;                                                      // system_timer_s1_agent:m0_read -> system_timer_s1_translator:uav_read
	wire          system_timer_s1_agent_m0_readdatavalid;                                             // system_timer_s1_translator:uav_readdatavalid -> system_timer_s1_agent:m0_readdatavalid
	wire          system_timer_s1_agent_m0_lock;                                                      // system_timer_s1_agent:m0_lock -> system_timer_s1_translator:uav_lock
	wire   [31:0] system_timer_s1_agent_m0_writedata;                                                 // system_timer_s1_agent:m0_writedata -> system_timer_s1_translator:uav_writedata
	wire          system_timer_s1_agent_m0_write;                                                     // system_timer_s1_agent:m0_write -> system_timer_s1_translator:uav_write
	wire    [2:0] system_timer_s1_agent_m0_burstcount;                                                // system_timer_s1_agent:m0_burstcount -> system_timer_s1_translator:uav_burstcount
	wire          system_timer_s1_agent_rf_source_valid;                                              // system_timer_s1_agent:rf_source_valid -> system_timer_s1_agent_rsp_fifo:in_valid
	wire  [112:0] system_timer_s1_agent_rf_source_data;                                               // system_timer_s1_agent:rf_source_data -> system_timer_s1_agent_rsp_fifo:in_data
	wire          system_timer_s1_agent_rf_source_ready;                                              // system_timer_s1_agent_rsp_fifo:in_ready -> system_timer_s1_agent:rf_source_ready
	wire          system_timer_s1_agent_rf_source_startofpacket;                                      // system_timer_s1_agent:rf_source_startofpacket -> system_timer_s1_agent_rsp_fifo:in_startofpacket
	wire          system_timer_s1_agent_rf_source_endofpacket;                                        // system_timer_s1_agent:rf_source_endofpacket -> system_timer_s1_agent_rsp_fifo:in_endofpacket
	wire          system_timer_s1_agent_rsp_fifo_out_valid;                                           // system_timer_s1_agent_rsp_fifo:out_valid -> system_timer_s1_agent:rf_sink_valid
	wire  [112:0] system_timer_s1_agent_rsp_fifo_out_data;                                            // system_timer_s1_agent_rsp_fifo:out_data -> system_timer_s1_agent:rf_sink_data
	wire          system_timer_s1_agent_rsp_fifo_out_ready;                                           // system_timer_s1_agent:rf_sink_ready -> system_timer_s1_agent_rsp_fifo:out_ready
	wire          system_timer_s1_agent_rsp_fifo_out_startofpacket;                                   // system_timer_s1_agent_rsp_fifo:out_startofpacket -> system_timer_s1_agent:rf_sink_startofpacket
	wire          system_timer_s1_agent_rsp_fifo_out_endofpacket;                                     // system_timer_s1_agent_rsp_fifo:out_endofpacket -> system_timer_s1_agent:rf_sink_endofpacket
	wire          system_timer_s1_agent_rdata_fifo_src_valid;                                         // system_timer_s1_agent:rdata_fifo_src_valid -> system_timer_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] system_timer_s1_agent_rdata_fifo_src_data;                                          // system_timer_s1_agent:rdata_fifo_src_data -> system_timer_s1_agent:rdata_fifo_sink_data
	wire          system_timer_s1_agent_rdata_fifo_src_ready;                                         // system_timer_s1_agent:rdata_fifo_sink_ready -> system_timer_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_018_src_valid;                                                              // cmd_mux_018:src_valid -> system_timer_s1_agent:cp_valid
	wire  [111:0] cmd_mux_018_src_data;                                                               // cmd_mux_018:src_data -> system_timer_s1_agent:cp_data
	wire          cmd_mux_018_src_ready;                                                              // system_timer_s1_agent:cp_ready -> cmd_mux_018:src_ready
	wire   [21:0] cmd_mux_018_src_channel;                                                            // cmd_mux_018:src_channel -> system_timer_s1_agent:cp_channel
	wire          cmd_mux_018_src_startofpacket;                                                      // cmd_mux_018:src_startofpacket -> system_timer_s1_agent:cp_startofpacket
	wire          cmd_mux_018_src_endofpacket;                                                        // cmd_mux_018:src_endofpacket -> system_timer_s1_agent:cp_endofpacket
	wire   [31:0] red_to_black_memory_s1_agent_m0_readdata;                                           // red_to_black_memory_s1_translator:uav_readdata -> red_to_black_memory_s1_agent:m0_readdata
	wire          red_to_black_memory_s1_agent_m0_waitrequest;                                        // red_to_black_memory_s1_translator:uav_waitrequest -> red_to_black_memory_s1_agent:m0_waitrequest
	wire          red_to_black_memory_s1_agent_m0_debugaccess;                                        // red_to_black_memory_s1_agent:m0_debugaccess -> red_to_black_memory_s1_translator:uav_debugaccess
	wire   [31:0] red_to_black_memory_s1_agent_m0_address;                                            // red_to_black_memory_s1_agent:m0_address -> red_to_black_memory_s1_translator:uav_address
	wire    [3:0] red_to_black_memory_s1_agent_m0_byteenable;                                         // red_to_black_memory_s1_agent:m0_byteenable -> red_to_black_memory_s1_translator:uav_byteenable
	wire          red_to_black_memory_s1_agent_m0_read;                                               // red_to_black_memory_s1_agent:m0_read -> red_to_black_memory_s1_translator:uav_read
	wire          red_to_black_memory_s1_agent_m0_readdatavalid;                                      // red_to_black_memory_s1_translator:uav_readdatavalid -> red_to_black_memory_s1_agent:m0_readdatavalid
	wire          red_to_black_memory_s1_agent_m0_lock;                                               // red_to_black_memory_s1_agent:m0_lock -> red_to_black_memory_s1_translator:uav_lock
	wire   [31:0] red_to_black_memory_s1_agent_m0_writedata;                                          // red_to_black_memory_s1_agent:m0_writedata -> red_to_black_memory_s1_translator:uav_writedata
	wire          red_to_black_memory_s1_agent_m0_write;                                              // red_to_black_memory_s1_agent:m0_write -> red_to_black_memory_s1_translator:uav_write
	wire    [2:0] red_to_black_memory_s1_agent_m0_burstcount;                                         // red_to_black_memory_s1_agent:m0_burstcount -> red_to_black_memory_s1_translator:uav_burstcount
	wire          red_to_black_memory_s1_agent_rf_source_valid;                                       // red_to_black_memory_s1_agent:rf_source_valid -> red_to_black_memory_s1_agent_rsp_fifo:in_valid
	wire  [112:0] red_to_black_memory_s1_agent_rf_source_data;                                        // red_to_black_memory_s1_agent:rf_source_data -> red_to_black_memory_s1_agent_rsp_fifo:in_data
	wire          red_to_black_memory_s1_agent_rf_source_ready;                                       // red_to_black_memory_s1_agent_rsp_fifo:in_ready -> red_to_black_memory_s1_agent:rf_source_ready
	wire          red_to_black_memory_s1_agent_rf_source_startofpacket;                               // red_to_black_memory_s1_agent:rf_source_startofpacket -> red_to_black_memory_s1_agent_rsp_fifo:in_startofpacket
	wire          red_to_black_memory_s1_agent_rf_source_endofpacket;                                 // red_to_black_memory_s1_agent:rf_source_endofpacket -> red_to_black_memory_s1_agent_rsp_fifo:in_endofpacket
	wire          red_to_black_memory_s1_agent_rsp_fifo_out_valid;                                    // red_to_black_memory_s1_agent_rsp_fifo:out_valid -> red_to_black_memory_s1_agent:rf_sink_valid
	wire  [112:0] red_to_black_memory_s1_agent_rsp_fifo_out_data;                                     // red_to_black_memory_s1_agent_rsp_fifo:out_data -> red_to_black_memory_s1_agent:rf_sink_data
	wire          red_to_black_memory_s1_agent_rsp_fifo_out_ready;                                    // red_to_black_memory_s1_agent:rf_sink_ready -> red_to_black_memory_s1_agent_rsp_fifo:out_ready
	wire          red_to_black_memory_s1_agent_rsp_fifo_out_startofpacket;                            // red_to_black_memory_s1_agent_rsp_fifo:out_startofpacket -> red_to_black_memory_s1_agent:rf_sink_startofpacket
	wire          red_to_black_memory_s1_agent_rsp_fifo_out_endofpacket;                              // red_to_black_memory_s1_agent_rsp_fifo:out_endofpacket -> red_to_black_memory_s1_agent:rf_sink_endofpacket
	wire          red_to_black_memory_s1_agent_rdata_fifo_src_valid;                                  // red_to_black_memory_s1_agent:rdata_fifo_src_valid -> red_to_black_memory_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] red_to_black_memory_s1_agent_rdata_fifo_src_data;                                   // red_to_black_memory_s1_agent:rdata_fifo_src_data -> red_to_black_memory_s1_agent:rdata_fifo_sink_data
	wire          red_to_black_memory_s1_agent_rdata_fifo_src_ready;                                  // red_to_black_memory_s1_agent:rdata_fifo_sink_ready -> red_to_black_memory_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_019_src_valid;                                                              // cmd_mux_019:src_valid -> red_to_black_memory_s1_agent:cp_valid
	wire  [111:0] cmd_mux_019_src_data;                                                               // cmd_mux_019:src_data -> red_to_black_memory_s1_agent:cp_data
	wire          cmd_mux_019_src_ready;                                                              // red_to_black_memory_s1_agent:cp_ready -> cmd_mux_019:src_ready
	wire   [21:0] cmd_mux_019_src_channel;                                                            // cmd_mux_019:src_channel -> red_to_black_memory_s1_agent:cp_channel
	wire          cmd_mux_019_src_startofpacket;                                                      // cmd_mux_019:src_startofpacket -> red_to_black_memory_s1_agent:cp_startofpacket
	wire          cmd_mux_019_src_endofpacket;                                                        // cmd_mux_019:src_endofpacket -> red_to_black_memory_s1_agent:cp_endofpacket
	wire   [31:0] black_to_red_memory_s1_agent_m0_readdata;                                           // black_to_red_memory_s1_translator:uav_readdata -> black_to_red_memory_s1_agent:m0_readdata
	wire          black_to_red_memory_s1_agent_m0_waitrequest;                                        // black_to_red_memory_s1_translator:uav_waitrequest -> black_to_red_memory_s1_agent:m0_waitrequest
	wire          black_to_red_memory_s1_agent_m0_debugaccess;                                        // black_to_red_memory_s1_agent:m0_debugaccess -> black_to_red_memory_s1_translator:uav_debugaccess
	wire   [31:0] black_to_red_memory_s1_agent_m0_address;                                            // black_to_red_memory_s1_agent:m0_address -> black_to_red_memory_s1_translator:uav_address
	wire    [3:0] black_to_red_memory_s1_agent_m0_byteenable;                                         // black_to_red_memory_s1_agent:m0_byteenable -> black_to_red_memory_s1_translator:uav_byteenable
	wire          black_to_red_memory_s1_agent_m0_read;                                               // black_to_red_memory_s1_agent:m0_read -> black_to_red_memory_s1_translator:uav_read
	wire          black_to_red_memory_s1_agent_m0_readdatavalid;                                      // black_to_red_memory_s1_translator:uav_readdatavalid -> black_to_red_memory_s1_agent:m0_readdatavalid
	wire          black_to_red_memory_s1_agent_m0_lock;                                               // black_to_red_memory_s1_agent:m0_lock -> black_to_red_memory_s1_translator:uav_lock
	wire   [31:0] black_to_red_memory_s1_agent_m0_writedata;                                          // black_to_red_memory_s1_agent:m0_writedata -> black_to_red_memory_s1_translator:uav_writedata
	wire          black_to_red_memory_s1_agent_m0_write;                                              // black_to_red_memory_s1_agent:m0_write -> black_to_red_memory_s1_translator:uav_write
	wire    [2:0] black_to_red_memory_s1_agent_m0_burstcount;                                         // black_to_red_memory_s1_agent:m0_burstcount -> black_to_red_memory_s1_translator:uav_burstcount
	wire          black_to_red_memory_s1_agent_rf_source_valid;                                       // black_to_red_memory_s1_agent:rf_source_valid -> black_to_red_memory_s1_agent_rsp_fifo:in_valid
	wire  [112:0] black_to_red_memory_s1_agent_rf_source_data;                                        // black_to_red_memory_s1_agent:rf_source_data -> black_to_red_memory_s1_agent_rsp_fifo:in_data
	wire          black_to_red_memory_s1_agent_rf_source_ready;                                       // black_to_red_memory_s1_agent_rsp_fifo:in_ready -> black_to_red_memory_s1_agent:rf_source_ready
	wire          black_to_red_memory_s1_agent_rf_source_startofpacket;                               // black_to_red_memory_s1_agent:rf_source_startofpacket -> black_to_red_memory_s1_agent_rsp_fifo:in_startofpacket
	wire          black_to_red_memory_s1_agent_rf_source_endofpacket;                                 // black_to_red_memory_s1_agent:rf_source_endofpacket -> black_to_red_memory_s1_agent_rsp_fifo:in_endofpacket
	wire          black_to_red_memory_s1_agent_rsp_fifo_out_valid;                                    // black_to_red_memory_s1_agent_rsp_fifo:out_valid -> black_to_red_memory_s1_agent:rf_sink_valid
	wire  [112:0] black_to_red_memory_s1_agent_rsp_fifo_out_data;                                     // black_to_red_memory_s1_agent_rsp_fifo:out_data -> black_to_red_memory_s1_agent:rf_sink_data
	wire          black_to_red_memory_s1_agent_rsp_fifo_out_ready;                                    // black_to_red_memory_s1_agent:rf_sink_ready -> black_to_red_memory_s1_agent_rsp_fifo:out_ready
	wire          black_to_red_memory_s1_agent_rsp_fifo_out_startofpacket;                            // black_to_red_memory_s1_agent_rsp_fifo:out_startofpacket -> black_to_red_memory_s1_agent:rf_sink_startofpacket
	wire          black_to_red_memory_s1_agent_rsp_fifo_out_endofpacket;                              // black_to_red_memory_s1_agent_rsp_fifo:out_endofpacket -> black_to_red_memory_s1_agent:rf_sink_endofpacket
	wire          black_to_red_memory_s1_agent_rdata_fifo_src_valid;                                  // black_to_red_memory_s1_agent:rdata_fifo_src_valid -> black_to_red_memory_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] black_to_red_memory_s1_agent_rdata_fifo_src_data;                                   // black_to_red_memory_s1_agent:rdata_fifo_src_data -> black_to_red_memory_s1_agent:rdata_fifo_sink_data
	wire          black_to_red_memory_s1_agent_rdata_fifo_src_ready;                                  // black_to_red_memory_s1_agent:rdata_fifo_sink_ready -> black_to_red_memory_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_020_src_valid;                                                              // cmd_mux_020:src_valid -> black_to_red_memory_s1_agent:cp_valid
	wire  [111:0] cmd_mux_020_src_data;                                                               // cmd_mux_020:src_data -> black_to_red_memory_s1_agent:cp_data
	wire          cmd_mux_020_src_ready;                                                              // black_to_red_memory_s1_agent:cp_ready -> cmd_mux_020:src_ready
	wire   [21:0] cmd_mux_020_src_channel;                                                            // cmd_mux_020:src_channel -> black_to_red_memory_s1_agent:cp_channel
	wire          cmd_mux_020_src_startofpacket;                                                      // cmd_mux_020:src_startofpacket -> black_to_red_memory_s1_agent:cp_startofpacket
	wire          cmd_mux_020_src_endofpacket;                                                        // cmd_mux_020:src_endofpacket -> black_to_red_memory_s1_agent:cp_endofpacket
	wire   [31:0] descriptor_mem_s1_agent_m0_readdata;                                                // descriptor_mem_s1_translator:uav_readdata -> descriptor_mem_s1_agent:m0_readdata
	wire          descriptor_mem_s1_agent_m0_waitrequest;                                             // descriptor_mem_s1_translator:uav_waitrequest -> descriptor_mem_s1_agent:m0_waitrequest
	wire          descriptor_mem_s1_agent_m0_debugaccess;                                             // descriptor_mem_s1_agent:m0_debugaccess -> descriptor_mem_s1_translator:uav_debugaccess
	wire   [31:0] descriptor_mem_s1_agent_m0_address;                                                 // descriptor_mem_s1_agent:m0_address -> descriptor_mem_s1_translator:uav_address
	wire    [3:0] descriptor_mem_s1_agent_m0_byteenable;                                              // descriptor_mem_s1_agent:m0_byteenable -> descriptor_mem_s1_translator:uav_byteenable
	wire          descriptor_mem_s1_agent_m0_read;                                                    // descriptor_mem_s1_agent:m0_read -> descriptor_mem_s1_translator:uav_read
	wire          descriptor_mem_s1_agent_m0_readdatavalid;                                           // descriptor_mem_s1_translator:uav_readdatavalid -> descriptor_mem_s1_agent:m0_readdatavalid
	wire          descriptor_mem_s1_agent_m0_lock;                                                    // descriptor_mem_s1_agent:m0_lock -> descriptor_mem_s1_translator:uav_lock
	wire   [31:0] descriptor_mem_s1_agent_m0_writedata;                                               // descriptor_mem_s1_agent:m0_writedata -> descriptor_mem_s1_translator:uav_writedata
	wire          descriptor_mem_s1_agent_m0_write;                                                   // descriptor_mem_s1_agent:m0_write -> descriptor_mem_s1_translator:uav_write
	wire    [2:0] descriptor_mem_s1_agent_m0_burstcount;                                              // descriptor_mem_s1_agent:m0_burstcount -> descriptor_mem_s1_translator:uav_burstcount
	wire          descriptor_mem_s1_agent_rf_source_valid;                                            // descriptor_mem_s1_agent:rf_source_valid -> descriptor_mem_s1_agent_rsp_fifo:in_valid
	wire  [112:0] descriptor_mem_s1_agent_rf_source_data;                                             // descriptor_mem_s1_agent:rf_source_data -> descriptor_mem_s1_agent_rsp_fifo:in_data
	wire          descriptor_mem_s1_agent_rf_source_ready;                                            // descriptor_mem_s1_agent_rsp_fifo:in_ready -> descriptor_mem_s1_agent:rf_source_ready
	wire          descriptor_mem_s1_agent_rf_source_startofpacket;                                    // descriptor_mem_s1_agent:rf_source_startofpacket -> descriptor_mem_s1_agent_rsp_fifo:in_startofpacket
	wire          descriptor_mem_s1_agent_rf_source_endofpacket;                                      // descriptor_mem_s1_agent:rf_source_endofpacket -> descriptor_mem_s1_agent_rsp_fifo:in_endofpacket
	wire          descriptor_mem_s1_agent_rsp_fifo_out_valid;                                         // descriptor_mem_s1_agent_rsp_fifo:out_valid -> descriptor_mem_s1_agent:rf_sink_valid
	wire  [112:0] descriptor_mem_s1_agent_rsp_fifo_out_data;                                          // descriptor_mem_s1_agent_rsp_fifo:out_data -> descriptor_mem_s1_agent:rf_sink_data
	wire          descriptor_mem_s1_agent_rsp_fifo_out_ready;                                         // descriptor_mem_s1_agent:rf_sink_ready -> descriptor_mem_s1_agent_rsp_fifo:out_ready
	wire          descriptor_mem_s1_agent_rsp_fifo_out_startofpacket;                                 // descriptor_mem_s1_agent_rsp_fifo:out_startofpacket -> descriptor_mem_s1_agent:rf_sink_startofpacket
	wire          descriptor_mem_s1_agent_rsp_fifo_out_endofpacket;                                   // descriptor_mem_s1_agent_rsp_fifo:out_endofpacket -> descriptor_mem_s1_agent:rf_sink_endofpacket
	wire          descriptor_mem_s1_agent_rdata_fifo_src_valid;                                       // descriptor_mem_s1_agent:rdata_fifo_src_valid -> descriptor_mem_s1_agent:rdata_fifo_sink_valid
	wire   [33:0] descriptor_mem_s1_agent_rdata_fifo_src_data;                                        // descriptor_mem_s1_agent:rdata_fifo_src_data -> descriptor_mem_s1_agent:rdata_fifo_sink_data
	wire          descriptor_mem_s1_agent_rdata_fifo_src_ready;                                       // descriptor_mem_s1_agent:rdata_fifo_sink_ready -> descriptor_mem_s1_agent:rdata_fifo_src_ready
	wire          cmd_mux_021_src_valid;                                                              // cmd_mux_021:src_valid -> descriptor_mem_s1_agent:cp_valid
	wire  [111:0] cmd_mux_021_src_data;                                                               // cmd_mux_021:src_data -> descriptor_mem_s1_agent:cp_data
	wire          cmd_mux_021_src_ready;                                                              // descriptor_mem_s1_agent:cp_ready -> cmd_mux_021:src_ready
	wire   [21:0] cmd_mux_021_src_channel;                                                            // cmd_mux_021:src_channel -> descriptor_mem_s1_agent:cp_channel
	wire          cmd_mux_021_src_startofpacket;                                                      // cmd_mux_021:src_startofpacket -> descriptor_mem_s1_agent:cp_startofpacket
	wire          cmd_mux_021_src_endofpacket;                                                        // cmd_mux_021:src_endofpacket -> descriptor_mem_s1_agent:cp_endofpacket
	wire          nios2_qsys_0_data_master_agent_cp_valid;                                            // nios2_qsys_0_data_master_agent:cp_valid -> router:sink_valid
	wire  [111:0] nios2_qsys_0_data_master_agent_cp_data;                                             // nios2_qsys_0_data_master_agent:cp_data -> router:sink_data
	wire          nios2_qsys_0_data_master_agent_cp_ready;                                            // router:sink_ready -> nios2_qsys_0_data_master_agent:cp_ready
	wire          nios2_qsys_0_data_master_agent_cp_startofpacket;                                    // nios2_qsys_0_data_master_agent:cp_startofpacket -> router:sink_startofpacket
	wire          nios2_qsys_0_data_master_agent_cp_endofpacket;                                      // nios2_qsys_0_data_master_agent:cp_endofpacket -> router:sink_endofpacket
	wire          router_src_valid;                                                                   // router:src_valid -> cmd_demux:sink_valid
	wire  [111:0] router_src_data;                                                                    // router:src_data -> cmd_demux:sink_data
	wire          router_src_ready;                                                                   // cmd_demux:sink_ready -> router:src_ready
	wire   [21:0] router_src_channel;                                                                 // router:src_channel -> cmd_demux:sink_channel
	wire          router_src_startofpacket;                                                           // router:src_startofpacket -> cmd_demux:sink_startofpacket
	wire          router_src_endofpacket;                                                             // router:src_endofpacket -> cmd_demux:sink_endofpacket
	wire          red_rx_descriptor_read_agent_cp_valid;                                              // red_rx_descriptor_read_agent:cp_valid -> router_001:sink_valid
	wire  [111:0] red_rx_descriptor_read_agent_cp_data;                                               // red_rx_descriptor_read_agent:cp_data -> router_001:sink_data
	wire          red_rx_descriptor_read_agent_cp_ready;                                              // router_001:sink_ready -> red_rx_descriptor_read_agent:cp_ready
	wire          red_rx_descriptor_read_agent_cp_startofpacket;                                      // red_rx_descriptor_read_agent:cp_startofpacket -> router_001:sink_startofpacket
	wire          red_rx_descriptor_read_agent_cp_endofpacket;                                        // red_rx_descriptor_read_agent:cp_endofpacket -> router_001:sink_endofpacket
	wire          router_001_src_valid;                                                               // router_001:src_valid -> cmd_demux_001:sink_valid
	wire  [111:0] router_001_src_data;                                                                // router_001:src_data -> cmd_demux_001:sink_data
	wire          router_001_src_ready;                                                               // cmd_demux_001:sink_ready -> router_001:src_ready
	wire   [21:0] router_001_src_channel;                                                             // router_001:src_channel -> cmd_demux_001:sink_channel
	wire          router_001_src_startofpacket;                                                       // router_001:src_startofpacket -> cmd_demux_001:sink_startofpacket
	wire          router_001_src_endofpacket;                                                         // router_001:src_endofpacket -> cmd_demux_001:sink_endofpacket
	wire          red_tx_descriptor_read_agent_cp_valid;                                              // red_tx_descriptor_read_agent:cp_valid -> router_002:sink_valid
	wire  [111:0] red_tx_descriptor_read_agent_cp_data;                                               // red_tx_descriptor_read_agent:cp_data -> router_002:sink_data
	wire          red_tx_descriptor_read_agent_cp_ready;                                              // router_002:sink_ready -> red_tx_descriptor_read_agent:cp_ready
	wire          red_tx_descriptor_read_agent_cp_startofpacket;                                      // red_tx_descriptor_read_agent:cp_startofpacket -> router_002:sink_startofpacket
	wire          red_tx_descriptor_read_agent_cp_endofpacket;                                        // red_tx_descriptor_read_agent:cp_endofpacket -> router_002:sink_endofpacket
	wire          router_002_src_valid;                                                               // router_002:src_valid -> cmd_demux_002:sink_valid
	wire  [111:0] router_002_src_data;                                                                // router_002:src_data -> cmd_demux_002:sink_data
	wire          router_002_src_ready;                                                               // cmd_demux_002:sink_ready -> router_002:src_ready
	wire   [21:0] router_002_src_channel;                                                             // router_002:src_channel -> cmd_demux_002:sink_channel
	wire          router_002_src_startofpacket;                                                       // router_002:src_startofpacket -> cmd_demux_002:sink_startofpacket
	wire          router_002_src_endofpacket;                                                         // router_002:src_endofpacket -> cmd_demux_002:sink_endofpacket
	wire          black_rx_descriptor_read_agent_cp_valid;                                            // black_rx_descriptor_read_agent:cp_valid -> router_003:sink_valid
	wire  [111:0] black_rx_descriptor_read_agent_cp_data;                                             // black_rx_descriptor_read_agent:cp_data -> router_003:sink_data
	wire          black_rx_descriptor_read_agent_cp_ready;                                            // router_003:sink_ready -> black_rx_descriptor_read_agent:cp_ready
	wire          black_rx_descriptor_read_agent_cp_startofpacket;                                    // black_rx_descriptor_read_agent:cp_startofpacket -> router_003:sink_startofpacket
	wire          black_rx_descriptor_read_agent_cp_endofpacket;                                      // black_rx_descriptor_read_agent:cp_endofpacket -> router_003:sink_endofpacket
	wire          router_003_src_valid;                                                               // router_003:src_valid -> cmd_demux_003:sink_valid
	wire  [111:0] router_003_src_data;                                                                // router_003:src_data -> cmd_demux_003:sink_data
	wire          router_003_src_ready;                                                               // cmd_demux_003:sink_ready -> router_003:src_ready
	wire   [21:0] router_003_src_channel;                                                             // router_003:src_channel -> cmd_demux_003:sink_channel
	wire          router_003_src_startofpacket;                                                       // router_003:src_startofpacket -> cmd_demux_003:sink_startofpacket
	wire          router_003_src_endofpacket;                                                         // router_003:src_endofpacket -> cmd_demux_003:sink_endofpacket
	wire          black_tx_descriptor_read_agent_cp_valid;                                            // black_tx_descriptor_read_agent:cp_valid -> router_004:sink_valid
	wire  [111:0] black_tx_descriptor_read_agent_cp_data;                                             // black_tx_descriptor_read_agent:cp_data -> router_004:sink_data
	wire          black_tx_descriptor_read_agent_cp_ready;                                            // router_004:sink_ready -> black_tx_descriptor_read_agent:cp_ready
	wire          black_tx_descriptor_read_agent_cp_startofpacket;                                    // black_tx_descriptor_read_agent:cp_startofpacket -> router_004:sink_startofpacket
	wire          black_tx_descriptor_read_agent_cp_endofpacket;                                      // black_tx_descriptor_read_agent:cp_endofpacket -> router_004:sink_endofpacket
	wire          router_004_src_valid;                                                               // router_004:src_valid -> cmd_demux_004:sink_valid
	wire  [111:0] router_004_src_data;                                                                // router_004:src_data -> cmd_demux_004:sink_data
	wire          router_004_src_ready;                                                               // cmd_demux_004:sink_ready -> router_004:src_ready
	wire   [21:0] router_004_src_channel;                                                             // router_004:src_channel -> cmd_demux_004:sink_channel
	wire          router_004_src_startofpacket;                                                       // router_004:src_startofpacket -> cmd_demux_004:sink_startofpacket
	wire          router_004_src_endofpacket;                                                         // router_004:src_endofpacket -> cmd_demux_004:sink_endofpacket
	wire          red_rx_descriptor_write_agent_cp_valid;                                             // red_rx_descriptor_write_agent:cp_valid -> router_005:sink_valid
	wire  [111:0] red_rx_descriptor_write_agent_cp_data;                                              // red_rx_descriptor_write_agent:cp_data -> router_005:sink_data
	wire          red_rx_descriptor_write_agent_cp_ready;                                             // router_005:sink_ready -> red_rx_descriptor_write_agent:cp_ready
	wire          red_rx_descriptor_write_agent_cp_startofpacket;                                     // red_rx_descriptor_write_agent:cp_startofpacket -> router_005:sink_startofpacket
	wire          red_rx_descriptor_write_agent_cp_endofpacket;                                       // red_rx_descriptor_write_agent:cp_endofpacket -> router_005:sink_endofpacket
	wire          router_005_src_valid;                                                               // router_005:src_valid -> cmd_demux_005:sink_valid
	wire  [111:0] router_005_src_data;                                                                // router_005:src_data -> cmd_demux_005:sink_data
	wire          router_005_src_ready;                                                               // cmd_demux_005:sink_ready -> router_005:src_ready
	wire   [21:0] router_005_src_channel;                                                             // router_005:src_channel -> cmd_demux_005:sink_channel
	wire          router_005_src_startofpacket;                                                       // router_005:src_startofpacket -> cmd_demux_005:sink_startofpacket
	wire          router_005_src_endofpacket;                                                         // router_005:src_endofpacket -> cmd_demux_005:sink_endofpacket
	wire          red_tx_descriptor_write_agent_cp_valid;                                             // red_tx_descriptor_write_agent:cp_valid -> router_006:sink_valid
	wire  [111:0] red_tx_descriptor_write_agent_cp_data;                                              // red_tx_descriptor_write_agent:cp_data -> router_006:sink_data
	wire          red_tx_descriptor_write_agent_cp_ready;                                             // router_006:sink_ready -> red_tx_descriptor_write_agent:cp_ready
	wire          red_tx_descriptor_write_agent_cp_startofpacket;                                     // red_tx_descriptor_write_agent:cp_startofpacket -> router_006:sink_startofpacket
	wire          red_tx_descriptor_write_agent_cp_endofpacket;                                       // red_tx_descriptor_write_agent:cp_endofpacket -> router_006:sink_endofpacket
	wire          router_006_src_valid;                                                               // router_006:src_valid -> cmd_demux_006:sink_valid
	wire  [111:0] router_006_src_data;                                                                // router_006:src_data -> cmd_demux_006:sink_data
	wire          router_006_src_ready;                                                               // cmd_demux_006:sink_ready -> router_006:src_ready
	wire   [21:0] router_006_src_channel;                                                             // router_006:src_channel -> cmd_demux_006:sink_channel
	wire          router_006_src_startofpacket;                                                       // router_006:src_startofpacket -> cmd_demux_006:sink_startofpacket
	wire          router_006_src_endofpacket;                                                         // router_006:src_endofpacket -> cmd_demux_006:sink_endofpacket
	wire          black_rx_descriptor_write_agent_cp_valid;                                           // black_rx_descriptor_write_agent:cp_valid -> router_007:sink_valid
	wire  [111:0] black_rx_descriptor_write_agent_cp_data;                                            // black_rx_descriptor_write_agent:cp_data -> router_007:sink_data
	wire          black_rx_descriptor_write_agent_cp_ready;                                           // router_007:sink_ready -> black_rx_descriptor_write_agent:cp_ready
	wire          black_rx_descriptor_write_agent_cp_startofpacket;                                   // black_rx_descriptor_write_agent:cp_startofpacket -> router_007:sink_startofpacket
	wire          black_rx_descriptor_write_agent_cp_endofpacket;                                     // black_rx_descriptor_write_agent:cp_endofpacket -> router_007:sink_endofpacket
	wire          router_007_src_valid;                                                               // router_007:src_valid -> cmd_demux_007:sink_valid
	wire  [111:0] router_007_src_data;                                                                // router_007:src_data -> cmd_demux_007:sink_data
	wire          router_007_src_ready;                                                               // cmd_demux_007:sink_ready -> router_007:src_ready
	wire   [21:0] router_007_src_channel;                                                             // router_007:src_channel -> cmd_demux_007:sink_channel
	wire          router_007_src_startofpacket;                                                       // router_007:src_startofpacket -> cmd_demux_007:sink_startofpacket
	wire          router_007_src_endofpacket;                                                         // router_007:src_endofpacket -> cmd_demux_007:sink_endofpacket
	wire          black_tx_descriptor_write_agent_cp_valid;                                           // black_tx_descriptor_write_agent:cp_valid -> router_008:sink_valid
	wire  [111:0] black_tx_descriptor_write_agent_cp_data;                                            // black_tx_descriptor_write_agent:cp_data -> router_008:sink_data
	wire          black_tx_descriptor_write_agent_cp_ready;                                           // router_008:sink_ready -> black_tx_descriptor_write_agent:cp_ready
	wire          black_tx_descriptor_write_agent_cp_startofpacket;                                   // black_tx_descriptor_write_agent:cp_startofpacket -> router_008:sink_startofpacket
	wire          black_tx_descriptor_write_agent_cp_endofpacket;                                     // black_tx_descriptor_write_agent:cp_endofpacket -> router_008:sink_endofpacket
	wire          router_008_src_valid;                                                               // router_008:src_valid -> cmd_demux_008:sink_valid
	wire  [111:0] router_008_src_data;                                                                // router_008:src_data -> cmd_demux_008:sink_data
	wire          router_008_src_ready;                                                               // cmd_demux_008:sink_ready -> router_008:src_ready
	wire   [21:0] router_008_src_channel;                                                             // router_008:src_channel -> cmd_demux_008:sink_channel
	wire          router_008_src_startofpacket;                                                       // router_008:src_startofpacket -> cmd_demux_008:sink_startofpacket
	wire          router_008_src_endofpacket;                                                         // router_008:src_endofpacket -> cmd_demux_008:sink_endofpacket
	wire          red_tx_m_read_agent_cp_valid;                                                       // red_tx_m_read_agent:cp_valid -> router_009:sink_valid
	wire  [111:0] red_tx_m_read_agent_cp_data;                                                        // red_tx_m_read_agent:cp_data -> router_009:sink_data
	wire          red_tx_m_read_agent_cp_ready;                                                       // router_009:sink_ready -> red_tx_m_read_agent:cp_ready
	wire          red_tx_m_read_agent_cp_startofpacket;                                               // red_tx_m_read_agent:cp_startofpacket -> router_009:sink_startofpacket
	wire          red_tx_m_read_agent_cp_endofpacket;                                                 // red_tx_m_read_agent:cp_endofpacket -> router_009:sink_endofpacket
	wire          router_009_src_valid;                                                               // router_009:src_valid -> cmd_demux_009:sink_valid
	wire  [111:0] router_009_src_data;                                                                // router_009:src_data -> cmd_demux_009:sink_data
	wire          router_009_src_ready;                                                               // cmd_demux_009:sink_ready -> router_009:src_ready
	wire   [21:0] router_009_src_channel;                                                             // router_009:src_channel -> cmd_demux_009:sink_channel
	wire          router_009_src_startofpacket;                                                       // router_009:src_startofpacket -> cmd_demux_009:sink_startofpacket
	wire          router_009_src_endofpacket;                                                         // router_009:src_endofpacket -> cmd_demux_009:sink_endofpacket
	wire          black_rx_m_write_agent_cp_valid;                                                    // black_rx_m_write_agent:cp_valid -> router_010:sink_valid
	wire  [111:0] black_rx_m_write_agent_cp_data;                                                     // black_rx_m_write_agent:cp_data -> router_010:sink_data
	wire          black_rx_m_write_agent_cp_ready;                                                    // router_010:sink_ready -> black_rx_m_write_agent:cp_ready
	wire          black_rx_m_write_agent_cp_startofpacket;                                            // black_rx_m_write_agent:cp_startofpacket -> router_010:sink_startofpacket
	wire          black_rx_m_write_agent_cp_endofpacket;                                              // black_rx_m_write_agent:cp_endofpacket -> router_010:sink_endofpacket
	wire          router_010_src_valid;                                                               // router_010:src_valid -> cmd_demux_010:sink_valid
	wire  [111:0] router_010_src_data;                                                                // router_010:src_data -> cmd_demux_010:sink_data
	wire          router_010_src_ready;                                                               // cmd_demux_010:sink_ready -> router_010:src_ready
	wire   [21:0] router_010_src_channel;                                                             // router_010:src_channel -> cmd_demux_010:sink_channel
	wire          router_010_src_startofpacket;                                                       // router_010:src_startofpacket -> cmd_demux_010:sink_startofpacket
	wire          router_010_src_endofpacket;                                                         // router_010:src_endofpacket -> cmd_demux_010:sink_endofpacket
	wire          ted_decryptor_read_master_agent_cp_valid;                                           // ted_decryptor_read_master_agent:cp_valid -> router_011:sink_valid
	wire  [111:0] ted_decryptor_read_master_agent_cp_data;                                            // ted_decryptor_read_master_agent:cp_data -> router_011:sink_data
	wire          ted_decryptor_read_master_agent_cp_ready;                                           // router_011:sink_ready -> ted_decryptor_read_master_agent:cp_ready
	wire          ted_decryptor_read_master_agent_cp_startofpacket;                                   // ted_decryptor_read_master_agent:cp_startofpacket -> router_011:sink_startofpacket
	wire          ted_decryptor_read_master_agent_cp_endofpacket;                                     // ted_decryptor_read_master_agent:cp_endofpacket -> router_011:sink_endofpacket
	wire          router_011_src_valid;                                                               // router_011:src_valid -> cmd_demux_011:sink_valid
	wire  [111:0] router_011_src_data;                                                                // router_011:src_data -> cmd_demux_011:sink_data
	wire          router_011_src_ready;                                                               // cmd_demux_011:sink_ready -> router_011:src_ready
	wire   [21:0] router_011_src_channel;                                                             // router_011:src_channel -> cmd_demux_011:sink_channel
	wire          router_011_src_startofpacket;                                                       // router_011:src_startofpacket -> cmd_demux_011:sink_startofpacket
	wire          router_011_src_endofpacket;                                                         // router_011:src_endofpacket -> cmd_demux_011:sink_endofpacket
	wire          ted_decryptor_write_master_agent_cp_valid;                                          // ted_decryptor_write_master_agent:cp_valid -> router_012:sink_valid
	wire  [111:0] ted_decryptor_write_master_agent_cp_data;                                           // ted_decryptor_write_master_agent:cp_data -> router_012:sink_data
	wire          ted_decryptor_write_master_agent_cp_ready;                                          // router_012:sink_ready -> ted_decryptor_write_master_agent:cp_ready
	wire          ted_decryptor_write_master_agent_cp_startofpacket;                                  // ted_decryptor_write_master_agent:cp_startofpacket -> router_012:sink_startofpacket
	wire          ted_decryptor_write_master_agent_cp_endofpacket;                                    // ted_decryptor_write_master_agent:cp_endofpacket -> router_012:sink_endofpacket
	wire          router_012_src_valid;                                                               // router_012:src_valid -> cmd_demux_012:sink_valid
	wire  [111:0] router_012_src_data;                                                                // router_012:src_data -> cmd_demux_012:sink_data
	wire          router_012_src_ready;                                                               // cmd_demux_012:sink_ready -> router_012:src_ready
	wire   [21:0] router_012_src_channel;                                                             // router_012:src_channel -> cmd_demux_012:sink_channel
	wire          router_012_src_startofpacket;                                                       // router_012:src_startofpacket -> cmd_demux_012:sink_startofpacket
	wire          router_012_src_endofpacket;                                                         // router_012:src_endofpacket -> cmd_demux_012:sink_endofpacket
	wire          black_tx_m_read_agent_cp_valid;                                                     // black_tx_m_read_agent:cp_valid -> router_013:sink_valid
	wire  [111:0] black_tx_m_read_agent_cp_data;                                                      // black_tx_m_read_agent:cp_data -> router_013:sink_data
	wire          black_tx_m_read_agent_cp_ready;                                                     // router_013:sink_ready -> black_tx_m_read_agent:cp_ready
	wire          black_tx_m_read_agent_cp_startofpacket;                                             // black_tx_m_read_agent:cp_startofpacket -> router_013:sink_startofpacket
	wire          black_tx_m_read_agent_cp_endofpacket;                                               // black_tx_m_read_agent:cp_endofpacket -> router_013:sink_endofpacket
	wire          router_013_src_valid;                                                               // router_013:src_valid -> cmd_demux_013:sink_valid
	wire  [111:0] router_013_src_data;                                                                // router_013:src_data -> cmd_demux_013:sink_data
	wire          router_013_src_ready;                                                               // cmd_demux_013:sink_ready -> router_013:src_ready
	wire   [21:0] router_013_src_channel;                                                             // router_013:src_channel -> cmd_demux_013:sink_channel
	wire          router_013_src_startofpacket;                                                       // router_013:src_startofpacket -> cmd_demux_013:sink_startofpacket
	wire          router_013_src_endofpacket;                                                         // router_013:src_endofpacket -> cmd_demux_013:sink_endofpacket
	wire          red_rx_m_write_agent_cp_valid;                                                      // red_rx_m_write_agent:cp_valid -> router_014:sink_valid
	wire  [111:0] red_rx_m_write_agent_cp_data;                                                       // red_rx_m_write_agent:cp_data -> router_014:sink_data
	wire          red_rx_m_write_agent_cp_ready;                                                      // router_014:sink_ready -> red_rx_m_write_agent:cp_ready
	wire          red_rx_m_write_agent_cp_startofpacket;                                              // red_rx_m_write_agent:cp_startofpacket -> router_014:sink_startofpacket
	wire          red_rx_m_write_agent_cp_endofpacket;                                                // red_rx_m_write_agent:cp_endofpacket -> router_014:sink_endofpacket
	wire          router_014_src_valid;                                                               // router_014:src_valid -> cmd_demux_014:sink_valid
	wire  [111:0] router_014_src_data;                                                                // router_014:src_data -> cmd_demux_014:sink_data
	wire          router_014_src_ready;                                                               // cmd_demux_014:sink_ready -> router_014:src_ready
	wire   [21:0] router_014_src_channel;                                                             // router_014:src_channel -> cmd_demux_014:sink_channel
	wire          router_014_src_startofpacket;                                                       // router_014:src_startofpacket -> cmd_demux_014:sink_startofpacket
	wire          router_014_src_endofpacket;                                                         // router_014:src_endofpacket -> cmd_demux_014:sink_endofpacket
	wire          ted_encryptor_read_master_agent_cp_valid;                                           // ted_encryptor_read_master_agent:cp_valid -> router_015:sink_valid
	wire  [111:0] ted_encryptor_read_master_agent_cp_data;                                            // ted_encryptor_read_master_agent:cp_data -> router_015:sink_data
	wire          ted_encryptor_read_master_agent_cp_ready;                                           // router_015:sink_ready -> ted_encryptor_read_master_agent:cp_ready
	wire          ted_encryptor_read_master_agent_cp_startofpacket;                                   // ted_encryptor_read_master_agent:cp_startofpacket -> router_015:sink_startofpacket
	wire          ted_encryptor_read_master_agent_cp_endofpacket;                                     // ted_encryptor_read_master_agent:cp_endofpacket -> router_015:sink_endofpacket
	wire          router_015_src_valid;                                                               // router_015:src_valid -> cmd_demux_015:sink_valid
	wire  [111:0] router_015_src_data;                                                                // router_015:src_data -> cmd_demux_015:sink_data
	wire          router_015_src_ready;                                                               // cmd_demux_015:sink_ready -> router_015:src_ready
	wire   [21:0] router_015_src_channel;                                                             // router_015:src_channel -> cmd_demux_015:sink_channel
	wire          router_015_src_startofpacket;                                                       // router_015:src_startofpacket -> cmd_demux_015:sink_startofpacket
	wire          router_015_src_endofpacket;                                                         // router_015:src_endofpacket -> cmd_demux_015:sink_endofpacket
	wire          ted_encryptor_write_master_agent_cp_valid;                                          // ted_encryptor_write_master_agent:cp_valid -> router_016:sink_valid
	wire  [111:0] ted_encryptor_write_master_agent_cp_data;                                           // ted_encryptor_write_master_agent:cp_data -> router_016:sink_data
	wire          ted_encryptor_write_master_agent_cp_ready;                                          // router_016:sink_ready -> ted_encryptor_write_master_agent:cp_ready
	wire          ted_encryptor_write_master_agent_cp_startofpacket;                                  // ted_encryptor_write_master_agent:cp_startofpacket -> router_016:sink_startofpacket
	wire          ted_encryptor_write_master_agent_cp_endofpacket;                                    // ted_encryptor_write_master_agent:cp_endofpacket -> router_016:sink_endofpacket
	wire          router_016_src_valid;                                                               // router_016:src_valid -> cmd_demux_016:sink_valid
	wire  [111:0] router_016_src_data;                                                                // router_016:src_data -> cmd_demux_016:sink_data
	wire          router_016_src_ready;                                                               // cmd_demux_016:sink_ready -> router_016:src_ready
	wire   [21:0] router_016_src_channel;                                                             // router_016:src_channel -> cmd_demux_016:sink_channel
	wire          router_016_src_startofpacket;                                                       // router_016:src_startofpacket -> cmd_demux_016:sink_startofpacket
	wire          router_016_src_endofpacket;                                                         // router_016:src_endofpacket -> cmd_demux_016:sink_endofpacket
	wire          nios2_qsys_0_instruction_master_agent_cp_valid;                                     // nios2_qsys_0_instruction_master_agent:cp_valid -> router_017:sink_valid
	wire  [111:0] nios2_qsys_0_instruction_master_agent_cp_data;                                      // nios2_qsys_0_instruction_master_agent:cp_data -> router_017:sink_data
	wire          nios2_qsys_0_instruction_master_agent_cp_ready;                                     // router_017:sink_ready -> nios2_qsys_0_instruction_master_agent:cp_ready
	wire          nios2_qsys_0_instruction_master_agent_cp_startofpacket;                             // nios2_qsys_0_instruction_master_agent:cp_startofpacket -> router_017:sink_startofpacket
	wire          nios2_qsys_0_instruction_master_agent_cp_endofpacket;                               // nios2_qsys_0_instruction_master_agent:cp_endofpacket -> router_017:sink_endofpacket
	wire          router_017_src_valid;                                                               // router_017:src_valid -> cmd_demux_017:sink_valid
	wire  [111:0] router_017_src_data;                                                                // router_017:src_data -> cmd_demux_017:sink_data
	wire          router_017_src_ready;                                                               // cmd_demux_017:sink_ready -> router_017:src_ready
	wire   [21:0] router_017_src_channel;                                                             // router_017:src_channel -> cmd_demux_017:sink_channel
	wire          router_017_src_startofpacket;                                                       // router_017:src_startofpacket -> cmd_demux_017:sink_startofpacket
	wire          router_017_src_endofpacket;                                                         // router_017:src_endofpacket -> cmd_demux_017:sink_endofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_valid;                                         // jtag_uart_avalon_jtag_slave_agent:rp_valid -> router_018:sink_valid
	wire  [111:0] jtag_uart_avalon_jtag_slave_agent_rp_data;                                          // jtag_uart_avalon_jtag_slave_agent:rp_data -> router_018:sink_data
	wire          jtag_uart_avalon_jtag_slave_agent_rp_ready;                                         // router_018:sink_ready -> jtag_uart_avalon_jtag_slave_agent:rp_ready
	wire          jtag_uart_avalon_jtag_slave_agent_rp_startofpacket;                                 // jtag_uart_avalon_jtag_slave_agent:rp_startofpacket -> router_018:sink_startofpacket
	wire          jtag_uart_avalon_jtag_slave_agent_rp_endofpacket;                                   // jtag_uart_avalon_jtag_slave_agent:rp_endofpacket -> router_018:sink_endofpacket
	wire          router_018_src_valid;                                                               // router_018:src_valid -> rsp_demux:sink_valid
	wire  [111:0] router_018_src_data;                                                                // router_018:src_data -> rsp_demux:sink_data
	wire          router_018_src_ready;                                                               // rsp_demux:sink_ready -> router_018:src_ready
	wire   [21:0] router_018_src_channel;                                                             // router_018:src_channel -> rsp_demux:sink_channel
	wire          router_018_src_startofpacket;                                                       // router_018:src_startofpacket -> rsp_demux:sink_startofpacket
	wire          router_018_src_endofpacket;                                                         // router_018:src_endofpacket -> rsp_demux:sink_endofpacket
	wire          lcd_avalon_lcd_slave_agent_rp_valid;                                                // lcd_avalon_lcd_slave_agent:rp_valid -> router_019:sink_valid
	wire   [84:0] lcd_avalon_lcd_slave_agent_rp_data;                                                 // lcd_avalon_lcd_slave_agent:rp_data -> router_019:sink_data
	wire          lcd_avalon_lcd_slave_agent_rp_ready;                                                // router_019:sink_ready -> lcd_avalon_lcd_slave_agent:rp_ready
	wire          lcd_avalon_lcd_slave_agent_rp_startofpacket;                                        // lcd_avalon_lcd_slave_agent:rp_startofpacket -> router_019:sink_startofpacket
	wire          lcd_avalon_lcd_slave_agent_rp_endofpacket;                                          // lcd_avalon_lcd_slave_agent:rp_endofpacket -> router_019:sink_endofpacket
	wire          hex_avalon_slave_0_agent_rp_valid;                                                  // hex_avalon_slave_0_agent:rp_valid -> router_020:sink_valid
	wire  [111:0] hex_avalon_slave_0_agent_rp_data;                                                   // hex_avalon_slave_0_agent:rp_data -> router_020:sink_data
	wire          hex_avalon_slave_0_agent_rp_ready;                                                  // router_020:sink_ready -> hex_avalon_slave_0_agent:rp_ready
	wire          hex_avalon_slave_0_agent_rp_startofpacket;                                          // hex_avalon_slave_0_agent:rp_startofpacket -> router_020:sink_startofpacket
	wire          hex_avalon_slave_0_agent_rp_endofpacket;                                            // hex_avalon_slave_0_agent:rp_endofpacket -> router_020:sink_endofpacket
	wire          router_020_src_valid;                                                               // router_020:src_valid -> rsp_demux_002:sink_valid
	wire  [111:0] router_020_src_data;                                                                // router_020:src_data -> rsp_demux_002:sink_data
	wire          router_020_src_ready;                                                               // rsp_demux_002:sink_ready -> router_020:src_ready
	wire   [21:0] router_020_src_channel;                                                             // router_020:src_channel -> rsp_demux_002:sink_channel
	wire          router_020_src_startofpacket;                                                       // router_020:src_startofpacket -> rsp_demux_002:sink_startofpacket
	wire          router_020_src_endofpacket;                                                         // router_020:src_endofpacket -> rsp_demux_002:sink_endofpacket
	wire          black_interface_control_port_agent_rp_valid;                                        // black_interface_control_port_agent:rp_valid -> router_021:sink_valid
	wire  [111:0] black_interface_control_port_agent_rp_data;                                         // black_interface_control_port_agent:rp_data -> router_021:sink_data
	wire          black_interface_control_port_agent_rp_ready;                                        // router_021:sink_ready -> black_interface_control_port_agent:rp_ready
	wire          black_interface_control_port_agent_rp_startofpacket;                                // black_interface_control_port_agent:rp_startofpacket -> router_021:sink_startofpacket
	wire          black_interface_control_port_agent_rp_endofpacket;                                  // black_interface_control_port_agent:rp_endofpacket -> router_021:sink_endofpacket
	wire          router_021_src_valid;                                                               // router_021:src_valid -> rsp_demux_003:sink_valid
	wire  [111:0] router_021_src_data;                                                                // router_021:src_data -> rsp_demux_003:sink_data
	wire          router_021_src_ready;                                                               // rsp_demux_003:sink_ready -> router_021:src_ready
	wire   [21:0] router_021_src_channel;                                                             // router_021:src_channel -> rsp_demux_003:sink_channel
	wire          router_021_src_startofpacket;                                                       // router_021:src_startofpacket -> rsp_demux_003:sink_startofpacket
	wire          router_021_src_endofpacket;                                                         // router_021:src_endofpacket -> rsp_demux_003:sink_endofpacket
	wire          red_interface_control_port_agent_rp_valid;                                          // red_interface_control_port_agent:rp_valid -> router_022:sink_valid
	wire  [111:0] red_interface_control_port_agent_rp_data;                                           // red_interface_control_port_agent:rp_data -> router_022:sink_data
	wire          red_interface_control_port_agent_rp_ready;                                          // router_022:sink_ready -> red_interface_control_port_agent:rp_ready
	wire          red_interface_control_port_agent_rp_startofpacket;                                  // red_interface_control_port_agent:rp_startofpacket -> router_022:sink_startofpacket
	wire          red_interface_control_port_agent_rp_endofpacket;                                    // red_interface_control_port_agent:rp_endofpacket -> router_022:sink_endofpacket
	wire          router_022_src_valid;                                                               // router_022:src_valid -> rsp_demux_004:sink_valid
	wire  [111:0] router_022_src_data;                                                                // router_022:src_data -> rsp_demux_004:sink_data
	wire          router_022_src_ready;                                                               // rsp_demux_004:sink_ready -> router_022:src_ready
	wire   [21:0] router_022_src_channel;                                                             // router_022:src_channel -> rsp_demux_004:sink_channel
	wire          router_022_src_startofpacket;                                                       // router_022:src_startofpacket -> rsp_demux_004:sink_startofpacket
	wire          router_022_src_endofpacket;                                                         // router_022:src_endofpacket -> rsp_demux_004:sink_endofpacket
	wire          system_id_control_slave_agent_rp_valid;                                             // system_id_control_slave_agent:rp_valid -> router_023:sink_valid
	wire  [111:0] system_id_control_slave_agent_rp_data;                                              // system_id_control_slave_agent:rp_data -> router_023:sink_data
	wire          system_id_control_slave_agent_rp_ready;                                             // router_023:sink_ready -> system_id_control_slave_agent:rp_ready
	wire          system_id_control_slave_agent_rp_startofpacket;                                     // system_id_control_slave_agent:rp_startofpacket -> router_023:sink_startofpacket
	wire          system_id_control_slave_agent_rp_endofpacket;                                       // system_id_control_slave_agent:rp_endofpacket -> router_023:sink_endofpacket
	wire          router_023_src_valid;                                                               // router_023:src_valid -> rsp_demux_005:sink_valid
	wire  [111:0] router_023_src_data;                                                                // router_023:src_data -> rsp_demux_005:sink_data
	wire          router_023_src_ready;                                                               // rsp_demux_005:sink_ready -> router_023:src_ready
	wire   [21:0] router_023_src_channel;                                                             // router_023:src_channel -> rsp_demux_005:sink_channel
	wire          router_023_src_startofpacket;                                                       // router_023:src_startofpacket -> rsp_demux_005:sink_startofpacket
	wire          router_023_src_endofpacket;                                                         // router_023:src_endofpacket -> rsp_demux_005:sink_endofpacket
	wire          ted_encryptor_csr_agent_rp_valid;                                                   // ted_encryptor_csr_agent:rp_valid -> router_024:sink_valid
	wire  [111:0] ted_encryptor_csr_agent_rp_data;                                                    // ted_encryptor_csr_agent:rp_data -> router_024:sink_data
	wire          ted_encryptor_csr_agent_rp_ready;                                                   // router_024:sink_ready -> ted_encryptor_csr_agent:rp_ready
	wire          ted_encryptor_csr_agent_rp_startofpacket;                                           // ted_encryptor_csr_agent:rp_startofpacket -> router_024:sink_startofpacket
	wire          ted_encryptor_csr_agent_rp_endofpacket;                                             // ted_encryptor_csr_agent:rp_endofpacket -> router_024:sink_endofpacket
	wire          router_024_src_valid;                                                               // router_024:src_valid -> rsp_demux_006:sink_valid
	wire  [111:0] router_024_src_data;                                                                // router_024:src_data -> rsp_demux_006:sink_data
	wire          router_024_src_ready;                                                               // rsp_demux_006:sink_ready -> router_024:src_ready
	wire   [21:0] router_024_src_channel;                                                             // router_024:src_channel -> rsp_demux_006:sink_channel
	wire          router_024_src_startofpacket;                                                       // router_024:src_startofpacket -> rsp_demux_006:sink_startofpacket
	wire          router_024_src_endofpacket;                                                         // router_024:src_endofpacket -> rsp_demux_006:sink_endofpacket
	wire          ted_decryptor_csr_agent_rp_valid;                                                   // ted_decryptor_csr_agent:rp_valid -> router_025:sink_valid
	wire  [111:0] ted_decryptor_csr_agent_rp_data;                                                    // ted_decryptor_csr_agent:rp_data -> router_025:sink_data
	wire          ted_decryptor_csr_agent_rp_ready;                                                   // router_025:sink_ready -> ted_decryptor_csr_agent:rp_ready
	wire          ted_decryptor_csr_agent_rp_startofpacket;                                           // ted_decryptor_csr_agent:rp_startofpacket -> router_025:sink_startofpacket
	wire          ted_decryptor_csr_agent_rp_endofpacket;                                             // ted_decryptor_csr_agent:rp_endofpacket -> router_025:sink_endofpacket
	wire          router_025_src_valid;                                                               // router_025:src_valid -> rsp_demux_007:sink_valid
	wire  [111:0] router_025_src_data;                                                                // router_025:src_data -> rsp_demux_007:sink_data
	wire          router_025_src_ready;                                                               // rsp_demux_007:sink_ready -> router_025:src_ready
	wire   [21:0] router_025_src_channel;                                                             // router_025:src_channel -> rsp_demux_007:sink_channel
	wire          router_025_src_startofpacket;                                                       // router_025:src_startofpacket -> rsp_demux_007:sink_startofpacket
	wire          router_025_src_endofpacket;                                                         // router_025:src_endofpacket -> rsp_demux_007:sink_endofpacket
	wire          red_rx_csr_agent_rp_valid;                                                          // red_rx_csr_agent:rp_valid -> router_026:sink_valid
	wire  [111:0] red_rx_csr_agent_rp_data;                                                           // red_rx_csr_agent:rp_data -> router_026:sink_data
	wire          red_rx_csr_agent_rp_ready;                                                          // router_026:sink_ready -> red_rx_csr_agent:rp_ready
	wire          red_rx_csr_agent_rp_startofpacket;                                                  // red_rx_csr_agent:rp_startofpacket -> router_026:sink_startofpacket
	wire          red_rx_csr_agent_rp_endofpacket;                                                    // red_rx_csr_agent:rp_endofpacket -> router_026:sink_endofpacket
	wire          router_026_src_valid;                                                               // router_026:src_valid -> rsp_demux_008:sink_valid
	wire  [111:0] router_026_src_data;                                                                // router_026:src_data -> rsp_demux_008:sink_data
	wire          router_026_src_ready;                                                               // rsp_demux_008:sink_ready -> router_026:src_ready
	wire   [21:0] router_026_src_channel;                                                             // router_026:src_channel -> rsp_demux_008:sink_channel
	wire          router_026_src_startofpacket;                                                       // router_026:src_startofpacket -> rsp_demux_008:sink_startofpacket
	wire          router_026_src_endofpacket;                                                         // router_026:src_endofpacket -> rsp_demux_008:sink_endofpacket
	wire          red_tx_csr_agent_rp_valid;                                                          // red_tx_csr_agent:rp_valid -> router_027:sink_valid
	wire  [111:0] red_tx_csr_agent_rp_data;                                                           // red_tx_csr_agent:rp_data -> router_027:sink_data
	wire          red_tx_csr_agent_rp_ready;                                                          // router_027:sink_ready -> red_tx_csr_agent:rp_ready
	wire          red_tx_csr_agent_rp_startofpacket;                                                  // red_tx_csr_agent:rp_startofpacket -> router_027:sink_startofpacket
	wire          red_tx_csr_agent_rp_endofpacket;                                                    // red_tx_csr_agent:rp_endofpacket -> router_027:sink_endofpacket
	wire          router_027_src_valid;                                                               // router_027:src_valid -> rsp_demux_009:sink_valid
	wire  [111:0] router_027_src_data;                                                                // router_027:src_data -> rsp_demux_009:sink_data
	wire          router_027_src_ready;                                                               // rsp_demux_009:sink_ready -> router_027:src_ready
	wire   [21:0] router_027_src_channel;                                                             // router_027:src_channel -> rsp_demux_009:sink_channel
	wire          router_027_src_startofpacket;                                                       // router_027:src_startofpacket -> rsp_demux_009:sink_startofpacket
	wire          router_027_src_endofpacket;                                                         // router_027:src_endofpacket -> rsp_demux_009:sink_endofpacket
	wire          black_rx_csr_agent_rp_valid;                                                        // black_rx_csr_agent:rp_valid -> router_028:sink_valid
	wire  [111:0] black_rx_csr_agent_rp_data;                                                         // black_rx_csr_agent:rp_data -> router_028:sink_data
	wire          black_rx_csr_agent_rp_ready;                                                        // router_028:sink_ready -> black_rx_csr_agent:rp_ready
	wire          black_rx_csr_agent_rp_startofpacket;                                                // black_rx_csr_agent:rp_startofpacket -> router_028:sink_startofpacket
	wire          black_rx_csr_agent_rp_endofpacket;                                                  // black_rx_csr_agent:rp_endofpacket -> router_028:sink_endofpacket
	wire          router_028_src_valid;                                                               // router_028:src_valid -> rsp_demux_010:sink_valid
	wire  [111:0] router_028_src_data;                                                                // router_028:src_data -> rsp_demux_010:sink_data
	wire          router_028_src_ready;                                                               // rsp_demux_010:sink_ready -> router_028:src_ready
	wire   [21:0] router_028_src_channel;                                                             // router_028:src_channel -> rsp_demux_010:sink_channel
	wire          router_028_src_startofpacket;                                                       // router_028:src_startofpacket -> rsp_demux_010:sink_startofpacket
	wire          router_028_src_endofpacket;                                                         // router_028:src_endofpacket -> rsp_demux_010:sink_endofpacket
	wire          black_tx_csr_agent_rp_valid;                                                        // black_tx_csr_agent:rp_valid -> router_029:sink_valid
	wire  [111:0] black_tx_csr_agent_rp_data;                                                         // black_tx_csr_agent:rp_data -> router_029:sink_data
	wire          black_tx_csr_agent_rp_ready;                                                        // router_029:sink_ready -> black_tx_csr_agent:rp_ready
	wire          black_tx_csr_agent_rp_startofpacket;                                                // black_tx_csr_agent:rp_startofpacket -> router_029:sink_startofpacket
	wire          black_tx_csr_agent_rp_endofpacket;                                                  // black_tx_csr_agent:rp_endofpacket -> router_029:sink_endofpacket
	wire          router_029_src_valid;                                                               // router_029:src_valid -> rsp_demux_011:sink_valid
	wire  [111:0] router_029_src_data;                                                                // router_029:src_data -> rsp_demux_011:sink_data
	wire          router_029_src_ready;                                                               // rsp_demux_011:sink_ready -> router_029:src_ready
	wire   [21:0] router_029_src_channel;                                                             // router_029:src_channel -> rsp_demux_011:sink_channel
	wire          router_029_src_startofpacket;                                                       // router_029:src_startofpacket -> rsp_demux_011:sink_startofpacket
	wire          router_029_src_endofpacket;                                                         // router_029:src_endofpacket -> rsp_demux_011:sink_endofpacket
	wire          nios2_qsys_0_jtag_debug_module_agent_rp_valid;                                      // nios2_qsys_0_jtag_debug_module_agent:rp_valid -> router_030:sink_valid
	wire  [111:0] nios2_qsys_0_jtag_debug_module_agent_rp_data;                                       // nios2_qsys_0_jtag_debug_module_agent:rp_data -> router_030:sink_data
	wire          nios2_qsys_0_jtag_debug_module_agent_rp_ready;                                      // router_030:sink_ready -> nios2_qsys_0_jtag_debug_module_agent:rp_ready
	wire          nios2_qsys_0_jtag_debug_module_agent_rp_startofpacket;                              // nios2_qsys_0_jtag_debug_module_agent:rp_startofpacket -> router_030:sink_startofpacket
	wire          nios2_qsys_0_jtag_debug_module_agent_rp_endofpacket;                                // nios2_qsys_0_jtag_debug_module_agent:rp_endofpacket -> router_030:sink_endofpacket
	wire          router_030_src_valid;                                                               // router_030:src_valid -> rsp_demux_012:sink_valid
	wire  [111:0] router_030_src_data;                                                                // router_030:src_data -> rsp_demux_012:sink_data
	wire          router_030_src_ready;                                                               // rsp_demux_012:sink_ready -> router_030:src_ready
	wire   [21:0] router_030_src_channel;                                                             // router_030:src_channel -> rsp_demux_012:sink_channel
	wire          router_030_src_startofpacket;                                                       // router_030:src_startofpacket -> rsp_demux_012:sink_startofpacket
	wire          router_030_src_endofpacket;                                                         // router_030:src_endofpacket -> rsp_demux_012:sink_endofpacket
	wire          lcd_clk_pll_slave_agent_rp_valid;                                                   // lcd_clk_pll_slave_agent:rp_valid -> router_031:sink_valid
	wire  [111:0] lcd_clk_pll_slave_agent_rp_data;                                                    // lcd_clk_pll_slave_agent:rp_data -> router_031:sink_data
	wire          lcd_clk_pll_slave_agent_rp_ready;                                                   // router_031:sink_ready -> lcd_clk_pll_slave_agent:rp_ready
	wire          lcd_clk_pll_slave_agent_rp_startofpacket;                                           // lcd_clk_pll_slave_agent:rp_startofpacket -> router_031:sink_startofpacket
	wire          lcd_clk_pll_slave_agent_rp_endofpacket;                                             // lcd_clk_pll_slave_agent:rp_endofpacket -> router_031:sink_endofpacket
	wire          router_031_src_valid;                                                               // router_031:src_valid -> rsp_demux_013:sink_valid
	wire  [111:0] router_031_src_data;                                                                // router_031:src_data -> rsp_demux_013:sink_data
	wire          router_031_src_ready;                                                               // rsp_demux_013:sink_ready -> router_031:src_ready
	wire   [21:0] router_031_src_channel;                                                             // router_031:src_channel -> rsp_demux_013:sink_channel
	wire          router_031_src_startofpacket;                                                       // router_031:src_startofpacket -> rsp_demux_013:sink_startofpacket
	wire          router_031_src_endofpacket;                                                         // router_031:src_endofpacket -> rsp_demux_013:sink_endofpacket
	wire          output_port_s1_agent_rp_valid;                                                      // output_port_s1_agent:rp_valid -> router_032:sink_valid
	wire  [111:0] output_port_s1_agent_rp_data;                                                       // output_port_s1_agent:rp_data -> router_032:sink_data
	wire          output_port_s1_agent_rp_ready;                                                      // router_032:sink_ready -> output_port_s1_agent:rp_ready
	wire          output_port_s1_agent_rp_startofpacket;                                              // output_port_s1_agent:rp_startofpacket -> router_032:sink_startofpacket
	wire          output_port_s1_agent_rp_endofpacket;                                                // output_port_s1_agent:rp_endofpacket -> router_032:sink_endofpacket
	wire          router_032_src_valid;                                                               // router_032:src_valid -> rsp_demux_014:sink_valid
	wire  [111:0] router_032_src_data;                                                                // router_032:src_data -> rsp_demux_014:sink_data
	wire          router_032_src_ready;                                                               // rsp_demux_014:sink_ready -> router_032:src_ready
	wire   [21:0] router_032_src_channel;                                                             // router_032:src_channel -> rsp_demux_014:sink_channel
	wire          router_032_src_startofpacket;                                                       // router_032:src_startofpacket -> rsp_demux_014:sink_startofpacket
	wire          router_032_src_endofpacket;                                                         // router_032:src_endofpacket -> rsp_demux_014:sink_endofpacket
	wire          input_port_s1_agent_rp_valid;                                                       // input_port_s1_agent:rp_valid -> router_033:sink_valid
	wire  [111:0] input_port_s1_agent_rp_data;                                                        // input_port_s1_agent:rp_data -> router_033:sink_data
	wire          input_port_s1_agent_rp_ready;                                                       // router_033:sink_ready -> input_port_s1_agent:rp_ready
	wire          input_port_s1_agent_rp_startofpacket;                                               // input_port_s1_agent:rp_startofpacket -> router_033:sink_startofpacket
	wire          input_port_s1_agent_rp_endofpacket;                                                 // input_port_s1_agent:rp_endofpacket -> router_033:sink_endofpacket
	wire          router_033_src_valid;                                                               // router_033:src_valid -> rsp_demux_015:sink_valid
	wire  [111:0] router_033_src_data;                                                                // router_033:src_data -> rsp_demux_015:sink_data
	wire          router_033_src_ready;                                                               // rsp_demux_015:sink_ready -> router_033:src_ready
	wire   [21:0] router_033_src_channel;                                                             // router_033:src_channel -> rsp_demux_015:sink_channel
	wire          router_033_src_startofpacket;                                                       // router_033:src_startofpacket -> rsp_demux_015:sink_startofpacket
	wire          router_033_src_endofpacket;                                                         // router_033:src_endofpacket -> rsp_demux_015:sink_endofpacket
	wire          instruction_memory_s1_agent_rp_valid;                                               // instruction_memory_s1_agent:rp_valid -> router_034:sink_valid
	wire  [111:0] instruction_memory_s1_agent_rp_data;                                                // instruction_memory_s1_agent:rp_data -> router_034:sink_data
	wire          instruction_memory_s1_agent_rp_ready;                                               // router_034:sink_ready -> instruction_memory_s1_agent:rp_ready
	wire          instruction_memory_s1_agent_rp_startofpacket;                                       // instruction_memory_s1_agent:rp_startofpacket -> router_034:sink_startofpacket
	wire          instruction_memory_s1_agent_rp_endofpacket;                                         // instruction_memory_s1_agent:rp_endofpacket -> router_034:sink_endofpacket
	wire          router_034_src_valid;                                                               // router_034:src_valid -> rsp_demux_016:sink_valid
	wire  [111:0] router_034_src_data;                                                                // router_034:src_data -> rsp_demux_016:sink_data
	wire          router_034_src_ready;                                                               // rsp_demux_016:sink_ready -> router_034:src_ready
	wire   [21:0] router_034_src_channel;                                                             // router_034:src_channel -> rsp_demux_016:sink_channel
	wire          router_034_src_startofpacket;                                                       // router_034:src_startofpacket -> rsp_demux_016:sink_startofpacket
	wire          router_034_src_endofpacket;                                                         // router_034:src_endofpacket -> rsp_demux_016:sink_endofpacket
	wire          heap_stack_s1_agent_rp_valid;                                                       // heap_stack_s1_agent:rp_valid -> router_035:sink_valid
	wire  [111:0] heap_stack_s1_agent_rp_data;                                                        // heap_stack_s1_agent:rp_data -> router_035:sink_data
	wire          heap_stack_s1_agent_rp_ready;                                                       // router_035:sink_ready -> heap_stack_s1_agent:rp_ready
	wire          heap_stack_s1_agent_rp_startofpacket;                                               // heap_stack_s1_agent:rp_startofpacket -> router_035:sink_startofpacket
	wire          heap_stack_s1_agent_rp_endofpacket;                                                 // heap_stack_s1_agent:rp_endofpacket -> router_035:sink_endofpacket
	wire          router_035_src_valid;                                                               // router_035:src_valid -> rsp_demux_017:sink_valid
	wire  [111:0] router_035_src_data;                                                                // router_035:src_data -> rsp_demux_017:sink_data
	wire          router_035_src_ready;                                                               // rsp_demux_017:sink_ready -> router_035:src_ready
	wire   [21:0] router_035_src_channel;                                                             // router_035:src_channel -> rsp_demux_017:sink_channel
	wire          router_035_src_startofpacket;                                                       // router_035:src_startofpacket -> rsp_demux_017:sink_startofpacket
	wire          router_035_src_endofpacket;                                                         // router_035:src_endofpacket -> rsp_demux_017:sink_endofpacket
	wire          system_timer_s1_agent_rp_valid;                                                     // system_timer_s1_agent:rp_valid -> router_036:sink_valid
	wire  [111:0] system_timer_s1_agent_rp_data;                                                      // system_timer_s1_agent:rp_data -> router_036:sink_data
	wire          system_timer_s1_agent_rp_ready;                                                     // router_036:sink_ready -> system_timer_s1_agent:rp_ready
	wire          system_timer_s1_agent_rp_startofpacket;                                             // system_timer_s1_agent:rp_startofpacket -> router_036:sink_startofpacket
	wire          system_timer_s1_agent_rp_endofpacket;                                               // system_timer_s1_agent:rp_endofpacket -> router_036:sink_endofpacket
	wire          router_036_src_valid;                                                               // router_036:src_valid -> rsp_demux_018:sink_valid
	wire  [111:0] router_036_src_data;                                                                // router_036:src_data -> rsp_demux_018:sink_data
	wire          router_036_src_ready;                                                               // rsp_demux_018:sink_ready -> router_036:src_ready
	wire   [21:0] router_036_src_channel;                                                             // router_036:src_channel -> rsp_demux_018:sink_channel
	wire          router_036_src_startofpacket;                                                       // router_036:src_startofpacket -> rsp_demux_018:sink_startofpacket
	wire          router_036_src_endofpacket;                                                         // router_036:src_endofpacket -> rsp_demux_018:sink_endofpacket
	wire          red_to_black_memory_s1_agent_rp_valid;                                              // red_to_black_memory_s1_agent:rp_valid -> router_037:sink_valid
	wire  [111:0] red_to_black_memory_s1_agent_rp_data;                                               // red_to_black_memory_s1_agent:rp_data -> router_037:sink_data
	wire          red_to_black_memory_s1_agent_rp_ready;                                              // router_037:sink_ready -> red_to_black_memory_s1_agent:rp_ready
	wire          red_to_black_memory_s1_agent_rp_startofpacket;                                      // red_to_black_memory_s1_agent:rp_startofpacket -> router_037:sink_startofpacket
	wire          red_to_black_memory_s1_agent_rp_endofpacket;                                        // red_to_black_memory_s1_agent:rp_endofpacket -> router_037:sink_endofpacket
	wire          router_037_src_valid;                                                               // router_037:src_valid -> rsp_demux_019:sink_valid
	wire  [111:0] router_037_src_data;                                                                // router_037:src_data -> rsp_demux_019:sink_data
	wire          router_037_src_ready;                                                               // rsp_demux_019:sink_ready -> router_037:src_ready
	wire   [21:0] router_037_src_channel;                                                             // router_037:src_channel -> rsp_demux_019:sink_channel
	wire          router_037_src_startofpacket;                                                       // router_037:src_startofpacket -> rsp_demux_019:sink_startofpacket
	wire          router_037_src_endofpacket;                                                         // router_037:src_endofpacket -> rsp_demux_019:sink_endofpacket
	wire          black_to_red_memory_s1_agent_rp_valid;                                              // black_to_red_memory_s1_agent:rp_valid -> router_038:sink_valid
	wire  [111:0] black_to_red_memory_s1_agent_rp_data;                                               // black_to_red_memory_s1_agent:rp_data -> router_038:sink_data
	wire          black_to_red_memory_s1_agent_rp_ready;                                              // router_038:sink_ready -> black_to_red_memory_s1_agent:rp_ready
	wire          black_to_red_memory_s1_agent_rp_startofpacket;                                      // black_to_red_memory_s1_agent:rp_startofpacket -> router_038:sink_startofpacket
	wire          black_to_red_memory_s1_agent_rp_endofpacket;                                        // black_to_red_memory_s1_agent:rp_endofpacket -> router_038:sink_endofpacket
	wire          router_038_src_valid;                                                               // router_038:src_valid -> rsp_demux_020:sink_valid
	wire  [111:0] router_038_src_data;                                                                // router_038:src_data -> rsp_demux_020:sink_data
	wire          router_038_src_ready;                                                               // rsp_demux_020:sink_ready -> router_038:src_ready
	wire   [21:0] router_038_src_channel;                                                             // router_038:src_channel -> rsp_demux_020:sink_channel
	wire          router_038_src_startofpacket;                                                       // router_038:src_startofpacket -> rsp_demux_020:sink_startofpacket
	wire          router_038_src_endofpacket;                                                         // router_038:src_endofpacket -> rsp_demux_020:sink_endofpacket
	wire          descriptor_mem_s1_agent_rp_valid;                                                   // descriptor_mem_s1_agent:rp_valid -> router_039:sink_valid
	wire  [111:0] descriptor_mem_s1_agent_rp_data;                                                    // descriptor_mem_s1_agent:rp_data -> router_039:sink_data
	wire          descriptor_mem_s1_agent_rp_ready;                                                   // router_039:sink_ready -> descriptor_mem_s1_agent:rp_ready
	wire          descriptor_mem_s1_agent_rp_startofpacket;                                           // descriptor_mem_s1_agent:rp_startofpacket -> router_039:sink_startofpacket
	wire          descriptor_mem_s1_agent_rp_endofpacket;                                             // descriptor_mem_s1_agent:rp_endofpacket -> router_039:sink_endofpacket
	wire          router_039_src_valid;                                                               // router_039:src_valid -> rsp_demux_021:sink_valid
	wire  [111:0] router_039_src_data;                                                                // router_039:src_data -> rsp_demux_021:sink_data
	wire          router_039_src_ready;                                                               // rsp_demux_021:sink_ready -> router_039:src_ready
	wire   [21:0] router_039_src_channel;                                                             // router_039:src_channel -> rsp_demux_021:sink_channel
	wire          router_039_src_startofpacket;                                                       // router_039:src_startofpacket -> rsp_demux_021:sink_startofpacket
	wire          router_039_src_endofpacket;                                                         // router_039:src_endofpacket -> rsp_demux_021:sink_endofpacket
	wire          lcd_avalon_lcd_slave_burst_adapter_source0_valid;                                   // lcd_avalon_lcd_slave_burst_adapter:source0_valid -> lcd_avalon_lcd_slave_agent:cp_valid
	wire   [84:0] lcd_avalon_lcd_slave_burst_adapter_source0_data;                                    // lcd_avalon_lcd_slave_burst_adapter:source0_data -> lcd_avalon_lcd_slave_agent:cp_data
	wire          lcd_avalon_lcd_slave_burst_adapter_source0_ready;                                   // lcd_avalon_lcd_slave_agent:cp_ready -> lcd_avalon_lcd_slave_burst_adapter:source0_ready
	wire   [21:0] lcd_avalon_lcd_slave_burst_adapter_source0_channel;                                 // lcd_avalon_lcd_slave_burst_adapter:source0_channel -> lcd_avalon_lcd_slave_agent:cp_channel
	wire          lcd_avalon_lcd_slave_burst_adapter_source0_startofpacket;                           // lcd_avalon_lcd_slave_burst_adapter:source0_startofpacket -> lcd_avalon_lcd_slave_agent:cp_startofpacket
	wire          lcd_avalon_lcd_slave_burst_adapter_source0_endofpacket;                             // lcd_avalon_lcd_slave_burst_adapter:source0_endofpacket -> lcd_avalon_lcd_slave_agent:cp_endofpacket
	wire          cmd_demux_src0_valid;                                                               // cmd_demux:src0_valid -> cmd_mux:sink0_valid
	wire  [111:0] cmd_demux_src0_data;                                                                // cmd_demux:src0_data -> cmd_mux:sink0_data
	wire          cmd_demux_src0_ready;                                                               // cmd_mux:sink0_ready -> cmd_demux:src0_ready
	wire   [21:0] cmd_demux_src0_channel;                                                             // cmd_demux:src0_channel -> cmd_mux:sink0_channel
	wire          cmd_demux_src0_startofpacket;                                                       // cmd_demux:src0_startofpacket -> cmd_mux:sink0_startofpacket
	wire          cmd_demux_src0_endofpacket;                                                         // cmd_demux:src0_endofpacket -> cmd_mux:sink0_endofpacket
	wire          cmd_demux_src2_valid;                                                               // cmd_demux:src2_valid -> cmd_mux_002:sink0_valid
	wire  [111:0] cmd_demux_src2_data;                                                                // cmd_demux:src2_data -> cmd_mux_002:sink0_data
	wire          cmd_demux_src2_ready;                                                               // cmd_mux_002:sink0_ready -> cmd_demux:src2_ready
	wire   [21:0] cmd_demux_src2_channel;                                                             // cmd_demux:src2_channel -> cmd_mux_002:sink0_channel
	wire          cmd_demux_src2_startofpacket;                                                       // cmd_demux:src2_startofpacket -> cmd_mux_002:sink0_startofpacket
	wire          cmd_demux_src2_endofpacket;                                                         // cmd_demux:src2_endofpacket -> cmd_mux_002:sink0_endofpacket
	wire          cmd_demux_src3_valid;                                                               // cmd_demux:src3_valid -> cmd_mux_003:sink0_valid
	wire  [111:0] cmd_demux_src3_data;                                                                // cmd_demux:src3_data -> cmd_mux_003:sink0_data
	wire          cmd_demux_src3_ready;                                                               // cmd_mux_003:sink0_ready -> cmd_demux:src3_ready
	wire   [21:0] cmd_demux_src3_channel;                                                             // cmd_demux:src3_channel -> cmd_mux_003:sink0_channel
	wire          cmd_demux_src3_startofpacket;                                                       // cmd_demux:src3_startofpacket -> cmd_mux_003:sink0_startofpacket
	wire          cmd_demux_src3_endofpacket;                                                         // cmd_demux:src3_endofpacket -> cmd_mux_003:sink0_endofpacket
	wire          cmd_demux_src4_valid;                                                               // cmd_demux:src4_valid -> cmd_mux_004:sink0_valid
	wire  [111:0] cmd_demux_src4_data;                                                                // cmd_demux:src4_data -> cmd_mux_004:sink0_data
	wire          cmd_demux_src4_ready;                                                               // cmd_mux_004:sink0_ready -> cmd_demux:src4_ready
	wire   [21:0] cmd_demux_src4_channel;                                                             // cmd_demux:src4_channel -> cmd_mux_004:sink0_channel
	wire          cmd_demux_src4_startofpacket;                                                       // cmd_demux:src4_startofpacket -> cmd_mux_004:sink0_startofpacket
	wire          cmd_demux_src4_endofpacket;                                                         // cmd_demux:src4_endofpacket -> cmd_mux_004:sink0_endofpacket
	wire          cmd_demux_src5_valid;                                                               // cmd_demux:src5_valid -> cmd_mux_005:sink0_valid
	wire  [111:0] cmd_demux_src5_data;                                                                // cmd_demux:src5_data -> cmd_mux_005:sink0_data
	wire          cmd_demux_src5_ready;                                                               // cmd_mux_005:sink0_ready -> cmd_demux:src5_ready
	wire   [21:0] cmd_demux_src5_channel;                                                             // cmd_demux:src5_channel -> cmd_mux_005:sink0_channel
	wire          cmd_demux_src5_startofpacket;                                                       // cmd_demux:src5_startofpacket -> cmd_mux_005:sink0_startofpacket
	wire          cmd_demux_src5_endofpacket;                                                         // cmd_demux:src5_endofpacket -> cmd_mux_005:sink0_endofpacket
	wire          cmd_demux_src6_valid;                                                               // cmd_demux:src6_valid -> cmd_mux_006:sink0_valid
	wire  [111:0] cmd_demux_src6_data;                                                                // cmd_demux:src6_data -> cmd_mux_006:sink0_data
	wire          cmd_demux_src6_ready;                                                               // cmd_mux_006:sink0_ready -> cmd_demux:src6_ready
	wire   [21:0] cmd_demux_src6_channel;                                                             // cmd_demux:src6_channel -> cmd_mux_006:sink0_channel
	wire          cmd_demux_src6_startofpacket;                                                       // cmd_demux:src6_startofpacket -> cmd_mux_006:sink0_startofpacket
	wire          cmd_demux_src6_endofpacket;                                                         // cmd_demux:src6_endofpacket -> cmd_mux_006:sink0_endofpacket
	wire          cmd_demux_src7_valid;                                                               // cmd_demux:src7_valid -> cmd_mux_007:sink0_valid
	wire  [111:0] cmd_demux_src7_data;                                                                // cmd_demux:src7_data -> cmd_mux_007:sink0_data
	wire          cmd_demux_src7_ready;                                                               // cmd_mux_007:sink0_ready -> cmd_demux:src7_ready
	wire   [21:0] cmd_demux_src7_channel;                                                             // cmd_demux:src7_channel -> cmd_mux_007:sink0_channel
	wire          cmd_demux_src7_startofpacket;                                                       // cmd_demux:src7_startofpacket -> cmd_mux_007:sink0_startofpacket
	wire          cmd_demux_src7_endofpacket;                                                         // cmd_demux:src7_endofpacket -> cmd_mux_007:sink0_endofpacket
	wire          cmd_demux_src8_valid;                                                               // cmd_demux:src8_valid -> cmd_mux_008:sink0_valid
	wire  [111:0] cmd_demux_src8_data;                                                                // cmd_demux:src8_data -> cmd_mux_008:sink0_data
	wire          cmd_demux_src8_ready;                                                               // cmd_mux_008:sink0_ready -> cmd_demux:src8_ready
	wire   [21:0] cmd_demux_src8_channel;                                                             // cmd_demux:src8_channel -> cmd_mux_008:sink0_channel
	wire          cmd_demux_src8_startofpacket;                                                       // cmd_demux:src8_startofpacket -> cmd_mux_008:sink0_startofpacket
	wire          cmd_demux_src8_endofpacket;                                                         // cmd_demux:src8_endofpacket -> cmd_mux_008:sink0_endofpacket
	wire          cmd_demux_src9_valid;                                                               // cmd_demux:src9_valid -> cmd_mux_009:sink0_valid
	wire  [111:0] cmd_demux_src9_data;                                                                // cmd_demux:src9_data -> cmd_mux_009:sink0_data
	wire          cmd_demux_src9_ready;                                                               // cmd_mux_009:sink0_ready -> cmd_demux:src9_ready
	wire   [21:0] cmd_demux_src9_channel;                                                             // cmd_demux:src9_channel -> cmd_mux_009:sink0_channel
	wire          cmd_demux_src9_startofpacket;                                                       // cmd_demux:src9_startofpacket -> cmd_mux_009:sink0_startofpacket
	wire          cmd_demux_src9_endofpacket;                                                         // cmd_demux:src9_endofpacket -> cmd_mux_009:sink0_endofpacket
	wire          cmd_demux_src10_valid;                                                              // cmd_demux:src10_valid -> cmd_mux_010:sink0_valid
	wire  [111:0] cmd_demux_src10_data;                                                               // cmd_demux:src10_data -> cmd_mux_010:sink0_data
	wire          cmd_demux_src10_ready;                                                              // cmd_mux_010:sink0_ready -> cmd_demux:src10_ready
	wire   [21:0] cmd_demux_src10_channel;                                                            // cmd_demux:src10_channel -> cmd_mux_010:sink0_channel
	wire          cmd_demux_src10_startofpacket;                                                      // cmd_demux:src10_startofpacket -> cmd_mux_010:sink0_startofpacket
	wire          cmd_demux_src10_endofpacket;                                                        // cmd_demux:src10_endofpacket -> cmd_mux_010:sink0_endofpacket
	wire          cmd_demux_src11_valid;                                                              // cmd_demux:src11_valid -> cmd_mux_011:sink0_valid
	wire  [111:0] cmd_demux_src11_data;                                                               // cmd_demux:src11_data -> cmd_mux_011:sink0_data
	wire          cmd_demux_src11_ready;                                                              // cmd_mux_011:sink0_ready -> cmd_demux:src11_ready
	wire   [21:0] cmd_demux_src11_channel;                                                            // cmd_demux:src11_channel -> cmd_mux_011:sink0_channel
	wire          cmd_demux_src11_startofpacket;                                                      // cmd_demux:src11_startofpacket -> cmd_mux_011:sink0_startofpacket
	wire          cmd_demux_src11_endofpacket;                                                        // cmd_demux:src11_endofpacket -> cmd_mux_011:sink0_endofpacket
	wire          cmd_demux_src12_valid;                                                              // cmd_demux:src12_valid -> cmd_mux_012:sink0_valid
	wire  [111:0] cmd_demux_src12_data;                                                               // cmd_demux:src12_data -> cmd_mux_012:sink0_data
	wire          cmd_demux_src12_ready;                                                              // cmd_mux_012:sink0_ready -> cmd_demux:src12_ready
	wire   [21:0] cmd_demux_src12_channel;                                                            // cmd_demux:src12_channel -> cmd_mux_012:sink0_channel
	wire          cmd_demux_src12_startofpacket;                                                      // cmd_demux:src12_startofpacket -> cmd_mux_012:sink0_startofpacket
	wire          cmd_demux_src12_endofpacket;                                                        // cmd_demux:src12_endofpacket -> cmd_mux_012:sink0_endofpacket
	wire          cmd_demux_src13_valid;                                                              // cmd_demux:src13_valid -> cmd_mux_013:sink0_valid
	wire  [111:0] cmd_demux_src13_data;                                                               // cmd_demux:src13_data -> cmd_mux_013:sink0_data
	wire          cmd_demux_src13_ready;                                                              // cmd_mux_013:sink0_ready -> cmd_demux:src13_ready
	wire   [21:0] cmd_demux_src13_channel;                                                            // cmd_demux:src13_channel -> cmd_mux_013:sink0_channel
	wire          cmd_demux_src13_startofpacket;                                                      // cmd_demux:src13_startofpacket -> cmd_mux_013:sink0_startofpacket
	wire          cmd_demux_src13_endofpacket;                                                        // cmd_demux:src13_endofpacket -> cmd_mux_013:sink0_endofpacket
	wire          cmd_demux_src14_valid;                                                              // cmd_demux:src14_valid -> cmd_mux_014:sink0_valid
	wire  [111:0] cmd_demux_src14_data;                                                               // cmd_demux:src14_data -> cmd_mux_014:sink0_data
	wire          cmd_demux_src14_ready;                                                              // cmd_mux_014:sink0_ready -> cmd_demux:src14_ready
	wire   [21:0] cmd_demux_src14_channel;                                                            // cmd_demux:src14_channel -> cmd_mux_014:sink0_channel
	wire          cmd_demux_src14_startofpacket;                                                      // cmd_demux:src14_startofpacket -> cmd_mux_014:sink0_startofpacket
	wire          cmd_demux_src14_endofpacket;                                                        // cmd_demux:src14_endofpacket -> cmd_mux_014:sink0_endofpacket
	wire          cmd_demux_src15_valid;                                                              // cmd_demux:src15_valid -> cmd_mux_015:sink0_valid
	wire  [111:0] cmd_demux_src15_data;                                                               // cmd_demux:src15_data -> cmd_mux_015:sink0_data
	wire          cmd_demux_src15_ready;                                                              // cmd_mux_015:sink0_ready -> cmd_demux:src15_ready
	wire   [21:0] cmd_demux_src15_channel;                                                            // cmd_demux:src15_channel -> cmd_mux_015:sink0_channel
	wire          cmd_demux_src15_startofpacket;                                                      // cmd_demux:src15_startofpacket -> cmd_mux_015:sink0_startofpacket
	wire          cmd_demux_src15_endofpacket;                                                        // cmd_demux:src15_endofpacket -> cmd_mux_015:sink0_endofpacket
	wire          cmd_demux_src16_valid;                                                              // cmd_demux:src16_valid -> cmd_mux_016:sink0_valid
	wire  [111:0] cmd_demux_src16_data;                                                               // cmd_demux:src16_data -> cmd_mux_016:sink0_data
	wire          cmd_demux_src16_ready;                                                              // cmd_mux_016:sink0_ready -> cmd_demux:src16_ready
	wire   [21:0] cmd_demux_src16_channel;                                                            // cmd_demux:src16_channel -> cmd_mux_016:sink0_channel
	wire          cmd_demux_src16_startofpacket;                                                      // cmd_demux:src16_startofpacket -> cmd_mux_016:sink0_startofpacket
	wire          cmd_demux_src16_endofpacket;                                                        // cmd_demux:src16_endofpacket -> cmd_mux_016:sink0_endofpacket
	wire          cmd_demux_src17_valid;                                                              // cmd_demux:src17_valid -> cmd_mux_017:sink0_valid
	wire  [111:0] cmd_demux_src17_data;                                                               // cmd_demux:src17_data -> cmd_mux_017:sink0_data
	wire          cmd_demux_src17_ready;                                                              // cmd_mux_017:sink0_ready -> cmd_demux:src17_ready
	wire   [21:0] cmd_demux_src17_channel;                                                            // cmd_demux:src17_channel -> cmd_mux_017:sink0_channel
	wire          cmd_demux_src17_startofpacket;                                                      // cmd_demux:src17_startofpacket -> cmd_mux_017:sink0_startofpacket
	wire          cmd_demux_src17_endofpacket;                                                        // cmd_demux:src17_endofpacket -> cmd_mux_017:sink0_endofpacket
	wire          cmd_demux_src18_valid;                                                              // cmd_demux:src18_valid -> cmd_mux_018:sink0_valid
	wire  [111:0] cmd_demux_src18_data;                                                               // cmd_demux:src18_data -> cmd_mux_018:sink0_data
	wire          cmd_demux_src18_ready;                                                              // cmd_mux_018:sink0_ready -> cmd_demux:src18_ready
	wire   [21:0] cmd_demux_src18_channel;                                                            // cmd_demux:src18_channel -> cmd_mux_018:sink0_channel
	wire          cmd_demux_src18_startofpacket;                                                      // cmd_demux:src18_startofpacket -> cmd_mux_018:sink0_startofpacket
	wire          cmd_demux_src18_endofpacket;                                                        // cmd_demux:src18_endofpacket -> cmd_mux_018:sink0_endofpacket
	wire          cmd_demux_src19_valid;                                                              // cmd_demux:src19_valid -> cmd_mux_019:sink0_valid
	wire  [111:0] cmd_demux_src19_data;                                                               // cmd_demux:src19_data -> cmd_mux_019:sink0_data
	wire          cmd_demux_src19_ready;                                                              // cmd_mux_019:sink0_ready -> cmd_demux:src19_ready
	wire   [21:0] cmd_demux_src19_channel;                                                            // cmd_demux:src19_channel -> cmd_mux_019:sink0_channel
	wire          cmd_demux_src19_startofpacket;                                                      // cmd_demux:src19_startofpacket -> cmd_mux_019:sink0_startofpacket
	wire          cmd_demux_src19_endofpacket;                                                        // cmd_demux:src19_endofpacket -> cmd_mux_019:sink0_endofpacket
	wire          cmd_demux_src20_valid;                                                              // cmd_demux:src20_valid -> cmd_mux_020:sink0_valid
	wire  [111:0] cmd_demux_src20_data;                                                               // cmd_demux:src20_data -> cmd_mux_020:sink0_data
	wire          cmd_demux_src20_ready;                                                              // cmd_mux_020:sink0_ready -> cmd_demux:src20_ready
	wire   [21:0] cmd_demux_src20_channel;                                                            // cmd_demux:src20_channel -> cmd_mux_020:sink0_channel
	wire          cmd_demux_src20_startofpacket;                                                      // cmd_demux:src20_startofpacket -> cmd_mux_020:sink0_startofpacket
	wire          cmd_demux_src20_endofpacket;                                                        // cmd_demux:src20_endofpacket -> cmd_mux_020:sink0_endofpacket
	wire          cmd_demux_src21_valid;                                                              // cmd_demux:src21_valid -> cmd_mux_021:sink0_valid
	wire  [111:0] cmd_demux_src21_data;                                                               // cmd_demux:src21_data -> cmd_mux_021:sink0_data
	wire          cmd_demux_src21_ready;                                                              // cmd_mux_021:sink0_ready -> cmd_demux:src21_ready
	wire   [21:0] cmd_demux_src21_channel;                                                            // cmd_demux:src21_channel -> cmd_mux_021:sink0_channel
	wire          cmd_demux_src21_startofpacket;                                                      // cmd_demux:src21_startofpacket -> cmd_mux_021:sink0_startofpacket
	wire          cmd_demux_src21_endofpacket;                                                        // cmd_demux:src21_endofpacket -> cmd_mux_021:sink0_endofpacket
	wire          cmd_demux_001_src0_valid;                                                           // cmd_demux_001:src0_valid -> cmd_mux_021:sink1_valid
	wire  [111:0] cmd_demux_001_src0_data;                                                            // cmd_demux_001:src0_data -> cmd_mux_021:sink1_data
	wire          cmd_demux_001_src0_ready;                                                           // cmd_mux_021:sink1_ready -> cmd_demux_001:src0_ready
	wire   [21:0] cmd_demux_001_src0_channel;                                                         // cmd_demux_001:src0_channel -> cmd_mux_021:sink1_channel
	wire          cmd_demux_001_src0_startofpacket;                                                   // cmd_demux_001:src0_startofpacket -> cmd_mux_021:sink1_startofpacket
	wire          cmd_demux_001_src0_endofpacket;                                                     // cmd_demux_001:src0_endofpacket -> cmd_mux_021:sink1_endofpacket
	wire          cmd_demux_002_src0_valid;                                                           // cmd_demux_002:src0_valid -> cmd_mux_021:sink2_valid
	wire  [111:0] cmd_demux_002_src0_data;                                                            // cmd_demux_002:src0_data -> cmd_mux_021:sink2_data
	wire          cmd_demux_002_src0_ready;                                                           // cmd_mux_021:sink2_ready -> cmd_demux_002:src0_ready
	wire   [21:0] cmd_demux_002_src0_channel;                                                         // cmd_demux_002:src0_channel -> cmd_mux_021:sink2_channel
	wire          cmd_demux_002_src0_startofpacket;                                                   // cmd_demux_002:src0_startofpacket -> cmd_mux_021:sink2_startofpacket
	wire          cmd_demux_002_src0_endofpacket;                                                     // cmd_demux_002:src0_endofpacket -> cmd_mux_021:sink2_endofpacket
	wire          cmd_demux_003_src0_valid;                                                           // cmd_demux_003:src0_valid -> cmd_mux_021:sink3_valid
	wire  [111:0] cmd_demux_003_src0_data;                                                            // cmd_demux_003:src0_data -> cmd_mux_021:sink3_data
	wire          cmd_demux_003_src0_ready;                                                           // cmd_mux_021:sink3_ready -> cmd_demux_003:src0_ready
	wire   [21:0] cmd_demux_003_src0_channel;                                                         // cmd_demux_003:src0_channel -> cmd_mux_021:sink3_channel
	wire          cmd_demux_003_src0_startofpacket;                                                   // cmd_demux_003:src0_startofpacket -> cmd_mux_021:sink3_startofpacket
	wire          cmd_demux_003_src0_endofpacket;                                                     // cmd_demux_003:src0_endofpacket -> cmd_mux_021:sink3_endofpacket
	wire          cmd_demux_004_src0_valid;                                                           // cmd_demux_004:src0_valid -> cmd_mux_021:sink4_valid
	wire  [111:0] cmd_demux_004_src0_data;                                                            // cmd_demux_004:src0_data -> cmd_mux_021:sink4_data
	wire          cmd_demux_004_src0_ready;                                                           // cmd_mux_021:sink4_ready -> cmd_demux_004:src0_ready
	wire   [21:0] cmd_demux_004_src0_channel;                                                         // cmd_demux_004:src0_channel -> cmd_mux_021:sink4_channel
	wire          cmd_demux_004_src0_startofpacket;                                                   // cmd_demux_004:src0_startofpacket -> cmd_mux_021:sink4_startofpacket
	wire          cmd_demux_004_src0_endofpacket;                                                     // cmd_demux_004:src0_endofpacket -> cmd_mux_021:sink4_endofpacket
	wire          cmd_demux_005_src0_valid;                                                           // cmd_demux_005:src0_valid -> cmd_mux_021:sink5_valid
	wire  [111:0] cmd_demux_005_src0_data;                                                            // cmd_demux_005:src0_data -> cmd_mux_021:sink5_data
	wire          cmd_demux_005_src0_ready;                                                           // cmd_mux_021:sink5_ready -> cmd_demux_005:src0_ready
	wire   [21:0] cmd_demux_005_src0_channel;                                                         // cmd_demux_005:src0_channel -> cmd_mux_021:sink5_channel
	wire          cmd_demux_005_src0_startofpacket;                                                   // cmd_demux_005:src0_startofpacket -> cmd_mux_021:sink5_startofpacket
	wire          cmd_demux_005_src0_endofpacket;                                                     // cmd_demux_005:src0_endofpacket -> cmd_mux_021:sink5_endofpacket
	wire          cmd_demux_006_src0_valid;                                                           // cmd_demux_006:src0_valid -> cmd_mux_021:sink6_valid
	wire  [111:0] cmd_demux_006_src0_data;                                                            // cmd_demux_006:src0_data -> cmd_mux_021:sink6_data
	wire          cmd_demux_006_src0_ready;                                                           // cmd_mux_021:sink6_ready -> cmd_demux_006:src0_ready
	wire   [21:0] cmd_demux_006_src0_channel;                                                         // cmd_demux_006:src0_channel -> cmd_mux_021:sink6_channel
	wire          cmd_demux_006_src0_startofpacket;                                                   // cmd_demux_006:src0_startofpacket -> cmd_mux_021:sink6_startofpacket
	wire          cmd_demux_006_src0_endofpacket;                                                     // cmd_demux_006:src0_endofpacket -> cmd_mux_021:sink6_endofpacket
	wire          cmd_demux_007_src0_valid;                                                           // cmd_demux_007:src0_valid -> cmd_mux_021:sink7_valid
	wire  [111:0] cmd_demux_007_src0_data;                                                            // cmd_demux_007:src0_data -> cmd_mux_021:sink7_data
	wire          cmd_demux_007_src0_ready;                                                           // cmd_mux_021:sink7_ready -> cmd_demux_007:src0_ready
	wire   [21:0] cmd_demux_007_src0_channel;                                                         // cmd_demux_007:src0_channel -> cmd_mux_021:sink7_channel
	wire          cmd_demux_007_src0_startofpacket;                                                   // cmd_demux_007:src0_startofpacket -> cmd_mux_021:sink7_startofpacket
	wire          cmd_demux_007_src0_endofpacket;                                                     // cmd_demux_007:src0_endofpacket -> cmd_mux_021:sink7_endofpacket
	wire          cmd_demux_008_src0_valid;                                                           // cmd_demux_008:src0_valid -> cmd_mux_021:sink8_valid
	wire  [111:0] cmd_demux_008_src0_data;                                                            // cmd_demux_008:src0_data -> cmd_mux_021:sink8_data
	wire          cmd_demux_008_src0_ready;                                                           // cmd_mux_021:sink8_ready -> cmd_demux_008:src0_ready
	wire   [21:0] cmd_demux_008_src0_channel;                                                         // cmd_demux_008:src0_channel -> cmd_mux_021:sink8_channel
	wire          cmd_demux_008_src0_startofpacket;                                                   // cmd_demux_008:src0_startofpacket -> cmd_mux_021:sink8_startofpacket
	wire          cmd_demux_008_src0_endofpacket;                                                     // cmd_demux_008:src0_endofpacket -> cmd_mux_021:sink8_endofpacket
	wire          cmd_demux_009_src0_valid;                                                           // cmd_demux_009:src0_valid -> cmd_mux_020:sink1_valid
	wire  [111:0] cmd_demux_009_src0_data;                                                            // cmd_demux_009:src0_data -> cmd_mux_020:sink1_data
	wire          cmd_demux_009_src0_ready;                                                           // cmd_mux_020:sink1_ready -> cmd_demux_009:src0_ready
	wire   [21:0] cmd_demux_009_src0_channel;                                                         // cmd_demux_009:src0_channel -> cmd_mux_020:sink1_channel
	wire          cmd_demux_009_src0_startofpacket;                                                   // cmd_demux_009:src0_startofpacket -> cmd_mux_020:sink1_startofpacket
	wire          cmd_demux_009_src0_endofpacket;                                                     // cmd_demux_009:src0_endofpacket -> cmd_mux_020:sink1_endofpacket
	wire          cmd_demux_010_src0_valid;                                                           // cmd_demux_010:src0_valid -> cmd_mux_020:sink2_valid
	wire  [111:0] cmd_demux_010_src0_data;                                                            // cmd_demux_010:src0_data -> cmd_mux_020:sink2_data
	wire          cmd_demux_010_src0_ready;                                                           // cmd_mux_020:sink2_ready -> cmd_demux_010:src0_ready
	wire   [21:0] cmd_demux_010_src0_channel;                                                         // cmd_demux_010:src0_channel -> cmd_mux_020:sink2_channel
	wire          cmd_demux_010_src0_startofpacket;                                                   // cmd_demux_010:src0_startofpacket -> cmd_mux_020:sink2_startofpacket
	wire          cmd_demux_010_src0_endofpacket;                                                     // cmd_demux_010:src0_endofpacket -> cmd_mux_020:sink2_endofpacket
	wire          cmd_demux_011_src0_valid;                                                           // cmd_demux_011:src0_valid -> cmd_mux_020:sink3_valid
	wire  [111:0] cmd_demux_011_src0_data;                                                            // cmd_demux_011:src0_data -> cmd_mux_020:sink3_data
	wire          cmd_demux_011_src0_ready;                                                           // cmd_mux_020:sink3_ready -> cmd_demux_011:src0_ready
	wire   [21:0] cmd_demux_011_src0_channel;                                                         // cmd_demux_011:src0_channel -> cmd_mux_020:sink3_channel
	wire          cmd_demux_011_src0_startofpacket;                                                   // cmd_demux_011:src0_startofpacket -> cmd_mux_020:sink3_startofpacket
	wire          cmd_demux_011_src0_endofpacket;                                                     // cmd_demux_011:src0_endofpacket -> cmd_mux_020:sink3_endofpacket
	wire          cmd_demux_012_src0_valid;                                                           // cmd_demux_012:src0_valid -> cmd_mux_020:sink4_valid
	wire  [111:0] cmd_demux_012_src0_data;                                                            // cmd_demux_012:src0_data -> cmd_mux_020:sink4_data
	wire          cmd_demux_012_src0_ready;                                                           // cmd_mux_020:sink4_ready -> cmd_demux_012:src0_ready
	wire   [21:0] cmd_demux_012_src0_channel;                                                         // cmd_demux_012:src0_channel -> cmd_mux_020:sink4_channel
	wire          cmd_demux_012_src0_startofpacket;                                                   // cmd_demux_012:src0_startofpacket -> cmd_mux_020:sink4_startofpacket
	wire          cmd_demux_012_src0_endofpacket;                                                     // cmd_demux_012:src0_endofpacket -> cmd_mux_020:sink4_endofpacket
	wire          cmd_demux_013_src0_valid;                                                           // cmd_demux_013:src0_valid -> cmd_mux_019:sink1_valid
	wire  [111:0] cmd_demux_013_src0_data;                                                            // cmd_demux_013:src0_data -> cmd_mux_019:sink1_data
	wire          cmd_demux_013_src0_ready;                                                           // cmd_mux_019:sink1_ready -> cmd_demux_013:src0_ready
	wire   [21:0] cmd_demux_013_src0_channel;                                                         // cmd_demux_013:src0_channel -> cmd_mux_019:sink1_channel
	wire          cmd_demux_013_src0_startofpacket;                                                   // cmd_demux_013:src0_startofpacket -> cmd_mux_019:sink1_startofpacket
	wire          cmd_demux_013_src0_endofpacket;                                                     // cmd_demux_013:src0_endofpacket -> cmd_mux_019:sink1_endofpacket
	wire          cmd_demux_014_src0_valid;                                                           // cmd_demux_014:src0_valid -> cmd_mux_019:sink2_valid
	wire  [111:0] cmd_demux_014_src0_data;                                                            // cmd_demux_014:src0_data -> cmd_mux_019:sink2_data
	wire          cmd_demux_014_src0_ready;                                                           // cmd_mux_019:sink2_ready -> cmd_demux_014:src0_ready
	wire   [21:0] cmd_demux_014_src0_channel;                                                         // cmd_demux_014:src0_channel -> cmd_mux_019:sink2_channel
	wire          cmd_demux_014_src0_startofpacket;                                                   // cmd_demux_014:src0_startofpacket -> cmd_mux_019:sink2_startofpacket
	wire          cmd_demux_014_src0_endofpacket;                                                     // cmd_demux_014:src0_endofpacket -> cmd_mux_019:sink2_endofpacket
	wire          cmd_demux_015_src0_valid;                                                           // cmd_demux_015:src0_valid -> cmd_mux_019:sink3_valid
	wire  [111:0] cmd_demux_015_src0_data;                                                            // cmd_demux_015:src0_data -> cmd_mux_019:sink3_data
	wire          cmd_demux_015_src0_ready;                                                           // cmd_mux_019:sink3_ready -> cmd_demux_015:src0_ready
	wire   [21:0] cmd_demux_015_src0_channel;                                                         // cmd_demux_015:src0_channel -> cmd_mux_019:sink3_channel
	wire          cmd_demux_015_src0_startofpacket;                                                   // cmd_demux_015:src0_startofpacket -> cmd_mux_019:sink3_startofpacket
	wire          cmd_demux_015_src0_endofpacket;                                                     // cmd_demux_015:src0_endofpacket -> cmd_mux_019:sink3_endofpacket
	wire          cmd_demux_016_src0_valid;                                                           // cmd_demux_016:src0_valid -> cmd_mux_019:sink4_valid
	wire  [111:0] cmd_demux_016_src0_data;                                                            // cmd_demux_016:src0_data -> cmd_mux_019:sink4_data
	wire          cmd_demux_016_src0_ready;                                                           // cmd_mux_019:sink4_ready -> cmd_demux_016:src0_ready
	wire   [21:0] cmd_demux_016_src0_channel;                                                         // cmd_demux_016:src0_channel -> cmd_mux_019:sink4_channel
	wire          cmd_demux_016_src0_startofpacket;                                                   // cmd_demux_016:src0_startofpacket -> cmd_mux_019:sink4_startofpacket
	wire          cmd_demux_016_src0_endofpacket;                                                     // cmd_demux_016:src0_endofpacket -> cmd_mux_019:sink4_endofpacket
	wire          cmd_demux_017_src0_valid;                                                           // cmd_demux_017:src0_valid -> cmd_mux_012:sink1_valid
	wire  [111:0] cmd_demux_017_src0_data;                                                            // cmd_demux_017:src0_data -> cmd_mux_012:sink1_data
	wire          cmd_demux_017_src0_ready;                                                           // cmd_mux_012:sink1_ready -> cmd_demux_017:src0_ready
	wire   [21:0] cmd_demux_017_src0_channel;                                                         // cmd_demux_017:src0_channel -> cmd_mux_012:sink1_channel
	wire          cmd_demux_017_src0_startofpacket;                                                   // cmd_demux_017:src0_startofpacket -> cmd_mux_012:sink1_startofpacket
	wire          cmd_demux_017_src0_endofpacket;                                                     // cmd_demux_017:src0_endofpacket -> cmd_mux_012:sink1_endofpacket
	wire          cmd_demux_017_src1_valid;                                                           // cmd_demux_017:src1_valid -> cmd_mux_016:sink1_valid
	wire  [111:0] cmd_demux_017_src1_data;                                                            // cmd_demux_017:src1_data -> cmd_mux_016:sink1_data
	wire          cmd_demux_017_src1_ready;                                                           // cmd_mux_016:sink1_ready -> cmd_demux_017:src1_ready
	wire   [21:0] cmd_demux_017_src1_channel;                                                         // cmd_demux_017:src1_channel -> cmd_mux_016:sink1_channel
	wire          cmd_demux_017_src1_startofpacket;                                                   // cmd_demux_017:src1_startofpacket -> cmd_mux_016:sink1_startofpacket
	wire          cmd_demux_017_src1_endofpacket;                                                     // cmd_demux_017:src1_endofpacket -> cmd_mux_016:sink1_endofpacket
	wire          cmd_demux_017_src2_valid;                                                           // cmd_demux_017:src2_valid -> cmd_mux_017:sink1_valid
	wire  [111:0] cmd_demux_017_src2_data;                                                            // cmd_demux_017:src2_data -> cmd_mux_017:sink1_data
	wire          cmd_demux_017_src2_ready;                                                           // cmd_mux_017:sink1_ready -> cmd_demux_017:src2_ready
	wire   [21:0] cmd_demux_017_src2_channel;                                                         // cmd_demux_017:src2_channel -> cmd_mux_017:sink1_channel
	wire          cmd_demux_017_src2_startofpacket;                                                   // cmd_demux_017:src2_startofpacket -> cmd_mux_017:sink1_startofpacket
	wire          cmd_demux_017_src2_endofpacket;                                                     // cmd_demux_017:src2_endofpacket -> cmd_mux_017:sink1_endofpacket
	wire          rsp_demux_src0_valid;                                                               // rsp_demux:src0_valid -> rsp_mux:sink0_valid
	wire  [111:0] rsp_demux_src0_data;                                                                // rsp_demux:src0_data -> rsp_mux:sink0_data
	wire          rsp_demux_src0_ready;                                                               // rsp_mux:sink0_ready -> rsp_demux:src0_ready
	wire   [21:0] rsp_demux_src0_channel;                                                             // rsp_demux:src0_channel -> rsp_mux:sink0_channel
	wire          rsp_demux_src0_startofpacket;                                                       // rsp_demux:src0_startofpacket -> rsp_mux:sink0_startofpacket
	wire          rsp_demux_src0_endofpacket;                                                         // rsp_demux:src0_endofpacket -> rsp_mux:sink0_endofpacket
	wire          rsp_demux_002_src0_valid;                                                           // rsp_demux_002:src0_valid -> rsp_mux:sink2_valid
	wire  [111:0] rsp_demux_002_src0_data;                                                            // rsp_demux_002:src0_data -> rsp_mux:sink2_data
	wire          rsp_demux_002_src0_ready;                                                           // rsp_mux:sink2_ready -> rsp_demux_002:src0_ready
	wire   [21:0] rsp_demux_002_src0_channel;                                                         // rsp_demux_002:src0_channel -> rsp_mux:sink2_channel
	wire          rsp_demux_002_src0_startofpacket;                                                   // rsp_demux_002:src0_startofpacket -> rsp_mux:sink2_startofpacket
	wire          rsp_demux_002_src0_endofpacket;                                                     // rsp_demux_002:src0_endofpacket -> rsp_mux:sink2_endofpacket
	wire          rsp_demux_003_src0_valid;                                                           // rsp_demux_003:src0_valid -> rsp_mux:sink3_valid
	wire  [111:0] rsp_demux_003_src0_data;                                                            // rsp_demux_003:src0_data -> rsp_mux:sink3_data
	wire          rsp_demux_003_src0_ready;                                                           // rsp_mux:sink3_ready -> rsp_demux_003:src0_ready
	wire   [21:0] rsp_demux_003_src0_channel;                                                         // rsp_demux_003:src0_channel -> rsp_mux:sink3_channel
	wire          rsp_demux_003_src0_startofpacket;                                                   // rsp_demux_003:src0_startofpacket -> rsp_mux:sink3_startofpacket
	wire          rsp_demux_003_src0_endofpacket;                                                     // rsp_demux_003:src0_endofpacket -> rsp_mux:sink3_endofpacket
	wire          rsp_demux_004_src0_valid;                                                           // rsp_demux_004:src0_valid -> rsp_mux:sink4_valid
	wire  [111:0] rsp_demux_004_src0_data;                                                            // rsp_demux_004:src0_data -> rsp_mux:sink4_data
	wire          rsp_demux_004_src0_ready;                                                           // rsp_mux:sink4_ready -> rsp_demux_004:src0_ready
	wire   [21:0] rsp_demux_004_src0_channel;                                                         // rsp_demux_004:src0_channel -> rsp_mux:sink4_channel
	wire          rsp_demux_004_src0_startofpacket;                                                   // rsp_demux_004:src0_startofpacket -> rsp_mux:sink4_startofpacket
	wire          rsp_demux_004_src0_endofpacket;                                                     // rsp_demux_004:src0_endofpacket -> rsp_mux:sink4_endofpacket
	wire          rsp_demux_005_src0_valid;                                                           // rsp_demux_005:src0_valid -> rsp_mux:sink5_valid
	wire  [111:0] rsp_demux_005_src0_data;                                                            // rsp_demux_005:src0_data -> rsp_mux:sink5_data
	wire          rsp_demux_005_src0_ready;                                                           // rsp_mux:sink5_ready -> rsp_demux_005:src0_ready
	wire   [21:0] rsp_demux_005_src0_channel;                                                         // rsp_demux_005:src0_channel -> rsp_mux:sink5_channel
	wire          rsp_demux_005_src0_startofpacket;                                                   // rsp_demux_005:src0_startofpacket -> rsp_mux:sink5_startofpacket
	wire          rsp_demux_005_src0_endofpacket;                                                     // rsp_demux_005:src0_endofpacket -> rsp_mux:sink5_endofpacket
	wire          rsp_demux_006_src0_valid;                                                           // rsp_demux_006:src0_valid -> rsp_mux:sink6_valid
	wire  [111:0] rsp_demux_006_src0_data;                                                            // rsp_demux_006:src0_data -> rsp_mux:sink6_data
	wire          rsp_demux_006_src0_ready;                                                           // rsp_mux:sink6_ready -> rsp_demux_006:src0_ready
	wire   [21:0] rsp_demux_006_src0_channel;                                                         // rsp_demux_006:src0_channel -> rsp_mux:sink6_channel
	wire          rsp_demux_006_src0_startofpacket;                                                   // rsp_demux_006:src0_startofpacket -> rsp_mux:sink6_startofpacket
	wire          rsp_demux_006_src0_endofpacket;                                                     // rsp_demux_006:src0_endofpacket -> rsp_mux:sink6_endofpacket
	wire          rsp_demux_007_src0_valid;                                                           // rsp_demux_007:src0_valid -> rsp_mux:sink7_valid
	wire  [111:0] rsp_demux_007_src0_data;                                                            // rsp_demux_007:src0_data -> rsp_mux:sink7_data
	wire          rsp_demux_007_src0_ready;                                                           // rsp_mux:sink7_ready -> rsp_demux_007:src0_ready
	wire   [21:0] rsp_demux_007_src0_channel;                                                         // rsp_demux_007:src0_channel -> rsp_mux:sink7_channel
	wire          rsp_demux_007_src0_startofpacket;                                                   // rsp_demux_007:src0_startofpacket -> rsp_mux:sink7_startofpacket
	wire          rsp_demux_007_src0_endofpacket;                                                     // rsp_demux_007:src0_endofpacket -> rsp_mux:sink7_endofpacket
	wire          rsp_demux_008_src0_valid;                                                           // rsp_demux_008:src0_valid -> rsp_mux:sink8_valid
	wire  [111:0] rsp_demux_008_src0_data;                                                            // rsp_demux_008:src0_data -> rsp_mux:sink8_data
	wire          rsp_demux_008_src0_ready;                                                           // rsp_mux:sink8_ready -> rsp_demux_008:src0_ready
	wire   [21:0] rsp_demux_008_src0_channel;                                                         // rsp_demux_008:src0_channel -> rsp_mux:sink8_channel
	wire          rsp_demux_008_src0_startofpacket;                                                   // rsp_demux_008:src0_startofpacket -> rsp_mux:sink8_startofpacket
	wire          rsp_demux_008_src0_endofpacket;                                                     // rsp_demux_008:src0_endofpacket -> rsp_mux:sink8_endofpacket
	wire          rsp_demux_009_src0_valid;                                                           // rsp_demux_009:src0_valid -> rsp_mux:sink9_valid
	wire  [111:0] rsp_demux_009_src0_data;                                                            // rsp_demux_009:src0_data -> rsp_mux:sink9_data
	wire          rsp_demux_009_src0_ready;                                                           // rsp_mux:sink9_ready -> rsp_demux_009:src0_ready
	wire   [21:0] rsp_demux_009_src0_channel;                                                         // rsp_demux_009:src0_channel -> rsp_mux:sink9_channel
	wire          rsp_demux_009_src0_startofpacket;                                                   // rsp_demux_009:src0_startofpacket -> rsp_mux:sink9_startofpacket
	wire          rsp_demux_009_src0_endofpacket;                                                     // rsp_demux_009:src0_endofpacket -> rsp_mux:sink9_endofpacket
	wire          rsp_demux_010_src0_valid;                                                           // rsp_demux_010:src0_valid -> rsp_mux:sink10_valid
	wire  [111:0] rsp_demux_010_src0_data;                                                            // rsp_demux_010:src0_data -> rsp_mux:sink10_data
	wire          rsp_demux_010_src0_ready;                                                           // rsp_mux:sink10_ready -> rsp_demux_010:src0_ready
	wire   [21:0] rsp_demux_010_src0_channel;                                                         // rsp_demux_010:src0_channel -> rsp_mux:sink10_channel
	wire          rsp_demux_010_src0_startofpacket;                                                   // rsp_demux_010:src0_startofpacket -> rsp_mux:sink10_startofpacket
	wire          rsp_demux_010_src0_endofpacket;                                                     // rsp_demux_010:src0_endofpacket -> rsp_mux:sink10_endofpacket
	wire          rsp_demux_011_src0_valid;                                                           // rsp_demux_011:src0_valid -> rsp_mux:sink11_valid
	wire  [111:0] rsp_demux_011_src0_data;                                                            // rsp_demux_011:src0_data -> rsp_mux:sink11_data
	wire          rsp_demux_011_src0_ready;                                                           // rsp_mux:sink11_ready -> rsp_demux_011:src0_ready
	wire   [21:0] rsp_demux_011_src0_channel;                                                         // rsp_demux_011:src0_channel -> rsp_mux:sink11_channel
	wire          rsp_demux_011_src0_startofpacket;                                                   // rsp_demux_011:src0_startofpacket -> rsp_mux:sink11_startofpacket
	wire          rsp_demux_011_src0_endofpacket;                                                     // rsp_demux_011:src0_endofpacket -> rsp_mux:sink11_endofpacket
	wire          rsp_demux_012_src0_valid;                                                           // rsp_demux_012:src0_valid -> rsp_mux:sink12_valid
	wire  [111:0] rsp_demux_012_src0_data;                                                            // rsp_demux_012:src0_data -> rsp_mux:sink12_data
	wire          rsp_demux_012_src0_ready;                                                           // rsp_mux:sink12_ready -> rsp_demux_012:src0_ready
	wire   [21:0] rsp_demux_012_src0_channel;                                                         // rsp_demux_012:src0_channel -> rsp_mux:sink12_channel
	wire          rsp_demux_012_src0_startofpacket;                                                   // rsp_demux_012:src0_startofpacket -> rsp_mux:sink12_startofpacket
	wire          rsp_demux_012_src0_endofpacket;                                                     // rsp_demux_012:src0_endofpacket -> rsp_mux:sink12_endofpacket
	wire          rsp_demux_012_src1_valid;                                                           // rsp_demux_012:src1_valid -> rsp_mux_017:sink0_valid
	wire  [111:0] rsp_demux_012_src1_data;                                                            // rsp_demux_012:src1_data -> rsp_mux_017:sink0_data
	wire          rsp_demux_012_src1_ready;                                                           // rsp_mux_017:sink0_ready -> rsp_demux_012:src1_ready
	wire   [21:0] rsp_demux_012_src1_channel;                                                         // rsp_demux_012:src1_channel -> rsp_mux_017:sink0_channel
	wire          rsp_demux_012_src1_startofpacket;                                                   // rsp_demux_012:src1_startofpacket -> rsp_mux_017:sink0_startofpacket
	wire          rsp_demux_012_src1_endofpacket;                                                     // rsp_demux_012:src1_endofpacket -> rsp_mux_017:sink0_endofpacket
	wire          rsp_demux_013_src0_valid;                                                           // rsp_demux_013:src0_valid -> rsp_mux:sink13_valid
	wire  [111:0] rsp_demux_013_src0_data;                                                            // rsp_demux_013:src0_data -> rsp_mux:sink13_data
	wire          rsp_demux_013_src0_ready;                                                           // rsp_mux:sink13_ready -> rsp_demux_013:src0_ready
	wire   [21:0] rsp_demux_013_src0_channel;                                                         // rsp_demux_013:src0_channel -> rsp_mux:sink13_channel
	wire          rsp_demux_013_src0_startofpacket;                                                   // rsp_demux_013:src0_startofpacket -> rsp_mux:sink13_startofpacket
	wire          rsp_demux_013_src0_endofpacket;                                                     // rsp_demux_013:src0_endofpacket -> rsp_mux:sink13_endofpacket
	wire          rsp_demux_014_src0_valid;                                                           // rsp_demux_014:src0_valid -> rsp_mux:sink14_valid
	wire  [111:0] rsp_demux_014_src0_data;                                                            // rsp_demux_014:src0_data -> rsp_mux:sink14_data
	wire          rsp_demux_014_src0_ready;                                                           // rsp_mux:sink14_ready -> rsp_demux_014:src0_ready
	wire   [21:0] rsp_demux_014_src0_channel;                                                         // rsp_demux_014:src0_channel -> rsp_mux:sink14_channel
	wire          rsp_demux_014_src0_startofpacket;                                                   // rsp_demux_014:src0_startofpacket -> rsp_mux:sink14_startofpacket
	wire          rsp_demux_014_src0_endofpacket;                                                     // rsp_demux_014:src0_endofpacket -> rsp_mux:sink14_endofpacket
	wire          rsp_demux_015_src0_valid;                                                           // rsp_demux_015:src0_valid -> rsp_mux:sink15_valid
	wire  [111:0] rsp_demux_015_src0_data;                                                            // rsp_demux_015:src0_data -> rsp_mux:sink15_data
	wire          rsp_demux_015_src0_ready;                                                           // rsp_mux:sink15_ready -> rsp_demux_015:src0_ready
	wire   [21:0] rsp_demux_015_src0_channel;                                                         // rsp_demux_015:src0_channel -> rsp_mux:sink15_channel
	wire          rsp_demux_015_src0_startofpacket;                                                   // rsp_demux_015:src0_startofpacket -> rsp_mux:sink15_startofpacket
	wire          rsp_demux_015_src0_endofpacket;                                                     // rsp_demux_015:src0_endofpacket -> rsp_mux:sink15_endofpacket
	wire          rsp_demux_016_src0_valid;                                                           // rsp_demux_016:src0_valid -> rsp_mux:sink16_valid
	wire  [111:0] rsp_demux_016_src0_data;                                                            // rsp_demux_016:src0_data -> rsp_mux:sink16_data
	wire          rsp_demux_016_src0_ready;                                                           // rsp_mux:sink16_ready -> rsp_demux_016:src0_ready
	wire   [21:0] rsp_demux_016_src0_channel;                                                         // rsp_demux_016:src0_channel -> rsp_mux:sink16_channel
	wire          rsp_demux_016_src0_startofpacket;                                                   // rsp_demux_016:src0_startofpacket -> rsp_mux:sink16_startofpacket
	wire          rsp_demux_016_src0_endofpacket;                                                     // rsp_demux_016:src0_endofpacket -> rsp_mux:sink16_endofpacket
	wire          rsp_demux_016_src1_valid;                                                           // rsp_demux_016:src1_valid -> rsp_mux_017:sink1_valid
	wire  [111:0] rsp_demux_016_src1_data;                                                            // rsp_demux_016:src1_data -> rsp_mux_017:sink1_data
	wire          rsp_demux_016_src1_ready;                                                           // rsp_mux_017:sink1_ready -> rsp_demux_016:src1_ready
	wire   [21:0] rsp_demux_016_src1_channel;                                                         // rsp_demux_016:src1_channel -> rsp_mux_017:sink1_channel
	wire          rsp_demux_016_src1_startofpacket;                                                   // rsp_demux_016:src1_startofpacket -> rsp_mux_017:sink1_startofpacket
	wire          rsp_demux_016_src1_endofpacket;                                                     // rsp_demux_016:src1_endofpacket -> rsp_mux_017:sink1_endofpacket
	wire          rsp_demux_017_src0_valid;                                                           // rsp_demux_017:src0_valid -> rsp_mux:sink17_valid
	wire  [111:0] rsp_demux_017_src0_data;                                                            // rsp_demux_017:src0_data -> rsp_mux:sink17_data
	wire          rsp_demux_017_src0_ready;                                                           // rsp_mux:sink17_ready -> rsp_demux_017:src0_ready
	wire   [21:0] rsp_demux_017_src0_channel;                                                         // rsp_demux_017:src0_channel -> rsp_mux:sink17_channel
	wire          rsp_demux_017_src0_startofpacket;                                                   // rsp_demux_017:src0_startofpacket -> rsp_mux:sink17_startofpacket
	wire          rsp_demux_017_src0_endofpacket;                                                     // rsp_demux_017:src0_endofpacket -> rsp_mux:sink17_endofpacket
	wire          rsp_demux_017_src1_valid;                                                           // rsp_demux_017:src1_valid -> rsp_mux_017:sink2_valid
	wire  [111:0] rsp_demux_017_src1_data;                                                            // rsp_demux_017:src1_data -> rsp_mux_017:sink2_data
	wire          rsp_demux_017_src1_ready;                                                           // rsp_mux_017:sink2_ready -> rsp_demux_017:src1_ready
	wire   [21:0] rsp_demux_017_src1_channel;                                                         // rsp_demux_017:src1_channel -> rsp_mux_017:sink2_channel
	wire          rsp_demux_017_src1_startofpacket;                                                   // rsp_demux_017:src1_startofpacket -> rsp_mux_017:sink2_startofpacket
	wire          rsp_demux_017_src1_endofpacket;                                                     // rsp_demux_017:src1_endofpacket -> rsp_mux_017:sink2_endofpacket
	wire          rsp_demux_018_src0_valid;                                                           // rsp_demux_018:src0_valid -> rsp_mux:sink18_valid
	wire  [111:0] rsp_demux_018_src0_data;                                                            // rsp_demux_018:src0_data -> rsp_mux:sink18_data
	wire          rsp_demux_018_src0_ready;                                                           // rsp_mux:sink18_ready -> rsp_demux_018:src0_ready
	wire   [21:0] rsp_demux_018_src0_channel;                                                         // rsp_demux_018:src0_channel -> rsp_mux:sink18_channel
	wire          rsp_demux_018_src0_startofpacket;                                                   // rsp_demux_018:src0_startofpacket -> rsp_mux:sink18_startofpacket
	wire          rsp_demux_018_src0_endofpacket;                                                     // rsp_demux_018:src0_endofpacket -> rsp_mux:sink18_endofpacket
	wire          rsp_demux_019_src0_valid;                                                           // rsp_demux_019:src0_valid -> rsp_mux:sink19_valid
	wire  [111:0] rsp_demux_019_src0_data;                                                            // rsp_demux_019:src0_data -> rsp_mux:sink19_data
	wire          rsp_demux_019_src0_ready;                                                           // rsp_mux:sink19_ready -> rsp_demux_019:src0_ready
	wire   [21:0] rsp_demux_019_src0_channel;                                                         // rsp_demux_019:src0_channel -> rsp_mux:sink19_channel
	wire          rsp_demux_019_src0_startofpacket;                                                   // rsp_demux_019:src0_startofpacket -> rsp_mux:sink19_startofpacket
	wire          rsp_demux_019_src0_endofpacket;                                                     // rsp_demux_019:src0_endofpacket -> rsp_mux:sink19_endofpacket
	wire          rsp_demux_019_src1_valid;                                                           // rsp_demux_019:src1_valid -> rsp_mux_013:sink0_valid
	wire  [111:0] rsp_demux_019_src1_data;                                                            // rsp_demux_019:src1_data -> rsp_mux_013:sink0_data
	wire          rsp_demux_019_src1_ready;                                                           // rsp_mux_013:sink0_ready -> rsp_demux_019:src1_ready
	wire   [21:0] rsp_demux_019_src1_channel;                                                         // rsp_demux_019:src1_channel -> rsp_mux_013:sink0_channel
	wire          rsp_demux_019_src1_startofpacket;                                                   // rsp_demux_019:src1_startofpacket -> rsp_mux_013:sink0_startofpacket
	wire          rsp_demux_019_src1_endofpacket;                                                     // rsp_demux_019:src1_endofpacket -> rsp_mux_013:sink0_endofpacket
	wire          rsp_demux_019_src2_valid;                                                           // rsp_demux_019:src2_valid -> rsp_mux_014:sink0_valid
	wire  [111:0] rsp_demux_019_src2_data;                                                            // rsp_demux_019:src2_data -> rsp_mux_014:sink0_data
	wire          rsp_demux_019_src2_ready;                                                           // rsp_mux_014:sink0_ready -> rsp_demux_019:src2_ready
	wire   [21:0] rsp_demux_019_src2_channel;                                                         // rsp_demux_019:src2_channel -> rsp_mux_014:sink0_channel
	wire          rsp_demux_019_src2_startofpacket;                                                   // rsp_demux_019:src2_startofpacket -> rsp_mux_014:sink0_startofpacket
	wire          rsp_demux_019_src2_endofpacket;                                                     // rsp_demux_019:src2_endofpacket -> rsp_mux_014:sink0_endofpacket
	wire          rsp_demux_019_src3_valid;                                                           // rsp_demux_019:src3_valid -> rsp_mux_015:sink0_valid
	wire  [111:0] rsp_demux_019_src3_data;                                                            // rsp_demux_019:src3_data -> rsp_mux_015:sink0_data
	wire          rsp_demux_019_src3_ready;                                                           // rsp_mux_015:sink0_ready -> rsp_demux_019:src3_ready
	wire   [21:0] rsp_demux_019_src3_channel;                                                         // rsp_demux_019:src3_channel -> rsp_mux_015:sink0_channel
	wire          rsp_demux_019_src3_startofpacket;                                                   // rsp_demux_019:src3_startofpacket -> rsp_mux_015:sink0_startofpacket
	wire          rsp_demux_019_src3_endofpacket;                                                     // rsp_demux_019:src3_endofpacket -> rsp_mux_015:sink0_endofpacket
	wire          rsp_demux_019_src4_valid;                                                           // rsp_demux_019:src4_valid -> rsp_mux_016:sink0_valid
	wire  [111:0] rsp_demux_019_src4_data;                                                            // rsp_demux_019:src4_data -> rsp_mux_016:sink0_data
	wire          rsp_demux_019_src4_ready;                                                           // rsp_mux_016:sink0_ready -> rsp_demux_019:src4_ready
	wire   [21:0] rsp_demux_019_src4_channel;                                                         // rsp_demux_019:src4_channel -> rsp_mux_016:sink0_channel
	wire          rsp_demux_019_src4_startofpacket;                                                   // rsp_demux_019:src4_startofpacket -> rsp_mux_016:sink0_startofpacket
	wire          rsp_demux_019_src4_endofpacket;                                                     // rsp_demux_019:src4_endofpacket -> rsp_mux_016:sink0_endofpacket
	wire          rsp_demux_020_src0_valid;                                                           // rsp_demux_020:src0_valid -> rsp_mux:sink20_valid
	wire  [111:0] rsp_demux_020_src0_data;                                                            // rsp_demux_020:src0_data -> rsp_mux:sink20_data
	wire          rsp_demux_020_src0_ready;                                                           // rsp_mux:sink20_ready -> rsp_demux_020:src0_ready
	wire   [21:0] rsp_demux_020_src0_channel;                                                         // rsp_demux_020:src0_channel -> rsp_mux:sink20_channel
	wire          rsp_demux_020_src0_startofpacket;                                                   // rsp_demux_020:src0_startofpacket -> rsp_mux:sink20_startofpacket
	wire          rsp_demux_020_src0_endofpacket;                                                     // rsp_demux_020:src0_endofpacket -> rsp_mux:sink20_endofpacket
	wire          rsp_demux_020_src1_valid;                                                           // rsp_demux_020:src1_valid -> rsp_mux_009:sink0_valid
	wire  [111:0] rsp_demux_020_src1_data;                                                            // rsp_demux_020:src1_data -> rsp_mux_009:sink0_data
	wire          rsp_demux_020_src1_ready;                                                           // rsp_mux_009:sink0_ready -> rsp_demux_020:src1_ready
	wire   [21:0] rsp_demux_020_src1_channel;                                                         // rsp_demux_020:src1_channel -> rsp_mux_009:sink0_channel
	wire          rsp_demux_020_src1_startofpacket;                                                   // rsp_demux_020:src1_startofpacket -> rsp_mux_009:sink0_startofpacket
	wire          rsp_demux_020_src1_endofpacket;                                                     // rsp_demux_020:src1_endofpacket -> rsp_mux_009:sink0_endofpacket
	wire          rsp_demux_020_src2_valid;                                                           // rsp_demux_020:src2_valid -> rsp_mux_010:sink0_valid
	wire  [111:0] rsp_demux_020_src2_data;                                                            // rsp_demux_020:src2_data -> rsp_mux_010:sink0_data
	wire          rsp_demux_020_src2_ready;                                                           // rsp_mux_010:sink0_ready -> rsp_demux_020:src2_ready
	wire   [21:0] rsp_demux_020_src2_channel;                                                         // rsp_demux_020:src2_channel -> rsp_mux_010:sink0_channel
	wire          rsp_demux_020_src2_startofpacket;                                                   // rsp_demux_020:src2_startofpacket -> rsp_mux_010:sink0_startofpacket
	wire          rsp_demux_020_src2_endofpacket;                                                     // rsp_demux_020:src2_endofpacket -> rsp_mux_010:sink0_endofpacket
	wire          rsp_demux_020_src3_valid;                                                           // rsp_demux_020:src3_valid -> rsp_mux_011:sink0_valid
	wire  [111:0] rsp_demux_020_src3_data;                                                            // rsp_demux_020:src3_data -> rsp_mux_011:sink0_data
	wire          rsp_demux_020_src3_ready;                                                           // rsp_mux_011:sink0_ready -> rsp_demux_020:src3_ready
	wire   [21:0] rsp_demux_020_src3_channel;                                                         // rsp_demux_020:src3_channel -> rsp_mux_011:sink0_channel
	wire          rsp_demux_020_src3_startofpacket;                                                   // rsp_demux_020:src3_startofpacket -> rsp_mux_011:sink0_startofpacket
	wire          rsp_demux_020_src3_endofpacket;                                                     // rsp_demux_020:src3_endofpacket -> rsp_mux_011:sink0_endofpacket
	wire          rsp_demux_020_src4_valid;                                                           // rsp_demux_020:src4_valid -> rsp_mux_012:sink0_valid
	wire  [111:0] rsp_demux_020_src4_data;                                                            // rsp_demux_020:src4_data -> rsp_mux_012:sink0_data
	wire          rsp_demux_020_src4_ready;                                                           // rsp_mux_012:sink0_ready -> rsp_demux_020:src4_ready
	wire   [21:0] rsp_demux_020_src4_channel;                                                         // rsp_demux_020:src4_channel -> rsp_mux_012:sink0_channel
	wire          rsp_demux_020_src4_startofpacket;                                                   // rsp_demux_020:src4_startofpacket -> rsp_mux_012:sink0_startofpacket
	wire          rsp_demux_020_src4_endofpacket;                                                     // rsp_demux_020:src4_endofpacket -> rsp_mux_012:sink0_endofpacket
	wire          rsp_demux_021_src0_valid;                                                           // rsp_demux_021:src0_valid -> rsp_mux:sink21_valid
	wire  [111:0] rsp_demux_021_src0_data;                                                            // rsp_demux_021:src0_data -> rsp_mux:sink21_data
	wire          rsp_demux_021_src0_ready;                                                           // rsp_mux:sink21_ready -> rsp_demux_021:src0_ready
	wire   [21:0] rsp_demux_021_src0_channel;                                                         // rsp_demux_021:src0_channel -> rsp_mux:sink21_channel
	wire          rsp_demux_021_src0_startofpacket;                                                   // rsp_demux_021:src0_startofpacket -> rsp_mux:sink21_startofpacket
	wire          rsp_demux_021_src0_endofpacket;                                                     // rsp_demux_021:src0_endofpacket -> rsp_mux:sink21_endofpacket
	wire          rsp_demux_021_src1_valid;                                                           // rsp_demux_021:src1_valid -> rsp_mux_001:sink0_valid
	wire  [111:0] rsp_demux_021_src1_data;                                                            // rsp_demux_021:src1_data -> rsp_mux_001:sink0_data
	wire          rsp_demux_021_src1_ready;                                                           // rsp_mux_001:sink0_ready -> rsp_demux_021:src1_ready
	wire   [21:0] rsp_demux_021_src1_channel;                                                         // rsp_demux_021:src1_channel -> rsp_mux_001:sink0_channel
	wire          rsp_demux_021_src1_startofpacket;                                                   // rsp_demux_021:src1_startofpacket -> rsp_mux_001:sink0_startofpacket
	wire          rsp_demux_021_src1_endofpacket;                                                     // rsp_demux_021:src1_endofpacket -> rsp_mux_001:sink0_endofpacket
	wire          rsp_demux_021_src2_valid;                                                           // rsp_demux_021:src2_valid -> rsp_mux_002:sink0_valid
	wire  [111:0] rsp_demux_021_src2_data;                                                            // rsp_demux_021:src2_data -> rsp_mux_002:sink0_data
	wire          rsp_demux_021_src2_ready;                                                           // rsp_mux_002:sink0_ready -> rsp_demux_021:src2_ready
	wire   [21:0] rsp_demux_021_src2_channel;                                                         // rsp_demux_021:src2_channel -> rsp_mux_002:sink0_channel
	wire          rsp_demux_021_src2_startofpacket;                                                   // rsp_demux_021:src2_startofpacket -> rsp_mux_002:sink0_startofpacket
	wire          rsp_demux_021_src2_endofpacket;                                                     // rsp_demux_021:src2_endofpacket -> rsp_mux_002:sink0_endofpacket
	wire          rsp_demux_021_src3_valid;                                                           // rsp_demux_021:src3_valid -> rsp_mux_003:sink0_valid
	wire  [111:0] rsp_demux_021_src3_data;                                                            // rsp_demux_021:src3_data -> rsp_mux_003:sink0_data
	wire          rsp_demux_021_src3_ready;                                                           // rsp_mux_003:sink0_ready -> rsp_demux_021:src3_ready
	wire   [21:0] rsp_demux_021_src3_channel;                                                         // rsp_demux_021:src3_channel -> rsp_mux_003:sink0_channel
	wire          rsp_demux_021_src3_startofpacket;                                                   // rsp_demux_021:src3_startofpacket -> rsp_mux_003:sink0_startofpacket
	wire          rsp_demux_021_src3_endofpacket;                                                     // rsp_demux_021:src3_endofpacket -> rsp_mux_003:sink0_endofpacket
	wire          rsp_demux_021_src4_valid;                                                           // rsp_demux_021:src4_valid -> rsp_mux_004:sink0_valid
	wire  [111:0] rsp_demux_021_src4_data;                                                            // rsp_demux_021:src4_data -> rsp_mux_004:sink0_data
	wire          rsp_demux_021_src4_ready;                                                           // rsp_mux_004:sink0_ready -> rsp_demux_021:src4_ready
	wire   [21:0] rsp_demux_021_src4_channel;                                                         // rsp_demux_021:src4_channel -> rsp_mux_004:sink0_channel
	wire          rsp_demux_021_src4_startofpacket;                                                   // rsp_demux_021:src4_startofpacket -> rsp_mux_004:sink0_startofpacket
	wire          rsp_demux_021_src4_endofpacket;                                                     // rsp_demux_021:src4_endofpacket -> rsp_mux_004:sink0_endofpacket
	wire          rsp_demux_021_src5_valid;                                                           // rsp_demux_021:src5_valid -> rsp_mux_005:sink0_valid
	wire  [111:0] rsp_demux_021_src5_data;                                                            // rsp_demux_021:src5_data -> rsp_mux_005:sink0_data
	wire          rsp_demux_021_src5_ready;                                                           // rsp_mux_005:sink0_ready -> rsp_demux_021:src5_ready
	wire   [21:0] rsp_demux_021_src5_channel;                                                         // rsp_demux_021:src5_channel -> rsp_mux_005:sink0_channel
	wire          rsp_demux_021_src5_startofpacket;                                                   // rsp_demux_021:src5_startofpacket -> rsp_mux_005:sink0_startofpacket
	wire          rsp_demux_021_src5_endofpacket;                                                     // rsp_demux_021:src5_endofpacket -> rsp_mux_005:sink0_endofpacket
	wire          rsp_demux_021_src6_valid;                                                           // rsp_demux_021:src6_valid -> rsp_mux_006:sink0_valid
	wire  [111:0] rsp_demux_021_src6_data;                                                            // rsp_demux_021:src6_data -> rsp_mux_006:sink0_data
	wire          rsp_demux_021_src6_ready;                                                           // rsp_mux_006:sink0_ready -> rsp_demux_021:src6_ready
	wire   [21:0] rsp_demux_021_src6_channel;                                                         // rsp_demux_021:src6_channel -> rsp_mux_006:sink0_channel
	wire          rsp_demux_021_src6_startofpacket;                                                   // rsp_demux_021:src6_startofpacket -> rsp_mux_006:sink0_startofpacket
	wire          rsp_demux_021_src6_endofpacket;                                                     // rsp_demux_021:src6_endofpacket -> rsp_mux_006:sink0_endofpacket
	wire          rsp_demux_021_src7_valid;                                                           // rsp_demux_021:src7_valid -> rsp_mux_007:sink0_valid
	wire  [111:0] rsp_demux_021_src7_data;                                                            // rsp_demux_021:src7_data -> rsp_mux_007:sink0_data
	wire          rsp_demux_021_src7_ready;                                                           // rsp_mux_007:sink0_ready -> rsp_demux_021:src7_ready
	wire   [21:0] rsp_demux_021_src7_channel;                                                         // rsp_demux_021:src7_channel -> rsp_mux_007:sink0_channel
	wire          rsp_demux_021_src7_startofpacket;                                                   // rsp_demux_021:src7_startofpacket -> rsp_mux_007:sink0_startofpacket
	wire          rsp_demux_021_src7_endofpacket;                                                     // rsp_demux_021:src7_endofpacket -> rsp_mux_007:sink0_endofpacket
	wire          rsp_demux_021_src8_valid;                                                           // rsp_demux_021:src8_valid -> rsp_mux_008:sink0_valid
	wire  [111:0] rsp_demux_021_src8_data;                                                            // rsp_demux_021:src8_data -> rsp_mux_008:sink0_data
	wire          rsp_demux_021_src8_ready;                                                           // rsp_mux_008:sink0_ready -> rsp_demux_021:src8_ready
	wire   [21:0] rsp_demux_021_src8_channel;                                                         // rsp_demux_021:src8_channel -> rsp_mux_008:sink0_channel
	wire          rsp_demux_021_src8_startofpacket;                                                   // rsp_demux_021:src8_startofpacket -> rsp_mux_008:sink0_startofpacket
	wire          rsp_demux_021_src8_endofpacket;                                                     // rsp_demux_021:src8_endofpacket -> rsp_mux_008:sink0_endofpacket
	wire          router_019_src_valid;                                                               // router_019:src_valid -> lcd_avalon_lcd_slave_rsp_width_adapter:in_valid
	wire   [84:0] router_019_src_data;                                                                // router_019:src_data -> lcd_avalon_lcd_slave_rsp_width_adapter:in_data
	wire          router_019_src_ready;                                                               // lcd_avalon_lcd_slave_rsp_width_adapter:in_ready -> router_019:src_ready
	wire   [21:0] router_019_src_channel;                                                             // router_019:src_channel -> lcd_avalon_lcd_slave_rsp_width_adapter:in_channel
	wire          router_019_src_startofpacket;                                                       // router_019:src_startofpacket -> lcd_avalon_lcd_slave_rsp_width_adapter:in_startofpacket
	wire          router_019_src_endofpacket;                                                         // router_019:src_endofpacket -> lcd_avalon_lcd_slave_rsp_width_adapter:in_endofpacket
	wire          lcd_avalon_lcd_slave_rsp_width_adapter_src_valid;                                   // lcd_avalon_lcd_slave_rsp_width_adapter:out_valid -> rsp_demux_001:sink_valid
	wire  [111:0] lcd_avalon_lcd_slave_rsp_width_adapter_src_data;                                    // lcd_avalon_lcd_slave_rsp_width_adapter:out_data -> rsp_demux_001:sink_data
	wire          lcd_avalon_lcd_slave_rsp_width_adapter_src_ready;                                   // rsp_demux_001:sink_ready -> lcd_avalon_lcd_slave_rsp_width_adapter:out_ready
	wire   [21:0] lcd_avalon_lcd_slave_rsp_width_adapter_src_channel;                                 // lcd_avalon_lcd_slave_rsp_width_adapter:out_channel -> rsp_demux_001:sink_channel
	wire          lcd_avalon_lcd_slave_rsp_width_adapter_src_startofpacket;                           // lcd_avalon_lcd_slave_rsp_width_adapter:out_startofpacket -> rsp_demux_001:sink_startofpacket
	wire          lcd_avalon_lcd_slave_rsp_width_adapter_src_endofpacket;                             // lcd_avalon_lcd_slave_rsp_width_adapter:out_endofpacket -> rsp_demux_001:sink_endofpacket
	wire          cmd_mux_001_src_valid;                                                              // cmd_mux_001:src_valid -> lcd_avalon_lcd_slave_cmd_width_adapter:in_valid
	wire  [111:0] cmd_mux_001_src_data;                                                               // cmd_mux_001:src_data -> lcd_avalon_lcd_slave_cmd_width_adapter:in_data
	wire          cmd_mux_001_src_ready;                                                              // lcd_avalon_lcd_slave_cmd_width_adapter:in_ready -> cmd_mux_001:src_ready
	wire   [21:0] cmd_mux_001_src_channel;                                                            // cmd_mux_001:src_channel -> lcd_avalon_lcd_slave_cmd_width_adapter:in_channel
	wire          cmd_mux_001_src_startofpacket;                                                      // cmd_mux_001:src_startofpacket -> lcd_avalon_lcd_slave_cmd_width_adapter:in_startofpacket
	wire          cmd_mux_001_src_endofpacket;                                                        // cmd_mux_001:src_endofpacket -> lcd_avalon_lcd_slave_cmd_width_adapter:in_endofpacket
	wire          lcd_avalon_lcd_slave_cmd_width_adapter_src_valid;                                   // lcd_avalon_lcd_slave_cmd_width_adapter:out_valid -> lcd_avalon_lcd_slave_burst_adapter:sink0_valid
	wire   [84:0] lcd_avalon_lcd_slave_cmd_width_adapter_src_data;                                    // lcd_avalon_lcd_slave_cmd_width_adapter:out_data -> lcd_avalon_lcd_slave_burst_adapter:sink0_data
	wire          lcd_avalon_lcd_slave_cmd_width_adapter_src_ready;                                   // lcd_avalon_lcd_slave_burst_adapter:sink0_ready -> lcd_avalon_lcd_slave_cmd_width_adapter:out_ready
	wire   [21:0] lcd_avalon_lcd_slave_cmd_width_adapter_src_channel;                                 // lcd_avalon_lcd_slave_cmd_width_adapter:out_channel -> lcd_avalon_lcd_slave_burst_adapter:sink0_channel
	wire          lcd_avalon_lcd_slave_cmd_width_adapter_src_startofpacket;                           // lcd_avalon_lcd_slave_cmd_width_adapter:out_startofpacket -> lcd_avalon_lcd_slave_burst_adapter:sink0_startofpacket
	wire          lcd_avalon_lcd_slave_cmd_width_adapter_src_endofpacket;                             // lcd_avalon_lcd_slave_cmd_width_adapter:out_endofpacket -> lcd_avalon_lcd_slave_burst_adapter:sink0_endofpacket
	wire          cmd_demux_src1_valid;                                                               // cmd_demux:src1_valid -> crosser:in_valid
	wire  [111:0] cmd_demux_src1_data;                                                                // cmd_demux:src1_data -> crosser:in_data
	wire          cmd_demux_src1_ready;                                                               // crosser:in_ready -> cmd_demux:src1_ready
	wire   [21:0] cmd_demux_src1_channel;                                                             // cmd_demux:src1_channel -> crosser:in_channel
	wire          cmd_demux_src1_startofpacket;                                                       // cmd_demux:src1_startofpacket -> crosser:in_startofpacket
	wire          cmd_demux_src1_endofpacket;                                                         // cmd_demux:src1_endofpacket -> crosser:in_endofpacket
	wire          crosser_out_valid;                                                                  // crosser:out_valid -> cmd_mux_001:sink0_valid
	wire  [111:0] crosser_out_data;                                                                   // crosser:out_data -> cmd_mux_001:sink0_data
	wire          crosser_out_ready;                                                                  // cmd_mux_001:sink0_ready -> crosser:out_ready
	wire   [21:0] crosser_out_channel;                                                                // crosser:out_channel -> cmd_mux_001:sink0_channel
	wire          crosser_out_startofpacket;                                                          // crosser:out_startofpacket -> cmd_mux_001:sink0_startofpacket
	wire          crosser_out_endofpacket;                                                            // crosser:out_endofpacket -> cmd_mux_001:sink0_endofpacket
	wire          rsp_demux_001_src0_valid;                                                           // rsp_demux_001:src0_valid -> crosser_001:in_valid
	wire  [111:0] rsp_demux_001_src0_data;                                                            // rsp_demux_001:src0_data -> crosser_001:in_data
	wire          rsp_demux_001_src0_ready;                                                           // crosser_001:in_ready -> rsp_demux_001:src0_ready
	wire   [21:0] rsp_demux_001_src0_channel;                                                         // rsp_demux_001:src0_channel -> crosser_001:in_channel
	wire          rsp_demux_001_src0_startofpacket;                                                   // rsp_demux_001:src0_startofpacket -> crosser_001:in_startofpacket
	wire          rsp_demux_001_src0_endofpacket;                                                     // rsp_demux_001:src0_endofpacket -> crosser_001:in_endofpacket
	wire          crosser_001_out_valid;                                                              // crosser_001:out_valid -> rsp_mux:sink1_valid
	wire  [111:0] crosser_001_out_data;                                                               // crosser_001:out_data -> rsp_mux:sink1_data
	wire          crosser_001_out_ready;                                                              // rsp_mux:sink1_ready -> crosser_001:out_ready
	wire   [21:0] crosser_001_out_channel;                                                            // crosser_001:out_channel -> rsp_mux:sink1_channel
	wire          crosser_001_out_startofpacket;                                                      // crosser_001:out_startofpacket -> rsp_mux:sink1_startofpacket
	wire          crosser_001_out_endofpacket;                                                        // crosser_001:out_endofpacket -> rsp_mux:sink1_endofpacket

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (26),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (1)
	) nios2_qsys_0_data_master_translator (
		.clk                    (sys_clk_clk_clk),                                                             //                       clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address            (nios2_qsys_0_data_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_qsys_0_data_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_qsys_0_data_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_qsys_0_data_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_qsys_0_data_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_qsys_0_data_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_qsys_0_data_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_qsys_0_data_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_qsys_0_data_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_qsys_0_data_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_qsys_0_data_master_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (nios2_qsys_0_data_master_byteenable),                                         //                          .byteenable
		.av_read                (nios2_qsys_0_data_master_read),                                               //                          .read
		.av_readdata            (nios2_qsys_0_data_master_readdata),                                           //                          .readdata
		.av_write               (nios2_qsys_0_data_master_write),                                              //                          .write
		.av_writedata           (nios2_qsys_0_data_master_writedata),                                          //                          .writedata
		.av_debugaccess         (nios2_qsys_0_data_master_debugaccess),                                        //                          .debugaccess
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_readdatavalid       (),                                                                            //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) red_rx_descriptor_read_translator (
		.clk                    (sys_clk_clk_clk),                                                           //                       clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                          //                     reset.reset
		.uav_address            (red_rx_descriptor_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (red_rx_descriptor_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (red_rx_descriptor_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (red_rx_descriptor_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (red_rx_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (red_rx_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (red_rx_descriptor_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (red_rx_descriptor_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (red_rx_descriptor_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (red_rx_descriptor_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (red_rx_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (red_rx_descriptor_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (red_rx_descriptor_read_waitrequest),                                        //                          .waitrequest
		.av_read                (red_rx_descriptor_read_read),                                               //                          .read
		.av_readdata            (red_rx_descriptor_read_readdata),                                           //                          .readdata
		.av_readdatavalid       (red_rx_descriptor_read_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_byteenable          (4'b1111),                                                                   //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_write               (1'b0),                                                                      //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                      //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) red_tx_descriptor_read_translator (
		.clk                    (sys_clk_clk_clk),                                                           //                       clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                          //                     reset.reset
		.uav_address            (red_tx_descriptor_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (red_tx_descriptor_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (red_tx_descriptor_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (red_tx_descriptor_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (red_tx_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (red_tx_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (red_tx_descriptor_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (red_tx_descriptor_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (red_tx_descriptor_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (red_tx_descriptor_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (red_tx_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (red_tx_descriptor_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (red_tx_descriptor_read_waitrequest),                                        //                          .waitrequest
		.av_read                (red_tx_descriptor_read_read),                                               //                          .read
		.av_readdata            (red_tx_descriptor_read_readdata),                                           //                          .readdata
		.av_readdatavalid       (red_tx_descriptor_read_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                      //               (terminated)
		.av_byteenable          (4'b1111),                                                                   //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                      //               (terminated)
		.av_begintransfer       (1'b0),                                                                      //               (terminated)
		.av_chipselect          (1'b0),                                                                      //               (terminated)
		.av_write               (1'b0),                                                                      //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                      //               (terminated)
		.av_lock                (1'b0),                                                                      //               (terminated)
		.av_debugaccess         (1'b0),                                                                      //               (terminated)
		.uav_clken              (),                                                                          //               (terminated)
		.av_clken               (1'b1),                                                                      //               (terminated)
		.uav_response           (2'b00),                                                                     //               (terminated)
		.av_response            (),                                                                          //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                      //               (terminated)
		.av_writeresponsevalid  ()                                                                           //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) black_rx_descriptor_read_translator (
		.clk                    (sys_clk_clk_clk),                                                             //                       clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address            (black_rx_descriptor_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (black_rx_descriptor_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (black_rx_descriptor_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (black_rx_descriptor_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (black_rx_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (black_rx_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (black_rx_descriptor_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (black_rx_descriptor_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (black_rx_descriptor_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (black_rx_descriptor_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (black_rx_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (black_rx_descriptor_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (black_rx_descriptor_read_waitrequest),                                        //                          .waitrequest
		.av_read                (black_rx_descriptor_read_read),                                               //                          .read
		.av_readdata            (black_rx_descriptor_read_readdata),                                           //                          .readdata
		.av_readdatavalid       (black_rx_descriptor_read_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_byteenable          (4'b1111),                                                                     //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_write               (1'b0),                                                                        //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                        //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.av_debugaccess         (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) black_tx_descriptor_read_translator (
		.clk                    (sys_clk_clk_clk),                                                             //                       clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                            //                     reset.reset
		.uav_address            (black_tx_descriptor_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (black_tx_descriptor_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (black_tx_descriptor_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (black_tx_descriptor_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (black_tx_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (black_tx_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (black_tx_descriptor_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (black_tx_descriptor_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (black_tx_descriptor_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (black_tx_descriptor_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (black_tx_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (black_tx_descriptor_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (black_tx_descriptor_read_waitrequest),                                        //                          .waitrequest
		.av_read                (black_tx_descriptor_read_read),                                               //                          .read
		.av_readdata            (black_tx_descriptor_read_readdata),                                           //                          .readdata
		.av_readdatavalid       (black_tx_descriptor_read_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                                        //               (terminated)
		.av_byteenable          (4'b1111),                                                                     //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                        //               (terminated)
		.av_begintransfer       (1'b0),                                                                        //               (terminated)
		.av_chipselect          (1'b0),                                                                        //               (terminated)
		.av_write               (1'b0),                                                                        //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                        //               (terminated)
		.av_lock                (1'b0),                                                                        //               (terminated)
		.av_debugaccess         (1'b0),                                                                        //               (terminated)
		.uav_clken              (),                                                                            //               (terminated)
		.av_clken               (1'b1),                                                                        //               (terminated)
		.uav_response           (2'b00),                                                                       //               (terminated)
		.av_response            (),                                                                            //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                        //               (terminated)
		.av_writeresponsevalid  ()                                                                             //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) red_rx_descriptor_write_translator (
		.clk                    (sys_clk_clk_clk),                                                            //                       clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                           //                     reset.reset
		.uav_address            (red_rx_descriptor_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (red_rx_descriptor_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (red_rx_descriptor_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (red_rx_descriptor_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (red_rx_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (red_rx_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (red_rx_descriptor_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (red_rx_descriptor_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (red_rx_descriptor_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (red_rx_descriptor_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (red_rx_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (red_rx_descriptor_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (red_rx_descriptor_write_waitrequest),                                        //                          .waitrequest
		.av_write               (red_rx_descriptor_write_write),                                              //                          .write
		.av_writedata           (red_rx_descriptor_write_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                       //               (terminated)
		.av_byteenable          (4'b1111),                                                                    //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                       //               (terminated)
		.av_begintransfer       (1'b0),                                                                       //               (terminated)
		.av_chipselect          (1'b0),                                                                       //               (terminated)
		.av_read                (1'b0),                                                                       //               (terminated)
		.av_readdata            (),                                                                           //               (terminated)
		.av_readdatavalid       (),                                                                           //               (terminated)
		.av_lock                (1'b0),                                                                       //               (terminated)
		.av_debugaccess         (1'b0),                                                                       //               (terminated)
		.uav_clken              (),                                                                           //               (terminated)
		.av_clken               (1'b1),                                                                       //               (terminated)
		.uav_response           (2'b00),                                                                      //               (terminated)
		.av_response            (),                                                                           //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                       //               (terminated)
		.av_writeresponsevalid  ()                                                                            //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) red_tx_descriptor_write_translator (
		.clk                    (sys_clk_clk_clk),                                                            //                       clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                           //                     reset.reset
		.uav_address            (red_tx_descriptor_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (red_tx_descriptor_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (red_tx_descriptor_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (red_tx_descriptor_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (red_tx_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (red_tx_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (red_tx_descriptor_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (red_tx_descriptor_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (red_tx_descriptor_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (red_tx_descriptor_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (red_tx_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (red_tx_descriptor_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (red_tx_descriptor_write_waitrequest),                                        //                          .waitrequest
		.av_write               (red_tx_descriptor_write_write),                                              //                          .write
		.av_writedata           (red_tx_descriptor_write_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                       //               (terminated)
		.av_byteenable          (4'b1111),                                                                    //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                       //               (terminated)
		.av_begintransfer       (1'b0),                                                                       //               (terminated)
		.av_chipselect          (1'b0),                                                                       //               (terminated)
		.av_read                (1'b0),                                                                       //               (terminated)
		.av_readdata            (),                                                                           //               (terminated)
		.av_readdatavalid       (),                                                                           //               (terminated)
		.av_lock                (1'b0),                                                                       //               (terminated)
		.av_debugaccess         (1'b0),                                                                       //               (terminated)
		.uav_clken              (),                                                                           //               (terminated)
		.av_clken               (1'b1),                                                                       //               (terminated)
		.uav_response           (2'b00),                                                                      //               (terminated)
		.av_response            (),                                                                           //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                       //               (terminated)
		.av_writeresponsevalid  ()                                                                            //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) black_rx_descriptor_write_translator (
		.clk                    (sys_clk_clk_clk),                                                              //                       clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                             //                     reset.reset
		.uav_address            (black_rx_descriptor_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (black_rx_descriptor_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (black_rx_descriptor_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (black_rx_descriptor_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (black_rx_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (black_rx_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (black_rx_descriptor_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (black_rx_descriptor_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (black_rx_descriptor_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (black_rx_descriptor_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (black_rx_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (black_rx_descriptor_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (black_rx_descriptor_write_waitrequest),                                        //                          .waitrequest
		.av_write               (black_rx_descriptor_write_write),                                              //                          .write
		.av_writedata           (black_rx_descriptor_write_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                         //               (terminated)
		.av_byteenable          (4'b1111),                                                                      //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                         //               (terminated)
		.av_begintransfer       (1'b0),                                                                         //               (terminated)
		.av_chipselect          (1'b0),                                                                         //               (terminated)
		.av_read                (1'b0),                                                                         //               (terminated)
		.av_readdata            (),                                                                             //               (terminated)
		.av_readdatavalid       (),                                                                             //               (terminated)
		.av_lock                (1'b0),                                                                         //               (terminated)
		.av_debugaccess         (1'b0),                                                                         //               (terminated)
		.uav_clken              (),                                                                             //               (terminated)
		.av_clken               (1'b1),                                                                         //               (terminated)
		.uav_response           (2'b00),                                                                        //               (terminated)
		.av_response            (),                                                                             //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                         //               (terminated)
		.av_writeresponsevalid  ()                                                                              //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) black_tx_descriptor_write_translator (
		.clk                    (sys_clk_clk_clk),                                                              //                       clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                             //                     reset.reset
		.uav_address            (black_tx_descriptor_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (black_tx_descriptor_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (black_tx_descriptor_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (black_tx_descriptor_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (black_tx_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (black_tx_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (black_tx_descriptor_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (black_tx_descriptor_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (black_tx_descriptor_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (black_tx_descriptor_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (black_tx_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (black_tx_descriptor_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (black_tx_descriptor_write_waitrequest),                                        //                          .waitrequest
		.av_write               (black_tx_descriptor_write_write),                                              //                          .write
		.av_writedata           (black_tx_descriptor_write_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                         //               (terminated)
		.av_byteenable          (4'b1111),                                                                      //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                         //               (terminated)
		.av_begintransfer       (1'b0),                                                                         //               (terminated)
		.av_chipselect          (1'b0),                                                                         //               (terminated)
		.av_read                (1'b0),                                                                         //               (terminated)
		.av_readdata            (),                                                                             //               (terminated)
		.av_readdatavalid       (),                                                                             //               (terminated)
		.av_lock                (1'b0),                                                                         //               (terminated)
		.av_debugaccess         (1'b0),                                                                         //               (terminated)
		.uav_clken              (),                                                                             //               (terminated)
		.av_clken               (1'b1),                                                                         //               (terminated)
		.uav_response           (2'b00),                                                                        //               (terminated)
		.av_response            (),                                                                             //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                         //               (terminated)
		.av_writeresponsevalid  ()                                                                              //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) red_tx_m_read_translator (
		.clk                    (sys_clk_clk_clk),                                                  //                       clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                 //                     reset.reset
		.uav_address            (red_tx_m_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (red_tx_m_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (red_tx_m_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (red_tx_m_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (red_tx_m_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (red_tx_m_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (red_tx_m_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (red_tx_m_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (red_tx_m_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (red_tx_m_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (red_tx_m_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (red_tx_m_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (red_tx_m_read_waitrequest),                                        //                          .waitrequest
		.av_read                (red_tx_m_read_read),                                               //                          .read
		.av_readdata            (red_tx_m_read_readdata),                                           //                          .readdata
		.av_readdatavalid       (red_tx_m_read_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                             //               (terminated)
		.av_byteenable          (4'b1111),                                                          //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                             //               (terminated)
		.av_begintransfer       (1'b0),                                                             //               (terminated)
		.av_chipselect          (1'b0),                                                             //               (terminated)
		.av_write               (1'b0),                                                             //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                             //               (terminated)
		.av_lock                (1'b0),                                                             //               (terminated)
		.av_debugaccess         (1'b0),                                                             //               (terminated)
		.uav_clken              (),                                                                 //               (terminated)
		.av_clken               (1'b1),                                                             //               (terminated)
		.uav_response           (2'b00),                                                            //               (terminated)
		.av_response            (),                                                                 //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                             //               (terminated)
		.av_writeresponsevalid  ()                                                                  //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) black_rx_m_write_translator (
		.clk                    (sys_clk_clk_clk),                                                     //                       clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                    //                     reset.reset
		.uav_address            (black_rx_m_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (black_rx_m_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (black_rx_m_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (black_rx_m_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (black_rx_m_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (black_rx_m_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (black_rx_m_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (black_rx_m_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (black_rx_m_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (black_rx_m_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (black_rx_m_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (black_rx_m_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (black_rx_m_write_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (black_rx_m_write_byteenable),                                         //                          .byteenable
		.av_write               (black_rx_m_write_write),                                              //                          .write
		.av_writedata           (black_rx_m_write_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                //               (terminated)
		.av_begintransfer       (1'b0),                                                                //               (terminated)
		.av_chipselect          (1'b0),                                                                //               (terminated)
		.av_read                (1'b0),                                                                //               (terminated)
		.av_readdata            (),                                                                    //               (terminated)
		.av_readdatavalid       (),                                                                    //               (terminated)
		.av_lock                (1'b0),                                                                //               (terminated)
		.av_debugaccess         (1'b0),                                                                //               (terminated)
		.uav_clken              (),                                                                    //               (terminated)
		.av_clken               (1'b1),                                                                //               (terminated)
		.uav_response           (2'b00),                                                               //               (terminated)
		.av_response            (),                                                                    //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                //               (terminated)
		.av_writeresponsevalid  ()                                                                     //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) ted_decryptor_read_master_translator (
		.clk                    (sys_clk_clk_clk),                                                              //                       clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                             //                     reset.reset
		.uav_address            (ted_decryptor_read_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (ted_decryptor_read_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (ted_decryptor_read_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (ted_decryptor_read_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (ted_decryptor_read_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (ted_decryptor_read_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (ted_decryptor_read_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (ted_decryptor_read_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (ted_decryptor_read_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (ted_decryptor_read_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (ted_decryptor_read_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (ted_decryptor_read_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (ted_decryptor_read_master_waitrequest),                                        //                          .waitrequest
		.av_read                (ted_decryptor_read_master_read),                                               //                          .read
		.av_readdata            (ted_decryptor_read_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                         //               (terminated)
		.av_byteenable          (4'b1111),                                                                      //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                         //               (terminated)
		.av_begintransfer       (1'b0),                                                                         //               (terminated)
		.av_chipselect          (1'b0),                                                                         //               (terminated)
		.av_readdatavalid       (),                                                                             //               (terminated)
		.av_write               (1'b0),                                                                         //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                         //               (terminated)
		.av_lock                (1'b0),                                                                         //               (terminated)
		.av_debugaccess         (1'b0),                                                                         //               (terminated)
		.uav_clken              (),                                                                             //               (terminated)
		.av_clken               (1'b1),                                                                         //               (terminated)
		.uav_response           (2'b00),                                                                        //               (terminated)
		.av_response            (),                                                                             //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                         //               (terminated)
		.av_writeresponsevalid  ()                                                                              //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) ted_decryptor_write_master_translator (
		.clk                    (sys_clk_clk_clk),                                                               //                       clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (ted_decryptor_write_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (ted_decryptor_write_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (ted_decryptor_write_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (ted_decryptor_write_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (ted_decryptor_write_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (ted_decryptor_write_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (ted_decryptor_write_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (ted_decryptor_write_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (ted_decryptor_write_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (ted_decryptor_write_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (ted_decryptor_write_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (ted_decryptor_write_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (ted_decryptor_write_master_waitrequest),                                        //                          .waitrequest
		.av_write               (ted_decryptor_write_master_write),                                              //                          .write
		.av_writedata           (ted_decryptor_write_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                          //               (terminated)
		.av_byteenable          (4'b1111),                                                                       //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                          //               (terminated)
		.av_begintransfer       (1'b0),                                                                          //               (terminated)
		.av_chipselect          (1'b0),                                                                          //               (terminated)
		.av_read                (1'b0),                                                                          //               (terminated)
		.av_readdata            (),                                                                              //               (terminated)
		.av_readdatavalid       (),                                                                              //               (terminated)
		.av_lock                (1'b0),                                                                          //               (terminated)
		.av_debugaccess         (1'b0),                                                                          //               (terminated)
		.uav_clken              (),                                                                              //               (terminated)
		.av_clken               (1'b1),                                                                          //               (terminated)
		.uav_response           (2'b00),                                                                         //               (terminated)
		.av_response            (),                                                                              //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                          //               (terminated)
		.av_writeresponsevalid  ()                                                                               //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (1),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) black_tx_m_read_translator (
		.clk                    (sys_clk_clk_clk),                                                    //                       clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                   //                     reset.reset
		.uav_address            (black_tx_m_read_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (black_tx_m_read_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (black_tx_m_read_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (black_tx_m_read_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (black_tx_m_read_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (black_tx_m_read_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (black_tx_m_read_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (black_tx_m_read_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (black_tx_m_read_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (black_tx_m_read_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (black_tx_m_read_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (black_tx_m_read_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (black_tx_m_read_waitrequest),                                        //                          .waitrequest
		.av_read                (black_tx_m_read_read),                                               //                          .read
		.av_readdata            (black_tx_m_read_readdata),                                           //                          .readdata
		.av_readdatavalid       (black_tx_m_read_readdatavalid),                                      //                          .readdatavalid
		.av_burstcount          (1'b1),                                                               //               (terminated)
		.av_byteenable          (4'b1111),                                                            //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                               //               (terminated)
		.av_write               (1'b0),                                                               //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                               //               (terminated)
		.av_lock                (1'b0),                                                               //               (terminated)
		.av_debugaccess         (1'b0),                                                               //               (terminated)
		.uav_clken              (),                                                                   //               (terminated)
		.av_clken               (1'b1),                                                               //               (terminated)
		.uav_response           (2'b00),                                                              //               (terminated)
		.av_response            (),                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                    //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) red_rx_m_write_translator (
		.clk                    (sys_clk_clk_clk),                                                   //                       clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                  //                     reset.reset
		.uav_address            (red_rx_m_write_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (red_rx_m_write_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (red_rx_m_write_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (red_rx_m_write_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (red_rx_m_write_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (red_rx_m_write_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (red_rx_m_write_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (red_rx_m_write_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (red_rx_m_write_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (red_rx_m_write_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (red_rx_m_write_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (red_rx_m_write_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (red_rx_m_write_waitrequest),                                        //                          .waitrequest
		.av_byteenable          (red_rx_m_write_byteenable),                                         //                          .byteenable
		.av_write               (red_rx_m_write_write),                                              //                          .write
		.av_writedata           (red_rx_m_write_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                              //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                              //               (terminated)
		.av_begintransfer       (1'b0),                                                              //               (terminated)
		.av_chipselect          (1'b0),                                                              //               (terminated)
		.av_read                (1'b0),                                                              //               (terminated)
		.av_readdata            (),                                                                  //               (terminated)
		.av_readdatavalid       (),                                                                  //               (terminated)
		.av_lock                (1'b0),                                                              //               (terminated)
		.av_debugaccess         (1'b0),                                                              //               (terminated)
		.uav_clken              (),                                                                  //               (terminated)
		.av_clken               (1'b1),                                                              //               (terminated)
		.uav_response           (2'b00),                                                             //               (terminated)
		.av_response            (),                                                                  //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                              //               (terminated)
		.av_writeresponsevalid  ()                                                                   //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) ted_encryptor_read_master_translator (
		.clk                    (sys_clk_clk_clk),                                                              //                       clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                             //                     reset.reset
		.uav_address            (ted_encryptor_read_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (ted_encryptor_read_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (ted_encryptor_read_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (ted_encryptor_read_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (ted_encryptor_read_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (ted_encryptor_read_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (ted_encryptor_read_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (ted_encryptor_read_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (ted_encryptor_read_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (ted_encryptor_read_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (ted_encryptor_read_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (ted_encryptor_read_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (ted_encryptor_read_master_waitrequest),                                        //                          .waitrequest
		.av_read                (ted_encryptor_read_master_read),                                               //                          .read
		.av_readdata            (ted_encryptor_read_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                         //               (terminated)
		.av_byteenable          (4'b1111),                                                                      //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                         //               (terminated)
		.av_begintransfer       (1'b0),                                                                         //               (terminated)
		.av_chipselect          (1'b0),                                                                         //               (terminated)
		.av_readdatavalid       (),                                                                             //               (terminated)
		.av_write               (1'b0),                                                                         //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                         //               (terminated)
		.av_lock                (1'b0),                                                                         //               (terminated)
		.av_debugaccess         (1'b0),                                                                         //               (terminated)
		.uav_clken              (),                                                                             //               (terminated)
		.av_clken               (1'b1),                                                                         //               (terminated)
		.uav_response           (2'b00),                                                                        //               (terminated)
		.av_response            (),                                                                             //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                         //               (terminated)
		.av_writeresponsevalid  ()                                                                              //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (32),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (0),
		.USE_WRITE                   (1),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (0),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) ted_encryptor_write_master_translator (
		.clk                    (sys_clk_clk_clk),                                                               //                       clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                              //                     reset.reset
		.uav_address            (ted_encryptor_write_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (ted_encryptor_write_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (ted_encryptor_write_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (ted_encryptor_write_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (ted_encryptor_write_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (ted_encryptor_write_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (ted_encryptor_write_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (ted_encryptor_write_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (ted_encryptor_write_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (ted_encryptor_write_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (ted_encryptor_write_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (ted_encryptor_write_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (ted_encryptor_write_master_waitrequest),                                        //                          .waitrequest
		.av_write               (ted_encryptor_write_master_write),                                              //                          .write
		.av_writedata           (ted_encryptor_write_master_writedata),                                          //                          .writedata
		.av_burstcount          (1'b1),                                                                          //               (terminated)
		.av_byteenable          (4'b1111),                                                                       //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                          //               (terminated)
		.av_begintransfer       (1'b0),                                                                          //               (terminated)
		.av_chipselect          (1'b0),                                                                          //               (terminated)
		.av_read                (1'b0),                                                                          //               (terminated)
		.av_readdata            (),                                                                              //               (terminated)
		.av_readdatavalid       (),                                                                              //               (terminated)
		.av_lock                (1'b0),                                                                          //               (terminated)
		.av_debugaccess         (1'b0),                                                                          //               (terminated)
		.uav_clken              (),                                                                              //               (terminated)
		.av_clken               (1'b1),                                                                          //               (terminated)
		.uav_response           (2'b00),                                                                         //               (terminated)
		.av_response            (),                                                                              //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                          //               (terminated)
		.av_writeresponsevalid  ()                                                                               //               (terminated)
	);

	altera_merlin_master_translator #(
		.AV_ADDRESS_W                (21),
		.AV_DATA_W                   (32),
		.AV_BURSTCOUNT_W             (1),
		.AV_BYTEENABLE_W             (4),
		.UAV_ADDRESS_W               (32),
		.UAV_BURSTCOUNT_W            (3),
		.USE_READ                    (1),
		.USE_WRITE                   (0),
		.USE_BEGINBURSTTRANSFER      (0),
		.USE_BEGINTRANSFER           (0),
		.USE_CHIPSELECT              (0),
		.USE_BURSTCOUNT              (0),
		.USE_READDATAVALID           (0),
		.USE_WAITREQUEST             (1),
		.USE_READRESPONSE            (0),
		.USE_WRITERESPONSE           (0),
		.AV_SYMBOLS_PER_WORD         (4),
		.AV_ADDRESS_SYMBOLS          (1),
		.AV_BURSTCOUNT_SYMBOLS       (0),
		.AV_CONSTANT_BURST_BEHAVIOR  (0),
		.UAV_CONSTANT_BURST_BEHAVIOR (0),
		.AV_LINEWRAPBURSTS           (1),
		.AV_REGISTERINCOMINGSIGNALS  (0)
	) nios2_qsys_0_instruction_master_translator (
		.clk                    (sys_clk_clk_clk),                                                                    //                       clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                                   //                     reset.reset
		.uav_address            (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_address),       // avalon_universal_master_0.address
		.uav_burstcount         (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //                          .burstcount
		.uav_read               (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_read),          //                          .read
		.uav_write              (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_write),         //                          .write
		.uav_waitrequest        (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //                          .waitrequest
		.uav_readdatavalid      (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //                          .readdatavalid
		.uav_byteenable         (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //                          .byteenable
		.uav_readdata           (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdata),      //                          .readdata
		.uav_writedata          (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_writedata),     //                          .writedata
		.uav_lock               (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_lock),          //                          .lock
		.uav_debugaccess        (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //                          .debugaccess
		.av_address             (nios2_qsys_0_instruction_master_address),                                            //      avalon_anti_master_0.address
		.av_waitrequest         (nios2_qsys_0_instruction_master_waitrequest),                                        //                          .waitrequest
		.av_read                (nios2_qsys_0_instruction_master_read),                                               //                          .read
		.av_readdata            (nios2_qsys_0_instruction_master_readdata),                                           //                          .readdata
		.av_burstcount          (1'b1),                                                                               //               (terminated)
		.av_byteenable          (4'b1111),                                                                            //               (terminated)
		.av_beginbursttransfer  (1'b0),                                                                               //               (terminated)
		.av_begintransfer       (1'b0),                                                                               //               (terminated)
		.av_chipselect          (1'b0),                                                                               //               (terminated)
		.av_readdatavalid       (),                                                                                   //               (terminated)
		.av_write               (1'b0),                                                                               //               (terminated)
		.av_writedata           (32'b00000000000000000000000000000000),                                               //               (terminated)
		.av_lock                (1'b0),                                                                               //               (terminated)
		.av_debugaccess         (1'b0),                                                                               //               (terminated)
		.uav_clken              (),                                                                                   //               (terminated)
		.av_clken               (1'b1),                                                                               //               (terminated)
		.uav_response           (2'b00),                                                                              //               (terminated)
		.av_response            (),                                                                                   //               (terminated)
		.uav_writeresponsevalid (1'b0),                                                                               //               (terminated)
		.av_writeresponsevalid  ()                                                                                    //               (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) jtag_uart_avalon_jtag_slave_translator (
		.clk                    (sys_clk_clk_clk),                                    //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),   //                    reset.reset
		.uav_address            (jtag_uart_avalon_jtag_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (jtag_uart_avalon_jtag_slave_agent_m0_read),          //                         .read
		.uav_write              (jtag_uart_avalon_jtag_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (jtag_uart_avalon_jtag_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (jtag_uart_avalon_jtag_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (jtag_uart_avalon_jtag_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (jtag_uart_avalon_jtag_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (jtag_uart_avalon_jtag_slave_write),                  //                         .write
		.av_read                (jtag_uart_avalon_jtag_slave_read),                   //                         .read
		.av_readdata            (jtag_uart_avalon_jtag_slave_readdata),               //                         .readdata
		.av_writedata           (jtag_uart_avalon_jtag_slave_writedata),              //                         .writedata
		.av_waitrequest         (jtag_uart_avalon_jtag_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (jtag_uart_avalon_jtag_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                                   //              (terminated)
		.av_beginbursttransfer  (),                                                   //              (terminated)
		.av_burstcount          (),                                                   //              (terminated)
		.av_byteenable          (),                                                   //              (terminated)
		.av_readdatavalid       (1'b0),                                               //              (terminated)
		.av_writebyteenable     (),                                                   //              (terminated)
		.av_lock                (),                                                   //              (terminated)
		.av_clken               (),                                                   //              (terminated)
		.uav_clken              (1'b0),                                               //              (terminated)
		.av_debugaccess         (),                                                   //              (terminated)
		.av_outputenable        (),                                                   //              (terminated)
		.uav_response           (),                                                   //              (terminated)
		.av_response            (2'b00),                                              //              (terminated)
		.uav_writeresponsevalid (),                                                   //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (8),
		.UAV_DATA_W                     (8),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (1),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (1),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (1),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lcd_avalon_lcd_slave_translator (
		.clk                    (lcd_clk_c0_clk),                              //                      clk.clk
		.reset                  (lcd_reset_reset_bridge_in_reset_reset),       //                    reset.reset
		.uav_address            (lcd_avalon_lcd_slave_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (lcd_avalon_lcd_slave_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (lcd_avalon_lcd_slave_agent_m0_read),          //                         .read
		.uav_write              (lcd_avalon_lcd_slave_agent_m0_write),         //                         .write
		.uav_waitrequest        (lcd_avalon_lcd_slave_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (lcd_avalon_lcd_slave_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (lcd_avalon_lcd_slave_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (lcd_avalon_lcd_slave_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (lcd_avalon_lcd_slave_agent_m0_writedata),     //                         .writedata
		.uav_lock               (lcd_avalon_lcd_slave_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (lcd_avalon_lcd_slave_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (lcd_avalon_lcd_slave_address),                //      avalon_anti_slave_0.address
		.av_write               (lcd_avalon_lcd_slave_write),                  //                         .write
		.av_read                (lcd_avalon_lcd_slave_read),                   //                         .read
		.av_readdata            (lcd_avalon_lcd_slave_readdata),               //                         .readdata
		.av_writedata           (lcd_avalon_lcd_slave_writedata),              //                         .writedata
		.av_waitrequest         (lcd_avalon_lcd_slave_waitrequest),            //                         .waitrequest
		.av_chipselect          (lcd_avalon_lcd_slave_chipselect),             //                         .chipselect
		.av_begintransfer       (),                                            //              (terminated)
		.av_beginbursttransfer  (),                                            //              (terminated)
		.av_burstcount          (),                                            //              (terminated)
		.av_byteenable          (),                                            //              (terminated)
		.av_readdatavalid       (1'b0),                                        //              (terminated)
		.av_writebyteenable     (),                                            //              (terminated)
		.av_lock                (),                                            //              (terminated)
		.av_clken               (),                                            //              (terminated)
		.uav_clken              (1'b0),                                        //              (terminated)
		.av_debugaccess         (),                                            //              (terminated)
		.av_outputenable        (),                                            //              (terminated)
		.uav_response           (),                                            //              (terminated)
		.av_response            (2'b00),                                       //              (terminated)
		.uav_writeresponsevalid (),                                            //              (terminated)
		.av_writeresponsevalid  (1'b0)                                         //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) hex_avalon_slave_0_translator (
		.clk                    (sys_clk_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (hex_avalon_slave_0_agent_m0_address),              // avalon_universal_slave_0.address
		.uav_burstcount         (hex_avalon_slave_0_agent_m0_burstcount),           //                         .burstcount
		.uav_read               (hex_avalon_slave_0_agent_m0_read),                 //                         .read
		.uav_write              (hex_avalon_slave_0_agent_m0_write),                //                         .write
		.uav_waitrequest        (hex_avalon_slave_0_agent_m0_waitrequest),          //                         .waitrequest
		.uav_readdatavalid      (hex_avalon_slave_0_agent_m0_readdatavalid),        //                         .readdatavalid
		.uav_byteenable         (hex_avalon_slave_0_agent_m0_byteenable),           //                         .byteenable
		.uav_readdata           (hex_avalon_slave_0_agent_m0_readdata),             //                         .readdata
		.uav_writedata          (hex_avalon_slave_0_agent_m0_writedata),            //                         .writedata
		.uav_lock               (hex_avalon_slave_0_agent_m0_lock),                 //                         .lock
		.uav_debugaccess        (hex_avalon_slave_0_agent_m0_debugaccess),          //                         .debugaccess
		.av_write               (hex_avalon_slave_0_write),                         //      avalon_anti_slave_0.write
		.av_read                (hex_avalon_slave_0_read),                          //                         .read
		.av_readdata            (hex_avalon_slave_0_readdata),                      //                         .readdata
		.av_writedata           (hex_avalon_slave_0_writedata),                     //                         .writedata
		.av_byteenable          (hex_avalon_slave_0_byteenable),                    //                         .byteenable
		.av_chipselect          (hex_avalon_slave_0_chipselect),                    //                         .chipselect
		.av_address             (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) black_interface_control_port_translator (
		.clk                    (sys_clk_clk_clk),                                     //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),    //                    reset.reset
		.uav_address            (black_interface_control_port_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (black_interface_control_port_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (black_interface_control_port_agent_m0_read),          //                         .read
		.uav_write              (black_interface_control_port_agent_m0_write),         //                         .write
		.uav_waitrequest        (black_interface_control_port_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (black_interface_control_port_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (black_interface_control_port_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (black_interface_control_port_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (black_interface_control_port_agent_m0_writedata),     //                         .writedata
		.uav_lock               (black_interface_control_port_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (black_interface_control_port_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (black_interface_control_port_address),                //      avalon_anti_slave_0.address
		.av_write               (black_interface_control_port_write),                  //                         .write
		.av_read                (black_interface_control_port_read),                   //                         .read
		.av_readdata            (black_interface_control_port_readdata),               //                         .readdata
		.av_writedata           (black_interface_control_port_writedata),              //                         .writedata
		.av_waitrequest         (black_interface_control_port_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                    //              (terminated)
		.av_beginbursttransfer  (),                                                    //              (terminated)
		.av_burstcount          (),                                                    //              (terminated)
		.av_byteenable          (),                                                    //              (terminated)
		.av_readdatavalid       (1'b0),                                                //              (terminated)
		.av_writebyteenable     (),                                                    //              (terminated)
		.av_lock                (),                                                    //              (terminated)
		.av_chipselect          (),                                                    //              (terminated)
		.av_clken               (),                                                    //              (terminated)
		.uav_clken              (1'b0),                                                //              (terminated)
		.av_debugaccess         (),                                                    //              (terminated)
		.av_outputenable        (),                                                    //              (terminated)
		.uav_response           (),                                                    //              (terminated)
		.av_response            (2'b00),                                               //              (terminated)
		.uav_writeresponsevalid (),                                                    //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                 //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (8),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (1),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) red_interface_control_port_translator (
		.clk                    (sys_clk_clk_clk),                                   //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),  //                    reset.reset
		.uav_address            (red_interface_control_port_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (red_interface_control_port_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (red_interface_control_port_agent_m0_read),          //                         .read
		.uav_write              (red_interface_control_port_agent_m0_write),         //                         .write
		.uav_waitrequest        (red_interface_control_port_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (red_interface_control_port_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (red_interface_control_port_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (red_interface_control_port_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (red_interface_control_port_agent_m0_writedata),     //                         .writedata
		.uav_lock               (red_interface_control_port_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (red_interface_control_port_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (red_interface_control_port_address),                //      avalon_anti_slave_0.address
		.av_write               (red_interface_control_port_write),                  //                         .write
		.av_read                (red_interface_control_port_read),                   //                         .read
		.av_readdata            (red_interface_control_port_readdata),               //                         .readdata
		.av_writedata           (red_interface_control_port_writedata),              //                         .writedata
		.av_waitrequest         (red_interface_control_port_waitrequest),            //                         .waitrequest
		.av_begintransfer       (),                                                  //              (terminated)
		.av_beginbursttransfer  (),                                                  //              (terminated)
		.av_burstcount          (),                                                  //              (terminated)
		.av_byteenable          (),                                                  //              (terminated)
		.av_readdatavalid       (1'b0),                                              //              (terminated)
		.av_writebyteenable     (),                                                  //              (terminated)
		.av_lock                (),                                                  //              (terminated)
		.av_chipselect          (),                                                  //              (terminated)
		.av_clken               (),                                                  //              (terminated)
		.uav_clken              (1'b0),                                              //              (terminated)
		.av_debugaccess         (),                                                  //              (terminated)
		.av_outputenable        (),                                                  //              (terminated)
		.uav_response           (),                                                  //              (terminated)
		.av_response            (2'b00),                                             //              (terminated)
		.uav_writeresponsevalid (),                                                  //              (terminated)
		.av_writeresponsevalid  (1'b0)                                               //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (1),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) system_id_control_slave_translator (
		.clk                    (sys_clk_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (system_id_control_slave_agent_m0_address),         // avalon_universal_slave_0.address
		.uav_burstcount         (system_id_control_slave_agent_m0_burstcount),      //                         .burstcount
		.uav_read               (system_id_control_slave_agent_m0_read),            //                         .read
		.uav_write              (system_id_control_slave_agent_m0_write),           //                         .write
		.uav_waitrequest        (system_id_control_slave_agent_m0_waitrequest),     //                         .waitrequest
		.uav_readdatavalid      (system_id_control_slave_agent_m0_readdatavalid),   //                         .readdatavalid
		.uav_byteenable         (system_id_control_slave_agent_m0_byteenable),      //                         .byteenable
		.uav_readdata           (system_id_control_slave_agent_m0_readdata),        //                         .readdata
		.uav_writedata          (system_id_control_slave_agent_m0_writedata),       //                         .writedata
		.uav_lock               (system_id_control_slave_agent_m0_lock),            //                         .lock
		.uav_debugaccess        (system_id_control_slave_agent_m0_debugaccess),     //                         .debugaccess
		.av_address             (system_id_control_slave_address),                  //      avalon_anti_slave_0.address
		.av_readdata            (system_id_control_slave_readdata),                 //                         .readdata
		.av_write               (),                                                 //              (terminated)
		.av_read                (),                                                 //              (terminated)
		.av_writedata           (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_chipselect          (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ted_encryptor_csr_translator (
		.clk                    (sys_clk_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ted_encryptor_csr_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (ted_encryptor_csr_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (ted_encryptor_csr_agent_m0_read),                  //                         .read
		.uav_write              (ted_encryptor_csr_agent_m0_write),                 //                         .write
		.uav_waitrequest        (ted_encryptor_csr_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (ted_encryptor_csr_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (ted_encryptor_csr_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (ted_encryptor_csr_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (ted_encryptor_csr_agent_m0_writedata),             //                         .writedata
		.uav_lock               (ted_encryptor_csr_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (ted_encryptor_csr_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (ted_encryptor_csr_address),                        //      avalon_anti_slave_0.address
		.av_write               (ted_encryptor_csr_write),                          //                         .write
		.av_readdata            (ted_encryptor_csr_readdata),                       //                         .readdata
		.av_writedata           (ted_encryptor_csr_writedata),                      //                         .writedata
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_chipselect          (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (3),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) ted_decryptor_csr_translator (
		.clk                    (sys_clk_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (ted_decryptor_csr_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (ted_decryptor_csr_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (ted_decryptor_csr_agent_m0_read),                  //                         .read
		.uav_write              (ted_decryptor_csr_agent_m0_write),                 //                         .write
		.uav_waitrequest        (ted_decryptor_csr_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (ted_decryptor_csr_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (ted_decryptor_csr_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (ted_decryptor_csr_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (ted_decryptor_csr_agent_m0_writedata),             //                         .writedata
		.uav_lock               (ted_decryptor_csr_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (ted_decryptor_csr_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (ted_decryptor_csr_address),                        //      avalon_anti_slave_0.address
		.av_write               (ted_decryptor_csr_write),                          //                         .write
		.av_readdata            (ted_decryptor_csr_readdata),                       //                         .readdata
		.av_writedata           (ted_decryptor_csr_writedata),                      //                         .writedata
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_chipselect          (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) red_rx_csr_translator (
		.clk                    (sys_clk_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (red_rx_csr_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (red_rx_csr_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (red_rx_csr_agent_m0_read),                         //                         .read
		.uav_write              (red_rx_csr_agent_m0_write),                        //                         .write
		.uav_waitrequest        (red_rx_csr_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (red_rx_csr_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (red_rx_csr_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (red_rx_csr_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (red_rx_csr_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (red_rx_csr_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (red_rx_csr_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (red_rx_csr_address),                               //      avalon_anti_slave_0.address
		.av_write               (red_rx_csr_write),                                 //                         .write
		.av_read                (red_rx_csr_read),                                  //                         .read
		.av_readdata            (red_rx_csr_readdata),                              //                         .readdata
		.av_writedata           (red_rx_csr_writedata),                             //                         .writedata
		.av_chipselect          (red_rx_csr_chipselect),                            //                         .chipselect
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) red_tx_csr_translator (
		.clk                    (sys_clk_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (red_tx_csr_agent_m0_address),                      // avalon_universal_slave_0.address
		.uav_burstcount         (red_tx_csr_agent_m0_burstcount),                   //                         .burstcount
		.uav_read               (red_tx_csr_agent_m0_read),                         //                         .read
		.uav_write              (red_tx_csr_agent_m0_write),                        //                         .write
		.uav_waitrequest        (red_tx_csr_agent_m0_waitrequest),                  //                         .waitrequest
		.uav_readdatavalid      (red_tx_csr_agent_m0_readdatavalid),                //                         .readdatavalid
		.uav_byteenable         (red_tx_csr_agent_m0_byteenable),                   //                         .byteenable
		.uav_readdata           (red_tx_csr_agent_m0_readdata),                     //                         .readdata
		.uav_writedata          (red_tx_csr_agent_m0_writedata),                    //                         .writedata
		.uav_lock               (red_tx_csr_agent_m0_lock),                         //                         .lock
		.uav_debugaccess        (red_tx_csr_agent_m0_debugaccess),                  //                         .debugaccess
		.av_address             (red_tx_csr_address),                               //      avalon_anti_slave_0.address
		.av_write               (red_tx_csr_write),                                 //                         .write
		.av_read                (red_tx_csr_read),                                  //                         .read
		.av_readdata            (red_tx_csr_readdata),                              //                         .readdata
		.av_writedata           (red_tx_csr_writedata),                             //                         .writedata
		.av_chipselect          (red_tx_csr_chipselect),                            //                         .chipselect
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) black_rx_csr_translator (
		.clk                    (sys_clk_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (black_rx_csr_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (black_rx_csr_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (black_rx_csr_agent_m0_read),                       //                         .read
		.uav_write              (black_rx_csr_agent_m0_write),                      //                         .write
		.uav_waitrequest        (black_rx_csr_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (black_rx_csr_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (black_rx_csr_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (black_rx_csr_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (black_rx_csr_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (black_rx_csr_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (black_rx_csr_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (black_rx_csr_address),                             //      avalon_anti_slave_0.address
		.av_write               (black_rx_csr_write),                               //                         .write
		.av_read                (black_rx_csr_read),                                //                         .read
		.av_readdata            (black_rx_csr_readdata),                            //                         .readdata
		.av_writedata           (black_rx_csr_writedata),                           //                         .writedata
		.av_chipselect          (black_rx_csr_chipselect),                          //                         .chipselect
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) black_tx_csr_translator (
		.clk                    (sys_clk_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (black_tx_csr_agent_m0_address),                    // avalon_universal_slave_0.address
		.uav_burstcount         (black_tx_csr_agent_m0_burstcount),                 //                         .burstcount
		.uav_read               (black_tx_csr_agent_m0_read),                       //                         .read
		.uav_write              (black_tx_csr_agent_m0_write),                      //                         .write
		.uav_waitrequest        (black_tx_csr_agent_m0_waitrequest),                //                         .waitrequest
		.uav_readdatavalid      (black_tx_csr_agent_m0_readdatavalid),              //                         .readdatavalid
		.uav_byteenable         (black_tx_csr_agent_m0_byteenable),                 //                         .byteenable
		.uav_readdata           (black_tx_csr_agent_m0_readdata),                   //                         .readdata
		.uav_writedata          (black_tx_csr_agent_m0_writedata),                  //                         .writedata
		.uav_lock               (black_tx_csr_agent_m0_lock),                       //                         .lock
		.uav_debugaccess        (black_tx_csr_agent_m0_debugaccess),                //                         .debugaccess
		.av_address             (black_tx_csr_address),                             //      avalon_anti_slave_0.address
		.av_write               (black_tx_csr_write),                               //                         .write
		.av_read                (black_tx_csr_read),                                //                         .read
		.av_readdata            (black_tx_csr_readdata),                            //                         .readdata
		.av_writedata           (black_tx_csr_writedata),                           //                         .writedata
		.av_chipselect          (black_tx_csr_chipselect),                          //                         .chipselect
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (9),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (1),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) nios2_qsys_0_jtag_debug_module_translator (
		.clk                    (sys_clk_clk_clk),                                       //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),      //                    reset.reset
		.uav_address            (nios2_qsys_0_jtag_debug_module_agent_m0_address),       // avalon_universal_slave_0.address
		.uav_burstcount         (nios2_qsys_0_jtag_debug_module_agent_m0_burstcount),    //                         .burstcount
		.uav_read               (nios2_qsys_0_jtag_debug_module_agent_m0_read),          //                         .read
		.uav_write              (nios2_qsys_0_jtag_debug_module_agent_m0_write),         //                         .write
		.uav_waitrequest        (nios2_qsys_0_jtag_debug_module_agent_m0_waitrequest),   //                         .waitrequest
		.uav_readdatavalid      (nios2_qsys_0_jtag_debug_module_agent_m0_readdatavalid), //                         .readdatavalid
		.uav_byteenable         (nios2_qsys_0_jtag_debug_module_agent_m0_byteenable),    //                         .byteenable
		.uav_readdata           (nios2_qsys_0_jtag_debug_module_agent_m0_readdata),      //                         .readdata
		.uav_writedata          (nios2_qsys_0_jtag_debug_module_agent_m0_writedata),     //                         .writedata
		.uav_lock               (nios2_qsys_0_jtag_debug_module_agent_m0_lock),          //                         .lock
		.uav_debugaccess        (nios2_qsys_0_jtag_debug_module_agent_m0_debugaccess),   //                         .debugaccess
		.av_address             (nios2_qsys_0_jtag_debug_module_address),                //      avalon_anti_slave_0.address
		.av_write               (nios2_qsys_0_jtag_debug_module_write),                  //                         .write
		.av_read                (nios2_qsys_0_jtag_debug_module_read),                   //                         .read
		.av_readdata            (nios2_qsys_0_jtag_debug_module_readdata),               //                         .readdata
		.av_writedata           (nios2_qsys_0_jtag_debug_module_writedata),              //                         .writedata
		.av_byteenable          (nios2_qsys_0_jtag_debug_module_byteenable),             //                         .byteenable
		.av_waitrequest         (nios2_qsys_0_jtag_debug_module_waitrequest),            //                         .waitrequest
		.av_debugaccess         (nios2_qsys_0_jtag_debug_module_debugaccess),            //                         .debugaccess
		.av_begintransfer       (),                                                      //              (terminated)
		.av_beginbursttransfer  (),                                                      //              (terminated)
		.av_burstcount          (),                                                      //              (terminated)
		.av_readdatavalid       (1'b0),                                                  //              (terminated)
		.av_writebyteenable     (),                                                      //              (terminated)
		.av_lock                (),                                                      //              (terminated)
		.av_chipselect          (),                                                      //              (terminated)
		.av_clken               (),                                                      //              (terminated)
		.uav_clken              (1'b0),                                                  //              (terminated)
		.av_outputenable        (),                                                      //              (terminated)
		.uav_response           (),                                                      //              (terminated)
		.av_response            (2'b00),                                                 //              (terminated)
		.uav_writeresponsevalid (),                                                      //              (terminated)
		.av_writeresponsevalid  (1'b0)                                                   //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) lcd_clk_pll_slave_translator (
		.clk                    (sys_clk_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (lcd_clk_pll_slave_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (lcd_clk_pll_slave_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (lcd_clk_pll_slave_agent_m0_read),                  //                         .read
		.uav_write              (lcd_clk_pll_slave_agent_m0_write),                 //                         .write
		.uav_waitrequest        (lcd_clk_pll_slave_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (lcd_clk_pll_slave_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (lcd_clk_pll_slave_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (lcd_clk_pll_slave_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (lcd_clk_pll_slave_agent_m0_writedata),             //                         .writedata
		.uav_lock               (lcd_clk_pll_slave_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (lcd_clk_pll_slave_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (lcd_clk_pll_slave_address),                        //      avalon_anti_slave_0.address
		.av_write               (lcd_clk_pll_slave_write),                          //                         .write
		.av_read                (lcd_clk_pll_slave_read),                           //                         .read
		.av_readdata            (lcd_clk_pll_slave_readdata),                       //                         .readdata
		.av_writedata           (lcd_clk_pll_slave_writedata),                      //                         .writedata
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_chipselect          (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) output_port_s1_translator (
		.clk                    (sys_clk_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (output_port_s1_agent_m0_address),                  // avalon_universal_slave_0.address
		.uav_burstcount         (output_port_s1_agent_m0_burstcount),               //                         .burstcount
		.uav_read               (output_port_s1_agent_m0_read),                     //                         .read
		.uav_write              (output_port_s1_agent_m0_write),                    //                         .write
		.uav_waitrequest        (output_port_s1_agent_m0_waitrequest),              //                         .waitrequest
		.uav_readdatavalid      (output_port_s1_agent_m0_readdatavalid),            //                         .readdatavalid
		.uav_byteenable         (output_port_s1_agent_m0_byteenable),               //                         .byteenable
		.uav_readdata           (output_port_s1_agent_m0_readdata),                 //                         .readdata
		.uav_writedata          (output_port_s1_agent_m0_writedata),                //                         .writedata
		.uav_lock               (output_port_s1_agent_m0_lock),                     //                         .lock
		.uav_debugaccess        (output_port_s1_agent_m0_debugaccess),              //                         .debugaccess
		.av_address             (output_port_s1_address),                           //      avalon_anti_slave_0.address
		.av_write               (output_port_s1_write),                             //                         .write
		.av_readdata            (output_port_s1_readdata),                          //                         .readdata
		.av_writedata           (output_port_s1_writedata),                         //                         .writedata
		.av_chipselect          (output_port_s1_chipselect),                        //                         .chipselect
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (2),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) input_port_s1_translator (
		.clk                    (sys_clk_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (input_port_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (input_port_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (input_port_s1_agent_m0_read),                      //                         .read
		.uav_write              (input_port_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (input_port_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (input_port_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (input_port_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (input_port_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (input_port_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (input_port_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (input_port_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (input_port_s1_address),                            //      avalon_anti_slave_0.address
		.av_readdata            (input_port_s1_readdata),                           //                         .readdata
		.av_write               (),                                                 //              (terminated)
		.av_read                (),                                                 //              (terminated)
		.av_writedata           (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_chipselect          (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (16),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) instruction_memory_s1_translator (
		.clk                    (sys_clk_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (instruction_memory_s1_agent_m0_address),           // avalon_universal_slave_0.address
		.uav_burstcount         (instruction_memory_s1_agent_m0_burstcount),        //                         .burstcount
		.uav_read               (instruction_memory_s1_agent_m0_read),              //                         .read
		.uav_write              (instruction_memory_s1_agent_m0_write),             //                         .write
		.uav_waitrequest        (instruction_memory_s1_agent_m0_waitrequest),       //                         .waitrequest
		.uav_readdatavalid      (instruction_memory_s1_agent_m0_readdatavalid),     //                         .readdatavalid
		.uav_byteenable         (instruction_memory_s1_agent_m0_byteenable),        //                         .byteenable
		.uav_readdata           (instruction_memory_s1_agent_m0_readdata),          //                         .readdata
		.uav_writedata          (instruction_memory_s1_agent_m0_writedata),         //                         .writedata
		.uav_lock               (instruction_memory_s1_agent_m0_lock),              //                         .lock
		.uav_debugaccess        (instruction_memory_s1_agent_m0_debugaccess),       //                         .debugaccess
		.av_address             (instruction_memory_s1_address),                    //      avalon_anti_slave_0.address
		.av_write               (instruction_memory_s1_write),                      //                         .write
		.av_readdata            (instruction_memory_s1_readdata),                   //                         .readdata
		.av_writedata           (instruction_memory_s1_writedata),                  //                         .writedata
		.av_byteenable          (instruction_memory_s1_byteenable),                 //                         .byteenable
		.av_chipselect          (instruction_memory_s1_chipselect),                 //                         .chipselect
		.av_clken               (instruction_memory_s1_clken),                      //                         .clken
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) heap_stack_s1_translator (
		.clk                    (sys_clk_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (heap_stack_s1_agent_m0_address),                   // avalon_universal_slave_0.address
		.uav_burstcount         (heap_stack_s1_agent_m0_burstcount),                //                         .burstcount
		.uav_read               (heap_stack_s1_agent_m0_read),                      //                         .read
		.uav_write              (heap_stack_s1_agent_m0_write),                     //                         .write
		.uav_waitrequest        (heap_stack_s1_agent_m0_waitrequest),               //                         .waitrequest
		.uav_readdatavalid      (heap_stack_s1_agent_m0_readdatavalid),             //                         .readdatavalid
		.uav_byteenable         (heap_stack_s1_agent_m0_byteenable),                //                         .byteenable
		.uav_readdata           (heap_stack_s1_agent_m0_readdata),                  //                         .readdata
		.uav_writedata          (heap_stack_s1_agent_m0_writedata),                 //                         .writedata
		.uav_lock               (heap_stack_s1_agent_m0_lock),                      //                         .lock
		.uav_debugaccess        (heap_stack_s1_agent_m0_debugaccess),               //                         .debugaccess
		.av_address             (heap_stack_s1_address),                            //      avalon_anti_slave_0.address
		.av_write               (heap_stack_s1_write),                              //                         .write
		.av_readdata            (heap_stack_s1_readdata),                           //                         .readdata
		.av_writedata           (heap_stack_s1_writedata),                          //                         .writedata
		.av_byteenable          (heap_stack_s1_byteenable),                         //                         .byteenable
		.av_chipselect          (heap_stack_s1_chipselect),                         //                         .chipselect
		.av_clken               (heap_stack_s1_clken),                              //                         .clken
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (4),
		.AV_DATA_W                      (16),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (1),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (0),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (1),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) system_timer_s1_translator (
		.clk                    (sys_clk_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (system_timer_s1_agent_m0_address),                 // avalon_universal_slave_0.address
		.uav_burstcount         (system_timer_s1_agent_m0_burstcount),              //                         .burstcount
		.uav_read               (system_timer_s1_agent_m0_read),                    //                         .read
		.uav_write              (system_timer_s1_agent_m0_write),                   //                         .write
		.uav_waitrequest        (system_timer_s1_agent_m0_waitrequest),             //                         .waitrequest
		.uav_readdatavalid      (system_timer_s1_agent_m0_readdatavalid),           //                         .readdatavalid
		.uav_byteenable         (system_timer_s1_agent_m0_byteenable),              //                         .byteenable
		.uav_readdata           (system_timer_s1_agent_m0_readdata),                //                         .readdata
		.uav_writedata          (system_timer_s1_agent_m0_writedata),               //                         .writedata
		.uav_lock               (system_timer_s1_agent_m0_lock),                    //                         .lock
		.uav_debugaccess        (system_timer_s1_agent_m0_debugaccess),             //                         .debugaccess
		.av_address             (system_timer_s1_address),                          //      avalon_anti_slave_0.address
		.av_write               (system_timer_s1_write),                            //                         .write
		.av_readdata            (system_timer_s1_readdata),                         //                         .readdata
		.av_writedata           (system_timer_s1_writedata),                        //                         .writedata
		.av_chipselect          (system_timer_s1_chipselect),                       //                         .chipselect
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_byteenable          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.av_clken               (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) red_to_black_memory_s1_translator (
		.clk                    (sys_clk_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (red_to_black_memory_s1_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (red_to_black_memory_s1_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (red_to_black_memory_s1_agent_m0_read),             //                         .read
		.uav_write              (red_to_black_memory_s1_agent_m0_write),            //                         .write
		.uav_waitrequest        (red_to_black_memory_s1_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (red_to_black_memory_s1_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (red_to_black_memory_s1_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (red_to_black_memory_s1_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (red_to_black_memory_s1_agent_m0_writedata),        //                         .writedata
		.uav_lock               (red_to_black_memory_s1_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (red_to_black_memory_s1_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (red_to_black_memory_s1_address),                   //      avalon_anti_slave_0.address
		.av_write               (red_to_black_memory_s1_write),                     //                         .write
		.av_readdata            (red_to_black_memory_s1_readdata),                  //                         .readdata
		.av_writedata           (red_to_black_memory_s1_writedata),                 //                         .writedata
		.av_byteenable          (red_to_black_memory_s1_byteenable),                //                         .byteenable
		.av_chipselect          (red_to_black_memory_s1_chipselect),                //                         .chipselect
		.av_clken               (red_to_black_memory_s1_clken),                     //                         .clken
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (14),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) black_to_red_memory_s1_translator (
		.clk                    (sys_clk_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (black_to_red_memory_s1_agent_m0_address),          // avalon_universal_slave_0.address
		.uav_burstcount         (black_to_red_memory_s1_agent_m0_burstcount),       //                         .burstcount
		.uav_read               (black_to_red_memory_s1_agent_m0_read),             //                         .read
		.uav_write              (black_to_red_memory_s1_agent_m0_write),            //                         .write
		.uav_waitrequest        (black_to_red_memory_s1_agent_m0_waitrequest),      //                         .waitrequest
		.uav_readdatavalid      (black_to_red_memory_s1_agent_m0_readdatavalid),    //                         .readdatavalid
		.uav_byteenable         (black_to_red_memory_s1_agent_m0_byteenable),       //                         .byteenable
		.uav_readdata           (black_to_red_memory_s1_agent_m0_readdata),         //                         .readdata
		.uav_writedata          (black_to_red_memory_s1_agent_m0_writedata),        //                         .writedata
		.uav_lock               (black_to_red_memory_s1_agent_m0_lock),             //                         .lock
		.uav_debugaccess        (black_to_red_memory_s1_agent_m0_debugaccess),      //                         .debugaccess
		.av_address             (black_to_red_memory_s1_address),                   //      avalon_anti_slave_0.address
		.av_write               (black_to_red_memory_s1_write),                     //                         .write
		.av_readdata            (black_to_red_memory_s1_readdata),                  //                         .readdata
		.av_writedata           (black_to_red_memory_s1_writedata),                 //                         .writedata
		.av_byteenable          (black_to_red_memory_s1_byteenable),                //                         .byteenable
		.av_chipselect          (black_to_red_memory_s1_chipselect),                //                         .chipselect
		.av_clken               (black_to_red_memory_s1_clken),                     //                         .clken
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_slave_translator #(
		.AV_ADDRESS_W                   (13),
		.AV_DATA_W                      (32),
		.UAV_DATA_W                     (32),
		.AV_BURSTCOUNT_W                (1),
		.AV_BYTEENABLE_W                (4),
		.UAV_BYTEENABLE_W               (4),
		.UAV_ADDRESS_W                  (32),
		.UAV_BURSTCOUNT_W               (3),
		.AV_READLATENCY                 (1),
		.USE_READDATAVALID              (0),
		.USE_WAITREQUEST                (0),
		.USE_UAV_CLKEN                  (0),
		.USE_READRESPONSE               (0),
		.USE_WRITERESPONSE              (0),
		.AV_SYMBOLS_PER_WORD            (4),
		.AV_ADDRESS_SYMBOLS             (0),
		.AV_BURSTCOUNT_SYMBOLS          (0),
		.AV_CONSTANT_BURST_BEHAVIOR     (0),
		.UAV_CONSTANT_BURST_BEHAVIOR    (0),
		.AV_REQUIRE_UNALIGNED_ADDRESSES (0),
		.CHIPSELECT_THROUGH_READLATENCY (0),
		.AV_READ_WAIT_CYCLES            (0),
		.AV_WRITE_WAIT_CYCLES           (0),
		.AV_SETUP_WAIT_CYCLES           (0),
		.AV_DATA_HOLD_CYCLES            (0)
	) descriptor_mem_s1_translator (
		.clk                    (sys_clk_clk_clk),                                  //                      clk.clk
		.reset                  (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //                    reset.reset
		.uav_address            (descriptor_mem_s1_agent_m0_address),               // avalon_universal_slave_0.address
		.uav_burstcount         (descriptor_mem_s1_agent_m0_burstcount),            //                         .burstcount
		.uav_read               (descriptor_mem_s1_agent_m0_read),                  //                         .read
		.uav_write              (descriptor_mem_s1_agent_m0_write),                 //                         .write
		.uav_waitrequest        (descriptor_mem_s1_agent_m0_waitrequest),           //                         .waitrequest
		.uav_readdatavalid      (descriptor_mem_s1_agent_m0_readdatavalid),         //                         .readdatavalid
		.uav_byteenable         (descriptor_mem_s1_agent_m0_byteenable),            //                         .byteenable
		.uav_readdata           (descriptor_mem_s1_agent_m0_readdata),              //                         .readdata
		.uav_writedata          (descriptor_mem_s1_agent_m0_writedata),             //                         .writedata
		.uav_lock               (descriptor_mem_s1_agent_m0_lock),                  //                         .lock
		.uav_debugaccess        (descriptor_mem_s1_agent_m0_debugaccess),           //                         .debugaccess
		.av_address             (descriptor_mem_s1_address),                        //      avalon_anti_slave_0.address
		.av_write               (descriptor_mem_s1_write),                          //                         .write
		.av_readdata            (descriptor_mem_s1_readdata),                       //                         .readdata
		.av_writedata           (descriptor_mem_s1_writedata),                      //                         .writedata
		.av_byteenable          (descriptor_mem_s1_byteenable),                     //                         .byteenable
		.av_chipselect          (descriptor_mem_s1_chipselect),                     //                         .chipselect
		.av_clken               (descriptor_mem_s1_clken),                          //                         .clken
		.av_read                (),                                                 //              (terminated)
		.av_begintransfer       (),                                                 //              (terminated)
		.av_beginbursttransfer  (),                                                 //              (terminated)
		.av_burstcount          (),                                                 //              (terminated)
		.av_readdatavalid       (1'b0),                                             //              (terminated)
		.av_waitrequest         (1'b0),                                             //              (terminated)
		.av_writebyteenable     (),                                                 //              (terminated)
		.av_lock                (),                                                 //              (terminated)
		.uav_clken              (1'b0),                                             //              (terminated)
		.av_debugaccess         (),                                                 //              (terminated)
		.av_outputenable        (),                                                 //              (terminated)
		.uav_response           (),                                                 //              (terminated)
		.av_response            (2'b00),                                            //              (terminated)
		.uav_writeresponsevalid (),                                                 //              (terminated)
		.av_writeresponsevalid  (1'b0)                                              //              (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (22),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (6),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_qsys_0_data_master_agent (
		.clk                   (sys_clk_clk_clk),                                                             //       clk.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address            (nios2_qsys_0_data_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_qsys_0_data_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_qsys_0_data_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_qsys_0_data_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_qsys_0_data_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_qsys_0_data_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_qsys_0_data_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_qsys_0_data_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_qsys_0_data_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_qsys_0_data_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_qsys_0_data_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_qsys_0_data_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_qsys_0_data_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_qsys_0_data_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_qsys_0_data_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_src_valid),                                                           //        rp.valid
		.rp_data               (rsp_mux_src_data),                                                            //          .data
		.rp_channel            (rsp_mux_src_channel),                                                         //          .channel
		.rp_startofpacket      (rsp_mux_src_startofpacket),                                                   //          .startofpacket
		.rp_endofpacket        (rsp_mux_src_endofpacket),                                                     //          .endofpacket
		.rp_ready              (rsp_mux_src_ready),                                                           //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (22),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (8),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) red_rx_descriptor_read_agent (
		.clk                   (sys_clk_clk_clk),                                                           //       clk.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.av_address            (red_rx_descriptor_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (red_rx_descriptor_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (red_rx_descriptor_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (red_rx_descriptor_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (red_rx_descriptor_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (red_rx_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (red_rx_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (red_rx_descriptor_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (red_rx_descriptor_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (red_rx_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (red_rx_descriptor_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (red_rx_descriptor_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (red_rx_descriptor_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (red_rx_descriptor_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (red_rx_descriptor_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (red_rx_descriptor_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_001_src_valid),                                                     //        rp.valid
		.rp_data               (rsp_mux_001_src_data),                                                      //          .data
		.rp_channel            (rsp_mux_001_src_channel),                                                   //          .channel
		.rp_startofpacket      (rsp_mux_001_src_startofpacket),                                             //          .startofpacket
		.rp_endofpacket        (rsp_mux_001_src_endofpacket),                                               //          .endofpacket
		.rp_ready              (rsp_mux_001_src_ready),                                                     //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (22),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (11),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) red_tx_descriptor_read_agent (
		.clk                   (sys_clk_clk_clk),                                                           //       clk.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                          // clk_reset.reset
		.av_address            (red_tx_descriptor_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (red_tx_descriptor_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (red_tx_descriptor_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (red_tx_descriptor_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (red_tx_descriptor_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (red_tx_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (red_tx_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (red_tx_descriptor_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (red_tx_descriptor_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (red_tx_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (red_tx_descriptor_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (red_tx_descriptor_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (red_tx_descriptor_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (red_tx_descriptor_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (red_tx_descriptor_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (red_tx_descriptor_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_002_src_valid),                                                     //        rp.valid
		.rp_data               (rsp_mux_002_src_data),                                                      //          .data
		.rp_channel            (rsp_mux_002_src_channel),                                                   //          .channel
		.rp_startofpacket      (rsp_mux_002_src_startofpacket),                                             //          .startofpacket
		.rp_endofpacket        (rsp_mux_002_src_endofpacket),                                               //          .endofpacket
		.rp_ready              (rsp_mux_002_src_ready),                                                     //          .ready
		.av_response           (),                                                                          // (terminated)
		.av_writeresponsevalid ()                                                                           // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (22),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (0),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) black_rx_descriptor_read_agent (
		.clk                   (sys_clk_clk_clk),                                                             //       clk.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address            (black_rx_descriptor_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (black_rx_descriptor_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (black_rx_descriptor_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (black_rx_descriptor_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (black_rx_descriptor_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (black_rx_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (black_rx_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (black_rx_descriptor_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (black_rx_descriptor_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (black_rx_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (black_rx_descriptor_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (black_rx_descriptor_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (black_rx_descriptor_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (black_rx_descriptor_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (black_rx_descriptor_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (black_rx_descriptor_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_003_src_valid),                                                       //        rp.valid
		.rp_data               (rsp_mux_003_src_data),                                                        //          .data
		.rp_channel            (rsp_mux_003_src_channel),                                                     //          .channel
		.rp_startofpacket      (rsp_mux_003_src_startofpacket),                                               //          .startofpacket
		.rp_endofpacket        (rsp_mux_003_src_endofpacket),                                                 //          .endofpacket
		.rp_ready              (rsp_mux_003_src_ready),                                                       //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (22),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (3),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) black_tx_descriptor_read_agent (
		.clk                   (sys_clk_clk_clk),                                                             //       clk.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                            // clk_reset.reset
		.av_address            (black_tx_descriptor_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (black_tx_descriptor_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (black_tx_descriptor_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (black_tx_descriptor_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (black_tx_descriptor_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (black_tx_descriptor_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (black_tx_descriptor_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (black_tx_descriptor_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (black_tx_descriptor_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (black_tx_descriptor_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (black_tx_descriptor_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (black_tx_descriptor_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (black_tx_descriptor_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (black_tx_descriptor_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (black_tx_descriptor_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (black_tx_descriptor_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_004_src_valid),                                                       //        rp.valid
		.rp_data               (rsp_mux_004_src_data),                                                        //          .data
		.rp_channel            (rsp_mux_004_src_channel),                                                     //          .channel
		.rp_startofpacket      (rsp_mux_004_src_startofpacket),                                               //          .startofpacket
		.rp_endofpacket        (rsp_mux_004_src_endofpacket),                                                 //          .endofpacket
		.rp_ready              (rsp_mux_004_src_ready),                                                       //          .ready
		.av_response           (),                                                                            // (terminated)
		.av_writeresponsevalid ()                                                                             // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (22),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (9),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) red_rx_descriptor_write_agent (
		.clk                   (sys_clk_clk_clk),                                                            //       clk.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.av_address            (red_rx_descriptor_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (red_rx_descriptor_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (red_rx_descriptor_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (red_rx_descriptor_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (red_rx_descriptor_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (red_rx_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (red_rx_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (red_rx_descriptor_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (red_rx_descriptor_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (red_rx_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (red_rx_descriptor_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (red_rx_descriptor_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (red_rx_descriptor_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (red_rx_descriptor_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (red_rx_descriptor_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (red_rx_descriptor_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_005_src_valid),                                                      //        rp.valid
		.rp_data               (rsp_mux_005_src_data),                                                       //          .data
		.rp_channel            (rsp_mux_005_src_channel),                                                    //          .channel
		.rp_startofpacket      (rsp_mux_005_src_startofpacket),                                              //          .startofpacket
		.rp_endofpacket        (rsp_mux_005_src_endofpacket),                                                //          .endofpacket
		.rp_ready              (rsp_mux_005_src_ready),                                                      //          .ready
		.av_response           (),                                                                           // (terminated)
		.av_writeresponsevalid ()                                                                            // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (22),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (12),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) red_tx_descriptor_write_agent (
		.clk                   (sys_clk_clk_clk),                                                            //       clk.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                           // clk_reset.reset
		.av_address            (red_tx_descriptor_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (red_tx_descriptor_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (red_tx_descriptor_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (red_tx_descriptor_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (red_tx_descriptor_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (red_tx_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (red_tx_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (red_tx_descriptor_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (red_tx_descriptor_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (red_tx_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (red_tx_descriptor_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (red_tx_descriptor_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (red_tx_descriptor_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (red_tx_descriptor_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (red_tx_descriptor_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (red_tx_descriptor_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_006_src_valid),                                                      //        rp.valid
		.rp_data               (rsp_mux_006_src_data),                                                       //          .data
		.rp_channel            (rsp_mux_006_src_channel),                                                    //          .channel
		.rp_startofpacket      (rsp_mux_006_src_startofpacket),                                              //          .startofpacket
		.rp_endofpacket        (rsp_mux_006_src_endofpacket),                                                //          .endofpacket
		.rp_ready              (rsp_mux_006_src_ready),                                                      //          .ready
		.av_response           (),                                                                           // (terminated)
		.av_writeresponsevalid ()                                                                            // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (22),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (1),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) black_rx_descriptor_write_agent (
		.clk                   (sys_clk_clk_clk),                                                              //       clk.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.av_address            (black_rx_descriptor_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (black_rx_descriptor_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (black_rx_descriptor_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (black_rx_descriptor_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (black_rx_descriptor_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (black_rx_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (black_rx_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (black_rx_descriptor_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (black_rx_descriptor_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (black_rx_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (black_rx_descriptor_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (black_rx_descriptor_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (black_rx_descriptor_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (black_rx_descriptor_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (black_rx_descriptor_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (black_rx_descriptor_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_007_src_valid),                                                        //        rp.valid
		.rp_data               (rsp_mux_007_src_data),                                                         //          .data
		.rp_channel            (rsp_mux_007_src_channel),                                                      //          .channel
		.rp_startofpacket      (rsp_mux_007_src_startofpacket),                                                //          .startofpacket
		.rp_endofpacket        (rsp_mux_007_src_endofpacket),                                                  //          .endofpacket
		.rp_ready              (rsp_mux_007_src_ready),                                                        //          .ready
		.av_response           (),                                                                             // (terminated)
		.av_writeresponsevalid ()                                                                              // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (22),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (4),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) black_tx_descriptor_write_agent (
		.clk                   (sys_clk_clk_clk),                                                              //       clk.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.av_address            (black_tx_descriptor_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (black_tx_descriptor_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (black_tx_descriptor_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (black_tx_descriptor_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (black_tx_descriptor_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (black_tx_descriptor_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (black_tx_descriptor_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (black_tx_descriptor_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (black_tx_descriptor_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (black_tx_descriptor_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (black_tx_descriptor_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (black_tx_descriptor_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (black_tx_descriptor_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (black_tx_descriptor_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (black_tx_descriptor_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (black_tx_descriptor_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_008_src_valid),                                                        //        rp.valid
		.rp_data               (rsp_mux_008_src_data),                                                         //          .data
		.rp_channel            (rsp_mux_008_src_channel),                                                      //          .channel
		.rp_startofpacket      (rsp_mux_008_src_startofpacket),                                                //          .startofpacket
		.rp_endofpacket        (rsp_mux_008_src_endofpacket),                                                  //          .endofpacket
		.rp_ready              (rsp_mux_008_src_ready),                                                        //          .ready
		.av_response           (),                                                                             // (terminated)
		.av_writeresponsevalid ()                                                                              // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (22),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (13),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) red_tx_m_read_agent (
		.clk                   (sys_clk_clk_clk),                                                  //       clk.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.av_address            (red_tx_m_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (red_tx_m_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (red_tx_m_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (red_tx_m_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (red_tx_m_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (red_tx_m_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (red_tx_m_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (red_tx_m_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (red_tx_m_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (red_tx_m_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (red_tx_m_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (red_tx_m_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (red_tx_m_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (red_tx_m_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (red_tx_m_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (red_tx_m_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_009_src_valid),                                            //        rp.valid
		.rp_data               (rsp_mux_009_src_data),                                             //          .data
		.rp_channel            (rsp_mux_009_src_channel),                                          //          .channel
		.rp_startofpacket      (rsp_mux_009_src_startofpacket),                                    //          .startofpacket
		.rp_endofpacket        (rsp_mux_009_src_endofpacket),                                      //          .endofpacket
		.rp_ready              (rsp_mux_009_src_ready),                                            //          .ready
		.av_response           (),                                                                 // (terminated)
		.av_writeresponsevalid ()                                                                  // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (22),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (2),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) black_rx_m_write_agent (
		.clk                   (sys_clk_clk_clk),                                                     //       clk.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.av_address            (black_rx_m_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (black_rx_m_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (black_rx_m_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (black_rx_m_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (black_rx_m_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (black_rx_m_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (black_rx_m_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (black_rx_m_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (black_rx_m_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (black_rx_m_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (black_rx_m_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (black_rx_m_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (black_rx_m_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (black_rx_m_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (black_rx_m_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (black_rx_m_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_010_src_valid),                                               //        rp.valid
		.rp_data               (rsp_mux_010_src_data),                                                //          .data
		.rp_channel            (rsp_mux_010_src_channel),                                             //          .channel
		.rp_startofpacket      (rsp_mux_010_src_startofpacket),                                       //          .startofpacket
		.rp_endofpacket        (rsp_mux_010_src_endofpacket),                                         //          .endofpacket
		.rp_ready              (rsp_mux_010_src_ready),                                               //          .ready
		.av_response           (),                                                                    // (terminated)
		.av_writeresponsevalid ()                                                                     // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (22),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (14),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) ted_decryptor_read_master_agent (
		.clk                   (sys_clk_clk_clk),                                                              //       clk.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.av_address            (ted_decryptor_read_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (ted_decryptor_read_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (ted_decryptor_read_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (ted_decryptor_read_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (ted_decryptor_read_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (ted_decryptor_read_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (ted_decryptor_read_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (ted_decryptor_read_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (ted_decryptor_read_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (ted_decryptor_read_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (ted_decryptor_read_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (ted_decryptor_read_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (ted_decryptor_read_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (ted_decryptor_read_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (ted_decryptor_read_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (ted_decryptor_read_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_011_src_valid),                                                        //        rp.valid
		.rp_data               (rsp_mux_011_src_data),                                                         //          .data
		.rp_channel            (rsp_mux_011_src_channel),                                                      //          .channel
		.rp_startofpacket      (rsp_mux_011_src_startofpacket),                                                //          .startofpacket
		.rp_endofpacket        (rsp_mux_011_src_endofpacket),                                                  //          .endofpacket
		.rp_ready              (rsp_mux_011_src_ready),                                                        //          .ready
		.av_response           (),                                                                             // (terminated)
		.av_writeresponsevalid ()                                                                              // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (22),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (15),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) ted_decryptor_write_master_agent (
		.clk                   (sys_clk_clk_clk),                                                               //       clk.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (ted_decryptor_write_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (ted_decryptor_write_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (ted_decryptor_write_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (ted_decryptor_write_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (ted_decryptor_write_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (ted_decryptor_write_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (ted_decryptor_write_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (ted_decryptor_write_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (ted_decryptor_write_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (ted_decryptor_write_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (ted_decryptor_write_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (ted_decryptor_write_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (ted_decryptor_write_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (ted_decryptor_write_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (ted_decryptor_write_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (ted_decryptor_write_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_012_src_valid),                                                         //        rp.valid
		.rp_data               (rsp_mux_012_src_data),                                                          //          .data
		.rp_channel            (rsp_mux_012_src_channel),                                                       //          .channel
		.rp_startofpacket      (rsp_mux_012_src_startofpacket),                                                 //          .startofpacket
		.rp_endofpacket        (rsp_mux_012_src_endofpacket),                                                   //          .endofpacket
		.rp_ready              (rsp_mux_012_src_ready),                                                         //          .ready
		.av_response           (),                                                                              // (terminated)
		.av_writeresponsevalid ()                                                                               // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (22),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (5),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) black_tx_m_read_agent (
		.clk                   (sys_clk_clk_clk),                                                    //       clk.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                   // clk_reset.reset
		.av_address            (black_tx_m_read_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (black_tx_m_read_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (black_tx_m_read_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (black_tx_m_read_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (black_tx_m_read_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (black_tx_m_read_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (black_tx_m_read_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (black_tx_m_read_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (black_tx_m_read_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (black_tx_m_read_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (black_tx_m_read_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (black_tx_m_read_agent_cp_valid),                                     //        cp.valid
		.cp_data               (black_tx_m_read_agent_cp_data),                                      //          .data
		.cp_startofpacket      (black_tx_m_read_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (black_tx_m_read_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (black_tx_m_read_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_013_src_valid),                                              //        rp.valid
		.rp_data               (rsp_mux_013_src_data),                                               //          .data
		.rp_channel            (rsp_mux_013_src_channel),                                            //          .channel
		.rp_startofpacket      (rsp_mux_013_src_startofpacket),                                      //          .startofpacket
		.rp_endofpacket        (rsp_mux_013_src_endofpacket),                                        //          .endofpacket
		.rp_ready              (rsp_mux_013_src_ready),                                              //          .ready
		.av_response           (),                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                    // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (22),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (10),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) red_rx_m_write_agent (
		.clk                   (sys_clk_clk_clk),                                                   //       clk.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                  // clk_reset.reset
		.av_address            (red_rx_m_write_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (red_rx_m_write_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (red_rx_m_write_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (red_rx_m_write_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (red_rx_m_write_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (red_rx_m_write_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (red_rx_m_write_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (red_rx_m_write_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (red_rx_m_write_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (red_rx_m_write_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (red_rx_m_write_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (red_rx_m_write_agent_cp_valid),                                     //        cp.valid
		.cp_data               (red_rx_m_write_agent_cp_data),                                      //          .data
		.cp_startofpacket      (red_rx_m_write_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (red_rx_m_write_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (red_rx_m_write_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_014_src_valid),                                             //        rp.valid
		.rp_data               (rsp_mux_014_src_data),                                              //          .data
		.rp_channel            (rsp_mux_014_src_channel),                                           //          .channel
		.rp_startofpacket      (rsp_mux_014_src_startofpacket),                                     //          .startofpacket
		.rp_endofpacket        (rsp_mux_014_src_endofpacket),                                       //          .endofpacket
		.rp_ready              (rsp_mux_014_src_ready),                                             //          .ready
		.av_response           (),                                                                  // (terminated)
		.av_writeresponsevalid ()                                                                   // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (22),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (16),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) ted_encryptor_read_master_agent (
		.clk                   (sys_clk_clk_clk),                                                              //       clk.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                             // clk_reset.reset
		.av_address            (ted_encryptor_read_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (ted_encryptor_read_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (ted_encryptor_read_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (ted_encryptor_read_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (ted_encryptor_read_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (ted_encryptor_read_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (ted_encryptor_read_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (ted_encryptor_read_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (ted_encryptor_read_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (ted_encryptor_read_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (ted_encryptor_read_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (ted_encryptor_read_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (ted_encryptor_read_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (ted_encryptor_read_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (ted_encryptor_read_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (ted_encryptor_read_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_015_src_valid),                                                        //        rp.valid
		.rp_data               (rsp_mux_015_src_data),                                                         //          .data
		.rp_channel            (rsp_mux_015_src_channel),                                                      //          .channel
		.rp_startofpacket      (rsp_mux_015_src_startofpacket),                                                //          .startofpacket
		.rp_endofpacket        (rsp_mux_015_src_endofpacket),                                                  //          .endofpacket
		.rp_ready              (rsp_mux_015_src_ready),                                                        //          .ready
		.av_response           (),                                                                             // (terminated)
		.av_writeresponsevalid ()                                                                              // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (22),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (17),
		.BURSTWRAP_VALUE           (7),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) ted_encryptor_write_master_agent (
		.clk                   (sys_clk_clk_clk),                                                               //       clk.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                              // clk_reset.reset
		.av_address            (ted_encryptor_write_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (ted_encryptor_write_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (ted_encryptor_write_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (ted_encryptor_write_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (ted_encryptor_write_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (ted_encryptor_write_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (ted_encryptor_write_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (ted_encryptor_write_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (ted_encryptor_write_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (ted_encryptor_write_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (ted_encryptor_write_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (ted_encryptor_write_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (ted_encryptor_write_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (ted_encryptor_write_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (ted_encryptor_write_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (ted_encryptor_write_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_016_src_valid),                                                         //        rp.valid
		.rp_data               (rsp_mux_016_src_data),                                                          //          .data
		.rp_channel            (rsp_mux_016_src_channel),                                                       //          .channel
		.rp_startofpacket      (rsp_mux_016_src_startofpacket),                                                 //          .startofpacket
		.rp_endofpacket        (rsp_mux_016_src_endofpacket),                                                   //          .endofpacket
		.rp_ready              (rsp_mux_016_src_ready),                                                         //          .ready
		.av_response           (),                                                                              // (terminated)
		.av_writeresponsevalid ()                                                                               // (terminated)
	);

	altera_merlin_master_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_QOS_H                 (88),
		.PKT_QOS_L                 (88),
		.PKT_DATA_SIDEBAND_H       (86),
		.PKT_DATA_SIDEBAND_L       (86),
		.PKT_ADDR_SIDEBAND_H       (85),
		.PKT_ADDR_SIDEBAND_L       (85),
		.PKT_BURST_TYPE_H          (84),
		.PKT_BURST_TYPE_L          (83),
		.PKT_CACHE_H               (106),
		.PKT_CACHE_L               (103),
		.PKT_THREAD_ID_H           (99),
		.PKT_THREAD_ID_L           (99),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_EXCLUSIVE       (73),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.ST_DATA_W                 (112),
		.ST_CHANNEL_W              (22),
		.AV_BURSTCOUNT_W           (3),
		.SUPPRESS_0_BYTEEN_RSP     (0),
		.ID                        (7),
		.BURSTWRAP_VALUE           (3),
		.CACHE_VALUE               (0),
		.SECURE_ACCESS_BIT         (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_qsys_0_instruction_master_agent (
		.clk                   (sys_clk_clk_clk),                                                                    //       clk.clk
		.reset                 (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                                   // clk_reset.reset
		.av_address            (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_address),       //        av.address
		.av_write              (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_write),         //          .write
		.av_read               (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_read),          //          .read
		.av_writedata          (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_writedata),     //          .writedata
		.av_readdata           (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdata),      //          .readdata
		.av_waitrequest        (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_waitrequest),   //          .waitrequest
		.av_readdatavalid      (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_readdatavalid), //          .readdatavalid
		.av_byteenable         (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_byteenable),    //          .byteenable
		.av_burstcount         (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_burstcount),    //          .burstcount
		.av_debugaccess        (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_debugaccess),   //          .debugaccess
		.av_lock               (nios2_qsys_0_instruction_master_translator_avalon_universal_master_0_lock),          //          .lock
		.cp_valid              (nios2_qsys_0_instruction_master_agent_cp_valid),                                     //        cp.valid
		.cp_data               (nios2_qsys_0_instruction_master_agent_cp_data),                                      //          .data
		.cp_startofpacket      (nios2_qsys_0_instruction_master_agent_cp_startofpacket),                             //          .startofpacket
		.cp_endofpacket        (nios2_qsys_0_instruction_master_agent_cp_endofpacket),                               //          .endofpacket
		.cp_ready              (nios2_qsys_0_instruction_master_agent_cp_ready),                                     //          .ready
		.rp_valid              (rsp_mux_017_src_valid),                                                              //        rp.valid
		.rp_data               (rsp_mux_017_src_data),                                                               //          .data
		.rp_channel            (rsp_mux_017_src_channel),                                                            //          .channel
		.rp_startofpacket      (rsp_mux_017_src_startofpacket),                                                      //          .startofpacket
		.rp_endofpacket        (rsp_mux_017_src_endofpacket),                                                        //          .endofpacket
		.rp_ready              (rsp_mux_017_src_ready),                                                              //          .ready
		.av_response           (),                                                                                   // (terminated)
		.av_writeresponsevalid ()                                                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) jtag_uart_avalon_jtag_slave_agent (
		.clk                     (sys_clk_clk_clk),                                              //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),             //       clk_reset.reset
		.m0_address              (jtag_uart_avalon_jtag_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (jtag_uart_avalon_jtag_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (jtag_uart_avalon_jtag_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (jtag_uart_avalon_jtag_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (jtag_uart_avalon_jtag_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (jtag_uart_avalon_jtag_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (jtag_uart_avalon_jtag_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (jtag_uart_avalon_jtag_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (jtag_uart_avalon_jtag_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (jtag_uart_avalon_jtag_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (jtag_uart_avalon_jtag_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (jtag_uart_avalon_jtag_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (jtag_uart_avalon_jtag_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (jtag_uart_avalon_jtag_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_src_ready),                                            //              cp.ready
		.cp_valid                (cmd_mux_src_valid),                                            //                .valid
		.cp_data                 (cmd_mux_src_data),                                             //                .data
		.cp_startofpacket        (cmd_mux_src_startofpacket),                                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_src_endofpacket),                                      //                .endofpacket
		.cp_channel              (cmd_mux_src_channel),                                          //                .channel
		.rf_sink_ready           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (jtag_uart_avalon_jtag_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                        //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                          //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) jtag_uart_avalon_jtag_slave_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                              //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),             // clk_reset.reset
		.in_data           (jtag_uart_avalon_jtag_slave_agent_rf_source_data),             //        in.data
		.in_valid          (jtag_uart_avalon_jtag_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (jtag_uart_avalon_jtag_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (jtag_uart_avalon_jtag_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (jtag_uart_avalon_jtag_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                        // (terminated)
		.csr_read          (1'b0),                                                         // (terminated)
		.csr_write         (1'b0),                                                         // (terminated)
		.csr_readdata      (),                                                             // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                         // (terminated)
		.almost_full_data  (),                                                             // (terminated)
		.almost_empty_data (),                                                             // (terminated)
		.in_empty          (1'b0),                                                         // (terminated)
		.out_empty         (),                                                             // (terminated)
		.in_error          (1'b0),                                                         // (terminated)
		.out_error         (),                                                             // (terminated)
		.in_channel        (1'b0),                                                         // (terminated)
		.out_channel       ()                                                              // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (84),
		.PKT_ORI_BURST_SIZE_L      (82),
		.PKT_RESPONSE_STATUS_H     (81),
		.PKT_RESPONSE_STATUS_L     (80),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_TRANS_LOCK            (45),
		.PKT_BEGIN_BURST           (60),
		.PKT_PROTECTION_H          (75),
		.PKT_PROTECTION_L          (73),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (50),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (47),
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_POSTED          (42),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.PKT_DATA_H                (7),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_SRC_ID_H              (66),
		.PKT_SRC_ID_L              (62),
		.PKT_DEST_ID_H             (71),
		.PKT_DEST_ID_L             (67),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (85),
		.AVS_BURSTCOUNT_W          (1),
		.SUPPRESS_0_BYTEEN_CMD     (1),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) lcd_avalon_lcd_slave_agent (
		.clk                     (lcd_clk_c0_clk),                                           //             clk.clk
		.reset                   (lcd_reset_reset_bridge_in_reset_reset),                    //       clk_reset.reset
		.m0_address              (lcd_avalon_lcd_slave_agent_m0_address),                    //              m0.address
		.m0_burstcount           (lcd_avalon_lcd_slave_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (lcd_avalon_lcd_slave_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (lcd_avalon_lcd_slave_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (lcd_avalon_lcd_slave_agent_m0_lock),                       //                .lock
		.m0_readdata             (lcd_avalon_lcd_slave_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (lcd_avalon_lcd_slave_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (lcd_avalon_lcd_slave_agent_m0_read),                       //                .read
		.m0_waitrequest          (lcd_avalon_lcd_slave_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (lcd_avalon_lcd_slave_agent_m0_writedata),                  //                .writedata
		.m0_write                (lcd_avalon_lcd_slave_agent_m0_write),                      //                .write
		.rp_endofpacket          (lcd_avalon_lcd_slave_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (lcd_avalon_lcd_slave_agent_rp_ready),                      //                .ready
		.rp_valid                (lcd_avalon_lcd_slave_agent_rp_valid),                      //                .valid
		.rp_data                 (lcd_avalon_lcd_slave_agent_rp_data),                       //                .data
		.rp_startofpacket        (lcd_avalon_lcd_slave_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (lcd_avalon_lcd_slave_burst_adapter_source0_ready),         //              cp.ready
		.cp_valid                (lcd_avalon_lcd_slave_burst_adapter_source0_valid),         //                .valid
		.cp_data                 (lcd_avalon_lcd_slave_burst_adapter_source0_data),          //                .data
		.cp_startofpacket        (lcd_avalon_lcd_slave_burst_adapter_source0_startofpacket), //                .startofpacket
		.cp_endofpacket          (lcd_avalon_lcd_slave_burst_adapter_source0_endofpacket),   //                .endofpacket
		.cp_channel              (lcd_avalon_lcd_slave_burst_adapter_source0_channel),       //                .channel
		.rf_sink_ready           (lcd_avalon_lcd_slave_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (lcd_avalon_lcd_slave_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (lcd_avalon_lcd_slave_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (lcd_avalon_lcd_slave_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (lcd_avalon_lcd_slave_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (lcd_avalon_lcd_slave_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (lcd_avalon_lcd_slave_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (lcd_avalon_lcd_slave_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (lcd_avalon_lcd_slave_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (lcd_avalon_lcd_slave_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (lcd_avalon_lcd_slave_agent_rdata_fifo_out_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (lcd_avalon_lcd_slave_agent_rdata_fifo_out_valid),          //                .valid
		.rdata_fifo_sink_data    (lcd_avalon_lcd_slave_agent_rdata_fifo_out_data),           //                .data
		.rdata_fifo_src_ready    (lcd_avalon_lcd_slave_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lcd_avalon_lcd_slave_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (lcd_avalon_lcd_slave_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (86),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lcd_avalon_lcd_slave_agent_rsp_fifo (
		.clk               (lcd_clk_c0_clk),                                        //       clk.clk
		.reset             (lcd_reset_reset_bridge_in_reset_reset),                 // clk_reset.reset
		.in_data           (lcd_avalon_lcd_slave_agent_rf_source_data),             //        in.data
		.in_valid          (lcd_avalon_lcd_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (lcd_avalon_lcd_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lcd_avalon_lcd_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lcd_avalon_lcd_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lcd_avalon_lcd_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lcd_avalon_lcd_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lcd_avalon_lcd_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lcd_avalon_lcd_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lcd_avalon_lcd_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                 // (terminated)
		.csr_read          (1'b0),                                                  // (terminated)
		.csr_write         (1'b0),                                                  // (terminated)
		.csr_readdata      (),                                                      // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                  // (terminated)
		.almost_full_data  (),                                                      // (terminated)
		.almost_empty_data (),                                                      // (terminated)
		.in_empty          (1'b0),                                                  // (terminated)
		.out_empty         (),                                                      // (terminated)
		.in_error          (1'b0),                                                  // (terminated)
		.out_error         (),                                                      // (terminated)
		.in_channel        (1'b0),                                                  // (terminated)
		.out_channel       ()                                                       // (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (10),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (0),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (0),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lcd_avalon_lcd_slave_agent_rdata_fifo (
		.clk               (lcd_clk_c0_clk),                                  //       clk.clk
		.reset             (lcd_reset_reset_bridge_in_reset_reset),           // clk_reset.reset
		.in_data           (lcd_avalon_lcd_slave_agent_rdata_fifo_src_data),  //        in.data
		.in_valid          (lcd_avalon_lcd_slave_agent_rdata_fifo_src_valid), //          .valid
		.in_ready          (lcd_avalon_lcd_slave_agent_rdata_fifo_src_ready), //          .ready
		.out_data          (lcd_avalon_lcd_slave_agent_rdata_fifo_out_data),  //       out.data
		.out_valid         (lcd_avalon_lcd_slave_agent_rdata_fifo_out_valid), //          .valid
		.out_ready         (lcd_avalon_lcd_slave_agent_rdata_fifo_out_ready), //          .ready
		.csr_address       (2'b00),                                           // (terminated)
		.csr_read          (1'b0),                                            // (terminated)
		.csr_write         (1'b0),                                            // (terminated)
		.csr_readdata      (),                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),            // (terminated)
		.almost_full_data  (),                                                // (terminated)
		.almost_empty_data (),                                                // (terminated)
		.in_startofpacket  (1'b0),                                            // (terminated)
		.in_endofpacket    (1'b0),                                            // (terminated)
		.out_startofpacket (),                                                // (terminated)
		.out_endofpacket   (),                                                // (terminated)
		.in_empty          (1'b0),                                            // (terminated)
		.out_empty         (),                                                // (terminated)
		.in_error          (1'b0),                                            // (terminated)
		.out_error         (),                                                // (terminated)
		.in_channel        (1'b0),                                            // (terminated)
		.out_channel       ()                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) hex_avalon_slave_0_agent (
		.clk                     (sys_clk_clk_clk),                                     //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),    //       clk_reset.reset
		.m0_address              (hex_avalon_slave_0_agent_m0_address),                 //              m0.address
		.m0_burstcount           (hex_avalon_slave_0_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (hex_avalon_slave_0_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (hex_avalon_slave_0_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (hex_avalon_slave_0_agent_m0_lock),                    //                .lock
		.m0_readdata             (hex_avalon_slave_0_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (hex_avalon_slave_0_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (hex_avalon_slave_0_agent_m0_read),                    //                .read
		.m0_waitrequest          (hex_avalon_slave_0_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (hex_avalon_slave_0_agent_m0_writedata),               //                .writedata
		.m0_write                (hex_avalon_slave_0_agent_m0_write),                   //                .write
		.rp_endofpacket          (hex_avalon_slave_0_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (hex_avalon_slave_0_agent_rp_ready),                   //                .ready
		.rp_valid                (hex_avalon_slave_0_agent_rp_valid),                   //                .valid
		.rp_data                 (hex_avalon_slave_0_agent_rp_data),                    //                .data
		.rp_startofpacket        (hex_avalon_slave_0_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_002_src_ready),                               //              cp.ready
		.cp_valid                (cmd_mux_002_src_valid),                               //                .valid
		.cp_data                 (cmd_mux_002_src_data),                                //                .data
		.cp_startofpacket        (cmd_mux_002_src_startofpacket),                       //                .startofpacket
		.cp_endofpacket          (cmd_mux_002_src_endofpacket),                         //                .endofpacket
		.cp_channel              (cmd_mux_002_src_channel),                             //                .channel
		.rf_sink_ready           (hex_avalon_slave_0_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (hex_avalon_slave_0_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (hex_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (hex_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (hex_avalon_slave_0_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (hex_avalon_slave_0_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (hex_avalon_slave_0_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (hex_avalon_slave_0_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (hex_avalon_slave_0_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (hex_avalon_slave_0_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (hex_avalon_slave_0_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (hex_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (hex_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (hex_avalon_slave_0_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (hex_avalon_slave_0_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (hex_avalon_slave_0_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                               //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                 //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) hex_avalon_slave_0_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                     //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),    // clk_reset.reset
		.in_data           (hex_avalon_slave_0_agent_rf_source_data),             //        in.data
		.in_valid          (hex_avalon_slave_0_agent_rf_source_valid),            //          .valid
		.in_ready          (hex_avalon_slave_0_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (hex_avalon_slave_0_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (hex_avalon_slave_0_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (hex_avalon_slave_0_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (hex_avalon_slave_0_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (hex_avalon_slave_0_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (hex_avalon_slave_0_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (hex_avalon_slave_0_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                               // (terminated)
		.csr_read          (1'b0),                                                // (terminated)
		.csr_write         (1'b0),                                                // (terminated)
		.csr_readdata      (),                                                    // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                // (terminated)
		.almost_full_data  (),                                                    // (terminated)
		.almost_empty_data (),                                                    // (terminated)
		.in_empty          (1'b0),                                                // (terminated)
		.out_empty         (),                                                    // (terminated)
		.in_error          (1'b0),                                                // (terminated)
		.out_error         (),                                                    // (terminated)
		.in_channel        (1'b0),                                                // (terminated)
		.out_channel       ()                                                     // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) black_interface_control_port_agent (
		.clk                     (sys_clk_clk_clk),                                               //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),              //       clk_reset.reset
		.m0_address              (black_interface_control_port_agent_m0_address),                 //              m0.address
		.m0_burstcount           (black_interface_control_port_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (black_interface_control_port_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (black_interface_control_port_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (black_interface_control_port_agent_m0_lock),                    //                .lock
		.m0_readdata             (black_interface_control_port_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (black_interface_control_port_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (black_interface_control_port_agent_m0_read),                    //                .read
		.m0_waitrequest          (black_interface_control_port_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (black_interface_control_port_agent_m0_writedata),               //                .writedata
		.m0_write                (black_interface_control_port_agent_m0_write),                   //                .write
		.rp_endofpacket          (black_interface_control_port_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (black_interface_control_port_agent_rp_ready),                   //                .ready
		.rp_valid                (black_interface_control_port_agent_rp_valid),                   //                .valid
		.rp_data                 (black_interface_control_port_agent_rp_data),                    //                .data
		.rp_startofpacket        (black_interface_control_port_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_003_src_ready),                                         //              cp.ready
		.cp_valid                (cmd_mux_003_src_valid),                                         //                .valid
		.cp_data                 (cmd_mux_003_src_data),                                          //                .data
		.cp_startofpacket        (cmd_mux_003_src_startofpacket),                                 //                .startofpacket
		.cp_endofpacket          (cmd_mux_003_src_endofpacket),                                   //                .endofpacket
		.cp_channel              (cmd_mux_003_src_channel),                                       //                .channel
		.rf_sink_ready           (black_interface_control_port_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (black_interface_control_port_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (black_interface_control_port_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (black_interface_control_port_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (black_interface_control_port_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (black_interface_control_port_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (black_interface_control_port_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (black_interface_control_port_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (black_interface_control_port_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (black_interface_control_port_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (black_interface_control_port_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (black_interface_control_port_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (black_interface_control_port_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (black_interface_control_port_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (black_interface_control_port_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (black_interface_control_port_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                         //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                           //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) black_interface_control_port_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                               //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),              // clk_reset.reset
		.in_data           (black_interface_control_port_agent_rf_source_data),             //        in.data
		.in_valid          (black_interface_control_port_agent_rf_source_valid),            //          .valid
		.in_ready          (black_interface_control_port_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (black_interface_control_port_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (black_interface_control_port_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (black_interface_control_port_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (black_interface_control_port_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (black_interface_control_port_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (black_interface_control_port_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (black_interface_control_port_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                         // (terminated)
		.csr_read          (1'b0),                                                          // (terminated)
		.csr_write         (1'b0),                                                          // (terminated)
		.csr_readdata      (),                                                              // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                          // (terminated)
		.almost_full_data  (),                                                              // (terminated)
		.almost_empty_data (),                                                              // (terminated)
		.in_empty          (1'b0),                                                          // (terminated)
		.out_empty         (),                                                              // (terminated)
		.in_error          (1'b0),                                                          // (terminated)
		.out_error         (),                                                              // (terminated)
		.in_channel        (1'b0),                                                          // (terminated)
		.out_channel       ()                                                               // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) red_interface_control_port_agent (
		.clk                     (sys_clk_clk_clk),                                             //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),            //       clk_reset.reset
		.m0_address              (red_interface_control_port_agent_m0_address),                 //              m0.address
		.m0_burstcount           (red_interface_control_port_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (red_interface_control_port_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (red_interface_control_port_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (red_interface_control_port_agent_m0_lock),                    //                .lock
		.m0_readdata             (red_interface_control_port_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (red_interface_control_port_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (red_interface_control_port_agent_m0_read),                    //                .read
		.m0_waitrequest          (red_interface_control_port_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (red_interface_control_port_agent_m0_writedata),               //                .writedata
		.m0_write                (red_interface_control_port_agent_m0_write),                   //                .write
		.rp_endofpacket          (red_interface_control_port_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (red_interface_control_port_agent_rp_ready),                   //                .ready
		.rp_valid                (red_interface_control_port_agent_rp_valid),                   //                .valid
		.rp_data                 (red_interface_control_port_agent_rp_data),                    //                .data
		.rp_startofpacket        (red_interface_control_port_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_004_src_ready),                                       //              cp.ready
		.cp_valid                (cmd_mux_004_src_valid),                                       //                .valid
		.cp_data                 (cmd_mux_004_src_data),                                        //                .data
		.cp_startofpacket        (cmd_mux_004_src_startofpacket),                               //                .startofpacket
		.cp_endofpacket          (cmd_mux_004_src_endofpacket),                                 //                .endofpacket
		.cp_channel              (cmd_mux_004_src_channel),                                     //                .channel
		.rf_sink_ready           (red_interface_control_port_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (red_interface_control_port_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (red_interface_control_port_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (red_interface_control_port_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (red_interface_control_port_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (red_interface_control_port_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (red_interface_control_port_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (red_interface_control_port_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (red_interface_control_port_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (red_interface_control_port_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (red_interface_control_port_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (red_interface_control_port_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (red_interface_control_port_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (red_interface_control_port_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (red_interface_control_port_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (red_interface_control_port_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                       //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                         //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) red_interface_control_port_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                             //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),            // clk_reset.reset
		.in_data           (red_interface_control_port_agent_rf_source_data),             //        in.data
		.in_valid          (red_interface_control_port_agent_rf_source_valid),            //          .valid
		.in_ready          (red_interface_control_port_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (red_interface_control_port_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (red_interface_control_port_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (red_interface_control_port_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (red_interface_control_port_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (red_interface_control_port_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (red_interface_control_port_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (red_interface_control_port_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                       // (terminated)
		.csr_read          (1'b0),                                                        // (terminated)
		.csr_write         (1'b0),                                                        // (terminated)
		.csr_readdata      (),                                                            // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                        // (terminated)
		.almost_full_data  (),                                                            // (terminated)
		.almost_empty_data (),                                                            // (terminated)
		.in_empty          (1'b0),                                                        // (terminated)
		.out_empty         (),                                                            // (terminated)
		.in_error          (1'b0),                                                        // (terminated)
		.out_error         (),                                                            // (terminated)
		.in_channel        (1'b0),                                                        // (terminated)
		.out_channel       ()                                                             // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) system_id_control_slave_agent (
		.clk                     (sys_clk_clk_clk),                                          //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),         //       clk_reset.reset
		.m0_address              (system_id_control_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (system_id_control_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (system_id_control_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (system_id_control_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (system_id_control_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (system_id_control_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (system_id_control_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (system_id_control_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (system_id_control_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (system_id_control_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (system_id_control_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (system_id_control_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (system_id_control_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (system_id_control_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (system_id_control_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (system_id_control_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_005_src_ready),                                    //              cp.ready
		.cp_valid                (cmd_mux_005_src_valid),                                    //                .valid
		.cp_data                 (cmd_mux_005_src_data),                                     //                .data
		.cp_startofpacket        (cmd_mux_005_src_startofpacket),                            //                .startofpacket
		.cp_endofpacket          (cmd_mux_005_src_endofpacket),                              //                .endofpacket
		.cp_channel              (cmd_mux_005_src_channel),                                  //                .channel
		.rf_sink_ready           (system_id_control_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (system_id_control_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (system_id_control_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (system_id_control_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (system_id_control_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (system_id_control_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (system_id_control_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (system_id_control_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (system_id_control_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (system_id_control_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (system_id_control_slave_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (system_id_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (system_id_control_slave_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (system_id_control_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (system_id_control_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (system_id_control_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                    //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                      //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) system_id_control_slave_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                          //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),         // clk_reset.reset
		.in_data           (system_id_control_slave_agent_rf_source_data),             //        in.data
		.in_valid          (system_id_control_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (system_id_control_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (system_id_control_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (system_id_control_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (system_id_control_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (system_id_control_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (system_id_control_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (system_id_control_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (system_id_control_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                    // (terminated)
		.csr_read          (1'b0),                                                     // (terminated)
		.csr_write         (1'b0),                                                     // (terminated)
		.csr_readdata      (),                                                         // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                     // (terminated)
		.almost_full_data  (),                                                         // (terminated)
		.almost_empty_data (),                                                         // (terminated)
		.in_empty          (1'b0),                                                     // (terminated)
		.out_empty         (),                                                         // (terminated)
		.in_error          (1'b0),                                                     // (terminated)
		.out_error         (),                                                         // (terminated)
		.in_channel        (1'b0),                                                     // (terminated)
		.out_channel       ()                                                          // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) ted_encryptor_csr_agent (
		.clk                     (sys_clk_clk_clk),                                    //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (ted_encryptor_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (ted_encryptor_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (ted_encryptor_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (ted_encryptor_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (ted_encryptor_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (ted_encryptor_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (ted_encryptor_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (ted_encryptor_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (ted_encryptor_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (ted_encryptor_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (ted_encryptor_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (ted_encryptor_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (ted_encryptor_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (ted_encryptor_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (ted_encryptor_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (ted_encryptor_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_006_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_006_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_006_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_006_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_006_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_006_src_channel),                            //                .channel
		.rf_sink_ready           (ted_encryptor_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (ted_encryptor_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (ted_encryptor_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (ted_encryptor_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (ted_encryptor_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (ted_encryptor_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (ted_encryptor_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (ted_encryptor_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (ted_encryptor_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (ted_encryptor_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (ted_encryptor_csr_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ted_encryptor_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (ted_encryptor_csr_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (ted_encryptor_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ted_encryptor_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (ted_encryptor_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ted_encryptor_csr_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                    //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (ted_encryptor_csr_agent_rf_source_data),             //        in.data
		.in_valid          (ted_encryptor_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (ted_encryptor_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ted_encryptor_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ted_encryptor_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ted_encryptor_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ted_encryptor_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ted_encryptor_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ted_encryptor_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ted_encryptor_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) ted_decryptor_csr_agent (
		.clk                     (sys_clk_clk_clk),                                    //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (ted_decryptor_csr_agent_m0_address),                 //              m0.address
		.m0_burstcount           (ted_decryptor_csr_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (ted_decryptor_csr_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (ted_decryptor_csr_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (ted_decryptor_csr_agent_m0_lock),                    //                .lock
		.m0_readdata             (ted_decryptor_csr_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (ted_decryptor_csr_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (ted_decryptor_csr_agent_m0_read),                    //                .read
		.m0_waitrequest          (ted_decryptor_csr_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (ted_decryptor_csr_agent_m0_writedata),               //                .writedata
		.m0_write                (ted_decryptor_csr_agent_m0_write),                   //                .write
		.rp_endofpacket          (ted_decryptor_csr_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (ted_decryptor_csr_agent_rp_ready),                   //                .ready
		.rp_valid                (ted_decryptor_csr_agent_rp_valid),                   //                .valid
		.rp_data                 (ted_decryptor_csr_agent_rp_data),                    //                .data
		.rp_startofpacket        (ted_decryptor_csr_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_007_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_007_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_007_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_007_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_007_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_007_src_channel),                            //                .channel
		.rf_sink_ready           (ted_decryptor_csr_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (ted_decryptor_csr_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (ted_decryptor_csr_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (ted_decryptor_csr_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (ted_decryptor_csr_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (ted_decryptor_csr_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (ted_decryptor_csr_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (ted_decryptor_csr_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (ted_decryptor_csr_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (ted_decryptor_csr_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (ted_decryptor_csr_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (ted_decryptor_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (ted_decryptor_csr_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (ted_decryptor_csr_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (ted_decryptor_csr_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (ted_decryptor_csr_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) ted_decryptor_csr_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                    //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (ted_decryptor_csr_agent_rf_source_data),             //        in.data
		.in_valid          (ted_decryptor_csr_agent_rf_source_valid),            //          .valid
		.in_ready          (ted_decryptor_csr_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (ted_decryptor_csr_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (ted_decryptor_csr_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (ted_decryptor_csr_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (ted_decryptor_csr_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (ted_decryptor_csr_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (ted_decryptor_csr_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (ted_decryptor_csr_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) red_rx_csr_agent (
		.clk                     (sys_clk_clk_clk),                                  //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (red_rx_csr_agent_m0_address),                      //              m0.address
		.m0_burstcount           (red_rx_csr_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (red_rx_csr_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (red_rx_csr_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (red_rx_csr_agent_m0_lock),                         //                .lock
		.m0_readdata             (red_rx_csr_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (red_rx_csr_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (red_rx_csr_agent_m0_read),                         //                .read
		.m0_waitrequest          (red_rx_csr_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (red_rx_csr_agent_m0_writedata),                    //                .writedata
		.m0_write                (red_rx_csr_agent_m0_write),                        //                .write
		.rp_endofpacket          (red_rx_csr_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (red_rx_csr_agent_rp_ready),                        //                .ready
		.rp_valid                (red_rx_csr_agent_rp_valid),                        //                .valid
		.rp_data                 (red_rx_csr_agent_rp_data),                         //                .data
		.rp_startofpacket        (red_rx_csr_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_008_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_008_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_008_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_008_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_008_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_008_src_channel),                          //                .channel
		.rf_sink_ready           (red_rx_csr_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (red_rx_csr_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (red_rx_csr_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (red_rx_csr_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (red_rx_csr_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (red_rx_csr_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (red_rx_csr_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (red_rx_csr_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (red_rx_csr_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (red_rx_csr_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (red_rx_csr_agent_rdata_fifo_src_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (red_rx_csr_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_sink_data    (red_rx_csr_agent_rdata_fifo_src_data),             //                .data
		.rdata_fifo_src_ready    (red_rx_csr_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (red_rx_csr_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (red_rx_csr_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) red_rx_csr_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                  //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (red_rx_csr_agent_rf_source_data),                  //        in.data
		.in_valid          (red_rx_csr_agent_rf_source_valid),                 //          .valid
		.in_ready          (red_rx_csr_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (red_rx_csr_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (red_rx_csr_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (red_rx_csr_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (red_rx_csr_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (red_rx_csr_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (red_rx_csr_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (red_rx_csr_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) red_tx_csr_agent (
		.clk                     (sys_clk_clk_clk),                                  //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (red_tx_csr_agent_m0_address),                      //              m0.address
		.m0_burstcount           (red_tx_csr_agent_m0_burstcount),                   //                .burstcount
		.m0_byteenable           (red_tx_csr_agent_m0_byteenable),                   //                .byteenable
		.m0_debugaccess          (red_tx_csr_agent_m0_debugaccess),                  //                .debugaccess
		.m0_lock                 (red_tx_csr_agent_m0_lock),                         //                .lock
		.m0_readdata             (red_tx_csr_agent_m0_readdata),                     //                .readdata
		.m0_readdatavalid        (red_tx_csr_agent_m0_readdatavalid),                //                .readdatavalid
		.m0_read                 (red_tx_csr_agent_m0_read),                         //                .read
		.m0_waitrequest          (red_tx_csr_agent_m0_waitrequest),                  //                .waitrequest
		.m0_writedata            (red_tx_csr_agent_m0_writedata),                    //                .writedata
		.m0_write                (red_tx_csr_agent_m0_write),                        //                .write
		.rp_endofpacket          (red_tx_csr_agent_rp_endofpacket),                  //              rp.endofpacket
		.rp_ready                (red_tx_csr_agent_rp_ready),                        //                .ready
		.rp_valid                (red_tx_csr_agent_rp_valid),                        //                .valid
		.rp_data                 (red_tx_csr_agent_rp_data),                         //                .data
		.rp_startofpacket        (red_tx_csr_agent_rp_startofpacket),                //                .startofpacket
		.cp_ready                (cmd_mux_009_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_009_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_009_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_009_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_009_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_009_src_channel),                          //                .channel
		.rf_sink_ready           (red_tx_csr_agent_rsp_fifo_out_ready),              //         rf_sink.ready
		.rf_sink_valid           (red_tx_csr_agent_rsp_fifo_out_valid),              //                .valid
		.rf_sink_startofpacket   (red_tx_csr_agent_rsp_fifo_out_startofpacket),      //                .startofpacket
		.rf_sink_endofpacket     (red_tx_csr_agent_rsp_fifo_out_endofpacket),        //                .endofpacket
		.rf_sink_data            (red_tx_csr_agent_rsp_fifo_out_data),               //                .data
		.rf_source_ready         (red_tx_csr_agent_rf_source_ready),                 //       rf_source.ready
		.rf_source_valid         (red_tx_csr_agent_rf_source_valid),                 //                .valid
		.rf_source_startofpacket (red_tx_csr_agent_rf_source_startofpacket),         //                .startofpacket
		.rf_source_endofpacket   (red_tx_csr_agent_rf_source_endofpacket),           //                .endofpacket
		.rf_source_data          (red_tx_csr_agent_rf_source_data),                  //                .data
		.rdata_fifo_sink_ready   (red_tx_csr_agent_rdata_fifo_src_ready),            // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (red_tx_csr_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_sink_data    (red_tx_csr_agent_rdata_fifo_src_data),             //                .data
		.rdata_fifo_src_ready    (red_tx_csr_agent_rdata_fifo_src_ready),            //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (red_tx_csr_agent_rdata_fifo_src_valid),            //                .valid
		.rdata_fifo_src_data     (red_tx_csr_agent_rdata_fifo_src_data),             //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) red_tx_csr_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                  //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (red_tx_csr_agent_rf_source_data),                  //        in.data
		.in_valid          (red_tx_csr_agent_rf_source_valid),                 //          .valid
		.in_ready          (red_tx_csr_agent_rf_source_ready),                 //          .ready
		.in_startofpacket  (red_tx_csr_agent_rf_source_startofpacket),         //          .startofpacket
		.in_endofpacket    (red_tx_csr_agent_rf_source_endofpacket),           //          .endofpacket
		.out_data          (red_tx_csr_agent_rsp_fifo_out_data),               //       out.data
		.out_valid         (red_tx_csr_agent_rsp_fifo_out_valid),              //          .valid
		.out_ready         (red_tx_csr_agent_rsp_fifo_out_ready),              //          .ready
		.out_startofpacket (red_tx_csr_agent_rsp_fifo_out_startofpacket),      //          .startofpacket
		.out_endofpacket   (red_tx_csr_agent_rsp_fifo_out_endofpacket),        //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) black_rx_csr_agent (
		.clk                     (sys_clk_clk_clk),                                  //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (black_rx_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (black_rx_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (black_rx_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (black_rx_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (black_rx_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (black_rx_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (black_rx_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (black_rx_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (black_rx_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (black_rx_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (black_rx_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (black_rx_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (black_rx_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (black_rx_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (black_rx_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (black_rx_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_010_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_010_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_010_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_010_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_010_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_010_src_channel),                          //                .channel
		.rf_sink_ready           (black_rx_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (black_rx_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (black_rx_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (black_rx_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (black_rx_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (black_rx_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (black_rx_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (black_rx_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (black_rx_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (black_rx_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (black_rx_csr_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (black_rx_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (black_rx_csr_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (black_rx_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (black_rx_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (black_rx_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) black_rx_csr_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                  //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (black_rx_csr_agent_rf_source_data),                //        in.data
		.in_valid          (black_rx_csr_agent_rf_source_valid),               //          .valid
		.in_ready          (black_rx_csr_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (black_rx_csr_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (black_rx_csr_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (black_rx_csr_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (black_rx_csr_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (black_rx_csr_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (black_rx_csr_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (black_rx_csr_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) black_tx_csr_agent (
		.clk                     (sys_clk_clk_clk),                                  //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (black_tx_csr_agent_m0_address),                    //              m0.address
		.m0_burstcount           (black_tx_csr_agent_m0_burstcount),                 //                .burstcount
		.m0_byteenable           (black_tx_csr_agent_m0_byteenable),                 //                .byteenable
		.m0_debugaccess          (black_tx_csr_agent_m0_debugaccess),                //                .debugaccess
		.m0_lock                 (black_tx_csr_agent_m0_lock),                       //                .lock
		.m0_readdata             (black_tx_csr_agent_m0_readdata),                   //                .readdata
		.m0_readdatavalid        (black_tx_csr_agent_m0_readdatavalid),              //                .readdatavalid
		.m0_read                 (black_tx_csr_agent_m0_read),                       //                .read
		.m0_waitrequest          (black_tx_csr_agent_m0_waitrequest),                //                .waitrequest
		.m0_writedata            (black_tx_csr_agent_m0_writedata),                  //                .writedata
		.m0_write                (black_tx_csr_agent_m0_write),                      //                .write
		.rp_endofpacket          (black_tx_csr_agent_rp_endofpacket),                //              rp.endofpacket
		.rp_ready                (black_tx_csr_agent_rp_ready),                      //                .ready
		.rp_valid                (black_tx_csr_agent_rp_valid),                      //                .valid
		.rp_data                 (black_tx_csr_agent_rp_data),                       //                .data
		.rp_startofpacket        (black_tx_csr_agent_rp_startofpacket),              //                .startofpacket
		.cp_ready                (cmd_mux_011_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_011_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_011_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_011_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_011_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_011_src_channel),                          //                .channel
		.rf_sink_ready           (black_tx_csr_agent_rsp_fifo_out_ready),            //         rf_sink.ready
		.rf_sink_valid           (black_tx_csr_agent_rsp_fifo_out_valid),            //                .valid
		.rf_sink_startofpacket   (black_tx_csr_agent_rsp_fifo_out_startofpacket),    //                .startofpacket
		.rf_sink_endofpacket     (black_tx_csr_agent_rsp_fifo_out_endofpacket),      //                .endofpacket
		.rf_sink_data            (black_tx_csr_agent_rsp_fifo_out_data),             //                .data
		.rf_source_ready         (black_tx_csr_agent_rf_source_ready),               //       rf_source.ready
		.rf_source_valid         (black_tx_csr_agent_rf_source_valid),               //                .valid
		.rf_source_startofpacket (black_tx_csr_agent_rf_source_startofpacket),       //                .startofpacket
		.rf_source_endofpacket   (black_tx_csr_agent_rf_source_endofpacket),         //                .endofpacket
		.rf_source_data          (black_tx_csr_agent_rf_source_data),                //                .data
		.rdata_fifo_sink_ready   (black_tx_csr_agent_rdata_fifo_src_ready),          // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (black_tx_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_sink_data    (black_tx_csr_agent_rdata_fifo_src_data),           //                .data
		.rdata_fifo_src_ready    (black_tx_csr_agent_rdata_fifo_src_ready),          //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (black_tx_csr_agent_rdata_fifo_src_valid),          //                .valid
		.rdata_fifo_src_data     (black_tx_csr_agent_rdata_fifo_src_data),           //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) black_tx_csr_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                  //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (black_tx_csr_agent_rf_source_data),                //        in.data
		.in_valid          (black_tx_csr_agent_rf_source_valid),               //          .valid
		.in_ready          (black_tx_csr_agent_rf_source_ready),               //          .ready
		.in_startofpacket  (black_tx_csr_agent_rf_source_startofpacket),       //          .startofpacket
		.in_endofpacket    (black_tx_csr_agent_rf_source_endofpacket),         //          .endofpacket
		.out_data          (black_tx_csr_agent_rsp_fifo_out_data),             //       out.data
		.out_valid         (black_tx_csr_agent_rsp_fifo_out_valid),            //          .valid
		.out_ready         (black_tx_csr_agent_rsp_fifo_out_ready),            //          .ready
		.out_startofpacket (black_tx_csr_agent_rsp_fifo_out_startofpacket),    //          .startofpacket
		.out_endofpacket   (black_tx_csr_agent_rsp_fifo_out_endofpacket),      //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) nios2_qsys_0_jtag_debug_module_agent (
		.clk                     (sys_clk_clk_clk),                                                 //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                //       clk_reset.reset
		.m0_address              (nios2_qsys_0_jtag_debug_module_agent_m0_address),                 //              m0.address
		.m0_burstcount           (nios2_qsys_0_jtag_debug_module_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (nios2_qsys_0_jtag_debug_module_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (nios2_qsys_0_jtag_debug_module_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (nios2_qsys_0_jtag_debug_module_agent_m0_lock),                    //                .lock
		.m0_readdata             (nios2_qsys_0_jtag_debug_module_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (nios2_qsys_0_jtag_debug_module_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (nios2_qsys_0_jtag_debug_module_agent_m0_read),                    //                .read
		.m0_waitrequest          (nios2_qsys_0_jtag_debug_module_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (nios2_qsys_0_jtag_debug_module_agent_m0_writedata),               //                .writedata
		.m0_write                (nios2_qsys_0_jtag_debug_module_agent_m0_write),                   //                .write
		.rp_endofpacket          (nios2_qsys_0_jtag_debug_module_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (nios2_qsys_0_jtag_debug_module_agent_rp_ready),                   //                .ready
		.rp_valid                (nios2_qsys_0_jtag_debug_module_agent_rp_valid),                   //                .valid
		.rp_data                 (nios2_qsys_0_jtag_debug_module_agent_rp_data),                    //                .data
		.rp_startofpacket        (nios2_qsys_0_jtag_debug_module_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_012_src_ready),                                           //              cp.ready
		.cp_valid                (cmd_mux_012_src_valid),                                           //                .valid
		.cp_data                 (cmd_mux_012_src_data),                                            //                .data
		.cp_startofpacket        (cmd_mux_012_src_startofpacket),                                   //                .startofpacket
		.cp_endofpacket          (cmd_mux_012_src_endofpacket),                                     //                .endofpacket
		.cp_channel              (cmd_mux_012_src_channel),                                         //                .channel
		.rf_sink_ready           (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (nios2_qsys_0_jtag_debug_module_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (nios2_qsys_0_jtag_debug_module_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (nios2_qsys_0_jtag_debug_module_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (nios2_qsys_0_jtag_debug_module_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (nios2_qsys_0_jtag_debug_module_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (nios2_qsys_0_jtag_debug_module_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                           //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                             //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) nios2_qsys_0_jtag_debug_module_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                                 //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),                // clk_reset.reset
		.in_data           (nios2_qsys_0_jtag_debug_module_agent_rf_source_data),             //        in.data
		.in_valid          (nios2_qsys_0_jtag_debug_module_agent_rf_source_valid),            //          .valid
		.in_ready          (nios2_qsys_0_jtag_debug_module_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (nios2_qsys_0_jtag_debug_module_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (nios2_qsys_0_jtag_debug_module_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (nios2_qsys_0_jtag_debug_module_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                           // (terminated)
		.csr_read          (1'b0),                                                            // (terminated)
		.csr_write         (1'b0),                                                            // (terminated)
		.csr_readdata      (),                                                                // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                            // (terminated)
		.almost_full_data  (),                                                                // (terminated)
		.almost_empty_data (),                                                                // (terminated)
		.in_empty          (1'b0),                                                            // (terminated)
		.out_empty         (),                                                                // (terminated)
		.in_error          (1'b0),                                                            // (terminated)
		.out_error         (),                                                                // (terminated)
		.in_channel        (1'b0),                                                            // (terminated)
		.out_channel       ()                                                                 // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) lcd_clk_pll_slave_agent (
		.clk                     (sys_clk_clk_clk),                                    //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (lcd_clk_pll_slave_agent_m0_address),                 //              m0.address
		.m0_burstcount           (lcd_clk_pll_slave_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (lcd_clk_pll_slave_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (lcd_clk_pll_slave_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (lcd_clk_pll_slave_agent_m0_lock),                    //                .lock
		.m0_readdata             (lcd_clk_pll_slave_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (lcd_clk_pll_slave_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (lcd_clk_pll_slave_agent_m0_read),                    //                .read
		.m0_waitrequest          (lcd_clk_pll_slave_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (lcd_clk_pll_slave_agent_m0_writedata),               //                .writedata
		.m0_write                (lcd_clk_pll_slave_agent_m0_write),                   //                .write
		.rp_endofpacket          (lcd_clk_pll_slave_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (lcd_clk_pll_slave_agent_rp_ready),                   //                .ready
		.rp_valid                (lcd_clk_pll_slave_agent_rp_valid),                   //                .valid
		.rp_data                 (lcd_clk_pll_slave_agent_rp_data),                    //                .data
		.rp_startofpacket        (lcd_clk_pll_slave_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_013_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_013_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_013_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_013_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_013_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_013_src_channel),                            //                .channel
		.rf_sink_ready           (lcd_clk_pll_slave_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (lcd_clk_pll_slave_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (lcd_clk_pll_slave_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (lcd_clk_pll_slave_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (lcd_clk_pll_slave_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (lcd_clk_pll_slave_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (lcd_clk_pll_slave_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (lcd_clk_pll_slave_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (lcd_clk_pll_slave_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (lcd_clk_pll_slave_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (lcd_clk_pll_slave_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (lcd_clk_pll_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (lcd_clk_pll_slave_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (lcd_clk_pll_slave_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (lcd_clk_pll_slave_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (lcd_clk_pll_slave_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) lcd_clk_pll_slave_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                    //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (lcd_clk_pll_slave_agent_rf_source_data),             //        in.data
		.in_valid          (lcd_clk_pll_slave_agent_rf_source_valid),            //          .valid
		.in_ready          (lcd_clk_pll_slave_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (lcd_clk_pll_slave_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (lcd_clk_pll_slave_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (lcd_clk_pll_slave_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (lcd_clk_pll_slave_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (lcd_clk_pll_slave_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (lcd_clk_pll_slave_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (lcd_clk_pll_slave_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) output_port_s1_agent (
		.clk                     (sys_clk_clk_clk),                                  //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (output_port_s1_agent_m0_address),                  //              m0.address
		.m0_burstcount           (output_port_s1_agent_m0_burstcount),               //                .burstcount
		.m0_byteenable           (output_port_s1_agent_m0_byteenable),               //                .byteenable
		.m0_debugaccess          (output_port_s1_agent_m0_debugaccess),              //                .debugaccess
		.m0_lock                 (output_port_s1_agent_m0_lock),                     //                .lock
		.m0_readdata             (output_port_s1_agent_m0_readdata),                 //                .readdata
		.m0_readdatavalid        (output_port_s1_agent_m0_readdatavalid),            //                .readdatavalid
		.m0_read                 (output_port_s1_agent_m0_read),                     //                .read
		.m0_waitrequest          (output_port_s1_agent_m0_waitrequest),              //                .waitrequest
		.m0_writedata            (output_port_s1_agent_m0_writedata),                //                .writedata
		.m0_write                (output_port_s1_agent_m0_write),                    //                .write
		.rp_endofpacket          (output_port_s1_agent_rp_endofpacket),              //              rp.endofpacket
		.rp_ready                (output_port_s1_agent_rp_ready),                    //                .ready
		.rp_valid                (output_port_s1_agent_rp_valid),                    //                .valid
		.rp_data                 (output_port_s1_agent_rp_data),                     //                .data
		.rp_startofpacket        (output_port_s1_agent_rp_startofpacket),            //                .startofpacket
		.cp_ready                (cmd_mux_014_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_014_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_014_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_014_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_014_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_014_src_channel),                          //                .channel
		.rf_sink_ready           (output_port_s1_agent_rsp_fifo_out_ready),          //         rf_sink.ready
		.rf_sink_valid           (output_port_s1_agent_rsp_fifo_out_valid),          //                .valid
		.rf_sink_startofpacket   (output_port_s1_agent_rsp_fifo_out_startofpacket),  //                .startofpacket
		.rf_sink_endofpacket     (output_port_s1_agent_rsp_fifo_out_endofpacket),    //                .endofpacket
		.rf_sink_data            (output_port_s1_agent_rsp_fifo_out_data),           //                .data
		.rf_source_ready         (output_port_s1_agent_rf_source_ready),             //       rf_source.ready
		.rf_source_valid         (output_port_s1_agent_rf_source_valid),             //                .valid
		.rf_source_startofpacket (output_port_s1_agent_rf_source_startofpacket),     //                .startofpacket
		.rf_source_endofpacket   (output_port_s1_agent_rf_source_endofpacket),       //                .endofpacket
		.rf_source_data          (output_port_s1_agent_rf_source_data),              //                .data
		.rdata_fifo_sink_ready   (output_port_s1_agent_rdata_fifo_src_ready),        // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (output_port_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_sink_data    (output_port_s1_agent_rdata_fifo_src_data),         //                .data
		.rdata_fifo_src_ready    (output_port_s1_agent_rdata_fifo_src_ready),        //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (output_port_s1_agent_rdata_fifo_src_valid),        //                .valid
		.rdata_fifo_src_data     (output_port_s1_agent_rdata_fifo_src_data),         //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) output_port_s1_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                  //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (output_port_s1_agent_rf_source_data),              //        in.data
		.in_valid          (output_port_s1_agent_rf_source_valid),             //          .valid
		.in_ready          (output_port_s1_agent_rf_source_ready),             //          .ready
		.in_startofpacket  (output_port_s1_agent_rf_source_startofpacket),     //          .startofpacket
		.in_endofpacket    (output_port_s1_agent_rf_source_endofpacket),       //          .endofpacket
		.out_data          (output_port_s1_agent_rsp_fifo_out_data),           //       out.data
		.out_valid         (output_port_s1_agent_rsp_fifo_out_valid),          //          .valid
		.out_ready         (output_port_s1_agent_rsp_fifo_out_ready),          //          .ready
		.out_startofpacket (output_port_s1_agent_rsp_fifo_out_startofpacket),  //          .startofpacket
		.out_endofpacket   (output_port_s1_agent_rsp_fifo_out_endofpacket),    //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) input_port_s1_agent (
		.clk                     (sys_clk_clk_clk),                                  //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (input_port_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (input_port_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (input_port_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (input_port_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (input_port_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (input_port_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (input_port_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (input_port_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (input_port_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (input_port_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (input_port_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (input_port_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (input_port_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (input_port_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (input_port_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (input_port_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_015_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_015_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_015_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_015_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_015_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_015_src_channel),                          //                .channel
		.rf_sink_ready           (input_port_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (input_port_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (input_port_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (input_port_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (input_port_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (input_port_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (input_port_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (input_port_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (input_port_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (input_port_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (input_port_s1_agent_rdata_fifo_src_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (input_port_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_sink_data    (input_port_s1_agent_rdata_fifo_src_data),          //                .data
		.rdata_fifo_src_ready    (input_port_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (input_port_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (input_port_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) input_port_s1_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                  //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (input_port_s1_agent_rf_source_data),               //        in.data
		.in_valid          (input_port_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (input_port_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (input_port_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (input_port_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (input_port_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (input_port_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (input_port_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (input_port_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (input_port_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) instruction_memory_s1_agent (
		.clk                     (sys_clk_clk_clk),                                        //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),       //       clk_reset.reset
		.m0_address              (instruction_memory_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (instruction_memory_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (instruction_memory_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (instruction_memory_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (instruction_memory_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (instruction_memory_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (instruction_memory_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (instruction_memory_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (instruction_memory_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (instruction_memory_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (instruction_memory_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (instruction_memory_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (instruction_memory_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (instruction_memory_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (instruction_memory_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (instruction_memory_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_016_src_ready),                                  //              cp.ready
		.cp_valid                (cmd_mux_016_src_valid),                                  //                .valid
		.cp_data                 (cmd_mux_016_src_data),                                   //                .data
		.cp_startofpacket        (cmd_mux_016_src_startofpacket),                          //                .startofpacket
		.cp_endofpacket          (cmd_mux_016_src_endofpacket),                            //                .endofpacket
		.cp_channel              (cmd_mux_016_src_channel),                                //                .channel
		.rf_sink_ready           (instruction_memory_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (instruction_memory_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (instruction_memory_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (instruction_memory_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (instruction_memory_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (instruction_memory_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (instruction_memory_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (instruction_memory_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (instruction_memory_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (instruction_memory_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (instruction_memory_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (instruction_memory_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (instruction_memory_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (instruction_memory_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (instruction_memory_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (instruction_memory_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                  //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                    //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) instruction_memory_s1_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                        //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.in_data           (instruction_memory_s1_agent_rf_source_data),             //        in.data
		.in_valid          (instruction_memory_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (instruction_memory_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (instruction_memory_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (instruction_memory_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (instruction_memory_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (instruction_memory_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (instruction_memory_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (instruction_memory_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (instruction_memory_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                  // (terminated)
		.csr_read          (1'b0),                                                   // (terminated)
		.csr_write         (1'b0),                                                   // (terminated)
		.csr_readdata      (),                                                       // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                   // (terminated)
		.almost_full_data  (),                                                       // (terminated)
		.almost_empty_data (),                                                       // (terminated)
		.in_empty          (1'b0),                                                   // (terminated)
		.out_empty         (),                                                       // (terminated)
		.in_error          (1'b0),                                                   // (terminated)
		.out_error         (),                                                       // (terminated)
		.in_channel        (1'b0),                                                   // (terminated)
		.out_channel       ()                                                        // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) heap_stack_s1_agent (
		.clk                     (sys_clk_clk_clk),                                  //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (heap_stack_s1_agent_m0_address),                   //              m0.address
		.m0_burstcount           (heap_stack_s1_agent_m0_burstcount),                //                .burstcount
		.m0_byteenable           (heap_stack_s1_agent_m0_byteenable),                //                .byteenable
		.m0_debugaccess          (heap_stack_s1_agent_m0_debugaccess),               //                .debugaccess
		.m0_lock                 (heap_stack_s1_agent_m0_lock),                      //                .lock
		.m0_readdata             (heap_stack_s1_agent_m0_readdata),                  //                .readdata
		.m0_readdatavalid        (heap_stack_s1_agent_m0_readdatavalid),             //                .readdatavalid
		.m0_read                 (heap_stack_s1_agent_m0_read),                      //                .read
		.m0_waitrequest          (heap_stack_s1_agent_m0_waitrequest),               //                .waitrequest
		.m0_writedata            (heap_stack_s1_agent_m0_writedata),                 //                .writedata
		.m0_write                (heap_stack_s1_agent_m0_write),                     //                .write
		.rp_endofpacket          (heap_stack_s1_agent_rp_endofpacket),               //              rp.endofpacket
		.rp_ready                (heap_stack_s1_agent_rp_ready),                     //                .ready
		.rp_valid                (heap_stack_s1_agent_rp_valid),                     //                .valid
		.rp_data                 (heap_stack_s1_agent_rp_data),                      //                .data
		.rp_startofpacket        (heap_stack_s1_agent_rp_startofpacket),             //                .startofpacket
		.cp_ready                (cmd_mux_017_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_017_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_017_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_017_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_017_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_017_src_channel),                          //                .channel
		.rf_sink_ready           (heap_stack_s1_agent_rsp_fifo_out_ready),           //         rf_sink.ready
		.rf_sink_valid           (heap_stack_s1_agent_rsp_fifo_out_valid),           //                .valid
		.rf_sink_startofpacket   (heap_stack_s1_agent_rsp_fifo_out_startofpacket),   //                .startofpacket
		.rf_sink_endofpacket     (heap_stack_s1_agent_rsp_fifo_out_endofpacket),     //                .endofpacket
		.rf_sink_data            (heap_stack_s1_agent_rsp_fifo_out_data),            //                .data
		.rf_source_ready         (heap_stack_s1_agent_rf_source_ready),              //       rf_source.ready
		.rf_source_valid         (heap_stack_s1_agent_rf_source_valid),              //                .valid
		.rf_source_startofpacket (heap_stack_s1_agent_rf_source_startofpacket),      //                .startofpacket
		.rf_source_endofpacket   (heap_stack_s1_agent_rf_source_endofpacket),        //                .endofpacket
		.rf_source_data          (heap_stack_s1_agent_rf_source_data),               //                .data
		.rdata_fifo_sink_ready   (heap_stack_s1_agent_rdata_fifo_src_ready),         // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (heap_stack_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_sink_data    (heap_stack_s1_agent_rdata_fifo_src_data),          //                .data
		.rdata_fifo_src_ready    (heap_stack_s1_agent_rdata_fifo_src_ready),         //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (heap_stack_s1_agent_rdata_fifo_src_valid),         //                .valid
		.rdata_fifo_src_data     (heap_stack_s1_agent_rdata_fifo_src_data),          //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) heap_stack_s1_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                  //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (heap_stack_s1_agent_rf_source_data),               //        in.data
		.in_valid          (heap_stack_s1_agent_rf_source_valid),              //          .valid
		.in_ready          (heap_stack_s1_agent_rf_source_ready),              //          .ready
		.in_startofpacket  (heap_stack_s1_agent_rf_source_startofpacket),      //          .startofpacket
		.in_endofpacket    (heap_stack_s1_agent_rf_source_endofpacket),        //          .endofpacket
		.out_data          (heap_stack_s1_agent_rsp_fifo_out_data),            //       out.data
		.out_valid         (heap_stack_s1_agent_rsp_fifo_out_valid),           //          .valid
		.out_ready         (heap_stack_s1_agent_rsp_fifo_out_ready),           //          .ready
		.out_startofpacket (heap_stack_s1_agent_rsp_fifo_out_startofpacket),   //          .startofpacket
		.out_endofpacket   (heap_stack_s1_agent_rsp_fifo_out_endofpacket),     //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) system_timer_s1_agent (
		.clk                     (sys_clk_clk_clk),                                  //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //       clk_reset.reset
		.m0_address              (system_timer_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (system_timer_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (system_timer_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (system_timer_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (system_timer_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (system_timer_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (system_timer_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (system_timer_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (system_timer_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (system_timer_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (system_timer_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (system_timer_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (system_timer_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (system_timer_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (system_timer_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (system_timer_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_018_src_ready),                            //              cp.ready
		.cp_valid                (cmd_mux_018_src_valid),                            //                .valid
		.cp_data                 (cmd_mux_018_src_data),                             //                .data
		.cp_startofpacket        (cmd_mux_018_src_startofpacket),                    //                .startofpacket
		.cp_endofpacket          (cmd_mux_018_src_endofpacket),                      //                .endofpacket
		.cp_channel              (cmd_mux_018_src_channel),                          //                .channel
		.rf_sink_ready           (system_timer_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (system_timer_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (system_timer_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (system_timer_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (system_timer_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (system_timer_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (system_timer_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (system_timer_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (system_timer_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (system_timer_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (system_timer_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (system_timer_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (system_timer_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (system_timer_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (system_timer_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (system_timer_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                            //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                              //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) system_timer_s1_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                  //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.in_data           (system_timer_s1_agent_rf_source_data),             //        in.data
		.in_valid          (system_timer_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (system_timer_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (system_timer_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (system_timer_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (system_timer_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (system_timer_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (system_timer_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (system_timer_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (system_timer_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                            // (terminated)
		.csr_read          (1'b0),                                             // (terminated)
		.csr_write         (1'b0),                                             // (terminated)
		.csr_readdata      (),                                                 // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),             // (terminated)
		.almost_full_data  (),                                                 // (terminated)
		.almost_empty_data (),                                                 // (terminated)
		.in_empty          (1'b0),                                             // (terminated)
		.out_empty         (),                                                 // (terminated)
		.in_error          (1'b0),                                             // (terminated)
		.out_error         (),                                                 // (terminated)
		.in_channel        (1'b0),                                             // (terminated)
		.out_channel       ()                                                  // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) red_to_black_memory_s1_agent (
		.clk                     (sys_clk_clk_clk),                                         //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (red_to_black_memory_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (red_to_black_memory_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (red_to_black_memory_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (red_to_black_memory_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (red_to_black_memory_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (red_to_black_memory_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (red_to_black_memory_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (red_to_black_memory_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (red_to_black_memory_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (red_to_black_memory_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (red_to_black_memory_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (red_to_black_memory_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (red_to_black_memory_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (red_to_black_memory_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (red_to_black_memory_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (red_to_black_memory_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_019_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_019_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_019_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_019_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_019_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_019_src_channel),                                 //                .channel
		.rf_sink_ready           (red_to_black_memory_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (red_to_black_memory_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (red_to_black_memory_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (red_to_black_memory_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (red_to_black_memory_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (red_to_black_memory_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (red_to_black_memory_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (red_to_black_memory_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (red_to_black_memory_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (red_to_black_memory_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (red_to_black_memory_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (red_to_black_memory_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (red_to_black_memory_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (red_to_black_memory_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (red_to_black_memory_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (red_to_black_memory_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) red_to_black_memory_s1_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                         //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (red_to_black_memory_s1_agent_rf_source_data),             //        in.data
		.in_valid          (red_to_black_memory_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (red_to_black_memory_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (red_to_black_memory_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (red_to_black_memory_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (red_to_black_memory_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (red_to_black_memory_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (red_to_black_memory_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (red_to_black_memory_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (red_to_black_memory_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) black_to_red_memory_s1_agent (
		.clk                     (sys_clk_clk_clk),                                         //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),        //       clk_reset.reset
		.m0_address              (black_to_red_memory_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (black_to_red_memory_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (black_to_red_memory_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (black_to_red_memory_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (black_to_red_memory_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (black_to_red_memory_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (black_to_red_memory_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (black_to_red_memory_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (black_to_red_memory_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (black_to_red_memory_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (black_to_red_memory_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (black_to_red_memory_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (black_to_red_memory_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (black_to_red_memory_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (black_to_red_memory_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (black_to_red_memory_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_020_src_ready),                                   //              cp.ready
		.cp_valid                (cmd_mux_020_src_valid),                                   //                .valid
		.cp_data                 (cmd_mux_020_src_data),                                    //                .data
		.cp_startofpacket        (cmd_mux_020_src_startofpacket),                           //                .startofpacket
		.cp_endofpacket          (cmd_mux_020_src_endofpacket),                             //                .endofpacket
		.cp_channel              (cmd_mux_020_src_channel),                                 //                .channel
		.rf_sink_ready           (black_to_red_memory_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (black_to_red_memory_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (black_to_red_memory_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (black_to_red_memory_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (black_to_red_memory_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (black_to_red_memory_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (black_to_red_memory_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (black_to_red_memory_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (black_to_red_memory_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (black_to_red_memory_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (black_to_red_memory_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (black_to_red_memory_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (black_to_red_memory_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (black_to_red_memory_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (black_to_red_memory_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (black_to_red_memory_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                                   //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                     //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) black_to_red_memory_s1_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                         //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),        // clk_reset.reset
		.in_data           (black_to_red_memory_s1_agent_rf_source_data),             //        in.data
		.in_valid          (black_to_red_memory_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (black_to_red_memory_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (black_to_red_memory_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (black_to_red_memory_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (black_to_red_memory_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (black_to_red_memory_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (black_to_red_memory_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (black_to_red_memory_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (black_to_red_memory_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                                   // (terminated)
		.csr_read          (1'b0),                                                    // (terminated)
		.csr_write         (1'b0),                                                    // (terminated)
		.csr_readdata      (),                                                        // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),                    // (terminated)
		.almost_full_data  (),                                                        // (terminated)
		.almost_empty_data (),                                                        // (terminated)
		.in_empty          (1'b0),                                                    // (terminated)
		.out_empty         (),                                                        // (terminated)
		.in_error          (1'b0),                                                    // (terminated)
		.out_error         (),                                                        // (terminated)
		.in_channel        (1'b0),                                                    // (terminated)
		.out_channel       ()                                                         // (terminated)
	);

	altera_merlin_slave_agent #(
		.PKT_ORI_BURST_SIZE_H      (111),
		.PKT_ORI_BURST_SIZE_L      (109),
		.PKT_RESPONSE_STATUS_H     (108),
		.PKT_RESPONSE_STATUS_L     (107),
		.PKT_BURST_SIZE_H          (82),
		.PKT_BURST_SIZE_L          (80),
		.PKT_TRANS_LOCK            (72),
		.PKT_BEGIN_BURST           (87),
		.PKT_PROTECTION_H          (102),
		.PKT_PROTECTION_L          (100),
		.PKT_BURSTWRAP_H           (79),
		.PKT_BURSTWRAP_L           (77),
		.PKT_BYTE_CNT_H            (76),
		.PKT_BYTE_CNT_L            (74),
		.PKT_ADDR_H                (67),
		.PKT_ADDR_L                (36),
		.PKT_TRANS_COMPRESSED_READ (68),
		.PKT_TRANS_POSTED          (69),
		.PKT_TRANS_WRITE           (70),
		.PKT_TRANS_READ            (71),
		.PKT_DATA_H                (31),
		.PKT_DATA_L                (0),
		.PKT_BYTEEN_H              (35),
		.PKT_BYTEEN_L              (32),
		.PKT_SRC_ID_H              (93),
		.PKT_SRC_ID_L              (89),
		.PKT_DEST_ID_H             (98),
		.PKT_DEST_ID_L             (94),
		.PKT_SYMBOL_W              (8),
		.ST_CHANNEL_W              (22),
		.ST_DATA_W                 (112),
		.AVS_BURSTCOUNT_W          (3),
		.SUPPRESS_0_BYTEEN_CMD     (0),
		.PREVENT_FIFO_OVERFLOW     (1),
		.USE_READRESPONSE          (0),
		.USE_WRITERESPONSE         (0)
	) descriptor_mem_s1_agent (
		.clk                     (sys_clk_clk_clk),                                    //             clk.clk
		.reset                   (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),   //       clk_reset.reset
		.m0_address              (descriptor_mem_s1_agent_m0_address),                 //              m0.address
		.m0_burstcount           (descriptor_mem_s1_agent_m0_burstcount),              //                .burstcount
		.m0_byteenable           (descriptor_mem_s1_agent_m0_byteenable),              //                .byteenable
		.m0_debugaccess          (descriptor_mem_s1_agent_m0_debugaccess),             //                .debugaccess
		.m0_lock                 (descriptor_mem_s1_agent_m0_lock),                    //                .lock
		.m0_readdata             (descriptor_mem_s1_agent_m0_readdata),                //                .readdata
		.m0_readdatavalid        (descriptor_mem_s1_agent_m0_readdatavalid),           //                .readdatavalid
		.m0_read                 (descriptor_mem_s1_agent_m0_read),                    //                .read
		.m0_waitrequest          (descriptor_mem_s1_agent_m0_waitrequest),             //                .waitrequest
		.m0_writedata            (descriptor_mem_s1_agent_m0_writedata),               //                .writedata
		.m0_write                (descriptor_mem_s1_agent_m0_write),                   //                .write
		.rp_endofpacket          (descriptor_mem_s1_agent_rp_endofpacket),             //              rp.endofpacket
		.rp_ready                (descriptor_mem_s1_agent_rp_ready),                   //                .ready
		.rp_valid                (descriptor_mem_s1_agent_rp_valid),                   //                .valid
		.rp_data                 (descriptor_mem_s1_agent_rp_data),                    //                .data
		.rp_startofpacket        (descriptor_mem_s1_agent_rp_startofpacket),           //                .startofpacket
		.cp_ready                (cmd_mux_021_src_ready),                              //              cp.ready
		.cp_valid                (cmd_mux_021_src_valid),                              //                .valid
		.cp_data                 (cmd_mux_021_src_data),                               //                .data
		.cp_startofpacket        (cmd_mux_021_src_startofpacket),                      //                .startofpacket
		.cp_endofpacket          (cmd_mux_021_src_endofpacket),                        //                .endofpacket
		.cp_channel              (cmd_mux_021_src_channel),                            //                .channel
		.rf_sink_ready           (descriptor_mem_s1_agent_rsp_fifo_out_ready),         //         rf_sink.ready
		.rf_sink_valid           (descriptor_mem_s1_agent_rsp_fifo_out_valid),         //                .valid
		.rf_sink_startofpacket   (descriptor_mem_s1_agent_rsp_fifo_out_startofpacket), //                .startofpacket
		.rf_sink_endofpacket     (descriptor_mem_s1_agent_rsp_fifo_out_endofpacket),   //                .endofpacket
		.rf_sink_data            (descriptor_mem_s1_agent_rsp_fifo_out_data),          //                .data
		.rf_source_ready         (descriptor_mem_s1_agent_rf_source_ready),            //       rf_source.ready
		.rf_source_valid         (descriptor_mem_s1_agent_rf_source_valid),            //                .valid
		.rf_source_startofpacket (descriptor_mem_s1_agent_rf_source_startofpacket),    //                .startofpacket
		.rf_source_endofpacket   (descriptor_mem_s1_agent_rf_source_endofpacket),      //                .endofpacket
		.rf_source_data          (descriptor_mem_s1_agent_rf_source_data),             //                .data
		.rdata_fifo_sink_ready   (descriptor_mem_s1_agent_rdata_fifo_src_ready),       // rdata_fifo_sink.ready
		.rdata_fifo_sink_valid   (descriptor_mem_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_sink_data    (descriptor_mem_s1_agent_rdata_fifo_src_data),        //                .data
		.rdata_fifo_src_ready    (descriptor_mem_s1_agent_rdata_fifo_src_ready),       //  rdata_fifo_src.ready
		.rdata_fifo_src_valid    (descriptor_mem_s1_agent_rdata_fifo_src_valid),       //                .valid
		.rdata_fifo_src_data     (descriptor_mem_s1_agent_rdata_fifo_src_data),        //                .data
		.m0_response             (2'b00),                                              //     (terminated)
		.m0_writeresponsevalid   (1'b0)                                                //     (terminated)
	);

	altera_avalon_sc_fifo #(
		.SYMBOLS_PER_BEAT    (1),
		.BITS_PER_SYMBOL     (113),
		.FIFO_DEPTH          (2),
		.CHANNEL_WIDTH       (0),
		.ERROR_WIDTH         (0),
		.USE_PACKETS         (1),
		.USE_FILL_LEVEL      (0),
		.EMPTY_LATENCY       (1),
		.USE_MEMORY_BLOCKS   (0),
		.USE_STORE_FORWARD   (0),
		.USE_ALMOST_FULL_IF  (0),
		.USE_ALMOST_EMPTY_IF (0)
	) descriptor_mem_s1_agent_rsp_fifo (
		.clk               (sys_clk_clk_clk),                                    //       clk.clk
		.reset             (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),   // clk_reset.reset
		.in_data           (descriptor_mem_s1_agent_rf_source_data),             //        in.data
		.in_valid          (descriptor_mem_s1_agent_rf_source_valid),            //          .valid
		.in_ready          (descriptor_mem_s1_agent_rf_source_ready),            //          .ready
		.in_startofpacket  (descriptor_mem_s1_agent_rf_source_startofpacket),    //          .startofpacket
		.in_endofpacket    (descriptor_mem_s1_agent_rf_source_endofpacket),      //          .endofpacket
		.out_data          (descriptor_mem_s1_agent_rsp_fifo_out_data),          //       out.data
		.out_valid         (descriptor_mem_s1_agent_rsp_fifo_out_valid),         //          .valid
		.out_ready         (descriptor_mem_s1_agent_rsp_fifo_out_ready),         //          .ready
		.out_startofpacket (descriptor_mem_s1_agent_rsp_fifo_out_startofpacket), //          .startofpacket
		.out_endofpacket   (descriptor_mem_s1_agent_rsp_fifo_out_endofpacket),   //          .endofpacket
		.csr_address       (2'b00),                                              // (terminated)
		.csr_read          (1'b0),                                               // (terminated)
		.csr_write         (1'b0),                                               // (terminated)
		.csr_readdata      (),                                                   // (terminated)
		.csr_writedata     (32'b00000000000000000000000000000000),               // (terminated)
		.almost_full_data  (),                                                   // (terminated)
		.almost_empty_data (),                                                   // (terminated)
		.in_empty          (1'b0),                                               // (terminated)
		.out_empty         (),                                                   // (terminated)
		.in_error          (1'b0),                                               // (terminated)
		.out_error         (),                                                   // (terminated)
		.in_channel        (1'b0),                                               // (terminated)
		.out_channel       ()                                                    // (terminated)
	);

	TEDv3_architecture_mm_interconnect_0_router router (
		.sink_ready         (nios2_qsys_0_data_master_agent_cp_ready),          //      sink.ready
		.sink_valid         (nios2_qsys_0_data_master_agent_cp_valid),          //          .valid
		.sink_data          (nios2_qsys_0_data_master_agent_cp_data),           //          .data
		.sink_startofpacket (nios2_qsys_0_data_master_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (nios2_qsys_0_data_master_agent_cp_endofpacket),    //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_src_ready),                                 //       src.ready
		.src_valid          (router_src_valid),                                 //          .valid
		.src_data           (router_src_data),                                  //          .data
		.src_channel        (router_src_channel),                               //          .channel
		.src_startofpacket  (router_src_startofpacket),                         //          .startofpacket
		.src_endofpacket    (router_src_endofpacket)                            //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_001 router_001 (
		.sink_ready         (red_rx_descriptor_read_agent_cp_ready),            //      sink.ready
		.sink_valid         (red_rx_descriptor_read_agent_cp_valid),            //          .valid
		.sink_data          (red_rx_descriptor_read_agent_cp_data),             //          .data
		.sink_startofpacket (red_rx_descriptor_read_agent_cp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (red_rx_descriptor_read_agent_cp_endofpacket),      //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_001_src_ready),                             //       src.ready
		.src_valid          (router_001_src_valid),                             //          .valid
		.src_data           (router_001_src_data),                              //          .data
		.src_channel        (router_001_src_channel),                           //          .channel
		.src_startofpacket  (router_001_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_001_src_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_001 router_002 (
		.sink_ready         (red_tx_descriptor_read_agent_cp_ready),            //      sink.ready
		.sink_valid         (red_tx_descriptor_read_agent_cp_valid),            //          .valid
		.sink_data          (red_tx_descriptor_read_agent_cp_data),             //          .data
		.sink_startofpacket (red_tx_descriptor_read_agent_cp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (red_tx_descriptor_read_agent_cp_endofpacket),      //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_002_src_ready),                             //       src.ready
		.src_valid          (router_002_src_valid),                             //          .valid
		.src_data           (router_002_src_data),                              //          .data
		.src_channel        (router_002_src_channel),                           //          .channel
		.src_startofpacket  (router_002_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_002_src_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_001 router_003 (
		.sink_ready         (black_rx_descriptor_read_agent_cp_ready),          //      sink.ready
		.sink_valid         (black_rx_descriptor_read_agent_cp_valid),          //          .valid
		.sink_data          (black_rx_descriptor_read_agent_cp_data),           //          .data
		.sink_startofpacket (black_rx_descriptor_read_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (black_rx_descriptor_read_agent_cp_endofpacket),    //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_003_src_ready),                             //       src.ready
		.src_valid          (router_003_src_valid),                             //          .valid
		.src_data           (router_003_src_data),                              //          .data
		.src_channel        (router_003_src_channel),                           //          .channel
		.src_startofpacket  (router_003_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_003_src_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_001 router_004 (
		.sink_ready         (black_tx_descriptor_read_agent_cp_ready),          //      sink.ready
		.sink_valid         (black_tx_descriptor_read_agent_cp_valid),          //          .valid
		.sink_data          (black_tx_descriptor_read_agent_cp_data),           //          .data
		.sink_startofpacket (black_tx_descriptor_read_agent_cp_startofpacket),  //          .startofpacket
		.sink_endofpacket   (black_tx_descriptor_read_agent_cp_endofpacket),    //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_004_src_ready),                             //       src.ready
		.src_valid          (router_004_src_valid),                             //          .valid
		.src_data           (router_004_src_data),                              //          .data
		.src_channel        (router_004_src_channel),                           //          .channel
		.src_startofpacket  (router_004_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_004_src_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_001 router_005 (
		.sink_ready         (red_rx_descriptor_write_agent_cp_ready),           //      sink.ready
		.sink_valid         (red_rx_descriptor_write_agent_cp_valid),           //          .valid
		.sink_data          (red_rx_descriptor_write_agent_cp_data),            //          .data
		.sink_startofpacket (red_rx_descriptor_write_agent_cp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (red_rx_descriptor_write_agent_cp_endofpacket),     //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_005_src_ready),                             //       src.ready
		.src_valid          (router_005_src_valid),                             //          .valid
		.src_data           (router_005_src_data),                              //          .data
		.src_channel        (router_005_src_channel),                           //          .channel
		.src_startofpacket  (router_005_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_005_src_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_001 router_006 (
		.sink_ready         (red_tx_descriptor_write_agent_cp_ready),           //      sink.ready
		.sink_valid         (red_tx_descriptor_write_agent_cp_valid),           //          .valid
		.sink_data          (red_tx_descriptor_write_agent_cp_data),            //          .data
		.sink_startofpacket (red_tx_descriptor_write_agent_cp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (red_tx_descriptor_write_agent_cp_endofpacket),     //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_006_src_ready),                             //       src.ready
		.src_valid          (router_006_src_valid),                             //          .valid
		.src_data           (router_006_src_data),                              //          .data
		.src_channel        (router_006_src_channel),                           //          .channel
		.src_startofpacket  (router_006_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_006_src_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_001 router_007 (
		.sink_ready         (black_rx_descriptor_write_agent_cp_ready),         //      sink.ready
		.sink_valid         (black_rx_descriptor_write_agent_cp_valid),         //          .valid
		.sink_data          (black_rx_descriptor_write_agent_cp_data),          //          .data
		.sink_startofpacket (black_rx_descriptor_write_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (black_rx_descriptor_write_agent_cp_endofpacket),   //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_007_src_ready),                             //       src.ready
		.src_valid          (router_007_src_valid),                             //          .valid
		.src_data           (router_007_src_data),                              //          .data
		.src_channel        (router_007_src_channel),                           //          .channel
		.src_startofpacket  (router_007_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_007_src_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_001 router_008 (
		.sink_ready         (black_tx_descriptor_write_agent_cp_ready),         //      sink.ready
		.sink_valid         (black_tx_descriptor_write_agent_cp_valid),         //          .valid
		.sink_data          (black_tx_descriptor_write_agent_cp_data),          //          .data
		.sink_startofpacket (black_tx_descriptor_write_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (black_tx_descriptor_write_agent_cp_endofpacket),   //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_008_src_ready),                             //       src.ready
		.src_valid          (router_008_src_valid),                             //          .valid
		.src_data           (router_008_src_data),                              //          .data
		.src_channel        (router_008_src_channel),                           //          .channel
		.src_startofpacket  (router_008_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_008_src_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_009 router_009 (
		.sink_ready         (red_tx_m_read_agent_cp_ready),                     //      sink.ready
		.sink_valid         (red_tx_m_read_agent_cp_valid),                     //          .valid
		.sink_data          (red_tx_m_read_agent_cp_data),                      //          .data
		.sink_startofpacket (red_tx_m_read_agent_cp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (red_tx_m_read_agent_cp_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_009_src_ready),                             //       src.ready
		.src_valid          (router_009_src_valid),                             //          .valid
		.src_data           (router_009_src_data),                              //          .data
		.src_channel        (router_009_src_channel),                           //          .channel
		.src_startofpacket  (router_009_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_009_src_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_009 router_010 (
		.sink_ready         (black_rx_m_write_agent_cp_ready),                  //      sink.ready
		.sink_valid         (black_rx_m_write_agent_cp_valid),                  //          .valid
		.sink_data          (black_rx_m_write_agent_cp_data),                   //          .data
		.sink_startofpacket (black_rx_m_write_agent_cp_startofpacket),          //          .startofpacket
		.sink_endofpacket   (black_rx_m_write_agent_cp_endofpacket),            //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_010_src_ready),                             //       src.ready
		.src_valid          (router_010_src_valid),                             //          .valid
		.src_data           (router_010_src_data),                              //          .data
		.src_channel        (router_010_src_channel),                           //          .channel
		.src_startofpacket  (router_010_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_010_src_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_009 router_011 (
		.sink_ready         (ted_decryptor_read_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (ted_decryptor_read_master_agent_cp_valid),         //          .valid
		.sink_data          (ted_decryptor_read_master_agent_cp_data),          //          .data
		.sink_startofpacket (ted_decryptor_read_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (ted_decryptor_read_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_011_src_ready),                             //       src.ready
		.src_valid          (router_011_src_valid),                             //          .valid
		.src_data           (router_011_src_data),                              //          .data
		.src_channel        (router_011_src_channel),                           //          .channel
		.src_startofpacket  (router_011_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_011_src_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_009 router_012 (
		.sink_ready         (ted_decryptor_write_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (ted_decryptor_write_master_agent_cp_valid),         //          .valid
		.sink_data          (ted_decryptor_write_master_agent_cp_data),          //          .data
		.sink_startofpacket (ted_decryptor_write_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (ted_decryptor_write_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (sys_clk_clk_clk),                                   //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_012_src_ready),                              //       src.ready
		.src_valid          (router_012_src_valid),                              //          .valid
		.src_data           (router_012_src_data),                               //          .data
		.src_channel        (router_012_src_channel),                            //          .channel
		.src_startofpacket  (router_012_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_012_src_endofpacket)                         //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_013 router_013 (
		.sink_ready         (black_tx_m_read_agent_cp_ready),                   //      sink.ready
		.sink_valid         (black_tx_m_read_agent_cp_valid),                   //          .valid
		.sink_data          (black_tx_m_read_agent_cp_data),                    //          .data
		.sink_startofpacket (black_tx_m_read_agent_cp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (black_tx_m_read_agent_cp_endofpacket),             //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_013_src_ready),                             //       src.ready
		.src_valid          (router_013_src_valid),                             //          .valid
		.src_data           (router_013_src_data),                              //          .data
		.src_channel        (router_013_src_channel),                           //          .channel
		.src_startofpacket  (router_013_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_013_src_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_013 router_014 (
		.sink_ready         (red_rx_m_write_agent_cp_ready),                    //      sink.ready
		.sink_valid         (red_rx_m_write_agent_cp_valid),                    //          .valid
		.sink_data          (red_rx_m_write_agent_cp_data),                     //          .data
		.sink_startofpacket (red_rx_m_write_agent_cp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (red_rx_m_write_agent_cp_endofpacket),              //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_014_src_ready),                             //       src.ready
		.src_valid          (router_014_src_valid),                             //          .valid
		.src_data           (router_014_src_data),                              //          .data
		.src_channel        (router_014_src_channel),                           //          .channel
		.src_startofpacket  (router_014_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_014_src_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_013 router_015 (
		.sink_ready         (ted_encryptor_read_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (ted_encryptor_read_master_agent_cp_valid),         //          .valid
		.sink_data          (ted_encryptor_read_master_agent_cp_data),          //          .data
		.sink_startofpacket (ted_encryptor_read_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (ted_encryptor_read_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_015_src_ready),                             //       src.ready
		.src_valid          (router_015_src_valid),                             //          .valid
		.src_data           (router_015_src_data),                              //          .data
		.src_channel        (router_015_src_channel),                           //          .channel
		.src_startofpacket  (router_015_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_015_src_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_013 router_016 (
		.sink_ready         (ted_encryptor_write_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (ted_encryptor_write_master_agent_cp_valid),         //          .valid
		.sink_data          (ted_encryptor_write_master_agent_cp_data),          //          .data
		.sink_startofpacket (ted_encryptor_write_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (ted_encryptor_write_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (sys_clk_clk_clk),                                   //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_016_src_ready),                              //       src.ready
		.src_valid          (router_016_src_valid),                              //          .valid
		.src_data           (router_016_src_data),                               //          .data
		.src_channel        (router_016_src_channel),                            //          .channel
		.src_startofpacket  (router_016_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_016_src_endofpacket)                         //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_017 router_017 (
		.sink_ready         (nios2_qsys_0_instruction_master_agent_cp_ready),         //      sink.ready
		.sink_valid         (nios2_qsys_0_instruction_master_agent_cp_valid),         //          .valid
		.sink_data          (nios2_qsys_0_instruction_master_agent_cp_data),          //          .data
		.sink_startofpacket (nios2_qsys_0_instruction_master_agent_cp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_qsys_0_instruction_master_agent_cp_endofpacket),   //          .endofpacket
		.clk                (sys_clk_clk_clk),                                        //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_017_src_ready),                                   //       src.ready
		.src_valid          (router_017_src_valid),                                   //          .valid
		.src_data           (router_017_src_data),                                    //          .data
		.src_channel        (router_017_src_channel),                                 //          .channel
		.src_startofpacket  (router_017_src_startofpacket),                           //          .startofpacket
		.src_endofpacket    (router_017_src_endofpacket)                              //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_018 router_018 (
		.sink_ready         (jtag_uart_avalon_jtag_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (jtag_uart_avalon_jtag_slave_agent_rp_valid),         //          .valid
		.sink_data          (jtag_uart_avalon_jtag_slave_agent_rp_data),          //          .data
		.sink_startofpacket (jtag_uart_avalon_jtag_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (jtag_uart_avalon_jtag_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_clk_clk_clk),                                    //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),   // clk_reset.reset
		.src_ready          (router_018_src_ready),                               //       src.ready
		.src_valid          (router_018_src_valid),                               //          .valid
		.src_data           (router_018_src_data),                                //          .data
		.src_channel        (router_018_src_channel),                             //          .channel
		.src_startofpacket  (router_018_src_startofpacket),                       //          .startofpacket
		.src_endofpacket    (router_018_src_endofpacket)                          //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_019 router_019 (
		.sink_ready         (lcd_avalon_lcd_slave_agent_rp_ready),         //      sink.ready
		.sink_valid         (lcd_avalon_lcd_slave_agent_rp_valid),         //          .valid
		.sink_data          (lcd_avalon_lcd_slave_agent_rp_data),          //          .data
		.sink_startofpacket (lcd_avalon_lcd_slave_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (lcd_avalon_lcd_slave_agent_rp_endofpacket),   //          .endofpacket
		.clk                (lcd_clk_c0_clk),                              //       clk.clk
		.reset              (lcd_reset_reset_bridge_in_reset_reset),       // clk_reset.reset
		.src_ready          (router_019_src_ready),                        //       src.ready
		.src_valid          (router_019_src_valid),                        //          .valid
		.src_data           (router_019_src_data),                         //          .data
		.src_channel        (router_019_src_channel),                      //          .channel
		.src_startofpacket  (router_019_src_startofpacket),                //          .startofpacket
		.src_endofpacket    (router_019_src_endofpacket)                   //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_018 router_020 (
		.sink_ready         (hex_avalon_slave_0_agent_rp_ready),                //      sink.ready
		.sink_valid         (hex_avalon_slave_0_agent_rp_valid),                //          .valid
		.sink_data          (hex_avalon_slave_0_agent_rp_data),                 //          .data
		.sink_startofpacket (hex_avalon_slave_0_agent_rp_startofpacket),        //          .startofpacket
		.sink_endofpacket   (hex_avalon_slave_0_agent_rp_endofpacket),          //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_020_src_ready),                             //       src.ready
		.src_valid          (router_020_src_valid),                             //          .valid
		.src_data           (router_020_src_data),                              //          .data
		.src_channel        (router_020_src_channel),                           //          .channel
		.src_startofpacket  (router_020_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_020_src_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_018 router_021 (
		.sink_ready         (black_interface_control_port_agent_rp_ready),         //      sink.ready
		.sink_valid         (black_interface_control_port_agent_rp_valid),         //          .valid
		.sink_data          (black_interface_control_port_agent_rp_data),          //          .data
		.sink_startofpacket (black_interface_control_port_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (black_interface_control_port_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_clk_clk_clk),                                     //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),    // clk_reset.reset
		.src_ready          (router_021_src_ready),                                //       src.ready
		.src_valid          (router_021_src_valid),                                //          .valid
		.src_data           (router_021_src_data),                                 //          .data
		.src_channel        (router_021_src_channel),                              //          .channel
		.src_startofpacket  (router_021_src_startofpacket),                        //          .startofpacket
		.src_endofpacket    (router_021_src_endofpacket)                           //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_018 router_022 (
		.sink_ready         (red_interface_control_port_agent_rp_ready),         //      sink.ready
		.sink_valid         (red_interface_control_port_agent_rp_valid),         //          .valid
		.sink_data          (red_interface_control_port_agent_rp_data),          //          .data
		.sink_startofpacket (red_interface_control_port_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (red_interface_control_port_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_clk_clk_clk),                                   //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),  // clk_reset.reset
		.src_ready          (router_022_src_ready),                              //       src.ready
		.src_valid          (router_022_src_valid),                              //          .valid
		.src_data           (router_022_src_data),                               //          .data
		.src_channel        (router_022_src_channel),                            //          .channel
		.src_startofpacket  (router_022_src_startofpacket),                      //          .startofpacket
		.src_endofpacket    (router_022_src_endofpacket)                         //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_018 router_023 (
		.sink_ready         (system_id_control_slave_agent_rp_ready),           //      sink.ready
		.sink_valid         (system_id_control_slave_agent_rp_valid),           //          .valid
		.sink_data          (system_id_control_slave_agent_rp_data),            //          .data
		.sink_startofpacket (system_id_control_slave_agent_rp_startofpacket),   //          .startofpacket
		.sink_endofpacket   (system_id_control_slave_agent_rp_endofpacket),     //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_023_src_ready),                             //       src.ready
		.src_valid          (router_023_src_valid),                             //          .valid
		.src_data           (router_023_src_data),                              //          .data
		.src_channel        (router_023_src_channel),                           //          .channel
		.src_startofpacket  (router_023_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_023_src_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_018 router_024 (
		.sink_ready         (ted_encryptor_csr_agent_rp_ready),                 //      sink.ready
		.sink_valid         (ted_encryptor_csr_agent_rp_valid),                 //          .valid
		.sink_data          (ted_encryptor_csr_agent_rp_data),                  //          .data
		.sink_startofpacket (ted_encryptor_csr_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (ted_encryptor_csr_agent_rp_endofpacket),           //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_024_src_ready),                             //       src.ready
		.src_valid          (router_024_src_valid),                             //          .valid
		.src_data           (router_024_src_data),                              //          .data
		.src_channel        (router_024_src_channel),                           //          .channel
		.src_startofpacket  (router_024_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_024_src_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_018 router_025 (
		.sink_ready         (ted_decryptor_csr_agent_rp_ready),                 //      sink.ready
		.sink_valid         (ted_decryptor_csr_agent_rp_valid),                 //          .valid
		.sink_data          (ted_decryptor_csr_agent_rp_data),                  //          .data
		.sink_startofpacket (ted_decryptor_csr_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (ted_decryptor_csr_agent_rp_endofpacket),           //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_025_src_ready),                             //       src.ready
		.src_valid          (router_025_src_valid),                             //          .valid
		.src_data           (router_025_src_data),                              //          .data
		.src_channel        (router_025_src_channel),                           //          .channel
		.src_startofpacket  (router_025_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_025_src_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_018 router_026 (
		.sink_ready         (red_rx_csr_agent_rp_ready),                        //      sink.ready
		.sink_valid         (red_rx_csr_agent_rp_valid),                        //          .valid
		.sink_data          (red_rx_csr_agent_rp_data),                         //          .data
		.sink_startofpacket (red_rx_csr_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (red_rx_csr_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_026_src_ready),                             //       src.ready
		.src_valid          (router_026_src_valid),                             //          .valid
		.src_data           (router_026_src_data),                              //          .data
		.src_channel        (router_026_src_channel),                           //          .channel
		.src_startofpacket  (router_026_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_026_src_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_018 router_027 (
		.sink_ready         (red_tx_csr_agent_rp_ready),                        //      sink.ready
		.sink_valid         (red_tx_csr_agent_rp_valid),                        //          .valid
		.sink_data          (red_tx_csr_agent_rp_data),                         //          .data
		.sink_startofpacket (red_tx_csr_agent_rp_startofpacket),                //          .startofpacket
		.sink_endofpacket   (red_tx_csr_agent_rp_endofpacket),                  //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_027_src_ready),                             //       src.ready
		.src_valid          (router_027_src_valid),                             //          .valid
		.src_data           (router_027_src_data),                              //          .data
		.src_channel        (router_027_src_channel),                           //          .channel
		.src_startofpacket  (router_027_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_027_src_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_018 router_028 (
		.sink_ready         (black_rx_csr_agent_rp_ready),                      //      sink.ready
		.sink_valid         (black_rx_csr_agent_rp_valid),                      //          .valid
		.sink_data          (black_rx_csr_agent_rp_data),                       //          .data
		.sink_startofpacket (black_rx_csr_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (black_rx_csr_agent_rp_endofpacket),                //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_028_src_ready),                             //       src.ready
		.src_valid          (router_028_src_valid),                             //          .valid
		.src_data           (router_028_src_data),                              //          .data
		.src_channel        (router_028_src_channel),                           //          .channel
		.src_startofpacket  (router_028_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_028_src_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_018 router_029 (
		.sink_ready         (black_tx_csr_agent_rp_ready),                      //      sink.ready
		.sink_valid         (black_tx_csr_agent_rp_valid),                      //          .valid
		.sink_data          (black_tx_csr_agent_rp_data),                       //          .data
		.sink_startofpacket (black_tx_csr_agent_rp_startofpacket),              //          .startofpacket
		.sink_endofpacket   (black_tx_csr_agent_rp_endofpacket),                //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_029_src_ready),                             //       src.ready
		.src_valid          (router_029_src_valid),                             //          .valid
		.src_data           (router_029_src_data),                              //          .data
		.src_channel        (router_029_src_channel),                           //          .channel
		.src_startofpacket  (router_029_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_029_src_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_030 router_030 (
		.sink_ready         (nios2_qsys_0_jtag_debug_module_agent_rp_ready),         //      sink.ready
		.sink_valid         (nios2_qsys_0_jtag_debug_module_agent_rp_valid),         //          .valid
		.sink_data          (nios2_qsys_0_jtag_debug_module_agent_rp_data),          //          .data
		.sink_startofpacket (nios2_qsys_0_jtag_debug_module_agent_rp_startofpacket), //          .startofpacket
		.sink_endofpacket   (nios2_qsys_0_jtag_debug_module_agent_rp_endofpacket),   //          .endofpacket
		.clk                (sys_clk_clk_clk),                                       //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset),      // clk_reset.reset
		.src_ready          (router_030_src_ready),                                  //       src.ready
		.src_valid          (router_030_src_valid),                                  //          .valid
		.src_data           (router_030_src_data),                                   //          .data
		.src_channel        (router_030_src_channel),                                //          .channel
		.src_startofpacket  (router_030_src_startofpacket),                          //          .startofpacket
		.src_endofpacket    (router_030_src_endofpacket)                             //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_018 router_031 (
		.sink_ready         (lcd_clk_pll_slave_agent_rp_ready),                 //      sink.ready
		.sink_valid         (lcd_clk_pll_slave_agent_rp_valid),                 //          .valid
		.sink_data          (lcd_clk_pll_slave_agent_rp_data),                  //          .data
		.sink_startofpacket (lcd_clk_pll_slave_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (lcd_clk_pll_slave_agent_rp_endofpacket),           //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_031_src_ready),                             //       src.ready
		.src_valid          (router_031_src_valid),                             //          .valid
		.src_data           (router_031_src_data),                              //          .data
		.src_channel        (router_031_src_channel),                           //          .channel
		.src_startofpacket  (router_031_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_031_src_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_018 router_032 (
		.sink_ready         (output_port_s1_agent_rp_ready),                    //      sink.ready
		.sink_valid         (output_port_s1_agent_rp_valid),                    //          .valid
		.sink_data          (output_port_s1_agent_rp_data),                     //          .data
		.sink_startofpacket (output_port_s1_agent_rp_startofpacket),            //          .startofpacket
		.sink_endofpacket   (output_port_s1_agent_rp_endofpacket),              //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_032_src_ready),                             //       src.ready
		.src_valid          (router_032_src_valid),                             //          .valid
		.src_data           (router_032_src_data),                              //          .data
		.src_channel        (router_032_src_channel),                           //          .channel
		.src_startofpacket  (router_032_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_032_src_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_018 router_033 (
		.sink_ready         (input_port_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (input_port_s1_agent_rp_valid),                     //          .valid
		.sink_data          (input_port_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (input_port_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (input_port_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_033_src_ready),                             //       src.ready
		.src_valid          (router_033_src_valid),                             //          .valid
		.src_data           (router_033_src_data),                              //          .data
		.src_channel        (router_033_src_channel),                           //          .channel
		.src_startofpacket  (router_033_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_033_src_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_030 router_034 (
		.sink_ready         (instruction_memory_s1_agent_rp_ready),             //      sink.ready
		.sink_valid         (instruction_memory_s1_agent_rp_valid),             //          .valid
		.sink_data          (instruction_memory_s1_agent_rp_data),              //          .data
		.sink_startofpacket (instruction_memory_s1_agent_rp_startofpacket),     //          .startofpacket
		.sink_endofpacket   (instruction_memory_s1_agent_rp_endofpacket),       //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_034_src_ready),                             //       src.ready
		.src_valid          (router_034_src_valid),                             //          .valid
		.src_data           (router_034_src_data),                              //          .data
		.src_channel        (router_034_src_channel),                           //          .channel
		.src_startofpacket  (router_034_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_034_src_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_030 router_035 (
		.sink_ready         (heap_stack_s1_agent_rp_ready),                     //      sink.ready
		.sink_valid         (heap_stack_s1_agent_rp_valid),                     //          .valid
		.sink_data          (heap_stack_s1_agent_rp_data),                      //          .data
		.sink_startofpacket (heap_stack_s1_agent_rp_startofpacket),             //          .startofpacket
		.sink_endofpacket   (heap_stack_s1_agent_rp_endofpacket),               //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_035_src_ready),                             //       src.ready
		.src_valid          (router_035_src_valid),                             //          .valid
		.src_data           (router_035_src_data),                              //          .data
		.src_channel        (router_035_src_channel),                           //          .channel
		.src_startofpacket  (router_035_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_035_src_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_018 router_036 (
		.sink_ready         (system_timer_s1_agent_rp_ready),                   //      sink.ready
		.sink_valid         (system_timer_s1_agent_rp_valid),                   //          .valid
		.sink_data          (system_timer_s1_agent_rp_data),                    //          .data
		.sink_startofpacket (system_timer_s1_agent_rp_startofpacket),           //          .startofpacket
		.sink_endofpacket   (system_timer_s1_agent_rp_endofpacket),             //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_036_src_ready),                             //       src.ready
		.src_valid          (router_036_src_valid),                             //          .valid
		.src_data           (router_036_src_data),                              //          .data
		.src_channel        (router_036_src_channel),                           //          .channel
		.src_startofpacket  (router_036_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_036_src_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_037 router_037 (
		.sink_ready         (red_to_black_memory_s1_agent_rp_ready),            //      sink.ready
		.sink_valid         (red_to_black_memory_s1_agent_rp_valid),            //          .valid
		.sink_data          (red_to_black_memory_s1_agent_rp_data),             //          .data
		.sink_startofpacket (red_to_black_memory_s1_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (red_to_black_memory_s1_agent_rp_endofpacket),      //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_037_src_ready),                             //       src.ready
		.src_valid          (router_037_src_valid),                             //          .valid
		.src_data           (router_037_src_data),                              //          .data
		.src_channel        (router_037_src_channel),                           //          .channel
		.src_startofpacket  (router_037_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_037_src_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_038 router_038 (
		.sink_ready         (black_to_red_memory_s1_agent_rp_ready),            //      sink.ready
		.sink_valid         (black_to_red_memory_s1_agent_rp_valid),            //          .valid
		.sink_data          (black_to_red_memory_s1_agent_rp_data),             //          .data
		.sink_startofpacket (black_to_red_memory_s1_agent_rp_startofpacket),    //          .startofpacket
		.sink_endofpacket   (black_to_red_memory_s1_agent_rp_endofpacket),      //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_038_src_ready),                             //       src.ready
		.src_valid          (router_038_src_valid),                             //          .valid
		.src_data           (router_038_src_data),                              //          .data
		.src_channel        (router_038_src_channel),                           //          .channel
		.src_startofpacket  (router_038_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_038_src_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_router_039 router_039 (
		.sink_ready         (descriptor_mem_s1_agent_rp_ready),                 //      sink.ready
		.sink_valid         (descriptor_mem_s1_agent_rp_valid),                 //          .valid
		.sink_data          (descriptor_mem_s1_agent_rp_data),                  //          .data
		.sink_startofpacket (descriptor_mem_s1_agent_rp_startofpacket),         //          .startofpacket
		.sink_endofpacket   (descriptor_mem_s1_agent_rp_endofpacket),           //          .endofpacket
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready          (router_039_src_ready),                             //       src.ready
		.src_valid          (router_039_src_valid),                             //          .valid
		.src_data           (router_039_src_data),                              //          .data
		.src_channel        (router_039_src_channel),                           //          .channel
		.src_startofpacket  (router_039_src_startofpacket),                     //          .startofpacket
		.src_endofpacket    (router_039_src_endofpacket)                        //          .endofpacket
	);

	altera_merlin_burst_adapter #(
		.PKT_ADDR_H                (40),
		.PKT_ADDR_L                (9),
		.PKT_BEGIN_BURST           (60),
		.PKT_BYTE_CNT_H            (49),
		.PKT_BYTE_CNT_L            (47),
		.PKT_BYTEEN_H              (8),
		.PKT_BYTEEN_L              (8),
		.PKT_BURST_SIZE_H          (55),
		.PKT_BURST_SIZE_L          (53),
		.PKT_BURST_TYPE_H          (57),
		.PKT_BURST_TYPE_L          (56),
		.PKT_BURSTWRAP_H           (52),
		.PKT_BURSTWRAP_L           (50),
		.PKT_TRANS_COMPRESSED_READ (41),
		.PKT_TRANS_WRITE           (43),
		.PKT_TRANS_READ            (44),
		.OUT_NARROW_SIZE           (0),
		.IN_NARROW_SIZE            (0),
		.OUT_FIXED                 (0),
		.OUT_COMPLETE_WRAP         (0),
		.ST_DATA_W                 (85),
		.ST_CHANNEL_W              (22),
		.OUT_BYTE_CNT_H            (47),
		.OUT_BURSTWRAP_H           (52),
		.COMPRESSED_READ_SUPPORT   (0),
		.BYTEENABLE_SYNTHESIS      (1),
		.PIPE_INPUTS               (0),
		.NO_WRAP_SUPPORT           (0),
		.INCOMPLETE_WRAP_SUPPORT   (0),
		.BURSTWRAP_CONST_MASK      (7),
		.BURSTWRAP_CONST_VALUE     (7),
		.ADAPTER_VERSION           ("13.1")
	) lcd_avalon_lcd_slave_burst_adapter (
		.clk                   (lcd_clk_c0_clk),                                           //       cr0.clk
		.reset                 (lcd_reset_reset_bridge_in_reset_reset),                    // cr0_reset.reset
		.sink0_valid           (lcd_avalon_lcd_slave_cmd_width_adapter_src_valid),         //     sink0.valid
		.sink0_data            (lcd_avalon_lcd_slave_cmd_width_adapter_src_data),          //          .data
		.sink0_channel         (lcd_avalon_lcd_slave_cmd_width_adapter_src_channel),       //          .channel
		.sink0_startofpacket   (lcd_avalon_lcd_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.sink0_endofpacket     (lcd_avalon_lcd_slave_cmd_width_adapter_src_endofpacket),   //          .endofpacket
		.sink0_ready           (lcd_avalon_lcd_slave_cmd_width_adapter_src_ready),         //          .ready
		.source0_valid         (lcd_avalon_lcd_slave_burst_adapter_source0_valid),         //   source0.valid
		.source0_data          (lcd_avalon_lcd_slave_burst_adapter_source0_data),          //          .data
		.source0_channel       (lcd_avalon_lcd_slave_burst_adapter_source0_channel),       //          .channel
		.source0_startofpacket (lcd_avalon_lcd_slave_burst_adapter_source0_startofpacket), //          .startofpacket
		.source0_endofpacket   (lcd_avalon_lcd_slave_burst_adapter_source0_endofpacket),   //          .endofpacket
		.source0_ready         (lcd_avalon_lcd_slave_burst_adapter_source0_ready)          //          .ready
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux cmd_demux (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready          (router_src_ready),                                 //      sink.ready
		.sink_channel        (router_src_channel),                               //          .channel
		.sink_data           (router_src_data),                                  //          .data
		.sink_startofpacket  (router_src_startofpacket),                         //          .startofpacket
		.sink_endofpacket    (router_src_endofpacket),                           //          .endofpacket
		.sink_valid          (router_src_valid),                                 //          .valid
		.src0_ready          (cmd_demux_src0_ready),                             //      src0.ready
		.src0_valid          (cmd_demux_src0_valid),                             //          .valid
		.src0_data           (cmd_demux_src0_data),                              //          .data
		.src0_channel        (cmd_demux_src0_channel),                           //          .channel
		.src0_startofpacket  (cmd_demux_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket    (cmd_demux_src0_endofpacket),                       //          .endofpacket
		.src1_ready          (cmd_demux_src1_ready),                             //      src1.ready
		.src1_valid          (cmd_demux_src1_valid),                             //          .valid
		.src1_data           (cmd_demux_src1_data),                              //          .data
		.src1_channel        (cmd_demux_src1_channel),                           //          .channel
		.src1_startofpacket  (cmd_demux_src1_startofpacket),                     //          .startofpacket
		.src1_endofpacket    (cmd_demux_src1_endofpacket),                       //          .endofpacket
		.src2_ready          (cmd_demux_src2_ready),                             //      src2.ready
		.src2_valid          (cmd_demux_src2_valid),                             //          .valid
		.src2_data           (cmd_demux_src2_data),                              //          .data
		.src2_channel        (cmd_demux_src2_channel),                           //          .channel
		.src2_startofpacket  (cmd_demux_src2_startofpacket),                     //          .startofpacket
		.src2_endofpacket    (cmd_demux_src2_endofpacket),                       //          .endofpacket
		.src3_ready          (cmd_demux_src3_ready),                             //      src3.ready
		.src3_valid          (cmd_demux_src3_valid),                             //          .valid
		.src3_data           (cmd_demux_src3_data),                              //          .data
		.src3_channel        (cmd_demux_src3_channel),                           //          .channel
		.src3_startofpacket  (cmd_demux_src3_startofpacket),                     //          .startofpacket
		.src3_endofpacket    (cmd_demux_src3_endofpacket),                       //          .endofpacket
		.src4_ready          (cmd_demux_src4_ready),                             //      src4.ready
		.src4_valid          (cmd_demux_src4_valid),                             //          .valid
		.src4_data           (cmd_demux_src4_data),                              //          .data
		.src4_channel        (cmd_demux_src4_channel),                           //          .channel
		.src4_startofpacket  (cmd_demux_src4_startofpacket),                     //          .startofpacket
		.src4_endofpacket    (cmd_demux_src4_endofpacket),                       //          .endofpacket
		.src5_ready          (cmd_demux_src5_ready),                             //      src5.ready
		.src5_valid          (cmd_demux_src5_valid),                             //          .valid
		.src5_data           (cmd_demux_src5_data),                              //          .data
		.src5_channel        (cmd_demux_src5_channel),                           //          .channel
		.src5_startofpacket  (cmd_demux_src5_startofpacket),                     //          .startofpacket
		.src5_endofpacket    (cmd_demux_src5_endofpacket),                       //          .endofpacket
		.src6_ready          (cmd_demux_src6_ready),                             //      src6.ready
		.src6_valid          (cmd_demux_src6_valid),                             //          .valid
		.src6_data           (cmd_demux_src6_data),                              //          .data
		.src6_channel        (cmd_demux_src6_channel),                           //          .channel
		.src6_startofpacket  (cmd_demux_src6_startofpacket),                     //          .startofpacket
		.src6_endofpacket    (cmd_demux_src6_endofpacket),                       //          .endofpacket
		.src7_ready          (cmd_demux_src7_ready),                             //      src7.ready
		.src7_valid          (cmd_demux_src7_valid),                             //          .valid
		.src7_data           (cmd_demux_src7_data),                              //          .data
		.src7_channel        (cmd_demux_src7_channel),                           //          .channel
		.src7_startofpacket  (cmd_demux_src7_startofpacket),                     //          .startofpacket
		.src7_endofpacket    (cmd_demux_src7_endofpacket),                       //          .endofpacket
		.src8_ready          (cmd_demux_src8_ready),                             //      src8.ready
		.src8_valid          (cmd_demux_src8_valid),                             //          .valid
		.src8_data           (cmd_demux_src8_data),                              //          .data
		.src8_channel        (cmd_demux_src8_channel),                           //          .channel
		.src8_startofpacket  (cmd_demux_src8_startofpacket),                     //          .startofpacket
		.src8_endofpacket    (cmd_demux_src8_endofpacket),                       //          .endofpacket
		.src9_ready          (cmd_demux_src9_ready),                             //      src9.ready
		.src9_valid          (cmd_demux_src9_valid),                             //          .valid
		.src9_data           (cmd_demux_src9_data),                              //          .data
		.src9_channel        (cmd_demux_src9_channel),                           //          .channel
		.src9_startofpacket  (cmd_demux_src9_startofpacket),                     //          .startofpacket
		.src9_endofpacket    (cmd_demux_src9_endofpacket),                       //          .endofpacket
		.src10_ready         (cmd_demux_src10_ready),                            //     src10.ready
		.src10_valid         (cmd_demux_src10_valid),                            //          .valid
		.src10_data          (cmd_demux_src10_data),                             //          .data
		.src10_channel       (cmd_demux_src10_channel),                          //          .channel
		.src10_startofpacket (cmd_demux_src10_startofpacket),                    //          .startofpacket
		.src10_endofpacket   (cmd_demux_src10_endofpacket),                      //          .endofpacket
		.src11_ready         (cmd_demux_src11_ready),                            //     src11.ready
		.src11_valid         (cmd_demux_src11_valid),                            //          .valid
		.src11_data          (cmd_demux_src11_data),                             //          .data
		.src11_channel       (cmd_demux_src11_channel),                          //          .channel
		.src11_startofpacket (cmd_demux_src11_startofpacket),                    //          .startofpacket
		.src11_endofpacket   (cmd_demux_src11_endofpacket),                      //          .endofpacket
		.src12_ready         (cmd_demux_src12_ready),                            //     src12.ready
		.src12_valid         (cmd_demux_src12_valid),                            //          .valid
		.src12_data          (cmd_demux_src12_data),                             //          .data
		.src12_channel       (cmd_demux_src12_channel),                          //          .channel
		.src12_startofpacket (cmd_demux_src12_startofpacket),                    //          .startofpacket
		.src12_endofpacket   (cmd_demux_src12_endofpacket),                      //          .endofpacket
		.src13_ready         (cmd_demux_src13_ready),                            //     src13.ready
		.src13_valid         (cmd_demux_src13_valid),                            //          .valid
		.src13_data          (cmd_demux_src13_data),                             //          .data
		.src13_channel       (cmd_demux_src13_channel),                          //          .channel
		.src13_startofpacket (cmd_demux_src13_startofpacket),                    //          .startofpacket
		.src13_endofpacket   (cmd_demux_src13_endofpacket),                      //          .endofpacket
		.src14_ready         (cmd_demux_src14_ready),                            //     src14.ready
		.src14_valid         (cmd_demux_src14_valid),                            //          .valid
		.src14_data          (cmd_demux_src14_data),                             //          .data
		.src14_channel       (cmd_demux_src14_channel),                          //          .channel
		.src14_startofpacket (cmd_demux_src14_startofpacket),                    //          .startofpacket
		.src14_endofpacket   (cmd_demux_src14_endofpacket),                      //          .endofpacket
		.src15_ready         (cmd_demux_src15_ready),                            //     src15.ready
		.src15_valid         (cmd_demux_src15_valid),                            //          .valid
		.src15_data          (cmd_demux_src15_data),                             //          .data
		.src15_channel       (cmd_demux_src15_channel),                          //          .channel
		.src15_startofpacket (cmd_demux_src15_startofpacket),                    //          .startofpacket
		.src15_endofpacket   (cmd_demux_src15_endofpacket),                      //          .endofpacket
		.src16_ready         (cmd_demux_src16_ready),                            //     src16.ready
		.src16_valid         (cmd_demux_src16_valid),                            //          .valid
		.src16_data          (cmd_demux_src16_data),                             //          .data
		.src16_channel       (cmd_demux_src16_channel),                          //          .channel
		.src16_startofpacket (cmd_demux_src16_startofpacket),                    //          .startofpacket
		.src16_endofpacket   (cmd_demux_src16_endofpacket),                      //          .endofpacket
		.src17_ready         (cmd_demux_src17_ready),                            //     src17.ready
		.src17_valid         (cmd_demux_src17_valid),                            //          .valid
		.src17_data          (cmd_demux_src17_data),                             //          .data
		.src17_channel       (cmd_demux_src17_channel),                          //          .channel
		.src17_startofpacket (cmd_demux_src17_startofpacket),                    //          .startofpacket
		.src17_endofpacket   (cmd_demux_src17_endofpacket),                      //          .endofpacket
		.src18_ready         (cmd_demux_src18_ready),                            //     src18.ready
		.src18_valid         (cmd_demux_src18_valid),                            //          .valid
		.src18_data          (cmd_demux_src18_data),                             //          .data
		.src18_channel       (cmd_demux_src18_channel),                          //          .channel
		.src18_startofpacket (cmd_demux_src18_startofpacket),                    //          .startofpacket
		.src18_endofpacket   (cmd_demux_src18_endofpacket),                      //          .endofpacket
		.src19_ready         (cmd_demux_src19_ready),                            //     src19.ready
		.src19_valid         (cmd_demux_src19_valid),                            //          .valid
		.src19_data          (cmd_demux_src19_data),                             //          .data
		.src19_channel       (cmd_demux_src19_channel),                          //          .channel
		.src19_startofpacket (cmd_demux_src19_startofpacket),                    //          .startofpacket
		.src19_endofpacket   (cmd_demux_src19_endofpacket),                      //          .endofpacket
		.src20_ready         (cmd_demux_src20_ready),                            //     src20.ready
		.src20_valid         (cmd_demux_src20_valid),                            //          .valid
		.src20_data          (cmd_demux_src20_data),                             //          .data
		.src20_channel       (cmd_demux_src20_channel),                          //          .channel
		.src20_startofpacket (cmd_demux_src20_startofpacket),                    //          .startofpacket
		.src20_endofpacket   (cmd_demux_src20_endofpacket),                      //          .endofpacket
		.src21_ready         (cmd_demux_src21_ready),                            //     src21.ready
		.src21_valid         (cmd_demux_src21_valid),                            //          .valid
		.src21_data          (cmd_demux_src21_data),                             //          .data
		.src21_channel       (cmd_demux_src21_channel),                          //          .channel
		.src21_startofpacket (cmd_demux_src21_startofpacket),                    //          .startofpacket
		.src21_endofpacket   (cmd_demux_src21_endofpacket)                       //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 cmd_demux_001 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_001_src_ready),                             //      sink.ready
		.sink_channel       (router_001_src_channel),                           //          .channel
		.sink_data          (router_001_src_data),                              //          .data
		.sink_startofpacket (router_001_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_001_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_001_src_valid),                             //          .valid
		.src0_ready         (cmd_demux_001_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_001_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_001_src0_data),                          //          .data
		.src0_channel       (cmd_demux_001_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_001_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_001_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 cmd_demux_002 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_002_src_ready),                             //      sink.ready
		.sink_channel       (router_002_src_channel),                           //          .channel
		.sink_data          (router_002_src_data),                              //          .data
		.sink_startofpacket (router_002_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_002_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_002_src_valid),                             //          .valid
		.src0_ready         (cmd_demux_002_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_002_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_002_src0_data),                          //          .data
		.src0_channel       (cmd_demux_002_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_002_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_002_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 cmd_demux_003 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_003_src_ready),                             //      sink.ready
		.sink_channel       (router_003_src_channel),                           //          .channel
		.sink_data          (router_003_src_data),                              //          .data
		.sink_startofpacket (router_003_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_003_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_003_src_valid),                             //          .valid
		.src0_ready         (cmd_demux_003_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_003_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_003_src0_data),                          //          .data
		.src0_channel       (cmd_demux_003_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_003_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_003_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 cmd_demux_004 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_004_src_ready),                             //      sink.ready
		.sink_channel       (router_004_src_channel),                           //          .channel
		.sink_data          (router_004_src_data),                              //          .data
		.sink_startofpacket (router_004_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_004_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_004_src_valid),                             //          .valid
		.src0_ready         (cmd_demux_004_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_004_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_004_src0_data),                          //          .data
		.src0_channel       (cmd_demux_004_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_004_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_004_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 cmd_demux_005 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_005_src_ready),                             //      sink.ready
		.sink_channel       (router_005_src_channel),                           //          .channel
		.sink_data          (router_005_src_data),                              //          .data
		.sink_startofpacket (router_005_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_005_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_005_src_valid),                             //          .valid
		.src0_ready         (cmd_demux_005_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_005_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_005_src0_data),                          //          .data
		.src0_channel       (cmd_demux_005_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_005_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_005_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 cmd_demux_006 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_006_src_ready),                             //      sink.ready
		.sink_channel       (router_006_src_channel),                           //          .channel
		.sink_data          (router_006_src_data),                              //          .data
		.sink_startofpacket (router_006_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_006_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_006_src_valid),                             //          .valid
		.src0_ready         (cmd_demux_006_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_006_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_006_src0_data),                          //          .data
		.src0_channel       (cmd_demux_006_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_006_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_006_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 cmd_demux_007 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_007_src_ready),                             //      sink.ready
		.sink_channel       (router_007_src_channel),                           //          .channel
		.sink_data          (router_007_src_data),                              //          .data
		.sink_startofpacket (router_007_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_007_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_007_src_valid),                             //          .valid
		.src0_ready         (cmd_demux_007_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_007_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_007_src0_data),                          //          .data
		.src0_channel       (cmd_demux_007_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_007_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_007_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 cmd_demux_008 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_008_src_ready),                             //      sink.ready
		.sink_channel       (router_008_src_channel),                           //          .channel
		.sink_data          (router_008_src_data),                              //          .data
		.sink_startofpacket (router_008_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_008_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_008_src_valid),                             //          .valid
		.src0_ready         (cmd_demux_008_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_008_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_008_src0_data),                          //          .data
		.src0_channel       (cmd_demux_008_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_008_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_008_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 cmd_demux_009 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_009_src_ready),                             //      sink.ready
		.sink_channel       (router_009_src_channel),                           //          .channel
		.sink_data          (router_009_src_data),                              //          .data
		.sink_startofpacket (router_009_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_009_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_009_src_valid),                             //          .valid
		.src0_ready         (cmd_demux_009_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_009_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_009_src0_data),                          //          .data
		.src0_channel       (cmd_demux_009_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_009_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_009_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 cmd_demux_010 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_010_src_ready),                             //      sink.ready
		.sink_channel       (router_010_src_channel),                           //          .channel
		.sink_data          (router_010_src_data),                              //          .data
		.sink_startofpacket (router_010_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_010_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_010_src_valid),                             //          .valid
		.src0_ready         (cmd_demux_010_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_010_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_010_src0_data),                          //          .data
		.src0_channel       (cmd_demux_010_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_010_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_010_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 cmd_demux_011 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_011_src_ready),                             //      sink.ready
		.sink_channel       (router_011_src_channel),                           //          .channel
		.sink_data          (router_011_src_data),                              //          .data
		.sink_startofpacket (router_011_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_011_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_011_src_valid),                             //          .valid
		.src0_ready         (cmd_demux_011_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_011_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_011_src0_data),                          //          .data
		.src0_channel       (cmd_demux_011_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_011_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_011_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 cmd_demux_012 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_012_src_ready),                             //      sink.ready
		.sink_channel       (router_012_src_channel),                           //          .channel
		.sink_data          (router_012_src_data),                              //          .data
		.sink_startofpacket (router_012_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_012_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_012_src_valid),                             //          .valid
		.src0_ready         (cmd_demux_012_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_012_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_012_src0_data),                          //          .data
		.src0_channel       (cmd_demux_012_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_012_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_012_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 cmd_demux_013 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_013_src_ready),                             //      sink.ready
		.sink_channel       (router_013_src_channel),                           //          .channel
		.sink_data          (router_013_src_data),                              //          .data
		.sink_startofpacket (router_013_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_013_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_013_src_valid),                             //          .valid
		.src0_ready         (cmd_demux_013_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_013_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_013_src0_data),                          //          .data
		.src0_channel       (cmd_demux_013_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_013_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_013_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 cmd_demux_014 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_014_src_ready),                             //      sink.ready
		.sink_channel       (router_014_src_channel),                           //          .channel
		.sink_data          (router_014_src_data),                              //          .data
		.sink_startofpacket (router_014_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_014_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_014_src_valid),                             //          .valid
		.src0_ready         (cmd_demux_014_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_014_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_014_src0_data),                          //          .data
		.src0_channel       (cmd_demux_014_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_014_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_014_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 cmd_demux_015 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_015_src_ready),                             //      sink.ready
		.sink_channel       (router_015_src_channel),                           //          .channel
		.sink_data          (router_015_src_data),                              //          .data
		.sink_startofpacket (router_015_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_015_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_015_src_valid),                             //          .valid
		.src0_ready         (cmd_demux_015_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_015_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_015_src0_data),                          //          .data
		.src0_channel       (cmd_demux_015_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_015_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_015_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 cmd_demux_016 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_016_src_ready),                             //      sink.ready
		.sink_channel       (router_016_src_channel),                           //          .channel
		.sink_data          (router_016_src_data),                              //          .data
		.sink_startofpacket (router_016_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_016_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_016_src_valid),                             //          .valid
		.src0_ready         (cmd_demux_016_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_016_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_016_src0_data),                          //          .data
		.src0_channel       (cmd_demux_016_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_016_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_016_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_017 cmd_demux_017 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_017_src_ready),                             //      sink.ready
		.sink_channel       (router_017_src_channel),                           //          .channel
		.sink_data          (router_017_src_data),                              //          .data
		.sink_startofpacket (router_017_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_017_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_017_src_valid),                             //          .valid
		.src0_ready         (cmd_demux_017_src0_ready),                         //      src0.ready
		.src0_valid         (cmd_demux_017_src0_valid),                         //          .valid
		.src0_data          (cmd_demux_017_src0_data),                          //          .data
		.src0_channel       (cmd_demux_017_src0_channel),                       //          .channel
		.src0_startofpacket (cmd_demux_017_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (cmd_demux_017_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (cmd_demux_017_src1_ready),                         //      src1.ready
		.src1_valid         (cmd_demux_017_src1_valid),                         //          .valid
		.src1_data          (cmd_demux_017_src1_data),                          //          .data
		.src1_channel       (cmd_demux_017_src1_channel),                       //          .channel
		.src1_startofpacket (cmd_demux_017_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (cmd_demux_017_src1_endofpacket),                   //          .endofpacket
		.src2_ready         (cmd_demux_017_src2_ready),                         //      src2.ready
		.src2_valid         (cmd_demux_017_src2_valid),                         //          .valid
		.src2_data          (cmd_demux_017_src2_data),                          //          .data
		.src2_channel       (cmd_demux_017_src2_channel),                       //          .channel
		.src2_startofpacket (cmd_demux_017_src2_startofpacket),                 //          .startofpacket
		.src2_endofpacket   (cmd_demux_017_src2_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_mux cmd_mux (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_src_ready),                                //       src.ready
		.src_valid           (cmd_mux_src_valid),                                //          .valid
		.src_data            (cmd_mux_src_data),                                 //          .data
		.src_channel         (cmd_mux_src_channel),                              //          .channel
		.src_startofpacket   (cmd_mux_src_startofpacket),                        //          .startofpacket
		.src_endofpacket     (cmd_mux_src_endofpacket),                          //          .endofpacket
		.sink0_ready         (cmd_demux_src0_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src0_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src0_channel),                           //          .channel
		.sink0_data          (cmd_demux_src0_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src0_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src0_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_mux cmd_mux_001 (
		.clk                 (lcd_clk_c0_clk),                        //       clk.clk
		.reset               (lcd_reset_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_001_src_ready),                 //       src.ready
		.src_valid           (cmd_mux_001_src_valid),                 //          .valid
		.src_data            (cmd_mux_001_src_data),                  //          .data
		.src_channel         (cmd_mux_001_src_channel),               //          .channel
		.src_startofpacket   (cmd_mux_001_src_startofpacket),         //          .startofpacket
		.src_endofpacket     (cmd_mux_001_src_endofpacket),           //          .endofpacket
		.sink0_ready         (crosser_out_ready),                     //     sink0.ready
		.sink0_valid         (crosser_out_valid),                     //          .valid
		.sink0_channel       (crosser_out_channel),                   //          .channel
		.sink0_data          (crosser_out_data),                      //          .data
		.sink0_startofpacket (crosser_out_startofpacket),             //          .startofpacket
		.sink0_endofpacket   (crosser_out_endofpacket)                //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_mux cmd_mux_002 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_002_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_002_src_valid),                            //          .valid
		.src_data            (cmd_mux_002_src_data),                             //          .data
		.src_channel         (cmd_mux_002_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_002_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_002_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src2_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src2_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src2_channel),                           //          .channel
		.sink0_data          (cmd_demux_src2_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src2_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src2_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_mux cmd_mux_003 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_003_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_003_src_valid),                            //          .valid
		.src_data            (cmd_mux_003_src_data),                             //          .data
		.src_channel         (cmd_mux_003_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_003_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_003_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src3_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src3_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src3_channel),                           //          .channel
		.sink0_data          (cmd_demux_src3_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src3_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src3_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_mux cmd_mux_004 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_004_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_004_src_valid),                            //          .valid
		.src_data            (cmd_mux_004_src_data),                             //          .data
		.src_channel         (cmd_mux_004_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_004_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_004_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src4_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src4_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src4_channel),                           //          .channel
		.sink0_data          (cmd_demux_src4_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src4_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src4_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_mux cmd_mux_005 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_005_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_005_src_valid),                            //          .valid
		.src_data            (cmd_mux_005_src_data),                             //          .data
		.src_channel         (cmd_mux_005_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_005_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_005_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src5_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src5_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src5_channel),                           //          .channel
		.sink0_data          (cmd_demux_src5_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src5_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src5_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_mux cmd_mux_006 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_006_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_006_src_valid),                            //          .valid
		.src_data            (cmd_mux_006_src_data),                             //          .data
		.src_channel         (cmd_mux_006_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_006_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_006_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src6_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src6_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src6_channel),                           //          .channel
		.sink0_data          (cmd_demux_src6_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src6_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src6_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_mux cmd_mux_007 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_007_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_007_src_valid),                            //          .valid
		.src_data            (cmd_mux_007_src_data),                             //          .data
		.src_channel         (cmd_mux_007_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_007_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_007_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src7_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src7_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src7_channel),                           //          .channel
		.sink0_data          (cmd_demux_src7_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src7_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src7_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_mux cmd_mux_008 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_008_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_008_src_valid),                            //          .valid
		.src_data            (cmd_mux_008_src_data),                             //          .data
		.src_channel         (cmd_mux_008_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_008_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_008_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src8_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src8_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src8_channel),                           //          .channel
		.sink0_data          (cmd_demux_src8_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src8_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src8_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_mux cmd_mux_009 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_009_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_009_src_valid),                            //          .valid
		.src_data            (cmd_mux_009_src_data),                             //          .data
		.src_channel         (cmd_mux_009_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_009_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_009_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src9_ready),                             //     sink0.ready
		.sink0_valid         (cmd_demux_src9_valid),                             //          .valid
		.sink0_channel       (cmd_demux_src9_channel),                           //          .channel
		.sink0_data          (cmd_demux_src9_data),                              //          .data
		.sink0_startofpacket (cmd_demux_src9_startofpacket),                     //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src9_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_mux cmd_mux_010 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_010_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_010_src_valid),                            //          .valid
		.src_data            (cmd_mux_010_src_data),                             //          .data
		.src_channel         (cmd_mux_010_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_010_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_010_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src10_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src10_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src10_channel),                          //          .channel
		.sink0_data          (cmd_demux_src10_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src10_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src10_endofpacket)                       //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_mux cmd_mux_011 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_011_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_011_src_valid),                            //          .valid
		.src_data            (cmd_mux_011_src_data),                             //          .data
		.src_channel         (cmd_mux_011_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_011_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_011_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src11_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src11_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src11_channel),                          //          .channel
		.sink0_data          (cmd_demux_src11_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src11_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src11_endofpacket)                       //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_mux_012 cmd_mux_012 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_012_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_012_src_valid),                            //          .valid
		.src_data            (cmd_mux_012_src_data),                             //          .data
		.src_channel         (cmd_mux_012_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_012_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_012_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src12_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src12_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src12_channel),                          //          .channel
		.sink0_data          (cmd_demux_src12_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src12_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src12_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_017_src0_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_017_src0_valid),                         //          .valid
		.sink1_channel       (cmd_demux_017_src0_channel),                       //          .channel
		.sink1_data          (cmd_demux_017_src0_data),                          //          .data
		.sink1_startofpacket (cmd_demux_017_src0_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_017_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_mux cmd_mux_013 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_013_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_013_src_valid),                            //          .valid
		.src_data            (cmd_mux_013_src_data),                             //          .data
		.src_channel         (cmd_mux_013_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_013_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_013_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src13_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src13_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src13_channel),                          //          .channel
		.sink0_data          (cmd_demux_src13_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src13_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src13_endofpacket)                       //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_mux cmd_mux_014 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_014_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_014_src_valid),                            //          .valid
		.src_data            (cmd_mux_014_src_data),                             //          .data
		.src_channel         (cmd_mux_014_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_014_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_014_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src14_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src14_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src14_channel),                          //          .channel
		.sink0_data          (cmd_demux_src14_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src14_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src14_endofpacket)                       //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_mux cmd_mux_015 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_015_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_015_src_valid),                            //          .valid
		.src_data            (cmd_mux_015_src_data),                             //          .data
		.src_channel         (cmd_mux_015_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_015_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_015_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src15_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src15_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src15_channel),                          //          .channel
		.sink0_data          (cmd_demux_src15_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src15_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src15_endofpacket)                       //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_mux_012 cmd_mux_016 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_016_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_016_src_valid),                            //          .valid
		.src_data            (cmd_mux_016_src_data),                             //          .data
		.src_channel         (cmd_mux_016_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_016_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_016_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src16_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src16_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src16_channel),                          //          .channel
		.sink0_data          (cmd_demux_src16_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src16_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src16_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_017_src1_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_017_src1_valid),                         //          .valid
		.sink1_channel       (cmd_demux_017_src1_channel),                       //          .channel
		.sink1_data          (cmd_demux_017_src1_data),                          //          .data
		.sink1_startofpacket (cmd_demux_017_src1_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_017_src1_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_mux_012 cmd_mux_017 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_017_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_017_src_valid),                            //          .valid
		.src_data            (cmd_mux_017_src_data),                             //          .data
		.src_channel         (cmd_mux_017_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_017_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_017_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src17_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src17_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src17_channel),                          //          .channel
		.sink0_data          (cmd_demux_src17_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src17_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src17_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_017_src2_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_017_src2_valid),                         //          .valid
		.sink1_channel       (cmd_demux_017_src2_channel),                       //          .channel
		.sink1_data          (cmd_demux_017_src2_data),                          //          .data
		.sink1_startofpacket (cmd_demux_017_src2_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_017_src2_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_mux cmd_mux_018 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_018_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_018_src_valid),                            //          .valid
		.src_data            (cmd_mux_018_src_data),                             //          .data
		.src_channel         (cmd_mux_018_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_018_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_018_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src18_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src18_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src18_channel),                          //          .channel
		.sink0_data          (cmd_demux_src18_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src18_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src18_endofpacket)                       //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_mux_019 cmd_mux_019 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_019_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_019_src_valid),                            //          .valid
		.src_data            (cmd_mux_019_src_data),                             //          .data
		.src_channel         (cmd_mux_019_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_019_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_019_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src19_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src19_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src19_channel),                          //          .channel
		.sink0_data          (cmd_demux_src19_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src19_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src19_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_013_src0_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_013_src0_valid),                         //          .valid
		.sink1_channel       (cmd_demux_013_src0_channel),                       //          .channel
		.sink1_data          (cmd_demux_013_src0_data),                          //          .data
		.sink1_startofpacket (cmd_demux_013_src0_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_013_src0_endofpacket),                   //          .endofpacket
		.sink2_ready         (cmd_demux_014_src0_ready),                         //     sink2.ready
		.sink2_valid         (cmd_demux_014_src0_valid),                         //          .valid
		.sink2_channel       (cmd_demux_014_src0_channel),                       //          .channel
		.sink2_data          (cmd_demux_014_src0_data),                          //          .data
		.sink2_startofpacket (cmd_demux_014_src0_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (cmd_demux_014_src0_endofpacket),                   //          .endofpacket
		.sink3_ready         (cmd_demux_015_src0_ready),                         //     sink3.ready
		.sink3_valid         (cmd_demux_015_src0_valid),                         //          .valid
		.sink3_channel       (cmd_demux_015_src0_channel),                       //          .channel
		.sink3_data          (cmd_demux_015_src0_data),                          //          .data
		.sink3_startofpacket (cmd_demux_015_src0_startofpacket),                 //          .startofpacket
		.sink3_endofpacket   (cmd_demux_015_src0_endofpacket),                   //          .endofpacket
		.sink4_ready         (cmd_demux_016_src0_ready),                         //     sink4.ready
		.sink4_valid         (cmd_demux_016_src0_valid),                         //          .valid
		.sink4_channel       (cmd_demux_016_src0_channel),                       //          .channel
		.sink4_data          (cmd_demux_016_src0_data),                          //          .data
		.sink4_startofpacket (cmd_demux_016_src0_startofpacket),                 //          .startofpacket
		.sink4_endofpacket   (cmd_demux_016_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_mux_019 cmd_mux_020 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_020_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_020_src_valid),                            //          .valid
		.src_data            (cmd_mux_020_src_data),                             //          .data
		.src_channel         (cmd_mux_020_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_020_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_020_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src20_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src20_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src20_channel),                          //          .channel
		.sink0_data          (cmd_demux_src20_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src20_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src20_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_009_src0_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_009_src0_valid),                         //          .valid
		.sink1_channel       (cmd_demux_009_src0_channel),                       //          .channel
		.sink1_data          (cmd_demux_009_src0_data),                          //          .data
		.sink1_startofpacket (cmd_demux_009_src0_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_009_src0_endofpacket),                   //          .endofpacket
		.sink2_ready         (cmd_demux_010_src0_ready),                         //     sink2.ready
		.sink2_valid         (cmd_demux_010_src0_valid),                         //          .valid
		.sink2_channel       (cmd_demux_010_src0_channel),                       //          .channel
		.sink2_data          (cmd_demux_010_src0_data),                          //          .data
		.sink2_startofpacket (cmd_demux_010_src0_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (cmd_demux_010_src0_endofpacket),                   //          .endofpacket
		.sink3_ready         (cmd_demux_011_src0_ready),                         //     sink3.ready
		.sink3_valid         (cmd_demux_011_src0_valid),                         //          .valid
		.sink3_channel       (cmd_demux_011_src0_channel),                       //          .channel
		.sink3_data          (cmd_demux_011_src0_data),                          //          .data
		.sink3_startofpacket (cmd_demux_011_src0_startofpacket),                 //          .startofpacket
		.sink3_endofpacket   (cmd_demux_011_src0_endofpacket),                   //          .endofpacket
		.sink4_ready         (cmd_demux_012_src0_ready),                         //     sink4.ready
		.sink4_valid         (cmd_demux_012_src0_valid),                         //          .valid
		.sink4_channel       (cmd_demux_012_src0_channel),                       //          .channel
		.sink4_data          (cmd_demux_012_src0_data),                          //          .data
		.sink4_startofpacket (cmd_demux_012_src0_startofpacket),                 //          .startofpacket
		.sink4_endofpacket   (cmd_demux_012_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_mux_021 cmd_mux_021 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (cmd_mux_021_src_ready),                            //       src.ready
		.src_valid           (cmd_mux_021_src_valid),                            //          .valid
		.src_data            (cmd_mux_021_src_data),                             //          .data
		.src_channel         (cmd_mux_021_src_channel),                          //          .channel
		.src_startofpacket   (cmd_mux_021_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (cmd_mux_021_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (cmd_demux_src21_ready),                            //     sink0.ready
		.sink0_valid         (cmd_demux_src21_valid),                            //          .valid
		.sink0_channel       (cmd_demux_src21_channel),                          //          .channel
		.sink0_data          (cmd_demux_src21_data),                             //          .data
		.sink0_startofpacket (cmd_demux_src21_startofpacket),                    //          .startofpacket
		.sink0_endofpacket   (cmd_demux_src21_endofpacket),                      //          .endofpacket
		.sink1_ready         (cmd_demux_001_src0_ready),                         //     sink1.ready
		.sink1_valid         (cmd_demux_001_src0_valid),                         //          .valid
		.sink1_channel       (cmd_demux_001_src0_channel),                       //          .channel
		.sink1_data          (cmd_demux_001_src0_data),                          //          .data
		.sink1_startofpacket (cmd_demux_001_src0_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (cmd_demux_001_src0_endofpacket),                   //          .endofpacket
		.sink2_ready         (cmd_demux_002_src0_ready),                         //     sink2.ready
		.sink2_valid         (cmd_demux_002_src0_valid),                         //          .valid
		.sink2_channel       (cmd_demux_002_src0_channel),                       //          .channel
		.sink2_data          (cmd_demux_002_src0_data),                          //          .data
		.sink2_startofpacket (cmd_demux_002_src0_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (cmd_demux_002_src0_endofpacket),                   //          .endofpacket
		.sink3_ready         (cmd_demux_003_src0_ready),                         //     sink3.ready
		.sink3_valid         (cmd_demux_003_src0_valid),                         //          .valid
		.sink3_channel       (cmd_demux_003_src0_channel),                       //          .channel
		.sink3_data          (cmd_demux_003_src0_data),                          //          .data
		.sink3_startofpacket (cmd_demux_003_src0_startofpacket),                 //          .startofpacket
		.sink3_endofpacket   (cmd_demux_003_src0_endofpacket),                   //          .endofpacket
		.sink4_ready         (cmd_demux_004_src0_ready),                         //     sink4.ready
		.sink4_valid         (cmd_demux_004_src0_valid),                         //          .valid
		.sink4_channel       (cmd_demux_004_src0_channel),                       //          .channel
		.sink4_data          (cmd_demux_004_src0_data),                          //          .data
		.sink4_startofpacket (cmd_demux_004_src0_startofpacket),                 //          .startofpacket
		.sink4_endofpacket   (cmd_demux_004_src0_endofpacket),                   //          .endofpacket
		.sink5_ready         (cmd_demux_005_src0_ready),                         //     sink5.ready
		.sink5_valid         (cmd_demux_005_src0_valid),                         //          .valid
		.sink5_channel       (cmd_demux_005_src0_channel),                       //          .channel
		.sink5_data          (cmd_demux_005_src0_data),                          //          .data
		.sink5_startofpacket (cmd_demux_005_src0_startofpacket),                 //          .startofpacket
		.sink5_endofpacket   (cmd_demux_005_src0_endofpacket),                   //          .endofpacket
		.sink6_ready         (cmd_demux_006_src0_ready),                         //     sink6.ready
		.sink6_valid         (cmd_demux_006_src0_valid),                         //          .valid
		.sink6_channel       (cmd_demux_006_src0_channel),                       //          .channel
		.sink6_data          (cmd_demux_006_src0_data),                          //          .data
		.sink6_startofpacket (cmd_demux_006_src0_startofpacket),                 //          .startofpacket
		.sink6_endofpacket   (cmd_demux_006_src0_endofpacket),                   //          .endofpacket
		.sink7_ready         (cmd_demux_007_src0_ready),                         //     sink7.ready
		.sink7_valid         (cmd_demux_007_src0_valid),                         //          .valid
		.sink7_channel       (cmd_demux_007_src0_channel),                       //          .channel
		.sink7_data          (cmd_demux_007_src0_data),                          //          .data
		.sink7_startofpacket (cmd_demux_007_src0_startofpacket),                 //          .startofpacket
		.sink7_endofpacket   (cmd_demux_007_src0_endofpacket),                   //          .endofpacket
		.sink8_ready         (cmd_demux_008_src0_ready),                         //     sink8.ready
		.sink8_valid         (cmd_demux_008_src0_valid),                         //          .valid
		.sink8_channel       (cmd_demux_008_src0_channel),                       //          .channel
		.sink8_data          (cmd_demux_008_src0_data),                          //          .data
		.sink8_startofpacket (cmd_demux_008_src0_startofpacket),                 //          .startofpacket
		.sink8_endofpacket   (cmd_demux_008_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 rsp_demux (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_018_src_ready),                             //      sink.ready
		.sink_channel       (router_018_src_channel),                           //          .channel
		.sink_data          (router_018_src_data),                              //          .data
		.sink_startofpacket (router_018_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_018_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_018_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_src0_ready),                             //      src0.ready
		.src0_valid         (rsp_demux_src0_valid),                             //          .valid
		.src0_data          (rsp_demux_src0_data),                              //          .data
		.src0_channel       (rsp_demux_src0_channel),                           //          .channel
		.src0_startofpacket (rsp_demux_src0_startofpacket),                     //          .startofpacket
		.src0_endofpacket   (rsp_demux_src0_endofpacket)                        //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_rsp_demux_001 rsp_demux_001 (
		.clk                (lcd_clk_c0_clk),                                           //       clk.clk
		.reset              (lcd_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.sink_ready         (lcd_avalon_lcd_slave_rsp_width_adapter_src_ready),         //      sink.ready
		.sink_channel       (lcd_avalon_lcd_slave_rsp_width_adapter_src_channel),       //          .channel
		.sink_data          (lcd_avalon_lcd_slave_rsp_width_adapter_src_data),          //          .data
		.sink_startofpacket (lcd_avalon_lcd_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.sink_endofpacket   (lcd_avalon_lcd_slave_rsp_width_adapter_src_endofpacket),   //          .endofpacket
		.sink_valid         (lcd_avalon_lcd_slave_rsp_width_adapter_src_valid),         //          .valid
		.src0_ready         (rsp_demux_001_src0_ready),                                 //      src0.ready
		.src0_valid         (rsp_demux_001_src0_valid),                                 //          .valid
		.src0_data          (rsp_demux_001_src0_data),                                  //          .data
		.src0_channel       (rsp_demux_001_src0_channel),                               //          .channel
		.src0_startofpacket (rsp_demux_001_src0_startofpacket),                         //          .startofpacket
		.src0_endofpacket   (rsp_demux_001_src0_endofpacket)                            //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 rsp_demux_002 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_020_src_ready),                             //      sink.ready
		.sink_channel       (router_020_src_channel),                           //          .channel
		.sink_data          (router_020_src_data),                              //          .data
		.sink_startofpacket (router_020_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_020_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_020_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_002_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_002_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_002_src0_data),                          //          .data
		.src0_channel       (rsp_demux_002_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_002_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_002_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 rsp_demux_003 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_021_src_ready),                             //      sink.ready
		.sink_channel       (router_021_src_channel),                           //          .channel
		.sink_data          (router_021_src_data),                              //          .data
		.sink_startofpacket (router_021_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_021_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_021_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_003_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_003_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_003_src0_data),                          //          .data
		.src0_channel       (rsp_demux_003_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_003_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_003_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 rsp_demux_004 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_022_src_ready),                             //      sink.ready
		.sink_channel       (router_022_src_channel),                           //          .channel
		.sink_data          (router_022_src_data),                              //          .data
		.sink_startofpacket (router_022_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_022_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_022_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_004_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_004_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_004_src0_data),                          //          .data
		.src0_channel       (rsp_demux_004_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_004_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_004_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 rsp_demux_005 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_023_src_ready),                             //      sink.ready
		.sink_channel       (router_023_src_channel),                           //          .channel
		.sink_data          (router_023_src_data),                              //          .data
		.sink_startofpacket (router_023_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_023_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_023_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_005_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_005_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_005_src0_data),                          //          .data
		.src0_channel       (rsp_demux_005_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_005_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_005_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 rsp_demux_006 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_024_src_ready),                             //      sink.ready
		.sink_channel       (router_024_src_channel),                           //          .channel
		.sink_data          (router_024_src_data),                              //          .data
		.sink_startofpacket (router_024_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_024_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_024_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_006_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_006_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_006_src0_data),                          //          .data
		.src0_channel       (rsp_demux_006_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_006_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_006_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 rsp_demux_007 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_025_src_ready),                             //      sink.ready
		.sink_channel       (router_025_src_channel),                           //          .channel
		.sink_data          (router_025_src_data),                              //          .data
		.sink_startofpacket (router_025_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_025_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_025_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_007_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_007_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_007_src0_data),                          //          .data
		.src0_channel       (rsp_demux_007_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_007_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_007_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 rsp_demux_008 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_026_src_ready),                             //      sink.ready
		.sink_channel       (router_026_src_channel),                           //          .channel
		.sink_data          (router_026_src_data),                              //          .data
		.sink_startofpacket (router_026_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_026_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_026_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_008_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_008_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_008_src0_data),                          //          .data
		.src0_channel       (rsp_demux_008_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_008_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_008_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 rsp_demux_009 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_027_src_ready),                             //      sink.ready
		.sink_channel       (router_027_src_channel),                           //          .channel
		.sink_data          (router_027_src_data),                              //          .data
		.sink_startofpacket (router_027_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_027_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_027_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_009_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_009_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_009_src0_data),                          //          .data
		.src0_channel       (rsp_demux_009_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_009_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_009_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 rsp_demux_010 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_028_src_ready),                             //      sink.ready
		.sink_channel       (router_028_src_channel),                           //          .channel
		.sink_data          (router_028_src_data),                              //          .data
		.sink_startofpacket (router_028_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_028_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_028_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_010_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_010_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_010_src0_data),                          //          .data
		.src0_channel       (rsp_demux_010_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_010_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_010_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 rsp_demux_011 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_029_src_ready),                             //      sink.ready
		.sink_channel       (router_029_src_channel),                           //          .channel
		.sink_data          (router_029_src_data),                              //          .data
		.sink_startofpacket (router_029_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_029_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_029_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_011_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_011_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_011_src0_data),                          //          .data
		.src0_channel       (rsp_demux_011_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_011_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_011_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_rsp_demux_012 rsp_demux_012 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_030_src_ready),                             //      sink.ready
		.sink_channel       (router_030_src_channel),                           //          .channel
		.sink_data          (router_030_src_data),                              //          .data
		.sink_startofpacket (router_030_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_030_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_030_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_012_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_012_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_012_src0_data),                          //          .data
		.src0_channel       (rsp_demux_012_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_012_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_012_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_012_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_012_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_012_src1_data),                          //          .data
		.src1_channel       (rsp_demux_012_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_012_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_012_src1_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 rsp_demux_013 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_031_src_ready),                             //      sink.ready
		.sink_channel       (router_031_src_channel),                           //          .channel
		.sink_data          (router_031_src_data),                              //          .data
		.sink_startofpacket (router_031_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_031_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_031_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_013_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_013_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_013_src0_data),                          //          .data
		.src0_channel       (rsp_demux_013_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_013_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_013_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 rsp_demux_014 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_032_src_ready),                             //      sink.ready
		.sink_channel       (router_032_src_channel),                           //          .channel
		.sink_data          (router_032_src_data),                              //          .data
		.sink_startofpacket (router_032_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_032_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_032_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_014_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_014_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_014_src0_data),                          //          .data
		.src0_channel       (rsp_demux_014_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_014_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_014_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 rsp_demux_015 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_033_src_ready),                             //      sink.ready
		.sink_channel       (router_033_src_channel),                           //          .channel
		.sink_data          (router_033_src_data),                              //          .data
		.sink_startofpacket (router_033_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_033_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_033_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_015_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_015_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_015_src0_data),                          //          .data
		.src0_channel       (rsp_demux_015_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_015_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_015_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_rsp_demux_012 rsp_demux_016 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_034_src_ready),                             //      sink.ready
		.sink_channel       (router_034_src_channel),                           //          .channel
		.sink_data          (router_034_src_data),                              //          .data
		.sink_startofpacket (router_034_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_034_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_034_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_016_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_016_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_016_src0_data),                          //          .data
		.src0_channel       (rsp_demux_016_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_016_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_016_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_016_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_016_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_016_src1_data),                          //          .data
		.src1_channel       (rsp_demux_016_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_016_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_016_src1_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_rsp_demux_012 rsp_demux_017 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_035_src_ready),                             //      sink.ready
		.sink_channel       (router_035_src_channel),                           //          .channel
		.sink_data          (router_035_src_data),                              //          .data
		.sink_startofpacket (router_035_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_035_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_035_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_017_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_017_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_017_src0_data),                          //          .data
		.src0_channel       (rsp_demux_017_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_017_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_017_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_017_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_017_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_017_src1_data),                          //          .data
		.src1_channel       (rsp_demux_017_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_017_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_017_src1_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_cmd_demux_001 rsp_demux_018 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_036_src_ready),                             //      sink.ready
		.sink_channel       (router_036_src_channel),                           //          .channel
		.sink_data          (router_036_src_data),                              //          .data
		.sink_startofpacket (router_036_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_036_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_036_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_018_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_018_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_018_src0_data),                          //          .data
		.src0_channel       (rsp_demux_018_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_018_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_018_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_rsp_demux_019 rsp_demux_019 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_037_src_ready),                             //      sink.ready
		.sink_channel       (router_037_src_channel),                           //          .channel
		.sink_data          (router_037_src_data),                              //          .data
		.sink_startofpacket (router_037_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_037_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_037_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_019_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_019_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_019_src0_data),                          //          .data
		.src0_channel       (rsp_demux_019_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_019_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_019_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_019_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_019_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_019_src1_data),                          //          .data
		.src1_channel       (rsp_demux_019_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_019_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_019_src1_endofpacket),                   //          .endofpacket
		.src2_ready         (rsp_demux_019_src2_ready),                         //      src2.ready
		.src2_valid         (rsp_demux_019_src2_valid),                         //          .valid
		.src2_data          (rsp_demux_019_src2_data),                          //          .data
		.src2_channel       (rsp_demux_019_src2_channel),                       //          .channel
		.src2_startofpacket (rsp_demux_019_src2_startofpacket),                 //          .startofpacket
		.src2_endofpacket   (rsp_demux_019_src2_endofpacket),                   //          .endofpacket
		.src3_ready         (rsp_demux_019_src3_ready),                         //      src3.ready
		.src3_valid         (rsp_demux_019_src3_valid),                         //          .valid
		.src3_data          (rsp_demux_019_src3_data),                          //          .data
		.src3_channel       (rsp_demux_019_src3_channel),                       //          .channel
		.src3_startofpacket (rsp_demux_019_src3_startofpacket),                 //          .startofpacket
		.src3_endofpacket   (rsp_demux_019_src3_endofpacket),                   //          .endofpacket
		.src4_ready         (rsp_demux_019_src4_ready),                         //      src4.ready
		.src4_valid         (rsp_demux_019_src4_valid),                         //          .valid
		.src4_data          (rsp_demux_019_src4_data),                          //          .data
		.src4_channel       (rsp_demux_019_src4_channel),                       //          .channel
		.src4_startofpacket (rsp_demux_019_src4_startofpacket),                 //          .startofpacket
		.src4_endofpacket   (rsp_demux_019_src4_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_rsp_demux_019 rsp_demux_020 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_038_src_ready),                             //      sink.ready
		.sink_channel       (router_038_src_channel),                           //          .channel
		.sink_data          (router_038_src_data),                              //          .data
		.sink_startofpacket (router_038_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_038_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_038_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_020_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_020_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_020_src0_data),                          //          .data
		.src0_channel       (rsp_demux_020_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_020_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_020_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_020_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_020_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_020_src1_data),                          //          .data
		.src1_channel       (rsp_demux_020_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_020_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_020_src1_endofpacket),                   //          .endofpacket
		.src2_ready         (rsp_demux_020_src2_ready),                         //      src2.ready
		.src2_valid         (rsp_demux_020_src2_valid),                         //          .valid
		.src2_data          (rsp_demux_020_src2_data),                          //          .data
		.src2_channel       (rsp_demux_020_src2_channel),                       //          .channel
		.src2_startofpacket (rsp_demux_020_src2_startofpacket),                 //          .startofpacket
		.src2_endofpacket   (rsp_demux_020_src2_endofpacket),                   //          .endofpacket
		.src3_ready         (rsp_demux_020_src3_ready),                         //      src3.ready
		.src3_valid         (rsp_demux_020_src3_valid),                         //          .valid
		.src3_data          (rsp_demux_020_src3_data),                          //          .data
		.src3_channel       (rsp_demux_020_src3_channel),                       //          .channel
		.src3_startofpacket (rsp_demux_020_src3_startofpacket),                 //          .startofpacket
		.src3_endofpacket   (rsp_demux_020_src3_endofpacket),                   //          .endofpacket
		.src4_ready         (rsp_demux_020_src4_ready),                         //      src4.ready
		.src4_valid         (rsp_demux_020_src4_valid),                         //          .valid
		.src4_data          (rsp_demux_020_src4_data),                          //          .data
		.src4_channel       (rsp_demux_020_src4_channel),                       //          .channel
		.src4_startofpacket (rsp_demux_020_src4_startofpacket),                 //          .startofpacket
		.src4_endofpacket   (rsp_demux_020_src4_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_rsp_demux_021 rsp_demux_021 (
		.clk                (sys_clk_clk_clk),                                  //       clk.clk
		.reset              (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.sink_ready         (router_039_src_ready),                             //      sink.ready
		.sink_channel       (router_039_src_channel),                           //          .channel
		.sink_data          (router_039_src_data),                              //          .data
		.sink_startofpacket (router_039_src_startofpacket),                     //          .startofpacket
		.sink_endofpacket   (router_039_src_endofpacket),                       //          .endofpacket
		.sink_valid         (router_039_src_valid),                             //          .valid
		.src0_ready         (rsp_demux_021_src0_ready),                         //      src0.ready
		.src0_valid         (rsp_demux_021_src0_valid),                         //          .valid
		.src0_data          (rsp_demux_021_src0_data),                          //          .data
		.src0_channel       (rsp_demux_021_src0_channel),                       //          .channel
		.src0_startofpacket (rsp_demux_021_src0_startofpacket),                 //          .startofpacket
		.src0_endofpacket   (rsp_demux_021_src0_endofpacket),                   //          .endofpacket
		.src1_ready         (rsp_demux_021_src1_ready),                         //      src1.ready
		.src1_valid         (rsp_demux_021_src1_valid),                         //          .valid
		.src1_data          (rsp_demux_021_src1_data),                          //          .data
		.src1_channel       (rsp_demux_021_src1_channel),                       //          .channel
		.src1_startofpacket (rsp_demux_021_src1_startofpacket),                 //          .startofpacket
		.src1_endofpacket   (rsp_demux_021_src1_endofpacket),                   //          .endofpacket
		.src2_ready         (rsp_demux_021_src2_ready),                         //      src2.ready
		.src2_valid         (rsp_demux_021_src2_valid),                         //          .valid
		.src2_data          (rsp_demux_021_src2_data),                          //          .data
		.src2_channel       (rsp_demux_021_src2_channel),                       //          .channel
		.src2_startofpacket (rsp_demux_021_src2_startofpacket),                 //          .startofpacket
		.src2_endofpacket   (rsp_demux_021_src2_endofpacket),                   //          .endofpacket
		.src3_ready         (rsp_demux_021_src3_ready),                         //      src3.ready
		.src3_valid         (rsp_demux_021_src3_valid),                         //          .valid
		.src3_data          (rsp_demux_021_src3_data),                          //          .data
		.src3_channel       (rsp_demux_021_src3_channel),                       //          .channel
		.src3_startofpacket (rsp_demux_021_src3_startofpacket),                 //          .startofpacket
		.src3_endofpacket   (rsp_demux_021_src3_endofpacket),                   //          .endofpacket
		.src4_ready         (rsp_demux_021_src4_ready),                         //      src4.ready
		.src4_valid         (rsp_demux_021_src4_valid),                         //          .valid
		.src4_data          (rsp_demux_021_src4_data),                          //          .data
		.src4_channel       (rsp_demux_021_src4_channel),                       //          .channel
		.src4_startofpacket (rsp_demux_021_src4_startofpacket),                 //          .startofpacket
		.src4_endofpacket   (rsp_demux_021_src4_endofpacket),                   //          .endofpacket
		.src5_ready         (rsp_demux_021_src5_ready),                         //      src5.ready
		.src5_valid         (rsp_demux_021_src5_valid),                         //          .valid
		.src5_data          (rsp_demux_021_src5_data),                          //          .data
		.src5_channel       (rsp_demux_021_src5_channel),                       //          .channel
		.src5_startofpacket (rsp_demux_021_src5_startofpacket),                 //          .startofpacket
		.src5_endofpacket   (rsp_demux_021_src5_endofpacket),                   //          .endofpacket
		.src6_ready         (rsp_demux_021_src6_ready),                         //      src6.ready
		.src6_valid         (rsp_demux_021_src6_valid),                         //          .valid
		.src6_data          (rsp_demux_021_src6_data),                          //          .data
		.src6_channel       (rsp_demux_021_src6_channel),                       //          .channel
		.src6_startofpacket (rsp_demux_021_src6_startofpacket),                 //          .startofpacket
		.src6_endofpacket   (rsp_demux_021_src6_endofpacket),                   //          .endofpacket
		.src7_ready         (rsp_demux_021_src7_ready),                         //      src7.ready
		.src7_valid         (rsp_demux_021_src7_valid),                         //          .valid
		.src7_data          (rsp_demux_021_src7_data),                          //          .data
		.src7_channel       (rsp_demux_021_src7_channel),                       //          .channel
		.src7_startofpacket (rsp_demux_021_src7_startofpacket),                 //          .startofpacket
		.src7_endofpacket   (rsp_demux_021_src7_endofpacket),                   //          .endofpacket
		.src8_ready         (rsp_demux_021_src8_ready),                         //      src8.ready
		.src8_valid         (rsp_demux_021_src8_valid),                         //          .valid
		.src8_data          (rsp_demux_021_src8_data),                          //          .data
		.src8_channel       (rsp_demux_021_src8_channel),                       //          .channel
		.src8_startofpacket (rsp_demux_021_src8_startofpacket),                 //          .startofpacket
		.src8_endofpacket   (rsp_demux_021_src8_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_rsp_mux rsp_mux (
		.clk                  (sys_clk_clk_clk),                                  //       clk.clk
		.reset                (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready            (rsp_mux_src_ready),                                //       src.ready
		.src_valid            (rsp_mux_src_valid),                                //          .valid
		.src_data             (rsp_mux_src_data),                                 //          .data
		.src_channel          (rsp_mux_src_channel),                              //          .channel
		.src_startofpacket    (rsp_mux_src_startofpacket),                        //          .startofpacket
		.src_endofpacket      (rsp_mux_src_endofpacket),                          //          .endofpacket
		.sink0_ready          (rsp_demux_src0_ready),                             //     sink0.ready
		.sink0_valid          (rsp_demux_src0_valid),                             //          .valid
		.sink0_channel        (rsp_demux_src0_channel),                           //          .channel
		.sink0_data           (rsp_demux_src0_data),                              //          .data
		.sink0_startofpacket  (rsp_demux_src0_startofpacket),                     //          .startofpacket
		.sink0_endofpacket    (rsp_demux_src0_endofpacket),                       //          .endofpacket
		.sink1_ready          (crosser_001_out_ready),                            //     sink1.ready
		.sink1_valid          (crosser_001_out_valid),                            //          .valid
		.sink1_channel        (crosser_001_out_channel),                          //          .channel
		.sink1_data           (crosser_001_out_data),                             //          .data
		.sink1_startofpacket  (crosser_001_out_startofpacket),                    //          .startofpacket
		.sink1_endofpacket    (crosser_001_out_endofpacket),                      //          .endofpacket
		.sink2_ready          (rsp_demux_002_src0_ready),                         //     sink2.ready
		.sink2_valid          (rsp_demux_002_src0_valid),                         //          .valid
		.sink2_channel        (rsp_demux_002_src0_channel),                       //          .channel
		.sink2_data           (rsp_demux_002_src0_data),                          //          .data
		.sink2_startofpacket  (rsp_demux_002_src0_startofpacket),                 //          .startofpacket
		.sink2_endofpacket    (rsp_demux_002_src0_endofpacket),                   //          .endofpacket
		.sink3_ready          (rsp_demux_003_src0_ready),                         //     sink3.ready
		.sink3_valid          (rsp_demux_003_src0_valid),                         //          .valid
		.sink3_channel        (rsp_demux_003_src0_channel),                       //          .channel
		.sink3_data           (rsp_demux_003_src0_data),                          //          .data
		.sink3_startofpacket  (rsp_demux_003_src0_startofpacket),                 //          .startofpacket
		.sink3_endofpacket    (rsp_demux_003_src0_endofpacket),                   //          .endofpacket
		.sink4_ready          (rsp_demux_004_src0_ready),                         //     sink4.ready
		.sink4_valid          (rsp_demux_004_src0_valid),                         //          .valid
		.sink4_channel        (rsp_demux_004_src0_channel),                       //          .channel
		.sink4_data           (rsp_demux_004_src0_data),                          //          .data
		.sink4_startofpacket  (rsp_demux_004_src0_startofpacket),                 //          .startofpacket
		.sink4_endofpacket    (rsp_demux_004_src0_endofpacket),                   //          .endofpacket
		.sink5_ready          (rsp_demux_005_src0_ready),                         //     sink5.ready
		.sink5_valid          (rsp_demux_005_src0_valid),                         //          .valid
		.sink5_channel        (rsp_demux_005_src0_channel),                       //          .channel
		.sink5_data           (rsp_demux_005_src0_data),                          //          .data
		.sink5_startofpacket  (rsp_demux_005_src0_startofpacket),                 //          .startofpacket
		.sink5_endofpacket    (rsp_demux_005_src0_endofpacket),                   //          .endofpacket
		.sink6_ready          (rsp_demux_006_src0_ready),                         //     sink6.ready
		.sink6_valid          (rsp_demux_006_src0_valid),                         //          .valid
		.sink6_channel        (rsp_demux_006_src0_channel),                       //          .channel
		.sink6_data           (rsp_demux_006_src0_data),                          //          .data
		.sink6_startofpacket  (rsp_demux_006_src0_startofpacket),                 //          .startofpacket
		.sink6_endofpacket    (rsp_demux_006_src0_endofpacket),                   //          .endofpacket
		.sink7_ready          (rsp_demux_007_src0_ready),                         //     sink7.ready
		.sink7_valid          (rsp_demux_007_src0_valid),                         //          .valid
		.sink7_channel        (rsp_demux_007_src0_channel),                       //          .channel
		.sink7_data           (rsp_demux_007_src0_data),                          //          .data
		.sink7_startofpacket  (rsp_demux_007_src0_startofpacket),                 //          .startofpacket
		.sink7_endofpacket    (rsp_demux_007_src0_endofpacket),                   //          .endofpacket
		.sink8_ready          (rsp_demux_008_src0_ready),                         //     sink8.ready
		.sink8_valid          (rsp_demux_008_src0_valid),                         //          .valid
		.sink8_channel        (rsp_demux_008_src0_channel),                       //          .channel
		.sink8_data           (rsp_demux_008_src0_data),                          //          .data
		.sink8_startofpacket  (rsp_demux_008_src0_startofpacket),                 //          .startofpacket
		.sink8_endofpacket    (rsp_demux_008_src0_endofpacket),                   //          .endofpacket
		.sink9_ready          (rsp_demux_009_src0_ready),                         //     sink9.ready
		.sink9_valid          (rsp_demux_009_src0_valid),                         //          .valid
		.sink9_channel        (rsp_demux_009_src0_channel),                       //          .channel
		.sink9_data           (rsp_demux_009_src0_data),                          //          .data
		.sink9_startofpacket  (rsp_demux_009_src0_startofpacket),                 //          .startofpacket
		.sink9_endofpacket    (rsp_demux_009_src0_endofpacket),                   //          .endofpacket
		.sink10_ready         (rsp_demux_010_src0_ready),                         //    sink10.ready
		.sink10_valid         (rsp_demux_010_src0_valid),                         //          .valid
		.sink10_channel       (rsp_demux_010_src0_channel),                       //          .channel
		.sink10_data          (rsp_demux_010_src0_data),                          //          .data
		.sink10_startofpacket (rsp_demux_010_src0_startofpacket),                 //          .startofpacket
		.sink10_endofpacket   (rsp_demux_010_src0_endofpacket),                   //          .endofpacket
		.sink11_ready         (rsp_demux_011_src0_ready),                         //    sink11.ready
		.sink11_valid         (rsp_demux_011_src0_valid),                         //          .valid
		.sink11_channel       (rsp_demux_011_src0_channel),                       //          .channel
		.sink11_data          (rsp_demux_011_src0_data),                          //          .data
		.sink11_startofpacket (rsp_demux_011_src0_startofpacket),                 //          .startofpacket
		.sink11_endofpacket   (rsp_demux_011_src0_endofpacket),                   //          .endofpacket
		.sink12_ready         (rsp_demux_012_src0_ready),                         //    sink12.ready
		.sink12_valid         (rsp_demux_012_src0_valid),                         //          .valid
		.sink12_channel       (rsp_demux_012_src0_channel),                       //          .channel
		.sink12_data          (rsp_demux_012_src0_data),                          //          .data
		.sink12_startofpacket (rsp_demux_012_src0_startofpacket),                 //          .startofpacket
		.sink12_endofpacket   (rsp_demux_012_src0_endofpacket),                   //          .endofpacket
		.sink13_ready         (rsp_demux_013_src0_ready),                         //    sink13.ready
		.sink13_valid         (rsp_demux_013_src0_valid),                         //          .valid
		.sink13_channel       (rsp_demux_013_src0_channel),                       //          .channel
		.sink13_data          (rsp_demux_013_src0_data),                          //          .data
		.sink13_startofpacket (rsp_demux_013_src0_startofpacket),                 //          .startofpacket
		.sink13_endofpacket   (rsp_demux_013_src0_endofpacket),                   //          .endofpacket
		.sink14_ready         (rsp_demux_014_src0_ready),                         //    sink14.ready
		.sink14_valid         (rsp_demux_014_src0_valid),                         //          .valid
		.sink14_channel       (rsp_demux_014_src0_channel),                       //          .channel
		.sink14_data          (rsp_demux_014_src0_data),                          //          .data
		.sink14_startofpacket (rsp_demux_014_src0_startofpacket),                 //          .startofpacket
		.sink14_endofpacket   (rsp_demux_014_src0_endofpacket),                   //          .endofpacket
		.sink15_ready         (rsp_demux_015_src0_ready),                         //    sink15.ready
		.sink15_valid         (rsp_demux_015_src0_valid),                         //          .valid
		.sink15_channel       (rsp_demux_015_src0_channel),                       //          .channel
		.sink15_data          (rsp_demux_015_src0_data),                          //          .data
		.sink15_startofpacket (rsp_demux_015_src0_startofpacket),                 //          .startofpacket
		.sink15_endofpacket   (rsp_demux_015_src0_endofpacket),                   //          .endofpacket
		.sink16_ready         (rsp_demux_016_src0_ready),                         //    sink16.ready
		.sink16_valid         (rsp_demux_016_src0_valid),                         //          .valid
		.sink16_channel       (rsp_demux_016_src0_channel),                       //          .channel
		.sink16_data          (rsp_demux_016_src0_data),                          //          .data
		.sink16_startofpacket (rsp_demux_016_src0_startofpacket),                 //          .startofpacket
		.sink16_endofpacket   (rsp_demux_016_src0_endofpacket),                   //          .endofpacket
		.sink17_ready         (rsp_demux_017_src0_ready),                         //    sink17.ready
		.sink17_valid         (rsp_demux_017_src0_valid),                         //          .valid
		.sink17_channel       (rsp_demux_017_src0_channel),                       //          .channel
		.sink17_data          (rsp_demux_017_src0_data),                          //          .data
		.sink17_startofpacket (rsp_demux_017_src0_startofpacket),                 //          .startofpacket
		.sink17_endofpacket   (rsp_demux_017_src0_endofpacket),                   //          .endofpacket
		.sink18_ready         (rsp_demux_018_src0_ready),                         //    sink18.ready
		.sink18_valid         (rsp_demux_018_src0_valid),                         //          .valid
		.sink18_channel       (rsp_demux_018_src0_channel),                       //          .channel
		.sink18_data          (rsp_demux_018_src0_data),                          //          .data
		.sink18_startofpacket (rsp_demux_018_src0_startofpacket),                 //          .startofpacket
		.sink18_endofpacket   (rsp_demux_018_src0_endofpacket),                   //          .endofpacket
		.sink19_ready         (rsp_demux_019_src0_ready),                         //    sink19.ready
		.sink19_valid         (rsp_demux_019_src0_valid),                         //          .valid
		.sink19_channel       (rsp_demux_019_src0_channel),                       //          .channel
		.sink19_data          (rsp_demux_019_src0_data),                          //          .data
		.sink19_startofpacket (rsp_demux_019_src0_startofpacket),                 //          .startofpacket
		.sink19_endofpacket   (rsp_demux_019_src0_endofpacket),                   //          .endofpacket
		.sink20_ready         (rsp_demux_020_src0_ready),                         //    sink20.ready
		.sink20_valid         (rsp_demux_020_src0_valid),                         //          .valid
		.sink20_channel       (rsp_demux_020_src0_channel),                       //          .channel
		.sink20_data          (rsp_demux_020_src0_data),                          //          .data
		.sink20_startofpacket (rsp_demux_020_src0_startofpacket),                 //          .startofpacket
		.sink20_endofpacket   (rsp_demux_020_src0_endofpacket),                   //          .endofpacket
		.sink21_ready         (rsp_demux_021_src0_ready),                         //    sink21.ready
		.sink21_valid         (rsp_demux_021_src0_valid),                         //          .valid
		.sink21_channel       (rsp_demux_021_src0_channel),                       //          .channel
		.sink21_data          (rsp_demux_021_src0_data),                          //          .data
		.sink21_startofpacket (rsp_demux_021_src0_startofpacket),                 //          .startofpacket
		.sink21_endofpacket   (rsp_demux_021_src0_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_rsp_mux_001 rsp_mux_001 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_001_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_001_src_valid),                            //          .valid
		.src_data            (rsp_mux_001_src_data),                             //          .data
		.src_channel         (rsp_mux_001_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_001_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_001_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_021_src1_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_021_src1_valid),                         //          .valid
		.sink0_channel       (rsp_demux_021_src1_channel),                       //          .channel
		.sink0_data          (rsp_demux_021_src1_data),                          //          .data
		.sink0_startofpacket (rsp_demux_021_src1_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_021_src1_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_rsp_mux_001 rsp_mux_002 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_002_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_002_src_valid),                            //          .valid
		.src_data            (rsp_mux_002_src_data),                             //          .data
		.src_channel         (rsp_mux_002_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_002_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_002_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_021_src2_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_021_src2_valid),                         //          .valid
		.sink0_channel       (rsp_demux_021_src2_channel),                       //          .channel
		.sink0_data          (rsp_demux_021_src2_data),                          //          .data
		.sink0_startofpacket (rsp_demux_021_src2_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_021_src2_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_rsp_mux_001 rsp_mux_003 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_003_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_003_src_valid),                            //          .valid
		.src_data            (rsp_mux_003_src_data),                             //          .data
		.src_channel         (rsp_mux_003_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_003_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_003_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_021_src3_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_021_src3_valid),                         //          .valid
		.sink0_channel       (rsp_demux_021_src3_channel),                       //          .channel
		.sink0_data          (rsp_demux_021_src3_data),                          //          .data
		.sink0_startofpacket (rsp_demux_021_src3_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_021_src3_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_rsp_mux_001 rsp_mux_004 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_004_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_004_src_valid),                            //          .valid
		.src_data            (rsp_mux_004_src_data),                             //          .data
		.src_channel         (rsp_mux_004_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_004_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_004_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_021_src4_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_021_src4_valid),                         //          .valid
		.sink0_channel       (rsp_demux_021_src4_channel),                       //          .channel
		.sink0_data          (rsp_demux_021_src4_data),                          //          .data
		.sink0_startofpacket (rsp_demux_021_src4_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_021_src4_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_rsp_mux_001 rsp_mux_005 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_005_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_005_src_valid),                            //          .valid
		.src_data            (rsp_mux_005_src_data),                             //          .data
		.src_channel         (rsp_mux_005_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_005_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_005_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_021_src5_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_021_src5_valid),                         //          .valid
		.sink0_channel       (rsp_demux_021_src5_channel),                       //          .channel
		.sink0_data          (rsp_demux_021_src5_data),                          //          .data
		.sink0_startofpacket (rsp_demux_021_src5_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_021_src5_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_rsp_mux_001 rsp_mux_006 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_006_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_006_src_valid),                            //          .valid
		.src_data            (rsp_mux_006_src_data),                             //          .data
		.src_channel         (rsp_mux_006_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_006_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_006_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_021_src6_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_021_src6_valid),                         //          .valid
		.sink0_channel       (rsp_demux_021_src6_channel),                       //          .channel
		.sink0_data          (rsp_demux_021_src6_data),                          //          .data
		.sink0_startofpacket (rsp_demux_021_src6_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_021_src6_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_rsp_mux_001 rsp_mux_007 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_007_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_007_src_valid),                            //          .valid
		.src_data            (rsp_mux_007_src_data),                             //          .data
		.src_channel         (rsp_mux_007_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_007_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_007_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_021_src7_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_021_src7_valid),                         //          .valid
		.sink0_channel       (rsp_demux_021_src7_channel),                       //          .channel
		.sink0_data          (rsp_demux_021_src7_data),                          //          .data
		.sink0_startofpacket (rsp_demux_021_src7_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_021_src7_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_rsp_mux_001 rsp_mux_008 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_008_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_008_src_valid),                            //          .valid
		.src_data            (rsp_mux_008_src_data),                             //          .data
		.src_channel         (rsp_mux_008_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_008_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_008_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_021_src8_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_021_src8_valid),                         //          .valid
		.sink0_channel       (rsp_demux_021_src8_channel),                       //          .channel
		.sink0_data          (rsp_demux_021_src8_data),                          //          .data
		.sink0_startofpacket (rsp_demux_021_src8_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_021_src8_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_rsp_mux_001 rsp_mux_009 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_009_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_009_src_valid),                            //          .valid
		.src_data            (rsp_mux_009_src_data),                             //          .data
		.src_channel         (rsp_mux_009_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_009_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_009_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_020_src1_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_020_src1_valid),                         //          .valid
		.sink0_channel       (rsp_demux_020_src1_channel),                       //          .channel
		.sink0_data          (rsp_demux_020_src1_data),                          //          .data
		.sink0_startofpacket (rsp_demux_020_src1_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_020_src1_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_rsp_mux_001 rsp_mux_010 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_010_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_010_src_valid),                            //          .valid
		.src_data            (rsp_mux_010_src_data),                             //          .data
		.src_channel         (rsp_mux_010_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_010_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_010_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_020_src2_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_020_src2_valid),                         //          .valid
		.sink0_channel       (rsp_demux_020_src2_channel),                       //          .channel
		.sink0_data          (rsp_demux_020_src2_data),                          //          .data
		.sink0_startofpacket (rsp_demux_020_src2_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_020_src2_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_rsp_mux_001 rsp_mux_011 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_011_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_011_src_valid),                            //          .valid
		.src_data            (rsp_mux_011_src_data),                             //          .data
		.src_channel         (rsp_mux_011_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_011_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_011_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_020_src3_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_020_src3_valid),                         //          .valid
		.sink0_channel       (rsp_demux_020_src3_channel),                       //          .channel
		.sink0_data          (rsp_demux_020_src3_data),                          //          .data
		.sink0_startofpacket (rsp_demux_020_src3_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_020_src3_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_rsp_mux_001 rsp_mux_012 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_012_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_012_src_valid),                            //          .valid
		.src_data            (rsp_mux_012_src_data),                             //          .data
		.src_channel         (rsp_mux_012_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_012_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_012_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_020_src4_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_020_src4_valid),                         //          .valid
		.sink0_channel       (rsp_demux_020_src4_channel),                       //          .channel
		.sink0_data          (rsp_demux_020_src4_data),                          //          .data
		.sink0_startofpacket (rsp_demux_020_src4_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_020_src4_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_rsp_mux_001 rsp_mux_013 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_013_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_013_src_valid),                            //          .valid
		.src_data            (rsp_mux_013_src_data),                             //          .data
		.src_channel         (rsp_mux_013_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_013_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_013_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_019_src1_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_019_src1_valid),                         //          .valid
		.sink0_channel       (rsp_demux_019_src1_channel),                       //          .channel
		.sink0_data          (rsp_demux_019_src1_data),                          //          .data
		.sink0_startofpacket (rsp_demux_019_src1_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_019_src1_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_rsp_mux_001 rsp_mux_014 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_014_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_014_src_valid),                            //          .valid
		.src_data            (rsp_mux_014_src_data),                             //          .data
		.src_channel         (rsp_mux_014_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_014_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_014_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_019_src2_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_019_src2_valid),                         //          .valid
		.sink0_channel       (rsp_demux_019_src2_channel),                       //          .channel
		.sink0_data          (rsp_demux_019_src2_data),                          //          .data
		.sink0_startofpacket (rsp_demux_019_src2_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_019_src2_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_rsp_mux_001 rsp_mux_015 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_015_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_015_src_valid),                            //          .valid
		.src_data            (rsp_mux_015_src_data),                             //          .data
		.src_channel         (rsp_mux_015_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_015_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_015_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_019_src3_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_019_src3_valid),                         //          .valid
		.sink0_channel       (rsp_demux_019_src3_channel),                       //          .channel
		.sink0_data          (rsp_demux_019_src3_data),                          //          .data
		.sink0_startofpacket (rsp_demux_019_src3_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_019_src3_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_rsp_mux_001 rsp_mux_016 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_016_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_016_src_valid),                            //          .valid
		.src_data            (rsp_mux_016_src_data),                             //          .data
		.src_channel         (rsp_mux_016_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_016_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_016_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_019_src4_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_019_src4_valid),                         //          .valid
		.sink0_channel       (rsp_demux_019_src4_channel),                       //          .channel
		.sink0_data          (rsp_demux_019_src4_data),                          //          .data
		.sink0_startofpacket (rsp_demux_019_src4_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_019_src4_endofpacket)                    //          .endofpacket
	);

	TEDv3_architecture_mm_interconnect_0_rsp_mux_017 rsp_mux_017 (
		.clk                 (sys_clk_clk_clk),                                  //       clk.clk
		.reset               (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // clk_reset.reset
		.src_ready           (rsp_mux_017_src_ready),                            //       src.ready
		.src_valid           (rsp_mux_017_src_valid),                            //          .valid
		.src_data            (rsp_mux_017_src_data),                             //          .data
		.src_channel         (rsp_mux_017_src_channel),                          //          .channel
		.src_startofpacket   (rsp_mux_017_src_startofpacket),                    //          .startofpacket
		.src_endofpacket     (rsp_mux_017_src_endofpacket),                      //          .endofpacket
		.sink0_ready         (rsp_demux_012_src1_ready),                         //     sink0.ready
		.sink0_valid         (rsp_demux_012_src1_valid),                         //          .valid
		.sink0_channel       (rsp_demux_012_src1_channel),                       //          .channel
		.sink0_data          (rsp_demux_012_src1_data),                          //          .data
		.sink0_startofpacket (rsp_demux_012_src1_startofpacket),                 //          .startofpacket
		.sink0_endofpacket   (rsp_demux_012_src1_endofpacket),                   //          .endofpacket
		.sink1_ready         (rsp_demux_016_src1_ready),                         //     sink1.ready
		.sink1_valid         (rsp_demux_016_src1_valid),                         //          .valid
		.sink1_channel       (rsp_demux_016_src1_channel),                       //          .channel
		.sink1_data          (rsp_demux_016_src1_data),                          //          .data
		.sink1_startofpacket (rsp_demux_016_src1_startofpacket),                 //          .startofpacket
		.sink1_endofpacket   (rsp_demux_016_src1_endofpacket),                   //          .endofpacket
		.sink2_ready         (rsp_demux_017_src1_ready),                         //     sink2.ready
		.sink2_valid         (rsp_demux_017_src1_valid),                         //          .valid
		.sink2_channel       (rsp_demux_017_src1_channel),                       //          .channel
		.sink2_data          (rsp_demux_017_src1_data),                          //          .data
		.sink2_startofpacket (rsp_demux_017_src1_startofpacket),                 //          .startofpacket
		.sink2_endofpacket   (rsp_demux_017_src1_endofpacket)                    //          .endofpacket
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (40),
		.IN_PKT_ADDR_L                 (9),
		.IN_PKT_DATA_H                 (7),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (8),
		.IN_PKT_BYTEEN_L               (8),
		.IN_PKT_BYTE_CNT_H             (49),
		.IN_PKT_BYTE_CNT_L             (47),
		.IN_PKT_TRANS_COMPRESSED_READ  (41),
		.IN_PKT_BURSTWRAP_H            (52),
		.IN_PKT_BURSTWRAP_L            (50),
		.IN_PKT_BURST_SIZE_H           (55),
		.IN_PKT_BURST_SIZE_L           (53),
		.IN_PKT_RESPONSE_STATUS_H      (81),
		.IN_PKT_RESPONSE_STATUS_L      (80),
		.IN_PKT_TRANS_EXCLUSIVE        (46),
		.IN_PKT_BURST_TYPE_H           (57),
		.IN_PKT_BURST_TYPE_L           (56),
		.IN_PKT_ORI_BURST_SIZE_L       (82),
		.IN_PKT_ORI_BURST_SIZE_H       (84),
		.IN_ST_DATA_W                  (85),
		.OUT_PKT_ADDR_H                (67),
		.OUT_PKT_ADDR_L                (36),
		.OUT_PKT_DATA_H                (31),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (35),
		.OUT_PKT_BYTEEN_L              (32),
		.OUT_PKT_BYTE_CNT_H            (76),
		.OUT_PKT_BYTE_CNT_L            (74),
		.OUT_PKT_TRANS_COMPRESSED_READ (68),
		.OUT_PKT_BURST_SIZE_H          (82),
		.OUT_PKT_BURST_SIZE_L          (80),
		.OUT_PKT_RESPONSE_STATUS_H     (108),
		.OUT_PKT_RESPONSE_STATUS_L     (107),
		.OUT_PKT_TRANS_EXCLUSIVE       (73),
		.OUT_PKT_BURST_TYPE_H          (84),
		.OUT_PKT_BURST_TYPE_L          (83),
		.OUT_PKT_ORI_BURST_SIZE_L      (109),
		.OUT_PKT_ORI_BURST_SIZE_H      (111),
		.OUT_ST_DATA_W                 (112),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (1),
		.RESPONSE_PATH                 (1),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) lcd_avalon_lcd_slave_rsp_width_adapter (
		.clk                  (lcd_clk_c0_clk),                                           //       clk.clk
		.reset                (lcd_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_valid             (router_019_src_valid),                                     //      sink.valid
		.in_channel           (router_019_src_channel),                                   //          .channel
		.in_startofpacket     (router_019_src_startofpacket),                             //          .startofpacket
		.in_endofpacket       (router_019_src_endofpacket),                               //          .endofpacket
		.in_ready             (router_019_src_ready),                                     //          .ready
		.in_data              (router_019_src_data),                                      //          .data
		.out_endofpacket      (lcd_avalon_lcd_slave_rsp_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (lcd_avalon_lcd_slave_rsp_width_adapter_src_data),          //          .data
		.out_channel          (lcd_avalon_lcd_slave_rsp_width_adapter_src_channel),       //          .channel
		.out_valid            (lcd_avalon_lcd_slave_rsp_width_adapter_src_valid),         //          .valid
		.out_ready            (lcd_avalon_lcd_slave_rsp_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (lcd_avalon_lcd_slave_rsp_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                    // (terminated)
	);

	altera_merlin_width_adapter #(
		.IN_PKT_ADDR_H                 (67),
		.IN_PKT_ADDR_L                 (36),
		.IN_PKT_DATA_H                 (31),
		.IN_PKT_DATA_L                 (0),
		.IN_PKT_BYTEEN_H               (35),
		.IN_PKT_BYTEEN_L               (32),
		.IN_PKT_BYTE_CNT_H             (76),
		.IN_PKT_BYTE_CNT_L             (74),
		.IN_PKT_TRANS_COMPRESSED_READ  (68),
		.IN_PKT_BURSTWRAP_H            (79),
		.IN_PKT_BURSTWRAP_L            (77),
		.IN_PKT_BURST_SIZE_H           (82),
		.IN_PKT_BURST_SIZE_L           (80),
		.IN_PKT_RESPONSE_STATUS_H      (108),
		.IN_PKT_RESPONSE_STATUS_L      (107),
		.IN_PKT_TRANS_EXCLUSIVE        (73),
		.IN_PKT_BURST_TYPE_H           (84),
		.IN_PKT_BURST_TYPE_L           (83),
		.IN_PKT_ORI_BURST_SIZE_L       (109),
		.IN_PKT_ORI_BURST_SIZE_H       (111),
		.IN_ST_DATA_W                  (112),
		.OUT_PKT_ADDR_H                (40),
		.OUT_PKT_ADDR_L                (9),
		.OUT_PKT_DATA_H                (7),
		.OUT_PKT_DATA_L                (0),
		.OUT_PKT_BYTEEN_H              (8),
		.OUT_PKT_BYTEEN_L              (8),
		.OUT_PKT_BYTE_CNT_H            (49),
		.OUT_PKT_BYTE_CNT_L            (47),
		.OUT_PKT_TRANS_COMPRESSED_READ (41),
		.OUT_PKT_BURST_SIZE_H          (55),
		.OUT_PKT_BURST_SIZE_L          (53),
		.OUT_PKT_RESPONSE_STATUS_H     (81),
		.OUT_PKT_RESPONSE_STATUS_L     (80),
		.OUT_PKT_TRANS_EXCLUSIVE       (46),
		.OUT_PKT_BURST_TYPE_H          (57),
		.OUT_PKT_BURST_TYPE_L          (56),
		.OUT_PKT_ORI_BURST_SIZE_L      (82),
		.OUT_PKT_ORI_BURST_SIZE_H      (84),
		.OUT_ST_DATA_W                 (85),
		.ST_CHANNEL_W                  (22),
		.OPTIMIZE_FOR_RSP              (0),
		.RESPONSE_PATH                 (0),
		.CONSTANT_BURST_SIZE           (1),
		.PACKING                       (1),
		.ENABLE_ADDRESS_ALIGNMENT      (0)
	) lcd_avalon_lcd_slave_cmd_width_adapter (
		.clk                  (lcd_clk_c0_clk),                                           //       clk.clk
		.reset                (lcd_reset_reset_bridge_in_reset_reset),                    // clk_reset.reset
		.in_valid             (cmd_mux_001_src_valid),                                    //      sink.valid
		.in_channel           (cmd_mux_001_src_channel),                                  //          .channel
		.in_startofpacket     (cmd_mux_001_src_startofpacket),                            //          .startofpacket
		.in_endofpacket       (cmd_mux_001_src_endofpacket),                              //          .endofpacket
		.in_ready             (cmd_mux_001_src_ready),                                    //          .ready
		.in_data              (cmd_mux_001_src_data),                                     //          .data
		.out_endofpacket      (lcd_avalon_lcd_slave_cmd_width_adapter_src_endofpacket),   //       src.endofpacket
		.out_data             (lcd_avalon_lcd_slave_cmd_width_adapter_src_data),          //          .data
		.out_channel          (lcd_avalon_lcd_slave_cmd_width_adapter_src_channel),       //          .channel
		.out_valid            (lcd_avalon_lcd_slave_cmd_width_adapter_src_valid),         //          .valid
		.out_ready            (lcd_avalon_lcd_slave_cmd_width_adapter_src_ready),         //          .ready
		.out_startofpacket    (lcd_avalon_lcd_slave_cmd_width_adapter_src_startofpacket), //          .startofpacket
		.in_command_size_data (3'b000)                                                    // (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (112),
		.BITS_PER_SYMBOL     (112),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser (
		.in_clk            (sys_clk_clk_clk),                                  //        in_clk.clk
		.in_reset          (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), //  in_clk_reset.reset
		.out_clk           (lcd_clk_c0_clk),                                   //       out_clk.clk
		.out_reset         (lcd_reset_reset_bridge_in_reset_reset),            // out_clk_reset.reset
		.in_ready          (cmd_demux_src1_ready),                             //            in.ready
		.in_valid          (cmd_demux_src1_valid),                             //              .valid
		.in_startofpacket  (cmd_demux_src1_startofpacket),                     //              .startofpacket
		.in_endofpacket    (cmd_demux_src1_endofpacket),                       //              .endofpacket
		.in_channel        (cmd_demux_src1_channel),                           //              .channel
		.in_data           (cmd_demux_src1_data),                              //              .data
		.out_ready         (crosser_out_ready),                                //           out.ready
		.out_valid         (crosser_out_valid),                                //              .valid
		.out_startofpacket (crosser_out_startofpacket),                        //              .startofpacket
		.out_endofpacket   (crosser_out_endofpacket),                          //              .endofpacket
		.out_channel       (crosser_out_channel),                              //              .channel
		.out_data          (crosser_out_data),                                 //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

	altera_avalon_st_handshake_clock_crosser #(
		.DATA_WIDTH          (112),
		.BITS_PER_SYMBOL     (112),
		.USE_PACKETS         (1),
		.USE_CHANNEL         (1),
		.CHANNEL_WIDTH       (22),
		.USE_ERROR           (0),
		.ERROR_WIDTH         (1),
		.VALID_SYNC_DEPTH    (2),
		.READY_SYNC_DEPTH    (2),
		.USE_OUTPUT_PIPELINE (0)
	) crosser_001 (
		.in_clk            (lcd_clk_c0_clk),                                   //        in_clk.clk
		.in_reset          (lcd_reset_reset_bridge_in_reset_reset),            //  in_clk_reset.reset
		.out_clk           (sys_clk_clk_clk),                                  //       out_clk.clk
		.out_reset         (nios2_qsys_0_reset_n_reset_bridge_in_reset_reset), // out_clk_reset.reset
		.in_ready          (rsp_demux_001_src0_ready),                         //            in.ready
		.in_valid          (rsp_demux_001_src0_valid),                         //              .valid
		.in_startofpacket  (rsp_demux_001_src0_startofpacket),                 //              .startofpacket
		.in_endofpacket    (rsp_demux_001_src0_endofpacket),                   //              .endofpacket
		.in_channel        (rsp_demux_001_src0_channel),                       //              .channel
		.in_data           (rsp_demux_001_src0_data),                          //              .data
		.out_ready         (crosser_001_out_ready),                            //           out.ready
		.out_valid         (crosser_001_out_valid),                            //              .valid
		.out_startofpacket (crosser_001_out_startofpacket),                    //              .startofpacket
		.out_endofpacket   (crosser_001_out_endofpacket),                      //              .endofpacket
		.out_channel       (crosser_001_out_channel),                          //              .channel
		.out_data          (crosser_001_out_data),                             //              .data
		.in_empty          (1'b0),                                             //   (terminated)
		.in_error          (1'b0),                                             //   (terminated)
		.out_empty         (),                                                 //   (terminated)
		.out_error         ()                                                  //   (terminated)
	);

endmodule
