
TEDv3.elf:     file format elf32-littlenios2
TEDv3.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0010031c

Program Header:
    LOAD off    0x00001000 vaddr 0x00100000 paddr 0x00100000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00100020 paddr 0x00100020 align 2**12
         filesz 0x00016bf0 memsz 0x00016bf0 flags r-x
    LOAD off    0x00017c10 vaddr 0x00116c10 paddr 0x0011880c align 2**12
         filesz 0x00001bfc memsz 0x00001bfc flags rw-
    LOAD off    0x0001a408 vaddr 0x0011a408 paddr 0x0011a408 align 2**12
         filesz 0x00000000 memsz 0x00000178 flags rw-
    LOAD off    0x0001a000 vaddr 0x00000000 paddr 0x0011a580 align 2**12
         filesz 0x00000c00 memsz 0x00000c00 flags rw-
    LOAD off    0x0001b000 vaddr 0x01000000 paddr 0x0011b180 align 2**12
         filesz 0x00008e80 memsz 0x00008e80 flags rw-
    LOAD off    0x00024000 vaddr 0x02000000 paddr 0x00124000 align 2**12
         filesz 0x00008e80 memsz 0x00008e80 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00100000  00100000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000002fc  00100020  00100020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00015ca8  0010031c  0010031c  0000131c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000c4c  00115fc4  00115fc4  00016fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bfc  00116c10  0011880c  00017c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000178  0011a408  0011a408  0001a408  2**2
                  ALLOC, SMALL_DATA
  6 .descriptor_mem 00000c00  00000000  0011a580  0001a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .heap_stack   00000000  00028000  00028000  0002ce80  2**0
                  CONTENTS
  8 .instruction_memory 00000000  0011b180  0011b180  0002ce80  2**0
                  CONTENTS
  9 .red_to_black_memory 00008e80  01000000  0011b180  0001b000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .black_to_red_memory 00008e80  02000000  00124000  00024000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 11 .comment      00000039  00000000  00000000  0002ce80  2**0
                  CONTENTS, READONLY
 12 .debug_aranges 00000f88  00000000  00000000  0002cec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0002dc94  00000000  00000000  0002de48  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 0000b663  00000000  00000000  0005badc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000df14  00000000  00000000  0006713f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  000027a8  00000000  00000000  00075054  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000047fb  00000000  00000000  000777fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0001ee23  00000000  00000000  0007bff7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_alt_sim_info 00000010  00000000  00000000  0009ae1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_ranges 00001788  00000000  00000000  0009ae30  2**3
                  CONTENTS, READONLY, DEBUGGING
 21 .thread_model 00000003  00000000  00000000  000a081b  2**0
                  CONTENTS, READONLY
 22 .cpu          0000000c  00000000  00000000  000a081e  2**0
                  CONTENTS, READONLY
 23 .qsys         00000001  00000000  00000000  000a082a  2**0
                  CONTENTS, READONLY
 24 .simulation_enabled 00000001  00000000  00000000  000a082b  2**0
                  CONTENTS, READONLY
 25 .sysid_hash   00000004  00000000  00000000  000a082c  2**0
                  CONTENTS, READONLY
 26 .sysid_base   00000004  00000000  00000000  000a0830  2**0
                  CONTENTS, READONLY
 27 .sysid_time   00000004  00000000  00000000  000a0834  2**0
                  CONTENTS, READONLY
 28 .stderr_dev   00000009  00000000  00000000  000a0838  2**0
                  CONTENTS, READONLY
 29 .stdin_dev    00000009  00000000  00000000  000a0841  2**0
                  CONTENTS, READONLY
 30 .stdout_dev   00000009  00000000  00000000  000a084a  2**0
                  CONTENTS, READONLY
 31 .sopc_system_name 00000012  00000000  00000000  000a0853  2**0
                  CONTENTS, READONLY
 32 .quartus_project_dir 0000003e  00000000  00000000  000a0865  2**0
                  CONTENTS, READONLY
 33 .jdi          00004878  00000000  00000000  000a08a3  2**0
                  CONTENTS, READONLY
 34 .sopcinfo     000e65b5  00000000  00000000  000a511b  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00100000 l    d  .entry	00000000 .entry
00100020 l    d  .exceptions	00000000 .exceptions
0010031c l    d  .text	00000000 .text
00115fc4 l    d  .rodata	00000000 .rodata
00116c10 l    d  .rwdata	00000000 .rwdata
0011a408 l    d  .bss	00000000 .bss
00000000 l    d  .descriptor_mem	00000000 .descriptor_mem
00028000 l    d  .heap_stack	00000000 .heap_stack
0011b180 l    d  .instruction_memory	00000000 .instruction_memory
01000000 l    d  .red_to_black_memory	00000000 .red_to_black_memory
02000000 l    d  .black_to_red_memory	00000000 .black_to_red_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../TEDv3_bsp//obj/HAL/src/crt0.o
00100354 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00100260 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 DecryptCheck.c
00000000 l    df *ABS*	00000000 EncryptCheck.c
00000000 l    df *ABS*	00000000 PacketProcessor_Black_Rx.c
00000000 l    df *ABS*	00000000 PacketProcessor_Red_Rx.c
00000000 l    df *ABS*	00000000 TargetList.c
0011a408 l     O .bss	00000004 lastTargetNumber.2931
00000000 l    df *ABS*	00000000 circular_fifo.c
00000000 l    df *ABS*	00000000 hex.c
00000000 l    df *ABS*	00000000 lcd.c
00000000 l    df *ABS*	00000000 led.c
00000000 l    df *ABS*	00000000 mac.c
00000000 l    df *ABS*	00000000 main.c
0010239c l     F .text	00000058 __list_add
001023f4 l     F .text	00000044 list_add_tail
00102438 l     F .text	0000003c __list_del
00102474 l     F .text	00000054 list_move_tail
00000000 l    df *ABS*	00000000 printpacket.c
00000000 l    df *ABS*	00000000 sw.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00103e08 l     F .text	00000070 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
001168ea l     O .rodata	00000010 zeroes.4140
001168fa l     O .rodata	00000010 blanks.4139
00000000 l    df *ABS*	00000000 vfprintf.c
0011690a l     O .rodata	00000010 zeroes.4155
0011691a l     O .rodata	00000010 blanks.4154
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00108d58 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0010a830 l     F .text	00000008 __fp_lock
0010a838 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00117018 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0011745c l     O .rwdata	00000020 lc_ctype_charset
0011743c l     O .rwdata	00000020 lc_message_charset
0011747c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0011694c l     O .rodata	0000000c p05.2652
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00116a70 l     O .rodata	00000010 zeroes.4084
00116a80 l     O .rodata	00000010 blanks.4083
00000000 l    df *ABS*	00000000 vfprintf.c
0010e988 l     F .text	000000fc __sprint_r.part.0
00116aa0 l     O .rodata	00000010 blanks.4099
00116a90 l     O .rodata	00000010 zeroes.4100
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
00113e18 l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
001187f4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00117748 l     O .rwdata	00001060 jtag_uart
00117718 l     O .rwdata	00000030 black_rx
001176e8 l     O .rwdata	00000030 black_tx
001176b8 l     O .rwdata	00000030 red_rx
00117688 l     O .rwdata	00000030 red_tx
0011765c l     O .rwdata	0000002c lcd
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00114538 l     F .text	00000058 altera_avalon_jtag_uart_timeout
00114590 l     F .text	00000104 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
00114a80 l     F .text	0000005c alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00115100 l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00115700 l     F .text	00000088 alt_open_fd.constprop.0
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
001187b0 g     O .rwdata	00000004 Switches
001047a0 g     F .text	0000001c putchar
0010cb6c g     F .text	00000074 _mprec_log10
00100bd8 g     F .text	0000004c IcmpPacketBlack
0010cc58 g     F .text	00000088 __any_on
001105ec g     F .text	00000064 _isatty_r
00116958 g     O .rodata	00000028 __mprec_tinytens
00114108 g     F .text	00000060 alt_main
001047bc g     F .text	000000b8 _puts_r
0011a480 g     O .bss	00000100 alt_irq
00110650 g     F .text	0000006c _lseek_r
0011880c g       *ABS*	00000000 __flash_rwdata_start
001151a0 g     F .text	0000000c alt_up_character_lcd_send_cmd
001127c8 g     F .text	00000084 .hidden __eqdf2
00028000 g       *ABS*	00000000 __alt_heap_start
0010475c g     F .text	0000003c printf
00114b64 g     F .text	00000088 alt_avalon_sgdma_do_sync_transfer
00110728 g     F .text	0000009c _wcrtomb_r
00100ff0 g     F .text	00000044 Ipv4PacketRed
0010d4f0 g     F .text	0000005c __sseek
0010a8dc g     F .text	0000019c __sinit
0010ff08 g     F .text	00000180 __swbuf_r
0010b5ec g     F .text	00000070 _setlocale_r
0010a84c g     F .text	00000078 __sfmoreglue
0011a40c g     O .bss	00000004 headNumber
0011416c g     F .text	00000004 __malloc_unlock
00114d18 g     F .text	00000164 alt_avalon_sgdma_construct_descriptor_burst
0010ba68 g     F .text	0000013c memmove
00100850 g     F .text	00000344 PacketProcessor_Black_Rx
0010a8c4 g     F .text	00000018 _cleanup
0010bcb8 g     F .text	000000a8 _Balloc
0011284c g     F .text	000000d8 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
0011518c g     F .text	00000014 get_DDRAM_addr
02000000 g       *ABS*	00000000 __alt_mem_black_to_red_memory
00100000 g     F .entry	0000000c __reset
00028000 g       *ABS*	00000000 __alt_mem_heap_stack
00114f04 g     F .text	0000004c alt_avalon_sgdma_construct_stream_to_mem_desc_burst
00100020 g       *ABS*	00000000 __flash_exceptions_start
00110584 g     F .text	00000068 _fstat_r
0011a430 g     O .bss	00000004 errno
0010d46c g     F .text	00000008 __seofread
0010071c g     F .text	00000134 NatEncrypt
0010d7c4 g     F .text	000011c4 ___svfiprintf_internal_r
0011a444 g     O .bss	00000004 alt_argv
001207a8 g       *ABS*	00000000 _gp
001004a0 g     F .text	00000134 NatDecrypt
00000300 g     O .descriptor_mem	00000300 red_tx_descriptor
001174b4 g     O .rwdata	00000180 alt_fd_list
00104798 g     F .text	00000008 _putchar_r
00115558 g     F .text	00000090 alt_find_dev
0010b95c g     F .text	0000010c memcpy
001005d4 g     F .text	00000088 PortEncrypt
00115210 g     F .text	0000002c alt_up_character_lcd_write_fd
00101080 g     F .text	0000032c ProcessAdminPacket
0011a410 g     O .bss	00000004 RedTx
0010a840 g     F .text	0000000c _cleanup_r
00113b18 g     F .text	000000d0 .hidden __floatsidf
00115788 g     F .text	00000078 alt_io_redirect
00112924 g     F .text	000000ec .hidden __ltdf2
00115fc4 g       *ABS*	00000000 __DTOR_END__
0010065c g     F .text	000000c0 IpEncrypt
00104874 g     F .text	00000014 puts
0010d3b0 g     F .text	00000068 __fpclassifyd
0010cacc g     F .text	000000a0 __ratio
0010fee4 g     F .text	00000024 __vfiprintf_internal
00114f98 g     F .text	00000050 alt_avalon_sgdma_construct_mem_to_stream_desc_burst
0011a414 g     O .bss	00000004 BlackTx
001147bc g     F .text	0000013c altera_avalon_jtag_uart_read
00103f44 g     F .text	00000014 malloc
00104730 g     F .text	0000002c _printf_r
00103f0c g     F .text	00000008 .hidden __udivsi3
00113eb4 g     F .text	000000a8 isatty
001169a8 g     O .rodata	000000c8 __mprec_tens
0010b65c g     F .text	0000000c __locale_charset
0011a42c g     O .bss	00000004 __malloc_top_pad
001187ac g     O .rwdata	00000004 Red_Interface
001187d4 g     O .rwdata	00000004 __mb_cur_max
0010b68c g     F .text	0000000c _localeconv_r
0010c0e8 g     F .text	0000003c __i2b
0010afe0 g     F .text	000004ac __sfvwrite_r
00114c14 g     F .text	0000001c alt_avalon_sgdma_stop
00104888 g     F .text	00000064 _sbrk_r
00103be0 g     F .text	00000228 swPrintStatus
00000000 g     O .descriptor_mem	00000300 red_rx_descriptor
001106bc g     F .text	0000006c _read_r
00115410 g     F .text	00000004 alt_dcache_flush
001187dc g     O .rwdata	00000004 alt_max_fd
0011024c g     F .text	00000128 _fclose_r
001187b4 g     O .rwdata	00000004 HEX
0010a800 g     F .text	00000030 fflush
0011a428 g     O .bss	00000004 __malloc_max_sbrked_mem
001115b0 g     F .text	0000087c .hidden __adddf3
0010c898 g     F .text	000000f0 __b2d
00110f7c g     F .text	00000634 .hidden __umoddi3
00114070 g     F .text	00000098 lseek
00103b58 g     F .text	00000088 swInit
001187cc g     O .rwdata	00000004 _global_impure_ptr
0010ce4c g     F .text	00000564 _realloc_r
0011a580 g       *ABS*	00000000 __bss_end
00115688 g     F .text	00000078 alt_iic_isr_register
00114adc g     F .text	00000088 alt_avalon_sgdma_do_async_transfer
00101abc g     F .text	00000070 hexInit
001159b8 g     F .text	000000f0 alt_tick
00110928 g     F .text	00000654 .hidden __udivdi3
00110388 g     F .text	00000184 _fputwc_r
00101c88 g     F .text	000005b4 macInit
00116980 g     O .rodata	00000028 __mprec_bigtens
0010becc g     F .text	00000104 __s2b
00113be8 g     F .text	000000a0 .hidden __floatunsidf
0010c628 g     F .text	00000060 __mcmp
0010aba4 g     F .text	00000018 __fp_lock_all
00115670 g     F .text	00000018 alt_ic_irq_enabled
00115984 g     F .text	00000034 alt_alarm_stop
0011a44c g     O .bss	00000004 alt_irq_active
001002b8 g     F .exceptions	00000064 alt_irq_handler
00117634 g     O .rwdata	00000028 alt_dev_null
0011a418 g     O .bss	00000004 BlackRx
0010194c g     F .text	000000a0 available
0011536c g     F .text	00000010 alt_up_character_lcd_cursor_blink_on
00114c30 g     F .text	0000002c alt_avalon_sgdma_check_descriptor_status
00000000 g       .debug_aranges	00000000 alt_exception_muldiv
00100000 g       *ABS*	00000000 __alt_mem_instruction_memory
00115414 g     F .text	00000004 alt_dcache_flush_all
0010bfd0 g     F .text	00000068 __hi0bits
00113a98 g     F .text	00000080 .hidden __fixdfsi
0011880c g       *ABS*	00000000 __ram_rwdata_end
001187e0 g     O .rwdata	00000008 alt_dev_list
00114314 g     F .text	000000f8 write
00114cc8 g     F .text	00000030 alt_avalon_sgdma_enable_desc_poll
0010cce0 g     F .text	000000a0 _putc_r
00116c10 g       *ABS*	00000000 __ram_rodata_end
00113e20 g     F .text	00000094 fstat
0011a41c g     O .bss	00000004 RedRx
00112924 g     F .text	000000ec .hidden __ledf2
001187c0 g     O .rwdata	00000004 LEDs
0010c390 g     F .text	00000148 __pow5mult
0010ea9c g     F .text	00001448 ___vfiprintf_internal_r
0011a43c g     O .bss	00000004 __nlocale_changed
00103f14 g     F .text	00000008 .hidden __umodsi3
00114fe8 g     F .text	0000004c alt_avalon_sgdma_construct_mem_to_stream_desc
00114bec g     F .text	00000010 alt_avalon_sgdma_register_callback
00028000 g       *ABS*	00000000 end
001019ec g     F .text	00000068 add_to_fifo
00000600 g     O .descriptor_mem	00000300 black_rx_descriptor
00114694 g     F .text	00000080 altera_avalon_jtag_uart_init
00115fc4 g       *ABS*	00000000 __CTOR_LIST__
0002e1a8 g       *ABS*	00000000 __alt_stack_pointer
00114cf8 g     F .text	00000020 alt_avalon_sgdma_disable_desc_poll
0011513c g     F .text	00000050 alt_avalon_timer_sc_init
00113c88 g     F .text	000000ac .hidden __clzsi2
001148f8 g     F .text	00000188 altera_avalon_jtag_uart_write
00114ec4 g     F .text	00000040 alt_avalon_sgdma_construct_mem_to_mem_desc
0010ab94 g     F .text	00000004 __sfp_lock_acquire
0010b874 g     F .text	000000e8 memchr
001151c8 g     F .text	00000020 alt_up_character_lcd_write
00106aa8 g     F .text	00002154 ___vfprintf_internal_r
001048ec g     F .text	00000058 _sprintf_r
00114f50 g     F .text	00000048 alt_avalon_sgdma_construct_stream_to_mem_desc
0010ad10 g     F .text	000002d0 _free_r
0010b668 g     F .text	00000010 __locale_mb_cur_max
00101b2c g     F .text	000000f4 lcdInit
00115e0c g     F .text	000001a4 __call_exitprocs
0011a438 g     O .bss	00000004 __mlocale_changed
001187c4 g     O .rwdata	00000004 __malloc_sbrk_base
0010031c g     F .text	0000003c _start
0011a454 g     O .bss	00000004 _alt_tick_rate
00114c5c g     F .text	0000006c alt_avalon_sgdma_open
0010171c g     F .text	000001e0 PrintTargetList
0010c4d8 g     F .text	00000150 __lshift
0011a450 g     O .bss	00000004 _alt_nticks
00114170 g     F .text	000000fc read
0011442c g     F .text	000000d0 alt_sys_init
001152d0 g     F .text	00000044 alt_up_character_lcd_shift_display
0010d5f8 g     F .text	000001cc __ssprint_r
00115cf0 g     F .text	0000011c __register_exitproc
00000000 g       *ABS*	00000000 __alt_mem_descriptor_mem
0010c124 g     F .text	0000026c __multiply
00115314 g     F .text	00000048 alt_up_character_lcd_erase_pos
00114714 g     F .text	00000034 altera_avalon_jtag_uart_close
00103f1c g     F .text	00000028 .hidden __mulsi3
00116c10 g       *ABS*	00000000 __ram_rwdata_start
00115fc4 g       *ABS*	00000000 __ram_rodata_start
0011a458 g     O .bss	00000028 __malloc_current_mallinfo
0010c988 g     F .text	00000144 __d2b
00101a54 g     F .text	00000068 remove_from_fifo
001144fc g     F .text	00000010 altera_avalon_jtag_uart_read_fd
00115b7c g     F .text	000000ac alt_get_fd
00110110 g     F .text	00000064 _close_r
001003e0 g     F .text	000000c0 IpDecrypt
00115c74 g     F .text	0000007c memcmp
0011451c g     F .text	00000010 altera_avalon_jtag_uart_close_fd
00028000 g       *ABS*	00000000 __alt_stack_base
0011452c g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
00108c20 g     F .text	00000138 __swsetup_r
00111e2c g     F .text	0000099c .hidden __divdf3
0010aa78 g     F .text	0000011c __sfp
0010cbe0 g     F .text	00000078 __copybits
00116c10 g     O .rwdata	00000408 __malloc_av_
0010aba0 g     F .text	00000004 __sinit_lock_release
00112a10 g     F .text	00000800 .hidden __muldf3
0010d418 g     F .text	00000054 __sread
00115ab0 g     F .text	000000cc alt_find_file
00115418 g     F .text	00000078 alt_dev_llist_insert
00114168 g     F .text	00000004 __malloc_lock
001142c8 g     F .text	0000004c sbrk
00000900 g     O .descriptor_mem	00000300 black_tx_descriptor
00104a3c g     F .text	0000206c ___svfprintf_internal_r
00114bfc g     F .text	00000018 alt_avalon_sgdma_start
0010a5bc g     F .text	00000244 _fflush_r
00110174 g     F .text	000000d8 _calloc_r
0011a408 g       *ABS*	00000000 __bss_start
0010bba4 g     F .text	00000114 memset
00103a3c g     F .text	0000011c PrintPacket
001024c8 g     F .text	00001574 main
0011a440 g     O .bss	00000004 alt_envp
0011a424 g     O .bss	00000004 __malloc_max_total_mem
0011450c g     F .text	00000010 altera_avalon_jtag_uart_write_fd
00110088 g     F .text	0000001c __swbuf
00101034 g     F .text	0000004c IcmpPacketRed
001187f8 g     O .rwdata	00000008 alt_sgdma_list
0011528c g     F .text	00000044 alt_up_character_lcd_shift_cursor
0010d54c g     F .text	00000008 __sclose
0002e1a8 g       *ABS*	00000000 __alt_heap_limit
00110374 g     F .text	00000014 fclose
00108f80 g     F .text	0000163c _dtoa_r
00103f6c g     F .text	000007c4 _malloc_r
0011089c g     F .text	00000030 __ascii_wctomb
001187f0 g     O .rwdata	00000004 alt_errno
00101558 g     F .text	000001c4 AddTarget
0010b48c g     F .text	000000a8 _fwalk
0010cd80 g     F .text	000000cc putc
00103e78 g     F .text	00000048 .hidden __divsi3
02000000 g     O .black_to_red_memory	00008e80 black_to_red_frame
001151bc g     F .text	0000000c alt_up_character_lcd_open_dev
0010abd4 g     F .text	0000013c _malloc_trim_r
00115fc4 g       *ABS*	00000000 __CTOR_END__
001151ac g     F .text	00000010 alt_up_character_lcd_init
0010d554 g     F .text	000000a4 strcmp
00115fc4 g       *ABS*	00000000 __flash_rodata_start
00115fc4 g       *ABS*	00000000 __DTOR_LIST__
001127c8 g     F .text	00000084 .hidden __nedf2
0011440c g     F .text	00000020 alt_irq_init
0011426c g     F .text	0000005c alt_release_fd
00104944 g     F .text	0000006c sprintf
0011535c g     F .text	00000010 alt_up_character_lcd_cursor_off
00116ab0 g     O .rodata	00000100 .hidden __clz_tab
0011a434 g     O .bss	00000004 _PathLocale
00115c28 g     F .text	00000014 atexit
001100a4 g     F .text	0000006c _write_r
0010b698 g     F .text	0000001c setlocale
001187b8 g     O .rwdata	00000004 Encryptor
001187a8 g     O .rwdata	00000004 Black_Interface
001187d0 g     O .rwdata	00000004 _impure_ptr
0011a448 g     O .bss	00000004 alt_argc
001154f4 g     F .text	00000064 _do_dtors
0010b684 g     F .text	00000008 __locale_cjk_lang
00100b94 g     F .text	00000044 Ipv4PacketBlack
00100020 g       .exceptions	00000000 alt_irq_entry
0010c838 g     F .text	00000060 __ulp
0010abbc g     F .text	00000018 __fp_unlock_all
001013ac g     F .text	000001ac InitializeTargetList
001187e8 g     O .rwdata	00000008 alt_fs_list
00100fac g     F .text	00000044 AdminPacket
00100c24 g     F .text	00000388 PacketProcessor_Red_Rx
0010223c g     F .text	00000160 macPrintRegs
00100020 g       *ABS*	00000000 __ram_exceptions_start
0010b6b4 g     F .text	0000000c localeconv
01000000 g       *ABS*	00000000 __alt_mem_red_to_black_memory
001155ec g     F .text	00000004 alt_ic_isr_register
01000000 g     O .red_to_black_memory	00008e80 red_to_black_frame
0011880c g       *ABS*	00000000 _edata
00028000 g       *ABS*	00000000 _end
0010031c g       *ABS*	00000000 __ram_exceptions_end
00114748 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
00115630 g     F .text	00000040 alt_ic_irq_disable
00115034 g     F .text	00000048 alt_avalon_sgdma_construct_descriptor
0010d474 g     F .text	0000007c __swrite
001187c8 g     O .rwdata	00000004 __malloc_trim_threshold
00115aa8 g     F .text	00000008 altera_nios2_qsys_irq_init
0010b678 g     F .text	0000000c __locale_msgcharset
00115c3c g     F .text	00000038 exit
0010b534 g     F .text	000000b8 _fwalk_reent
0010c688 g     F .text	000001b0 __mdiff
00103ec0 g     F .text	0000004c .hidden __modsi3
0002e1a8 g       *ABS*	00000000 __alt_data_end
00100020 g     F .exceptions	00000000 alt_exception
0010ab98 g     F .text	00000004 __sfp_lock_release
001151e8 g     F .text	00000028 alt_up_character_lcd_string
0011a420 g     O .bss	00000004 LCD
00115fb0 g     F .text	00000014 _exit
0011537c g     F .text	00000094 alt_alarm_start
0010b6c0 g     F .text	000001b4 __smakebuf_r
001049b0 g     F .text	0000008c strlen
00115800 g     F .text	00000184 open
0011284c g     F .text	000000d8 .hidden __gedf2
001018fc g     F .text	00000050 initialize_fifo
001187d8 g     O .rwdata	00000004 __wctomb
0010ea84 g     F .text	00000018 __sprint_r
001155e8 g     F .text	00000004 alt_icache_flush_all
00101c20 g     F .text	00000068 ledInit
0011523c g     F .text	00000050 alt_up_character_lcd_set_cursor_pos
00118800 g     O .rwdata	00000004 alt_priority_mask
001155f0 g     F .text	00000040 alt_ic_irq_enable
00108bfc g     F .text	00000024 __vfprintf_internal
001108cc g     F .text	0000005c _wctomb_r
00114e7c g     F .text	00000048 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
001187bc g     O .rwdata	00000004 Decryptor
00113210 g     F .text	00000888 .hidden __subdf3
0010c038 g     F .text	000000b0 __lo0bits
00118804 g     O .rwdata	00000008 alt_alarm_list
00115490 g     F .text	00000064 _do_ctors
001107c4 g     F .text	000000d8 wcrtomb
00113d34 g     F .text	000000e4 close
00113f5c g     F .text	00000114 alt_load
00100358 g     F .text	00000088 PortDecrypt
0011507c g     F .text	00000084 alt_avalon_sgdma_init
0011050c g     F .text	00000078 fputwc
00103f58 g     F .text	00000014 free
0010ab9c g     F .text	00000004 __sinit_lock_acquire
0010bd88 g     F .text	00000144 __multadd
0010bd60 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00100000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  100000:	00400434 	movhi	at,16
    ori r1, r1, %lo(_start)
  100004:	0840c714 	ori	at,at,796
    jmp r1
  100008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00100020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  100020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  100024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  100028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  10002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  100030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  100034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  100038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  10003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  100040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  100044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  100048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  10004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  100050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  100054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  100058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  10005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  100060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  100064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  100068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  10006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  100070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  100074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  100078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  10007c:	10000326 	beq	r2,zero,10008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  100080:	20000226 	beq	r4,zero,10008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  100084:	01002b80 	call	1002b8 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  100088:	00007606 	br	100264 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
  10008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
  100090:	e8bfff17 	ldw	r2,-4(ea)
        /*
         * Split the instruction into its fields.  We need 4*A, 4*B, and 4*C as
         * offsets to the stack pointer for access to the stored register values.
         */
                             /* r2 = AAAAA,BBBBB,IIIIIIIIIIIIIIII,PPPPPP    */
        roli  r3, r2, 7      /* r3 = BBB,IIIIIIIIIIIIIIII,PPPPPP,AAAAA,BB   */
  100094:	100611fa 	roli	r3,r2,7
        roli  r4, r3, 3      /* r4 = IIIIIIIIIIIIIIII,PPPPPP,AAAAA,BBBBB    */
  100098:	180810fa 	roli	r4,r3,3
        roli  r6, r4, 2      /* r6 = IIIIIIIIIIIIII,PPPPPP,AAAAA,BBBBB,II   */
  10009c:	200c10ba 	roli	r6,r4,2
        srai  r4, r4, 16     /* r4 = (sign-extended) IMM16                  */
  1000a0:	2009d43a 	srai	r4,r4,16
        xori  r6, r6, 0x42   /* r6 = CCC,XXXXXX,NNNNN,PPPPPP,AAAAA,bBBBB,cC */
  1000a4:	3180109c 	xori	r6,r6,66
        roli  r7, r6, 5      /* r7 = XXXX,NNNNN,PPPPPP,AAAAA,bBBBB,cCCCC,XX */
  1000a8:	300e117a 	roli	r7,r6,5
        andi  r5, r2, 0x3f   /* r5 = 00000000000000000000000000,PPPPPP      */
  1000ac:	11400fcc 	andi	r5,r2,63
        xori  r3, r3, 0x40
  1000b0:	18c0101c 	xori	r3,r3,64
        andi  r3, r3, 0x7c   /* r3 = 0000000000000000000000000,aAAAA,00     */
  1000b4:	18c01f0c 	andi	r3,r3,124
        andi  r6, r6, 0x7c   /* r6 = 0000000000000000000000000,bBBBB,00     */
  1000b8:	31801f0c 	andi	r6,r6,124
        andi  r7, r7, 0x7c   /* r7 = 0000000000000000000000000,cCCCC,00     */
  1000bc:	39c01f0c 	andi	r7,r7,124
         * Save everything on the stack to make it easy for the emulation routines
         * to retrieve the source register operands.  The exception entry code has
         * already saved some of this so we don't need to do it all again.
         */

        addi  sp, sp, -60
  1000c0:	defff104 	addi	sp,sp,-60
        stw   zero, 64(sp)   /* Save zero on stack to avoid special case for r0. */
  1000c4:	d8001015 	stw	zero,64(sp)
                             /* Register at and r2-r15 have already been saved.  */

        stw   r16,  0(sp)
  1000c8:	dc000015 	stw	r16,0(sp)
        stw   r17,  4(sp)
  1000cc:	dc400115 	stw	r17,4(sp)
        stw   r18,  8(sp)
  1000d0:	dc800215 	stw	r18,8(sp)
        stw   r19, 12(sp)
  1000d4:	dcc00315 	stw	r19,12(sp)
        stw   r20, 16(sp)
  1000d8:	dd000415 	stw	r20,16(sp)
        stw   r21, 20(sp)
  1000dc:	dd400515 	stw	r21,20(sp)
        stw   r22, 24(sp)
  1000e0:	dd800615 	stw	r22,24(sp)
        stw   r23, 28(sp)
  1000e4:	ddc00715 	stw	r23,28(sp)
                            /* et @ 32 - Has already been changed.*/
                            /* bt @ 36 - Usually isn't an operand.   */
        stw   gp,  40(sp)
  1000e8:	de800a15 	stw	gp,40(sp)
        stw   sp,  44(sp)
  1000ec:	dec00b15 	stw	sp,44(sp)
        stw   fp,  48(sp)
  1000f0:	df000c15 	stw	fp,48(sp)

        /*
         *  Prepare for either multiplication or division loop.
         *  They both loop 32 times.
         */
        movi   r14, 32
  1000f4:	03800804 	movi	r14,32
         * Get the operands.
         *
         * It is necessary to check for muli because it uses an I-type instruction
         * format, while the other instructions are have an R-type format.
         */
        add    r3, r3, sp     /* r3 = address of A-operand. */
  1000f8:	1ec7883a 	add	r3,r3,sp
        ldw    r3, 0(r3)      /* r3 = A-operand. */
  1000fc:	18c00017 	ldw	r3,0(r3)
        movi   r15, 0x24      /* muli opcode (I-type instruction format) */
  100100:	03c00904 	movi	r15,36
        beq    r5, r15, .Lmul_immed /* muli doesn't use the B register as a source */
  100104:	2bc02726 	beq	r5,r15,1001a4 <alt_exception+0x184>

        add    r6, r6, sp     /* r6 = address of B-operand.               */
  100108:	36cd883a 	add	r6,r6,sp
        ldw    r6, 0(r6)      /* r6 = B-operand.                          */
  10010c:	31800017 	ldw	r6,0(r6)
                              /* r4 = SSSSSSSSSSSSSSSS,-----IMM16------   */
                              /* IMM16 not needed, align OPX portion      */
                              /* r4 = SSSSSSSSSSSSSSSS,CCCCC,-OPX--,00000 */
        srli   r4, r4, 5      /* r4 = 00000,SSSSSSSSSSSSSSSS,CCCCC,-OPX-- */
  100110:	2008d17a 	srli	r4,r4,5
        andi   r4, r4, 0x3f   /* r4 = 00000000000000000000000000,-OPX--   */
  100114:	21000fcc 	andi	r4,r4,63
         *
         *  This code assumes that OP is not muli (because muli was tested above).
         *  All other multiplies and divides are legal.  Anything else is illegal.
         */

        movi  r8, 0x3a                        /* OP for R-type mul* and div* */
  100118:	02000e84 	movi	r8,58
        bne   r5, r8, .Lnot_muldiv
  10011c:	2a004f1e 	bne	r5,r8,10025c <alt_exception+0x23c>

        /* r15 already is 0x24 */            /* OPX of divu */
        beq   r4, r15, .Ldivide
  100120:	23c00a26 	beq	r4,r15,10014c <alt_exception+0x12c>

        movi  r15,0x27                        /* OPX of mul */
  100124:	03c009c4 	movi	r15,39
        beq   r4, r15, .Lmultiply
  100128:	23c02126 	beq	r4,r15,1001b0 <alt_exception+0x190>

        movi  r15,0x07                        /* OPX of mulxuu */
  10012c:	03c001c4 	movi	r15,7
        beq   r4, r15, .Lmultiply
  100130:	23c01f26 	beq	r4,r15,1001b0 <alt_exception+0x190>

        movi  r15,0x17                        /* OPX of mulxsu */
  100134:	03c005c4 	movi	r15,23
        beq   r4, r15, .Lmultiply
  100138:	23c01d26 	beq	r4,r15,1001b0 <alt_exception+0x190>

        movi  r15,0x1f                        /* OPX of mulxss */
  10013c:	03c007c4 	movi	r15,31
        beq   r4, r15, .Lmultiply
  100140:	23c01b26 	beq	r4,r15,1001b0 <alt_exception+0x190>

        movi  r15,0x25                        /* OPX of div */
  100144:	03c00944 	movi	r15,37
        bne   r4, r15, .Lnot_muldiv
  100148:	23c0441e 	bne	r4,r15,10025c <alt_exception+0x23c>
.Ldivide:
        /*
         *  Prepare for division by assuming the result
         *  is unsigned, and storing its "sign" as 0.
         */
        movi   r17, 0
  10014c:	04400004 	movi	r17,0


        /* Which division opcode? */
        xori   r15, r4, 0x25         /* OPX of div */
  100150:	23c0095c 	xori	r15,r4,37
        bne    r15, zero, .Lunsigned_division
  100154:	7800051e 	bne	r15,zero,10016c <alt_exception+0x14c>

        /*
         *  OPX is div.  Determine and store the sign of the quotient.
         *  Then take the absolute value of both operands.
         */
        xor   r17, r3, r6      /* MSB contains sign of quotient */
  100158:	19a2f03a 	xor	r17,r3,r6
        bge   r3, zero, 0f
  10015c:	1800010e 	bge	r3,zero,100164 <alt_exception+0x144>
        sub   r3, zero, r3     /* -r3 */
  100160:	00c7c83a 	sub	r3,zero,r3
0:
        bge   r6, zero, 0f
  100164:	3000010e 	bge	r6,zero,10016c <alt_exception+0x14c>
        sub   r6, zero, r6     /* -r6 */
  100168:	018dc83a 	sub	r6,zero,r6
0:


.Lunsigned_division:
        /* Initialize the unsigned-division loop. */
        movi  r13, 0          /* remainder = 0 */
  10016c:	03400004 	movi	r13,0
        /*
        *       Division:
        *
        *       (remainder:dividend:quotient) <<= 1;
        */
        slli  r13, r13, 1
  100170:	681a907a 	slli	r13,r13,1
        cmplt r15, r3, zero        /* r15 = MSB of r3 */
  100174:	181e803a 	cmplt	r15,r3,zero
        or    r13, r13, r15
  100178:	6bdab03a 	or	r13,r13,r15
        slli  r3, r3, 1
  10017c:	1806907a 	slli	r3,r3,1
        *       {
        *           set LSB of quotient
        *           remainder -= divisor;
        *       }
        */
        bltu  r13, r6, .Ldiv_skip
  100180:	69800236 	bltu	r13,r6,10018c <alt_exception+0x16c>
        ori   r3, r3, 1
  100184:	18c00054 	ori	r3,r3,1
        sub   r13, r13, r6
  100188:	699bc83a 	sub	r13,r13,r6
.Ldiv_skip:

        /*
        *   }
        */
        subi  r14, r14, 1
  10018c:	73bfffc4 	addi	r14,r14,-1
        bne   r14, zero, .Ldivide_loop
  100190:	703ff71e 	bne	r14,zero,100170 <black_to_red_frame+0xfe100170>

        mov   r9, r3
  100194:	1813883a 	mov	r9,r3
    
        /*
        *  Conditionally negate signed quotient.  If quotient is unsigned,
        *  the sign already is initialized to 0.
        */
        bge   r17, zero, .Lstore_result
  100198:	8800230e 	bge	r17,zero,100228 <alt_exception+0x208>
        sub   r9, zero, r9     /* -r9 */
  10019c:	0253c83a 	sub	r9,zero,r9

        br    .Lstore_result
  1001a0:	00002106 	br	100228 <alt_exception+0x208>
        *
        */

.Lmul_immed:
        /* Opcode is muli.  Change it into mul for remainder of algorithm. */
        mov   r7, r6         /* Field B is dest register, not field C. */
  1001a4:	300f883a 	mov	r7,r6
        mov   r6, r4         /* Field IMM16 is src2, not field B. */
  1001a8:	200d883a 	mov	r6,r4
        movi  r4, 0x27       /* OPX of mul is 0x27 */
  1001ac:	010009c4 	movi	r4,39

.Lmultiply:
        /* Initialize the multiplication loop. */
        movi  r9, 0          /* mul_product    = 0 */
  1001b0:	02400004 	movi	r9,0
        movi  r10, 0         /* mulxuu_product = 0 */
  1001b4:	02800004 	movi	r10,0
        mov   r11, r6        /* save original multiplier for mulxsu and mulxss */
  1001b8:	3017883a 	mov	r11,r6
        mov   r12, r6        /* mulxuu_multiplier (will be shifted) */
  1001bc:	3019883a 	mov	r12,r6
        movi  r16, 1         /* used to create "rori B,A,1" from "ror B,A,r16" */
  1001c0:	04000044 	movi	r16,1

        /*
        *       mul_product <<= 1;
        *       lsb = multiplier & 1;
        */
        slli   r9, r9, 1
  1001c4:	4812907a 	slli	r9,r9,1
        andi   r15, r12, 1
  1001c8:	63c0004c 	andi	r15,r12,1
        *       if (lsb == 1)
        *       {
        *           mulxuu_product += multiplicand;
        *       }
        */
        beq   r15, zero, .Lmulx_skip
  1001cc:	78000326 	beq	r15,zero,1001dc <alt_exception+0x1bc>
        add   r10, r10, r3
  1001d0:	50d5883a 	add	r10,r10,r3
        cmpltu r15, r10, r3  /* Save the carry from the MSB of mulxuu_product. */
  1001d4:	50df803a 	cmpltu	r15,r10,r3
        ror   r15, r15, r16  /* r15 = 0x80000000 on carry, or else 0x00000000 */
  1001d8:	7c1e583a 	ror	r15,r15,r16
        *       if (MSB of mul_multiplier == 1)
        *       {
        *           mul_product += multiplicand;
        *       }
        */
        bge   r6, zero, .Lmul_skip
  1001dc:	3000010e 	bge	r6,zero,1001e4 <alt_exception+0x1c4>
        add   r9, r9, r3
  1001e0:	48d3883a 	add	r9,r9,r3
        /*
        *       mulxuu_product >>= 1;           logical shift
        *       mul_multiplier <<= 1;           done with MSB
        *       mulx_multiplier >>= 1;          done with LSB
        */
        srli   r10, r10, 1
  1001e4:	5014d07a 	srli	r10,r10,1
        or     r10, r10, r15           /* OR in the saved carry bit. */
  1001e8:	53d4b03a 	or	r10,r10,r15
        slli   r6, r6, 1
  1001ec:	300c907a 	slli	r6,r6,1
        srli   r12, r12, 1
  1001f0:	6018d07a 	srli	r12,r12,1


        /*
        *   }
        */
        subi   r14, r14, 1
  1001f4:	73bfffc4 	addi	r14,r14,-1
        bne    r14, zero, .Lmultiply_loop
  1001f8:	703ff21e 	bne	r14,zero,1001c4 <black_to_red_frame+0xfe1001c4>
        *  Select/compute the result based on OPX.
        */


        /* OPX == mul?  Then store. */
        xori  r15, r4, 0x27
  1001fc:	23c009dc 	xori	r15,r4,39
        beq   r15, zero, .Lstore_result
  100200:	78000926 	beq	r15,zero,100228 <alt_exception+0x208>

        /* It's one of the mulx.. opcodes.  Move over the result. */
        mov   r9, r10
  100204:	5013883a 	mov	r9,r10

        /* OPX == mulxuu?  Then store. */
        xori  r15, r4, 0x07
  100208:	23c001dc 	xori	r15,r4,7
        beq   r15, zero, .Lstore_result
  10020c:	78000626 	beq	r15,zero,100228 <alt_exception+0x208>

        /* Compute mulxsu
         *
         * mulxsu = mulxuu - ((rA < 0) ? rB : 0);
         */
        bge   r3, zero, .Lmulxsu_skip
  100210:	1800010e 	bge	r3,zero,100218 <alt_exception+0x1f8>
        sub   r9, r9, r11
  100214:	4ad3c83a 	sub	r9,r9,r11
.Lmulxsu_skip:

        /* OPX == mulxsu?  Then store. */
        xori  r15, r4, 0x17
  100218:	23c005dc 	xori	r15,r4,23
        beq   r15, zero, .Lstore_result
  10021c:	78000226 	beq	r15,zero,100228 <alt_exception+0x208>

        /* Compute mulxss
         *
         * mulxss = mulxsu - ((rB < 0) ? rA : 0);
         */
        bge   r11, zero, .Lmulxss_skip
  100220:	5800010e 	bge	r11,zero,100228 <alt_exception+0x208>
        sub   r9, r9, r3
  100224:	48d3c83a 	sub	r9,r9,r3
.Lmulxss_skip:
        /* At this point, assume that OPX is mulxss, so store */


.Lstore_result:
        add   r7, r7, sp
  100228:	3ecf883a 	add	r7,r7,sp
        stw   r9, 0(r7)
  10022c:	3a400015 	stw	r9,0(r7)

        ldw   r16,  0(sp)
  100230:	dc000017 	ldw	r16,0(sp)
        ldw   r17,  4(sp)
  100234:	dc400117 	ldw	r17,4(sp)
        ldw   r18,  8(sp)
  100238:	dc800217 	ldw	r18,8(sp)
        ldw   r19, 12(sp)
  10023c:	dcc00317 	ldw	r19,12(sp)
        ldw   r20, 16(sp)
  100240:	dd000417 	ldw	r20,16(sp)
        ldw   r21, 20(sp)
  100244:	dd400517 	ldw	r21,20(sp)
        ldw   r22, 24(sp)
  100248:	dd800617 	ldw	r22,24(sp)
        ldw   r23, 28(sp)
  10024c:	ddc00717 	ldw	r23,28(sp)

                            /* bt @ 32 - Breakpoint register usually isn't an operand. */
                            /* et @ 36 - Don't corrupt et. */
                            /* gp @ 40 - Don't corrupt gp. */
                            /* sp @ 44 - Don't corrupt sp. */
        ldw   fp,  48(sp)
  100250:	df000c17 	ldw	fp,48(sp)
                            /* ea @ 52 - Don't corrupt ea. */
                            /* ba @ 56 - Breakpoint register usually isn't an operand. */

        addi  sp, sp, 60
  100254:	dec00f04 	addi	sp,sp,60

        br    .Lexception_exit
  100258:	00000206 	br	100264 <alt_exception_unknown+0x4>


.Lnot_muldiv:

        addi  sp, sp, 60
  10025c:	dec00f04 	addi	sp,sp,60

00100260 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
  100260:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  100264:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  100268:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  10026c:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  100270:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  100274:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  100278:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  10027c:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  100280:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  100284:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  100288:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  10028c:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  100290:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  100294:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  100298:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  10029c:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  1002a0:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  1002a4:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  1002a8:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  1002ac:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  1002b0:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  1002b4:	ef80083a 	eret

001002b8 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  1002b8:	defffe04 	addi	sp,sp,-8
  1002bc:	dfc00115 	stw	ra,4(sp)
  1002c0:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  1002c4:	000b313a 	rdctl	r5,ipending
  1002c8:	040004b4 	movhi	r16,18
  1002cc:	84292004 	addi	r16,r16,-23424
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  1002d0:	2880004c 	andi	r2,r5,1

  active = alt_irq_pending ();

  do
  {
    i = 0;
  1002d4:	0007883a 	mov	r3,zero
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  1002d8:	1000051e 	bne	r2,zero,1002f0 <alt_irq_handler+0x38>
  active = alt_irq_pending ();

  do
  {
    i = 0;
    mask = 1;
  1002dc:	00800044 	movi	r2,1
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
  1002e0:	1085883a 	add	r2,r2,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  1002e4:	2888703a 	and	r4,r5,r2
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
  1002e8:	18c00044 	addi	r3,r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  1002ec:	203ffc26 	beq	r4,zero,1002e0 <black_to_red_frame+0xfe1002e0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  1002f0:	180690fa 	slli	r3,r3,3
  1002f4:	80c7883a 	add	r3,r16,r3
  1002f8:	18800017 	ldw	r2,0(r3)
  1002fc:	19000117 	ldw	r4,4(r3)
  100300:	103ee83a 	callr	r2
  100304:	000b313a 	rdctl	r5,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
  100308:	283ff11e 	bne	r5,zero,1002d0 <black_to_red_frame+0xfe1002d0>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
  10030c:	dfc00117 	ldw	ra,4(sp)
  100310:	dc000017 	ldw	r16,0(sp)
  100314:	dec00204 	addi	sp,sp,8
  100318:	f800283a 	ret

Disassembly of section .text:

0010031c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  10031c:	06c000b4 	movhi	sp,2
    ori sp, sp, %lo(__alt_stack_pointer)
  100320:	def86a14 	ori	sp,sp,57768
    movhi gp, %hi(_gp)
  100324:	068004b4 	movhi	gp,18
    ori gp, gp, %lo(_gp)
  100328:	d681ea14 	ori	gp,gp,1960
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  10032c:	00800474 	movhi	r2,17
    ori r2, r2, %lo(__bss_start)
  100330:	10a90214 	ori	r2,r2,41992

    movhi r3, %hi(__bss_end)
  100334:	00c00474 	movhi	r3,17
    ori r3, r3, %lo(__bss_end)
  100338:	18e96014 	ori	r3,r3,42368

    beq r2, r3, 1f
  10033c:	10c00326 	beq	r2,r3,10034c <_start+0x30>

0:
    stw zero, (r2)
  100340:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  100344:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  100348:	10fffd36 	bltu	r2,r3,100340 <black_to_red_frame+0xfe100340>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  10034c:	0113f5c0 	call	113f5c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  100350:	01141080 	call	114108 <alt_main>

00100354 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  100354:	003fff06 	br	100354 <black_to_red_frame+0xfe100354>

00100358 <PortDecrypt>:

Returns:		1 = match found
				0 = no matches
-------------------------------------------------------------------------------
 */
int PortDecrypt(TARGET* listHead, tran_h * tran) {
  100358:	defffc04 	addi	sp,sp,-16
  10035c:	df000315 	stw	fp,12(sp)
  100360:	df000304 	addi	fp,sp,12
  100364:	e13ffe15 	stw	r4,-8(fp)
  100368:	e17fff15 	stw	r5,-4(fp)
	TARGET* pWalker=listHead;
  10036c:	e0bffe17 	ldw	r2,-8(fp)
  100370:	e0bffd15 	stw	r2,-12(fp)

	while(pWalker != NULL) {
  100374:	00001306 	br	1003c4 <PortDecrypt+0x6c>
		if ((tran->dst_port[0] == pWalker->dstPort[0]) && (tran->dst_port[0] == pWalker->dstPort[1])) {
  100378:	e0bfff17 	ldw	r2,-4(fp)
  10037c:	10c00083 	ldbu	r3,2(r2)
  100380:	e0bffd17 	ldw	r2,-12(fp)
  100384:	10800383 	ldbu	r2,14(r2)
  100388:	18c03fcc 	andi	r3,r3,255
  10038c:	10803fcc 	andi	r2,r2,255
  100390:	1880091e 	bne	r3,r2,1003b8 <PortDecrypt+0x60>
  100394:	e0bfff17 	ldw	r2,-4(fp)
  100398:	10c00083 	ldbu	r3,2(r2)
  10039c:	e0bffd17 	ldw	r2,-12(fp)
  1003a0:	108003c3 	ldbu	r2,15(r2)
  1003a4:	18c03fcc 	andi	r3,r3,255
  1003a8:	10803fcc 	andi	r2,r2,255
  1003ac:	1880021e 	bne	r3,r2,1003b8 <PortDecrypt+0x60>
			return 1;
  1003b0:	00800044 	movi	r2,1
  1003b4:	00000606 	br	1003d0 <PortDecrypt+0x78>
		}
		pWalker=pWalker->nextTargetNumber;
  1003b8:	e0bffd17 	ldw	r2,-12(fp)
  1003bc:	10800417 	ldw	r2,16(r2)
  1003c0:	e0bffd15 	stw	r2,-12(fp)
-------------------------------------------------------------------------------
 */
int PortDecrypt(TARGET* listHead, tran_h * tran) {
	TARGET* pWalker=listHead;

	while(pWalker != NULL) {
  1003c4:	e0bffd17 	ldw	r2,-12(fp)
  1003c8:	103feb1e 	bne	r2,zero,100378 <black_to_red_frame+0xfe100378>
			return 1;
		}
		pWalker=pWalker->nextTargetNumber;
	}

	return 0;
  1003cc:	0005883a 	mov	r2,zero
}
  1003d0:	e037883a 	mov	sp,fp
  1003d4:	df000017 	ldw	fp,0(sp)
  1003d8:	dec00104 	addi	sp,sp,4
  1003dc:	f800283a 	ret

001003e0 <IpDecrypt>:

Returns:		1 = match found
				0 = no matches
-------------------------------------------------------------------------------
 */
int IpDecrypt(TARGET* listHead,ip_h* ip) {
  1003e0:	defffc04 	addi	sp,sp,-16
  1003e4:	df000315 	stw	fp,12(sp)
  1003e8:	df000304 	addi	fp,sp,12
  1003ec:	e13ffe15 	stw	r4,-8(fp)
  1003f0:	e17fff15 	stw	r5,-4(fp)
	TARGET* pWalker=listHead;
  1003f4:	e0bffe17 	ldw	r2,-8(fp)
  1003f8:	e0bffd15 	stw	r2,-12(fp)
	int i;
	D printf("\Src: %d.%d.%d.%d, ",ip->ip_src[0],ip->ip_src[1],ip->ip_src[2],ip->ip_src[3]);

	while(pWalker != NULL) {
  1003fc:	00002106 	br	100484 <IpDecrypt+0xa4>
		if ((ip->ip_src[0] == pWalker->dstHost[0]) && (ip->ip_src[1] == pWalker->dstHost[1]) && (ip->ip_src[2] == pWalker->dstHost[2]) && (ip->ip_src[3] == pWalker->dstHost[3])) {
  100400:	e0bfff17 	ldw	r2,-4(fp)
  100404:	10c00303 	ldbu	r3,12(r2)
  100408:	e0bffd17 	ldw	r2,-12(fp)
  10040c:	10800203 	ldbu	r2,8(r2)
  100410:	18c03fcc 	andi	r3,r3,255
  100414:	10803fcc 	andi	r2,r2,255
  100418:	1880171e 	bne	r3,r2,100478 <IpDecrypt+0x98>
  10041c:	e0bfff17 	ldw	r2,-4(fp)
  100420:	10c00343 	ldbu	r3,13(r2)
  100424:	e0bffd17 	ldw	r2,-12(fp)
  100428:	10800243 	ldbu	r2,9(r2)
  10042c:	18c03fcc 	andi	r3,r3,255
  100430:	10803fcc 	andi	r2,r2,255
  100434:	1880101e 	bne	r3,r2,100478 <IpDecrypt+0x98>
  100438:	e0bfff17 	ldw	r2,-4(fp)
  10043c:	10c00383 	ldbu	r3,14(r2)
  100440:	e0bffd17 	ldw	r2,-12(fp)
  100444:	10800283 	ldbu	r2,10(r2)
  100448:	18c03fcc 	andi	r3,r3,255
  10044c:	10803fcc 	andi	r2,r2,255
  100450:	1880091e 	bne	r3,r2,100478 <IpDecrypt+0x98>
  100454:	e0bfff17 	ldw	r2,-4(fp)
  100458:	10c003c3 	ldbu	r3,15(r2)
  10045c:	e0bffd17 	ldw	r2,-12(fp)
  100460:	108002c3 	ldbu	r2,11(r2)
  100464:	18c03fcc 	andi	r3,r3,255
  100468:	10803fcc 	andi	r2,r2,255
  10046c:	1880021e 	bne	r3,r2,100478 <IpDecrypt+0x98>
			D printf("found target!\n");
			return 1;
  100470:	00800044 	movi	r2,1
  100474:	00000606 	br	100490 <IpDecrypt+0xb0>
		}
		pWalker=pWalker->nextTargetNumber;
  100478:	e0bffd17 	ldw	r2,-12(fp)
  10047c:	10800417 	ldw	r2,16(r2)
  100480:	e0bffd15 	stw	r2,-12(fp)
int IpDecrypt(TARGET* listHead,ip_h* ip) {
	TARGET* pWalker=listHead;
	int i;
	D printf("\Src: %d.%d.%d.%d, ",ip->ip_src[0],ip->ip_src[1],ip->ip_src[2],ip->ip_src[3]);

	while(pWalker != NULL) {
  100484:	e0bffd17 	ldw	r2,-12(fp)
  100488:	103fdd1e 	bne	r2,zero,100400 <black_to_red_frame+0xfe100400>
			return 1;
		}
		pWalker=pWalker->nextTargetNumber;
	}
	D printf("no valid target found, forwarding.\n");
	return 0;
  10048c:	0005883a 	mov	r2,zero

}
  100490:	e037883a 	mov	sp,fp
  100494:	df000017 	ldw	fp,0(sp)
  100498:	dec00104 	addi	sp,sp,4
  10049c:	f800283a 	ret

001004a0 <NatDecrypt>:

Returns:		1 = match found
				0 = no matches
-------------------------------------------------------------------------------
 */
int NatDecrypt(TARGET* listHead, ip_h* ip, tran_h* tran ) {
  1004a0:	defffb04 	addi	sp,sp,-20
  1004a4:	df000415 	stw	fp,16(sp)
  1004a8:	df000404 	addi	fp,sp,16
  1004ac:	e13ffd15 	stw	r4,-12(fp)
  1004b0:	e17ffe15 	stw	r5,-8(fp)
  1004b4:	e1bfff15 	stw	r6,-4(fp)
	TARGET* pWalker=listHead;
  1004b8:	e0bffd17 	ldw	r2,-12(fp)
  1004bc:	e0bffc15 	stw	r2,-16(fp)

	while(pWalker != NULL) {
  1004c0:	00003d06 	br	1005b8 <NatDecrypt+0x118>
		if ((ip->ip_dst[0] == pWalker->dstHost[0]) && (ip->ip_dst[1] == pWalker->dstHost[1]) && (ip->ip_dst[2] == pWalker->dstHost[2]) && (ip->ip_dst[3] == pWalker->dstHost[3])) {
  1004c4:	e0bffe17 	ldw	r2,-8(fp)
  1004c8:	10c00403 	ldbu	r3,16(r2)
  1004cc:	e0bffc17 	ldw	r2,-16(fp)
  1004d0:	10800203 	ldbu	r2,8(r2)
  1004d4:	18c03fcc 	andi	r3,r3,255
  1004d8:	10803fcc 	andi	r2,r2,255
  1004dc:	1880331e 	bne	r3,r2,1005ac <NatDecrypt+0x10c>
  1004e0:	e0bffe17 	ldw	r2,-8(fp)
  1004e4:	10c00443 	ldbu	r3,17(r2)
  1004e8:	e0bffc17 	ldw	r2,-16(fp)
  1004ec:	10800243 	ldbu	r2,9(r2)
  1004f0:	18c03fcc 	andi	r3,r3,255
  1004f4:	10803fcc 	andi	r2,r2,255
  1004f8:	18802c1e 	bne	r3,r2,1005ac <NatDecrypt+0x10c>
  1004fc:	e0bffe17 	ldw	r2,-8(fp)
  100500:	10c00483 	ldbu	r3,18(r2)
  100504:	e0bffc17 	ldw	r2,-16(fp)
  100508:	10800283 	ldbu	r2,10(r2)
  10050c:	18c03fcc 	andi	r3,r3,255
  100510:	10803fcc 	andi	r2,r2,255
  100514:	1880251e 	bne	r3,r2,1005ac <NatDecrypt+0x10c>
  100518:	e0bffe17 	ldw	r2,-8(fp)
  10051c:	10c004c3 	ldbu	r3,19(r2)
  100520:	e0bffc17 	ldw	r2,-16(fp)
  100524:	108002c3 	ldbu	r2,11(r2)
  100528:	18c03fcc 	andi	r3,r3,255
  10052c:	10803fcc 	andi	r2,r2,255
  100530:	18801e1e 	bne	r3,r2,1005ac <NatDecrypt+0x10c>
			if ((tran->dst_port[0] == pWalker->dstPort[0]) && (tran->dst_port[0] == pWalker->dstPort[1])) {
  100534:	e0bfff17 	ldw	r2,-4(fp)
  100538:	10c00083 	ldbu	r3,2(r2)
  10053c:	e0bffc17 	ldw	r2,-16(fp)
  100540:	10800383 	ldbu	r2,14(r2)
  100544:	18c03fcc 	andi	r3,r3,255
  100548:	10803fcc 	andi	r2,r2,255
  10054c:	1880171e 	bne	r3,r2,1005ac <NatDecrypt+0x10c>
  100550:	e0bfff17 	ldw	r2,-4(fp)
  100554:	10c00083 	ldbu	r3,2(r2)
  100558:	e0bffc17 	ldw	r2,-16(fp)
  10055c:	108003c3 	ldbu	r2,15(r2)
  100560:	18c03fcc 	andi	r3,r3,255
  100564:	10803fcc 	andi	r2,r2,255
  100568:	1880101e 	bne	r3,r2,1005ac <NatDecrypt+0x10c>
				if ((tran->src_port[0] == pWalker->srcPort[0]) && (tran->src_port[0] == pWalker->srcPort[1])) {
  10056c:	e0bfff17 	ldw	r2,-4(fp)
  100570:	10c00003 	ldbu	r3,0(r2)
  100574:	e0bffc17 	ldw	r2,-16(fp)
  100578:	10800303 	ldbu	r2,12(r2)
  10057c:	18c03fcc 	andi	r3,r3,255
  100580:	10803fcc 	andi	r2,r2,255
  100584:	1880091e 	bne	r3,r2,1005ac <NatDecrypt+0x10c>
  100588:	e0bfff17 	ldw	r2,-4(fp)
  10058c:	10c00003 	ldbu	r3,0(r2)
  100590:	e0bffc17 	ldw	r2,-16(fp)
  100594:	10800343 	ldbu	r2,13(r2)
  100598:	18c03fcc 	andi	r3,r3,255
  10059c:	10803fcc 	andi	r2,r2,255
  1005a0:	1880021e 	bne	r3,r2,1005ac <NatDecrypt+0x10c>
					return 1;
  1005a4:	00800044 	movi	r2,1
  1005a8:	00000606 	br	1005c4 <NatDecrypt+0x124>
				}
			}
		}
		pWalker=pWalker->nextTargetNumber;
  1005ac:	e0bffc17 	ldw	r2,-16(fp)
  1005b0:	10800417 	ldw	r2,16(r2)
  1005b4:	e0bffc15 	stw	r2,-16(fp)
-------------------------------------------------------------------------------
 */
int NatDecrypt(TARGET* listHead, ip_h* ip, tran_h* tran ) {
	TARGET* pWalker=listHead;

	while(pWalker != NULL) {
  1005b8:	e0bffc17 	ldw	r2,-16(fp)
  1005bc:	103fc11e 	bne	r2,zero,1004c4 <black_to_red_frame+0xfe1004c4>
				}
			}
		}
		pWalker=pWalker->nextTargetNumber;
	}
	return 0;
  1005c0:	0005883a 	mov	r2,zero
}
  1005c4:	e037883a 	mov	sp,fp
  1005c8:	df000017 	ldw	fp,0(sp)
  1005cc:	dec00104 	addi	sp,sp,4
  1005d0:	f800283a 	ret

001005d4 <PortEncrypt>:

Returns:		1 = match found
				0 = no matches
-------------------------------------------------------------------------------
 */
int PortEncrypt(TARGET* listHead, tran_h * tran) {
  1005d4:	defffc04 	addi	sp,sp,-16
  1005d8:	df000315 	stw	fp,12(sp)
  1005dc:	df000304 	addi	fp,sp,12
  1005e0:	e13ffe15 	stw	r4,-8(fp)
  1005e4:	e17fff15 	stw	r5,-4(fp)
	TARGET* pWalker=listHead;
  1005e8:	e0bffe17 	ldw	r2,-8(fp)
  1005ec:	e0bffd15 	stw	r2,-12(fp)

	while(pWalker != NULL) {
  1005f0:	00001306 	br	100640 <PortEncrypt+0x6c>
		if ((tran->dst_port[0] == pWalker->dstPort[0]) && (tran->dst_port[0] == pWalker->dstPort[1])) {
  1005f4:	e0bfff17 	ldw	r2,-4(fp)
  1005f8:	10c00083 	ldbu	r3,2(r2)
  1005fc:	e0bffd17 	ldw	r2,-12(fp)
  100600:	10800383 	ldbu	r2,14(r2)
  100604:	18c03fcc 	andi	r3,r3,255
  100608:	10803fcc 	andi	r2,r2,255
  10060c:	1880091e 	bne	r3,r2,100634 <PortEncrypt+0x60>
  100610:	e0bfff17 	ldw	r2,-4(fp)
  100614:	10c00083 	ldbu	r3,2(r2)
  100618:	e0bffd17 	ldw	r2,-12(fp)
  10061c:	108003c3 	ldbu	r2,15(r2)
  100620:	18c03fcc 	andi	r3,r3,255
  100624:	10803fcc 	andi	r2,r2,255
  100628:	1880021e 	bne	r3,r2,100634 <PortEncrypt+0x60>
			return 1;
  10062c:	00800044 	movi	r2,1
  100630:	00000606 	br	10064c <PortEncrypt+0x78>
		}
		pWalker=pWalker->nextTargetNumber;
  100634:	e0bffd17 	ldw	r2,-12(fp)
  100638:	10800417 	ldw	r2,16(r2)
  10063c:	e0bffd15 	stw	r2,-12(fp)
-------------------------------------------------------------------------------
 */
int PortEncrypt(TARGET* listHead, tran_h * tran) {
	TARGET* pWalker=listHead;

	while(pWalker != NULL) {
  100640:	e0bffd17 	ldw	r2,-12(fp)
  100644:	103feb1e 	bne	r2,zero,1005f4 <black_to_red_frame+0xfe1005f4>
			return 1;
		}
		pWalker=pWalker->nextTargetNumber;
	}

	return 0;
  100648:	0005883a 	mov	r2,zero
}
  10064c:	e037883a 	mov	sp,fp
  100650:	df000017 	ldw	fp,0(sp)
  100654:	dec00104 	addi	sp,sp,4
  100658:	f800283a 	ret

0010065c <IpEncrypt>:

Returns:		1 = match found
				0 = no matches
-------------------------------------------------------------------------------
 */
int IpEncrypt(TARGET* listHead,ip_h* ip) {
  10065c:	defffc04 	addi	sp,sp,-16
  100660:	df000315 	stw	fp,12(sp)
  100664:	df000304 	addi	fp,sp,12
  100668:	e13ffe15 	stw	r4,-8(fp)
  10066c:	e17fff15 	stw	r5,-4(fp)
	TARGET* pWalker=listHead;
  100670:	e0bffe17 	ldw	r2,-8(fp)
  100674:	e0bffd15 	stw	r2,-12(fp)
	int i;
	D printf("\tDest: %d.%d.%d.%d, ",ip->ip_dst[0],ip->ip_dst[1],ip->ip_dst[2],ip->ip_dst[3]);

	while(pWalker != NULL) {
  100678:	00002106 	br	100700 <IpEncrypt+0xa4>
		if ((ip->ip_dst[0] == pWalker->dstHost[0]) && (ip->ip_dst[1] == pWalker->dstHost[1]) && (ip->ip_dst[2] == pWalker->dstHost[2]) && (ip->ip_dst[3] == pWalker->dstHost[3])) {
  10067c:	e0bfff17 	ldw	r2,-4(fp)
  100680:	10c00403 	ldbu	r3,16(r2)
  100684:	e0bffd17 	ldw	r2,-12(fp)
  100688:	10800203 	ldbu	r2,8(r2)
  10068c:	18c03fcc 	andi	r3,r3,255
  100690:	10803fcc 	andi	r2,r2,255
  100694:	1880171e 	bne	r3,r2,1006f4 <IpEncrypt+0x98>
  100698:	e0bfff17 	ldw	r2,-4(fp)
  10069c:	10c00443 	ldbu	r3,17(r2)
  1006a0:	e0bffd17 	ldw	r2,-12(fp)
  1006a4:	10800243 	ldbu	r2,9(r2)
  1006a8:	18c03fcc 	andi	r3,r3,255
  1006ac:	10803fcc 	andi	r2,r2,255
  1006b0:	1880101e 	bne	r3,r2,1006f4 <IpEncrypt+0x98>
  1006b4:	e0bfff17 	ldw	r2,-4(fp)
  1006b8:	10c00483 	ldbu	r3,18(r2)
  1006bc:	e0bffd17 	ldw	r2,-12(fp)
  1006c0:	10800283 	ldbu	r2,10(r2)
  1006c4:	18c03fcc 	andi	r3,r3,255
  1006c8:	10803fcc 	andi	r2,r2,255
  1006cc:	1880091e 	bne	r3,r2,1006f4 <IpEncrypt+0x98>
  1006d0:	e0bfff17 	ldw	r2,-4(fp)
  1006d4:	10c004c3 	ldbu	r3,19(r2)
  1006d8:	e0bffd17 	ldw	r2,-12(fp)
  1006dc:	108002c3 	ldbu	r2,11(r2)
  1006e0:	18c03fcc 	andi	r3,r3,255
  1006e4:	10803fcc 	andi	r2,r2,255
  1006e8:	1880021e 	bne	r3,r2,1006f4 <IpEncrypt+0x98>
			D printf("found target!\n");
			return 1;
  1006ec:	00800044 	movi	r2,1
  1006f0:	00000606 	br	10070c <IpEncrypt+0xb0>
		}
		pWalker=pWalker->nextTargetNumber;
  1006f4:	e0bffd17 	ldw	r2,-12(fp)
  1006f8:	10800417 	ldw	r2,16(r2)
  1006fc:	e0bffd15 	stw	r2,-12(fp)
int IpEncrypt(TARGET* listHead,ip_h* ip) {
	TARGET* pWalker=listHead;
	int i;
	D printf("\tDest: %d.%d.%d.%d, ",ip->ip_dst[0],ip->ip_dst[1],ip->ip_dst[2],ip->ip_dst[3]);

	while(pWalker != NULL) {
  100700:	e0bffd17 	ldw	r2,-12(fp)
  100704:	103fdd1e 	bne	r2,zero,10067c <black_to_red_frame+0xfe10067c>
			return 1;
		}
		pWalker=pWalker->nextTargetNumber;
	}
	D printf("no valid target found, forwarding.\n");
	return 0;
  100708:	0005883a 	mov	r2,zero

}
  10070c:	e037883a 	mov	sp,fp
  100710:	df000017 	ldw	fp,0(sp)
  100714:	dec00104 	addi	sp,sp,4
  100718:	f800283a 	ret

0010071c <NatEncrypt>:

Returns:		1 = match found
				0 = no matches
-------------------------------------------------------------------------------
 */
int NatEncrypt(TARGET* listHead,ip_h* ip,tran_h* tran) {
  10071c:	defffb04 	addi	sp,sp,-20
  100720:	df000415 	stw	fp,16(sp)
  100724:	df000404 	addi	fp,sp,16
  100728:	e13ffd15 	stw	r4,-12(fp)
  10072c:	e17ffe15 	stw	r5,-8(fp)
  100730:	e1bfff15 	stw	r6,-4(fp)
	TARGET* pWalker=listHead;
  100734:	e0bffd17 	ldw	r2,-12(fp)
  100738:	e0bffc15 	stw	r2,-16(fp)

	while(pWalker != NULL) {
  10073c:	00003d06 	br	100834 <NatEncrypt+0x118>
		if ((ip->ip_dst[0] == pWalker->dstHost[0]) && (ip->ip_dst[1] == pWalker->dstHost[1]) && (ip->ip_dst[2] == pWalker->dstHost[2]) && (ip->ip_dst[3] == pWalker->dstHost[3])) {
  100740:	e0bffe17 	ldw	r2,-8(fp)
  100744:	10c00403 	ldbu	r3,16(r2)
  100748:	e0bffc17 	ldw	r2,-16(fp)
  10074c:	10800203 	ldbu	r2,8(r2)
  100750:	18c03fcc 	andi	r3,r3,255
  100754:	10803fcc 	andi	r2,r2,255
  100758:	1880331e 	bne	r3,r2,100828 <NatEncrypt+0x10c>
  10075c:	e0bffe17 	ldw	r2,-8(fp)
  100760:	10c00443 	ldbu	r3,17(r2)
  100764:	e0bffc17 	ldw	r2,-16(fp)
  100768:	10800243 	ldbu	r2,9(r2)
  10076c:	18c03fcc 	andi	r3,r3,255
  100770:	10803fcc 	andi	r2,r2,255
  100774:	18802c1e 	bne	r3,r2,100828 <NatEncrypt+0x10c>
  100778:	e0bffe17 	ldw	r2,-8(fp)
  10077c:	10c00483 	ldbu	r3,18(r2)
  100780:	e0bffc17 	ldw	r2,-16(fp)
  100784:	10800283 	ldbu	r2,10(r2)
  100788:	18c03fcc 	andi	r3,r3,255
  10078c:	10803fcc 	andi	r2,r2,255
  100790:	1880251e 	bne	r3,r2,100828 <NatEncrypt+0x10c>
  100794:	e0bffe17 	ldw	r2,-8(fp)
  100798:	10c004c3 	ldbu	r3,19(r2)
  10079c:	e0bffc17 	ldw	r2,-16(fp)
  1007a0:	108002c3 	ldbu	r2,11(r2)
  1007a4:	18c03fcc 	andi	r3,r3,255
  1007a8:	10803fcc 	andi	r2,r2,255
  1007ac:	18801e1e 	bne	r3,r2,100828 <NatEncrypt+0x10c>
			if ((tran->dst_port[0] == pWalker->dstPort[0]) && (tran->dst_port[0] == pWalker->dstPort[1])) {
  1007b0:	e0bfff17 	ldw	r2,-4(fp)
  1007b4:	10c00083 	ldbu	r3,2(r2)
  1007b8:	e0bffc17 	ldw	r2,-16(fp)
  1007bc:	10800383 	ldbu	r2,14(r2)
  1007c0:	18c03fcc 	andi	r3,r3,255
  1007c4:	10803fcc 	andi	r2,r2,255
  1007c8:	1880171e 	bne	r3,r2,100828 <NatEncrypt+0x10c>
  1007cc:	e0bfff17 	ldw	r2,-4(fp)
  1007d0:	10c00083 	ldbu	r3,2(r2)
  1007d4:	e0bffc17 	ldw	r2,-16(fp)
  1007d8:	108003c3 	ldbu	r2,15(r2)
  1007dc:	18c03fcc 	andi	r3,r3,255
  1007e0:	10803fcc 	andi	r2,r2,255
  1007e4:	1880101e 	bne	r3,r2,100828 <NatEncrypt+0x10c>
				if ((tran->src_port[0] == pWalker->srcPort[0]) && (tran->src_port[0] == pWalker->srcPort[1])) {
  1007e8:	e0bfff17 	ldw	r2,-4(fp)
  1007ec:	10c00003 	ldbu	r3,0(r2)
  1007f0:	e0bffc17 	ldw	r2,-16(fp)
  1007f4:	10800303 	ldbu	r2,12(r2)
  1007f8:	18c03fcc 	andi	r3,r3,255
  1007fc:	10803fcc 	andi	r2,r2,255
  100800:	1880091e 	bne	r3,r2,100828 <NatEncrypt+0x10c>
  100804:	e0bfff17 	ldw	r2,-4(fp)
  100808:	10c00003 	ldbu	r3,0(r2)
  10080c:	e0bffc17 	ldw	r2,-16(fp)
  100810:	10800343 	ldbu	r2,13(r2)
  100814:	18c03fcc 	andi	r3,r3,255
  100818:	10803fcc 	andi	r2,r2,255
  10081c:	1880021e 	bne	r3,r2,100828 <NatEncrypt+0x10c>
					return 1;
  100820:	00800044 	movi	r2,1
  100824:	00000606 	br	100840 <NatEncrypt+0x124>
				}
			}
		}
		pWalker=pWalker->nextTargetNumber;
  100828:	e0bffc17 	ldw	r2,-16(fp)
  10082c:	10800417 	ldw	r2,16(r2)
  100830:	e0bffc15 	stw	r2,-16(fp)
-------------------------------------------------------------------------------
 */
int NatEncrypt(TARGET* listHead,ip_h* ip,tran_h* tran) {
	TARGET* pWalker=listHead;

	while(pWalker != NULL) {
  100834:	e0bffc17 	ldw	r2,-16(fp)
  100838:	103fc11e 	bne	r2,zero,100740 <black_to_red_frame+0xfe100740>
				}
			}
		}
		pWalker=pWalker->nextTargetNumber;
	}
	return 0;
  10083c:	0005883a 	mov	r2,zero
}
  100840:	e037883a 	mov	sp,fp
  100844:	df000017 	ldw	fp,0(sp)
  100848:	dec00104 	addi	sp,sp,4
  10084c:	f800283a 	ret

00100850 <PacketProcessor_Black_Rx>:
#define B if(1)
#else
#define B if(0)
#endif

unsigned char PacketProcessor_Black_Rx(void * packet) {
  100850:	defff104 	addi	sp,sp,-60
  100854:	dfc00e15 	stw	ra,56(sp)
  100858:	df000d15 	stw	fp,52(sp)
  10085c:	df000d04 	addi	fp,sp,52
  100860:	e13fff15 	stw	r4,-4(fp)
	-------------------------------------------------------------------------------
	Variable Declarations
	-------------------------------------------------------------------------------
	*/

	int offset = 0;
  100864:	e03ff615 	stw	zero,-40(fp)
	int decryptFound = 0;
  100868:	e03ff315 	stw	zero,-52(fp)
	int ipHeaderSize = 0;
  10086c:	e03ff415 	stw	zero,-48(fp)
	int transportHeaderSize = 0;
  100870:	e03ff515 	stw	zero,-44(fp)
	int opMode = 0;
  100874:	e03ff715 	stw	zero,-36(fp)
	int dataLength = 0;
  100878:	e03ff815 	stw	zero,-32(fp)
	 /*
	-------------------------------------------------------------------------------
	Get Header Values
	-------------------------------------------------------------------------------
	*/
		void *packet_pointer = packet;
  10087c:	e0bfff17 	ldw	r2,-4(fp)
  100880:	e0bff915 	stw	r2,-28(fp)
		 /*
		-------------------------------------------------------------------------------
		Link Layer
		-------------------------------------------------------------------------------
		*/
		eth = (eth_h*) packet_pointer;
  100884:	e0bff917 	ldw	r2,-28(fp)
  100888:	e0bffa15 	stw	r2,-24(fp)
		packet_pointer += ETH_HEADER_SIZE;
  10088c:	e0bff917 	ldw	r2,-28(fp)
  100890:	10800384 	addi	r2,r2,14
  100894:	e0bff915 	stw	r2,-28(fp)
		 /*
		-------------------------------------------------------------------------------
		Network Layer
		-------------------------------------------------------------------------------
		*/
		ip = (ip_h*) packet_pointer;
  100898:	e0bff917 	ldw	r2,-28(fp)
  10089c:	e0bffb15 	stw	r2,-20(fp)
		if(ip->verIHL != 0x45) {
  1008a0:	e0bffb17 	ldw	r2,-20(fp)
  1008a4:	10801160 	cmpeqi	r2,r2,69
  1008a8:	1000071e 	bne	r2,zero,1008c8 <PacketProcessor_Black_Rx+0x78>
			ipHeaderSize = (ip->verIHL[0]-69)*4;
  1008ac:	e0bffb17 	ldw	r2,-20(fp)
  1008b0:	10800003 	ldbu	r2,0(r2)
  1008b4:	10803fcc 	andi	r2,r2,255
  1008b8:	10bfeec4 	addi	r2,r2,-69
  1008bc:	1085883a 	add	r2,r2,r2
  1008c0:	1085883a 	add	r2,r2,r2
  1008c4:	e0bff415 	stw	r2,-48(fp)
		}
		ipHeaderSize += IP_HEADER_SIZE;
  1008c8:	e0bff417 	ldw	r2,-48(fp)
  1008cc:	10800504 	addi	r2,r2,20
  1008d0:	e0bff415 	stw	r2,-48(fp)
		packet_pointer += ipHeaderSize;
  1008d4:	e0bff417 	ldw	r2,-48(fp)
  1008d8:	e0fff917 	ldw	r3,-28(fp)
  1008dc:	1885883a 	add	r2,r3,r2
  1008e0:	e0bff915 	stw	r2,-28(fp)
		 /*
		-------------------------------------------------------------------------------
		Transport Layer
		-------------------------------------------------------------------------------
		*/
		tran = (tran_h*) packet_pointer;
  1008e4:	e0bff917 	ldw	r2,-28(fp)
  1008e8:	e0bffc15 	stw	r2,-16(fp)
		if ((*(char*)ip->protocol) == 0x11) {
  1008ec:	e0bffb17 	ldw	r2,-20(fp)
  1008f0:	10800244 	addi	r2,r2,9
  1008f4:	10800003 	ldbu	r2,0(r2)
  1008f8:	10803fcc 	andi	r2,r2,255
  1008fc:	1080201c 	xori	r2,r2,128
  100900:	10bfe004 	addi	r2,r2,-128
  100904:	10800458 	cmpnei	r2,r2,17
  100908:	1000051e 	bne	r2,zero,100920 <PacketProcessor_Black_Rx+0xd0>
			udp = (udp_h*) tran;
  10090c:	e0bffc17 	ldw	r2,-16(fp)
  100910:	e0bffd15 	stw	r2,-12(fp)
			transportHeaderSize = 8;
  100914:	00800204 	movi	r2,8
  100918:	e0bff515 	stw	r2,-44(fp)
  10091c:	00001006 	br	100960 <PacketProcessor_Black_Rx+0x110>
		} else if ((*(char*)ip->protocol) == 0x06) {
  100920:	e0bffb17 	ldw	r2,-20(fp)
  100924:	10800244 	addi	r2,r2,9
  100928:	10800003 	ldbu	r2,0(r2)
  10092c:	10803fcc 	andi	r2,r2,255
  100930:	1080201c 	xori	r2,r2,128
  100934:	10bfe004 	addi	r2,r2,-128
  100938:	10800198 	cmpnei	r2,r2,6
  10093c:	1000081e 	bne	r2,zero,100960 <PacketProcessor_Black_Rx+0x110>
			transportHeaderSize = 4* (tran->tcp_length[0] >> 4);
  100940:	e0bffc17 	ldw	r2,-16(fp)
  100944:	10800303 	ldbu	r2,12(r2)
  100948:	10803fcc 	andi	r2,r2,255
  10094c:	1004d13a 	srli	r2,r2,4
  100950:	10803fcc 	andi	r2,r2,255
  100954:	1085883a 	add	r2,r2,r2
  100958:	1085883a 	add	r2,r2,r2
  10095c:	e0bff515 	stw	r2,-44(fp)
		 /*
		-------------------------------------------------------------------------------
		Data
		-------------------------------------------------------------------------------
		*/
		dataLength = ((int) (256 * ip->totalLength[0]) + (int) ip->totalLength[1])
  100960:	e0bffb17 	ldw	r2,-20(fp)
  100964:	10800083 	ldbu	r2,2(r2)
  100968:	10803fcc 	andi	r2,r2,255
  10096c:	1006923a 	slli	r3,r2,8
  100970:	e0bffb17 	ldw	r2,-20(fp)
  100974:	108000c3 	ldbu	r2,3(r2)
  100978:	10803fcc 	andi	r2,r2,255
  10097c:	1887883a 	add	r3,r3,r2
				- (transportHeaderSize + ipHeaderSize);
  100980:	e13ff517 	ldw	r4,-44(fp)
  100984:	e0bff417 	ldw	r2,-48(fp)
  100988:	2085883a 	add	r2,r4,r2
		 /*
		-------------------------------------------------------------------------------
		Data
		-------------------------------------------------------------------------------
		*/
		dataLength = ((int) (256 * ip->totalLength[0]) + (int) ip->totalLength[1])
  10098c:	1885c83a 	sub	r2,r3,r2
  100990:	e0bff815 	stw	r2,-32(fp)
				- (transportHeaderSize + ipHeaderSize);

		packet_pointer += transportHeaderSize;
  100994:	e0bff517 	ldw	r2,-44(fp)
  100998:	e0fff917 	ldw	r3,-28(fp)
  10099c:	1885883a 	add	r2,r3,r2
  1009a0:	e0bff915 	stw	r2,-28(fp)
	-------------------------------------------------------------------------------
	Dissect Packet
	-------------------------------------------------------------------------------
	*/
	B printf("\nTesting TED Packet coming through BLACK:\n");
	if((Ipv4PacketBlack(eth) == 1) && (dataLength != 0)) {
  1009a4:	e13ffa17 	ldw	r4,-24(fp)
  1009a8:	0100b940 	call	100b94 <Ipv4PacketBlack>
  1009ac:	10800058 	cmpnei	r2,r2,1
  1009b0:	1000721e 	bne	r2,zero,100b7c <PacketProcessor_Black_Rx+0x32c>
  1009b4:	e0bff817 	ldw	r2,-32(fp)
  1009b8:	10007026 	beq	r2,zero,100b7c <PacketProcessor_Black_Rx+0x32c>
		B printf("\tIPV4 found, keep checking\n");
		if(!IcmpPacketBlack(ip)) {
  1009bc:	e13ffb17 	ldw	r4,-20(fp)
  1009c0:	0100bd80 	call	100bd8 <IcmpPacketBlack>
  1009c4:	10006d1e 	bne	r2,zero,100b7c <PacketProcessor_Black_Rx+0x32c>
			switch(opMode) {
  1009c8:	e0bff717 	ldw	r2,-36(fp)
  1009cc:	10c00060 	cmpeqi	r3,r2,1
  1009d0:	1800141e 	bne	r3,zero,100a24 <PacketProcessor_Black_Rx+0x1d4>
  1009d4:	10c00088 	cmpgei	r3,r2,2
  1009d8:	1800021e 	bne	r3,zero,1009e4 <PacketProcessor_Black_Rx+0x194>
  1009dc:	10000626 	beq	r2,zero,1009f8 <PacketProcessor_Black_Rx+0x1a8>
						decryptFound = 1;
					}
					break;

				default:
					break;
  1009e0:	00003906 	br	100ac8 <PacketProcessor_Black_Rx+0x278>
	*/
	B printf("\nTesting TED Packet coming through BLACK:\n");
	if((Ipv4PacketBlack(eth) == 1) && (dataLength != 0)) {
		B printf("\tIPV4 found, keep checking\n");
		if(!IcmpPacketBlack(ip)) {
			switch(opMode) {
  1009e4:	10c000a0 	cmpeqi	r3,r2,2
  1009e8:	1800191e 	bne	r3,zero,100a50 <PacketProcessor_Black_Rx+0x200>
  1009ec:	108000e0 	cmpeqi	r2,r2,3
  1009f0:	1000291e 	bne	r2,zero,100a98 <PacketProcessor_Black_Rx+0x248>
						decryptFound = 1;
					}
					break;

				default:
					break;
  1009f4:	00003406 	br	100ac8 <PacketProcessor_Black_Rx+0x278>
	if((Ipv4PacketBlack(eth) == 1) && (dataLength != 0)) {
		B printf("\tIPV4 found, keep checking\n");
		if(!IcmpPacketBlack(ip)) {
			switch(opMode) {
				case 0 :
					if(IpDecrypt(headNumber,ip)) {
  1009f8:	008004b4 	movhi	r2,18
  1009fc:	10a90304 	addi	r2,r2,-23540
  100a00:	10800017 	ldw	r2,0(r2)
  100a04:	1009883a 	mov	r4,r2
  100a08:	e17ffb17 	ldw	r5,-20(fp)
  100a0c:	01003e00 	call	1003e0 <IpDecrypt>
  100a10:	10000326 	beq	r2,zero,100a20 <PacketProcessor_Black_Rx+0x1d0>
						decryptFound = 1;
  100a14:	00800044 	movi	r2,1
  100a18:	e0bff315 	stw	r2,-52(fp)
					}
					break;
  100a1c:	00002a06 	br	100ac8 <PacketProcessor_Black_Rx+0x278>
  100a20:	00002906 	br	100ac8 <PacketProcessor_Black_Rx+0x278>

				case 1 :
					if(PortDecrypt(headNumber,tran)) {
  100a24:	008004b4 	movhi	r2,18
  100a28:	10a90304 	addi	r2,r2,-23540
  100a2c:	10800017 	ldw	r2,0(r2)
  100a30:	1009883a 	mov	r4,r2
  100a34:	e17ffc17 	ldw	r5,-16(fp)
  100a38:	01003580 	call	100358 <PortDecrypt>
  100a3c:	10000326 	beq	r2,zero,100a4c <PacketProcessor_Black_Rx+0x1fc>
						decryptFound = 1;
  100a40:	00800044 	movi	r2,1
  100a44:	e0bff315 	stw	r2,-52(fp)
					}
					break;
  100a48:	00001f06 	br	100ac8 <PacketProcessor_Black_Rx+0x278>
  100a4c:	00001e06 	br	100ac8 <PacketProcessor_Black_Rx+0x278>

				case 2 :

					if(IpDecrypt(headNumber,ip) && PortDecrypt(headNumber,tran)) {
  100a50:	008004b4 	movhi	r2,18
  100a54:	10a90304 	addi	r2,r2,-23540
  100a58:	10800017 	ldw	r2,0(r2)
  100a5c:	1009883a 	mov	r4,r2
  100a60:	e17ffb17 	ldw	r5,-20(fp)
  100a64:	01003e00 	call	1003e0 <IpDecrypt>
  100a68:	10000a26 	beq	r2,zero,100a94 <PacketProcessor_Black_Rx+0x244>
  100a6c:	008004b4 	movhi	r2,18
  100a70:	10a90304 	addi	r2,r2,-23540
  100a74:	10800017 	ldw	r2,0(r2)
  100a78:	1009883a 	mov	r4,r2
  100a7c:	e17ffc17 	ldw	r5,-16(fp)
  100a80:	01003580 	call	100358 <PortDecrypt>
  100a84:	10000326 	beq	r2,zero,100a94 <PacketProcessor_Black_Rx+0x244>
						decryptFound = 1;
  100a88:	00800044 	movi	r2,1
  100a8c:	e0bff315 	stw	r2,-52(fp)
					}
					break;
  100a90:	00000d06 	br	100ac8 <PacketProcessor_Black_Rx+0x278>
  100a94:	00000c06 	br	100ac8 <PacketProcessor_Black_Rx+0x278>

				case 3 :
					if(NatDecrypt(headNumber,ip,tran)) {
  100a98:	008004b4 	movhi	r2,18
  100a9c:	10a90304 	addi	r2,r2,-23540
  100aa0:	10800017 	ldw	r2,0(r2)
  100aa4:	1009883a 	mov	r4,r2
  100aa8:	e17ffb17 	ldw	r5,-20(fp)
  100aac:	e1bffc17 	ldw	r6,-16(fp)
  100ab0:	01004a00 	call	1004a0 <NatDecrypt>
  100ab4:	10000326 	beq	r2,zero,100ac4 <PacketProcessor_Black_Rx+0x274>
						decryptFound = 1;
  100ab8:	00800044 	movi	r2,1
  100abc:	e0bff315 	stw	r2,-52(fp)
					}
					break;
  100ac0:	00000006 	br	100ac4 <PacketProcessor_Black_Rx+0x274>
  100ac4:	0001883a 	nop

				default:
					break;
			} //switch(opMode) end

			if(decryptFound == 1) {
  100ac8:	e0bff317 	ldw	r2,-52(fp)
  100acc:	10800058 	cmpnei	r2,r2,1
  100ad0:	10002a1e 	bne	r2,zero,100b7c <PacketProcessor_Black_Rx+0x32c>
				B printf("\tBeginning decryption:\n");
				//salt is the packet ID which is

				saltMSB = ip->packetID[0];
  100ad4:	e0bffb17 	ldw	r2,-20(fp)
  100ad8:	10800103 	ldbu	r2,4(r2)
  100adc:	e0bffe05 	stb	r2,-8(fp)
				saltLSB = ip->packetID[1];
  100ae0:	e0bffb17 	ldw	r2,-20(fp)
  100ae4:	10800143 	ldbu	r2,5(r2)
  100ae8:	e0bffe45 	stb	r2,-7(fp)

				//injectionVector = (saltMSB << 24) | (saltLSB << 16)
				//		| (saltMSB << 8) | saltLSB;

				B printf("\t\tIP ID is 0x%x%x", saltMSB, saltLSB);
				Decryptor->injectionVector = (saltMSB << 24) | (saltLSB << 16) | (saltMSB << 8) | saltLSB;
  100aec:	008004b4 	movhi	r2,18
  100af0:	10a1ef04 	addi	r2,r2,-30788
  100af4:	10800017 	ldw	r2,0(r2)
  100af8:	e0fffe03 	ldbu	r3,-8(fp)
  100afc:	1808963a 	slli	r4,r3,24
  100b00:	e0fffe43 	ldbu	r3,-7(fp)
  100b04:	1806943a 	slli	r3,r3,16
  100b08:	20c8b03a 	or	r4,r4,r3
  100b0c:	e0fffe03 	ldbu	r3,-8(fp)
  100b10:	1806923a 	slli	r3,r3,8
  100b14:	20c8b03a 	or	r4,r4,r3
  100b18:	e0fffe43 	ldbu	r3,-7(fp)
  100b1c:	20c6b03a 	or	r3,r4,r3
  100b20:	10c00515 	stw	r3,20(r2)
				B printf(", Decryptor IV is 0x%.8x\n", Decryptor->injectionVector);

				Decryptor->readStart = (unsigned int) packet_pointer;
  100b24:	008004b4 	movhi	r2,18
  100b28:	10a1ef04 	addi	r2,r2,-30788
  100b2c:	10800017 	ldw	r2,0(r2)
  100b30:	e0fff917 	ldw	r3,-28(fp)
  100b34:	10c00215 	stw	r3,8(r2)
				Decryptor->writeStart = (unsigned int) packet_pointer;
  100b38:	008004b4 	movhi	r2,18
  100b3c:	10a1ef04 	addi	r2,r2,-30788
  100b40:	10800017 	ldw	r2,0(r2)
  100b44:	e0fff917 	ldw	r3,-28(fp)
  100b48:	10c00315 	stw	r3,12(r2)
				Decryptor->transferLength = (unsigned int) dataLength;
  100b4c:	008004b4 	movhi	r2,18
  100b50:	10a1ef04 	addi	r2,r2,-30788
  100b54:	10800017 	ldw	r2,0(r2)
  100b58:	e0fff817 	ldw	r3,-32(fp)
  100b5c:	10c00415 	stw	r3,16(r2)
				B printf("\t\tDecryptor read start is 0x%.8x\n", Decryptor->readStart);
				B printf("\t\tDecryptor write start is 0x%.8x\n", Decryptor->writeStart);
				B printf("\t\tDecryptor length is %d\n", Decryptor->transferLength);

				B printf("\t\tStarted decryption");
				Decryptor->control = DECRYPT;
  100b60:	008004b4 	movhi	r2,18
  100b64:	10a1ef04 	addi	r2,r2,-30788
  100b68:	10800017 	ldw	r2,0(r2)
  100b6c:	00c000c4 	movi	r3,3
  100b70:	10c00015 	stw	r3,0(r2)
				B printf(". DONE!\n");
				return 2;
  100b74:	00800084 	movi	r2,2
  100b78:	00000106 	br	100b80 <PacketProcessor_Black_Rx+0x330>
		}
	} //If to check ipv4
	else {
		//not ipv4 -> Forward
	}
	return 0;
  100b7c:	0005883a 	mov	r2,zero
}
  100b80:	e037883a 	mov	sp,fp
  100b84:	dfc00117 	ldw	ra,4(sp)
  100b88:	df000017 	ldw	fp,0(sp)
  100b8c:	dec00204 	addi	sp,sp,8
  100b90:	f800283a 	ret

00100b94 <Ipv4PacketBlack>:
Returns:		Returns 1 if Admin Packet Detected.
				Returns 0 for all other cases.
-------------------------------------------------------------------------------
*/

int Ipv4PacketBlack(eth_h* eth) {
  100b94:	defffe04 	addi	sp,sp,-8
  100b98:	df000115 	stw	fp,4(sp)
  100b9c:	df000104 	addi	fp,sp,4
  100ba0:	e13fff15 	stw	r4,-4(fp)
	B printf("\tpacket type : 0x%0.2x%0.2x", eth->eth_protocol[0],
				eth->eth_protocol[1]);
	if ((*(unsigned short*)(eth->eth_protocol)) == 0x0008){
  100ba4:	e0bfff17 	ldw	r2,-4(fp)
  100ba8:	10800304 	addi	r2,r2,12
  100bac:	1080000b 	ldhu	r2,0(r2)
  100bb0:	10bfffcc 	andi	r2,r2,65535
  100bb4:	10800218 	cmpnei	r2,r2,8
  100bb8:	1000021e 	bne	r2,zero,100bc4 <Ipv4PacketBlack+0x30>
	//if (eth->eth_protocol[0] == 0x08 && eth->eth_protocol[1] == 0x00) {
		B printf(" is a valid type, keep checking\n");
		return 1;
  100bbc:	00800044 	movi	r2,1
  100bc0:	00000106 	br	100bc8 <Ipv4PacketBlack+0x34>
	} else {
		B printf(" is not a valid type, forwarding.\n");
		return 0;
  100bc4:	0005883a 	mov	r2,zero
	}

}
  100bc8:	e037883a 	mov	sp,fp
  100bcc:	df000017 	ldw	fp,0(sp)
  100bd0:	dec00104 	addi	sp,sp,4
  100bd4:	f800283a 	ret

00100bd8 <IcmpPacketBlack>:
Returns:		Returns 1 if ICMP Packet Detected.
				Returns 0 for all other cases.
-------------------------------------------------------------------------------
*/

int IcmpPacketBlack(ip_h* ip) {
  100bd8:	defffe04 	addi	sp,sp,-8
  100bdc:	df000115 	stw	fp,4(sp)
  100be0:	df000104 	addi	fp,sp,4
  100be4:	e13fff15 	stw	r4,-4(fp)
	B printf("\tProtocol: 0x%x, ", *(char*)ip->protocol);
	if ((*(char*)ip->protocol) == 0x01) {
  100be8:	e0bfff17 	ldw	r2,-4(fp)
  100bec:	10800244 	addi	r2,r2,9
  100bf0:	10800003 	ldbu	r2,0(r2)
  100bf4:	10803fcc 	andi	r2,r2,255
  100bf8:	1080201c 	xori	r2,r2,128
  100bfc:	10bfe004 	addi	r2,r2,-128
  100c00:	10800058 	cmpnei	r2,r2,1
  100c04:	1000021e 	bne	r2,zero,100c10 <IcmpPacketBlack+0x38>
		B printf("ICMP, forwarding.\n");
		return 1;
  100c08:	00800044 	movi	r2,1
  100c0c:	00000106 	br	100c14 <IcmpPacketBlack+0x3c>
	} else {
		B printf("NOT ICMP, keep checking\n");
		return 0;
  100c10:	0005883a 	mov	r2,zero
	}

}
  100c14:	e037883a 	mov	sp,fp
  100c18:	df000017 	ldw	fp,0(sp)
  100c1c:	dec00104 	addi	sp,sp,4
  100c20:	f800283a 	ret

00100c24 <PacketProcessor_Red_Rx>:
//j = protocol (ICMP, TCP, UDP)
//k = checksum
//l = source IP
//m = destin IP

unsigned char PacketProcessor_Red_Rx(void * packet) {
  100c24:	defff104 	addi	sp,sp,-60
  100c28:	dfc00e15 	stw	ra,56(sp)
  100c2c:	df000d15 	stw	fp,52(sp)
  100c30:	df000d04 	addi	fp,sp,52
  100c34:	e13fff15 	stw	r4,-4(fp)
	 -------------------------------------------------------------------------------
	 Variable Declarations
	 -------------------------------------------------------------------------------
	 */

	int encryptFound = 0;
  100c38:	e03ff315 	stw	zero,-52(fp)
	int ipHeaderSize = 0;
  100c3c:	e03ff415 	stw	zero,-48(fp)
	int transportHeaderSize = 0;
  100c40:	e03ff515 	stw	zero,-44(fp)
	int opMode = 0;
  100c44:	e03ff615 	stw	zero,-40(fp)
	int dataLength = 0;
  100c48:	e03ff715 	stw	zero,-36(fp)
	/*
	 -------------------------------------------------------------------------------
	 Get Header Values
	 -------------------------------------------------------------------------------
	 */
	void* packet_pointer = packet;
  100c4c:	e0bfff17 	ldw	r2,-4(fp)
  100c50:	e0bff815 	stw	r2,-32(fp)
	/*
	 -------------------------------------------------------------------------------
	 Link Layer
	 -------------------------------------------------------------------------------
	 */
	eth = (eth_h*) packet_pointer;
  100c54:	e0bff817 	ldw	r2,-32(fp)
  100c58:	e0bff915 	stw	r2,-28(fp)
	packet_pointer += ETH_HEADER_SIZE;
  100c5c:	e0bff817 	ldw	r2,-32(fp)
  100c60:	10800384 	addi	r2,r2,14
  100c64:	e0bff815 	stw	r2,-32(fp)
	/*
	 -------------------------------------------------------------------------------
	 Network Layer
	 -------------------------------------------------------------------------------
	 */
	ip = (ip_h*) packet_pointer;
  100c68:	e0bff817 	ldw	r2,-32(fp)
  100c6c:	e0bffa15 	stw	r2,-24(fp)
	if (ip->verIHL != 0x45) {
  100c70:	e0bffa17 	ldw	r2,-24(fp)
  100c74:	10801160 	cmpeqi	r2,r2,69
  100c78:	1000071e 	bne	r2,zero,100c98 <PacketProcessor_Red_Rx+0x74>
		ipHeaderSize = (ip->verIHL[0] - 69) * 4;
  100c7c:	e0bffa17 	ldw	r2,-24(fp)
  100c80:	10800003 	ldbu	r2,0(r2)
  100c84:	10803fcc 	andi	r2,r2,255
  100c88:	10bfeec4 	addi	r2,r2,-69
  100c8c:	1085883a 	add	r2,r2,r2
  100c90:	1085883a 	add	r2,r2,r2
  100c94:	e0bff415 	stw	r2,-48(fp)
	}

	ipHeaderSize += IP_HEADER_SIZE;
  100c98:	e0bff417 	ldw	r2,-48(fp)
  100c9c:	10800504 	addi	r2,r2,20
  100ca0:	e0bff415 	stw	r2,-48(fp)
	packet_pointer += ipHeaderSize;
  100ca4:	e0bff417 	ldw	r2,-48(fp)
  100ca8:	e0fff817 	ldw	r3,-32(fp)
  100cac:	1885883a 	add	r2,r3,r2
  100cb0:	e0bff815 	stw	r2,-32(fp)
	/*
	 -------------------------------------------------------------------------------
	 Transport Layer
	 -------------------------------------------------------------------------------
	 */
	tran = (tran_h*) packet_pointer;
  100cb4:	e0bff817 	ldw	r2,-32(fp)
  100cb8:	e0bffb15 	stw	r2,-20(fp)
	if ((*(char*)ip->protocol) == 0x11) {
  100cbc:	e0bffa17 	ldw	r2,-24(fp)
  100cc0:	10800244 	addi	r2,r2,9
  100cc4:	10800003 	ldbu	r2,0(r2)
  100cc8:	10803fcc 	andi	r2,r2,255
  100ccc:	1080201c 	xori	r2,r2,128
  100cd0:	10bfe004 	addi	r2,r2,-128
  100cd4:	10800458 	cmpnei	r2,r2,17
  100cd8:	1000051e 	bne	r2,zero,100cf0 <PacketProcessor_Red_Rx+0xcc>
		udp = (udp_h*) tran;
  100cdc:	e0bffb17 	ldw	r2,-20(fp)
  100ce0:	e0bffc15 	stw	r2,-16(fp)
		transportHeaderSize = 8;
  100ce4:	00800204 	movi	r2,8
  100ce8:	e0bff515 	stw	r2,-44(fp)
  100cec:	00001006 	br	100d30 <PacketProcessor_Red_Rx+0x10c>
	} else if ((*(char*)ip->protocol) == 0x06) {
  100cf0:	e0bffa17 	ldw	r2,-24(fp)
  100cf4:	10800244 	addi	r2,r2,9
  100cf8:	10800003 	ldbu	r2,0(r2)
  100cfc:	10803fcc 	andi	r2,r2,255
  100d00:	1080201c 	xori	r2,r2,128
  100d04:	10bfe004 	addi	r2,r2,-128
  100d08:	10800198 	cmpnei	r2,r2,6
  100d0c:	1000081e 	bne	r2,zero,100d30 <PacketProcessor_Red_Rx+0x10c>
		transportHeaderSize = 4* (tran->tcp_length[0] >> 4);
  100d10:	e0bffb17 	ldw	r2,-20(fp)
  100d14:	10800303 	ldbu	r2,12(r2)
  100d18:	10803fcc 	andi	r2,r2,255
  100d1c:	1004d13a 	srli	r2,r2,4
  100d20:	10803fcc 	andi	r2,r2,255
  100d24:	1085883a 	add	r2,r2,r2
  100d28:	1085883a 	add	r2,r2,r2
  100d2c:	e0bff515 	stw	r2,-44(fp)
	/*
	 -------------------------------------------------------------------------------
	 Data
	 -------------------------------------------------------------------------------
	 */
	dataLength = ((int) (256 * ip->totalLength[0]) + (int) ip->totalLength[1])
  100d30:	e0bffa17 	ldw	r2,-24(fp)
  100d34:	10800083 	ldbu	r2,2(r2)
  100d38:	10803fcc 	andi	r2,r2,255
  100d3c:	1006923a 	slli	r3,r2,8
  100d40:	e0bffa17 	ldw	r2,-24(fp)
  100d44:	108000c3 	ldbu	r2,3(r2)
  100d48:	10803fcc 	andi	r2,r2,255
  100d4c:	1887883a 	add	r3,r3,r2
			- (transportHeaderSize + ipHeaderSize);
  100d50:	e13ff517 	ldw	r4,-44(fp)
  100d54:	e0bff417 	ldw	r2,-48(fp)
  100d58:	2085883a 	add	r2,r4,r2
	/*
	 -------------------------------------------------------------------------------
	 Data
	 -------------------------------------------------------------------------------
	 */
	dataLength = ((int) (256 * ip->totalLength[0]) + (int) ip->totalLength[1])
  100d5c:	1885c83a 	sub	r2,r3,r2
  100d60:	e0bff715 	stw	r2,-36(fp)
			- (transportHeaderSize + ipHeaderSize);
	//printf("DL: %x\n", (unsigned int) dataLength);
	packet_pointer += transportHeaderSize;
  100d64:	e0bff517 	ldw	r2,-44(fp)
  100d68:	e0fff817 	ldw	r3,-32(fp)
  100d6c:	1885883a 	add	r2,r3,r2
  100d70:	e0bff815 	stw	r2,-32(fp)
	 Dissect Packet
	 -------------------------------------------------------------------------------
	 */

	R printf("\nTesting TED Packet coming through RED:\n");
	if (AdminPacket(ip)) {
  100d74:	e13ffa17 	ldw	r4,-24(fp)
  100d78:	0100fac0 	call	100fac <AdminPacket>
  100d7c:	10000e26 	beq	r2,zero,100db8 <PacketProcessor_Red_Rx+0x194>
		R printf("\tAdmin packet found\n");
		admin = (admin_h*) packet_pointer;
  100d80:	e0bff817 	ldw	r2,-32(fp)
  100d84:	e0bffd15 	stw	r2,-12(fp)
		headNumber = ProcessAdminPacket(admin, headNumber);
  100d88:	008004b4 	movhi	r2,18
  100d8c:	10a90304 	addi	r2,r2,-23540
  100d90:	10800017 	ldw	r2,0(r2)
  100d94:	e13ffd17 	ldw	r4,-12(fp)
  100d98:	100b883a 	mov	r5,r2
  100d9c:	01010800 	call	101080 <ProcessAdminPacket>
  100da0:	1007883a 	mov	r3,r2
  100da4:	008004b4 	movhi	r2,18
  100da8:	10a90304 	addi	r2,r2,-23540
  100dac:	10c00015 	stw	r3,0(r2)
		return 1;
  100db0:	00800044 	movi	r2,1
  100db4:	00007806 	br	100f98 <PacketProcessor_Red_Rx+0x374>
	} else {
		if ((Ipv4PacketRed(eth) == 1) && (dataLength != 0)) {
  100db8:	e13ff917 	ldw	r4,-28(fp)
  100dbc:	0100ff00 	call	100ff0 <Ipv4PacketRed>
  100dc0:	10800058 	cmpnei	r2,r2,1
  100dc4:	1000731e 	bne	r2,zero,100f94 <PacketProcessor_Red_Rx+0x370>
  100dc8:	e0bff717 	ldw	r2,-36(fp)
  100dcc:	10007126 	beq	r2,zero,100f94 <PacketProcessor_Red_Rx+0x370>
			R printf("\tIPV4 found, keep checking\n");
			if (!IcmpPacketRed(ip)) {
  100dd0:	e13ffa17 	ldw	r4,-24(fp)
  100dd4:	01010340 	call	101034 <IcmpPacketRed>
  100dd8:	10006e1e 	bne	r2,zero,100f94 <PacketProcessor_Red_Rx+0x370>
				encryptFound = 0;
  100ddc:	e03ff315 	stw	zero,-52(fp)
				switch (opMode) {
  100de0:	e0bff617 	ldw	r2,-40(fp)
  100de4:	10c00060 	cmpeqi	r3,r2,1
  100de8:	1800141e 	bne	r3,zero,100e3c <PacketProcessor_Red_Rx+0x218>
  100dec:	10c00088 	cmpgei	r3,r2,2
  100df0:	1800021e 	bne	r3,zero,100dfc <PacketProcessor_Red_Rx+0x1d8>
  100df4:	10000626 	beq	r2,zero,100e10 <PacketProcessor_Red_Rx+0x1ec>
						encryptFound = 1;
					}
					break;

				default:
					break;
  100df8:	00003906 	br	100ee0 <PacketProcessor_Red_Rx+0x2bc>
	} else {
		if ((Ipv4PacketRed(eth) == 1) && (dataLength != 0)) {
			R printf("\tIPV4 found, keep checking\n");
			if (!IcmpPacketRed(ip)) {
				encryptFound = 0;
				switch (opMode) {
  100dfc:	10c000a0 	cmpeqi	r3,r2,2
  100e00:	1800191e 	bne	r3,zero,100e68 <PacketProcessor_Red_Rx+0x244>
  100e04:	108000e0 	cmpeqi	r2,r2,3
  100e08:	1000291e 	bne	r2,zero,100eb0 <PacketProcessor_Red_Rx+0x28c>
						encryptFound = 1;
					}
					break;

				default:
					break;
  100e0c:	00003406 	br	100ee0 <PacketProcessor_Red_Rx+0x2bc>
			R printf("\tIPV4 found, keep checking\n");
			if (!IcmpPacketRed(ip)) {
				encryptFound = 0;
				switch (opMode) {
				case 0:
					if (IpEncrypt(headNumber, ip)) {
  100e10:	008004b4 	movhi	r2,18
  100e14:	10a90304 	addi	r2,r2,-23540
  100e18:	10800017 	ldw	r2,0(r2)
  100e1c:	1009883a 	mov	r4,r2
  100e20:	e17ffa17 	ldw	r5,-24(fp)
  100e24:	010065c0 	call	10065c <IpEncrypt>
  100e28:	10000326 	beq	r2,zero,100e38 <PacketProcessor_Red_Rx+0x214>
						encryptFound = 1;
  100e2c:	00800044 	movi	r2,1
  100e30:	e0bff315 	stw	r2,-52(fp)
					}
					break;
  100e34:	00002a06 	br	100ee0 <PacketProcessor_Red_Rx+0x2bc>
  100e38:	00002906 	br	100ee0 <PacketProcessor_Red_Rx+0x2bc>

				case 1:
					if (PortEncrypt(headNumber, tran)) {
  100e3c:	008004b4 	movhi	r2,18
  100e40:	10a90304 	addi	r2,r2,-23540
  100e44:	10800017 	ldw	r2,0(r2)
  100e48:	1009883a 	mov	r4,r2
  100e4c:	e17ffb17 	ldw	r5,-20(fp)
  100e50:	01005d40 	call	1005d4 <PortEncrypt>
  100e54:	10000326 	beq	r2,zero,100e64 <PacketProcessor_Red_Rx+0x240>
						encryptFound = 1;
  100e58:	00800044 	movi	r2,1
  100e5c:	e0bff315 	stw	r2,-52(fp)
					}
					break;
  100e60:	00001f06 	br	100ee0 <PacketProcessor_Red_Rx+0x2bc>
  100e64:	00001e06 	br	100ee0 <PacketProcessor_Red_Rx+0x2bc>

				case 2:
					if (IpEncrypt(headNumber, ip)
  100e68:	008004b4 	movhi	r2,18
  100e6c:	10a90304 	addi	r2,r2,-23540
  100e70:	10800017 	ldw	r2,0(r2)
  100e74:	1009883a 	mov	r4,r2
  100e78:	e17ffa17 	ldw	r5,-24(fp)
  100e7c:	010065c0 	call	10065c <IpEncrypt>
  100e80:	10000a26 	beq	r2,zero,100eac <PacketProcessor_Red_Rx+0x288>
							&& PortEncrypt(headNumber, tran)) {
  100e84:	008004b4 	movhi	r2,18
  100e88:	10a90304 	addi	r2,r2,-23540
  100e8c:	10800017 	ldw	r2,0(r2)
  100e90:	1009883a 	mov	r4,r2
  100e94:	e17ffb17 	ldw	r5,-20(fp)
  100e98:	01005d40 	call	1005d4 <PortEncrypt>
  100e9c:	10000326 	beq	r2,zero,100eac <PacketProcessor_Red_Rx+0x288>
						encryptFound = 1;
  100ea0:	00800044 	movi	r2,1
  100ea4:	e0bff315 	stw	r2,-52(fp)
					}
					break;
  100ea8:	00000d06 	br	100ee0 <PacketProcessor_Red_Rx+0x2bc>
  100eac:	00000c06 	br	100ee0 <PacketProcessor_Red_Rx+0x2bc>

				case 3:
					if (NatEncrypt(headNumber, ip, tran)) {
  100eb0:	008004b4 	movhi	r2,18
  100eb4:	10a90304 	addi	r2,r2,-23540
  100eb8:	10800017 	ldw	r2,0(r2)
  100ebc:	1009883a 	mov	r4,r2
  100ec0:	e17ffa17 	ldw	r5,-24(fp)
  100ec4:	e1bffb17 	ldw	r6,-20(fp)
  100ec8:	010071c0 	call	10071c <NatEncrypt>
  100ecc:	10000326 	beq	r2,zero,100edc <PacketProcessor_Red_Rx+0x2b8>
						encryptFound = 1;
  100ed0:	00800044 	movi	r2,1
  100ed4:	e0bff315 	stw	r2,-52(fp)
					}
					break;
  100ed8:	00000006 	br	100edc <PacketProcessor_Red_Rx+0x2b8>
  100edc:	0001883a 	nop

				default:
					break;
				} //switch(opMode) end

				if (encryptFound == 1) {
  100ee0:	e0bff317 	ldw	r2,-52(fp)
  100ee4:	10800058 	cmpnei	r2,r2,1
  100ee8:	10002a1e 	bne	r2,zero,100f94 <PacketProcessor_Red_Rx+0x370>
					R printf("\tBeginning encryption:\n");
					//salt is the packet ID which is

					saltMSB = ip->packetID[0];
  100eec:	e0bffa17 	ldw	r2,-24(fp)
  100ef0:	10800103 	ldbu	r2,4(r2)
  100ef4:	e0bffe05 	stb	r2,-8(fp)
					saltLSB = ip->packetID[1];
  100ef8:	e0bffa17 	ldw	r2,-24(fp)
  100efc:	10800143 	ldbu	r2,5(r2)
  100f00:	e0bffe45 	stb	r2,-7(fp)

					R printf("\t\tIP ID is 0x%x%x", saltMSB, saltLSB);
					Encryptor->injectionVector = (saltMSB << 24) | (saltLSB << 16) | (saltMSB << 8) | saltLSB;;
  100f04:	008004b4 	movhi	r2,18
  100f08:	10a1ee04 	addi	r2,r2,-30792
  100f0c:	10800017 	ldw	r2,0(r2)
  100f10:	e0fffe03 	ldbu	r3,-8(fp)
  100f14:	1808963a 	slli	r4,r3,24
  100f18:	e0fffe43 	ldbu	r3,-7(fp)
  100f1c:	1806943a 	slli	r3,r3,16
  100f20:	20c8b03a 	or	r4,r4,r3
  100f24:	e0fffe03 	ldbu	r3,-8(fp)
  100f28:	1806923a 	slli	r3,r3,8
  100f2c:	20c8b03a 	or	r4,r4,r3
  100f30:	e0fffe43 	ldbu	r3,-7(fp)
  100f34:	20c6b03a 	or	r3,r4,r3
  100f38:	10c00515 	stw	r3,20(r2)
					R printf(", Encryptor IV is 0x%.8x\n", Encryptor->injectionVector);

					Encryptor->readStart = (unsigned int) packet_pointer;
  100f3c:	008004b4 	movhi	r2,18
  100f40:	10a1ee04 	addi	r2,r2,-30792
  100f44:	10800017 	ldw	r2,0(r2)
  100f48:	e0fff817 	ldw	r3,-32(fp)
  100f4c:	10c00215 	stw	r3,8(r2)
					Encryptor->writeStart = (unsigned int) packet_pointer;
  100f50:	008004b4 	movhi	r2,18
  100f54:	10a1ee04 	addi	r2,r2,-30792
  100f58:	10800017 	ldw	r2,0(r2)
  100f5c:	e0fff817 	ldw	r3,-32(fp)
  100f60:	10c00315 	stw	r3,12(r2)
					Encryptor->transferLength = (unsigned int) dataLength;
  100f64:	008004b4 	movhi	r2,18
  100f68:	10a1ee04 	addi	r2,r2,-30792
  100f6c:	10800017 	ldw	r2,0(r2)
  100f70:	e0fff717 	ldw	r3,-36(fp)
  100f74:	10c00415 	stw	r3,16(r2)
					R printf("\t\tEncryptor read start is 0x%.8x\n", Encryptor->readStart);
					R printf("\t\tEncryptor write start is 0x%.8x\n", Encryptor->writeStart);
					R printf("\t\tEncryptor length is %d\n", Encryptor->transferLength);

					R printf("\t\tStarted encryption");
					Encryptor->control = ENCRYPT;
  100f78:	008004b4 	movhi	r2,18
  100f7c:	10a1ee04 	addi	r2,r2,-30792
  100f80:	10800017 	ldw	r2,0(r2)
  100f84:	00c00044 	movi	r3,1
  100f88:	10c00015 	stw	r3,0(r2)
					R printf(". DONE!\n");
					return 2;
  100f8c:	00800084 	movi	r2,2
  100f90:	00000106 	br	100f98 <PacketProcessor_Red_Rx+0x374>
		} //If to check ipv4
		else {
			//not ipv4 -> Forward
		}
	}
	return 0;
  100f94:	0005883a 	mov	r2,zero
}
  100f98:	e037883a 	mov	sp,fp
  100f9c:	dfc00117 	ldw	ra,4(sp)
  100fa0:	df000017 	ldw	fp,0(sp)
  100fa4:	dec00204 	addi	sp,sp,8
  100fa8:	f800283a 	ret

00100fac <AdminPacket>:
	 Returns:		Returns 1 if Admin Packet Detected.
	 Returns 0 for all other cases.
	 -------------------------------------------------------------------------------
	 */

	int AdminPacket(ip_h* ip) {
  100fac:	defffe04 	addi	sp,sp,-8
  100fb0:	df000115 	stw	fp,4(sp)
  100fb4:	df000104 	addi	fp,sp,4
  100fb8:	e13fff15 	stw	r4,-4(fp)
		if ((*(unsigned int*)(ip->ip_dst)) == 0x0a0a0a0a){
  100fbc:	e0bfff17 	ldw	r2,-4(fp)
  100fc0:	10800404 	addi	r2,r2,16
  100fc4:	10c00017 	ldw	r3,0(r2)
  100fc8:	008282b4 	movhi	r2,2570
  100fcc:	10828284 	addi	r2,r2,2570
  100fd0:	1880021e 	bne	r3,r2,100fdc <AdminPacket+0x30>
		//if (ip->ip_dst[0] == 0x0a && ip->ip_dst[1] == 0x0a
		//		&& ip->ip_dst[2] == 0x0a && ip->ip_dst[3] == 0x0a) {
			return 1;
  100fd4:	00800044 	movi	r2,1
  100fd8:	00000106 	br	100fe0 <AdminPacket+0x34>
		} else {
			return 0;
  100fdc:	0005883a 	mov	r2,zero
		}

	}
  100fe0:	e037883a 	mov	sp,fp
  100fe4:	df000017 	ldw	fp,0(sp)
  100fe8:	dec00104 	addi	sp,sp,4
  100fec:	f800283a 	ret

00100ff0 <Ipv4PacketRed>:
	 Returns:		Returns 1 if Admin Packet Detected.
	 Returns 0 for all other cases.
	 -------------------------------------------------------------------------------
	 */

	int Ipv4PacketRed(eth_h* eth) {
  100ff0:	defffe04 	addi	sp,sp,-8
  100ff4:	df000115 	stw	fp,4(sp)
  100ff8:	df000104 	addi	fp,sp,4
  100ffc:	e13fff15 	stw	r4,-4(fp)
		R printf("\tpacket type : 0x%.2x%.2x", eth->eth_protocol[0], eth->eth_protocol[1]);
		if ((*(unsigned short*)(eth->eth_protocol)) == 0x0008){
  101000:	e0bfff17 	ldw	r2,-4(fp)
  101004:	10800304 	addi	r2,r2,12
  101008:	1080000b 	ldhu	r2,0(r2)
  10100c:	10bfffcc 	andi	r2,r2,65535
  101010:	10800218 	cmpnei	r2,r2,8
  101014:	1000021e 	bne	r2,zero,101020 <Ipv4PacketRed+0x30>
		//if (eth->eth_protocol[0] == 0x08 && eth->eth_protocol[1] == 0x00) {
			R printf(" is a valid type, keep checking\n");
			return 1;
  101018:	00800044 	movi	r2,1
  10101c:	00000106 	br	101024 <Ipv4PacketRed+0x34>
		} else {
			R printf(" is not a valid type, forwarding.\n");
			return 0;
  101020:	0005883a 	mov	r2,zero
		}

	}
  101024:	e037883a 	mov	sp,fp
  101028:	df000017 	ldw	fp,0(sp)
  10102c:	dec00104 	addi	sp,sp,4
  101030:	f800283a 	ret

00101034 <IcmpPacketRed>:
	 Returns:		Returns 1 if ICMP Packet Detected.
	 Returns 0 for all other cases.
	 -------------------------------------------------------------------------------
	 */

	int IcmpPacketRed(ip_h* ip) {
  101034:	defffe04 	addi	sp,sp,-8
  101038:	df000115 	stw	fp,4(sp)
  10103c:	df000104 	addi	fp,sp,4
  101040:	e13fff15 	stw	r4,-4(fp)
		R printf("\tProtocol: 0x%x, ", *(char*)ip->protocol);
		if ((*(char*)ip->protocol) == 0x01) {
  101044:	e0bfff17 	ldw	r2,-4(fp)
  101048:	10800244 	addi	r2,r2,9
  10104c:	10800003 	ldbu	r2,0(r2)
  101050:	10803fcc 	andi	r2,r2,255
  101054:	1080201c 	xori	r2,r2,128
  101058:	10bfe004 	addi	r2,r2,-128
  10105c:	10800058 	cmpnei	r2,r2,1
  101060:	1000021e 	bne	r2,zero,10106c <IcmpPacketRed+0x38>
			R printf("ICMP, forwarding.\n");
			return 1;
  101064:	00800044 	movi	r2,1
  101068:	00000106 	br	101070 <IcmpPacketRed+0x3c>
		} else {
			R printf("NOT ICMP, keep checking\n");
			return 0;
  10106c:	0005883a 	mov	r2,zero
		}

	}
  101070:	e037883a 	mov	sp,fp
  101074:	df000017 	ldw	fp,0(sp)
  101078:	dec00104 	addi	sp,sp,4
  10107c:	f800283a 	ret

00101080 <ProcessAdminPacket>:

	 Returns:		The head of the target linked list.
	 -------------------------------------------------------------------------------
	 */

	TARGET* ProcessAdminPacket(admin_h* admin, TARGET* headNumber) {
  101080:	deffe604 	addi	sp,sp,-104
  101084:	dfc01915 	stw	ra,100(sp)
  101088:	df001815 	stw	fp,96(sp)
  10108c:	df001804 	addi	fp,sp,96
  101090:	e13ffe15 	stw	r4,-8(fp)
  101094:	e17fff15 	stw	r5,-4(fp)
		R printf("\tIpSrc: %x.%x.%x.%x\n", admin->ipsrc1[0], admin->ipsrc1[1], admin->ipsrc1[2],admin->ipsrc1[3]);
		R printf("\tIpDst: %x.%x.%x.%x\n", admin->ipdst1[0], admin->ipdst1[1], admin->ipdst1[2],admin->ipdst1[3]);
		R printf("\tPtSrc: %x\n", (admin->srcport1[0] << 8 ) | admin->srcport1[1]);
		R printf("\tPtDst: %x\n", (admin->dstport1[0] << 8 ) | admin->dstport1[1]);

		headNumber->nextTargetNumber = NULL;
  101098:	e0bfff17 	ldw	r2,-4(fp)
  10109c:	10000415 	stw	zero,16(r2)

		headNumber = AddTarget(headNumber, 0, admin->ipsrc1,
  1010a0:	e0bffe17 	ldw	r2,-8(fp)
  1010a4:	10c001c4 	addi	r3,r2,7
				 admin->ipdst1, admin->srcport1,
  1010a8:	e0bffe17 	ldw	r2,-8(fp)
  1010ac:	108002c4 	addi	r2,r2,11
  1010b0:	e13ffe17 	ldw	r4,-8(fp)
  1010b4:	214003c4 	addi	r5,r4,15
				 admin->dstport1);
  1010b8:	e13ffe17 	ldw	r4,-8(fp)
  1010bc:	21000444 	addi	r4,r4,17
		R printf("\tPtSrc: %x\n", (admin->srcport1[0] << 8 ) | admin->srcport1[1]);
		R printf("\tPtDst: %x\n", (admin->dstport1[0] << 8 ) | admin->dstport1[1]);

		headNumber->nextTargetNumber = NULL;

		headNumber = AddTarget(headNumber, 0, admin->ipsrc1,
  1010c0:	d9400015 	stw	r5,0(sp)
  1010c4:	d9000115 	stw	r4,4(sp)
  1010c8:	e13fff17 	ldw	r4,-4(fp)
  1010cc:	000b883a 	mov	r5,zero
  1010d0:	180d883a 	mov	r6,r3
  1010d4:	100f883a 	mov	r7,r2
  1010d8:	01015580 	call	101558 <AddTarget>
  1010dc:	e0bfff15 	stw	r2,-4(fp)
				 admin->ipdst1, admin->srcport1,
				 admin->dstport1);
		headNumber = AddTarget(headNumber, 1, admin->ipsrc2,
  1010e0:	e0bffe17 	ldw	r2,-8(fp)
  1010e4:	10c004c4 	addi	r3,r2,19
				 admin->ipdst2, admin->srcport2,
  1010e8:	e0bffe17 	ldw	r2,-8(fp)
  1010ec:	108005c4 	addi	r2,r2,23
  1010f0:	e13ffe17 	ldw	r4,-8(fp)
  1010f4:	214006c4 	addi	r5,r4,27
				 admin->dstport2);
  1010f8:	e13ffe17 	ldw	r4,-8(fp)
  1010fc:	21000744 	addi	r4,r4,29
		headNumber->nextTargetNumber = NULL;

		headNumber = AddTarget(headNumber, 0, admin->ipsrc1,
				 admin->ipdst1, admin->srcport1,
				 admin->dstport1);
		headNumber = AddTarget(headNumber, 1, admin->ipsrc2,
  101100:	d9400015 	stw	r5,0(sp)
  101104:	d9000115 	stw	r4,4(sp)
  101108:	e13fff17 	ldw	r4,-4(fp)
  10110c:	01400044 	movi	r5,1
  101110:	180d883a 	mov	r6,r3
  101114:	100f883a 	mov	r7,r2
  101118:	01015580 	call	101558 <AddTarget>
  10111c:	e0bfff15 	stw	r2,-4(fp)
				 admin->ipdst2, admin->srcport2,
				 admin->dstport2);
		headNumber = AddTarget(headNumber, 2, admin->ipsrc3,
  101120:	e0bffe17 	ldw	r2,-8(fp)
  101124:	10c007c4 	addi	r3,r2,31
				 admin->ipdst3, admin->srcport3,
  101128:	e0bffe17 	ldw	r2,-8(fp)
  10112c:	108008c4 	addi	r2,r2,35
  101130:	e13ffe17 	ldw	r4,-8(fp)
  101134:	214009c4 	addi	r5,r4,39
				 admin->dstport3);
  101138:	e13ffe17 	ldw	r4,-8(fp)
  10113c:	21000a44 	addi	r4,r4,41
				 admin->ipdst1, admin->srcport1,
				 admin->dstport1);
		headNumber = AddTarget(headNumber, 1, admin->ipsrc2,
				 admin->ipdst2, admin->srcport2,
				 admin->dstport2);
		headNumber = AddTarget(headNumber, 2, admin->ipsrc3,
  101140:	d9400015 	stw	r5,0(sp)
  101144:	d9000115 	stw	r4,4(sp)
  101148:	e13fff17 	ldw	r4,-4(fp)
  10114c:	01400084 	movi	r5,2
  101150:	180d883a 	mov	r6,r3
  101154:	100f883a 	mov	r7,r2
  101158:	01015580 	call	101558 <AddTarget>
  10115c:	e0bfff15 	stw	r2,-4(fp)
				 admin->dstport3);


		R printf("\n");
		R printf("Old key8key16: 0x%08x\n", (unsigned int)Encryptor->key8key16);
		Encryptor->key8key16 = (((admin->key8[0]) << 16) | ((admin->key16[1]) << 8) | (admin->key16[0]));
  101160:	008004b4 	movhi	r2,18
  101164:	10a1ee04 	addi	r2,r2,-30792
  101168:	10800017 	ldw	r2,0(r2)
  10116c:	e0fffe17 	ldw	r3,-8(fp)
  101170:	18c00003 	ldbu	r3,0(r3)
  101174:	18c03fcc 	andi	r3,r3,255
  101178:	1808943a 	slli	r4,r3,16
  10117c:	e0fffe17 	ldw	r3,-8(fp)
  101180:	18c00083 	ldbu	r3,2(r3)
  101184:	18c03fcc 	andi	r3,r3,255
  101188:	1806923a 	slli	r3,r3,8
  10118c:	20c8b03a 	or	r4,r4,r3
  101190:	e0fffe17 	ldw	r3,-8(fp)
  101194:	18c00043 	ldbu	r3,1(r3)
  101198:	18c03fcc 	andi	r3,r3,255
  10119c:	20c6b03a 	or	r3,r4,r3
  1011a0:	10c00615 	stw	r3,24(r2)
		R printf("New key8key16: 0x%08x\n", (unsigned int)Encryptor->key8key16);
		R printf("Old key32: 0x%08x\n", (unsigned int)Encryptor->key32);
		Encryptor->key32 = (((admin->key32[3]) << 24) | ((admin->key32[2]) << 16) | ((admin->key32[1]) << 8) | ((admin->key32[0])));
  1011a4:	008004b4 	movhi	r2,18
  1011a8:	10a1ee04 	addi	r2,r2,-30792
  1011ac:	10800017 	ldw	r2,0(r2)
  1011b0:	e0fffe17 	ldw	r3,-8(fp)
  1011b4:	18c00183 	ldbu	r3,6(r3)
  1011b8:	18c03fcc 	andi	r3,r3,255
  1011bc:	1808963a 	slli	r4,r3,24
  1011c0:	e0fffe17 	ldw	r3,-8(fp)
  1011c4:	18c00143 	ldbu	r3,5(r3)
  1011c8:	18c03fcc 	andi	r3,r3,255
  1011cc:	1806943a 	slli	r3,r3,16
  1011d0:	20c8b03a 	or	r4,r4,r3
  1011d4:	e0fffe17 	ldw	r3,-8(fp)
  1011d8:	18c00103 	ldbu	r3,4(r3)
  1011dc:	18c03fcc 	andi	r3,r3,255
  1011e0:	1806923a 	slli	r3,r3,8
  1011e4:	20c8b03a 	or	r4,r4,r3
  1011e8:	e0fffe17 	ldw	r3,-8(fp)
  1011ec:	18c000c3 	ldbu	r3,3(r3)
  1011f0:	18c03fcc 	andi	r3,r3,255
  1011f4:	20c6b03a 	or	r3,r4,r3
  1011f8:	10c00715 	stw	r3,28(r2)
		R printf("New key32: 0x%08x\n", (unsigned int)Encryptor->key32);
		R printf("LCD: %x",&LCD);

		alt_up_character_lcd_set_cursor_pos(LCD, 0, 0);
  1011fc:	008004b4 	movhi	r2,18
  101200:	10a90804 	addi	r2,r2,-23520
  101204:	10800017 	ldw	r2,0(r2)
  101208:	1009883a 	mov	r4,r2
  10120c:	000b883a 	mov	r5,zero
  101210:	000d883a 	mov	r6,zero
  101214:	011523c0 	call	11523c <alt_up_character_lcd_set_cursor_pos>
		alt_up_character_lcd_string(LCD, "                ");
  101218:	008004b4 	movhi	r2,18
  10121c:	10a90804 	addi	r2,r2,-23520
  101220:	10800017 	ldw	r2,0(r2)
  101224:	1009883a 	mov	r4,r2
  101228:	01400474 	movhi	r5,17
  10122c:	2957f104 	addi	r5,r5,24516
  101230:	01151e80 	call	1151e8 <alt_up_character_lcd_string>
		alt_up_character_lcd_set_cursor_pos(LCD, 0, 0);
  101234:	008004b4 	movhi	r2,18
  101238:	10a90804 	addi	r2,r2,-23520
  10123c:	10800017 	ldw	r2,0(r2)
  101240:	1009883a 	mov	r4,r2
  101244:	000b883a 	mov	r5,zero
  101248:	000d883a 	mov	r6,zero
  10124c:	011523c0 	call	11523c <alt_up_character_lcd_set_cursor_pos>
		sprintf(string, "%d.%d.%d.%d", headNumber->nextTargetNumber->srcHost[0], headNumber->nextTargetNumber->srcHost[1], headNumber->nextTargetNumber->srcHost[2], headNumber->nextTargetNumber->srcHost[3]);
  101250:	e0bfff17 	ldw	r2,-4(fp)
  101254:	10800417 	ldw	r2,16(r2)
  101258:	10800103 	ldbu	r2,4(r2)
  10125c:	10c03fcc 	andi	r3,r2,255
  101260:	e0bfff17 	ldw	r2,-4(fp)
  101264:	10800417 	ldw	r2,16(r2)
  101268:	10800143 	ldbu	r2,5(r2)
  10126c:	10803fcc 	andi	r2,r2,255
  101270:	e13fff17 	ldw	r4,-4(fp)
  101274:	21000417 	ldw	r4,16(r4)
  101278:	21000183 	ldbu	r4,6(r4)
  10127c:	21403fcc 	andi	r5,r4,255
  101280:	e13fff17 	ldw	r4,-4(fp)
  101284:	21000417 	ldw	r4,16(r4)
  101288:	210001c3 	ldbu	r4,7(r4)
  10128c:	21003fcc 	andi	r4,r4,255
  101290:	d9400015 	stw	r5,0(sp)
  101294:	d9000115 	stw	r4,4(sp)
  101298:	e13fea04 	addi	r4,fp,-88
  10129c:	01400474 	movhi	r5,17
  1012a0:	2957f604 	addi	r5,r5,24536
  1012a4:	180d883a 	mov	r6,r3
  1012a8:	100f883a 	mov	r7,r2
  1012ac:	01049440 	call	104944 <sprintf>
		alt_up_character_lcd_string(LCD, string);
  1012b0:	008004b4 	movhi	r2,18
  1012b4:	10a90804 	addi	r2,r2,-23520
  1012b8:	10800017 	ldw	r2,0(r2)
  1012bc:	1009883a 	mov	r4,r2
  1012c0:	e17fea04 	addi	r5,fp,-88
  1012c4:	01151e80 	call	1151e8 <alt_up_character_lcd_string>
		alt_up_character_lcd_set_cursor_pos(LCD, 0, 1);
  1012c8:	008004b4 	movhi	r2,18
  1012cc:	10a90804 	addi	r2,r2,-23520
  1012d0:	10800017 	ldw	r2,0(r2)
  1012d4:	1009883a 	mov	r4,r2
  1012d8:	000b883a 	mov	r5,zero
  1012dc:	01800044 	movi	r6,1
  1012e0:	011523c0 	call	11523c <alt_up_character_lcd_set_cursor_pos>
		alt_up_character_lcd_string(LCD, "                ");
  1012e4:	008004b4 	movhi	r2,18
  1012e8:	10a90804 	addi	r2,r2,-23520
  1012ec:	10800017 	ldw	r2,0(r2)
  1012f0:	1009883a 	mov	r4,r2
  1012f4:	01400474 	movhi	r5,17
  1012f8:	2957f104 	addi	r5,r5,24516
  1012fc:	01151e80 	call	1151e8 <alt_up_character_lcd_string>
		alt_up_character_lcd_set_cursor_pos(LCD, 0, 1);
  101300:	008004b4 	movhi	r2,18
  101304:	10a90804 	addi	r2,r2,-23520
  101308:	10800017 	ldw	r2,0(r2)
  10130c:	1009883a 	mov	r4,r2
  101310:	000b883a 	mov	r5,zero
  101314:	01800044 	movi	r6,1
  101318:	011523c0 	call	11523c <alt_up_character_lcd_set_cursor_pos>
		sprintf(string, "%d.%d.%d.%d", headNumber->nextTargetNumber->dstHost[0], headNumber->nextTargetNumber->dstHost[1], headNumber->nextTargetNumber->dstHost[2], headNumber->nextTargetNumber->dstHost[3]);
  10131c:	e0bfff17 	ldw	r2,-4(fp)
  101320:	10800417 	ldw	r2,16(r2)
  101324:	10800203 	ldbu	r2,8(r2)
  101328:	10c03fcc 	andi	r3,r2,255
  10132c:	e0bfff17 	ldw	r2,-4(fp)
  101330:	10800417 	ldw	r2,16(r2)
  101334:	10800243 	ldbu	r2,9(r2)
  101338:	10803fcc 	andi	r2,r2,255
  10133c:	e13fff17 	ldw	r4,-4(fp)
  101340:	21000417 	ldw	r4,16(r4)
  101344:	21000283 	ldbu	r4,10(r4)
  101348:	21403fcc 	andi	r5,r4,255
  10134c:	e13fff17 	ldw	r4,-4(fp)
  101350:	21000417 	ldw	r4,16(r4)
  101354:	210002c3 	ldbu	r4,11(r4)
  101358:	21003fcc 	andi	r4,r4,255
  10135c:	d9400015 	stw	r5,0(sp)
  101360:	d9000115 	stw	r4,4(sp)
  101364:	e13fea04 	addi	r4,fp,-88
  101368:	01400474 	movhi	r5,17
  10136c:	2957f604 	addi	r5,r5,24536
  101370:	180d883a 	mov	r6,r3
  101374:	100f883a 	mov	r7,r2
  101378:	01049440 	call	104944 <sprintf>
		alt_up_character_lcd_string(LCD, string);
  10137c:	008004b4 	movhi	r2,18
  101380:	10a90804 	addi	r2,r2,-23520
  101384:	10800017 	ldw	r2,0(r2)
  101388:	1009883a 	mov	r4,r2
  10138c:	e17fea04 	addi	r5,fp,-88
  101390:	01151e80 	call	1151e8 <alt_up_character_lcd_string>

		return headNumber;
  101394:	e0bfff17 	ldw	r2,-4(fp)

	}
  101398:	e037883a 	mov	sp,fp
  10139c:	dfc00117 	ldw	ra,4(sp)
  1013a0:	df000017 	ldw	fp,0(sp)
  1013a4:	dec00204 	addi	sp,sp,8
  1013a8:	f800283a 	ret

001013ac <InitializeTargetList>:
Returns:		TARGET pointer to the first element in the linked list.
				Returns itself if list is empty.
-------------------------------------------------------------------------------
*/

TARGET* InitializeTargetList(TARGET* listHead) {
  1013ac:	defff204 	addi	sp,sp,-56
  1013b0:	dfc00d15 	stw	ra,52(sp)
  1013b4:	df000c15 	stw	fp,48(sp)
  1013b8:	df000c04 	addi	fp,sp,48
  1013bc:	e13fff15 	stw	r4,-4(fp)

	unsigned char ipsrc1[] = {IP_SRC_ADDRESS1};
  1013c0:	00bfeb04 	movi	r2,-84
  1013c4:	e0bff605 	stb	r2,-40(fp)
  1013c8:	00800404 	movi	r2,16
  1013cc:	e0bff645 	stb	r2,-39(fp)
  1013d0:	e03ff685 	stb	zero,-38(fp)
  1013d4:	00800144 	movi	r2,5
  1013d8:	e0bff6c5 	stb	r2,-37(fp)
	unsigned char ipdst1[] = {IP_DST_ADDRESS1};
  1013dc:	00800284 	movi	r2,10
  1013e0:	e0bff705 	stb	r2,-36(fp)
  1013e4:	e03ff745 	stb	zero,-35(fp)
  1013e8:	e03ff785 	stb	zero,-34(fp)
  1013ec:	00800144 	movi	r2,5
  1013f0:	e0bff7c5 	stb	r2,-33(fp)
	unsigned char srcport1[] = {SRC_PORT1};
  1013f4:	e03ff805 	stb	zero,-32(fp)
  1013f8:	e03ff845 	stb	zero,-31(fp)
	unsigned char dstport1[] = {DST_PORT1};
  1013fc:	e03ff885 	stb	zero,-30(fp)
  101400:	e03ff8c5 	stb	zero,-29(fp)

	unsigned char ipsrc2[] = {IP_SRC_ADDRESS2};
  101404:	00bfeb04 	movi	r2,-84
  101408:	e0bff905 	stb	r2,-28(fp)
  10140c:	00800404 	movi	r2,16
  101410:	e0bff945 	stb	r2,-27(fp)
  101414:	008008c4 	movi	r2,35
  101418:	e0bff985 	stb	r2,-26(fp)
  10141c:	008000c4 	movi	r2,3
  101420:	e0bff9c5 	stb	r2,-25(fp)
	unsigned char ipdst2[] = {IP_DST_ADDRESS2};
  101424:	00bfeb04 	movi	r2,-84
  101428:	e0bffa05 	stb	r2,-24(fp)
  10142c:	00800404 	movi	r2,16
  101430:	e0bffa45 	stb	r2,-23(fp)
  101434:	00800904 	movi	r2,36
  101438:	e0bffa85 	stb	r2,-22(fp)
  10143c:	00800104 	movi	r2,4
  101440:	e0bffac5 	stb	r2,-21(fp)
	unsigned char srcport2[] = {SRC_PORT2};
  101444:	e03ffb05 	stb	zero,-20(fp)
  101448:	008005c4 	movi	r2,23
  10144c:	e0bffb45 	stb	r2,-19(fp)
	unsigned char dstport2[] = {DST_PORT2};
  101450:	e03ffb85 	stb	zero,-18(fp)
  101454:	00801404 	movi	r2,80
  101458:	e0bffbc5 	stb	r2,-17(fp)

	unsigned char ipsrc3[] = {IP_SRC_ADDRESS3};
  10145c:	00bfeb04 	movi	r2,-84
  101460:	e0bffc05 	stb	r2,-16(fp)
  101464:	00800404 	movi	r2,16
  101468:	e0bffc45 	stb	r2,-15(fp)
  10146c:	00800944 	movi	r2,37
  101470:	e0bffc85 	stb	r2,-14(fp)
  101474:	00800144 	movi	r2,5
  101478:	e0bffcc5 	stb	r2,-13(fp)
	unsigned char ipdst3[] = {IP_DST_ADDRESS3};
  10147c:	00bfeb04 	movi	r2,-84
  101480:	e0bffd05 	stb	r2,-12(fp)
  101484:	00800404 	movi	r2,16
  101488:	e0bffd45 	stb	r2,-11(fp)
  10148c:	00800984 	movi	r2,38
  101490:	e0bffd85 	stb	r2,-10(fp)
  101494:	00800104 	movi	r2,4
  101498:	e0bffdc5 	stb	r2,-9(fp)
	unsigned char srcport3[] = {SRC_PORT3};
  10149c:	e03ffe05 	stb	zero,-8(fp)
  1014a0:	008005c4 	movi	r2,23
  1014a4:	e0bffe45 	stb	r2,-7(fp)
	unsigned char dstport3[] = {DST_PORT3};
  1014a8:	e03ffe85 	stb	zero,-6(fp)
  1014ac:	00801404 	movi	r2,80
  1014b0:	e0bffec5 	stb	r2,-5(fp)

	listHead = AddTarget(listHead,0,ipsrc1,ipdst1,srcport1,dstport1);
  1014b4:	e0bff704 	addi	r2,fp,-36
  1014b8:	e0fff804 	addi	r3,fp,-32
  1014bc:	d8c00015 	stw	r3,0(sp)
  1014c0:	e0fff884 	addi	r3,fp,-30
  1014c4:	d8c00115 	stw	r3,4(sp)
  1014c8:	e13fff17 	ldw	r4,-4(fp)
  1014cc:	000b883a 	mov	r5,zero
  1014d0:	e1bff604 	addi	r6,fp,-40
  1014d4:	100f883a 	mov	r7,r2
  1014d8:	01015580 	call	101558 <AddTarget>
  1014dc:	e0bfff15 	stw	r2,-4(fp)
	listHead = AddTarget(listHead,1,ipsrc2,ipdst2,srcport2,dstport2);
  1014e0:	e0fff904 	addi	r3,fp,-28
  1014e4:	e0bffa04 	addi	r2,fp,-24
  1014e8:	e13ffb04 	addi	r4,fp,-20
  1014ec:	d9000015 	stw	r4,0(sp)
  1014f0:	e13ffb84 	addi	r4,fp,-18
  1014f4:	d9000115 	stw	r4,4(sp)
  1014f8:	e13fff17 	ldw	r4,-4(fp)
  1014fc:	01400044 	movi	r5,1
  101500:	180d883a 	mov	r6,r3
  101504:	100f883a 	mov	r7,r2
  101508:	01015580 	call	101558 <AddTarget>
  10150c:	e0bfff15 	stw	r2,-4(fp)
	listHead = AddTarget(listHead,2,ipsrc3,ipdst3,srcport3,dstport3);
  101510:	e0fffc04 	addi	r3,fp,-16
  101514:	e0bffd04 	addi	r2,fp,-12
  101518:	e13ffe04 	addi	r4,fp,-8
  10151c:	d9000015 	stw	r4,0(sp)
  101520:	e13ffe84 	addi	r4,fp,-6
  101524:	d9000115 	stw	r4,4(sp)
  101528:	e13fff17 	ldw	r4,-4(fp)
  10152c:	01400084 	movi	r5,2
  101530:	180d883a 	mov	r6,r3
  101534:	100f883a 	mov	r7,r2
  101538:	01015580 	call	101558 <AddTarget>
  10153c:	e0bfff15 	stw	r2,-4(fp)

	return listHead;
  101540:	e0bfff17 	ldw	r2,-4(fp)
}
  101544:	e037883a 	mov	sp,fp
  101548:	dfc00117 	ldw	ra,4(sp)
  10154c:	df000017 	ldw	fp,0(sp)
  101550:	dec00204 	addi	sp,sp,8
  101554:	f800283a 	ret

00101558 <AddTarget>:
Returns:		1 = match found
				0 = no matches
-------------------------------------------------------------------------------
*/

TARGET* AddTarget (TARGET* listHead, int targetNumber, unsigned char* srcHost,unsigned char* dstHost,  unsigned char* srcPort, unsigned char* dstPort) {
  101558:	defff404 	addi	sp,sp,-48
  10155c:	dfc00b15 	stw	ra,44(sp)
  101560:	df000a15 	stw	fp,40(sp)
  101564:	df000a04 	addi	fp,sp,40
  101568:	e13ffc15 	stw	r4,-16(fp)
  10156c:	e17ffd15 	stw	r5,-12(fp)
  101570:	e1bffe15 	stw	r6,-8(fp)
  101574:	e1ffff15 	stw	r7,-4(fp)
  static int lastTargetNumber = 0;
  TARGET* pWalker = listHead;
  101578:	e0bffc17 	ldw	r2,-16(fp)
  10157c:	e0bff615 	stw	r2,-40(fp)
  TARGET* newTarget = NULL;
  101580:	e03ffb15 	stw	zero,-20(fp)
  int i,j,k,m = 0;
  101584:	e03ffa15 	stw	zero,-24(fp)

  if (pWalker != NULL)
  101588:	e0bff617 	ldw	r2,-40(fp)
  10158c:	10000726 	beq	r2,zero,1015ac <AddTarget+0x54>
	   while (pWalker->nextTargetNumber != NULL)
  101590:	00000306 	br	1015a0 <AddTarget+0x48>
			 pWalker=pWalker->nextTargetNumber;
  101594:	e0bff617 	ldw	r2,-40(fp)
  101598:	10800417 	ldw	r2,16(r2)
  10159c:	e0bff615 	stw	r2,-40(fp)
  TARGET* pWalker = listHead;
  TARGET* newTarget = NULL;
  int i,j,k,m = 0;

  if (pWalker != NULL)
	   while (pWalker->nextTargetNumber != NULL)
  1015a0:	e0bff617 	ldw	r2,-40(fp)
  1015a4:	10800417 	ldw	r2,16(r2)
  1015a8:	103ffa1e 	bne	r2,zero,101594 <black_to_red_frame+0xfe101594>
			 pWalker=pWalker->nextTargetNumber;

  newTarget = (TARGET*) malloc(sizeof(TARGET));
  1015ac:	01000504 	movi	r4,20
  1015b0:	0103f440 	call	103f44 <malloc>
  1015b4:	e0bffb15 	stw	r2,-20(fp)

  //Initialize new node
  newTarget->targetNumber = ++lastTargetNumber;
  1015b8:	d0a71817 	ldw	r2,-25504(gp)
  1015bc:	10800044 	addi	r2,r2,1
  1015c0:	d0a71815 	stw	r2,-25504(gp)
  1015c4:	d0e71817 	ldw	r3,-25504(gp)
  1015c8:	e0bffb17 	ldw	r2,-20(fp)
  1015cc:	10c00015 	stw	r3,0(r2)

  for(i=0;i<4;i++)
  1015d0:	e03ff715 	stw	zero,-36(fp)
  1015d4:	00000c06 	br	101608 <AddTarget+0xb0>
	   newTarget->srcHost[i] = srcHost[i];
  1015d8:	e0bff717 	ldw	r2,-36(fp)
  1015dc:	e0fffe17 	ldw	r3,-8(fp)
  1015e0:	1885883a 	add	r2,r3,r2
  1015e4:	10c00003 	ldbu	r3,0(r2)
  1015e8:	e13ffb17 	ldw	r4,-20(fp)
  1015ec:	e0bff717 	ldw	r2,-36(fp)
  1015f0:	2085883a 	add	r2,r4,r2
  1015f4:	10800104 	addi	r2,r2,4
  1015f8:	10c00005 	stb	r3,0(r2)
  newTarget = (TARGET*) malloc(sizeof(TARGET));

  //Initialize new node
  newTarget->targetNumber = ++lastTargetNumber;

  for(i=0;i<4;i++)
  1015fc:	e0bff717 	ldw	r2,-36(fp)
  101600:	10800044 	addi	r2,r2,1
  101604:	e0bff715 	stw	r2,-36(fp)
  101608:	e0bff717 	ldw	r2,-36(fp)
  10160c:	10800110 	cmplti	r2,r2,4
  101610:	103ff11e 	bne	r2,zero,1015d8 <black_to_red_frame+0xfe1015d8>
	   newTarget->srcHost[i] = srcHost[i];
  for(j=0;j<4;j++)
  101614:	e03ff815 	stw	zero,-32(fp)
  101618:	00000c06 	br	10164c <AddTarget+0xf4>
	   newTarget->dstHost[j] = dstHost[j];
  10161c:	e0bff817 	ldw	r2,-32(fp)
  101620:	e0ffff17 	ldw	r3,-4(fp)
  101624:	1885883a 	add	r2,r3,r2
  101628:	10c00003 	ldbu	r3,0(r2)
  10162c:	e13ffb17 	ldw	r4,-20(fp)
  101630:	e0bff817 	ldw	r2,-32(fp)
  101634:	2085883a 	add	r2,r4,r2
  101638:	10800204 	addi	r2,r2,8
  10163c:	10c00005 	stb	r3,0(r2)
  //Initialize new node
  newTarget->targetNumber = ++lastTargetNumber;

  for(i=0;i<4;i++)
	   newTarget->srcHost[i] = srcHost[i];
  for(j=0;j<4;j++)
  101640:	e0bff817 	ldw	r2,-32(fp)
  101644:	10800044 	addi	r2,r2,1
  101648:	e0bff815 	stw	r2,-32(fp)
  10164c:	e0bff817 	ldw	r2,-32(fp)
  101650:	10800110 	cmplti	r2,r2,4
  101654:	103ff11e 	bne	r2,zero,10161c <black_to_red_frame+0xfe10161c>
	   newTarget->dstHost[j] = dstHost[j];
  for(k=0;k<2;k++)
  101658:	e03ff915 	stw	zero,-28(fp)
  10165c:	00000c06 	br	101690 <AddTarget+0x138>
	   newTarget->srcPort[k] = srcPort[k];
  101660:	e0bff917 	ldw	r2,-28(fp)
  101664:	e0c00217 	ldw	r3,8(fp)
  101668:	1885883a 	add	r2,r3,r2
  10166c:	10c00003 	ldbu	r3,0(r2)
  101670:	e13ffb17 	ldw	r4,-20(fp)
  101674:	e0bff917 	ldw	r2,-28(fp)
  101678:	2085883a 	add	r2,r4,r2
  10167c:	10800304 	addi	r2,r2,12
  101680:	10c00005 	stb	r3,0(r2)

  for(i=0;i<4;i++)
	   newTarget->srcHost[i] = srcHost[i];
  for(j=0;j<4;j++)
	   newTarget->dstHost[j] = dstHost[j];
  for(k=0;k<2;k++)
  101684:	e0bff917 	ldw	r2,-28(fp)
  101688:	10800044 	addi	r2,r2,1
  10168c:	e0bff915 	stw	r2,-28(fp)
  101690:	e0bff917 	ldw	r2,-28(fp)
  101694:	10800090 	cmplti	r2,r2,2
  101698:	103ff11e 	bne	r2,zero,101660 <black_to_red_frame+0xfe101660>
	   newTarget->srcPort[k] = srcPort[k];
  for(m=0;m<2;m++)
  10169c:	e03ffa15 	stw	zero,-24(fp)
  1016a0:	00000c06 	br	1016d4 <AddTarget+0x17c>
	   newTarget->dstPort[m] = dstPort[m];
  1016a4:	e0bffa17 	ldw	r2,-24(fp)
  1016a8:	e0c00317 	ldw	r3,12(fp)
  1016ac:	1885883a 	add	r2,r3,r2
  1016b0:	10c00003 	ldbu	r3,0(r2)
  1016b4:	e13ffb17 	ldw	r4,-20(fp)
  1016b8:	e0bffa17 	ldw	r2,-24(fp)
  1016bc:	2085883a 	add	r2,r4,r2
  1016c0:	10800304 	addi	r2,r2,12
  1016c4:	10c00085 	stb	r3,2(r2)
	   newTarget->srcHost[i] = srcHost[i];
  for(j=0;j<4;j++)
	   newTarget->dstHost[j] = dstHost[j];
  for(k=0;k<2;k++)
	   newTarget->srcPort[k] = srcPort[k];
  for(m=0;m<2;m++)
  1016c8:	e0bffa17 	ldw	r2,-24(fp)
  1016cc:	10800044 	addi	r2,r2,1
  1016d0:	e0bffa15 	stw	r2,-24(fp)
  1016d4:	e0bffa17 	ldw	r2,-24(fp)
  1016d8:	10800090 	cmplti	r2,r2,2
  1016dc:	103ff11e 	bne	r2,zero,1016a4 <black_to_red_frame+0xfe1016a4>
	   newTarget->dstPort[m] = dstPort[m];

  newTarget->nextTargetNumber = NULL;
  1016e0:	e0bffb17 	ldw	r2,-20(fp)
  1016e4:	10000415 	stw	zero,16(r2)

  //Link new node in list and return head if the list is not empty
  if (pWalker != NULL)
  1016e8:	e0bff617 	ldw	r2,-40(fp)
  1016ec:	10000526 	beq	r2,zero,101704 <AddTarget+0x1ac>
  {
	  pWalker->nextTargetNumber = newTarget;
  1016f0:	e0bff617 	ldw	r2,-40(fp)
  1016f4:	e0fffb17 	ldw	r3,-20(fp)
  1016f8:	10c00415 	stw	r3,16(r2)
	  return listHead;
  1016fc:	e0bffc17 	ldw	r2,-16(fp)
  101700:	00000106 	br	101708 <AddTarget+0x1b0>
  }
  //Return only node if list is empty
  else
	  return newTarget;
  101704:	e0bffb17 	ldw	r2,-20(fp)
}
  101708:	e037883a 	mov	sp,fp
  10170c:	dfc00117 	ldw	ra,4(sp)
  101710:	df000017 	ldw	fp,0(sp)
  101714:	dec00204 	addi	sp,sp,8
  101718:	f800283a 	ret

0010171c <PrintTargetList>:

Returns:		Target pointer to the first element in the linked list.
-------------------------------------------------------------------------------
*/

TARGET* PrintTargetList (TARGET* listHead) {
  10171c:	defffb04 	addi	sp,sp,-20
  101720:	dfc00415 	stw	ra,16(sp)
  101724:	df000315 	stw	fp,12(sp)
  101728:	df000304 	addi	fp,sp,12
  10172c:	e13fff15 	stw	r4,-4(fp)

TARGET* pWalker=listHead;
  101730:	e0bfff17 	ldw	r2,-4(fp)
  101734:	e0bffd15 	stw	r2,-12(fp)
int i=0;
  101738:	e03ffe15 	stw	zero,-8(fp)

	while(pWalker != NULL) {
  10173c:	00006706 	br	1018dc <PrintTargetList+0x1c0>
		printf("Target Number: %d\n", pWalker->targetNumber);
  101740:	e0bffd17 	ldw	r2,-12(fp)
  101744:	10800017 	ldw	r2,0(r2)
  101748:	01000474 	movhi	r4,17
  10174c:	2117f904 	addi	r4,r4,24548
  101750:	100b883a 	mov	r5,r2
  101754:	010475c0 	call	10475c <printf>

		printf("Source Address: ");
  101758:	01000474 	movhi	r4,17
  10175c:	2117fe04 	addi	r4,r4,24568
  101760:	010475c0 	call	10475c <printf>
		for(i=0;i<4;i++)
  101764:	e03ffe15 	stw	zero,-8(fp)
  101768:	00000d06 	br	1017a0 <PrintTargetList+0x84>
			printf("0x%x",pWalker->srcHost[i]);
  10176c:	e0fffd17 	ldw	r3,-12(fp)
  101770:	e0bffe17 	ldw	r2,-8(fp)
  101774:	1885883a 	add	r2,r3,r2
  101778:	10800104 	addi	r2,r2,4
  10177c:	10800003 	ldbu	r2,0(r2)
  101780:	10803fcc 	andi	r2,r2,255
  101784:	01000474 	movhi	r4,17
  101788:	21180304 	addi	r4,r4,24588
  10178c:	100b883a 	mov	r5,r2
  101790:	010475c0 	call	10475c <printf>

	while(pWalker != NULL) {
		printf("Target Number: %d\n", pWalker->targetNumber);

		printf("Source Address: ");
		for(i=0;i<4;i++)
  101794:	e0bffe17 	ldw	r2,-8(fp)
  101798:	10800044 	addi	r2,r2,1
  10179c:	e0bffe15 	stw	r2,-8(fp)
  1017a0:	e0bffe17 	ldw	r2,-8(fp)
  1017a4:	10800110 	cmplti	r2,r2,4
  1017a8:	103ff01e 	bne	r2,zero,10176c <black_to_red_frame+0xfe10176c>
			printf("0x%x",pWalker->srcHost[i]);
		printf("\n");
  1017ac:	01000284 	movi	r4,10
  1017b0:	01047a00 	call	1047a0 <putchar>

		printf("Destination Address: ");
  1017b4:	01000474 	movhi	r4,17
  1017b8:	21180504 	addi	r4,r4,24596
  1017bc:	010475c0 	call	10475c <printf>
		for(i=0;i<4;i++)
  1017c0:	e03ffe15 	stw	zero,-8(fp)
  1017c4:	00000d06 	br	1017fc <PrintTargetList+0xe0>
			printf("0x%x", pWalker->dstHost[i]);
  1017c8:	e0fffd17 	ldw	r3,-12(fp)
  1017cc:	e0bffe17 	ldw	r2,-8(fp)
  1017d0:	1885883a 	add	r2,r3,r2
  1017d4:	10800204 	addi	r2,r2,8
  1017d8:	10800003 	ldbu	r2,0(r2)
  1017dc:	10803fcc 	andi	r2,r2,255
  1017e0:	01000474 	movhi	r4,17
  1017e4:	21180304 	addi	r4,r4,24588
  1017e8:	100b883a 	mov	r5,r2
  1017ec:	010475c0 	call	10475c <printf>
		for(i=0;i<4;i++)
			printf("0x%x",pWalker->srcHost[i]);
		printf("\n");

		printf("Destination Address: ");
		for(i=0;i<4;i++)
  1017f0:	e0bffe17 	ldw	r2,-8(fp)
  1017f4:	10800044 	addi	r2,r2,1
  1017f8:	e0bffe15 	stw	r2,-8(fp)
  1017fc:	e0bffe17 	ldw	r2,-8(fp)
  101800:	10800110 	cmplti	r2,r2,4
  101804:	103ff01e 	bne	r2,zero,1017c8 <black_to_red_frame+0xfe1017c8>
			printf("0x%x", pWalker->dstHost[i]);
		printf("\n");
  101808:	01000284 	movi	r4,10
  10180c:	01047a00 	call	1047a0 <putchar>

		printf("Source Port: ");
  101810:	01000474 	movhi	r4,17
  101814:	21180b04 	addi	r4,r4,24620
  101818:	010475c0 	call	10475c <printf>
		for(i=0;i<2;i++)
  10181c:	e03ffe15 	stw	zero,-8(fp)
  101820:	00000d06 	br	101858 <PrintTargetList+0x13c>
			printf("0x%x", pWalker->srcPort[i]);
  101824:	e0fffd17 	ldw	r3,-12(fp)
  101828:	e0bffe17 	ldw	r2,-8(fp)
  10182c:	1885883a 	add	r2,r3,r2
  101830:	10800304 	addi	r2,r2,12
  101834:	10800003 	ldbu	r2,0(r2)
  101838:	10803fcc 	andi	r2,r2,255
  10183c:	01000474 	movhi	r4,17
  101840:	21180304 	addi	r4,r4,24588
  101844:	100b883a 	mov	r5,r2
  101848:	010475c0 	call	10475c <printf>
		for(i=0;i<4;i++)
			printf("0x%x", pWalker->dstHost[i]);
		printf("\n");

		printf("Source Port: ");
		for(i=0;i<2;i++)
  10184c:	e0bffe17 	ldw	r2,-8(fp)
  101850:	10800044 	addi	r2,r2,1
  101854:	e0bffe15 	stw	r2,-8(fp)
  101858:	e0bffe17 	ldw	r2,-8(fp)
  10185c:	10800090 	cmplti	r2,r2,2
  101860:	103ff01e 	bne	r2,zero,101824 <black_to_red_frame+0xfe101824>
			printf("0x%x", pWalker->srcPort[i]);
		printf("\n");
  101864:	01000284 	movi	r4,10
  101868:	01047a00 	call	1047a0 <putchar>

		printf("Destination Port: ");
  10186c:	01000474 	movhi	r4,17
  101870:	21180f04 	addi	r4,r4,24636
  101874:	010475c0 	call	10475c <printf>
		for(i=0;i<2;i++)
  101878:	e03ffe15 	stw	zero,-8(fp)
  10187c:	00000d06 	br	1018b4 <PrintTargetList+0x198>
			printf("0x%x", pWalker->dstPort[i]);
  101880:	e0fffd17 	ldw	r3,-12(fp)
  101884:	e0bffe17 	ldw	r2,-8(fp)
  101888:	1885883a 	add	r2,r3,r2
  10188c:	10800304 	addi	r2,r2,12
  101890:	10800083 	ldbu	r2,2(r2)
  101894:	10803fcc 	andi	r2,r2,255
  101898:	01000474 	movhi	r4,17
  10189c:	21180304 	addi	r4,r4,24588
  1018a0:	100b883a 	mov	r5,r2
  1018a4:	010475c0 	call	10475c <printf>
		for(i=0;i<2;i++)
			printf("0x%x", pWalker->srcPort[i]);
		printf("\n");

		printf("Destination Port: ");
		for(i=0;i<2;i++)
  1018a8:	e0bffe17 	ldw	r2,-8(fp)
  1018ac:	10800044 	addi	r2,r2,1
  1018b0:	e0bffe15 	stw	r2,-8(fp)
  1018b4:	e0bffe17 	ldw	r2,-8(fp)
  1018b8:	10800090 	cmplti	r2,r2,2
  1018bc:	103ff01e 	bne	r2,zero,101880 <black_to_red_frame+0xfe101880>
			printf("0x%x", pWalker->dstPort[i]);
		printf("\n");
  1018c0:	01000284 	movi	r4,10
  1018c4:	01047a00 	call	1047a0 <putchar>

		pWalker=pWalker->nextTargetNumber;
  1018c8:	e0bffd17 	ldw	r2,-12(fp)
  1018cc:	10800417 	ldw	r2,16(r2)
  1018d0:	e0bffd15 	stw	r2,-12(fp)

		printf("\n");
  1018d4:	01000284 	movi	r4,10
  1018d8:	01047a00 	call	1047a0 <putchar>
TARGET* PrintTargetList (TARGET* listHead) {

TARGET* pWalker=listHead;
int i=0;

	while(pWalker != NULL) {
  1018dc:	e0bffd17 	ldw	r2,-12(fp)
  1018e0:	103f971e 	bne	r2,zero,101740 <black_to_red_frame+0xfe101740>
		pWalker=pWalker->nextTargetNumber;

		printf("\n");
	}

return listHead;
  1018e4:	e0bfff17 	ldw	r2,-4(fp)
}
  1018e8:	e037883a 	mov	sp,fp
  1018ec:	dfc00117 	ldw	ra,4(sp)
  1018f0:	df000017 	ldw	fp,0(sp)
  1018f4:	dec00204 	addi	sp,sp,8
  1018f8:	f800283a 	ret

001018fc <initialize_fifo>:
// details.                                                     //
//                                                              //
----------------------------------------------------------------*/
#include "circular_fifo.h"

void initialize_fifo(struct FIFO* myFIFO, uint mySize){
  1018fc:	defffd04 	addi	sp,sp,-12
  101900:	df000215 	stw	fp,8(sp)
  101904:	df000204 	addi	fp,sp,8
  101908:	e13ffe15 	stw	r4,-8(fp)
  10190c:	e17fff15 	stw	r5,-4(fp)
	myFIFO->size = mySize;
  101910:	e0bffe17 	ldw	r2,-8(fp)
  101914:	e0ffff17 	ldw	r3,-4(fp)
  101918:	10c00015 	stw	r3,0(r2)
	myFIFO->ReadPos = 0;
  10191c:	e0bffe17 	ldw	r2,-8(fp)
  101920:	10000215 	stw	zero,8(r2)
	myFIFO->WritePos = 0;
  101924:	e0bffe17 	ldw	r2,-8(fp)
  101928:	10000315 	stw	zero,12(r2)
	myFIFO->available = mySize -1;
  10192c:	e0bfff17 	ldw	r2,-4(fp)
  101930:	10ffffc4 	addi	r3,r2,-1
  101934:	e0bffe17 	ldw	r2,-8(fp)
  101938:	10c00115 	stw	r3,4(r2)
}
  10193c:	e037883a 	mov	sp,fp
  101940:	df000017 	ldw	fp,0(sp)
  101944:	dec00104 	addi	sp,sp,4
  101948:	f800283a 	ret

0010194c <available>:

unsigned char available(struct FIFO myFIFO){
  10194c:	defffb04 	addi	sp,sp,-20
  101950:	df000415 	stw	fp,16(sp)
  101954:	df000404 	addi	fp,sp,16
  101958:	e13ffc15 	stw	r4,-16(fp)
  10195c:	e17ffd15 	stw	r5,-12(fp)
  101960:	e1bffe15 	stw	r6,-8(fp)
  101964:	e1ffff15 	stw	r7,-4(fp)
	//If ReadPos == WritePos, the queue is empty.
	if (myFIFO.ReadPos == myFIFO.WritePos){
  101968:	e0fffe17 	ldw	r3,-8(fp)
  10196c:	e0bfff17 	ldw	r2,-4(fp)
  101970:	1880031e 	bne	r3,r2,101980 <available+0x34>
		return myFIFO.size - 1;
  101974:	e0bffc17 	ldw	r2,-16(fp)
  101978:	10bfffc4 	addi	r2,r2,-1
  10197c:	00001706 	br	1019dc <available+0x90>
	} else if (myFIFO.WritePos > myFIFO.ReadPos) {
  101980:	e0bfff17 	ldw	r2,-4(fp)
  101984:	e0fffe17 	ldw	r3,-8(fp)
  101988:	1880092e 	bgeu	r3,r2,1019b0 <available+0x64>
		return myFIFO.size - (1 + myFIFO.WritePos - myFIFO.ReadPos);
  10198c:	e0bffc17 	ldw	r2,-16(fp)
  101990:	1007883a 	mov	r3,r2
  101994:	e0bffe17 	ldw	r2,-8(fp)
  101998:	1009883a 	mov	r4,r2
  10199c:	e0bfff17 	ldw	r2,-4(fp)
  1019a0:	2085c83a 	sub	r2,r4,r2
  1019a4:	1885883a 	add	r2,r3,r2
  1019a8:	10bfffc4 	addi	r2,r2,-1
  1019ac:	00000b06 	br	1019dc <available+0x90>
	} else {
		return myFIFO.size - (1 + myFIFO.WritePos + myFIFO.size - myFIFO.ReadPos);
  1019b0:	e0bffc17 	ldw	r2,-16(fp)
  1019b4:	1007883a 	mov	r3,r2
  1019b8:	e0bffe17 	ldw	r2,-8(fp)
  1019bc:	1009883a 	mov	r4,r2
  1019c0:	e0bfff17 	ldw	r2,-4(fp)
  1019c4:	100b883a 	mov	r5,r2
  1019c8:	e0bffc17 	ldw	r2,-16(fp)
  1019cc:	2885883a 	add	r2,r5,r2
  1019d0:	2085c83a 	sub	r2,r4,r2
  1019d4:	1885883a 	add	r2,r3,r2
  1019d8:	10bfffc4 	addi	r2,r2,-1
	}
	//Otherwise, the queue currently has WritePos - ReadPos elements in it if WritePos > ReadPos,
	//and WritePos + SIZE - ReadPos elements if WritePos < ReadPos.
}
  1019dc:	e037883a 	mov	sp,fp
  1019e0:	df000017 	ldw	fp,0(sp)
  1019e4:	dec00104 	addi	sp,sp,4
  1019e8:	f800283a 	ret

001019ec <add_to_fifo>:

void add_to_fifo(struct FIFO* myFIFO){
  1019ec:	defffd04 	addi	sp,sp,-12
  1019f0:	dfc00215 	stw	ra,8(sp)
  1019f4:	df000115 	stw	fp,4(sp)
  1019f8:	df000104 	addi	fp,sp,4
  1019fc:	e13fff15 	stw	r4,-4(fp)
	myFIFO->WritePos = (myFIFO->WritePos + 1) % myFIFO->size;
  101a00:	e0bfff17 	ldw	r2,-4(fp)
  101a04:	10800317 	ldw	r2,12(r2)
  101a08:	10c00044 	addi	r3,r2,1
  101a0c:	e0bfff17 	ldw	r2,-4(fp)
  101a10:	10800017 	ldw	r2,0(r2)
  101a14:	1809883a 	mov	r4,r3
  101a18:	100b883a 	mov	r5,r2
  101a1c:	0103f140 	call	103f14 <__umodsi3>
  101a20:	1007883a 	mov	r3,r2
  101a24:	e0bfff17 	ldw	r2,-4(fp)
  101a28:	10c00315 	stw	r3,12(r2)
	myFIFO->available -= 1;
  101a2c:	e0bfff17 	ldw	r2,-4(fp)
  101a30:	10800117 	ldw	r2,4(r2)
  101a34:	10ffffc4 	addi	r3,r2,-1
  101a38:	e0bfff17 	ldw	r2,-4(fp)
  101a3c:	10c00115 	stw	r3,4(r2)
}
  101a40:	e037883a 	mov	sp,fp
  101a44:	dfc00117 	ldw	ra,4(sp)
  101a48:	df000017 	ldw	fp,0(sp)
  101a4c:	dec00204 	addi	sp,sp,8
  101a50:	f800283a 	ret

00101a54 <remove_from_fifo>:

void remove_from_fifo(struct FIFO* myFIFO){
  101a54:	defffd04 	addi	sp,sp,-12
  101a58:	dfc00215 	stw	ra,8(sp)
  101a5c:	df000115 	stw	fp,4(sp)
  101a60:	df000104 	addi	fp,sp,4
  101a64:	e13fff15 	stw	r4,-4(fp)
	myFIFO->ReadPos = (myFIFO->ReadPos + 1) % myFIFO->size;
  101a68:	e0bfff17 	ldw	r2,-4(fp)
  101a6c:	10800217 	ldw	r2,8(r2)
  101a70:	10c00044 	addi	r3,r2,1
  101a74:	e0bfff17 	ldw	r2,-4(fp)
  101a78:	10800017 	ldw	r2,0(r2)
  101a7c:	1809883a 	mov	r4,r3
  101a80:	100b883a 	mov	r5,r2
  101a84:	0103f140 	call	103f14 <__umodsi3>
  101a88:	1007883a 	mov	r3,r2
  101a8c:	e0bfff17 	ldw	r2,-4(fp)
  101a90:	10c00215 	stw	r3,8(r2)
	myFIFO->available += 1;
  101a94:	e0bfff17 	ldw	r2,-4(fp)
  101a98:	10800117 	ldw	r2,4(r2)
  101a9c:	10c00044 	addi	r3,r2,1
  101aa0:	e0bfff17 	ldw	r2,-4(fp)
  101aa4:	10c00115 	stw	r3,4(r2)
}
  101aa8:	e037883a 	mov	sp,fp
  101aac:	dfc00117 	ldw	ra,4(sp)
  101ab0:	df000017 	ldw	fp,0(sp)
  101ab4:	dec00204 	addi	sp,sp,8
  101ab8:	f800283a 	ret

00101abc <hexInit>:
// details.                                                     //
//                                                              //
----------------------------------------------------------------*/
#include "hex.h"

unsigned int hexInit(HEX_t* hex){
  101abc:	defffc04 	addi	sp,sp,-16
  101ac0:	dfc00315 	stw	ra,12(sp)
  101ac4:	df000215 	stw	fp,8(sp)
  101ac8:	df000204 	addi	fp,sp,8
  101acc:	e13fff15 	stw	r4,-4(fp)
	unsigned short temp;
	hex->redFrames = 0x1234;
  101ad0:	e0bfff17 	ldw	r2,-4(fp)
  101ad4:	00c48d04 	movi	r3,4660
  101ad8:	10c0008d 	sth	r3,2(r2)
	temp = hex->redFrames;
  101adc:	e0bfff17 	ldw	r2,-4(fp)
  101ae0:	1080008b 	ldhu	r2,2(r2)
  101ae4:	e0bffe0d 	sth	r2,-8(fp)
	if (temp == 0x1234){
  101ae8:	e0bffe0b 	ldhu	r2,-8(fp)
  101aec:	10848d18 	cmpnei	r2,r2,4660
  101af0:	1000051e 	bne	r2,zero,101b08 <hexInit+0x4c>
		printf("[hex.c]\tInitialize HEX (SUCCESS)\n");
  101af4:	01000474 	movhi	r4,17
  101af8:	21181404 	addi	r4,r4,24656
  101afc:	01048740 	call	104874 <puts>
		return 0;
  101b00:	0005883a 	mov	r2,zero
  101b04:	00000406 	br	101b18 <hexInit+0x5c>
	} else {
		printf("[hex.c]\tInitialize HEX (FAILURE)\n");
  101b08:	01000474 	movhi	r4,17
  101b0c:	21181d04 	addi	r4,r4,24692
  101b10:	01048740 	call	104874 <puts>
		return 1;
  101b14:	00800044 	movi	r2,1
	}
}
  101b18:	e037883a 	mov	sp,fp
  101b1c:	dfc00117 	ldw	ra,4(sp)
  101b20:	df000017 	ldw	fp,0(sp)
  101b24:	dec00204 	addi	sp,sp,8
  101b28:	f800283a 	ret

00101b2c <lcdInit>:
#include <stdio.h>
#include "system.h"
#include <altera_up_avalon_character_lcd.h>
#include "Target_Constants.h"

unsigned int lcdInit(alt_up_character_lcd_dev* lcd){
  101b2c:	deffe604 	addi	sp,sp,-104
  101b30:	dfc01915 	stw	ra,100(sp)
  101b34:	df001815 	stw	fp,96(sp)
  101b38:	df001804 	addi	fp,sp,96
  101b3c:	e13fff15 	stw	r4,-4(fp)
	char* string[20];
	lcd = alt_up_character_lcd_open_dev("/dev/lcd");
  101b40:	01000474 	movhi	r4,17
  101b44:	21182604 	addi	r4,r4,24728
  101b48:	01151bc0 	call	1151bc <alt_up_character_lcd_open_dev>
  101b4c:	e0bfea15 	stw	r2,-88(fp)
	if (lcd == NULL){
  101b50:	e0bfea17 	ldw	r2,-88(fp)
  101b54:	1000051e 	bne	r2,zero,101b6c <lcdInit+0x40>
		printf("[lcd.c]\tInitialize interface (FAILURE)\n");
  101b58:	01000474 	movhi	r4,17
  101b5c:	21182904 	addi	r4,r4,24740
  101b60:	01048740 	call	104874 <puts>
		return 1;
  101b64:	00800044 	movi	r2,1
  101b68:	00002806 	br	101c0c <lcdInit+0xe0>
	}
	alt_up_character_lcd_init (lcd);
  101b6c:	e13fea17 	ldw	r4,-88(fp)
  101b70:	01151ac0 	call	1151ac <alt_up_character_lcd_init>
	alt_up_character_lcd_cursor_off(lcd);
  101b74:	e13fea17 	ldw	r4,-88(fp)
  101b78:	011535c0 	call	11535c <alt_up_character_lcd_cursor_off>
	sprintf(string, "%d.%d.%d.%d", IP_SRC_ADDRESS1);
  101b7c:	e0bfeb04 	addi	r2,fp,-84
  101b80:	d8000015 	stw	zero,0(sp)
  101b84:	00c00144 	movi	r3,5
  101b88:	d8c00115 	stw	r3,4(sp)
  101b8c:	1009883a 	mov	r4,r2
  101b90:	01400474 	movhi	r5,17
  101b94:	29583304 	addi	r5,r5,24780
  101b98:	01802b04 	movi	r6,172
  101b9c:	01c00404 	movi	r7,16
  101ba0:	01049440 	call	104944 <sprintf>
	alt_up_character_lcd_string(lcd, string);
  101ba4:	e0bfeb04 	addi	r2,fp,-84
  101ba8:	e13fea17 	ldw	r4,-88(fp)
  101bac:	100b883a 	mov	r5,r2
  101bb0:	01151e80 	call	1151e8 <alt_up_character_lcd_string>
	alt_up_character_lcd_set_cursor_pos(lcd, 0, 1);
  101bb4:	e13fea17 	ldw	r4,-88(fp)
  101bb8:	000b883a 	mov	r5,zero
  101bbc:	01800044 	movi	r6,1
  101bc0:	011523c0 	call	11523c <alt_up_character_lcd_set_cursor_pos>
	sprintf(string, "%d.%d.%d.%d", IP_DST_ADDRESS1);
  101bc4:	e0bfeb04 	addi	r2,fp,-84
  101bc8:	d8000015 	stw	zero,0(sp)
  101bcc:	00c00144 	movi	r3,5
  101bd0:	d8c00115 	stw	r3,4(sp)
  101bd4:	1009883a 	mov	r4,r2
  101bd8:	01400474 	movhi	r5,17
  101bdc:	29583304 	addi	r5,r5,24780
  101be0:	01800284 	movi	r6,10
  101be4:	000f883a 	mov	r7,zero
  101be8:	01049440 	call	104944 <sprintf>
	alt_up_character_lcd_string(lcd, string);
  101bec:	e0bfeb04 	addi	r2,fp,-84
  101bf0:	e13fea17 	ldw	r4,-88(fp)
  101bf4:	100b883a 	mov	r5,r2
  101bf8:	01151e80 	call	1151e8 <alt_up_character_lcd_string>
	printf("[lcd.c]\tInitialize interface (SUCCESS)\n");
  101bfc:	01000474 	movhi	r4,17
  101c00:	21183604 	addi	r4,r4,24792
  101c04:	01048740 	call	104874 <puts>
	return 0;
  101c08:	0005883a 	mov	r2,zero


}
  101c0c:	e037883a 	mov	sp,fp
  101c10:	dfc00117 	ldw	ra,4(sp)
  101c14:	df000017 	ldw	fp,0(sp)
  101c18:	dec00204 	addi	sp,sp,8
  101c1c:	f800283a 	ret

00101c20 <ledInit>:
 // details.                                                     //
 //                                                              //
 ----------------------------------------------------------------*/
#include "led.h"

unsigned char ledInit(volatile LED_t* targetLED) {
  101c20:	defffd04 	addi	sp,sp,-12
  101c24:	dfc00215 	stw	ra,8(sp)
  101c28:	df000115 	stw	fp,4(sp)
  101c2c:	df000104 	addi	fp,sp,4
  101c30:	e13fff15 	stw	r4,-4(fp)

  targetLED->DATA = 0x1;
  101c34:	e0bfff17 	ldw	r2,-4(fp)
  101c38:	00c00044 	movi	r3,1
  101c3c:	10c00015 	stw	r3,0(r2)
  if (targetLED->DATA == 0x1) {
  101c40:	e0bfff17 	ldw	r2,-4(fp)
  101c44:	10800017 	ldw	r2,0(r2)
  101c48:	10800058 	cmpnei	r2,r2,1
  101c4c:	1000051e 	bne	r2,zero,101c64 <ledInit+0x44>
    printf("[led.c]\tInitialize leds (SUCCESS)\n");
  101c50:	01000474 	movhi	r4,17
  101c54:	21184004 	addi	r4,r4,24832
  101c58:	01048740 	call	104874 <puts>
    return 0;
  101c5c:	0005883a 	mov	r2,zero
  101c60:	00000406 	br	101c74 <ledInit+0x54>
  } else {
    printf("[led.c]\tInitialize leds (FAILURE)\n");
  101c64:	01000474 	movhi	r4,17
  101c68:	21184904 	addi	r4,r4,24868
  101c6c:	01048740 	call	104874 <puts>
    return 1;
  101c70:	00800044 	movi	r2,1
  }
}
  101c74:	e037883a 	mov	sp,fp
  101c78:	dfc00117 	ldw	ra,4(sp)
  101c7c:	df000017 	ldw	fp,0(sp)
  101c80:	dec00204 	addi	sp,sp,8
  101c84:	f800283a 	ret

00101c88 <macInit>:
----------------------------------------------------------------*/
#include "phy.h"
#include "sw.h"
#include "mac.h"

unsigned char macInit(volatile MAC_t* targetMAC, unsigned char SW_Status){
  101c88:	defffb04 	addi	sp,sp,-20
  101c8c:	dfc00415 	stw	ra,16(sp)
  101c90:	df000315 	stw	fp,12(sp)
  101c94:	df000304 	addi	fp,sp,12
  101c98:	e13ffe15 	stw	r4,-8(fp)
  101c9c:	2805883a 	mov	r2,r5
  101ca0:	e0bfff05 	stb	r2,-4(fp)
	  unsigned short control = 0;
  101ca4:	e03ffd0d 	sth	zero,-12(fp)
	  switch (SW_Status & SPD_MSK) {
  101ca8:	e0bfff03 	ldbu	r2,-4(fp)
  101cac:	108000cc 	andi	r2,r2,3
  101cb0:	10c00060 	cmpeqi	r3,r2,1
  101cb4:	1800321e 	bne	r3,zero,101d80 <macInit+0xf8>
  101cb8:	10c000a0 	cmpeqi	r3,r2,2
  101cbc:	1800621e 	bne	r3,zero,101e48 <macInit+0x1c0>
  101cc0:	1000921e 	bne	r2,zero,101f0c <macInit+0x284>
	    case 0: //Speed 10 Selected
	      printf("[mac.c]\tSpeed 10 selected\n");
  101cc4:	01000474 	movhi	r4,17
  101cc8:	21185204 	addi	r4,r4,24904
  101ccc:	01048740 	call	104874 <puts>
	      //Register 4
	        //Advertisement control register
	          control = targetMAC->mdio_PHY_ACR;
  101cd0:	e0bffe17 	ldw	r2,-8(fp)
  101cd4:	10808417 	ldw	r2,528(r2)
  101cd8:	e0bffd0d 	sth	r2,-12(fp)
	        //Don't advertise anything
	          control &= ~(ADVERTISE_10HALF | ADVERTISE_10FULL | ADVERTISE_100HALF | ADVERTISE_100FULL);
  101cdc:	e0fffd0b 	ldhu	r3,-12(fp)
  101ce0:	00bf87c4 	movi	r2,-481
  101ce4:	1884703a 	and	r2,r3,r2
  101ce8:	e0bffd0d 	sth	r2,-12(fp)
	        //Advertise 10mbps
	          control |= (ADVERTISE_10HALF | ADVERTISE_10FULL);
  101cec:	e0bffd0b 	ldhu	r2,-12(fp)
  101cf0:	10801814 	ori	r2,r2,96
  101cf4:	e0bffd0d 	sth	r2,-12(fp)
	        //Write changes
	          targetMAC->mdio_PHY_ACR = control;
  101cf8:	e0fffd0b 	ldhu	r3,-12(fp)
  101cfc:	e0bffe17 	ldw	r2,-8(fp)
  101d00:	10c08415 	stw	r3,528(r2)

	      //Register 9
	        //1000BT control register
	          control = targetMAC->mdio_PHY_CTRL1000;
  101d04:	e0bffe17 	ldw	r2,-8(fp)
  101d08:	10808917 	ldw	r2,548(r2)
  101d0c:	e0bffd0d 	sth	r2,-12(fp)
	        //Don't advertise anything
	          control &= ~(MII_1000BASETCONTROL_FULLDUPLEXCAP | MII_1000BASETCONTROL_HALFDUPLEXCAP);
  101d10:	e0fffd0b 	ldhu	r3,-12(fp)
  101d14:	00bf3fc4 	movi	r2,-769
  101d18:	1884703a 	and	r2,r3,r2
  101d1c:	e0bffd0d 	sth	r2,-12(fp)
	        //Advertise 10mbps

	        //Write changes
	          targetMAC->mdio_PHY_CTRL1000 = control;
  101d20:	e0fffd0b 	ldhu	r3,-12(fp)
  101d24:	e0bffe17 	ldw	r2,-8(fp)
  101d28:	10c08915 	stw	r3,548(r2)

	      //Register 0
	        //base control register
	          control = targetMAC->mdio_PHY_CR;
  101d2c:	e0bffe17 	ldw	r2,-8(fp)
  101d30:	10808017 	ldw	r2,512(r2)
  101d34:	e0bffd0d 	sth	r2,-12(fp)
	        //Don't advertise anything
	          control &= !(CR_SPEED1000 | CR_SPEED100);
  101d38:	e03ffd0d 	sth	zero,-12(fp)
	        //Advertise 10mbps
	          //10mbps = "00"
	        //Write changes
	          targetMAC->mdio_PHY_CR = control;
  101d3c:	e0fffd0b 	ldhu	r3,-12(fp)
  101d40:	e0bffe17 	ldw	r2,-8(fp)
  101d44:	10c08015 	stw	r3,512(r2)

	          control = targetMAC->command_config;
  101d48:	e0bffe17 	ldw	r2,-8(fp)
  101d4c:	10800217 	ldw	r2,8(r2)
  101d50:	e0bffd0d 	sth	r2,-12(fp)
	          control &= ~(CC_ETH_SPEED);
  101d54:	e0fffd0b 	ldhu	r3,-12(fp)
  101d58:	00bffdc4 	movi	r2,-9
  101d5c:	1884703a 	and	r2,r3,r2
  101d60:	e0bffd0d 	sth	r2,-12(fp)
	          control |= (CC_ENA_10);
	          targetMAC->command_config = control;
  101d64:	e0fffd0b 	ldhu	r3,-12(fp)
  101d68:	e0bffe17 	ldw	r2,-8(fp)
  101d6c:	10c00215 	stw	r3,8(r2)
	          printf("HERE");
  101d70:	01000474 	movhi	r4,17
  101d74:	21185904 	addi	r4,r4,24932
  101d78:	010475c0 	call	10475c <printf>



	      break;
  101d7c:	00006b06 	br	101f2c <macInit+0x2a4>
	    case 1: //Speed 100 Selected
	      printf("[mac.c]\tSpeed 100 selected\n");
  101d80:	01000474 	movhi	r4,17
  101d84:	21185b04 	addi	r4,r4,24940
  101d88:	01048740 	call	104874 <puts>
	      //Register 4
	        //Advertisement control register
	          control = targetMAC->mdio_PHY_ACR;
  101d8c:	e0bffe17 	ldw	r2,-8(fp)
  101d90:	10808417 	ldw	r2,528(r2)
  101d94:	e0bffd0d 	sth	r2,-12(fp)
	        //Don't advertise anything
	          control &= ~(ADVERTISE_10HALF | ADVERTISE_10FULL | ADVERTISE_100HALF | ADVERTISE_100FULL);
  101d98:	e0fffd0b 	ldhu	r3,-12(fp)
  101d9c:	00bf87c4 	movi	r2,-481
  101da0:	1884703a 	and	r2,r3,r2
  101da4:	e0bffd0d 	sth	r2,-12(fp)
	        //Advertise 100mbps
	          control |= (ADVERTISE_100HALF | ADVERTISE_100FULL);
  101da8:	e0bffd0b 	ldhu	r2,-12(fp)
  101dac:	10806014 	ori	r2,r2,384
  101db0:	e0bffd0d 	sth	r2,-12(fp)
	        //Write changes
	          targetMAC->mdio_PHY_ACR = control;
  101db4:	e0fffd0b 	ldhu	r3,-12(fp)
  101db8:	e0bffe17 	ldw	r2,-8(fp)
  101dbc:	10c08415 	stw	r3,528(r2)

	      //Register 9
	        //1000BT control register
	    	  control = targetMAC->mdio_PHY_CTRL1000;
  101dc0:	e0bffe17 	ldw	r2,-8(fp)
  101dc4:	10808917 	ldw	r2,548(r2)
  101dc8:	e0bffd0d 	sth	r2,-12(fp)
	        //Don't advertise anything
	          control &= ~(MII_1000BASETCONTROL_FULLDUPLEXCAP | MII_1000BASETCONTROL_HALFDUPLEXCAP);
  101dcc:	e0fffd0b 	ldhu	r3,-12(fp)
  101dd0:	00bf3fc4 	movi	r2,-769
  101dd4:	1884703a 	and	r2,r3,r2
  101dd8:	e0bffd0d 	sth	r2,-12(fp)
	        //Advertise 100mbps

	        //Write changes
	          targetMAC->mdio_PHY_CTRL1000 = control;
  101ddc:	e0fffd0b 	ldhu	r3,-12(fp)
  101de0:	e0bffe17 	ldw	r2,-8(fp)
  101de4:	10c08915 	stw	r3,548(r2)

	      //Register 0
	        //base control register
	          control = targetMAC->mdio_PHY_CR;
  101de8:	e0bffe17 	ldw	r2,-8(fp)
  101dec:	10808017 	ldw	r2,512(r2)
  101df0:	e0bffd0d 	sth	r2,-12(fp)
	        //Don't advertise anything
	          control &= ~(CR_SPEED1000 | CR_SPEED100);
  101df4:	e0fffd0b 	ldhu	r3,-12(fp)
  101df8:	00b7efc4 	movi	r2,-8257
  101dfc:	1884703a 	and	r2,r3,r2
  101e00:	e0bffd0d 	sth	r2,-12(fp)
	        //Advertise 10mbps
	          //100mbps = "01"
	          control |= (CR_SPEED100);
  101e04:	e0bffd0b 	ldhu	r2,-12(fp)
  101e08:	10880014 	ori	r2,r2,8192
  101e0c:	e0bffd0d 	sth	r2,-12(fp)
	        //Write changes
	          targetMAC->mdio_PHY_CR = control;
  101e10:	e0fffd0b 	ldhu	r3,-12(fp)
  101e14:	e0bffe17 	ldw	r2,-8(fp)
  101e18:	10c08015 	stw	r3,512(r2)

	          control = targetMAC->command_config;
  101e1c:	e0bffe17 	ldw	r2,-8(fp)
  101e20:	10800217 	ldw	r2,8(r2)
  101e24:	e0bffd0d 	sth	r2,-12(fp)
	          control &= ~(CC_ETH_SPEED | CC_ENA_10);
  101e28:	e0fffd0b 	ldhu	r3,-12(fp)
  101e2c:	00bffdc4 	movi	r2,-9
  101e30:	1884703a 	and	r2,r3,r2
  101e34:	e0bffd0d 	sth	r2,-12(fp)
	          targetMAC->command_config = control;
  101e38:	e0fffd0b 	ldhu	r3,-12(fp)
  101e3c:	e0bffe17 	ldw	r2,-8(fp)
  101e40:	10c00215 	stw	r3,8(r2)

	      break;
  101e44:	00003906 	br	101f2c <macInit+0x2a4>
	    case 2: //Speed 1000 Selected
	      printf("[mac.c]\tSpeed 1000 selected\n");
  101e48:	01000474 	movhi	r4,17
  101e4c:	21186204 	addi	r4,r4,24968
  101e50:	01048740 	call	104874 <puts>
	      //Register 4
	        //Advertisement control register
	      	  control = targetMAC->mdio_PHY_ACR;
  101e54:	e0bffe17 	ldw	r2,-8(fp)
  101e58:	10808417 	ldw	r2,528(r2)
  101e5c:	e0bffd0d 	sth	r2,-12(fp)
	        //Don't advertise anything
	          control &= ~(ADVERTISE_10HALF | ADVERTISE_10FULL | ADVERTISE_100HALF | ADVERTISE_100FULL);
  101e60:	e0fffd0b 	ldhu	r3,-12(fp)
  101e64:	00bf87c4 	movi	r2,-481
  101e68:	1884703a 	and	r2,r3,r2
  101e6c:	e0bffd0d 	sth	r2,-12(fp)
	        //Advertise 1000mbps

	        //Write changes
	          targetMAC->mdio_PHY_ACR = control;
  101e70:	e0fffd0b 	ldhu	r3,-12(fp)
  101e74:	e0bffe17 	ldw	r2,-8(fp)
  101e78:	10c08415 	stw	r3,528(r2)

	      //Register 9
	        //1000BT control register
	          control = targetMAC->mdio_PHY_CTRL1000;
  101e7c:	e0bffe17 	ldw	r2,-8(fp)
  101e80:	10808917 	ldw	r2,548(r2)
  101e84:	e0bffd0d 	sth	r2,-12(fp)
	        //Don't advertise anything
	          control &= ~(MII_1000BASETCONTROL_FULLDUPLEXCAP | MII_1000BASETCONTROL_HALFDUPLEXCAP);
  101e88:	e0fffd0b 	ldhu	r3,-12(fp)
  101e8c:	00bf3fc4 	movi	r2,-769
  101e90:	1884703a 	and	r2,r3,r2
  101e94:	e0bffd0d 	sth	r2,-12(fp)
	        //Advertise 100mbps
	          control |= (MII_1000BASETCONTROL_FULLDUPLEXCAP | MII_1000BASETCONTROL_HALFDUPLEXCAP);
  101e98:	e0bffd0b 	ldhu	r2,-12(fp)
  101e9c:	1080c014 	ori	r2,r2,768
  101ea0:	e0bffd0d 	sth	r2,-12(fp)
	        //Write changes
	          targetMAC->mdio_PHY_CTRL1000 = control;
  101ea4:	e0fffd0b 	ldhu	r3,-12(fp)
  101ea8:	e0bffe17 	ldw	r2,-8(fp)
  101eac:	10c08915 	stw	r3,548(r2)

	      //Register 0
	        //base control register
	          control = targetMAC->mdio_PHY_CR;
  101eb0:	e0bffe17 	ldw	r2,-8(fp)
  101eb4:	10808017 	ldw	r2,512(r2)
  101eb8:	e0bffd0d 	sth	r2,-12(fp)
	        //Don't advertise anything
	          control &= ~(CR_SPEED1000 | CR_SPEED100);
  101ebc:	e0fffd0b 	ldhu	r3,-12(fp)
  101ec0:	00b7efc4 	movi	r2,-8257
  101ec4:	1884703a 	and	r2,r3,r2
  101ec8:	e0bffd0d 	sth	r2,-12(fp)
	        //Advertise 10mbps
	          //100mbps = "01"
	          control |= (CR_SPEED1000);
  101ecc:	e0bffd0b 	ldhu	r2,-12(fp)
  101ed0:	10801014 	ori	r2,r2,64
  101ed4:	e0bffd0d 	sth	r2,-12(fp)
	        //Write changes
	          targetMAC->mdio_PHY_CR = control;
  101ed8:	e0fffd0b 	ldhu	r3,-12(fp)
  101edc:	e0bffe17 	ldw	r2,-8(fp)
  101ee0:	10c08015 	stw	r3,512(r2)

	          control = targetMAC->command_config;
  101ee4:	e0bffe17 	ldw	r2,-8(fp)
  101ee8:	10800217 	ldw	r2,8(r2)
  101eec:	e0bffd0d 	sth	r2,-12(fp)
	          control &= ~(CC_ENA_10);
	          control |= CC_ETH_SPEED;
  101ef0:	e0bffd0b 	ldhu	r2,-12(fp)
  101ef4:	10800214 	ori	r2,r2,8
  101ef8:	e0bffd0d 	sth	r2,-12(fp)
	          targetMAC->command_config = control;
  101efc:	e0fffd0b 	ldhu	r3,-12(fp)
  101f00:	e0bffe17 	ldw	r2,-8(fp)
  101f04:	10c00215 	stw	r3,8(r2)

	      break;
  101f08:	00000806 	br	101f2c <macInit+0x2a4>
	    default:
	      printf("[mac.c]\tInvalid speed selected\n");
  101f0c:	01000474 	movhi	r4,17
  101f10:	21186904 	addi	r4,r4,24996
  101f14:	01048740 	call	104874 <puts>
	      printf("[mac.c]\tInitialize interface (FAILURE)\n");
  101f18:	01000474 	movhi	r4,17
  101f1c:	21187104 	addi	r4,r4,25028
  101f20:	01048740 	call	104874 <puts>
	      return 1;
  101f24:	00800044 	movi	r2,1
  101f28:	0000bf06 	br	102228 <macInit+0x5a0>
	      break;
	  }

	  if(SW_Status & DUP_MSK){
  101f2c:	e0bfff03 	ldbu	r2,-4(fp)
  101f30:	1080010c 	andi	r2,r2,4
  101f34:	10002b26 	beq	r2,zero,101fe4 <macInit+0x35c>
	    //Enable FULL DUPLEX mode!
	    printf("[mac.c]\tFull-duplex selected\n");
  101f38:	01000474 	movhi	r4,17
  101f3c:	21187b04 	addi	r4,r4,25068
  101f40:	01048740 	call	104874 <puts>
	    //Register 4
	      //Advertisement control register
	    	control = targetMAC->mdio_PHY_ACR;
  101f44:	e0bffe17 	ldw	r2,-8(fp)
  101f48:	10808417 	ldw	r2,528(r2)
  101f4c:	e0bffd0d 	sth	r2,-12(fp)
	      //Don't advertise half duplex!
	        control &= ~(ADVERTISE_10HALF | ADVERTISE_100HALF);
  101f50:	e0fffd0b 	ldhu	r3,-12(fp)
  101f54:	00bfd7c4 	movi	r2,-161
  101f58:	1884703a 	and	r2,r3,r2
  101f5c:	e0bffd0d 	sth	r2,-12(fp)
	      //Write changes
	        targetMAC->mdio_PHY_ACR = control;
  101f60:	e0fffd0b 	ldhu	r3,-12(fp)
  101f64:	e0bffe17 	ldw	r2,-8(fp)
  101f68:	10c08415 	stw	r3,528(r2)

	    //Register 9
	      //1000BT control register
	        control = targetMAC->mdio_PHY_CTRL1000;
  101f6c:	e0bffe17 	ldw	r2,-8(fp)
  101f70:	10808917 	ldw	r2,548(r2)
  101f74:	e0bffd0d 	sth	r2,-12(fp)
	      //Don't advertise helf duplex!
	        control &= ~(MII_1000BASETCONTROL_HALFDUPLEXCAP);
  101f78:	e0fffd0b 	ldhu	r3,-12(fp)
  101f7c:	00bfbfc4 	movi	r2,-257
  101f80:	1884703a 	and	r2,r3,r2
  101f84:	e0bffd0d 	sth	r2,-12(fp)
	      //Write changes
	        targetMAC->mdio_PHY_CTRL1000 = control;
  101f88:	e0fffd0b 	ldhu	r3,-12(fp)
  101f8c:	e0bffe17 	ldw	r2,-8(fp)
  101f90:	10c08915 	stw	r3,548(r2)


	    //Register 0
	      //base control register
	        control = targetMAC->mdio_PHY_CR;
  101f94:	e0bffe17 	ldw	r2,-8(fp)
  101f98:	10808017 	ldw	r2,512(r2)
  101f9c:	e0bffd0d 	sth	r2,-12(fp)
	      //Engage Duplex
	        control |= (CR_FULLDPLX);
  101fa0:	e0bffd0b 	ldhu	r2,-12(fp)
  101fa4:	10804014 	ori	r2,r2,256
  101fa8:	e0bffd0d 	sth	r2,-12(fp)
	      //Write changes
	        targetMAC->mdio_PHY_CR = control;
  101fac:	e0fffd0b 	ldhu	r3,-12(fp)
  101fb0:	e0bffe17 	ldw	r2,-8(fp)
  101fb4:	10c08015 	stw	r3,512(r2)

		  control = targetMAC->command_config;
  101fb8:	e0bffe17 	ldw	r2,-8(fp)
  101fbc:	10800217 	ldw	r2,8(r2)
  101fc0:	e0bffd0d 	sth	r2,-12(fp)
		  control &= ~(CC_HD_ENA);
  101fc4:	e0fffd0b 	ldhu	r3,-12(fp)
  101fc8:	00beffc4 	movi	r2,-1025
  101fcc:	1884703a 	and	r2,r3,r2
  101fd0:	e0bffd0d 	sth	r2,-12(fp)
		  targetMAC->command_config = control;
  101fd4:	e0fffd0b 	ldhu	r3,-12(fp)
  101fd8:	e0bffe17 	ldw	r2,-8(fp)
  101fdc:	10c00215 	stw	r3,8(r2)
  101fe0:	00002a06 	br	10208c <macInit+0x404>

	  } else {
	    //Enable HALF DUPLEX mode!
	    printf("[mac.c]\tHalf-duplex selected\n");
  101fe4:	01000474 	movhi	r4,17
  101fe8:	21188304 	addi	r4,r4,25100
  101fec:	01048740 	call	104874 <puts>
	    //Register 4
	      //Advertisement control register
    		control = targetMAC->mdio_PHY_ACR;
  101ff0:	e0bffe17 	ldw	r2,-8(fp)
  101ff4:	10808417 	ldw	r2,528(r2)
  101ff8:	e0bffd0d 	sth	r2,-12(fp)
	      //Don't advertise full duplex!
	        control &= ~(ADVERTISE_10FULL | ADVERTISE_100FULL);
  101ffc:	e0fffd0b 	ldhu	r3,-12(fp)
  102000:	00bfafc4 	movi	r2,-321
  102004:	1884703a 	and	r2,r3,r2
  102008:	e0bffd0d 	sth	r2,-12(fp)
	      //Write changes
	        targetMAC->mdio_PHY_ACR = control;
  10200c:	e0fffd0b 	ldhu	r3,-12(fp)
  102010:	e0bffe17 	ldw	r2,-8(fp)
  102014:	10c08415 	stw	r3,528(r2)

	    //Register 9
	      //1000BT control register
	        control = targetMAC->mdio_PHY_CTRL1000;
  102018:	e0bffe17 	ldw	r2,-8(fp)
  10201c:	10808917 	ldw	r2,548(r2)
  102020:	e0bffd0d 	sth	r2,-12(fp)
	      //Don't advertise helf duplex!
	        control &= ~(MII_1000BASETCONTROL_FULLDUPLEXCAP);
  102024:	e0fffd0b 	ldhu	r3,-12(fp)
  102028:	00bf7fc4 	movi	r2,-513
  10202c:	1884703a 	and	r2,r3,r2
  102030:	e0bffd0d 	sth	r2,-12(fp)
	      //Write changes
	        targetMAC->mdio_PHY_CTRL1000 = control;
  102034:	e0fffd0b 	ldhu	r3,-12(fp)
  102038:	e0bffe17 	ldw	r2,-8(fp)
  10203c:	10c08915 	stw	r3,548(r2)

	    //Register 0
	      //base control register
	        control = targetMAC->mdio_PHY_CR;
  102040:	e0bffe17 	ldw	r2,-8(fp)
  102044:	10808017 	ldw	r2,512(r2)
  102048:	e0bffd0d 	sth	r2,-12(fp)
	      //Say no to duplex
	        control &= ~(CR_FULLDPLX);
  10204c:	e0fffd0b 	ldhu	r3,-12(fp)
  102050:	00bfbfc4 	movi	r2,-257
  102054:	1884703a 	and	r2,r3,r2
  102058:	e0bffd0d 	sth	r2,-12(fp)
	      //Write changes
	        targetMAC->mdio_PHY_CR = control;
  10205c:	e0fffd0b 	ldhu	r3,-12(fp)
  102060:	e0bffe17 	ldw	r2,-8(fp)
  102064:	10c08015 	stw	r3,512(r2)

		  control = targetMAC->command_config;
  102068:	e0bffe17 	ldw	r2,-8(fp)
  10206c:	10800217 	ldw	r2,8(r2)
  102070:	e0bffd0d 	sth	r2,-12(fp)
		  control |= (CC_HD_ENA);
  102074:	e0bffd0b 	ldhu	r2,-12(fp)
  102078:	10810014 	ori	r2,r2,1024
  10207c:	e0bffd0d 	sth	r2,-12(fp)
		  targetMAC->command_config = control;
  102080:	e0fffd0b 	ldhu	r3,-12(fp)
  102084:	e0bffe17 	ldw	r2,-8(fp)
  102088:	10c00215 	stw	r3,8(r2)
	  }

	  if(SW_Status & XO_MSK){
  10208c:	e0bfff03 	ldbu	r2,-4(fp)
  102090:	1080020c 	andi	r2,r2,8
  102094:	10000d26 	beq	r2,zero,1020cc <macInit+0x444>
	    //Enable Auto-crossover mode!
	    printf("[mac.c]\tAuto-crossover selected\n");
  102098:	01000474 	movhi	r4,17
  10209c:	21188b04 	addi	r4,r4,25132
  1020a0:	01048740 	call	104874 <puts>
	    //Register 16
	      //PHY Specific Control register
	    	control = targetMAC->mdio_PHY_PHYSCR;
  1020a4:	e0bffe17 	ldw	r2,-8(fp)
  1020a8:	10809017 	ldw	r2,576(r2)
  1020ac:	e0bffd0d 	sth	r2,-12(fp)
	      //Change to auto-crossover!
	        control |= (PHYSCR_MDI_MSB | PHYSCR_MDI_LSB);
  1020b0:	e0bffd0b 	ldhu	r2,-12(fp)
  1020b4:	10801814 	ori	r2,r2,96
  1020b8:	e0bffd0d 	sth	r2,-12(fp)
	      //Write changes
	        targetMAC->mdio_PHY_PHYSCR = control;
  1020bc:	e0fffd0b 	ldhu	r3,-12(fp)
  1020c0:	e0bffe17 	ldw	r2,-8(fp)
  1020c4:	10c09015 	stw	r3,576(r2)
  1020c8:	00000d06 	br	102100 <macInit+0x478>

	  } else {
	    //Disable auto-crossover mode!
	    printf("[mac.c]\tNon-crossover selected\n");
  1020cc:	01000474 	movhi	r4,17
  1020d0:	21189304 	addi	r4,r4,25164
  1020d4:	01048740 	call	104874 <puts>
	    //Register 16
	      //PHY Specific Control register
	    	control = targetMAC->mdio_PHY_PHYSSR;
  1020d8:	e0bffe17 	ldw	r2,-8(fp)
  1020dc:	10809117 	ldw	r2,580(r2)
  1020e0:	e0bffd0d 	sth	r2,-12(fp)
	      //Disable auto-crossover, straight across!
	        control &= ~(PHYSCR_MDI_MSB | PHYSCR_MDI_LSB);
  1020e4:	e0fffd0b 	ldhu	r3,-12(fp)
  1020e8:	00bfe7c4 	movi	r2,-97
  1020ec:	1884703a 	and	r2,r3,r2
  1020f0:	e0bffd0d 	sth	r2,-12(fp)
	      //Write changes
	        targetMAC->mdio_PHY_PHYSSR = control;
  1020f4:	e0fffd0b 	ldhu	r3,-12(fp)
  1020f8:	e0bffe17 	ldw	r2,-8(fp)
  1020fc:	10c09115 	stw	r3,580(r2)
	  }

	  if(SW_Status & AN_MSK){
  102100:	e0bfff03 	ldbu	r2,-4(fp)
  102104:	1080040c 	andi	r2,r2,16
  102108:	10001f26 	beq	r2,zero,102188 <macInit+0x500>
	    //Enable auto-negotiation!
	    printf("[mac.c]\tAuto-negotiation selected\n");
  10210c:	01000474 	movhi	r4,17
  102110:	21189b04 	addi	r4,r4,25196
  102114:	01048740 	call	104874 <puts>
	    //Register 4
	      //Advertisement control register
			control = targetMAC->mdio_PHY_ACR;
  102118:	e0bffe17 	ldw	r2,-8(fp)
  10211c:	10808417 	ldw	r2,528(r2)
  102120:	e0bffd0d 	sth	r2,-12(fp)
	      //Advertise everything
	        control |= (ADVERTISE_10HALF | ADVERTISE_10FULL | ADVERTISE_100HALF | ADVERTISE_100FULL);
  102124:	e0bffd0b 	ldhu	r2,-12(fp)
  102128:	10807814 	ori	r2,r2,480
  10212c:	e0bffd0d 	sth	r2,-12(fp)
	      //Write changes
	        targetMAC->mdio_PHY_ACR = control;
  102130:	e0fffd0b 	ldhu	r3,-12(fp)
  102134:	e0bffe17 	ldw	r2,-8(fp)
  102138:	10c08415 	stw	r3,528(r2)

	    //Register 9
	      //1000BT control register
	        control = targetMAC->mdio_PHY_CTRL1000;
  10213c:	e0bffe17 	ldw	r2,-8(fp)
  102140:	10808917 	ldw	r2,548(r2)
  102144:	e0bffd0d 	sth	r2,-12(fp)
	      //Advertise everything
	        control |= (MII_1000BASETCONTROL_FULLDUPLEXCAP | MII_1000BASETCONTROL_HALFDUPLEXCAP);
  102148:	e0bffd0b 	ldhu	r2,-12(fp)
  10214c:	1080c014 	ori	r2,r2,768
  102150:	e0bffd0d 	sth	r2,-12(fp)
	      //Write changes
	        targetMAC->mdio_PHY_CTRL1000 = control;
  102154:	e0fffd0b 	ldhu	r3,-12(fp)
  102158:	e0bffe17 	ldw	r2,-8(fp)
  10215c:	10c08915 	stw	r3,548(r2)

	    //Register 0
	      //base control register
	        control = targetMAC->mdio_PHY_CR;
  102160:	e0bffe17 	ldw	r2,-8(fp)
  102164:	10808017 	ldw	r2,512(r2)
  102168:	e0bffd0d 	sth	r2,-12(fp)
	      //auto-negotiation on!
	        control |= (CR_ANENABLE);
  10216c:	e0bffd0b 	ldhu	r2,-12(fp)
  102170:	10840014 	ori	r2,r2,4096
  102174:	e0bffd0d 	sth	r2,-12(fp)
	      //Write changes
	        targetMAC->mdio_PHY_CR = control;
  102178:	e0fffd0b 	ldhu	r3,-12(fp)
  10217c:	e0bffe17 	ldw	r2,-8(fp)
  102180:	10c08015 	stw	r3,512(r2)
  102184:	00000d06 	br	1021bc <macInit+0x534>

	  } else {
	    //Disable auto-crossover mode!
	    printf("[mac.c]\tAuto-negotiation unselected\n");
  102188:	01000474 	movhi	r4,17
  10218c:	2118a404 	addi	r4,r4,25232
  102190:	01048740 	call	104874 <puts>
	    //Register 0
	      //base control register
	    	control = targetMAC->mdio_PHY_CR;
  102194:	e0bffe17 	ldw	r2,-8(fp)
  102198:	10808017 	ldw	r2,512(r2)
  10219c:	e0bffd0d 	sth	r2,-12(fp)
	      //auto-negotiation on!
	        control &= ~(CR_ANENABLE);
  1021a0:	e0fffd0b 	ldhu	r3,-12(fp)
  1021a4:	00bbffc4 	movi	r2,-4097
  1021a8:	1884703a 	and	r2,r3,r2
  1021ac:	e0bffd0d 	sth	r2,-12(fp)
	      //Write changes
	        targetMAC->mdio_PHY_CR = control;
  1021b0:	e0fffd0b 	ldhu	r3,-12(fp)
  1021b4:	e0bffe17 	ldw	r2,-8(fp)
  1021b8:	10c08015 	stw	r3,512(r2)
	  }

	  // Write to register 20 of the PHY chip to set up delay for input/output clk
	  targetMAC->mdio_PHY_EPHYSCR |= 0x0082;
  1021bc:	e0bffe17 	ldw	r2,-8(fp)
  1021c0:	10809417 	ldw	r2,592(r2)
  1021c4:	10c02094 	ori	r3,r2,130
  1021c8:	e0bffe17 	ldw	r2,-8(fp)
  1021cc:	10c09415 	stw	r3,592(r2)

	  control = targetMAC->command_config;
  1021d0:	e0bffe17 	ldw	r2,-8(fp)
  1021d4:	10800217 	ldw	r2,8(r2)
  1021d8:	e0bffd0d 	sth	r2,-12(fp)
	  control |= (CC_PROMIS_EN | CC_PAD_EN);
  1021dc:	e0bffd0b 	ldhu	r2,-12(fp)
  1021e0:	10800c14 	ori	r2,r2,48
  1021e4:	e0bffd0d 	sth	r2,-12(fp)
	  control &= ~(CC_CRC_FWD | CC_PAUSE_FWD | CC_PAUSE_IGNORE | CC_TX_ADDR_INS);
  1021e8:	e0fffd0b 	ldhu	r3,-12(fp)
  1021ec:	00bf0fc4 	movi	r2,-961
  1021f0:	1884703a 	and	r2,r3,r2
  1021f4:	e0bffd0d 	sth	r2,-12(fp)
	  targetMAC->command_config = control;
  1021f8:	e0fffd0b 	ldhu	r3,-12(fp)
  1021fc:	e0bffe17 	ldw	r2,-8(fp)
  102200:	10c00215 	stw	r3,8(r2)

	  targetMAC->mdio_PHY_CR |= (CR_ANRESTART | CR_RESET);
  102204:	e0bffe17 	ldw	r2,-8(fp)
  102208:	10808017 	ldw	r2,512(r2)
  10220c:	10e08014 	ori	r3,r2,33280
  102210:	e0bffe17 	ldw	r2,-8(fp)
  102214:	10c08015 	stw	r3,512(r2)

  printf("[mac.c]\tInitialize interface (SUCCESS)\n");
  102218:	01000474 	movhi	r4,17
  10221c:	2118ad04 	addi	r4,r4,25268
  102220:	01048740 	call	104874 <puts>
  return 0;
  102224:	0005883a 	mov	r2,zero

  printf("[mac.c]\tInitialize interface (FAILURE)\n");
  return 1;
}
  102228:	e037883a 	mov	sp,fp
  10222c:	dfc00117 	ldw	ra,4(sp)
  102230:	df000017 	ldw	fp,0(sp)
  102234:	dec00204 	addi	sp,sp,8
  102238:	f800283a 	ret

0010223c <macPrintRegs>:

void macPrintRegs(volatile MAC_t* targetMAC){
  10223c:	defffd04 	addi	sp,sp,-12
  102240:	dfc00215 	stw	ra,8(sp)
  102244:	df000115 	stw	fp,4(sp)
  102248:	df000104 	addi	fp,sp,4
  10224c:	e13fff15 	stw	r4,-4(fp)
  /* Mode Register */
  printf("\tRevision Reg:\t\t0x%.8x\n", (unsigned int) targetMAC->rev);
  102250:	e0bfff17 	ldw	r2,-4(fp)
  102254:	10800017 	ldw	r2,0(r2)
  102258:	01000474 	movhi	r4,17
  10225c:	2118b704 	addi	r4,r4,25308
  102260:	100b883a 	mov	r5,r2
  102264:	010475c0 	call	10475c <printf>

  /* Interrupt Source Register */
  printf("\tScratch Reg:\t\t0x%.8x\n", (unsigned int) targetMAC->scratch);
  102268:	e0bfff17 	ldw	r2,-4(fp)
  10226c:	10800117 	ldw	r2,4(r2)
  102270:	01000474 	movhi	r4,17
  102274:	2118bd04 	addi	r4,r4,25332
  102278:	100b883a 	mov	r5,r2
  10227c:	010475c0 	call	10475c <printf>

  /* Interrupt Mask Register */
  printf("\tCommand Config  Reg:\t\t0x%.8x\n", (unsigned int) targetMAC->command_config);
  102280:	e0bfff17 	ldw	r2,-4(fp)
  102284:	10800217 	ldw	r2,8(r2)
  102288:	01000474 	movhi	r4,17
  10228c:	2118c304 	addi	r4,r4,25356
  102290:	100b883a 	mov	r5,r2
  102294:	010475c0 	call	10475c <printf>

  /* Back to Back Inter Packet Gap Register */
  printf("\tMAC0 Reg: \t\t\t0x%.8x\n", (unsigned int) targetMAC->mac_0);
  102298:	e0bfff17 	ldw	r2,-4(fp)
  10229c:	10800317 	ldw	r2,12(r2)
  1022a0:	01000474 	movhi	r4,17
  1022a4:	2118cb04 	addi	r4,r4,25388
  1022a8:	100b883a 	mov	r5,r2
  1022ac:	010475c0 	call	10475c <printf>

  /* Non Back to Back Inter Packet Gap Register 1 */
  printf("\tMAC1 Reg: \t\t\t0x%.8x\n", (unsigned int) targetMAC->mac_1);
  1022b0:	e0bfff17 	ldw	r2,-4(fp)
  1022b4:	10800417 	ldw	r2,16(r2)
  1022b8:	01000474 	movhi	r4,17
  1022bc:	2118d104 	addi	r4,r4,25412
  1022c0:	100b883a 	mov	r5,r2
  1022c4:	010475c0 	call	10475c <printf>

  /* Non Back to Back Inter Packet Gap Register 2 */
  printf("\tFrame Length Reg: \t\t0x%.8x\n", (unsigned int) targetMAC->frm_length);
  1022c8:	e0bfff17 	ldw	r2,-4(fp)
  1022cc:	10800517 	ldw	r2,20(r2)
  1022d0:	01000474 	movhi	r4,17
  1022d4:	2118d704 	addi	r4,r4,25436
  1022d8:	100b883a 	mov	r5,r2
  1022dc:	010475c0 	call	10475c <printf>

  /* Packet Length Register (min. and max.) */
  printf("\tPause Quant Reg: \t\t0x%.8x\n", (unsigned int) targetMAC->pause_quant);
  1022e0:	e0bfff17 	ldw	r2,-4(fp)
  1022e4:	10800617 	ldw	r2,24(r2)
  1022e8:	01000474 	movhi	r4,17
  1022ec:	2118df04 	addi	r4,r4,25468
  1022f0:	100b883a 	mov	r5,r2
  1022f4:	010475c0 	call	10475c <printf>

  /* Collision and Retry Configuration Register */
  printf("\tMDIO0 Reg: \t\t0x%.8x\n", (unsigned int) targetMAC->mdio_addr0);
  1022f8:	e0bfff17 	ldw	r2,-4(fp)
  1022fc:	10800f17 	ldw	r2,60(r2)
  102300:	01000474 	movhi	r4,17
  102304:	2118e604 	addi	r4,r4,25496
  102308:	100b883a 	mov	r5,r2
  10230c:	010475c0 	call	10475c <printf>

  /* Transmit Buffer Descriptor Number Register */
  printf("\tMDIO1 Reg: \t\t0x%.8x\n", (unsigned int) targetMAC->mdio_addr1);
  102310:	e0bfff17 	ldw	r2,-4(fp)
  102314:	10801017 	ldw	r2,64(r2)
  102318:	01000474 	movhi	r4,17
  10231c:	2118ec04 	addi	r4,r4,25520
  102320:	100b883a 	mov	r5,r2
  102324:	010475c0 	call	10475c <printf>

  /* Control Module Mode Register */
  printf("\tHoldoff Quant Reg: \t\t0x%.8x\n", (unsigned int) targetMAC->holdoff_quant);
  102328:	e0bfff17 	ldw	r2,-4(fp)
  10232c:	10801117 	ldw	r2,68(r2)
  102330:	01000474 	movhi	r4,17
  102334:	2118f204 	addi	r4,r4,25544
  102338:	100b883a 	mov	r5,r2
  10233c:	010475c0 	call	10475c <printf>

  /* MII Mode Register */
  printf("\tTX IPG Reg: \t\t0x%.8x\n", (unsigned int) targetMAC->tx_ipg_length);
  102340:	e0bfff17 	ldw	r2,-4(fp)
  102344:	10801717 	ldw	r2,92(r2)
  102348:	01000474 	movhi	r4,17
  10234c:	2118fa04 	addi	r4,r4,25576
  102350:	100b883a 	mov	r5,r2
  102354:	010475c0 	call	10475c <printf>

  /* MII Command Register */
  printf("\tTX Command Reg:\t\t0x%.8x\n", (unsigned int) targetMAC->tx_command);
  102358:	e0bfff17 	ldw	r2,-4(fp)
  10235c:	10803a17 	ldw	r2,232(r2)
  102360:	01000474 	movhi	r4,17
  102364:	21190004 	addi	r4,r4,25600
  102368:	100b883a 	mov	r5,r2
  10236c:	010475c0 	call	10475c <printf>

  /* MII Address Register */
  printf("\tRX Command Reg:\t\t0x%.8x\n", (unsigned int) targetMAC->rx_command);
  102370:	e0bfff17 	ldw	r2,-4(fp)
  102374:	10803b17 	ldw	r2,236(r2)
  102378:	01000474 	movhi	r4,17
  10237c:	21190704 	addi	r4,r4,25628
  102380:	100b883a 	mov	r5,r2
  102384:	010475c0 	call	10475c <printf>
}
  102388:	e037883a 	mov	sp,fp
  10238c:	dfc00117 	ldw	ra,4(sp)
  102390:	df000017 	ldw	fp,0(sp)
  102394:	dec00204 	addi	sp,sp,8
  102398:	f800283a 	ret

0010239c <__list_add>:
 * the prev/next entries already!
 */
static inline void __list_add(struct list_head *new,
			      struct list_head *prev,
			      struct list_head *next)
{
  10239c:	defffc04 	addi	sp,sp,-16
  1023a0:	df000315 	stw	fp,12(sp)
  1023a4:	df000304 	addi	fp,sp,12
  1023a8:	e13ffd15 	stw	r4,-12(fp)
  1023ac:	e17ffe15 	stw	r5,-8(fp)
  1023b0:	e1bfff15 	stw	r6,-4(fp)
	next->prev = new;
  1023b4:	e0bfff17 	ldw	r2,-4(fp)
  1023b8:	e0fffd17 	ldw	r3,-12(fp)
  1023bc:	10c00115 	stw	r3,4(r2)
	new->next = next;
  1023c0:	e0bffd17 	ldw	r2,-12(fp)
  1023c4:	e0ffff17 	ldw	r3,-4(fp)
  1023c8:	10c00015 	stw	r3,0(r2)
	new->prev = prev;
  1023cc:	e0bffd17 	ldw	r2,-12(fp)
  1023d0:	e0fffe17 	ldw	r3,-8(fp)
  1023d4:	10c00115 	stw	r3,4(r2)
	prev->next = new;
  1023d8:	e0bffe17 	ldw	r2,-8(fp)
  1023dc:	e0fffd17 	ldw	r3,-12(fp)
  1023e0:	10c00015 	stw	r3,0(r2)
}
  1023e4:	e037883a 	mov	sp,fp
  1023e8:	df000017 	ldw	fp,0(sp)
  1023ec:	dec00104 	addi	sp,sp,4
  1023f0:	f800283a 	ret

001023f4 <list_add_tail>:
 *
 * Insert a new entry before the specified head.
 * This is useful for implementing queues.
 */
static inline void list_add_tail(struct list_head *new, struct list_head *head)
{
  1023f4:	defffc04 	addi	sp,sp,-16
  1023f8:	dfc00315 	stw	ra,12(sp)
  1023fc:	df000215 	stw	fp,8(sp)
  102400:	df000204 	addi	fp,sp,8
  102404:	e13ffe15 	stw	r4,-8(fp)
  102408:	e17fff15 	stw	r5,-4(fp)
	__list_add(new, head->prev, head);
  10240c:	e0bfff17 	ldw	r2,-4(fp)
  102410:	10800117 	ldw	r2,4(r2)
  102414:	e13ffe17 	ldw	r4,-8(fp)
  102418:	100b883a 	mov	r5,r2
  10241c:	e1bfff17 	ldw	r6,-4(fp)
  102420:	010239c0 	call	10239c <__list_add>
}
  102424:	e037883a 	mov	sp,fp
  102428:	dfc00117 	ldw	ra,4(sp)
  10242c:	df000017 	ldw	fp,0(sp)
  102430:	dec00204 	addi	sp,sp,8
  102434:	f800283a 	ret

00102438 <__list_del>:
 *
 * This is only for internal list manipulation where we know
 * the prev/next entries already!
 */
static inline void __list_del(struct list_head *prev, struct list_head *next)
{
  102438:	defffd04 	addi	sp,sp,-12
  10243c:	df000215 	stw	fp,8(sp)
  102440:	df000204 	addi	fp,sp,8
  102444:	e13ffe15 	stw	r4,-8(fp)
  102448:	e17fff15 	stw	r5,-4(fp)
	next->prev = prev;
  10244c:	e0bfff17 	ldw	r2,-4(fp)
  102450:	e0fffe17 	ldw	r3,-8(fp)
  102454:	10c00115 	stw	r3,4(r2)
	prev->next = next;
  102458:	e0bffe17 	ldw	r2,-8(fp)
  10245c:	e0ffff17 	ldw	r3,-4(fp)
  102460:	10c00015 	stw	r3,0(r2)
}
  102464:	e037883a 	mov	sp,fp
  102468:	df000017 	ldw	fp,0(sp)
  10246c:	dec00104 	addi	sp,sp,4
  102470:	f800283a 	ret

00102474 <list_move_tail>:
 * @list: the entry to move
 * @head: the head that will follow our entry
 */
static inline void list_move_tail(struct list_head *list,
				  struct list_head *head)
{
  102474:	defffc04 	addi	sp,sp,-16
  102478:	dfc00315 	stw	ra,12(sp)
  10247c:	df000215 	stw	fp,8(sp)
  102480:	df000204 	addi	fp,sp,8
  102484:	e13ffe15 	stw	r4,-8(fp)
  102488:	e17fff15 	stw	r5,-4(fp)
        __list_del(list->prev, list->next);
  10248c:	e0bffe17 	ldw	r2,-8(fp)
  102490:	10c00117 	ldw	r3,4(r2)
  102494:	e0bffe17 	ldw	r2,-8(fp)
  102498:	10800017 	ldw	r2,0(r2)
  10249c:	1809883a 	mov	r4,r3
  1024a0:	100b883a 	mov	r5,r2
  1024a4:	01024380 	call	102438 <__list_del>
        list_add_tail(list, head);
  1024a8:	e13ffe17 	ldw	r4,-8(fp)
  1024ac:	e17fff17 	ldw	r5,-4(fp)
  1024b0:	01023f40 	call	1023f4 <list_add_tail>
}
  1024b4:	e037883a 	mov	sp,fp
  1024b8:	dfc00117 	ldw	ra,4(sp)
  1024bc:	df000017 	ldw	fp,0(sp)
  1024c0:	dec00204 	addi	sp,sp,8
  1024c4:	f800283a 	ret

001024c8 <main>:
alt_sgdma_dev * BlackTx;

TARGET* headNumber = NULL;

int main(void)
{
  1024c8:	defe5804 	addi	sp,sp,-1696
  1024cc:	dfc1a715 	stw	ra,1692(sp)
  1024d0:	df01a615 	stw	fp,1688(sp)
  1024d4:	dc41a515 	stw	r17,1684(sp)
  1024d8:	dc01a415 	stw	r16,1680(sp)
  1024dc:	df01a604 	addi	fp,sp,1688
/*
-------------------------------------------------------------------------------
Initialize the Linked List
-------------------------------------------------------------------------------
*/
	headNumber = InitializeTargetList(headNumber);
  1024e0:	d0a71917 	ldw	r2,-25500(gp)
  1024e4:	1009883a 	mov	r4,r2
  1024e8:	01013ac0 	call	1013ac <InitializeTargetList>
  1024ec:	d0a71915 	stw	r2,-25500(gp)
	headNumber = PrintTargetList(headNumber);
  1024f0:	d0a71917 	ldw	r2,-25500(gp)
  1024f4:	1009883a 	mov	r4,r2
  1024f8:	010171c0 	call	10171c <PrintTargetList>
  1024fc:	d0a71915 	stw	r2,-25500(gp)

	int i;

	struct FIFO RedRx_FIFO;
	initialize_fifo(&RedRx_FIFO, NUMBER_BUFFERS);
  102500:	e0be6604 	addi	r2,fp,-1640
  102504:	1009883a 	mov	r4,r2
  102508:	01400604 	movi	r5,24
  10250c:	01018fc0 	call	1018fc <initialize_fifo>
	struct FIFO RedTx_FIFO;
	initialize_fifo(&RedTx_FIFO, NUMBER_BUFFERS);
  102510:	e0be6a04 	addi	r2,fp,-1624
  102514:	1009883a 	mov	r4,r2
  102518:	01400604 	movi	r5,24
  10251c:	01018fc0 	call	1018fc <initialize_fifo>
	struct FIFO BlackRx_FIFO;
	initialize_fifo(&BlackRx_FIFO, NUMBER_BUFFERS);
  102520:	e0be6e04 	addi	r2,fp,-1608
  102524:	1009883a 	mov	r4,r2
  102528:	01400604 	movi	r5,24
  10252c:	01018fc0 	call	1018fc <initialize_fifo>
	struct FIFO BlackTx_FIFO;
	initialize_fifo(&BlackTx_FIFO, NUMBER_BUFFERS);
  102530:	e0be7204 	addi	r2,fp,-1592
  102534:	1009883a 	mov	r4,r2
  102538:	01400604 	movi	r5,24
  10253c:	01018fc0 	call	1018fc <initialize_fifo>
	I printf("RedRx available: %d\n", RedRx_FIFO.available);
	I printf("RedTx available: %d\n", RedTx_FIFO.available);
	I printf("BlackRx available: %d\n", BlackRx_FIFO.available);
	I printf("BlackTx available: %d\n", BlackTx_FIFO.available);

	char fstRedRx 	= -1;
  102540:	00bfffc4 	movi	r2,-1
  102544:	e0be5f05 	stb	r2,-1668(fp)
	char fstRedTx 	= -1;
  102548:	00bfffc4 	movi	r2,-1
  10254c:	e0be5f45 	stb	r2,-1667(fp)
	char fstBlackRx = -1;
  102550:	00bfffc4 	movi	r2,-1
  102554:	e0be5f85 	stb	r2,-1666(fp)
	char fstBlackTx = -1;
  102558:	00bfffc4 	movi	r2,-1
  10255c:	e0be5fc5 	stb	r2,-1665(fp)
	char nxtRedRx	= 0;
  102560:	e03e6005 	stb	zero,-1664(fp)
	char nxtRedTx	= 0;
  102564:	e03e6045 	stb	zero,-1663(fp)
	char nxtBlackRx	= 0;
  102568:	e03e6085 	stb	zero,-1662(fp)
	char nxtBlackTx	= 0;
  10256c:	e03e60c5 	stb	zero,-1661(fp)

	I printf("[TED.c]\tStarting Initialization\n");

	//Initialize Crypto
 	printf("[TED.c]\tInitialize Crypto\n");
  102570:	01000474 	movhi	r4,17
  102574:	21190e04 	addi	r4,r4,25656
  102578:	01048740 	call	104874 <puts>
 	printf("[TED.c]\t\tInitialize Encryptor\n");
  10257c:	01000474 	movhi	r4,17
  102580:	21191504 	addi	r4,r4,25684
  102584:	01048740 	call	104874 <puts>
 	Encryptor->key8key16 = (DEFAULT_KEY8 << 16) | (DEFAULT_KEY16);
  102588:	d0a00417 	ldw	r2,-32752(gp)
  10258c:	00c00c74 	movhi	r3,49
  102590:	18c92184 	addi	r3,r3,9350
  102594:	10c00615 	stw	r3,24(r2)
 	printf ("[TED.c]\t\tKey8 and Key16 set to: 0x%.8x\n", Encryptor->key8key16);
  102598:	d0a00417 	ldw	r2,-32752(gp)
  10259c:	10800617 	ldw	r2,24(r2)
  1025a0:	01000474 	movhi	r4,17
  1025a4:	21191d04 	addi	r4,r4,25716
  1025a8:	100b883a 	mov	r5,r2
  1025ac:	010475c0 	call	10475c <printf>
 	Encryptor->key32 = DEFAULT_KEY32;
  1025b0:	d0a00417 	ldw	r2,-32752(gp)
  1025b4:	00f7abb4 	movhi	r3,57006
  1025b8:	18efbbc4 	addi	r3,r3,-16657
  1025bc:	10c00715 	stw	r3,28(r2)
 	printf ("[TED.c]\t\tKey32 set to: 0x%.8x\n", Encryptor->key32);
  1025c0:	d0a00417 	ldw	r2,-32752(gp)
  1025c4:	10800717 	ldw	r2,28(r2)
  1025c8:	01000474 	movhi	r4,17
  1025cc:	21192704 	addi	r4,r4,25756
  1025d0:	100b883a 	mov	r5,r2
  1025d4:	010475c0 	call	10475c <printf>
 	printf("[TED.c]\t\tInitialize Encryptor (SUCCESS)\n");
  1025d8:	01000474 	movhi	r4,17
  1025dc:	21192f04 	addi	r4,r4,25788
  1025e0:	01048740 	call	104874 <puts>
 	printf("[TED.c]\t\tInitialize Decryptor\n");
  1025e4:	01000474 	movhi	r4,17
  1025e8:	21193904 	addi	r4,r4,25828
  1025ec:	01048740 	call	104874 <puts>
 	Decryptor->key8key16 = (DEFAULT_KEY8 << 16) | (DEFAULT_KEY16);
  1025f0:	d0a00517 	ldw	r2,-32748(gp)
  1025f4:	00c00c74 	movhi	r3,49
  1025f8:	18c92184 	addi	r3,r3,9350
  1025fc:	10c00615 	stw	r3,24(r2)
 	printf ("[TED.c]\t\tKey8 and Key16 set to: 0x%.8x\n", Encryptor->key8key16);
  102600:	d0a00417 	ldw	r2,-32752(gp)
  102604:	10800617 	ldw	r2,24(r2)
  102608:	01000474 	movhi	r4,17
  10260c:	21191d04 	addi	r4,r4,25716
  102610:	100b883a 	mov	r5,r2
  102614:	010475c0 	call	10475c <printf>
 	Decryptor->key32 = DEFAULT_KEY32;
  102618:	d0a00517 	ldw	r2,-32748(gp)
  10261c:	00f7abb4 	movhi	r3,57006
  102620:	18efbbc4 	addi	r3,r3,-16657
  102624:	10c00715 	stw	r3,28(r2)
 	printf ("[TED.c]\t\tKey32 set to: 0x%.8x\n", Encryptor->key32);
  102628:	d0a00417 	ldw	r2,-32752(gp)
  10262c:	10800717 	ldw	r2,28(r2)
  102630:	01000474 	movhi	r4,17
  102634:	21192704 	addi	r4,r4,25756
  102638:	100b883a 	mov	r5,r2
  10263c:	010475c0 	call	10475c <printf>
 	printf("[TED.c]\t\tInitialize Decryptor (SUCCESS)\n");
  102640:	01000474 	movhi	r4,17
  102644:	21194104 	addi	r4,r4,25860
  102648:	01048740 	call	104874 <puts>
 	printf("[TED.c]\tInitialize Crypto (SUCCESS)\n");
  10264c:	01000474 	movhi	r4,17
  102650:	21194b04 	addi	r4,r4,25900
  102654:	01048740 	call	104874 <puts>

	//Initialize LEDs
 	I printf("[TED.c]\tInitialize LEDs\n");
	if (ledInit(LEDs) != SUCCESS) HALT
  102658:	d0a00617 	ldw	r2,-32744(gp)
  10265c:	1009883a 	mov	r4,r2
  102660:	0101c200 	call	101c20 <ledInit>
  102664:	10803fcc 	andi	r2,r2,255
  102668:	10000526 	beq	r2,zero,102680 <main+0x1b8>
  10266c:	01000474 	movhi	r4,17
  102670:	21195404 	addi	r4,r4,25936
  102674:	01048740 	call	104874 <puts>
  102678:	00800044 	movi	r2,1
  10267c:	0004e806 	br	103a20 <main+0x1558>

    //Initialize switches for desired link settings
 	I printf("[TED.c]\tInitialize Switches\n");
	if (swInit(Switches) != SUCCESS) HALT
  102680:	d0a00217 	ldw	r2,-32760(gp)
  102684:	1009883a 	mov	r4,r2
  102688:	0103b580 	call	103b58 <swInit>
  10268c:	10803fcc 	andi	r2,r2,255
  102690:	10000526 	beq	r2,zero,1026a8 <main+0x1e0>
  102694:	01000474 	movhi	r4,17
  102698:	21195404 	addi	r4,r4,25936
  10269c:	01048740 	call	104874 <puts>
  1026a0:	00800044 	movi	r2,1
  1026a4:	0004de06 	br	103a20 <main+0x1558>
	swPrintStatus(Switches);
  1026a8:	d0a00217 	ldw	r2,-32760(gp)
  1026ac:	1009883a 	mov	r4,r2
  1026b0:	0103be00 	call	103be0 <swPrintStatus>
	LEDs->DATA |= 0x2;
  1026b4:	d0a00617 	ldw	r2,-32744(gp)
  1026b8:	d0e00617 	ldw	r3,-32744(gp)
  1026bc:	18c00017 	ldw	r3,0(r3)
  1026c0:	18c00094 	ori	r3,r3,2
  1026c4:	10c00015 	stw	r3,0(r2)

	//Bring up the HEX display counter
	I printf("[TED.c]\tInitialize Hex display\n");
	if (hexInit(HEX) != SUCCESS) HALT
  1026c8:	d0a00317 	ldw	r2,-32756(gp)
  1026cc:	1009883a 	mov	r4,r2
  1026d0:	0101abc0 	call	101abc <hexInit>
  1026d4:	10000526 	beq	r2,zero,1026ec <main+0x224>
  1026d8:	01000474 	movhi	r4,17
  1026dc:	21195404 	addi	r4,r4,25936
  1026e0:	01048740 	call	104874 <puts>
  1026e4:	00800044 	movi	r2,1
  1026e8:	0004cd06 	br	103a20 <main+0x1558>
	HEX->redFrames = 0;
  1026ec:	d0a00317 	ldw	r2,-32756(gp)
  1026f0:	1000008d 	sth	zero,2(r2)
	HEX->blackFrames = 0;
  1026f4:	d0a00317 	ldw	r2,-32756(gp)
  1026f8:	1000000d 	sth	zero,0(r2)
	LEDs->DATA |= 0x4;
  1026fc:	d0a00617 	ldw	r2,-32744(gp)
  102700:	d0e00617 	ldw	r3,-32744(gp)
  102704:	18c00017 	ldw	r3,0(r3)
  102708:	18c00114 	ori	r3,r3,4
  10270c:	10c00015 	stw	r3,0(r2)

	//Bring up the LCD
	I printf("[TED.c]\tInitialize LCD\n");
	char* string[20];

	LCD = alt_up_character_lcd_open_dev("/dev/lcd");
  102710:	01000474 	movhi	r4,17
  102714:	21195804 	addi	r4,r4,25952
  102718:	01151bc0 	call	1151bc <alt_up_character_lcd_open_dev>
  10271c:	d0a71e15 	stw	r2,-25480(gp)
	alt_up_character_lcd_init (LCD);
  102720:	d0a71e17 	ldw	r2,-25480(gp)
  102724:	1009883a 	mov	r4,r2
  102728:	01151ac0 	call	1151ac <alt_up_character_lcd_init>
	alt_up_character_lcd_cursor_off(LCD);
  10272c:	d0a71e17 	ldw	r2,-25480(gp)
  102730:	1009883a 	mov	r4,r2
  102734:	011535c0 	call	11535c <alt_up_character_lcd_cursor_off>
	sprintf(string, "%d.%d.%d.%d", IP_SRC_ADDRESS1);
  102738:	e0be7604 	addi	r2,fp,-1576
  10273c:	d8000015 	stw	zero,0(sp)
  102740:	00c00144 	movi	r3,5
  102744:	d8c00115 	stw	r3,4(sp)
  102748:	1009883a 	mov	r4,r2
  10274c:	01400474 	movhi	r5,17
  102750:	29595b04 	addi	r5,r5,25964
  102754:	01802b04 	movi	r6,172
  102758:	01c00404 	movi	r7,16
  10275c:	01049440 	call	104944 <sprintf>
	alt_up_character_lcd_string(LCD, string);
  102760:	d0e71e17 	ldw	r3,-25480(gp)
  102764:	e0be7604 	addi	r2,fp,-1576
  102768:	1809883a 	mov	r4,r3
  10276c:	100b883a 	mov	r5,r2
  102770:	01151e80 	call	1151e8 <alt_up_character_lcd_string>
	alt_up_character_lcd_set_cursor_pos(LCD, 0, 1);
  102774:	d0a71e17 	ldw	r2,-25480(gp)
  102778:	1009883a 	mov	r4,r2
  10277c:	000b883a 	mov	r5,zero
  102780:	01800044 	movi	r6,1
  102784:	011523c0 	call	11523c <alt_up_character_lcd_set_cursor_pos>
	sprintf(string, "%d.%d.%d.%d", IP_DST_ADDRESS1);
  102788:	e0be7604 	addi	r2,fp,-1576
  10278c:	d8000015 	stw	zero,0(sp)
  102790:	00c00144 	movi	r3,5
  102794:	d8c00115 	stw	r3,4(sp)
  102798:	1009883a 	mov	r4,r2
  10279c:	01400474 	movhi	r5,17
  1027a0:	29595b04 	addi	r5,r5,25964
  1027a4:	01800284 	movi	r6,10
  1027a8:	000f883a 	mov	r7,zero
  1027ac:	01049440 	call	104944 <sprintf>
	alt_up_character_lcd_string(LCD, string);
  1027b0:	d0e71e17 	ldw	r3,-25480(gp)
  1027b4:	e0be7604 	addi	r2,fp,-1576
  1027b8:	1809883a 	mov	r4,r3
  1027bc:	100b883a 	mov	r5,r2
  1027c0:	01151e80 	call	1151e8 <alt_up_character_lcd_string>
	LEDs->DATA |= 0x8;
  1027c4:	d0a00617 	ldw	r2,-32744(gp)
  1027c8:	d0e00617 	ldw	r3,-32744(gp)
  1027cc:	18c00017 	ldw	r3,0(r3)
  1027d0:	18c00214 	ori	r3,r3,8
  1027d4:	10c00015 	stw	r3,0(r2)

	//Bring up the Red Interface
	I printf("[TED.c]\tInitialize Red Interface MAC\n");
	// Initialize the MAC address
	Red_Interface->mac_0 = 0x116E6001;
  1027d8:	d0a00117 	ldw	r2,-32764(gp)
  1027dc:	00c45bb4 	movhi	r3,4462
  1027e0:	18d80044 	addi	r3,r3,24577
  1027e4:	10c00315 	stw	r3,12(r2)
	Red_Interface->mac_1 = 0x00000F02;
  1027e8:	d0a00117 	ldw	r2,-32764(gp)
  1027ec:	00c3c084 	movi	r3,3842
  1027f0:	10c00415 	stw	r3,16(r2)
	// Specify the addresses of the PHY devices to be accessed through MDIO interface
	Red_Interface->mdio_addr0 = 0x10;
  1027f4:	d0a00117 	ldw	r2,-32764(gp)
  1027f8:	00c00404 	movi	r3,16
  1027fc:	10c00f15 	stw	r3,60(r2)
	Red_Interface->mdio_addr1 = 0x10;
  102800:	d0a00117 	ldw	r2,-32764(gp)
  102804:	00c00404 	movi	r3,16
  102808:	10c01015 	stw	r3,64(r2)
	if (macInit(Red_Interface, ((Switches->DATA) >> RED_OFFSET)& 0x3F) != SUCCESS) HALT
  10280c:	d0e00117 	ldw	r3,-32764(gp)
  102810:	d0a00217 	ldw	r2,-32760(gp)
  102814:	10800017 	ldw	r2,0(r2)
  102818:	1004d1ba 	srli	r2,r2,6
  10281c:	10803fcc 	andi	r2,r2,255
  102820:	10800fcc 	andi	r2,r2,63
  102824:	1809883a 	mov	r4,r3
  102828:	100b883a 	mov	r5,r2
  10282c:	0101c880 	call	101c88 <macInit>
  102830:	10803fcc 	andi	r2,r2,255
  102834:	10000526 	beq	r2,zero,10284c <main+0x384>
  102838:	01000474 	movhi	r4,17
  10283c:	21195404 	addi	r4,r4,25936
  102840:	01048740 	call	104874 <puts>
  102844:	00800044 	movi	r2,1
  102848:	00047506 	br	103a20 <main+0x1558>
	macPrintRegs(Red_Interface);
  10284c:	d0a00117 	ldw	r2,-32764(gp)
  102850:	1009883a 	mov	r4,r2
  102854:	010223c0 	call	10223c <macPrintRegs>
	Red_Interface->pause_quant = 0xffff;
  102858:	d0a00117 	ldw	r2,-32764(gp)
  10285c:	00ffffd4 	movui	r3,65535
  102860:	10c00615 	stw	r3,24(r2)
	Red_Interface->rx_section_empty = 4096 - 16;
  102864:	d0a00117 	ldw	r2,-32764(gp)
  102868:	00c3fc04 	movi	r3,4080
  10286c:	10c00715 	stw	r3,28(r2)
	Red_Interface->rx_section_full = 0;
  102870:	d0a00117 	ldw	r2,-32764(gp)
  102874:	10000815 	stw	zero,32(r2)
	Red_Interface->tx_section_empty = 2048 - 16;
  102878:	d0a00117 	ldw	r2,-32764(gp)
  10287c:	00c1fc04 	movi	r3,2032
  102880:	10c00915 	stw	r3,36(r2)
	Red_Interface->tx_section_full = 0;
  102884:	d0a00117 	ldw	r2,-32764(gp)
  102888:	10000a15 	stw	zero,40(r2)
	Red_Interface->rx_almost_empty = 8;
  10288c:	d0a00117 	ldw	r2,-32764(gp)
  102890:	00c00204 	movi	r3,8
  102894:	10c00b15 	stw	r3,44(r2)
	Red_Interface->rx_almost_full = 8;
  102898:	d0a00117 	ldw	r2,-32764(gp)
  10289c:	00c00204 	movi	r3,8
  1028a0:	10c00c15 	stw	r3,48(r2)
	Red_Interface->tx_almost_empty = 8;
  1028a4:	d0a00117 	ldw	r2,-32764(gp)
  1028a8:	00c00204 	movi	r3,8
  1028ac:	10c00d15 	stw	r3,52(r2)
	Red_Interface->tx_almost_full = 8;
  1028b0:	d0a00117 	ldw	r2,-32764(gp)
  1028b4:	00c00204 	movi	r3,8
  1028b8:	10c00e15 	stw	r3,56(r2)
	Red_Interface->holdoff_quant = 0x00ff;
  1028bc:	d0a00117 	ldw	r2,-32764(gp)
  1028c0:	00c03fc4 	movi	r3,255
  1028c4:	10c01115 	stw	r3,68(r2)
	I printf("RX Almost full 0x%.4x\n",Red_Interface->rx_almost_full);
	I printf("TX Almost Empty 0x%.4x\n",Red_Interface->tx_almost_empty);
	I printf("TX Almost full 0x%.4x\n",Red_Interface->tx_almost_full);

	// Open the RedRx DMA receive device
	RedRx = alt_avalon_sgdma_open ("/dev/red_rx");
  1028c8:	01000474 	movhi	r4,17
  1028cc:	21195e04 	addi	r4,r4,25976
  1028d0:	0114c5c0 	call	114c5c <alt_avalon_sgdma_open>
  1028d4:	d0a71d15 	stw	r2,-25484(gp)
	if (RedRx == NULL) {
  1028d8:	d0a71d17 	ldw	r2,-25484(gp)
  1028dc:	1000021e 	bne	r2,zero,1028e8 <main+0x420>
		I printf("Error: could not open RedRx DMA receive device\n");
		return -1;
  1028e0:	00bfffc4 	movi	r2,-1
  1028e4:	00044e06 	br	103a20 <main+0x1558>
	} else I printf("Opened RedRx DMA receive device\n");
	// Open the RedTx DMA transmit device
	RedTx = alt_avalon_sgdma_open ("/dev/red_tx");
  1028e8:	01000474 	movhi	r4,17
  1028ec:	21196104 	addi	r4,r4,25988
  1028f0:	0114c5c0 	call	114c5c <alt_avalon_sgdma_open>
  1028f4:	d0a71a15 	stw	r2,-25496(gp)
	if (RedTx == NULL) {
  1028f8:	d0a71a17 	ldw	r2,-25496(gp)
  1028fc:	1000021e 	bne	r2,zero,102908 <main+0x440>
		I printf("Error: could not open RedTx DMA transmit device\n");
		return -1;
  102900:	00bfffc4 	movi	r2,-1
  102904:	00044606 	br	103a20 <main+0x1558>
	} else I printf("Opened RedTx DMA transmit device\n");
	for (i = 0; i < NUMBER_BUFFERS-1; i++){
  102908:	e03e5e15 	stw	zero,-1672(fp)
  10290c:	00001d06 	br	102984 <main+0x4bc>
		red_rx_descriptor[i].next = &red_rx_descriptor[i+1];
  102910:	e0be5e17 	ldw	r2,-1672(fp)
  102914:	10800044 	addi	r2,r2,1
  102918:	1006917a 	slli	r3,r2,5
  10291c:	00800034 	movhi	r2,0
  102920:	10800004 	addi	r2,r2,0
  102924:	1887883a 	add	r3,r3,r2
  102928:	01000034 	movhi	r4,0
  10292c:	21000004 	addi	r4,r4,0
  102930:	e0be5e17 	ldw	r2,-1672(fp)
  102934:	1004917a 	slli	r2,r2,5
  102938:	2085883a 	add	r2,r4,r2
  10293c:	10800404 	addi	r2,r2,16
  102940:	10c00015 	stw	r3,0(r2)
		red_tx_descriptor[i].next = &red_tx_descriptor[i+1];
  102944:	e0be5e17 	ldw	r2,-1672(fp)
  102948:	10800044 	addi	r2,r2,1
  10294c:	1006917a 	slli	r3,r2,5
  102950:	00800034 	movhi	r2,0
  102954:	1080c004 	addi	r2,r2,768
  102958:	1887883a 	add	r3,r3,r2
  10295c:	01000034 	movhi	r4,0
  102960:	2100c004 	addi	r4,r4,768
  102964:	e0be5e17 	ldw	r2,-1672(fp)
  102968:	1004917a 	slli	r2,r2,5
  10296c:	2085883a 	add	r2,r4,r2
  102970:	10800404 	addi	r2,r2,16
  102974:	10c00015 	stw	r3,0(r2)
	RedTx = alt_avalon_sgdma_open ("/dev/red_tx");
	if (RedTx == NULL) {
		I printf("Error: could not open RedTx DMA transmit device\n");
		return -1;
	} else I printf("Opened RedTx DMA transmit device\n");
	for (i = 0; i < NUMBER_BUFFERS-1; i++){
  102978:	e0be5e17 	ldw	r2,-1672(fp)
  10297c:	10800044 	addi	r2,r2,1
  102980:	e0be5e15 	stw	r2,-1672(fp)
  102984:	e0be5e17 	ldw	r2,-1672(fp)
  102988:	108005d0 	cmplti	r2,r2,23
  10298c:	103fe01e 	bne	r2,zero,102910 <black_to_red_frame+0xfe102910>
		red_rx_descriptor[i].next = &red_rx_descriptor[i+1];
		red_tx_descriptor[i].next = &red_tx_descriptor[i+1];
	}
	red_rx_descriptor[NUMBER_BUFFERS-1].next = &red_rx_descriptor[0];
  102990:	00800034 	movhi	r2,0
  102994:	10800004 	addi	r2,r2,0
  102998:	00c00034 	movhi	r3,0
  10299c:	18c00004 	addi	r3,r3,0
  1029a0:	10c0bc15 	stw	r3,752(r2)
	red_tx_descriptor[NUMBER_BUFFERS-1].next = &red_tx_descriptor[0];
  1029a4:	00800034 	movhi	r2,0
  1029a8:	1080c004 	addi	r2,r2,768
  1029ac:	00c00034 	movhi	r3,0
  1029b0:	18c0c004 	addi	r3,r3,768
  1029b4:	10c0bc15 	stw	r3,752(r2)
	//Done With the Red Interface!


	LEDs->DATA |= 0x10;
  1029b8:	d0a00617 	ldw	r2,-32744(gp)
  1029bc:	d0e00617 	ldw	r3,-32744(gp)
  1029c0:	18c00017 	ldw	r3,0(r3)
  1029c4:	18c00414 	ori	r3,r3,16
  1029c8:	10c00015 	stw	r3,0(r2)

	//Bring up the Black interface
	I printf("[TED.c]\tInitialize Black Interface MAC\n");
	// Initialize the MAC address
	Black_Interface->mac_0 = 0x116E6001;
  1029cc:	d0a00017 	ldw	r2,-32768(gp)
  1029d0:	00c45bb4 	movhi	r3,4462
  1029d4:	18d80044 	addi	r3,r3,24577
  1029d8:	10c00315 	stw	r3,12(r2)
	Black_Interface->mac_1 = 0x00000F02;
  1029dc:	d0a00017 	ldw	r2,-32768(gp)
  1029e0:	00c3c084 	movi	r3,3842
  1029e4:	10c00415 	stw	r3,16(r2)
	// Specify the addresses of the PHY devices to be accessed through MDIO interface
	Black_Interface->mdio_addr0 = 0x11;
  1029e8:	d0a00017 	ldw	r2,-32768(gp)
  1029ec:	00c00444 	movi	r3,17
  1029f0:	10c00f15 	stw	r3,60(r2)
	Black_Interface->mdio_addr1 = 0x11;
  1029f4:	d0a00017 	ldw	r2,-32768(gp)
  1029f8:	00c00444 	movi	r3,17
  1029fc:	10c01015 	stw	r3,64(r2)
	if (macInit(Black_Interface, ((Switches->DATA) >> BLACK_OFFSET)& 0x3F) != SUCCESS) HALT
  102a00:	d0e00017 	ldw	r3,-32768(gp)
  102a04:	d0a00217 	ldw	r2,-32760(gp)
  102a08:	10800017 	ldw	r2,0(r2)
  102a0c:	10803fcc 	andi	r2,r2,255
  102a10:	10800fcc 	andi	r2,r2,63
  102a14:	1809883a 	mov	r4,r3
  102a18:	100b883a 	mov	r5,r2
  102a1c:	0101c880 	call	101c88 <macInit>
  102a20:	10803fcc 	andi	r2,r2,255
  102a24:	10000526 	beq	r2,zero,102a3c <main+0x574>
  102a28:	01000474 	movhi	r4,17
  102a2c:	21195404 	addi	r4,r4,25936
  102a30:	01048740 	call	104874 <puts>
  102a34:	00800044 	movi	r2,1
  102a38:	0003f906 	br	103a20 <main+0x1558>
	macPrintRegs(Black_Interface);
  102a3c:	d0a00017 	ldw	r2,-32768(gp)
  102a40:	1009883a 	mov	r4,r2
  102a44:	010223c0 	call	10223c <macPrintRegs>
	Black_Interface->pause_quant = 0xffff;
  102a48:	d0a00017 	ldw	r2,-32768(gp)
  102a4c:	00ffffd4 	movui	r3,65535
  102a50:	10c00615 	stw	r3,24(r2)
	Black_Interface->rx_section_empty = 4096 - 16;
  102a54:	d0a00017 	ldw	r2,-32768(gp)
  102a58:	00c3fc04 	movi	r3,4080
  102a5c:	10c00715 	stw	r3,28(r2)
	Black_Interface->rx_section_full = 0;
  102a60:	d0a00017 	ldw	r2,-32768(gp)
  102a64:	10000815 	stw	zero,32(r2)
	Black_Interface->tx_section_empty = 2048 - 16;
  102a68:	d0a00017 	ldw	r2,-32768(gp)
  102a6c:	00c1fc04 	movi	r3,2032
  102a70:	10c00915 	stw	r3,36(r2)
	Black_Interface->tx_section_full = 0;
  102a74:	d0a00017 	ldw	r2,-32768(gp)
  102a78:	10000a15 	stw	zero,40(r2)
	Black_Interface->rx_almost_empty = 8;
  102a7c:	d0a00017 	ldw	r2,-32768(gp)
  102a80:	00c00204 	movi	r3,8
  102a84:	10c00b15 	stw	r3,44(r2)
	Black_Interface->rx_almost_full = 8;
  102a88:	d0a00017 	ldw	r2,-32768(gp)
  102a8c:	00c00204 	movi	r3,8
  102a90:	10c00c15 	stw	r3,48(r2)
	Black_Interface->tx_almost_empty = 8;
  102a94:	d0a00017 	ldw	r2,-32768(gp)
  102a98:	00c00204 	movi	r3,8
  102a9c:	10c00d15 	stw	r3,52(r2)
	Black_Interface->tx_almost_full = 8;
  102aa0:	d0a00017 	ldw	r2,-32768(gp)
  102aa4:	00c00204 	movi	r3,8
  102aa8:	10c00e15 	stw	r3,56(r2)
	Black_Interface->holdoff_quant = 0x00ff;
  102aac:	d0a00017 	ldw	r2,-32768(gp)
  102ab0:	00c03fc4 	movi	r3,255
  102ab4:	10c01115 	stw	r3,68(r2)
	I printf("RX Almost Empty 0x%.4x\n",Black_Interface->rx_almost_empty);
	I printf("RX Almost full 0x%.4x\n",Black_Interface->rx_almost_full);
	I printf("TX Almost Empty 0x%.4x\n",Black_Interface->tx_almost_empty);
	I printf("TX Almost full 0x%.4x\n",Black_Interface->tx_almost_full);
	// Open the BlackRx DMA receive device
	BlackRx = alt_avalon_sgdma_open ("/dev/black_rx");
  102ab8:	01000474 	movhi	r4,17
  102abc:	21196404 	addi	r4,r4,26000
  102ac0:	0114c5c0 	call	114c5c <alt_avalon_sgdma_open>
  102ac4:	d0a71c15 	stw	r2,-25488(gp)
	if (BlackRx == NULL) {
  102ac8:	d0a71c17 	ldw	r2,-25488(gp)
  102acc:	1000021e 	bne	r2,zero,102ad8 <main+0x610>
		return -1;
  102ad0:	00bfffc4 	movi	r2,-1
  102ad4:	0003d206 	br	103a20 <main+0x1558>
	} else I printf("Opened BlackRx DMA receive device\n");
	// Open the BlackTx DMA transmit device
	BlackTx = alt_avalon_sgdma_open ("/dev/black_tx");
  102ad8:	01000474 	movhi	r4,17
  102adc:	21196804 	addi	r4,r4,26016
  102ae0:	0114c5c0 	call	114c5c <alt_avalon_sgdma_open>
  102ae4:	d0a71b15 	stw	r2,-25492(gp)
	if (BlackTx == NULL) {
  102ae8:	d0a71b17 	ldw	r2,-25492(gp)
  102aec:	1000021e 	bne	r2,zero,102af8 <main+0x630>

		return -1;
  102af0:	00bfffc4 	movi	r2,-1
  102af4:	0003ca06 	br	103a20 <main+0x1558>
	} else I printf("Opened BlackTx DMA transmit device\n");
	for (i = 0; i < NUMBER_BUFFERS-1; i++){
  102af8:	e03e5e15 	stw	zero,-1672(fp)
  102afc:	00001d06 	br	102b74 <main+0x6ac>
		black_rx_descriptor[i].next = &black_rx_descriptor[i+1];
  102b00:	e0be5e17 	ldw	r2,-1672(fp)
  102b04:	10800044 	addi	r2,r2,1
  102b08:	1006917a 	slli	r3,r2,5
  102b0c:	00800034 	movhi	r2,0
  102b10:	10818004 	addi	r2,r2,1536
  102b14:	1887883a 	add	r3,r3,r2
  102b18:	01000034 	movhi	r4,0
  102b1c:	21018004 	addi	r4,r4,1536
  102b20:	e0be5e17 	ldw	r2,-1672(fp)
  102b24:	1004917a 	slli	r2,r2,5
  102b28:	2085883a 	add	r2,r4,r2
  102b2c:	10800404 	addi	r2,r2,16
  102b30:	10c00015 	stw	r3,0(r2)
		black_tx_descriptor[i].next = &black_tx_descriptor[i+1];
  102b34:	e0be5e17 	ldw	r2,-1672(fp)
  102b38:	10800044 	addi	r2,r2,1
  102b3c:	1006917a 	slli	r3,r2,5
  102b40:	00800034 	movhi	r2,0
  102b44:	10824004 	addi	r2,r2,2304
  102b48:	1887883a 	add	r3,r3,r2
  102b4c:	01000034 	movhi	r4,0
  102b50:	21024004 	addi	r4,r4,2304
  102b54:	e0be5e17 	ldw	r2,-1672(fp)
  102b58:	1004917a 	slli	r2,r2,5
  102b5c:	2085883a 	add	r2,r4,r2
  102b60:	10800404 	addi	r2,r2,16
  102b64:	10c00015 	stw	r3,0(r2)
	BlackTx = alt_avalon_sgdma_open ("/dev/black_tx");
	if (BlackTx == NULL) {

		return -1;
	} else I printf("Opened BlackTx DMA transmit device\n");
	for (i = 0; i < NUMBER_BUFFERS-1; i++){
  102b68:	e0be5e17 	ldw	r2,-1672(fp)
  102b6c:	10800044 	addi	r2,r2,1
  102b70:	e0be5e15 	stw	r2,-1672(fp)
  102b74:	e0be5e17 	ldw	r2,-1672(fp)
  102b78:	108005d0 	cmplti	r2,r2,23
  102b7c:	103fe01e 	bne	r2,zero,102b00 <black_to_red_frame+0xfe102b00>
		black_rx_descriptor[i].next = &black_rx_descriptor[i+1];
		black_tx_descriptor[i].next = &black_tx_descriptor[i+1];
	}
	black_rx_descriptor[NUMBER_BUFFERS-1].next = &black_rx_descriptor[0];
  102b80:	00800034 	movhi	r2,0
  102b84:	10818004 	addi	r2,r2,1536
  102b88:	00c00034 	movhi	r3,0
  102b8c:	18c18004 	addi	r3,r3,1536
  102b90:	10c0bc15 	stw	r3,752(r2)
	black_tx_descriptor[NUMBER_BUFFERS-1].next = &black_tx_descriptor[0];
  102b94:	00800034 	movhi	r2,0
  102b98:	10824004 	addi	r2,r2,2304
  102b9c:	00c00034 	movhi	r3,0
  102ba0:	18c24004 	addi	r3,r3,2304
  102ba4:	10c0bc15 	stw	r3,752(r2)
	//Done With the Black Interface!
	LEDs->DATA |= 0x20;
  102ba8:	d0a00617 	ldw	r2,-32744(gp)
  102bac:	d0e00617 	ldw	r3,-32744(gp)
  102bb0:	18c00017 	ldw	r3,0(r3)
  102bb4:	18c00814 	ori	r3,r3,32
  102bb8:	10c00015 	stw	r3,0(r2)
	//Linked list initialization
	struct frame_list availableListRed, rxListRed, inspectListRed, controlListRed, encryptListRed, readyTxListRed, txListRed;
	struct frame_list availableListBlack, rxListBlack, inspectListBlack, controlListBlack, encryptListBlack, readyTxListBlack, txListBlack;
	struct list_head *pos, *q;
	struct frame_list *tmp;
	INIT_LIST_HEAD(&availableListRed.list);
  102bbc:	e0be8a04 	addi	r2,fp,-1496
  102bc0:	10800404 	addi	r2,r2,16
  102bc4:	e0be8e15 	stw	r2,-1480(fp)
  102bc8:	e0be8a04 	addi	r2,fp,-1496
  102bcc:	10800404 	addi	r2,r2,16
  102bd0:	e0be8f15 	stw	r2,-1476(fp)
	INIT_LIST_HEAD(&rxListRed.list);
  102bd4:	e0be9004 	addi	r2,fp,-1472
  102bd8:	10800404 	addi	r2,r2,16
  102bdc:	e0be9415 	stw	r2,-1456(fp)
  102be0:	e0be9004 	addi	r2,fp,-1472
  102be4:	10800404 	addi	r2,r2,16
  102be8:	e0be9515 	stw	r2,-1452(fp)
	INIT_LIST_HEAD(&inspectListRed.list);
  102bec:	e0be9604 	addi	r2,fp,-1448
  102bf0:	10800404 	addi	r2,r2,16
  102bf4:	e0be9a15 	stw	r2,-1432(fp)
  102bf8:	e0be9604 	addi	r2,fp,-1448
  102bfc:	10800404 	addi	r2,r2,16
  102c00:	e0be9b15 	stw	r2,-1428(fp)
	INIT_LIST_HEAD(&controlListRed.list);
  102c04:	e0be9c04 	addi	r2,fp,-1424
  102c08:	10800404 	addi	r2,r2,16
  102c0c:	e0bea015 	stw	r2,-1408(fp)
  102c10:	e0be9c04 	addi	r2,fp,-1424
  102c14:	10800404 	addi	r2,r2,16
  102c18:	e0bea115 	stw	r2,-1404(fp)
	INIT_LIST_HEAD(&encryptListRed.list);
  102c1c:	e0bea204 	addi	r2,fp,-1400
  102c20:	10800404 	addi	r2,r2,16
  102c24:	e0bea615 	stw	r2,-1384(fp)
  102c28:	e0bea204 	addi	r2,fp,-1400
  102c2c:	10800404 	addi	r2,r2,16
  102c30:	e0bea715 	stw	r2,-1380(fp)
	INIT_LIST_HEAD(&readyTxListRed.list);
  102c34:	e0bea804 	addi	r2,fp,-1376
  102c38:	10800404 	addi	r2,r2,16
  102c3c:	e0beac15 	stw	r2,-1360(fp)
  102c40:	e0bea804 	addi	r2,fp,-1376
  102c44:	10800404 	addi	r2,r2,16
  102c48:	e0bead15 	stw	r2,-1356(fp)
	INIT_LIST_HEAD(&txListRed.list);
  102c4c:	e0beae04 	addi	r2,fp,-1352
  102c50:	10800404 	addi	r2,r2,16
  102c54:	e0beb215 	stw	r2,-1336(fp)
  102c58:	e0beae04 	addi	r2,fp,-1352
  102c5c:	10800404 	addi	r2,r2,16
  102c60:	e0beb315 	stw	r2,-1332(fp)
	INIT_LIST_HEAD(&availableListBlack.list);
  102c64:	e0beb404 	addi	r2,fp,-1328
  102c68:	10800404 	addi	r2,r2,16
  102c6c:	e0beb815 	stw	r2,-1312(fp)
  102c70:	e0beb404 	addi	r2,fp,-1328
  102c74:	10800404 	addi	r2,r2,16
  102c78:	e0beb915 	stw	r2,-1308(fp)
	INIT_LIST_HEAD(&rxListBlack.list);
  102c7c:	e0beba04 	addi	r2,fp,-1304
  102c80:	10800404 	addi	r2,r2,16
  102c84:	e0bebe15 	stw	r2,-1288(fp)
  102c88:	e0beba04 	addi	r2,fp,-1304
  102c8c:	10800404 	addi	r2,r2,16
  102c90:	e0bebf15 	stw	r2,-1284(fp)
	INIT_LIST_HEAD(&inspectListBlack.list);
  102c94:	e0bec004 	addi	r2,fp,-1280
  102c98:	10800404 	addi	r2,r2,16
  102c9c:	e0bec415 	stw	r2,-1264(fp)
  102ca0:	e0bec004 	addi	r2,fp,-1280
  102ca4:	10800404 	addi	r2,r2,16
  102ca8:	e0bec515 	stw	r2,-1260(fp)
	INIT_LIST_HEAD(&encryptListBlack.list);
  102cac:	e0becc04 	addi	r2,fp,-1232
  102cb0:	10800404 	addi	r2,r2,16
  102cb4:	e0bed015 	stw	r2,-1216(fp)
  102cb8:	e0becc04 	addi	r2,fp,-1232
  102cbc:	10800404 	addi	r2,r2,16
  102cc0:	e0bed115 	stw	r2,-1212(fp)
	INIT_LIST_HEAD(&readyTxListBlack.list);
  102cc4:	e0bed204 	addi	r2,fp,-1208
  102cc8:	10800404 	addi	r2,r2,16
  102ccc:	e0bed615 	stw	r2,-1192(fp)
  102cd0:	e0bed204 	addi	r2,fp,-1208
  102cd4:	10800404 	addi	r2,r2,16
  102cd8:	e0bed715 	stw	r2,-1188(fp)
	INIT_LIST_HEAD(&txListBlack.list);
  102cdc:	e0bed804 	addi	r2,fp,-1184
  102ce0:	10800404 	addi	r2,r2,16
  102ce4:	e0bedc15 	stw	r2,-1168(fp)
  102ce8:	e0bed804 	addi	r2,fp,-1184
  102cec:	10800404 	addi	r2,r2,16
  102cf0:	e0bedd15 	stw	r2,-1164(fp)
	//Spool up the available lists
	struct frame_list temp[NUMBER_BUFFERS*2];
	for(i = 0; i < NUMBER_BUFFERS; i++){
  102cf4:	e03e5e15 	stw	zero,-1672(fp)
  102cf8:	00006d06 	br	102eb0 <main+0x9e8>
		temp[i].frameStart			= &(red_to_black_frame[i]);
  102cfc:	e13e5e17 	ldw	r4,-1672(fp)
  102d00:	01417c04 	movi	r5,1520
  102d04:	0103f1c0 	call	103f1c <__mulsi3>
  102d08:	1007883a 	mov	r3,r2
  102d0c:	00804034 	movhi	r2,256
  102d10:	10800004 	addi	r2,r2,0
  102d14:	18a1883a 	add	r16,r3,r2
  102d18:	e0be5e17 	ldw	r2,-1672(fp)
  102d1c:	1009883a 	mov	r4,r2
  102d20:	01400604 	movi	r5,24
  102d24:	0103f1c0 	call	103f1c <__mulsi3>
  102d28:	e0fe5e04 	addi	r3,fp,-1672
  102d2c:	1885883a 	add	r2,r3,r2
  102d30:	10808004 	addi	r2,r2,512
  102d34:	14000015 	stw	r16,0(r2)
		temp[i].frameLength 		= 0;
  102d38:	e0be5e17 	ldw	r2,-1672(fp)
  102d3c:	1009883a 	mov	r4,r2
  102d40:	01400604 	movi	r5,24
  102d44:	0103f1c0 	call	103f1c <__mulsi3>
  102d48:	e0fe5e04 	addi	r3,fp,-1672
  102d4c:	1885883a 	add	r2,r3,r2
  102d50:	10808104 	addi	r2,r2,516
  102d54:	10000015 	stw	zero,0(r2)
		temp[i].payloadLength 		= 0;
  102d58:	e0be5e17 	ldw	r2,-1672(fp)
  102d5c:	1009883a 	mov	r4,r2
  102d60:	01400604 	movi	r5,24
  102d64:	0103f1c0 	call	103f1c <__mulsi3>
  102d68:	e0fe5e04 	addi	r3,fp,-1672
  102d6c:	1885883a 	add	r2,r3,r2
  102d70:	10808304 	addi	r2,r2,524
  102d74:	10000015 	stw	zero,0(r2)
		temp[i].payloadStart		= 0;
  102d78:	e0be5e17 	ldw	r2,-1672(fp)
  102d7c:	1009883a 	mov	r4,r2
  102d80:	01400604 	movi	r5,24
  102d84:	0103f1c0 	call	103f1c <__mulsi3>
  102d88:	e0fe5e04 	addi	r3,fp,-1672
  102d8c:	1885883a 	add	r2,r3,r2
  102d90:	10808204 	addi	r2,r2,520
  102d94:	10000015 	stw	zero,0(r2)

		temp[i+NUMBER_BUFFERS].frameStart		= &(black_to_red_frame[i]);
  102d98:	e0be5e17 	ldw	r2,-1672(fp)
  102d9c:	14400604 	addi	r17,r2,24
  102da0:	e13e5e17 	ldw	r4,-1672(fp)
  102da4:	01417c04 	movi	r5,1520
  102da8:	0103f1c0 	call	103f1c <__mulsi3>
  102dac:	1007883a 	mov	r3,r2
  102db0:	00808034 	movhi	r2,512
  102db4:	10800004 	addi	r2,r2,0
  102db8:	18a1883a 	add	r16,r3,r2
  102dbc:	8809883a 	mov	r4,r17
  102dc0:	01400604 	movi	r5,24
  102dc4:	0103f1c0 	call	103f1c <__mulsi3>
  102dc8:	e0fe5e04 	addi	r3,fp,-1672
  102dcc:	1885883a 	add	r2,r3,r2
  102dd0:	10808004 	addi	r2,r2,512
  102dd4:	14000015 	stw	r16,0(r2)
		temp[i+NUMBER_BUFFERS].frameLength 		= 0;
  102dd8:	e0be5e17 	ldw	r2,-1672(fp)
  102ddc:	10800604 	addi	r2,r2,24
  102de0:	1009883a 	mov	r4,r2
  102de4:	01400604 	movi	r5,24
  102de8:	0103f1c0 	call	103f1c <__mulsi3>
  102dec:	e0fe5e04 	addi	r3,fp,-1672
  102df0:	1885883a 	add	r2,r3,r2
  102df4:	10808104 	addi	r2,r2,516
  102df8:	10000015 	stw	zero,0(r2)
		temp[i+NUMBER_BUFFERS].payloadLength 	= 0;
  102dfc:	e0be5e17 	ldw	r2,-1672(fp)
  102e00:	10800604 	addi	r2,r2,24
  102e04:	1009883a 	mov	r4,r2
  102e08:	01400604 	movi	r5,24
  102e0c:	0103f1c0 	call	103f1c <__mulsi3>
  102e10:	e0fe5e04 	addi	r3,fp,-1672
  102e14:	1885883a 	add	r2,r3,r2
  102e18:	10808304 	addi	r2,r2,524
  102e1c:	10000015 	stw	zero,0(r2)
		temp[i+NUMBER_BUFFERS].payloadStart		= 0;
  102e20:	e0be5e17 	ldw	r2,-1672(fp)
  102e24:	10800604 	addi	r2,r2,24
  102e28:	1009883a 	mov	r4,r2
  102e2c:	01400604 	movi	r5,24
  102e30:	0103f1c0 	call	103f1c <__mulsi3>
  102e34:	e0fe5e04 	addi	r3,fp,-1672
  102e38:	1885883a 	add	r2,r3,r2
  102e3c:	10808204 	addi	r2,r2,520
  102e40:	10000015 	stw	zero,0(r2)

		// add the new items 'temp' to the list of items in the availableList
		list_add_tail(&(temp[i].list), &(availableListRed.list));
  102e44:	e43ede04 	addi	r16,fp,-1160
  102e48:	e13e5e17 	ldw	r4,-1672(fp)
  102e4c:	01400604 	movi	r5,24
  102e50:	0103f1c0 	call	103f1c <__mulsi3>
  102e54:	10800404 	addi	r2,r2,16
  102e58:	8087883a 	add	r3,r16,r2
  102e5c:	e0be8a04 	addi	r2,fp,-1496
  102e60:	10800404 	addi	r2,r2,16
  102e64:	1809883a 	mov	r4,r3
  102e68:	100b883a 	mov	r5,r2
  102e6c:	01023f40 	call	1023f4 <list_add_tail>
		list_add_tail(&(temp[i+NUMBER_BUFFERS].list), &(availableListBlack.list));
  102e70:	e0be5e17 	ldw	r2,-1672(fp)
  102e74:	10800604 	addi	r2,r2,24
  102e78:	e43ede04 	addi	r16,fp,-1160
  102e7c:	1009883a 	mov	r4,r2
  102e80:	01400604 	movi	r5,24
  102e84:	0103f1c0 	call	103f1c <__mulsi3>
  102e88:	10800404 	addi	r2,r2,16
  102e8c:	8087883a 	add	r3,r16,r2
  102e90:	e0beb404 	addi	r2,fp,-1328
  102e94:	10800404 	addi	r2,r2,16
  102e98:	1809883a 	mov	r4,r3
  102e9c:	100b883a 	mov	r5,r2
  102ea0:	01023f40 	call	1023f4 <list_add_tail>
	INIT_LIST_HEAD(&encryptListBlack.list);
	INIT_LIST_HEAD(&readyTxListBlack.list);
	INIT_LIST_HEAD(&txListBlack.list);
	//Spool up the available lists
	struct frame_list temp[NUMBER_BUFFERS*2];
	for(i = 0; i < NUMBER_BUFFERS; i++){
  102ea4:	e0be5e17 	ldw	r2,-1672(fp)
  102ea8:	10800044 	addi	r2,r2,1
  102eac:	e0be5e15 	stw	r2,-1672(fp)
  102eb0:	e0be5e17 	ldw	r2,-1672(fp)
  102eb4:	10800610 	cmplti	r2,r2,24
  102eb8:	103f901e 	bne	r2,zero,102cfc <black_to_red_frame+0xfe102cfc>
		// add the new items 'temp' to the list of items in the availableList
		list_add_tail(&(temp[i].list), &(availableListRed.list));
		list_add_tail(&(temp[i+NUMBER_BUFFERS].list), &(availableListBlack.list));
	}

	i = 0;
  102ebc:	e03e5e15 	stw	zero,-1672(fp)
	I printf("\nRed Available List\n");
	for (pos = (&availableListRed.list)->next, q = pos->next; pos != (&availableListRed.list); pos = q, q = pos->next){
  102ec0:	e0be8e17 	ldw	r2,-1480(fp)
  102ec4:	e0be6115 	stw	r2,-1660(fp)
  102ec8:	e0be6117 	ldw	r2,-1660(fp)
  102ecc:	10800017 	ldw	r2,0(r2)
  102ed0:	e0be6215 	stw	r2,-1656(fp)
  102ed4:	00000806 	br	102ef8 <main+0xa30>
		 tmp = list_entry(pos, struct frame_list, list);
  102ed8:	e0be6117 	ldw	r2,-1660(fp)
  102edc:	10bffc04 	addi	r2,r2,-16
  102ee0:	e0be6315 	stw	r2,-1652(fp)
		list_add_tail(&(temp[i+NUMBER_BUFFERS].list), &(availableListBlack.list));
	}

	i = 0;
	I printf("\nRed Available List\n");
	for (pos = (&availableListRed.list)->next, q = pos->next; pos != (&availableListRed.list); pos = q, q = pos->next){
  102ee4:	e0be6217 	ldw	r2,-1656(fp)
  102ee8:	e0be6115 	stw	r2,-1660(fp)
  102eec:	e0be6117 	ldw	r2,-1660(fp)
  102ef0:	10800017 	ldw	r2,0(r2)
  102ef4:	e0be6215 	stw	r2,-1656(fp)
  102ef8:	e0be8a04 	addi	r2,fp,-1496
  102efc:	10800404 	addi	r2,r2,16
  102f00:	e0fe6117 	ldw	r3,-1660(fp)
  102f04:	18bff41e 	bne	r3,r2,102ed8 <black_to_red_frame+0xfe102ed8>
		 tmp = list_entry(pos, struct frame_list, list);
		 I printf("Address of %d is: %x\n", i++, tmp->frameStart);
	}
	i = 0;
  102f08:	e03e5e15 	stw	zero,-1672(fp)
	I printf("\nBlack Available List\n");
	for (pos = (&availableListBlack.list)->next, q = pos->next; pos != (&availableListBlack.list); pos = q, q = pos->next){
  102f0c:	e0beb817 	ldw	r2,-1312(fp)
  102f10:	e0be6115 	stw	r2,-1660(fp)
  102f14:	e0be6117 	ldw	r2,-1660(fp)
  102f18:	10800017 	ldw	r2,0(r2)
  102f1c:	e0be6215 	stw	r2,-1656(fp)
  102f20:	00000806 	br	102f44 <main+0xa7c>
		 tmp = list_entry(pos, struct frame_list, list);
  102f24:	e0be6117 	ldw	r2,-1660(fp)
  102f28:	10bffc04 	addi	r2,r2,-16
  102f2c:	e0be6315 	stw	r2,-1652(fp)
		 tmp = list_entry(pos, struct frame_list, list);
		 I printf("Address of %d is: %x\n", i++, tmp->frameStart);
	}
	i = 0;
	I printf("\nBlack Available List\n");
	for (pos = (&availableListBlack.list)->next, q = pos->next; pos != (&availableListBlack.list); pos = q, q = pos->next){
  102f30:	e0be6217 	ldw	r2,-1656(fp)
  102f34:	e0be6115 	stw	r2,-1660(fp)
  102f38:	e0be6117 	ldw	r2,-1660(fp)
  102f3c:	10800017 	ldw	r2,0(r2)
  102f40:	e0be6215 	stw	r2,-1656(fp)
  102f44:	e0beb404 	addi	r2,fp,-1328
  102f48:	10800404 	addi	r2,r2,16
  102f4c:	e0fe6117 	ldw	r3,-1660(fp)
  102f50:	18bff41e 	bne	r3,r2,102f24 <black_to_red_frame+0xfe102f24>
		 tmp = list_entry(pos, struct frame_list, list);
		 I printf("Address of %d is: %x\n", i++, tmp->frameStart);
	}

	//Wait for both interfaces to establish link
	while (((Black_Interface->mdio_PHY_PHYSSR & 0x400) != 0x400) || ((Red_Interface->mdio_PHY_PHYSSR & 0x400) != 0x400)){
  102f54:	0001883a 	nop
  102f58:	d0a00017 	ldw	r2,-32768(gp)
  102f5c:	10809117 	ldw	r2,580(r2)
  102f60:	1081000c 	andi	r2,r2,1024
  102f64:	103ffc26 	beq	r2,zero,102f58 <black_to_red_frame+0xfe102f58>
  102f68:	d0a00117 	ldw	r2,-32764(gp)
  102f6c:	10809117 	ldw	r2,580(r2)
  102f70:	1081000c 	andi	r2,r2,1024
  102f74:	103ff826 	beq	r2,zero,102f58 <black_to_red_frame+0xfe102f58>
    };
	LEDs->DATA |= 0xC0;
  102f78:	d0a00617 	ldw	r2,-32744(gp)
  102f7c:	d0e00617 	ldw	r3,-32744(gp)
  102f80:	18c00017 	ldw	r3,0(r3)
  102f84:	18c03014 	ori	r3,r3,192
  102f88:	10c00015 	stw	r3,0(r2)

	IOWR_ALTERA_AVALON_SGDMA_CONTROL(RED_RX_BASE, 0);
  102f8c:	0007883a 	mov	r3,zero
  102f90:	008000f4 	movhi	r2,3
  102f94:	10865404 	addi	r2,r2,6480
  102f98:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_SGDMA_CONTROL(BLACK_RX_BASE, 0);
  102f9c:	0007883a 	mov	r3,zero
  102fa0:	008000f4 	movhi	r2,3
  102fa4:	10863404 	addi	r2,r2,6352
  102fa8:	10c00035 	stwio	r3,0(r2)
	I printf("Black Tx Control: %8x\n", (IORD_ALTERA_AVALON_SGDMA_CONTROL(BLACK_TX_BASE)));
	I printf("BLK 0x%.4x\n", Black_Interface->mdio_PHY_PHYSSR);
	I printf("RED 0x%.4x\n", Red_Interface->mdio_PHY_PHYSSR);

	// Enable read and write transfers, gigabit Ethernet operation, and CRC forwarding
	Black_Interface->command_config |= (CC_TX_ENA | CC_RX_ENA);
  102fac:	d0a00017 	ldw	r2,-32768(gp)
  102fb0:	d0e00017 	ldw	r3,-32768(gp)
  102fb4:	18c00217 	ldw	r3,8(r3)
  102fb8:	18c000d4 	ori	r3,r3,3
  102fbc:	10c00215 	stw	r3,8(r2)
	Red_Interface->command_config 	|= (CC_TX_ENA | CC_RX_ENA);
  102fc0:	d0a00117 	ldw	r2,-32764(gp)
  102fc4:	d0e00117 	ldw	r3,-32764(gp)
  102fc8:	18c00217 	ldw	r3,8(r3)
  102fcc:	18c000d4 	ori	r3,r3,3
  102fd0:	10c00215 	stw	r3,8(r2)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	SUPER LOOP BEGINS HERE
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	while (1){
		//LED Heartbeat!
			LEDs->DATA ^= 0x100;
  102fd4:	d0a00617 	ldw	r2,-32744(gp)
  102fd8:	d0e00617 	ldw	r3,-32744(gp)
  102fdc:	18c00017 	ldw	r3,0(r3)
  102fe0:	18c0401c 	xori	r3,r3,256
  102fe4:	10c00015 	stw	r3,0(r2)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	1.	Inspect nodes from availableList*.list pump them into the respective rx descriptors, then move nodes to the rxList*.list
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		D printf("\n----------Available List\n");
		D printf("-----Red\n");
		fstRedRx = -1;
  102fe8:	00bfffc4 	movi	r2,-1
  102fec:	e0be5f05 	stb	r2,-1668(fp)
		for (pos = (&availableListRed.list)->next, q = pos->next; pos != (&availableListRed.list); pos = q, q = pos->next){
  102ff0:	e0be8e17 	ldw	r2,-1480(fp)
  102ff4:	e0be6115 	stw	r2,-1660(fp)
  102ff8:	e0be6117 	ldw	r2,-1660(fp)
  102ffc:	10800017 	ldw	r2,0(r2)
  103000:	e0be6215 	stw	r2,-1656(fp)
  103004:	00003506 	br	1030dc <main+0xc14>
			tmp = list_entry(pos, struct frame_list, list);
  103008:	e0be6117 	ldw	r2,-1660(fp)
  10300c:	10bffc04 	addi	r2,r2,-16
  103010:	e0be6315 	stw	r2,-1652(fp)

			if(RedRx_FIFO.available == 1){
  103014:	e0be6717 	ldw	r2,-1636(fp)
  103018:	10800058 	cmpnei	r2,r2,1
  10301c:	1000011e 	bne	r2,zero,103024 <main+0xb5c>
				//No SPACE!
				break;
  103020:	00003206 	br	1030ec <main+0xc24>
			} else {

				//We have available room on the List, and Available Buffer Room
				if (fstRedRx == -1){
  103024:	e0be5f07 	ldb	r2,-1668(fp)
  103028:	10bfffd8 	cmpnei	r2,r2,-1
  10302c:	1000021e 	bne	r2,zero,103038 <main+0xb70>
					fstRedRx = RedRx_FIFO.WritePos;
  103030:	e0be6917 	ldw	r2,-1628(fp)
  103034:	e0be5f05 	stb	r2,-1668(fp)
				}

				if (RedRx_FIFO.WritePos == (RedRx_FIFO.size - 1)){
  103038:	e0fe6917 	ldw	r3,-1628(fp)
  10303c:	e0be6617 	ldw	r2,-1640(fp)
  103040:	10bfffc4 	addi	r2,r2,-1
  103044:	1880021e 	bne	r3,r2,103050 <main+0xb88>
					nxtRedRx = 0;
  103048:	e03e6005 	stb	zero,-1664(fp)
  10304c:	00000306 	br	10305c <main+0xb94>
				} else {
					nxtRedRx = (RedRx_FIFO.WritePos + 1);
  103050:	e0be6917 	ldw	r2,-1628(fp)
  103054:	10800044 	addi	r2,r2,1
  103058:	e0be6005 	stb	r2,-1664(fp)
				}
				//Construct and send new descriptors
				alt_avalon_sgdma_construct_stream_to_mem_desc(&red_rx_descriptor[RedRx_FIFO.WritePos],&red_rx_descriptor[nxtRedRx],tmp->frameStart,0,0);
  10305c:	e0be6917 	ldw	r2,-1628(fp)
  103060:	1006917a 	slli	r3,r2,5
  103064:	00800034 	movhi	r2,0
  103068:	10800004 	addi	r2,r2,0
  10306c:	1889883a 	add	r4,r3,r2
  103070:	e0be6007 	ldb	r2,-1664(fp)
  103074:	1006917a 	slli	r3,r2,5
  103078:	00800034 	movhi	r2,0
  10307c:	10800004 	addi	r2,r2,0
  103080:	1887883a 	add	r3,r3,r2
  103084:	e0be6317 	ldw	r2,-1652(fp)
  103088:	10800017 	ldw	r2,0(r2)
  10308c:	d8000015 	stw	zero,0(sp)
  103090:	180b883a 	mov	r5,r3
  103094:	100d883a 	mov	r6,r2
  103098:	000f883a 	mov	r7,zero
  10309c:	0114f500 	call	114f50 <alt_avalon_sgdma_construct_stream_to_mem_desc>
			}

			D printf("Available Space: %d,  \tRed WP: %d, \Red Nxt: %d,  \tAddr: 0x%08.8x\n", RedRx_FIFO.available, RedRx_FIFO.WritePos, nxtRedRx, tmp->frameStart);
			D printf("New Desc C: %x, S: %x, Next Desc C: %x, S: %x\n\n", red_rx_descriptor[RedRx_FIFO.WritePos].control, red_rx_descriptor[RedRx_FIFO.WritePos].status, red_rx_descriptor[nxtRedRx].control, red_rx_descriptor[nxtRedRx].status);
			list_move_tail(&(tmp->list), &(rxListRed.list));
  1030a0:	e0be6317 	ldw	r2,-1652(fp)
  1030a4:	10c00404 	addi	r3,r2,16
  1030a8:	e0be9004 	addi	r2,fp,-1472
  1030ac:	10800404 	addi	r2,r2,16
  1030b0:	1809883a 	mov	r4,r3
  1030b4:	100b883a 	mov	r5,r2
  1030b8:	01024740 	call	102474 <list_move_tail>

			//Increment the write position
			add_to_fifo(&RedRx_FIFO);
  1030bc:	e0be6604 	addi	r2,fp,-1640
  1030c0:	1009883a 	mov	r4,r2
  1030c4:	01019ec0 	call	1019ec <add_to_fifo>
//	1.	Inspect nodes from availableList*.list pump them into the respective rx descriptors, then move nodes to the rxList*.list
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		D printf("\n----------Available List\n");
		D printf("-----Red\n");
		fstRedRx = -1;
		for (pos = (&availableListRed.list)->next, q = pos->next; pos != (&availableListRed.list); pos = q, q = pos->next){
  1030c8:	e0be6217 	ldw	r2,-1656(fp)
  1030cc:	e0be6115 	stw	r2,-1660(fp)
  1030d0:	e0be6117 	ldw	r2,-1660(fp)
  1030d4:	10800017 	ldw	r2,0(r2)
  1030d8:	e0be6215 	stw	r2,-1656(fp)
  1030dc:	e0be8a04 	addi	r2,fp,-1496
  1030e0:	10800404 	addi	r2,r2,16
  1030e4:	e0fe6117 	ldw	r3,-1660(fp)
  1030e8:	18bfc71e 	bne	r3,r2,103008 <black_to_red_frame+0xfe103008>

			//Increment the write position
			add_to_fifo(&RedRx_FIFO);
		}
		//Check if we actually made a new list of descriptors
		if(fstRedRx != -1){
  1030ec:	e0be5f07 	ldb	r2,-1668(fp)
  1030f0:	10bfffe0 	cmpeqi	r2,r2,-1
  1030f4:	10000f1e 	bne	r2,zero,103134 <main+0xc6c>
			D printf("REDRX BASE C: %x\n", (IORD_ALTERA_AVALON_SGDMA_CONTROL(RED_RX_BASE)));
			D printf("REDRX BASE S: %x\n", (IORD_ALTERA_AVALON_SGDMA_STATUS(RED_RX_BASE)));
			while ((IORD_ALTERA_AVALON_SGDMA_STATUS(RED_RX_BASE)) & 0x10 != 0){
  1030f8:	0001883a 	nop
  1030fc:	008000f4 	movhi	r2,3
  103100:	10865004 	addi	r2,r2,6464
  103104:	10800037 	ldwio	r2,0(r2)
  103108:	1080004c 	andi	r2,r2,1
  10310c:	103ffb1e 	bne	r2,zero,1030fc <black_to_red_frame+0xfe1030fc>
				D printf("F");
			};
			alt_avalon_sgdma_do_async_transfer(RedRx,&red_rx_descriptor[fstRedRx]);
  103110:	d0e71d17 	ldw	r3,-25484(gp)
  103114:	e0be5f07 	ldb	r2,-1668(fp)
  103118:	1008917a 	slli	r4,r2,5
  10311c:	00800034 	movhi	r2,0
  103120:	10800004 	addi	r2,r2,0
  103124:	2085883a 	add	r2,r4,r2
  103128:	1809883a 	mov	r4,r3
  10312c:	100b883a 	mov	r5,r2
  103130:	0114adc0 	call	114adc <alt_avalon_sgdma_do_async_transfer>
		}

		D printf("-----Black\n");
		fstBlackRx = -1;
  103134:	00bfffc4 	movi	r2,-1
  103138:	e0be5f85 	stb	r2,-1666(fp)
		for (pos = (&availableListBlack.list)->next, q = pos->next; pos != (&availableListBlack.list); pos = q, q = pos->next){
  10313c:	e0beb817 	ldw	r2,-1312(fp)
  103140:	e0be6115 	stw	r2,-1660(fp)
  103144:	e0be6117 	ldw	r2,-1660(fp)
  103148:	10800017 	ldw	r2,0(r2)
  10314c:	e0be6215 	stw	r2,-1656(fp)
  103150:	00003506 	br	103228 <main+0xd60>
			tmp = list_entry(pos, struct frame_list, list);
  103154:	e0be6117 	ldw	r2,-1660(fp)
  103158:	10bffc04 	addi	r2,r2,-16
  10315c:	e0be6315 	stw	r2,-1652(fp)

			if(BlackRx_FIFO.available == 1){
  103160:	e0be6f17 	ldw	r2,-1604(fp)
  103164:	10800058 	cmpnei	r2,r2,1
  103168:	1000011e 	bne	r2,zero,103170 <main+0xca8>
				//No SPACE!
				break;
  10316c:	00003206 	br	103238 <main+0xd70>
			} else {

				//We have available room on the List, and Available Buffer Room
				if (fstBlackRx == -1){
  103170:	e0be5f87 	ldb	r2,-1666(fp)
  103174:	10bfffd8 	cmpnei	r2,r2,-1
  103178:	1000021e 	bne	r2,zero,103184 <main+0xcbc>
					fstBlackRx = BlackRx_FIFO.WritePos;
  10317c:	e0be7117 	ldw	r2,-1596(fp)
  103180:	e0be5f85 	stb	r2,-1666(fp)
				}

				if (BlackRx_FIFO.WritePos == (BlackRx_FIFO.size - 1)){
  103184:	e0fe7117 	ldw	r3,-1596(fp)
  103188:	e0be6e17 	ldw	r2,-1608(fp)
  10318c:	10bfffc4 	addi	r2,r2,-1
  103190:	1880021e 	bne	r3,r2,10319c <main+0xcd4>
					nxtBlackRx = 0;
  103194:	e03e6085 	stb	zero,-1662(fp)
  103198:	00000306 	br	1031a8 <main+0xce0>
				} else {
					nxtBlackRx = (BlackRx_FIFO.WritePos + 1);
  10319c:	e0be7117 	ldw	r2,-1596(fp)
  1031a0:	10800044 	addi	r2,r2,1
  1031a4:	e0be6085 	stb	r2,-1662(fp)
				}
				//Construct and send new descriptors
				alt_avalon_sgdma_construct_stream_to_mem_desc(&black_rx_descriptor[BlackRx_FIFO.WritePos],&black_rx_descriptor[nxtBlackRx],tmp->frameStart,0,0);
  1031a8:	e0be7117 	ldw	r2,-1596(fp)
  1031ac:	1006917a 	slli	r3,r2,5
  1031b0:	00800034 	movhi	r2,0
  1031b4:	10818004 	addi	r2,r2,1536
  1031b8:	1889883a 	add	r4,r3,r2
  1031bc:	e0be6087 	ldb	r2,-1662(fp)
  1031c0:	1006917a 	slli	r3,r2,5
  1031c4:	00800034 	movhi	r2,0
  1031c8:	10818004 	addi	r2,r2,1536
  1031cc:	1887883a 	add	r3,r3,r2
  1031d0:	e0be6317 	ldw	r2,-1652(fp)
  1031d4:	10800017 	ldw	r2,0(r2)
  1031d8:	d8000015 	stw	zero,0(sp)
  1031dc:	180b883a 	mov	r5,r3
  1031e0:	100d883a 	mov	r6,r2
  1031e4:	000f883a 	mov	r7,zero
  1031e8:	0114f500 	call	114f50 <alt_avalon_sgdma_construct_stream_to_mem_desc>
			}

			D printf("Available Space: %d,  \tBlack WP: %d, \Black Nxt: %d,  \tAddr: 0x%08.8x\n", BlackRx_FIFO.available, BlackRx_FIFO.WritePos, nxtBlackRx, tmp->frameStart);
			D printf("New Desc C: %x, S: %x, Next Desc C: %x, S: %x\n\n", black_rx_descriptor[BlackRx_FIFO.WritePos].control, black_rx_descriptor[BlackRx_FIFO.WritePos].status, black_rx_descriptor[nxtBlackRx].control, black_rx_descriptor[nxtBlackRx].status);
			list_move_tail(&(tmp->list), &(rxListBlack.list));
  1031ec:	e0be6317 	ldw	r2,-1652(fp)
  1031f0:	10c00404 	addi	r3,r2,16
  1031f4:	e0beba04 	addi	r2,fp,-1304
  1031f8:	10800404 	addi	r2,r2,16
  1031fc:	1809883a 	mov	r4,r3
  103200:	100b883a 	mov	r5,r2
  103204:	01024740 	call	102474 <list_move_tail>

			//Increment the write position
			add_to_fifo(&BlackRx_FIFO);
  103208:	e0be6e04 	addi	r2,fp,-1608
  10320c:	1009883a 	mov	r4,r2
  103210:	01019ec0 	call	1019ec <add_to_fifo>
			alt_avalon_sgdma_do_async_transfer(RedRx,&red_rx_descriptor[fstRedRx]);
		}

		D printf("-----Black\n");
		fstBlackRx = -1;
		for (pos = (&availableListBlack.list)->next, q = pos->next; pos != (&availableListBlack.list); pos = q, q = pos->next){
  103214:	e0be6217 	ldw	r2,-1656(fp)
  103218:	e0be6115 	stw	r2,-1660(fp)
  10321c:	e0be6117 	ldw	r2,-1660(fp)
  103220:	10800017 	ldw	r2,0(r2)
  103224:	e0be6215 	stw	r2,-1656(fp)
  103228:	e0beb404 	addi	r2,fp,-1328
  10322c:	10800404 	addi	r2,r2,16
  103230:	e0fe6117 	ldw	r3,-1660(fp)
  103234:	18bfc71e 	bne	r3,r2,103154 <black_to_red_frame+0xfe103154>

			//Increment the write position
			add_to_fifo(&BlackRx_FIFO);
		}
		//Check if we actually made a new list of descriptors
		if(fstBlackRx != -1){
  103238:	e0be5f87 	ldb	r2,-1666(fp)
  10323c:	10bfffe0 	cmpeqi	r2,r2,-1
  103240:	10000f1e 	bne	r2,zero,103280 <main+0xdb8>
			D printf("BlackRX BASE C: %x\n", (IORD_ALTERA_AVALON_SGDMA_CONTROL(BLACK_RX_BASE)));
			D printf("BlackRX BASE S: %x\n", (IORD_ALTERA_AVALON_SGDMA_STATUS(BLACK_RX_BASE)));
			while ((IORD_ALTERA_AVALON_SGDMA_STATUS(BLACK_RX_BASE)) & 0x10 != 0){
  103244:	0001883a 	nop
  103248:	008000f4 	movhi	r2,3
  10324c:	10863004 	addi	r2,r2,6336
  103250:	10800037 	ldwio	r2,0(r2)
  103254:	1080004c 	andi	r2,r2,1
  103258:	103ffb1e 	bne	r2,zero,103248 <black_to_red_frame+0xfe103248>
				D printf("f");
			};
			alt_avalon_sgdma_do_async_transfer(BlackRx,&black_rx_descriptor[fstBlackRx]);
  10325c:	d0e71c17 	ldw	r3,-25488(gp)
  103260:	e0be5f87 	ldb	r2,-1666(fp)
  103264:	1008917a 	slli	r4,r2,5
  103268:	00800034 	movhi	r2,0
  10326c:	10818004 	addi	r2,r2,1536
  103270:	2085883a 	add	r2,r4,r2
  103274:	1809883a 	mov	r4,r3
  103278:	100b883a 	mov	r5,r2
  10327c:	0114adc0 	call	114adc <alt_avalon_sgdma_do_async_transfer>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	2.	Check the rxList*.list for received frames, then move nodes to the inspectList*.list
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		D printf("\n----------Rx List\n");
		D printf("-----Red\n");
		for (pos = (&rxListRed.list)->next, q = pos->next; pos != (&rxListRed.list); pos = q, q = pos->next){
  103280:	e0be9417 	ldw	r2,-1456(fp)
  103284:	e0be6115 	stw	r2,-1660(fp)
  103288:	e0be6117 	ldw	r2,-1660(fp)
  10328c:	10800017 	ldw	r2,0(r2)
  103290:	e0be6215 	stw	r2,-1656(fp)
  103294:	00002d06 	br	10334c <main+0xe84>

			if((red_rx_descriptor[RedRx_FIFO.ReadPos].control & ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) != 0){
  103298:	e0be6817 	ldw	r2,-1632(fp)
  10329c:	00c00034 	movhi	r3,0
  1032a0:	18c00004 	addi	r3,r3,0
  1032a4:	1004917a 	slli	r2,r2,5
  1032a8:	1885883a 	add	r2,r3,r2
  1032ac:	10800704 	addi	r2,r2,28
  1032b0:	108000c3 	ldbu	r2,3(r2)
  1032b4:	10803fcc 	andi	r2,r2,255
  1032b8:	1080201c 	xori	r2,r2,128
  1032bc:	10bfe004 	addi	r2,r2,-128
  1032c0:	1000010e 	bge	r2,zero,1032c8 <main+0xe00>
				break;
  1032c4:	00002506 	br	10335c <main+0xe94>
			}
			D printf ("red_rx_descriptor[%d].control: %x\tred_rx_descriptor[%d].status: %x\t", RedRx_FIFO.ReadPos, red_rx_descriptor[RedRx_FIFO.ReadPos].control, red_rx_descriptor[RedRx_FIFO.ReadPos].status);
			tmp = list_entry((&rxListRed.list)->next, struct frame_list, list);
  1032c8:	e0be9417 	ldw	r2,-1456(fp)
  1032cc:	10bffc04 	addi	r2,r2,-16
  1032d0:	e0be6315 	stw	r2,-1652(fp)
			tmp->frameLength = (unsigned short) red_rx_descriptor[RedRx_FIFO.ReadPos].actual_bytes_transferred;
  1032d4:	e0be6817 	ldw	r2,-1632(fp)
  1032d8:	00c00034 	movhi	r3,0
  1032dc:	18c00004 	addi	r3,r3,0
  1032e0:	1004917a 	slli	r2,r2,5
  1032e4:	1885883a 	add	r2,r3,r2
  1032e8:	10800704 	addi	r2,r2,28
  1032ec:	1080000b 	ldhu	r2,0(r2)
  1032f0:	10ffffcc 	andi	r3,r2,65535
  1032f4:	e0be6317 	ldw	r2,-1652(fp)
  1032f8:	10c00115 	stw	r3,4(r2)
			D printf("Received frame, start: 0x%08.8x length: %d\n", tmp->frameStart, tmp->frameLength);

			list_move_tail(&(tmp->list), &(inspectListRed.list));
  1032fc:	e0be6317 	ldw	r2,-1652(fp)
  103300:	10c00404 	addi	r3,r2,16
  103304:	e0be9604 	addi	r2,fp,-1448
  103308:	10800404 	addi	r2,r2,16
  10330c:	1809883a 	mov	r4,r3
  103310:	100b883a 	mov	r5,r2
  103314:	01024740 	call	102474 <list_move_tail>

			//Increment the read position
			remove_from_fifo(&RedRx_FIFO);
  103318:	e0be6604 	addi	r2,fp,-1640
  10331c:	1009883a 	mov	r4,r2
  103320:	0101a540 	call	101a54 <remove_from_fifo>
			HEX->redFrames += 1;
  103324:	d0a00317 	ldw	r2,-32756(gp)
  103328:	d0e00317 	ldw	r3,-32756(gp)
  10332c:	18c0008b 	ldhu	r3,2(r3)
  103330:	18c00044 	addi	r3,r3,1
  103334:	10c0008d 	sth	r3,2(r2)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	2.	Check the rxList*.list for received frames, then move nodes to the inspectList*.list
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		D printf("\n----------Rx List\n");
		D printf("-----Red\n");
		for (pos = (&rxListRed.list)->next, q = pos->next; pos != (&rxListRed.list); pos = q, q = pos->next){
  103338:	e0be6217 	ldw	r2,-1656(fp)
  10333c:	e0be6115 	stw	r2,-1660(fp)
  103340:	e0be6117 	ldw	r2,-1660(fp)
  103344:	10800017 	ldw	r2,0(r2)
  103348:	e0be6215 	stw	r2,-1656(fp)
  10334c:	e0be9004 	addi	r2,fp,-1472
  103350:	10800404 	addi	r2,r2,16
  103354:	e0fe6117 	ldw	r3,-1660(fp)
  103358:	18bfcf1e 	bne	r3,r2,103298 <black_to_red_frame+0xfe103298>
			remove_from_fifo(&RedRx_FIFO);
			HEX->redFrames += 1;
		}

		D printf("-----Black\n");
		for (pos = (&rxListBlack.list)->next, q = pos->next; pos != (&rxListBlack.list); pos = q, q = pos->next){
  10335c:	e0bebe17 	ldw	r2,-1288(fp)
  103360:	e0be6115 	stw	r2,-1660(fp)
  103364:	e0be6117 	ldw	r2,-1660(fp)
  103368:	10800017 	ldw	r2,0(r2)
  10336c:	e0be6215 	stw	r2,-1656(fp)
  103370:	00002d06 	br	103428 <main+0xf60>

			if((black_rx_descriptor[BlackRx_FIFO.ReadPos].control & ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) != 0){
  103374:	e0be7017 	ldw	r2,-1600(fp)
  103378:	00c00034 	movhi	r3,0
  10337c:	18c18004 	addi	r3,r3,1536
  103380:	1004917a 	slli	r2,r2,5
  103384:	1885883a 	add	r2,r3,r2
  103388:	10800704 	addi	r2,r2,28
  10338c:	108000c3 	ldbu	r2,3(r2)
  103390:	10803fcc 	andi	r2,r2,255
  103394:	1080201c 	xori	r2,r2,128
  103398:	10bfe004 	addi	r2,r2,-128
  10339c:	1000010e 	bge	r2,zero,1033a4 <main+0xedc>
				break;
  1033a0:	00002506 	br	103438 <main+0xf70>
			}
			D printf ("black_rx_descriptor[%d].control: %x\tblack_rx_descriptor[%d].status: %x\t", BlackRx_FIFO.ReadPos, black_rx_descriptor[BlackRx_FIFO.ReadPos].control, black_rx_descriptor[BlackRx_FIFO.ReadPos].status);
			tmp = list_entry((&rxListBlack.list)->next, struct frame_list, list);
  1033a4:	e0bebe17 	ldw	r2,-1288(fp)
  1033a8:	10bffc04 	addi	r2,r2,-16
  1033ac:	e0be6315 	stw	r2,-1652(fp)
			tmp->frameLength = (unsigned short) black_rx_descriptor[BlackRx_FIFO.ReadPos].actual_bytes_transferred;
  1033b0:	e0be7017 	ldw	r2,-1600(fp)
  1033b4:	00c00034 	movhi	r3,0
  1033b8:	18c18004 	addi	r3,r3,1536
  1033bc:	1004917a 	slli	r2,r2,5
  1033c0:	1885883a 	add	r2,r3,r2
  1033c4:	10800704 	addi	r2,r2,28
  1033c8:	1080000b 	ldhu	r2,0(r2)
  1033cc:	10ffffcc 	andi	r3,r2,65535
  1033d0:	e0be6317 	ldw	r2,-1652(fp)
  1033d4:	10c00115 	stw	r3,4(r2)
			D printf("Received frame, start: 0x%08.8x length: %d\n", tmp->frameStart, tmp->frameLength);

			list_move_tail(&(tmp->list), &(inspectListBlack.list));
  1033d8:	e0be6317 	ldw	r2,-1652(fp)
  1033dc:	10c00404 	addi	r3,r2,16
  1033e0:	e0bec004 	addi	r2,fp,-1280
  1033e4:	10800404 	addi	r2,r2,16
  1033e8:	1809883a 	mov	r4,r3
  1033ec:	100b883a 	mov	r5,r2
  1033f0:	01024740 	call	102474 <list_move_tail>

			//Increment the read position
			remove_from_fifo(&BlackRx_FIFO);
  1033f4:	e0be6e04 	addi	r2,fp,-1608
  1033f8:	1009883a 	mov	r4,r2
  1033fc:	0101a540 	call	101a54 <remove_from_fifo>
			HEX->blackFrames += 1;
  103400:	d0a00317 	ldw	r2,-32756(gp)
  103404:	d0e00317 	ldw	r3,-32756(gp)
  103408:	18c0000b 	ldhu	r3,0(r3)
  10340c:	18c00044 	addi	r3,r3,1
  103410:	10c0000d 	sth	r3,0(r2)
			remove_from_fifo(&RedRx_FIFO);
			HEX->redFrames += 1;
		}

		D printf("-----Black\n");
		for (pos = (&rxListBlack.list)->next, q = pos->next; pos != (&rxListBlack.list); pos = q, q = pos->next){
  103414:	e0be6217 	ldw	r2,-1656(fp)
  103418:	e0be6115 	stw	r2,-1660(fp)
  10341c:	e0be6117 	ldw	r2,-1660(fp)
  103420:	10800017 	ldw	r2,0(r2)
  103424:	e0be6215 	stw	r2,-1656(fp)
  103428:	e0beba04 	addi	r2,fp,-1304
  10342c:	10800404 	addi	r2,r2,16
  103430:	e0fe6117 	ldw	r3,-1660(fp)
  103434:	18bfcf1e 	bne	r3,r2,103374 <black_to_red_frame+0xfe103374>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		D printf("\n----------Inspect List\n");
		D printf("-----Red\n");
		uint packetNumber;

		packetNumber = 0;
  103438:	e03e6415 	stw	zero,-1648(fp)
		for (pos = (&inspectListRed.list)->next, q = pos->next; pos != (&inspectListRed.list); pos = q, q = pos->next){
  10343c:	e0be9a17 	ldw	r2,-1432(fp)
  103440:	e0be6115 	stw	r2,-1660(fp)
  103444:	e0be6117 	ldw	r2,-1660(fp)
  103448:	10800017 	ldw	r2,0(r2)
  10344c:	e0be6215 	stw	r2,-1656(fp)
  103450:	00002a06 	br	1034fc <main+0x1034>
			 tmp = list_entry(pos, struct frame_list, list);
  103454:	e0be6117 	ldw	r2,-1660(fp)
  103458:	10bffc04 	addi	r2,r2,-16
  10345c:	e0be6315 	stw	r2,-1652(fp)
			 unsigned char packetType;
			 D printf("Frame Addr: %x\n", tmp->frameStart+2);

			 D printf("\nRed Interface Packet!\n");
			 D PrintPacket(tmp->frameStart, tmp->frameLength);
			 packetType = PacketProcessor_Red_Rx((tmp->frameStart)+2);
  103460:	e0be6317 	ldw	r2,-1652(fp)
  103464:	10800017 	ldw	r2,0(r2)
  103468:	10800084 	addi	r2,r2,2
  10346c:	1009883a 	mov	r4,r2
  103470:	0100c240 	call	100c24 <PacketProcessor_Red_Rx>
  103474:	e0be6505 	stb	r2,-1644(fp)

			 //ignored packet
			 if (packetType == 0){
  103478:	e0be6503 	ldbu	r2,-1644(fp)
  10347c:	1000081e 	bne	r2,zero,1034a0 <main+0xfd8>
				 D printf("Ignored packet\n");
				 list_move_tail(&(tmp->list), &(readyTxListRed.list));
  103480:	e0be6317 	ldw	r2,-1652(fp)
  103484:	10c00404 	addi	r3,r2,16
  103488:	e0bea804 	addi	r2,fp,-1376
  10348c:	10800404 	addi	r2,r2,16
  103490:	1809883a 	mov	r4,r3
  103494:	100b883a 	mov	r5,r2
  103498:	01024740 	call	102474 <list_move_tail>
  10349c:	00001206 	br	1034e8 <main+0x1020>

			 //encrypted packet
			 } else if (packetType == 2){
  1034a0:	e0be6503 	ldbu	r2,-1644(fp)
  1034a4:	10800098 	cmpnei	r2,r2,2
  1034a8:	1000081e 	bne	r2,zero,1034cc <main+0x1004>
				 D printf("Encrypted packet\n");
				 D PrintPacket(tmp->frameStart, tmp->frameLength);
				 list_move_tail(&(tmp->list), &(readyTxListRed.list));
  1034ac:	e0be6317 	ldw	r2,-1652(fp)
  1034b0:	10c00404 	addi	r3,r2,16
  1034b4:	e0bea804 	addi	r2,fp,-1376
  1034b8:	10800404 	addi	r2,r2,16
  1034bc:	1809883a 	mov	r4,r3
  1034c0:	100b883a 	mov	r5,r2
  1034c4:	01024740 	call	102474 <list_move_tail>
  1034c8:	00000706 	br	1034e8 <main+0x1020>

			 //admin packet
			 } else {
				 D printf("Admin packet\n");
				 D PrintPacket(tmp->frameStart, tmp->frameLength);
				 list_move_tail(&(tmp->list), &(availableListRed.list));
  1034cc:	e0be6317 	ldw	r2,-1652(fp)
  1034d0:	10c00404 	addi	r3,r2,16
  1034d4:	e0be8a04 	addi	r2,fp,-1496
  1034d8:	10800404 	addi	r2,r2,16
  1034dc:	1809883a 	mov	r4,r3
  1034e0:	100b883a 	mov	r5,r2
  1034e4:	01024740 	call	102474 <list_move_tail>
		D printf("\n----------Inspect List\n");
		D printf("-----Red\n");
		uint packetNumber;

		packetNumber = 0;
		for (pos = (&inspectListRed.list)->next, q = pos->next; pos != (&inspectListRed.list); pos = q, q = pos->next){
  1034e8:	e0be6217 	ldw	r2,-1656(fp)
  1034ec:	e0be6115 	stw	r2,-1660(fp)
  1034f0:	e0be6117 	ldw	r2,-1660(fp)
  1034f4:	10800017 	ldw	r2,0(r2)
  1034f8:	e0be6215 	stw	r2,-1656(fp)
  1034fc:	e0be9604 	addi	r2,fp,-1448
  103500:	10800404 	addi	r2,r2,16
  103504:	e0fe6117 	ldw	r3,-1660(fp)
  103508:	18bfd21e 	bne	r3,r2,103454 <black_to_red_frame+0xfe103454>
				 list_move_tail(&(tmp->list), &(availableListRed.list));
			 }
		}

		D printf("-----Black\n");
		for (pos = (&inspectListBlack.list)->next, q = pos->next; pos != (&inspectListBlack.list); pos = q, q = pos->next){
  10350c:	e0bec417 	ldw	r2,-1264(fp)
  103510:	e0be6115 	stw	r2,-1660(fp)
  103514:	e0be6117 	ldw	r2,-1660(fp)
  103518:	10800017 	ldw	r2,0(r2)
  10351c:	e0be6215 	stw	r2,-1656(fp)
  103520:	00002206 	br	1035ac <main+0x10e4>
			 tmp = list_entry(pos, struct frame_list, list);
  103524:	e0be6117 	ldw	r2,-1660(fp)
  103528:	10bffc04 	addi	r2,r2,-16
  10352c:	e0be6315 	stw	r2,-1652(fp)
			 unsigned char packetType;
			 D printf("Frame Addr: %x\n", tmp->frameStart+2);

			 D printf("\nBlack Interface Packet!\n");
			 D PrintPacket(tmp->frameStart, tmp->frameLength);
			 packetType = PacketProcessor_Black_Rx((tmp->frameStart)+2);
  103530:	e0be6317 	ldw	r2,-1652(fp)
  103534:	10800017 	ldw	r2,0(r2)
  103538:	10800084 	addi	r2,r2,2
  10353c:	1009883a 	mov	r4,r2
  103540:	01008500 	call	100850 <PacketProcessor_Black_Rx>
  103544:	e0be6545 	stb	r2,-1643(fp)

			 //ignored packet
			 if (packetType == 0){
  103548:	e0be6543 	ldbu	r2,-1643(fp)
  10354c:	1000081e 	bne	r2,zero,103570 <main+0x10a8>
				 D printf("Ignored packet\n");
				 list_move_tail(&(tmp->list), &(readyTxListBlack.list));
  103550:	e0be6317 	ldw	r2,-1652(fp)
  103554:	10c00404 	addi	r3,r2,16
  103558:	e0bed204 	addi	r2,fp,-1208
  10355c:	10800404 	addi	r2,r2,16
  103560:	1809883a 	mov	r4,r3
  103564:	100b883a 	mov	r5,r2
  103568:	01024740 	call	102474 <list_move_tail>
  10356c:	00000a06 	br	103598 <main+0x10d0>

			 //encrypted packet
			 } else if (packetType == 2){
  103570:	e0be6543 	ldbu	r2,-1643(fp)
  103574:	10800098 	cmpnei	r2,r2,2
  103578:	1000071e 	bne	r2,zero,103598 <main+0x10d0>
				 D printf("Encrypted, now decrypted, packet\n");
				 D PrintPacket(tmp->frameStart, tmp->frameLength);
				 list_move_tail(&(tmp->list), &(readyTxListBlack.list));
  10357c:	e0be6317 	ldw	r2,-1652(fp)
  103580:	10c00404 	addi	r3,r2,16
  103584:	e0bed204 	addi	r2,fp,-1208
  103588:	10800404 	addi	r2,r2,16
  10358c:	1809883a 	mov	r4,r3
  103590:	100b883a 	mov	r5,r2
  103594:	01024740 	call	102474 <list_move_tail>
				 list_move_tail(&(tmp->list), &(availableListRed.list));
			 }
		}

		D printf("-----Black\n");
		for (pos = (&inspectListBlack.list)->next, q = pos->next; pos != (&inspectListBlack.list); pos = q, q = pos->next){
  103598:	e0be6217 	ldw	r2,-1656(fp)
  10359c:	e0be6115 	stw	r2,-1660(fp)
  1035a0:	e0be6117 	ldw	r2,-1660(fp)
  1035a4:	10800017 	ldw	r2,0(r2)
  1035a8:	e0be6215 	stw	r2,-1656(fp)
  1035ac:	e0bec004 	addi	r2,fp,-1280
  1035b0:	10800404 	addi	r2,r2,16
  1035b4:	e0fe6117 	ldw	r3,-1660(fp)
  1035b8:	18bfda1e 	bne	r3,r2,103524 <black_to_red_frame+0xfe103524>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	6.	Inspect nodes from readyTxList*.list pump them into the respective tx descriptors, then move nodes to the txList*.list
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		D printf("\n----------ReadyTx List\n");
		D printf("-----Red\n");
		fstBlackTx = -1;
  1035bc:	00bfffc4 	movi	r2,-1
  1035c0:	e0be5fc5 	stb	r2,-1665(fp)
		for (pos = (&readyTxListRed.list)->next, q = pos->next; pos != (&readyTxListRed.list); pos = q, q = pos->next){
  1035c4:	e0beac17 	ldw	r2,-1360(fp)
  1035c8:	e0be6115 	stw	r2,-1660(fp)
  1035cc:	e0be6117 	ldw	r2,-1660(fp)
  1035d0:	10800017 	ldw	r2,0(r2)
  1035d4:	e0be6215 	stw	r2,-1656(fp)
  1035d8:	00003c06 	br	1036cc <main+0x1204>
			tmp = list_entry(pos, struct frame_list, list);
  1035dc:	e0be6117 	ldw	r2,-1660(fp)
  1035e0:	10bffc04 	addi	r2,r2,-16
  1035e4:	e0be6315 	stw	r2,-1652(fp)
			if(BlackTx_FIFO.available == 1){
  1035e8:	e0be7317 	ldw	r2,-1588(fp)
  1035ec:	10800058 	cmpnei	r2,r2,1
  1035f0:	1000011e 	bne	r2,zero,1035f8 <main+0x1130>
				//No SPACE!
				break;
  1035f4:	00003906 	br	1036dc <main+0x1214>
			} else {
				//We have available room on the List, and Available Buffer Room
				if (fstBlackTx == -1){
  1035f8:	e0be5fc7 	ldb	r2,-1665(fp)
  1035fc:	10bfffd8 	cmpnei	r2,r2,-1
  103600:	1000021e 	bne	r2,zero,10360c <main+0x1144>
					fstBlackTx = BlackTx_FIFO.WritePos;
  103604:	e0be7517 	ldw	r2,-1580(fp)
  103608:	e0be5fc5 	stb	r2,-1665(fp)
				}
				if (BlackTx_FIFO.WritePos == (BlackTx_FIFO.size - 1)){
  10360c:	e0fe7517 	ldw	r3,-1580(fp)
  103610:	e0be7217 	ldw	r2,-1592(fp)
  103614:	10bfffc4 	addi	r2,r2,-1
  103618:	1880021e 	bne	r3,r2,103624 <main+0x115c>
					nxtBlackTx = 0;
  10361c:	e03e60c5 	stb	zero,-1661(fp)
  103620:	00000306 	br	103630 <main+0x1168>
				} else {
					nxtBlackTx = (BlackTx_FIFO.WritePos + 1);
  103624:	e0be7517 	ldw	r2,-1580(fp)
  103628:	10800044 	addi	r2,r2,1
  10362c:	e0be60c5 	stb	r2,-1661(fp)
				}
				//Construct and send new descriptors
				alt_avalon_sgdma_construct_mem_to_stream_desc(&black_tx_descriptor[BlackTx_FIFO.WritePos],&black_tx_descriptor[nxtBlackTx],tmp->frameStart,tmp->frameLength,0,1,1,0);
  103630:	e0be7517 	ldw	r2,-1580(fp)
  103634:	1006917a 	slli	r3,r2,5
  103638:	00800034 	movhi	r2,0
  10363c:	10824004 	addi	r2,r2,2304
  103640:	1889883a 	add	r4,r3,r2
  103644:	e0be60c7 	ldb	r2,-1661(fp)
  103648:	1006917a 	slli	r3,r2,5
  10364c:	00800034 	movhi	r2,0
  103650:	10824004 	addi	r2,r2,2304
  103654:	188b883a 	add	r5,r3,r2
  103658:	e0be6317 	ldw	r2,-1652(fp)
  10365c:	10c00017 	ldw	r3,0(r2)
  103660:	e0be6317 	ldw	r2,-1652(fp)
  103664:	10800117 	ldw	r2,4(r2)
  103668:	10bfffcc 	andi	r2,r2,65535
  10366c:	d8000015 	stw	zero,0(sp)
  103670:	01800044 	movi	r6,1
  103674:	d9800115 	stw	r6,4(sp)
  103678:	01800044 	movi	r6,1
  10367c:	d9800215 	stw	r6,8(sp)
  103680:	d8000315 	stw	zero,12(sp)
  103684:	180d883a 	mov	r6,r3
  103688:	100f883a 	mov	r7,r2
  10368c:	0114fe80 	call	114fe8 <alt_avalon_sgdma_construct_mem_to_stream_desc>
			}

			D printf("Available Space: %d,  \tBlack WP: %d, \Black Nxt: %d,  \tAddr: 0x%08.8x\n", BlackTx_FIFO.available, BlackTx_FIFO.WritePos, nxtBlackTx, tmp->frameStart);
			D printf("New Desc C: %x, S: %x, Next Desc C: %x, S: %x\n\n", black_tx_descriptor[BlackTx_FIFO.WritePos].control, black_tx_descriptor[BlackTx_FIFO.WritePos].status, black_tx_descriptor[nxtBlackTx].control, black_tx_descriptor[nxtBlackTx].status);
			list_move_tail(&(tmp->list), &(txListBlack.list));
  103690:	e0be6317 	ldw	r2,-1652(fp)
  103694:	10c00404 	addi	r3,r2,16
  103698:	e0bed804 	addi	r2,fp,-1184
  10369c:	10800404 	addi	r2,r2,16
  1036a0:	1809883a 	mov	r4,r3
  1036a4:	100b883a 	mov	r5,r2
  1036a8:	01024740 	call	102474 <list_move_tail>

			//Increment the write position
			add_to_fifo(&BlackTx_FIFO);
  1036ac:	e0be7204 	addi	r2,fp,-1592
  1036b0:	1009883a 	mov	r4,r2
  1036b4:	01019ec0 	call	1019ec <add_to_fifo>
//	6.	Inspect nodes from readyTxList*.list pump them into the respective tx descriptors, then move nodes to the txList*.list
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		D printf("\n----------ReadyTx List\n");
		D printf("-----Red\n");
		fstBlackTx = -1;
		for (pos = (&readyTxListRed.list)->next, q = pos->next; pos != (&readyTxListRed.list); pos = q, q = pos->next){
  1036b8:	e0be6217 	ldw	r2,-1656(fp)
  1036bc:	e0be6115 	stw	r2,-1660(fp)
  1036c0:	e0be6117 	ldw	r2,-1660(fp)
  1036c4:	10800017 	ldw	r2,0(r2)
  1036c8:	e0be6215 	stw	r2,-1656(fp)
  1036cc:	e0bea804 	addi	r2,fp,-1376
  1036d0:	10800404 	addi	r2,r2,16
  1036d4:	e0fe6117 	ldw	r3,-1660(fp)
  1036d8:	18bfc01e 	bne	r3,r2,1035dc <black_to_red_frame+0xfe1035dc>

			//Increment the write position
			add_to_fifo(&BlackTx_FIFO);
		}
		//Check if we actually made a new list of descriptors
		if(fstBlackTx != -1){
  1036dc:	e0be5fc7 	ldb	r2,-1665(fp)
  1036e0:	10bfffe0 	cmpeqi	r2,r2,-1
  1036e4:	10000f1e 	bne	r2,zero,103724 <main+0x125c>
			D printf("RedTX BASE: %x\n", (IORD_ALTERA_AVALON_SGDMA_CONTROL(RED_TX_BASE)));
			D printf("RedTX BASE: %x\n", (IORD_ALTERA_AVALON_SGDMA_STATUS(RED_TX_BASE)));
			while ((*(unsigned int*)(BlackTx->base) & 0x10) == 0x10){};
  1036e8:	0001883a 	nop
  1036ec:	d0a71b17 	ldw	r2,-25492(gp)
  1036f0:	10800317 	ldw	r2,12(r2)
  1036f4:	10800017 	ldw	r2,0(r2)
  1036f8:	1080040c 	andi	r2,r2,16
  1036fc:	103ffb1e 	bne	r2,zero,1036ec <black_to_red_frame+0xfe1036ec>
			alt_avalon_sgdma_do_async_transfer(BlackTx,&black_tx_descriptor[fstBlackTx]);
  103700:	d0e71b17 	ldw	r3,-25492(gp)
  103704:	e0be5fc7 	ldb	r2,-1665(fp)
  103708:	1008917a 	slli	r4,r2,5
  10370c:	00800034 	movhi	r2,0
  103710:	10824004 	addi	r2,r2,2304
  103714:	2085883a 	add	r2,r4,r2
  103718:	1809883a 	mov	r4,r3
  10371c:	100b883a 	mov	r5,r2
  103720:	0114adc0 	call	114adc <alt_avalon_sgdma_do_async_transfer>
		}


		D printf("-------Black\n");
		fstRedTx = -1;
  103724:	00bfffc4 	movi	r2,-1
  103728:	e0be5f45 	stb	r2,-1667(fp)
		for (pos = (&readyTxListBlack.list)->next, q = pos->next; pos != (&readyTxListBlack.list); pos = q, q = pos->next){
  10372c:	e0bed617 	ldw	r2,-1192(fp)
  103730:	e0be6115 	stw	r2,-1660(fp)
  103734:	e0be6117 	ldw	r2,-1660(fp)
  103738:	10800017 	ldw	r2,0(r2)
  10373c:	e0be6215 	stw	r2,-1656(fp)
  103740:	00003c06 	br	103834 <main+0x136c>
			tmp = list_entry(pos, struct frame_list, list);
  103744:	e0be6117 	ldw	r2,-1660(fp)
  103748:	10bffc04 	addi	r2,r2,-16
  10374c:	e0be6315 	stw	r2,-1652(fp)
			if(RedTx_FIFO.available == 1){
  103750:	e0be6b17 	ldw	r2,-1620(fp)
  103754:	10800058 	cmpnei	r2,r2,1
  103758:	1000011e 	bne	r2,zero,103760 <main+0x1298>
				//No SPACE!
				break;
  10375c:	00003906 	br	103844 <main+0x137c>
			} else {
				//We have available room on the List, and Available Buffer Room
				if (fstRedTx == -1){
  103760:	e0be5f47 	ldb	r2,-1667(fp)
  103764:	10bfffd8 	cmpnei	r2,r2,-1
  103768:	1000021e 	bne	r2,zero,103774 <main+0x12ac>
					fstRedTx = RedTx_FIFO.WritePos;
  10376c:	e0be6d17 	ldw	r2,-1612(fp)
  103770:	e0be5f45 	stb	r2,-1667(fp)
				}
				if (RedTx_FIFO.WritePos == (RedTx_FIFO.size - 1)){
  103774:	e0fe6d17 	ldw	r3,-1612(fp)
  103778:	e0be6a17 	ldw	r2,-1624(fp)
  10377c:	10bfffc4 	addi	r2,r2,-1
  103780:	1880021e 	bne	r3,r2,10378c <main+0x12c4>
					nxtRedTx = 0;
  103784:	e03e6045 	stb	zero,-1663(fp)
  103788:	00000306 	br	103798 <main+0x12d0>
				} else {
					nxtRedTx = (RedTx_FIFO.WritePos + 1);
  10378c:	e0be6d17 	ldw	r2,-1612(fp)
  103790:	10800044 	addi	r2,r2,1
  103794:	e0be6045 	stb	r2,-1663(fp)
				}
				//Construct and send new descriptors
				alt_avalon_sgdma_construct_mem_to_stream_desc(&red_tx_descriptor[RedTx_FIFO.WritePos],&red_tx_descriptor[nxtRedTx],tmp->frameStart,tmp->frameLength,0,1,1,0);
  103798:	e0be6d17 	ldw	r2,-1612(fp)
  10379c:	1006917a 	slli	r3,r2,5
  1037a0:	00800034 	movhi	r2,0
  1037a4:	1080c004 	addi	r2,r2,768
  1037a8:	1889883a 	add	r4,r3,r2
  1037ac:	e0be6047 	ldb	r2,-1663(fp)
  1037b0:	1006917a 	slli	r3,r2,5
  1037b4:	00800034 	movhi	r2,0
  1037b8:	1080c004 	addi	r2,r2,768
  1037bc:	188b883a 	add	r5,r3,r2
  1037c0:	e0be6317 	ldw	r2,-1652(fp)
  1037c4:	10c00017 	ldw	r3,0(r2)
  1037c8:	e0be6317 	ldw	r2,-1652(fp)
  1037cc:	10800117 	ldw	r2,4(r2)
  1037d0:	10bfffcc 	andi	r2,r2,65535
  1037d4:	d8000015 	stw	zero,0(sp)
  1037d8:	01800044 	movi	r6,1
  1037dc:	d9800115 	stw	r6,4(sp)
  1037e0:	01800044 	movi	r6,1
  1037e4:	d9800215 	stw	r6,8(sp)
  1037e8:	d8000315 	stw	zero,12(sp)
  1037ec:	180d883a 	mov	r6,r3
  1037f0:	100f883a 	mov	r7,r2
  1037f4:	0114fe80 	call	114fe8 <alt_avalon_sgdma_construct_mem_to_stream_desc>
			}

			D printf("Available Space: %d,  \tRed WP: %d, \Red Nxt: %d,  \tAddr: 0x%08.8x\n", RedTx_FIFO.available, RedTx_FIFO.WritePos, nxtRedTx, tmp->frameStart);
			D printf("New Desc C: %x, S: %x, Next Desc C: %x, S: %x\n\n", red_tx_descriptor[RedTx_FIFO.WritePos].control, red_tx_descriptor[RedTx_FIFO.WritePos].status, red_tx_descriptor[nxtBlackTx].control, red_tx_descriptor[nxtRedTx].status);
			list_move_tail(&(tmp->list), &(txListRed.list));
  1037f8:	e0be6317 	ldw	r2,-1652(fp)
  1037fc:	10c00404 	addi	r3,r2,16
  103800:	e0beae04 	addi	r2,fp,-1352
  103804:	10800404 	addi	r2,r2,16
  103808:	1809883a 	mov	r4,r3
  10380c:	100b883a 	mov	r5,r2
  103810:	01024740 	call	102474 <list_move_tail>

			//Increment the write position
			add_to_fifo(&RedTx_FIFO);
  103814:	e0be6a04 	addi	r2,fp,-1624
  103818:	1009883a 	mov	r4,r2
  10381c:	01019ec0 	call	1019ec <add_to_fifo>
		}


		D printf("-------Black\n");
		fstRedTx = -1;
		for (pos = (&readyTxListBlack.list)->next, q = pos->next; pos != (&readyTxListBlack.list); pos = q, q = pos->next){
  103820:	e0be6217 	ldw	r2,-1656(fp)
  103824:	e0be6115 	stw	r2,-1660(fp)
  103828:	e0be6117 	ldw	r2,-1660(fp)
  10382c:	10800017 	ldw	r2,0(r2)
  103830:	e0be6215 	stw	r2,-1656(fp)
  103834:	e0bed204 	addi	r2,fp,-1208
  103838:	10800404 	addi	r2,r2,16
  10383c:	e0fe6117 	ldw	r3,-1660(fp)
  103840:	18bfc01e 	bne	r3,r2,103744 <black_to_red_frame+0xfe103744>

			//Increment the write position
			add_to_fifo(&RedTx_FIFO);
		}
		//Check if we actually made a new list of descriptors
		if(fstRedTx != -1){
  103844:	e0be5f47 	ldb	r2,-1667(fp)
  103848:	10bfffe0 	cmpeqi	r2,r2,-1
  10384c:	10000f1e 	bne	r2,zero,10388c <main+0x13c4>
			D printf("BlackTX BASE: %x\n", (IORD_ALTERA_AVALON_SGDMA_CONTROL(BLACK_TX_BASE)));
			D printf("BlackTX BASE: %x\n", (IORD_ALTERA_AVALON_SGDMA_STATUS(BLACK_TX_BASE)));
			while ((*(unsigned int*)(RedTx->base) & 0x10) == 0x10){};
  103850:	0001883a 	nop
  103854:	d0a71a17 	ldw	r2,-25496(gp)
  103858:	10800317 	ldw	r2,12(r2)
  10385c:	10800017 	ldw	r2,0(r2)
  103860:	1080040c 	andi	r2,r2,16
  103864:	103ffb1e 	bne	r2,zero,103854 <black_to_red_frame+0xfe103854>
			alt_avalon_sgdma_do_async_transfer(RedTx,&red_tx_descriptor[fstRedTx]);
  103868:	d0e71a17 	ldw	r3,-25496(gp)
  10386c:	e0be5f47 	ldb	r2,-1667(fp)
  103870:	1008917a 	slli	r4,r2,5
  103874:	00800034 	movhi	r2,0
  103878:	1080c004 	addi	r2,r2,768
  10387c:	2085883a 	add	r2,r4,r2
  103880:	1809883a 	mov	r4,r3
  103884:	100b883a 	mov	r5,r2
  103888:	0114adc0 	call	114adc <alt_avalon_sgdma_do_async_transfer>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	7.	Check the txList*.list for transmitted frames, then move  respective nodes to the availableList*.list
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		D printf("\n----------Tx List List\n");
		D printf("-----Red\n");
		for (pos = (&txListBlack.list)->next, q = pos->next; pos != (&txListBlack.list); pos = q, q = pos->next){
  10388c:	e0bedc17 	ldw	r2,-1168(fp)
  103890:	e0be6115 	stw	r2,-1660(fp)
  103894:	e0be6117 	ldw	r2,-1660(fp)
  103898:	10800017 	ldw	r2,0(r2)
  10389c:	e0be6215 	stw	r2,-1656(fp)
  1038a0:	00002806 	br	103944 <main+0x147c>

			if((black_tx_descriptor[BlackTx_FIFO.ReadPos].control & ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) != 0){
  1038a4:	e0be7417 	ldw	r2,-1584(fp)
  1038a8:	00c00034 	movhi	r3,0
  1038ac:	18c24004 	addi	r3,r3,2304
  1038b0:	1004917a 	slli	r2,r2,5
  1038b4:	1885883a 	add	r2,r3,r2
  1038b8:	10800704 	addi	r2,r2,28
  1038bc:	108000c3 	ldbu	r2,3(r2)
  1038c0:	10803fcc 	andi	r2,r2,255
  1038c4:	1080201c 	xori	r2,r2,128
  1038c8:	10bfe004 	addi	r2,r2,-128
  1038cc:	1000010e 	bge	r2,zero,1038d4 <main+0x140c>
				break;
  1038d0:	00002006 	br	103954 <main+0x148c>
			}
			D printf ("black_tx_descriptor[%d].control: %x\t", BlackTx_FIFO.ReadPos, black_tx_descriptor[BlackTx_FIFO.ReadPos].control);
			tmp = list_entry((&txListBlack.list)->next, struct frame_list, list);
  1038d4:	e0bedc17 	ldw	r2,-1168(fp)
  1038d8:	10bffc04 	addi	r2,r2,-16
  1038dc:	e0be6315 	stw	r2,-1652(fp)
			tmp->frameLength = (unsigned short) black_tx_descriptor[BlackTx_FIFO.ReadPos].actual_bytes_transferred;
  1038e0:	e0be7417 	ldw	r2,-1584(fp)
  1038e4:	00c00034 	movhi	r3,0
  1038e8:	18c24004 	addi	r3,r3,2304
  1038ec:	1004917a 	slli	r2,r2,5
  1038f0:	1885883a 	add	r2,r3,r2
  1038f4:	10800704 	addi	r2,r2,28
  1038f8:	1080000b 	ldhu	r2,0(r2)
  1038fc:	10ffffcc 	andi	r3,r2,65535
  103900:	e0be6317 	ldw	r2,-1652(fp)
  103904:	10c00115 	stw	r3,4(r2)
			D printf("Transmitted frame, start: 0x%08.8x length: %d\n", tmp->frameStart, tmp->frameLength);
			list_move_tail(&(tmp->list), &(availableListRed.list));
  103908:	e0be6317 	ldw	r2,-1652(fp)
  10390c:	10c00404 	addi	r3,r2,16
  103910:	e0be8a04 	addi	r2,fp,-1496
  103914:	10800404 	addi	r2,r2,16
  103918:	1809883a 	mov	r4,r3
  10391c:	100b883a 	mov	r5,r2
  103920:	01024740 	call	102474 <list_move_tail>
			//Increment the read position
			remove_from_fifo(&BlackTx_FIFO);
  103924:	e0be7204 	addi	r2,fp,-1592
  103928:	1009883a 	mov	r4,r2
  10392c:	0101a540 	call	101a54 <remove_from_fifo>
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	7.	Check the txList*.list for transmitted frames, then move  respective nodes to the availableList*.list
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		D printf("\n----------Tx List List\n");
		D printf("-----Red\n");
		for (pos = (&txListBlack.list)->next, q = pos->next; pos != (&txListBlack.list); pos = q, q = pos->next){
  103930:	e0be6217 	ldw	r2,-1656(fp)
  103934:	e0be6115 	stw	r2,-1660(fp)
  103938:	e0be6117 	ldw	r2,-1660(fp)
  10393c:	10800017 	ldw	r2,0(r2)
  103940:	e0be6215 	stw	r2,-1656(fp)
  103944:	e0bed804 	addi	r2,fp,-1184
  103948:	10800404 	addi	r2,r2,16
  10394c:	e0fe6117 	ldw	r3,-1660(fp)
  103950:	18bfd41e 	bne	r3,r2,1038a4 <black_to_red_frame+0xfe1038a4>
			//Increment the read position
			remove_from_fifo(&BlackTx_FIFO);
		}

		D printf("-----Black\n");
		for (pos = (&txListRed.list)->next, q = pos->next; pos != (&txListRed.list); pos = q, q = pos->next){
  103954:	e0beb217 	ldw	r2,-1336(fp)
  103958:	e0be6115 	stw	r2,-1660(fp)
  10395c:	e0be6117 	ldw	r2,-1660(fp)
  103960:	10800017 	ldw	r2,0(r2)
  103964:	e0be6215 	stw	r2,-1656(fp)
  103968:	00002806 	br	103a0c <main+0x1544>

			if((red_tx_descriptor[RedTx_FIFO.ReadPos].control & ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) != 0){
  10396c:	e0be6c17 	ldw	r2,-1616(fp)
  103970:	00c00034 	movhi	r3,0
  103974:	18c0c004 	addi	r3,r3,768
  103978:	1004917a 	slli	r2,r2,5
  10397c:	1885883a 	add	r2,r3,r2
  103980:	10800704 	addi	r2,r2,28
  103984:	108000c3 	ldbu	r2,3(r2)
  103988:	10803fcc 	andi	r2,r2,255
  10398c:	1080201c 	xori	r2,r2,128
  103990:	10bfe004 	addi	r2,r2,-128
  103994:	1000010e 	bge	r2,zero,10399c <main+0x14d4>
				break;
  103998:	00002006 	br	103a1c <main+0x1554>
			}
			D printf ("red_tx_descriptor[%d].control: %x\t", RedTx_FIFO.ReadPos, red_tx_descriptor[RedTx_FIFO.ReadPos].control);
			tmp = list_entry((&txListRed.list)->next, struct frame_list, list);
  10399c:	e0beb217 	ldw	r2,-1336(fp)
  1039a0:	10bffc04 	addi	r2,r2,-16
  1039a4:	e0be6315 	stw	r2,-1652(fp)
			tmp->frameLength = (unsigned short) red_tx_descriptor[RedTx_FIFO.ReadPos].actual_bytes_transferred;
  1039a8:	e0be6c17 	ldw	r2,-1616(fp)
  1039ac:	00c00034 	movhi	r3,0
  1039b0:	18c0c004 	addi	r3,r3,768
  1039b4:	1004917a 	slli	r2,r2,5
  1039b8:	1885883a 	add	r2,r3,r2
  1039bc:	10800704 	addi	r2,r2,28
  1039c0:	1080000b 	ldhu	r2,0(r2)
  1039c4:	10ffffcc 	andi	r3,r2,65535
  1039c8:	e0be6317 	ldw	r2,-1652(fp)
  1039cc:	10c00115 	stw	r3,4(r2)
			D printf("Transmitted frame, start: 0x%08.8x length: %d\n", tmp->frameStart, tmp->frameLength);
			list_move_tail(&(tmp->list), &(availableListBlack.list));
  1039d0:	e0be6317 	ldw	r2,-1652(fp)
  1039d4:	10c00404 	addi	r3,r2,16
  1039d8:	e0beb404 	addi	r2,fp,-1328
  1039dc:	10800404 	addi	r2,r2,16
  1039e0:	1809883a 	mov	r4,r3
  1039e4:	100b883a 	mov	r5,r2
  1039e8:	01024740 	call	102474 <list_move_tail>
			//Increment the read position
			remove_from_fifo(&RedTx_FIFO);
  1039ec:	e0be6a04 	addi	r2,fp,-1624
  1039f0:	1009883a 	mov	r4,r2
  1039f4:	0101a540 	call	101a54 <remove_from_fifo>
			//Increment the read position
			remove_from_fifo(&BlackTx_FIFO);
		}

		D printf("-----Black\n");
		for (pos = (&txListRed.list)->next, q = pos->next; pos != (&txListRed.list); pos = q, q = pos->next){
  1039f8:	e0be6217 	ldw	r2,-1656(fp)
  1039fc:	e0be6115 	stw	r2,-1660(fp)
  103a00:	e0be6117 	ldw	r2,-1660(fp)
  103a04:	10800017 	ldw	r2,0(r2)
  103a08:	e0be6215 	stw	r2,-1656(fp)
  103a0c:	e0beae04 	addi	r2,fp,-1352
  103a10:	10800404 	addi	r2,r2,16
  103a14:	e0fe6117 	ldw	r3,-1660(fp)
  103a18:	18bfd41e 	bne	r3,r2,10396c <black_to_red_frame+0xfe10396c>
		}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//	DONE
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	}
  103a1c:	003d6d06 	br	102fd4 <black_to_red_frame+0xfe102fd4>
	return 0;
}
  103a20:	e6fffe04 	addi	sp,fp,-8
  103a24:	dfc00317 	ldw	ra,12(sp)
  103a28:	df000217 	ldw	fp,8(sp)
  103a2c:	dc400117 	ldw	r17,4(sp)
  103a30:	dc000017 	ldw	r16,0(sp)
  103a34:	dec00404 	addi	sp,sp,16
  103a38:	f800283a 	ret

00103a3c <PrintPacket>:
// PURPOSE.  See the GNU Lesser General Public License for more //
// details.                                                     //
//                                                              //
----------------------------------------------------------------*/

void PrintPacket(unsigned char * frameStart, unsigned int frameLength){
  103a3c:	defff904 	addi	sp,sp,-28
  103a40:	dfc00615 	stw	ra,24(sp)
  103a44:	df000515 	stw	fp,20(sp)
  103a48:	df000504 	addi	fp,sp,20
  103a4c:	e13ffe15 	stw	r4,-8(fp)
  103a50:	e17fff15 	stw	r5,-4(fp)
	 unsigned char * stringP = frameStart;
  103a54:	e0bffe17 	ldw	r2,-8(fp)
  103a58:	e0bffd15 	stw	r2,-12(fp)
	 int i = 0;
  103a5c:	e03ffb15 	stw	zero,-20(fp)
	 int j = 0;
  103a60:	e03ffc15 	stw	zero,-16(fp)
	 printf("Inspecting packet... Address: 0x%08.8x, Length: %d bytes.\n", frameStart, frameLength);
  103a64:	01000474 	movhi	r4,17
  103a68:	21196c04 	addi	r4,r4,26032
  103a6c:	e17ffe17 	ldw	r5,-8(fp)
  103a70:	e1bfff17 	ldw	r6,-4(fp)
  103a74:	010475c0 	call	10475c <printf>
	 printf("             0  1  2  3  4  5  6  7   8  9  a  b  c  d  e  f\n");
  103a78:	01000474 	movhi	r4,17
  103a7c:	21197b04 	addi	r4,r4,26092
  103a80:	01048740 	call	104874 <puts>
	 printf("0x%08.8x  ", frameStart + i);
  103a84:	e0bffb17 	ldw	r2,-20(fp)
  103a88:	e0fffe17 	ldw	r3,-8(fp)
  103a8c:	1885883a 	add	r2,r3,r2
  103a90:	01000474 	movhi	r4,17
  103a94:	21198b04 	addi	r4,r4,26156
  103a98:	100b883a 	mov	r5,r2
  103a9c:	010475c0 	call	10475c <printf>
	 for(i=0; i < frameLength; i++){
  103aa0:	e03ffb15 	stw	zero,-20(fp)
  103aa4:	00002206 	br	103b30 <PrintPacket+0xf4>

		 if (j++ == 8){
  103aa8:	e0bffc17 	ldw	r2,-16(fp)
  103aac:	10c00044 	addi	r3,r2,1
  103ab0:	e0fffc15 	stw	r3,-16(fp)
  103ab4:	10800218 	cmpnei	r2,r2,8
  103ab8:	1000031e 	bne	r2,zero,103ac8 <PrintPacket+0x8c>
			 j = 0;
  103abc:	e03ffc15 	stw	zero,-16(fp)
			 printf(" ");
  103ac0:	01000804 	movi	r4,32
  103ac4:	01047a00 	call	1047a0 <putchar>
		 }
		 if (i%16 == 0 && i != 0){
  103ac8:	e0bffb17 	ldw	r2,-20(fp)
  103acc:	108003cc 	andi	r2,r2,15
  103ad0:	10000b1e 	bne	r2,zero,103b00 <PrintPacket+0xc4>
  103ad4:	e0bffb17 	ldw	r2,-20(fp)
  103ad8:	10000926 	beq	r2,zero,103b00 <PrintPacket+0xc4>
			 printf("\n0x%08.8x  ", frameStart + i);
  103adc:	e0bffb17 	ldw	r2,-20(fp)
  103ae0:	e0fffe17 	ldw	r3,-8(fp)
  103ae4:	1885883a 	add	r2,r3,r2
  103ae8:	01000474 	movhi	r4,17
  103aec:	21198e04 	addi	r4,r4,26168
  103af0:	100b883a 	mov	r5,r2
  103af4:	010475c0 	call	10475c <printf>
			 j = 1;
  103af8:	00800044 	movi	r2,1
  103afc:	e0bffc15 	stw	r2,-16(fp)
		 }
		 printf("%2.2x ", *(stringP + i));
  103b00:	e0bffb17 	ldw	r2,-20(fp)
  103b04:	e0fffd17 	ldw	r3,-12(fp)
  103b08:	1885883a 	add	r2,r3,r2
  103b0c:	10800003 	ldbu	r2,0(r2)
  103b10:	10803fcc 	andi	r2,r2,255
  103b14:	01000474 	movhi	r4,17
  103b18:	21199104 	addi	r4,r4,26180
  103b1c:	100b883a 	mov	r5,r2
  103b20:	010475c0 	call	10475c <printf>
	 int i = 0;
	 int j = 0;
	 printf("Inspecting packet... Address: 0x%08.8x, Length: %d bytes.\n", frameStart, frameLength);
	 printf("             0  1  2  3  4  5  6  7   8  9  a  b  c  d  e  f\n");
	 printf("0x%08.8x  ", frameStart + i);
	 for(i=0; i < frameLength; i++){
  103b24:	e0bffb17 	ldw	r2,-20(fp)
  103b28:	10800044 	addi	r2,r2,1
  103b2c:	e0bffb15 	stw	r2,-20(fp)
  103b30:	e0fffb17 	ldw	r3,-20(fp)
  103b34:	e0bfff17 	ldw	r2,-4(fp)
  103b38:	18bfdb36 	bltu	r3,r2,103aa8 <black_to_red_frame+0xfe103aa8>
			 printf("\n0x%08.8x  ", frameStart + i);
			 j = 1;
		 }
		 printf("%2.2x ", *(stringP + i));
	 }
	 printf("\n");
  103b3c:	01000284 	movi	r4,10
  103b40:	01047a00 	call	1047a0 <putchar>
}
  103b44:	e037883a 	mov	sp,fp
  103b48:	dfc00117 	ldw	ra,4(sp)
  103b4c:	df000017 	ldw	fp,0(sp)
  103b50:	dec00204 	addi	sp,sp,8
  103b54:	f800283a 	ret

00103b58 <swInit>:
 // details.                                                     //
 //                                                              //
 ----------------------------------------------------------------*/
#include "sw.h"

unsigned char swInit(volatile SW_t* targetSW) {
  103b58:	defffd04 	addi	sp,sp,-12
  103b5c:	dfc00215 	stw	ra,8(sp)
  103b60:	df000115 	stw	fp,4(sp)
  103b64:	df000104 	addi	fp,sp,4
  103b68:	e13fff15 	stw	r4,-4(fp)
  targetSW->DDR = 0x00000000;
  103b6c:	e0bfff17 	ldw	r2,-4(fp)
  103b70:	10000115 	stw	zero,4(r2)
  targetSW->EDGE_CAP = 0x00000000;
  103b74:	e0bfff17 	ldw	r2,-4(fp)
  103b78:	10000315 	stw	zero,12(r2)
  targetSW->IRQ_MASK = 0x00000000;
  103b7c:	e0bfff17 	ldw	r2,-4(fp)
  103b80:	10000215 	stw	zero,8(r2)

  if ((targetSW->DDR == 0) && (targetSW->EDGE_CAP == 0)
  103b84:	e0bfff17 	ldw	r2,-4(fp)
  103b88:	10800117 	ldw	r2,4(r2)
  103b8c:	10000b1e 	bne	r2,zero,103bbc <swInit+0x64>
  103b90:	e0bfff17 	ldw	r2,-4(fp)
  103b94:	10800317 	ldw	r2,12(r2)
  103b98:	1000081e 	bne	r2,zero,103bbc <swInit+0x64>
      && (targetSW->IRQ_MASK == 0)) {
  103b9c:	e0bfff17 	ldw	r2,-4(fp)
  103ba0:	10800217 	ldw	r2,8(r2)
  103ba4:	1000051e 	bne	r2,zero,103bbc <swInit+0x64>

    printf("[sw.c]\tInitialize switches (SUCCESS)\n");
  103ba8:	01000474 	movhi	r4,17
  103bac:	21199304 	addi	r4,r4,26188
  103bb0:	01048740 	call	104874 <puts>
    return 0;
  103bb4:	0005883a 	mov	r2,zero
  103bb8:	00000406 	br	103bcc <swInit+0x74>
  } else {
    printf("[sw.c]\tInitialize switches (FAILURE)\n");
  103bbc:	01000474 	movhi	r4,17
  103bc0:	21199d04 	addi	r4,r4,26228
  103bc4:	01048740 	call	104874 <puts>
    return 1;
  103bc8:	00800044 	movi	r2,1
  }
}
  103bcc:	e037883a 	mov	sp,fp
  103bd0:	dfc00117 	ldw	ra,4(sp)
  103bd4:	df000017 	ldw	fp,0(sp)
  103bd8:	dec00204 	addi	sp,sp,8
  103bdc:	f800283a 	ret

00103be0 <swPrintStatus>:

void swPrintStatus(volatile SW_t* targetSW) {
  103be0:	defffa04 	addi	sp,sp,-24
  103be4:	dfc00515 	stw	ra,20(sp)
  103be8:	df000415 	stw	fp,16(sp)
  103bec:	df000404 	addi	fp,sp,16
  103bf0:	e13fff15 	stw	r4,-4(fp)
  int bitnum;
  int bitset;
  unsigned int data;
  data = targetSW->DATA;
  103bf4:	e0bfff17 	ldw	r2,-4(fp)
  103bf8:	10800017 	ldw	r2,0(r2)
  103bfc:	e0bffd15 	stw	r2,-12(fp)
  for (bitnum = 0; bitnum < 18; bitnum++) {
  103c00:	e03ffc15 	stw	zero,-16(fp)
  103c04:	00007806 	br	103de8 <swPrintStatus+0x208>
    bitset = !!(data & (1 << bitnum));
  103c08:	00c00044 	movi	r3,1
  103c0c:	e0bffc17 	ldw	r2,-16(fp)
  103c10:	1884983a 	sll	r2,r3,r2
  103c14:	1007883a 	mov	r3,r2
  103c18:	e0bffd17 	ldw	r2,-12(fp)
  103c1c:	1884703a 	and	r2,r3,r2
  103c20:	1004c03a 	cmpne	r2,r2,zero
  103c24:	10803fcc 	andi	r2,r2,255
  103c28:	e0bffe15 	stw	r2,-8(fp)
    switch (bitnum) {
  103c2c:	e0bffc17 	ldw	r2,-16(fp)
  103c30:	108004a8 	cmpgeui	r2,r2,18
  103c34:	1000681e 	bne	r2,zero,103dd8 <swPrintStatus+0x1f8>
  103c38:	e0bffc17 	ldw	r2,-16(fp)
  103c3c:	1085883a 	add	r2,r2,r2
  103c40:	1087883a 	add	r3,r2,r2
  103c44:	00800434 	movhi	r2,16
  103c48:	108f1604 	addi	r2,r2,15448
  103c4c:	1885883a 	add	r2,r3,r2
  103c50:	10800017 	ldw	r2,0(r2)
  103c54:	1000683a 	jmp	r2
  103c58:	00103ca0 	cmpeqi	zero,zero,16626
  103c5c:	00103cb8 	rdprs	zero,zero,16626
  103c60:	00103cd0 	cmplti	zero,zero,16627
  103c64:	00103ce8 	cmpgeui	zero,zero,16627
  103c68:	00103d00 	call	103d0 <black_tx_descriptor+0xfad0>
  103c6c:	00103d18 	cmpnei	zero,zero,16628
  103c70:	00103d30 	cmpltui	zero,zero,16628
  103c74:	00103d48 	cmpgei	zero,zero,16629
  103c78:	00103d60 	cmpeqi	zero,zero,16629
  103c7c:	00103d78 	rdprs	zero,zero,16629
  103c80:	00103d90 	cmplti	zero,zero,16630
  103c84:	00103da8 	cmpgeui	zero,zero,16630
  103c88:	00103dd8 	cmpnei	zero,zero,16631
  103c8c:	00103dd8 	cmpnei	zero,zero,16631
  103c90:	00103dd8 	cmpnei	zero,zero,16631
  103c94:	00103dd8 	cmpnei	zero,zero,16631
  103c98:	00103dd8 	cmpnei	zero,zero,16631
  103c9c:	00103dc0 	call	103dc <black_tx_descriptor+0xfadc>
    case 0:
      printf("\t\tbit%d:\t%d \tBLACK (lsb speed (10/100/1000))\n", bitnum,
  103ca0:	01000474 	movhi	r4,17
  103ca4:	2119a704 	addi	r4,r4,26268
  103ca8:	e17ffc17 	ldw	r5,-16(fp)
  103cac:	e1bffe17 	ldw	r6,-8(fp)
  103cb0:	010475c0 	call	10475c <printf>
          bitset);
      break;
  103cb4:	00004906 	br	103ddc <swPrintStatus+0x1fc>
    case 1:
      printf("\t\tbit%d:\t%d \tBLACK (msb speed (10/100/1000))\n", bitnum,
  103cb8:	01000474 	movhi	r4,17
  103cbc:	2119b304 	addi	r4,r4,26316
  103cc0:	e17ffc17 	ldw	r5,-16(fp)
  103cc4:	e1bffe17 	ldw	r6,-8(fp)
  103cc8:	010475c0 	call	10475c <printf>
          bitset);
      break;
  103ccc:	00004306 	br	103ddc <swPrintStatus+0x1fc>
    case 2:
      printf("\t\tbit%d:\t%d \tBLACK (full duplex enable)\n", bitnum, bitset);
  103cd0:	01000474 	movhi	r4,17
  103cd4:	2119bf04 	addi	r4,r4,26364
  103cd8:	e17ffc17 	ldw	r5,-16(fp)
  103cdc:	e1bffe17 	ldw	r6,-8(fp)
  103ce0:	010475c0 	call	10475c <printf>
      break;
  103ce4:	00003d06 	br	103ddc <swPrintStatus+0x1fc>
    case 3:
      printf("\t\tbit%d:\t%d \tBLACK (crossover enable)\n", bitnum, bitset);
  103ce8:	01000474 	movhi	r4,17
  103cec:	2119ca04 	addi	r4,r4,26408
  103cf0:	e17ffc17 	ldw	r5,-16(fp)
  103cf4:	e1bffe17 	ldw	r6,-8(fp)
  103cf8:	010475c0 	call	10475c <printf>
      break;
  103cfc:	00003706 	br	103ddc <swPrintStatus+0x1fc>
    case 4:
      printf("\t\tbit%d:\t%d \tBLACK (autonegotiate)\n", bitnum, bitset);
  103d00:	01000474 	movhi	r4,17
  103d04:	2119d404 	addi	r4,r4,26448
  103d08:	e17ffc17 	ldw	r5,-16(fp)
  103d0c:	e1bffe17 	ldw	r6,-8(fp)
  103d10:	010475c0 	call	10475c <printf>
      break;
  103d14:	00003106 	br	103ddc <swPrintStatus+0x1fc>
    case 5:
      printf("\t\tbit%d:\t%d \tBLACK (crypto enable)\n", bitnum, bitset);
  103d18:	01000474 	movhi	r4,17
  103d1c:	2119dd04 	addi	r4,r4,26484
  103d20:	e17ffc17 	ldw	r5,-16(fp)
  103d24:	e1bffe17 	ldw	r6,-8(fp)
  103d28:	010475c0 	call	10475c <printf>
      break;
  103d2c:	00002b06 	br	103ddc <swPrintStatus+0x1fc>
    case 6:
      printf("\t\tbit%d:\t%d \tRED (lsb speed (10/100/1000))\n", bitnum,
  103d30:	01000474 	movhi	r4,17
  103d34:	2119e604 	addi	r4,r4,26520
  103d38:	e17ffc17 	ldw	r5,-16(fp)
  103d3c:	e1bffe17 	ldw	r6,-8(fp)
  103d40:	010475c0 	call	10475c <printf>
          bitset);
      break;
  103d44:	00002506 	br	103ddc <swPrintStatus+0x1fc>
    case 7:
      printf("\t\tbit%d:\t%d \tRED (msb speed (10/100/1000))\n", bitnum,
  103d48:	01000474 	movhi	r4,17
  103d4c:	2119f104 	addi	r4,r4,26564
  103d50:	e17ffc17 	ldw	r5,-16(fp)
  103d54:	e1bffe17 	ldw	r6,-8(fp)
  103d58:	010475c0 	call	10475c <printf>
          bitset);
      break;
  103d5c:	00001f06 	br	103ddc <swPrintStatus+0x1fc>
    case 8:
      printf("\t\tbit%d:\t%d \tRED (full duplex enable)\n", bitnum, bitset);
  103d60:	01000474 	movhi	r4,17
  103d64:	2119fc04 	addi	r4,r4,26608
  103d68:	e17ffc17 	ldw	r5,-16(fp)
  103d6c:	e1bffe17 	ldw	r6,-8(fp)
  103d70:	010475c0 	call	10475c <printf>
      break;
  103d74:	00001906 	br	103ddc <swPrintStatus+0x1fc>
    case 9:
      printf("\t\tbit%d:\t%d \tRED (crossover enable)\n", bitnum, bitset);
  103d78:	01000474 	movhi	r4,17
  103d7c:	211a0604 	addi	r4,r4,26648
  103d80:	e17ffc17 	ldw	r5,-16(fp)
  103d84:	e1bffe17 	ldw	r6,-8(fp)
  103d88:	010475c0 	call	10475c <printf>
      break;
  103d8c:	00001306 	br	103ddc <swPrintStatus+0x1fc>
    case 10:
      printf("\t\tbit%d:\t%d \tRED (autonegotiate)\n", bitnum, bitset);
  103d90:	01000474 	movhi	r4,17
  103d94:	211a1004 	addi	r4,r4,26688
  103d98:	e17ffc17 	ldw	r5,-16(fp)
  103d9c:	e1bffe17 	ldw	r6,-8(fp)
  103da0:	010475c0 	call	10475c <printf>
      break;
  103da4:	00000d06 	br	103ddc <swPrintStatus+0x1fc>
    case 11:
      printf("\t\tbit%d:\t%d \tRED (crypto enable)\n", bitnum, bitset);
  103da8:	01000474 	movhi	r4,17
  103dac:	211a1904 	addi	r4,r4,26724
  103db0:	e17ffc17 	ldw	r5,-16(fp)
  103db4:	e1bffe17 	ldw	r6,-8(fp)
  103db8:	010475c0 	call	10475c <printf>
      break;
  103dbc:	00000706 	br	103ddc <swPrintStatus+0x1fc>
    case 17:
      printf("\t\tbit%d:\t%d \tDEBUG MODE\n\n", bitnum, bitset);
  103dc0:	01000474 	movhi	r4,17
  103dc4:	211a2204 	addi	r4,r4,26760
  103dc8:	e17ffc17 	ldw	r5,-16(fp)
  103dcc:	e1bffe17 	ldw	r6,-8(fp)
  103dd0:	010475c0 	call	10475c <printf>
      break;
  103dd4:	00000106 	br	103ddc <swPrintStatus+0x1fc>
    default:
      break;
  103dd8:	0001883a 	nop
void swPrintStatus(volatile SW_t* targetSW) {
  int bitnum;
  int bitset;
  unsigned int data;
  data = targetSW->DATA;
  for (bitnum = 0; bitnum < 18; bitnum++) {
  103ddc:	e0bffc17 	ldw	r2,-16(fp)
  103de0:	10800044 	addi	r2,r2,1
  103de4:	e0bffc15 	stw	r2,-16(fp)
  103de8:	e0bffc17 	ldw	r2,-16(fp)
  103dec:	10800490 	cmplti	r2,r2,18
  103df0:	103f851e 	bne	r2,zero,103c08 <black_to_red_frame+0xfe103c08>
      break;
    default:
      break;
    }
  }
}
  103df4:	e037883a 	mov	sp,fp
  103df8:	dfc00117 	ldw	ra,4(sp)
  103dfc:	df000017 	ldw	fp,0(sp)
  103e00:	dec00204 	addi	sp,sp,8
  103e04:	f800283a 	ret

00103e08 <udivmodsi4>:
  103e08:	2900182e 	bgeu	r5,r4,103e6c <udivmodsi4+0x64>
  103e0c:	28001716 	blt	r5,zero,103e6c <udivmodsi4+0x64>
  103e10:	00800804 	movi	r2,32
  103e14:	00c00044 	movi	r3,1
  103e18:	00000206 	br	103e24 <udivmodsi4+0x1c>
  103e1c:	10001126 	beq	r2,zero,103e64 <udivmodsi4+0x5c>
  103e20:	28000516 	blt	r5,zero,103e38 <udivmodsi4+0x30>
  103e24:	294b883a 	add	r5,r5,r5
  103e28:	10bfffc4 	addi	r2,r2,-1
  103e2c:	18c7883a 	add	r3,r3,r3
  103e30:	293ffa36 	bltu	r5,r4,103e1c <black_to_red_frame+0xfe103e1c>
  103e34:	18000b26 	beq	r3,zero,103e64 <udivmodsi4+0x5c>
  103e38:	0005883a 	mov	r2,zero
  103e3c:	21400236 	bltu	r4,r5,103e48 <udivmodsi4+0x40>
  103e40:	2149c83a 	sub	r4,r4,r5
  103e44:	10c4b03a 	or	r2,r2,r3
  103e48:	1806d07a 	srli	r3,r3,1
  103e4c:	280ad07a 	srli	r5,r5,1
  103e50:	183ffa1e 	bne	r3,zero,103e3c <black_to_red_frame+0xfe103e3c>
  103e54:	3000011e 	bne	r6,zero,103e5c <udivmodsi4+0x54>
  103e58:	f800283a 	ret
  103e5c:	2005883a 	mov	r2,r4
  103e60:	f800283a 	ret
  103e64:	0005883a 	mov	r2,zero
  103e68:	003ffa06 	br	103e54 <black_to_red_frame+0xfe103e54>
  103e6c:	00c00044 	movi	r3,1
  103e70:	0005883a 	mov	r2,zero
  103e74:	003ff106 	br	103e3c <black_to_red_frame+0xfe103e3c>

00103e78 <__divsi3>:
  103e78:	deffff04 	addi	sp,sp,-4
  103e7c:	dfc00015 	stw	ra,0(sp)
  103e80:	20000916 	blt	r4,zero,103ea8 <__divsi3+0x30>
  103e84:	000f883a 	mov	r7,zero
  103e88:	28000a16 	blt	r5,zero,103eb4 <__divsi3+0x3c>
  103e8c:	000d883a 	mov	r6,zero
  103e90:	0103e080 	call	103e08 <udivmodsi4>
  103e94:	38000126 	beq	r7,zero,103e9c <__divsi3+0x24>
  103e98:	0085c83a 	sub	r2,zero,r2
  103e9c:	dfc00017 	ldw	ra,0(sp)
  103ea0:	dec00104 	addi	sp,sp,4
  103ea4:	f800283a 	ret
  103ea8:	0109c83a 	sub	r4,zero,r4
  103eac:	01c00044 	movi	r7,1
  103eb0:	283ff60e 	bge	r5,zero,103e8c <black_to_red_frame+0xfe103e8c>
  103eb4:	014bc83a 	sub	r5,zero,r5
  103eb8:	39c0005c 	xori	r7,r7,1
  103ebc:	003ff306 	br	103e8c <black_to_red_frame+0xfe103e8c>

00103ec0 <__modsi3>:
  103ec0:	20000316 	blt	r4,zero,103ed0 <__modsi3+0x10>
  103ec4:	28000c16 	blt	r5,zero,103ef8 <__modsi3+0x38>
  103ec8:	01800044 	movi	r6,1
  103ecc:	0103e081 	jmpi	103e08 <udivmodsi4>
  103ed0:	deffff04 	addi	sp,sp,-4
  103ed4:	dfc00015 	stw	ra,0(sp)
  103ed8:	0109c83a 	sub	r4,zero,r4
  103edc:	28000916 	blt	r5,zero,103f04 <__modsi3+0x44>
  103ee0:	01800044 	movi	r6,1
  103ee4:	0103e080 	call	103e08 <udivmodsi4>
  103ee8:	0085c83a 	sub	r2,zero,r2
  103eec:	dfc00017 	ldw	ra,0(sp)
  103ef0:	dec00104 	addi	sp,sp,4
  103ef4:	f800283a 	ret
  103ef8:	014bc83a 	sub	r5,zero,r5
  103efc:	01800044 	movi	r6,1
  103f00:	0103e081 	jmpi	103e08 <udivmodsi4>
  103f04:	014bc83a 	sub	r5,zero,r5
  103f08:	003ff506 	br	103ee0 <black_to_red_frame+0xfe103ee0>

00103f0c <__udivsi3>:
  103f0c:	000d883a 	mov	r6,zero
  103f10:	0103e081 	jmpi	103e08 <udivmodsi4>

00103f14 <__umodsi3>:
  103f14:	01800044 	movi	r6,1
  103f18:	0103e081 	jmpi	103e08 <udivmodsi4>

00103f1c <__mulsi3>:
  103f1c:	0005883a 	mov	r2,zero
  103f20:	20000726 	beq	r4,zero,103f40 <__mulsi3+0x24>
  103f24:	20c0004c 	andi	r3,r4,1
  103f28:	2008d07a 	srli	r4,r4,1
  103f2c:	18000126 	beq	r3,zero,103f34 <__mulsi3+0x18>
  103f30:	1145883a 	add	r2,r2,r5
  103f34:	294b883a 	add	r5,r5,r5
  103f38:	203ffa1e 	bne	r4,zero,103f24 <black_to_red_frame+0xfe103f24>
  103f3c:	f800283a 	ret
  103f40:	f800283a 	ret

00103f44 <malloc>:
  103f44:	008004b4 	movhi	r2,18
  103f48:	10a1f404 	addi	r2,r2,-30768
  103f4c:	200b883a 	mov	r5,r4
  103f50:	11000017 	ldw	r4,0(r2)
  103f54:	0103f6c1 	jmpi	103f6c <_malloc_r>

00103f58 <free>:
  103f58:	008004b4 	movhi	r2,18
  103f5c:	10a1f404 	addi	r2,r2,-30768
  103f60:	200b883a 	mov	r5,r4
  103f64:	11000017 	ldw	r4,0(r2)
  103f68:	010ad101 	jmpi	10ad10 <_free_r>

00103f6c <_malloc_r>:
  103f6c:	defff504 	addi	sp,sp,-44
  103f70:	dc800315 	stw	r18,12(sp)
  103f74:	dfc00a15 	stw	ra,40(sp)
  103f78:	df000915 	stw	fp,36(sp)
  103f7c:	ddc00815 	stw	r23,32(sp)
  103f80:	dd800715 	stw	r22,28(sp)
  103f84:	dd400615 	stw	r21,24(sp)
  103f88:	dd000515 	stw	r20,20(sp)
  103f8c:	dcc00415 	stw	r19,16(sp)
  103f90:	dc400215 	stw	r17,8(sp)
  103f94:	dc000115 	stw	r16,4(sp)
  103f98:	288002c4 	addi	r2,r5,11
  103f9c:	00c00584 	movi	r3,22
  103fa0:	2025883a 	mov	r18,r4
  103fa4:	18802b2e 	bgeu	r3,r2,104054 <_malloc_r+0xe8>
  103fa8:	047ffe04 	movi	r17,-8
  103fac:	1462703a 	and	r17,r2,r17
  103fb0:	88002a16 	blt	r17,zero,10405c <_malloc_r+0xf0>
  103fb4:	89402936 	bltu	r17,r5,10405c <_malloc_r+0xf0>
  103fb8:	9009883a 	mov	r4,r18
  103fbc:	01141680 	call	114168 <__malloc_lock>
  103fc0:	00807dc4 	movi	r2,503
  103fc4:	14402936 	bltu	r2,r17,10406c <_malloc_r+0x100>
  103fc8:	8808d0fa 	srli	r4,r17,3
  103fcc:	04c00474 	movhi	r19,17
  103fd0:	9cdb0404 	addi	r19,r19,27664
  103fd4:	2105883a 	add	r2,r4,r4
  103fd8:	1085883a 	add	r2,r2,r2
  103fdc:	1085883a 	add	r2,r2,r2
  103fe0:	9885883a 	add	r2,r19,r2
  103fe4:	14000317 	ldw	r16,12(r2)
  103fe8:	80815226 	beq	r16,r2,104534 <_malloc_r+0x5c8>
  103fec:	81000117 	ldw	r4,4(r16)
  103ff0:	00bfff04 	movi	r2,-4
  103ff4:	80c00317 	ldw	r3,12(r16)
  103ff8:	2084703a 	and	r2,r4,r2
  103ffc:	8085883a 	add	r2,r16,r2
  104000:	81000217 	ldw	r4,8(r16)
  104004:	11400117 	ldw	r5,4(r2)
  104008:	20c00315 	stw	r3,12(r4)
  10400c:	19000215 	stw	r4,8(r3)
  104010:	28c00054 	ori	r3,r5,1
  104014:	10c00115 	stw	r3,4(r2)
  104018:	9009883a 	mov	r4,r18
  10401c:	011416c0 	call	11416c <__malloc_unlock>
  104020:	80800204 	addi	r2,r16,8
  104024:	dfc00a17 	ldw	ra,40(sp)
  104028:	df000917 	ldw	fp,36(sp)
  10402c:	ddc00817 	ldw	r23,32(sp)
  104030:	dd800717 	ldw	r22,28(sp)
  104034:	dd400617 	ldw	r21,24(sp)
  104038:	dd000517 	ldw	r20,20(sp)
  10403c:	dcc00417 	ldw	r19,16(sp)
  104040:	dc800317 	ldw	r18,12(sp)
  104044:	dc400217 	ldw	r17,8(sp)
  104048:	dc000117 	ldw	r16,4(sp)
  10404c:	dec00b04 	addi	sp,sp,44
  104050:	f800283a 	ret
  104054:	04400404 	movi	r17,16
  104058:	897fd72e 	bgeu	r17,r5,103fb8 <black_to_red_frame+0xfe103fb8>
  10405c:	00800304 	movi	r2,12
  104060:	90800015 	stw	r2,0(r18)
  104064:	0005883a 	mov	r2,zero
  104068:	003fee06 	br	104024 <black_to_red_frame+0xfe104024>
  10406c:	8808d27a 	srli	r4,r17,9
  104070:	20007126 	beq	r4,zero,104238 <_malloc_r+0x2cc>
  104074:	00800104 	movi	r2,4
  104078:	1100f536 	bltu	r2,r4,104450 <_malloc_r+0x4e4>
  10407c:	8808d1ba 	srli	r4,r17,6
  104080:	21000e04 	addi	r4,r4,56
  104084:	210b883a 	add	r5,r4,r4
  104088:	294b883a 	add	r5,r5,r5
  10408c:	294b883a 	add	r5,r5,r5
  104090:	04c00474 	movhi	r19,17
  104094:	9cdb0404 	addi	r19,r19,27664
  104098:	994b883a 	add	r5,r19,r5
  10409c:	2c000317 	ldw	r16,12(r5)
  1040a0:	2c000e26 	beq	r5,r16,1040dc <_malloc_r+0x170>
  1040a4:	80c00117 	ldw	r3,4(r16)
  1040a8:	01ffff04 	movi	r7,-4
  1040ac:	018003c4 	movi	r6,15
  1040b0:	19c6703a 	and	r3,r3,r7
  1040b4:	1c45c83a 	sub	r2,r3,r17
  1040b8:	30800716 	blt	r6,r2,1040d8 <_malloc_r+0x16c>
  1040bc:	1000610e 	bge	r2,zero,104244 <_malloc_r+0x2d8>
  1040c0:	84000317 	ldw	r16,12(r16)
  1040c4:	2c000526 	beq	r5,r16,1040dc <_malloc_r+0x170>
  1040c8:	80c00117 	ldw	r3,4(r16)
  1040cc:	19c6703a 	and	r3,r3,r7
  1040d0:	1c45c83a 	sub	r2,r3,r17
  1040d4:	30bff90e 	bge	r6,r2,1040bc <black_to_red_frame+0xfe1040bc>
  1040d8:	213fffc4 	addi	r4,r4,-1
  1040dc:	21000044 	addi	r4,r4,1
  1040e0:	9c000417 	ldw	r16,16(r19)
  1040e4:	00c00474 	movhi	r3,17
  1040e8:	18db0404 	addi	r3,r3,27664
  1040ec:	1a400204 	addi	r9,r3,8
  1040f0:	82410926 	beq	r16,r9,104518 <_malloc_r+0x5ac>
  1040f4:	81400117 	ldw	r5,4(r16)
  1040f8:	00bfff04 	movi	r2,-4
  1040fc:	018003c4 	movi	r6,15
  104100:	2884703a 	and	r2,r5,r2
  104104:	144bc83a 	sub	r5,r2,r17
  104108:	3140f416 	blt	r6,r5,1044dc <_malloc_r+0x570>
  10410c:	1a400515 	stw	r9,20(r3)
  104110:	1a400415 	stw	r9,16(r3)
  104114:	2800570e 	bge	r5,zero,104274 <_malloc_r+0x308>
  104118:	01407fc4 	movi	r5,511
  10411c:	2880d436 	bltu	r5,r2,104470 <_malloc_r+0x504>
  104120:	1004d0fa 	srli	r2,r2,3
  104124:	02000044 	movi	r8,1
  104128:	19c00117 	ldw	r7,4(r3)
  10412c:	108b883a 	add	r5,r2,r2
  104130:	294b883a 	add	r5,r5,r5
  104134:	1005d0ba 	srai	r2,r2,2
  104138:	294b883a 	add	r5,r5,r5
  10413c:	28cb883a 	add	r5,r5,r3
  104140:	29800217 	ldw	r6,8(r5)
  104144:	4084983a 	sll	r2,r8,r2
  104148:	81400315 	stw	r5,12(r16)
  10414c:	81800215 	stw	r6,8(r16)
  104150:	11c4b03a 	or	r2,r2,r7
  104154:	2c000215 	stw	r16,8(r5)
  104158:	18800115 	stw	r2,4(r3)
  10415c:	34000315 	stw	r16,12(r6)
  104160:	2007d0ba 	srai	r3,r4,2
  104164:	01400044 	movi	r5,1
  104168:	28ca983a 	sll	r5,r5,r3
  10416c:	11404936 	bltu	r2,r5,104294 <_malloc_r+0x328>
  104170:	1146703a 	and	r3,r2,r5
  104174:	18000a1e 	bne	r3,zero,1041a0 <_malloc_r+0x234>
  104178:	00ffff04 	movi	r3,-4
  10417c:	294b883a 	add	r5,r5,r5
  104180:	20c8703a 	and	r4,r4,r3
  104184:	1146703a 	and	r3,r2,r5
  104188:	21000104 	addi	r4,r4,4
  10418c:	1800041e 	bne	r3,zero,1041a0 <_malloc_r+0x234>
  104190:	294b883a 	add	r5,r5,r5
  104194:	1146703a 	and	r3,r2,r5
  104198:	21000104 	addi	r4,r4,4
  10419c:	183ffc26 	beq	r3,zero,104190 <black_to_red_frame+0xfe104190>
  1041a0:	023fff04 	movi	r8,-4
  1041a4:	01c003c4 	movi	r7,15
  1041a8:	2105883a 	add	r2,r4,r4
  1041ac:	1085883a 	add	r2,r2,r2
  1041b0:	1085883a 	add	r2,r2,r2
  1041b4:	9897883a 	add	r11,r19,r2
  1041b8:	5a800304 	addi	r10,r11,12
  1041bc:	2019883a 	mov	r12,r4
  1041c0:	54000017 	ldw	r16,0(r10)
  1041c4:	51bffd04 	addi	r6,r10,-12
  1041c8:	8180041e 	bne	r16,r6,1041dc <_malloc_r+0x270>
  1041cc:	0000d406 	br	104520 <_malloc_r+0x5b4>
  1041d0:	1000dd0e 	bge	r2,zero,104548 <_malloc_r+0x5dc>
  1041d4:	84000317 	ldw	r16,12(r16)
  1041d8:	8180d126 	beq	r16,r6,104520 <_malloc_r+0x5b4>
  1041dc:	80c00117 	ldw	r3,4(r16)
  1041e0:	1a06703a 	and	r3,r3,r8
  1041e4:	1c45c83a 	sub	r2,r3,r17
  1041e8:	38bff90e 	bge	r7,r2,1041d0 <black_to_red_frame+0xfe1041d0>
  1041ec:	80c00317 	ldw	r3,12(r16)
  1041f0:	81000217 	ldw	r4,8(r16)
  1041f4:	89400054 	ori	r5,r17,1
  1041f8:	81400115 	stw	r5,4(r16)
  1041fc:	20c00315 	stw	r3,12(r4)
  104200:	19000215 	stw	r4,8(r3)
  104204:	8463883a 	add	r17,r16,r17
  104208:	9c400515 	stw	r17,20(r19)
  10420c:	9c400415 	stw	r17,16(r19)
  104210:	10c00054 	ori	r3,r2,1
  104214:	8a400315 	stw	r9,12(r17)
  104218:	8a400215 	stw	r9,8(r17)
  10421c:	88c00115 	stw	r3,4(r17)
  104220:	88a3883a 	add	r17,r17,r2
  104224:	88800015 	stw	r2,0(r17)
  104228:	9009883a 	mov	r4,r18
  10422c:	011416c0 	call	11416c <__malloc_unlock>
  104230:	80800204 	addi	r2,r16,8
  104234:	003f7b06 	br	104024 <black_to_red_frame+0xfe104024>
  104238:	01401f84 	movi	r5,126
  10423c:	01000fc4 	movi	r4,63
  104240:	003f9106 	br	104088 <black_to_red_frame+0xfe104088>
  104244:	80800317 	ldw	r2,12(r16)
  104248:	81000217 	ldw	r4,8(r16)
  10424c:	80c7883a 	add	r3,r16,r3
  104250:	19400117 	ldw	r5,4(r3)
  104254:	20800315 	stw	r2,12(r4)
  104258:	11000215 	stw	r4,8(r2)
  10425c:	28800054 	ori	r2,r5,1
  104260:	18800115 	stw	r2,4(r3)
  104264:	9009883a 	mov	r4,r18
  104268:	011416c0 	call	11416c <__malloc_unlock>
  10426c:	80800204 	addi	r2,r16,8
  104270:	003f6c06 	br	104024 <black_to_red_frame+0xfe104024>
  104274:	8085883a 	add	r2,r16,r2
  104278:	10c00117 	ldw	r3,4(r2)
  10427c:	9009883a 	mov	r4,r18
  104280:	18c00054 	ori	r3,r3,1
  104284:	10c00115 	stw	r3,4(r2)
  104288:	011416c0 	call	11416c <__malloc_unlock>
  10428c:	80800204 	addi	r2,r16,8
  104290:	003f6406 	br	104024 <black_to_red_frame+0xfe104024>
  104294:	9c000217 	ldw	r16,8(r19)
  104298:	00bfff04 	movi	r2,-4
  10429c:	85400117 	ldw	r21,4(r16)
  1042a0:	a8aa703a 	and	r21,r21,r2
  1042a4:	ac400336 	bltu	r21,r17,1042b4 <_malloc_r+0x348>
  1042a8:	ac45c83a 	sub	r2,r21,r17
  1042ac:	00c003c4 	movi	r3,15
  1042b0:	18805d16 	blt	r3,r2,104428 <_malloc_r+0x4bc>
  1042b4:	008004b4 	movhi	r2,18
  1042b8:	10a90b04 	addi	r2,r2,-23508
  1042bc:	00c004b4 	movhi	r3,18
  1042c0:	18e1f104 	addi	r3,r3,-30780
  1042c4:	15c00017 	ldw	r23,0(r2)
  1042c8:	19000017 	ldw	r4,0(r3)
  1042cc:	00bfffc4 	movi	r2,-1
  1042d0:	8579883a 	add	fp,r16,r21
  1042d4:	8def883a 	add	r23,r17,r23
  1042d8:	2080e426 	beq	r4,r2,10466c <_malloc_r+0x700>
  1042dc:	bdc403c4 	addi	r23,r23,4111
  1042e0:	00bc0004 	movi	r2,-4096
  1042e4:	b8ae703a 	and	r23,r23,r2
  1042e8:	9009883a 	mov	r4,r18
  1042ec:	b80b883a 	mov	r5,r23
  1042f0:	d8c00015 	stw	r3,0(sp)
  1042f4:	01048880 	call	104888 <_sbrk_r>
  1042f8:	1029883a 	mov	r20,r2
  1042fc:	00bfffc4 	movi	r2,-1
  104300:	d8c00017 	ldw	r3,0(sp)
  104304:	a080a426 	beq	r20,r2,104598 <_malloc_r+0x62c>
  104308:	a700a236 	bltu	r20,fp,104594 <_malloc_r+0x628>
  10430c:	058004b4 	movhi	r22,18
  104310:	b5a91604 	addi	r22,r22,-23464
  104314:	b0800017 	ldw	r2,0(r22)
  104318:	b885883a 	add	r2,r23,r2
  10431c:	b0800015 	stw	r2,0(r22)
  104320:	e500da26 	beq	fp,r20,10468c <_malloc_r+0x720>
  104324:	19000017 	ldw	r4,0(r3)
  104328:	00ffffc4 	movi	r3,-1
  10432c:	20c0e426 	beq	r4,r3,1046c0 <_malloc_r+0x754>
  104330:	a739c83a 	sub	fp,r20,fp
  104334:	1705883a 	add	r2,r2,fp
  104338:	b0800015 	stw	r2,0(r22)
  10433c:	a08001cc 	andi	r2,r20,7
  104340:	1000b526 	beq	r2,zero,104618 <_malloc_r+0x6ac>
  104344:	a0a9c83a 	sub	r20,r20,r2
  104348:	00c40204 	movi	r3,4104
  10434c:	a5000204 	addi	r20,r20,8
  104350:	1885c83a 	sub	r2,r3,r2
  104354:	a5c7883a 	add	r3,r20,r23
  104358:	18c3ffcc 	andi	r3,r3,4095
  10435c:	10efc83a 	sub	r23,r2,r3
  104360:	9009883a 	mov	r4,r18
  104364:	b80b883a 	mov	r5,r23
  104368:	01048880 	call	104888 <_sbrk_r>
  10436c:	00ffffc4 	movi	r3,-1
  104370:	10c0d026 	beq	r2,r3,1046b4 <_malloc_r+0x748>
  104374:	1505c83a 	sub	r2,r2,r20
  104378:	b887883a 	add	r3,r23,r2
  10437c:	18c00054 	ori	r3,r3,1
  104380:	b0800017 	ldw	r2,0(r22)
  104384:	9d000215 	stw	r20,8(r19)
  104388:	a0c00115 	stw	r3,4(r20)
  10438c:	b885883a 	add	r2,r23,r2
  104390:	b0800015 	stw	r2,0(r22)
  104394:	84c00e26 	beq	r16,r19,1043d0 <_malloc_r+0x464>
  104398:	00c003c4 	movi	r3,15
  10439c:	1d40a02e 	bgeu	r3,r21,104620 <_malloc_r+0x6b4>
  1043a0:	81400117 	ldw	r5,4(r16)
  1043a4:	ad7ffd04 	addi	r21,r21,-12
  1043a8:	013ffe04 	movi	r4,-8
  1043ac:	a908703a 	and	r4,r21,r4
  1043b0:	2940004c 	andi	r5,r5,1
  1043b4:	214ab03a 	or	r5,r4,r5
  1043b8:	81400115 	stw	r5,4(r16)
  1043bc:	01800144 	movi	r6,5
  1043c0:	810b883a 	add	r5,r16,r4
  1043c4:	29800115 	stw	r6,4(r5)
  1043c8:	29800215 	stw	r6,8(r5)
  1043cc:	1900c036 	bltu	r3,r4,1046d0 <_malloc_r+0x764>
  1043d0:	00c004b4 	movhi	r3,18
  1043d4:	18e90a04 	addi	r3,r3,-23512
  1043d8:	19000017 	ldw	r4,0(r3)
  1043dc:	2080012e 	bgeu	r4,r2,1043e4 <_malloc_r+0x478>
  1043e0:	18800015 	stw	r2,0(r3)
  1043e4:	00c004b4 	movhi	r3,18
  1043e8:	18e90904 	addi	r3,r3,-23516
  1043ec:	19000017 	ldw	r4,0(r3)
  1043f0:	9c000217 	ldw	r16,8(r19)
  1043f4:	2080012e 	bgeu	r4,r2,1043fc <_malloc_r+0x490>
  1043f8:	18800015 	stw	r2,0(r3)
  1043fc:	80c00117 	ldw	r3,4(r16)
  104400:	00bfff04 	movi	r2,-4
  104404:	1886703a 	and	r3,r3,r2
  104408:	1c45c83a 	sub	r2,r3,r17
  10440c:	1c400236 	bltu	r3,r17,104418 <_malloc_r+0x4ac>
  104410:	00c003c4 	movi	r3,15
  104414:	18800416 	blt	r3,r2,104428 <_malloc_r+0x4bc>
  104418:	9009883a 	mov	r4,r18
  10441c:	011416c0 	call	11416c <__malloc_unlock>
  104420:	0005883a 	mov	r2,zero
  104424:	003eff06 	br	104024 <black_to_red_frame+0xfe104024>
  104428:	88c00054 	ori	r3,r17,1
  10442c:	80c00115 	stw	r3,4(r16)
  104430:	8463883a 	add	r17,r16,r17
  104434:	10800054 	ori	r2,r2,1
  104438:	9c400215 	stw	r17,8(r19)
  10443c:	88800115 	stw	r2,4(r17)
  104440:	9009883a 	mov	r4,r18
  104444:	011416c0 	call	11416c <__malloc_unlock>
  104448:	80800204 	addi	r2,r16,8
  10444c:	003ef506 	br	104024 <black_to_red_frame+0xfe104024>
  104450:	00800504 	movi	r2,20
  104454:	1100482e 	bgeu	r2,r4,104578 <_malloc_r+0x60c>
  104458:	00801504 	movi	r2,84
  10445c:	11006836 	bltu	r2,r4,104600 <_malloc_r+0x694>
  104460:	8808d33a 	srli	r4,r17,12
  104464:	21001b84 	addi	r4,r4,110
  104468:	210b883a 	add	r5,r4,r4
  10446c:	003f0606 	br	104088 <black_to_red_frame+0xfe104088>
  104470:	1006d27a 	srli	r3,r2,9
  104474:	01400104 	movi	r5,4
  104478:	28c0422e 	bgeu	r5,r3,104584 <_malloc_r+0x618>
  10447c:	01400504 	movi	r5,20
  104480:	28c07c36 	bltu	r5,r3,104674 <_malloc_r+0x708>
  104484:	194016c4 	addi	r5,r3,91
  104488:	294d883a 	add	r6,r5,r5
  10448c:	318d883a 	add	r6,r6,r6
  104490:	318d883a 	add	r6,r6,r6
  104494:	998d883a 	add	r6,r19,r6
  104498:	30c00217 	ldw	r3,8(r6)
  10449c:	01c00474 	movhi	r7,17
  1044a0:	39db0404 	addi	r7,r7,27664
  1044a4:	19806326 	beq	r3,r6,104634 <_malloc_r+0x6c8>
  1044a8:	01ffff04 	movi	r7,-4
  1044ac:	19400117 	ldw	r5,4(r3)
  1044b0:	29ca703a 	and	r5,r5,r7
  1044b4:	1140022e 	bgeu	r2,r5,1044c0 <_malloc_r+0x554>
  1044b8:	18c00217 	ldw	r3,8(r3)
  1044bc:	30fffb1e 	bne	r6,r3,1044ac <black_to_red_frame+0xfe1044ac>
  1044c0:	19400317 	ldw	r5,12(r3)
  1044c4:	98800117 	ldw	r2,4(r19)
  1044c8:	81400315 	stw	r5,12(r16)
  1044cc:	80c00215 	stw	r3,8(r16)
  1044d0:	2c000215 	stw	r16,8(r5)
  1044d4:	1c000315 	stw	r16,12(r3)
  1044d8:	003f2106 	br	104160 <black_to_red_frame+0xfe104160>
  1044dc:	88800054 	ori	r2,r17,1
  1044e0:	80800115 	stw	r2,4(r16)
  1044e4:	8463883a 	add	r17,r16,r17
  1044e8:	1c400515 	stw	r17,20(r3)
  1044ec:	1c400415 	stw	r17,16(r3)
  1044f0:	28800054 	ori	r2,r5,1
  1044f4:	88800115 	stw	r2,4(r17)
  1044f8:	8a400315 	stw	r9,12(r17)
  1044fc:	8a400215 	stw	r9,8(r17)
  104500:	8963883a 	add	r17,r17,r5
  104504:	89400015 	stw	r5,0(r17)
  104508:	9009883a 	mov	r4,r18
  10450c:	011416c0 	call	11416c <__malloc_unlock>
  104510:	80800204 	addi	r2,r16,8
  104514:	003ec306 	br	104024 <black_to_red_frame+0xfe104024>
  104518:	18800117 	ldw	r2,4(r3)
  10451c:	003f1006 	br	104160 <black_to_red_frame+0xfe104160>
  104520:	63000044 	addi	r12,r12,1
  104524:	608000cc 	andi	r2,r12,3
  104528:	52800204 	addi	r10,r10,8
  10452c:	103f241e 	bne	r2,zero,1041c0 <black_to_red_frame+0xfe1041c0>
  104530:	00002106 	br	1045b8 <_malloc_r+0x64c>
  104534:	80800204 	addi	r2,r16,8
  104538:	84000517 	ldw	r16,20(r16)
  10453c:	143eab1e 	bne	r2,r16,103fec <black_to_red_frame+0xfe103fec>
  104540:	21000084 	addi	r4,r4,2
  104544:	003ee606 	br	1040e0 <black_to_red_frame+0xfe1040e0>
  104548:	80c7883a 	add	r3,r16,r3
  10454c:	19400117 	ldw	r5,4(r3)
  104550:	80800317 	ldw	r2,12(r16)
  104554:	81000217 	ldw	r4,8(r16)
  104558:	29400054 	ori	r5,r5,1
  10455c:	19400115 	stw	r5,4(r3)
  104560:	20800315 	stw	r2,12(r4)
  104564:	11000215 	stw	r4,8(r2)
  104568:	9009883a 	mov	r4,r18
  10456c:	011416c0 	call	11416c <__malloc_unlock>
  104570:	80800204 	addi	r2,r16,8
  104574:	003eab06 	br	104024 <black_to_red_frame+0xfe104024>
  104578:	210016c4 	addi	r4,r4,91
  10457c:	210b883a 	add	r5,r4,r4
  104580:	003ec106 	br	104088 <black_to_red_frame+0xfe104088>
  104584:	100ad1ba 	srli	r5,r2,6
  104588:	29400e04 	addi	r5,r5,56
  10458c:	294d883a 	add	r6,r5,r5
  104590:	003fbe06 	br	10448c <black_to_red_frame+0xfe10448c>
  104594:	84ff5d26 	beq	r16,r19,10430c <black_to_red_frame+0xfe10430c>
  104598:	9c000217 	ldw	r16,8(r19)
  10459c:	00bfff04 	movi	r2,-4
  1045a0:	80c00117 	ldw	r3,4(r16)
  1045a4:	1886703a 	and	r3,r3,r2
  1045a8:	003f9706 	br	104408 <black_to_red_frame+0xfe104408>
  1045ac:	5ac00017 	ldw	r11,0(r11)
  1045b0:	213fffc4 	addi	r4,r4,-1
  1045b4:	58805c1e 	bne	r11,r2,104728 <_malloc_r+0x7bc>
  1045b8:	20c000cc 	andi	r3,r4,3
  1045bc:	58bffe04 	addi	r2,r11,-8
  1045c0:	183ffa1e 	bne	r3,zero,1045ac <black_to_red_frame+0xfe1045ac>
  1045c4:	98800117 	ldw	r2,4(r19)
  1045c8:	0146303a 	nor	r3,zero,r5
  1045cc:	1884703a 	and	r2,r3,r2
  1045d0:	98800115 	stw	r2,4(r19)
  1045d4:	294b883a 	add	r5,r5,r5
  1045d8:	117f2e36 	bltu	r2,r5,104294 <black_to_red_frame+0xfe104294>
  1045dc:	283f2d26 	beq	r5,zero,104294 <black_to_red_frame+0xfe104294>
  1045e0:	1146703a 	and	r3,r2,r5
  1045e4:	6009883a 	mov	r4,r12
  1045e8:	183eef1e 	bne	r3,zero,1041a8 <black_to_red_frame+0xfe1041a8>
  1045ec:	294b883a 	add	r5,r5,r5
  1045f0:	1146703a 	and	r3,r2,r5
  1045f4:	21000104 	addi	r4,r4,4
  1045f8:	183ffc26 	beq	r3,zero,1045ec <black_to_red_frame+0xfe1045ec>
  1045fc:	003eea06 	br	1041a8 <black_to_red_frame+0xfe1041a8>
  104600:	00805504 	movi	r2,340
  104604:	11001336 	bltu	r2,r4,104654 <_malloc_r+0x6e8>
  104608:	8808d3fa 	srli	r4,r17,15
  10460c:	21001dc4 	addi	r4,r4,119
  104610:	210b883a 	add	r5,r4,r4
  104614:	003e9c06 	br	104088 <black_to_red_frame+0xfe104088>
  104618:	00840004 	movi	r2,4096
  10461c:	003f4d06 	br	104354 <black_to_red_frame+0xfe104354>
  104620:	00800044 	movi	r2,1
  104624:	a0800115 	stw	r2,4(r20)
  104628:	a021883a 	mov	r16,r20
  10462c:	0007883a 	mov	r3,zero
  104630:	003f7506 	br	104408 <black_to_red_frame+0xfe104408>
  104634:	280bd0ba 	srai	r5,r5,2
  104638:	01800044 	movi	r6,1
  10463c:	38800117 	ldw	r2,4(r7)
  104640:	314c983a 	sll	r6,r6,r5
  104644:	180b883a 	mov	r5,r3
  104648:	3084b03a 	or	r2,r6,r2
  10464c:	38800115 	stw	r2,4(r7)
  104650:	003f9d06 	br	1044c8 <black_to_red_frame+0xfe1044c8>
  104654:	00815504 	movi	r2,1364
  104658:	11001336 	bltu	r2,r4,1046a8 <_malloc_r+0x73c>
  10465c:	8808d4ba 	srli	r4,r17,18
  104660:	21001f04 	addi	r4,r4,124
  104664:	210b883a 	add	r5,r4,r4
  104668:	003e8706 	br	104088 <black_to_red_frame+0xfe104088>
  10466c:	bdc00404 	addi	r23,r23,16
  104670:	003f1d06 	br	1042e8 <black_to_red_frame+0xfe1042e8>
  104674:	01401504 	movi	r5,84
  104678:	28c01c36 	bltu	r5,r3,1046ec <_malloc_r+0x780>
  10467c:	100ad33a 	srli	r5,r2,12
  104680:	29401b84 	addi	r5,r5,110
  104684:	294d883a 	add	r6,r5,r5
  104688:	003f8006 	br	10448c <black_to_red_frame+0xfe10448c>
  10468c:	e103ffcc 	andi	r4,fp,4095
  104690:	203f241e 	bne	r4,zero,104324 <black_to_red_frame+0xfe104324>
  104694:	98c00217 	ldw	r3,8(r19)
  104698:	bd49883a 	add	r4,r23,r21
  10469c:	21000054 	ori	r4,r4,1
  1046a0:	19000115 	stw	r4,4(r3)
  1046a4:	003f4a06 	br	1043d0 <black_to_red_frame+0xfe1043d0>
  1046a8:	01403f04 	movi	r5,252
  1046ac:	01001f84 	movi	r4,126
  1046b0:	003e7506 	br	104088 <black_to_red_frame+0xfe104088>
  1046b4:	00c00044 	movi	r3,1
  1046b8:	002f883a 	mov	r23,zero
  1046bc:	003f3006 	br	104380 <black_to_red_frame+0xfe104380>
  1046c0:	008004b4 	movhi	r2,18
  1046c4:	10a1f104 	addi	r2,r2,-30780
  1046c8:	15000015 	stw	r20,0(r2)
  1046cc:	003f1b06 	br	10433c <black_to_red_frame+0xfe10433c>
  1046d0:	9009883a 	mov	r4,r18
  1046d4:	81400204 	addi	r5,r16,8
  1046d8:	010ad100 	call	10ad10 <_free_r>
  1046dc:	008004b4 	movhi	r2,18
  1046e0:	10a91604 	addi	r2,r2,-23464
  1046e4:	10800017 	ldw	r2,0(r2)
  1046e8:	003f3906 	br	1043d0 <black_to_red_frame+0xfe1043d0>
  1046ec:	01405504 	movi	r5,340
  1046f0:	28c00436 	bltu	r5,r3,104704 <_malloc_r+0x798>
  1046f4:	100ad3fa 	srli	r5,r2,15
  1046f8:	29401dc4 	addi	r5,r5,119
  1046fc:	294d883a 	add	r6,r5,r5
  104700:	003f6206 	br	10448c <black_to_red_frame+0xfe10448c>
  104704:	01415504 	movi	r5,1364
  104708:	28c00436 	bltu	r5,r3,10471c <_malloc_r+0x7b0>
  10470c:	100ad4ba 	srli	r5,r2,18
  104710:	29401f04 	addi	r5,r5,124
  104714:	294d883a 	add	r6,r5,r5
  104718:	003f5c06 	br	10448c <black_to_red_frame+0xfe10448c>
  10471c:	01803f04 	movi	r6,252
  104720:	01401f84 	movi	r5,126
  104724:	003f5906 	br	10448c <black_to_red_frame+0xfe10448c>
  104728:	98800117 	ldw	r2,4(r19)
  10472c:	003fa906 	br	1045d4 <black_to_red_frame+0xfe1045d4>

00104730 <_printf_r>:
  104730:	defffd04 	addi	sp,sp,-12
  104734:	dfc00015 	stw	ra,0(sp)
  104738:	d9800115 	stw	r6,4(sp)
  10473c:	d9c00215 	stw	r7,8(sp)
  104740:	280d883a 	mov	r6,r5
  104744:	21400217 	ldw	r5,8(r4)
  104748:	d9c00104 	addi	r7,sp,4
  10474c:	0106aa80 	call	106aa8 <___vfprintf_internal_r>
  104750:	dfc00017 	ldw	ra,0(sp)
  104754:	dec00304 	addi	sp,sp,12
  104758:	f800283a 	ret

0010475c <printf>:
  10475c:	defffc04 	addi	sp,sp,-16
  104760:	dfc00015 	stw	ra,0(sp)
  104764:	d9400115 	stw	r5,4(sp)
  104768:	d9800215 	stw	r6,8(sp)
  10476c:	d9c00315 	stw	r7,12(sp)
  104770:	008004b4 	movhi	r2,18
  104774:	10a1f404 	addi	r2,r2,-30768
  104778:	10800017 	ldw	r2,0(r2)
  10477c:	200b883a 	mov	r5,r4
  104780:	d9800104 	addi	r6,sp,4
  104784:	11000217 	ldw	r4,8(r2)
  104788:	0108bfc0 	call	108bfc <__vfprintf_internal>
  10478c:	dfc00017 	ldw	ra,0(sp)
  104790:	dec00404 	addi	sp,sp,16
  104794:	f800283a 	ret

00104798 <_putchar_r>:
  104798:	21800217 	ldw	r6,8(r4)
  10479c:	010cce01 	jmpi	10cce0 <_putc_r>

001047a0 <putchar>:
  1047a0:	008004b4 	movhi	r2,18
  1047a4:	10a1f404 	addi	r2,r2,-30768
  1047a8:	10800017 	ldw	r2,0(r2)
  1047ac:	200b883a 	mov	r5,r4
  1047b0:	11800217 	ldw	r6,8(r2)
  1047b4:	1009883a 	mov	r4,r2
  1047b8:	010cce01 	jmpi	10cce0 <_putc_r>

001047bc <_puts_r>:
  1047bc:	defff604 	addi	sp,sp,-40
  1047c0:	dc400815 	stw	r17,32(sp)
  1047c4:	2023883a 	mov	r17,r4
  1047c8:	2809883a 	mov	r4,r5
  1047cc:	dc000715 	stw	r16,28(sp)
  1047d0:	dfc00915 	stw	ra,36(sp)
  1047d4:	2821883a 	mov	r16,r5
  1047d8:	01049b00 	call	1049b0 <strlen>
  1047dc:	00c004b4 	movhi	r3,18
  1047e0:	18e1f404 	addi	r3,r3,-30768
  1047e4:	18c00017 	ldw	r3,0(r3)
  1047e8:	11000044 	addi	r4,r2,1
  1047ec:	d8800115 	stw	r2,4(sp)
  1047f0:	18c00217 	ldw	r3,8(r3)
  1047f4:	00800474 	movhi	r2,17
  1047f8:	109a2904 	addi	r2,r2,26788
  1047fc:	d8800215 	stw	r2,8(sp)
  104800:	1940030b 	ldhu	r5,12(r3)
  104804:	00800044 	movi	r2,1
  104808:	d8800315 	stw	r2,12(sp)
  10480c:	00800084 	movi	r2,2
  104810:	d8800515 	stw	r2,20(sp)
  104814:	dc000015 	stw	r16,0(sp)
  104818:	d9000615 	stw	r4,24(sp)
  10481c:	dec00415 	stw	sp,16(sp)
  104820:	2888000c 	andi	r2,r5,8192
  104824:	1000061e 	bne	r2,zero,104840 <_puts_r+0x84>
  104828:	19001917 	ldw	r4,100(r3)
  10482c:	00b7ffc4 	movi	r2,-8193
  104830:	29480014 	ori	r5,r5,8192
  104834:	2084703a 	and	r2,r4,r2
  104838:	1940030d 	sth	r5,12(r3)
  10483c:	18801915 	stw	r2,100(r3)
  104840:	89400217 	ldw	r5,8(r17)
  104844:	8809883a 	mov	r4,r17
  104848:	d9800404 	addi	r6,sp,16
  10484c:	010afe00 	call	10afe0 <__sfvwrite_r>
  104850:	1000061e 	bne	r2,zero,10486c <_puts_r+0xb0>
  104854:	00800284 	movi	r2,10
  104858:	dfc00917 	ldw	ra,36(sp)
  10485c:	dc400817 	ldw	r17,32(sp)
  104860:	dc000717 	ldw	r16,28(sp)
  104864:	dec00a04 	addi	sp,sp,40
  104868:	f800283a 	ret
  10486c:	00bfffc4 	movi	r2,-1
  104870:	003ff906 	br	104858 <black_to_red_frame+0xfe104858>

00104874 <puts>:
  104874:	008004b4 	movhi	r2,18
  104878:	10a1f404 	addi	r2,r2,-30768
  10487c:	200b883a 	mov	r5,r4
  104880:	11000017 	ldw	r4,0(r2)
  104884:	01047bc1 	jmpi	1047bc <_puts_r>

00104888 <_sbrk_r>:
  104888:	defffd04 	addi	sp,sp,-12
  10488c:	dc400115 	stw	r17,4(sp)
  104890:	dc000015 	stw	r16,0(sp)
  104894:	2023883a 	mov	r17,r4
  104898:	040004b4 	movhi	r16,18
  10489c:	84290c04 	addi	r16,r16,-23504
  1048a0:	2809883a 	mov	r4,r5
  1048a4:	dfc00215 	stw	ra,8(sp)
  1048a8:	80000015 	stw	zero,0(r16)
  1048ac:	01142c80 	call	1142c8 <sbrk>
  1048b0:	00ffffc4 	movi	r3,-1
  1048b4:	10c00526 	beq	r2,r3,1048cc <_sbrk_r+0x44>
  1048b8:	dfc00217 	ldw	ra,8(sp)
  1048bc:	dc400117 	ldw	r17,4(sp)
  1048c0:	dc000017 	ldw	r16,0(sp)
  1048c4:	dec00304 	addi	sp,sp,12
  1048c8:	f800283a 	ret
  1048cc:	80c00017 	ldw	r3,0(r16)
  1048d0:	183ff926 	beq	r3,zero,1048b8 <black_to_red_frame+0xfe1048b8>
  1048d4:	88c00015 	stw	r3,0(r17)
  1048d8:	dfc00217 	ldw	ra,8(sp)
  1048dc:	dc400117 	ldw	r17,4(sp)
  1048e0:	dc000017 	ldw	r16,0(sp)
  1048e4:	dec00304 	addi	sp,sp,12
  1048e8:	f800283a 	ret

001048ec <_sprintf_r>:
  1048ec:	deffe404 	addi	sp,sp,-112
  1048f0:	2807883a 	mov	r3,r5
  1048f4:	dfc01a15 	stw	ra,104(sp)
  1048f8:	d9c01b15 	stw	r7,108(sp)
  1048fc:	00a00034 	movhi	r2,32768
  104900:	10bfffc4 	addi	r2,r2,-1
  104904:	02008204 	movi	r8,520
  104908:	d8800215 	stw	r2,8(sp)
  10490c:	d8800515 	stw	r2,20(sp)
  104910:	d80b883a 	mov	r5,sp
  104914:	d9c01b04 	addi	r7,sp,108
  104918:	00bfffc4 	movi	r2,-1
  10491c:	d8c00015 	stw	r3,0(sp)
  104920:	d8c00415 	stw	r3,16(sp)
  104924:	da00030d 	sth	r8,12(sp)
  104928:	d880038d 	sth	r2,14(sp)
  10492c:	0104a3c0 	call	104a3c <___svfprintf_internal_r>
  104930:	d8c00017 	ldw	r3,0(sp)
  104934:	18000005 	stb	zero,0(r3)
  104938:	dfc01a17 	ldw	ra,104(sp)
  10493c:	dec01c04 	addi	sp,sp,112
  104940:	f800283a 	ret

00104944 <sprintf>:
  104944:	deffe304 	addi	sp,sp,-116
  104948:	2007883a 	mov	r3,r4
  10494c:	dfc01a15 	stw	ra,104(sp)
  104950:	d9801b15 	stw	r6,108(sp)
  104954:	d9c01c15 	stw	r7,112(sp)
  104958:	008004b4 	movhi	r2,18
  10495c:	10a1f404 	addi	r2,r2,-30768
  104960:	11000017 	ldw	r4,0(r2)
  104964:	00a00034 	movhi	r2,32768
  104968:	10bfffc4 	addi	r2,r2,-1
  10496c:	280d883a 	mov	r6,r5
  104970:	02008204 	movi	r8,520
  104974:	d8800215 	stw	r2,8(sp)
  104978:	d8800515 	stw	r2,20(sp)
  10497c:	d80b883a 	mov	r5,sp
  104980:	d9c01b04 	addi	r7,sp,108
  104984:	00bfffc4 	movi	r2,-1
  104988:	d8c00015 	stw	r3,0(sp)
  10498c:	d8c00415 	stw	r3,16(sp)
  104990:	da00030d 	sth	r8,12(sp)
  104994:	d880038d 	sth	r2,14(sp)
  104998:	0104a3c0 	call	104a3c <___svfprintf_internal_r>
  10499c:	d8c00017 	ldw	r3,0(sp)
  1049a0:	18000005 	stb	zero,0(r3)
  1049a4:	dfc01a17 	ldw	ra,104(sp)
  1049a8:	dec01d04 	addi	sp,sp,116
  1049ac:	f800283a 	ret

001049b0 <strlen>:
  1049b0:	208000cc 	andi	r2,r4,3
  1049b4:	10001d26 	beq	r2,zero,104a2c <strlen+0x7c>
  1049b8:	20800007 	ldb	r2,0(r4)
  1049bc:	10001d26 	beq	r2,zero,104a34 <strlen+0x84>
  1049c0:	2005883a 	mov	r2,r4
  1049c4:	00000206 	br	1049d0 <strlen+0x20>
  1049c8:	10c00007 	ldb	r3,0(r2)
  1049cc:	18001526 	beq	r3,zero,104a24 <strlen+0x74>
  1049d0:	10800044 	addi	r2,r2,1
  1049d4:	10c000cc 	andi	r3,r2,3
  1049d8:	183ffb1e 	bne	r3,zero,1049c8 <black_to_red_frame+0xfe1049c8>
  1049dc:	10c00017 	ldw	r3,0(r2)
  1049e0:	01ffbff4 	movhi	r7,65279
  1049e4:	39ffbfc4 	addi	r7,r7,-257
  1049e8:	01a02074 	movhi	r6,32897
  1049ec:	31a02004 	addi	r6,r6,-32640
  1049f0:	00000206 	br	1049fc <strlen+0x4c>
  1049f4:	10800104 	addi	r2,r2,4
  1049f8:	10c00017 	ldw	r3,0(r2)
  1049fc:	19cb883a 	add	r5,r3,r7
  104a00:	00c6303a 	nor	r3,zero,r3
  104a04:	28c6703a 	and	r3,r5,r3
  104a08:	1986703a 	and	r3,r3,r6
  104a0c:	183ff926 	beq	r3,zero,1049f4 <black_to_red_frame+0xfe1049f4>
  104a10:	10c00007 	ldb	r3,0(r2)
  104a14:	18000326 	beq	r3,zero,104a24 <strlen+0x74>
  104a18:	10800044 	addi	r2,r2,1
  104a1c:	10c00007 	ldb	r3,0(r2)
  104a20:	183ffd1e 	bne	r3,zero,104a18 <black_to_red_frame+0xfe104a18>
  104a24:	1105c83a 	sub	r2,r2,r4
  104a28:	f800283a 	ret
  104a2c:	2005883a 	mov	r2,r4
  104a30:	003fea06 	br	1049dc <black_to_red_frame+0xfe1049dc>
  104a34:	0005883a 	mov	r2,zero
  104a38:	f800283a 	ret

00104a3c <___svfprintf_internal_r>:
  104a3c:	deffb504 	addi	sp,sp,-300
  104a40:	dfc04a15 	stw	ra,296(sp)
  104a44:	dcc04415 	stw	r19,272(sp)
  104a48:	d9402e15 	stw	r5,184(sp)
  104a4c:	d9003115 	stw	r4,196(sp)
  104a50:	3027883a 	mov	r19,r6
  104a54:	d9c02f15 	stw	r7,188(sp)
  104a58:	df004915 	stw	fp,292(sp)
  104a5c:	ddc04815 	stw	r23,288(sp)
  104a60:	dd804715 	stw	r22,284(sp)
  104a64:	dd404615 	stw	r21,280(sp)
  104a68:	dd004515 	stw	r20,276(sp)
  104a6c:	dc804315 	stw	r18,268(sp)
  104a70:	dc404215 	stw	r17,264(sp)
  104a74:	dc004115 	stw	r16,260(sp)
  104a78:	010b68c0 	call	10b68c <_localeconv_r>
  104a7c:	10800017 	ldw	r2,0(r2)
  104a80:	1009883a 	mov	r4,r2
  104a84:	d8803515 	stw	r2,212(sp)
  104a88:	01049b00 	call	1049b0 <strlen>
  104a8c:	d8c02e17 	ldw	r3,184(sp)
  104a90:	d8803915 	stw	r2,228(sp)
  104a94:	1880030b 	ldhu	r2,12(r3)
  104a98:	1080200c 	andi	r2,r2,128
  104a9c:	10000226 	beq	r2,zero,104aa8 <___svfprintf_internal_r+0x6c>
  104aa0:	18800417 	ldw	r2,16(r3)
  104aa4:	10068926 	beq	r2,zero,1064cc <___svfprintf_internal_r+0x1a90>
  104aa8:	d8c01e04 	addi	r3,sp,120
  104aac:	d9001dc4 	addi	r4,sp,119
  104ab0:	d9400404 	addi	r5,sp,16
  104ab4:	1905c83a 	sub	r2,r3,r4
  104ab8:	d8c02815 	stw	r3,160(sp)
  104abc:	d9002915 	stw	r4,164(sp)
  104ac0:	d9401e15 	stw	r5,120(sp)
  104ac4:	d8002015 	stw	zero,128(sp)
  104ac8:	d8001f15 	stw	zero,124(sp)
  104acc:	d8003415 	stw	zero,208(sp)
  104ad0:	d8003715 	stw	zero,220(sp)
  104ad4:	d8003815 	stw	zero,224(sp)
  104ad8:	d8003b15 	stw	zero,236(sp)
  104adc:	d8003a15 	stw	zero,232(sp)
  104ae0:	d8003215 	stw	zero,200(sp)
  104ae4:	2811883a 	mov	r8,r5
  104ae8:	05c00474 	movhi	r23,17
  104aec:	bdda3a84 	addi	r23,r23,26858
  104af0:	d8803e15 	stw	r2,248(sp)
  104af4:	98800007 	ldb	r2,0(r19)
  104af8:	1001dd26 	beq	r2,zero,105270 <___svfprintf_internal_r+0x834>
  104afc:	00c00944 	movi	r3,37
  104b00:	9821883a 	mov	r16,r19
  104b04:	10c0021e 	bne	r2,r3,104b10 <___svfprintf_internal_r+0xd4>
  104b08:	00001406 	br	104b5c <___svfprintf_internal_r+0x120>
  104b0c:	10c00326 	beq	r2,r3,104b1c <___svfprintf_internal_r+0xe0>
  104b10:	84000044 	addi	r16,r16,1
  104b14:	80800007 	ldb	r2,0(r16)
  104b18:	103ffc1e 	bne	r2,zero,104b0c <black_to_red_frame+0xfe104b0c>
  104b1c:	84e3c83a 	sub	r17,r16,r19
  104b20:	88000e26 	beq	r17,zero,104b5c <___svfprintf_internal_r+0x120>
  104b24:	d8c02017 	ldw	r3,128(sp)
  104b28:	d8801f17 	ldw	r2,124(sp)
  104b2c:	44c00015 	stw	r19,0(r8)
  104b30:	1c47883a 	add	r3,r3,r17
  104b34:	10800044 	addi	r2,r2,1
  104b38:	d8c02015 	stw	r3,128(sp)
  104b3c:	44400115 	stw	r17,4(r8)
  104b40:	d8801f15 	stw	r2,124(sp)
  104b44:	00c001c4 	movi	r3,7
  104b48:	18807e16 	blt	r3,r2,104d44 <___svfprintf_internal_r+0x308>
  104b4c:	42000204 	addi	r8,r8,8
  104b50:	d8c03217 	ldw	r3,200(sp)
  104b54:	1c47883a 	add	r3,r3,r17
  104b58:	d8c03215 	stw	r3,200(sp)
  104b5c:	80800007 	ldb	r2,0(r16)
  104b60:	10007f26 	beq	r2,zero,104d60 <___svfprintf_internal_r+0x324>
  104b64:	04bfffc4 	movi	r18,-1
  104b68:	84c00044 	addi	r19,r16,1
  104b6c:	84400047 	ldb	r17,1(r16)
  104b70:	d8002785 	stb	zero,158(sp)
  104b74:	002b883a 	mov	r21,zero
  104b78:	d8003015 	stw	zero,192(sp)
  104b7c:	d8002a15 	stw	zero,168(sp)
  104b80:	04001604 	movi	r16,88
  104b84:	05000244 	movi	r20,9
  104b88:	07000a84 	movi	fp,42
  104b8c:	402d883a 	mov	r22,r8
  104b90:	9007883a 	mov	r3,r18
  104b94:	9cc00044 	addi	r19,r19,1
  104b98:	88bff804 	addi	r2,r17,-32
  104b9c:	8082f436 	bltu	r16,r2,105770 <___svfprintf_internal_r+0xd34>
  104ba0:	1085883a 	add	r2,r2,r2
  104ba4:	1085883a 	add	r2,r2,r2
  104ba8:	01000434 	movhi	r4,16
  104bac:	2112ef04 	addi	r4,r4,19388
  104bb0:	1105883a 	add	r2,r2,r4
  104bb4:	10800017 	ldw	r2,0(r2)
  104bb8:	1000683a 	jmp	r2
  104bbc:	001054ec 	andhi	zero,zero,16723
  104bc0:	00105770 	cmpltui	zero,zero,16733
  104bc4:	00105770 	cmpltui	zero,zero,16733
  104bc8:	00105508 	cmpgei	zero,zero,16724
  104bcc:	00105770 	cmpltui	zero,zero,16733
  104bd0:	00105770 	cmpltui	zero,zero,16733
  104bd4:	00105770 	cmpltui	zero,zero,16733
  104bd8:	00105770 	cmpltui	zero,zero,16733
  104bdc:	00105770 	cmpltui	zero,zero,16733
  104be0:	00105770 	cmpltui	zero,zero,16733
  104be4:	0010551c 	xori	zero,zero,16724
  104be8:	00104dc4 	movi	zero,16695
  104bec:	00105770 	cmpltui	zero,zero,16733
  104bf0:	00104d30 	cmpltui	zero,zero,16692
  104bf4:	00104dd0 	cmplti	zero,zero,16695
  104bf8:	00105770 	cmpltui	zero,zero,16733
  104bfc:	00104e1c 	xori	zero,zero,16696
  104c00:	00105328 	cmpgeui	zero,zero,16716
  104c04:	00105328 	cmpgeui	zero,zero,16716
  104c08:	00105328 	cmpgeui	zero,zero,16716
  104c0c:	00105328 	cmpgeui	zero,zero,16716
  104c10:	00105328 	cmpgeui	zero,zero,16716
  104c14:	00105328 	cmpgeui	zero,zero,16716
  104c18:	00105328 	cmpgeui	zero,zero,16716
  104c1c:	00105328 	cmpgeui	zero,zero,16716
  104c20:	00105328 	cmpgeui	zero,zero,16716
  104c24:	00105770 	cmpltui	zero,zero,16733
  104c28:	00105770 	cmpltui	zero,zero,16733
  104c2c:	00105770 	cmpltui	zero,zero,16733
  104c30:	00105770 	cmpltui	zero,zero,16733
  104c34:	00105770 	cmpltui	zero,zero,16733
  104c38:	00105770 	cmpltui	zero,zero,16733
  104c3c:	00105770 	cmpltui	zero,zero,16733
  104c40:	00105770 	cmpltui	zero,zero,16733
  104c44:	00105770 	cmpltui	zero,zero,16733
  104c48:	00105770 	cmpltui	zero,zero,16733
  104c4c:	00104e30 	cmpltui	zero,zero,16696
  104c50:	00105278 	rdprs	zero,zero,16713
  104c54:	00105770 	cmpltui	zero,zero,16733
  104c58:	00105278 	rdprs	zero,zero,16713
  104c5c:	00105770 	cmpltui	zero,zero,16733
  104c60:	00105770 	cmpltui	zero,zero,16733
  104c64:	00105770 	cmpltui	zero,zero,16733
  104c68:	00105770 	cmpltui	zero,zero,16733
  104c6c:	00105370 	cmpltui	zero,zero,16717
  104c70:	00105770 	cmpltui	zero,zero,16733
  104c74:	00105770 	cmpltui	zero,zero,16733
  104c78:	00105384 	movi	zero,16718
  104c7c:	00105770 	cmpltui	zero,zero,16733
  104c80:	00105770 	cmpltui	zero,zero,16733
  104c84:	00105770 	cmpltui	zero,zero,16733
  104c88:	00105770 	cmpltui	zero,zero,16733
  104c8c:	00105770 	cmpltui	zero,zero,16733
  104c90:	001053cc 	andi	zero,zero,16719
  104c94:	00105770 	cmpltui	zero,zero,16733
  104c98:	00105770 	cmpltui	zero,zero,16733
  104c9c:	00105540 	call	10554 <black_tx_descriptor+0xfc54>
  104ca0:	00105770 	cmpltui	zero,zero,16733
  104ca4:	00105770 	cmpltui	zero,zero,16733
  104ca8:	00105770 	cmpltui	zero,zero,16733
  104cac:	00105770 	cmpltui	zero,zero,16733
  104cb0:	00105770 	cmpltui	zero,zero,16733
  104cb4:	00105770 	cmpltui	zero,zero,16733
  104cb8:	00105770 	cmpltui	zero,zero,16733
  104cbc:	00105770 	cmpltui	zero,zero,16733
  104cc0:	00105770 	cmpltui	zero,zero,16733
  104cc4:	00105770 	cmpltui	zero,zero,16733
  104cc8:	00105444 	movi	zero,16721
  104ccc:	0010568c 	andi	zero,zero,16730
  104cd0:	00105278 	rdprs	zero,zero,16713
  104cd4:	00105278 	rdprs	zero,zero,16713
  104cd8:	00105278 	rdprs	zero,zero,16713
  104cdc:	00105658 	cmpnei	zero,zero,16729
  104ce0:	0010568c 	andi	zero,zero,16730
  104ce4:	00105770 	cmpltui	zero,zero,16733
  104ce8:	00105770 	cmpltui	zero,zero,16733
  104cec:	0010566c 	andhi	zero,zero,16729
  104cf0:	00105770 	cmpltui	zero,zero,16733
  104cf4:	0010540c 	andi	zero,zero,16720
  104cf8:	001056f0 	cmpltui	zero,zero,16731
  104cfc:	00105604 	movi	zero,16728
  104d00:	00105588 	cmpgei	zero,zero,16726
  104d04:	00105770 	cmpltui	zero,zero,16733
  104d08:	0010559c 	xori	zero,zero,16726
  104d0c:	00105770 	cmpltui	zero,zero,16733
  104d10:	00105730 	cmpltui	zero,zero,16732
  104d14:	00105770 	cmpltui	zero,zero,16733
  104d18:	00105770 	cmpltui	zero,zero,16733
  104d1c:	00105484 	movi	zero,16722
  104d20:	d9003017 	ldw	r4,192(sp)
  104d24:	d8802f15 	stw	r2,188(sp)
  104d28:	0109c83a 	sub	r4,zero,r4
  104d2c:	d9003015 	stw	r4,192(sp)
  104d30:	d9402a17 	ldw	r5,168(sp)
  104d34:	29400114 	ori	r5,r5,4
  104d38:	d9402a15 	stw	r5,168(sp)
  104d3c:	9c400007 	ldb	r17,0(r19)
  104d40:	003f9406 	br	104b94 <black_to_red_frame+0xfe104b94>
  104d44:	d9003117 	ldw	r4,196(sp)
  104d48:	d9402e17 	ldw	r5,184(sp)
  104d4c:	d9801e04 	addi	r6,sp,120
  104d50:	010d5f80 	call	10d5f8 <__ssprint_r>
  104d54:	1000081e 	bne	r2,zero,104d78 <___svfprintf_internal_r+0x33c>
  104d58:	da000404 	addi	r8,sp,16
  104d5c:	003f7c06 	br	104b50 <black_to_red_frame+0xfe104b50>
  104d60:	d8802017 	ldw	r2,128(sp)
  104d64:	10000426 	beq	r2,zero,104d78 <___svfprintf_internal_r+0x33c>
  104d68:	d9003117 	ldw	r4,196(sp)
  104d6c:	d9402e17 	ldw	r5,184(sp)
  104d70:	d9801e04 	addi	r6,sp,120
  104d74:	010d5f80 	call	10d5f8 <__ssprint_r>
  104d78:	d9402e17 	ldw	r5,184(sp)
  104d7c:	2880030b 	ldhu	r2,12(r5)
  104d80:	1080100c 	andi	r2,r2,64
  104d84:	10000d26 	beq	r2,zero,104dbc <___svfprintf_internal_r+0x380>
  104d88:	00bfffc4 	movi	r2,-1
  104d8c:	dfc04a17 	ldw	ra,296(sp)
  104d90:	df004917 	ldw	fp,292(sp)
  104d94:	ddc04817 	ldw	r23,288(sp)
  104d98:	dd804717 	ldw	r22,284(sp)
  104d9c:	dd404617 	ldw	r21,280(sp)
  104da0:	dd004517 	ldw	r20,276(sp)
  104da4:	dcc04417 	ldw	r19,272(sp)
  104da8:	dc804317 	ldw	r18,268(sp)
  104dac:	dc404217 	ldw	r17,264(sp)
  104db0:	dc004117 	ldw	r16,260(sp)
  104db4:	dec04b04 	addi	sp,sp,300
  104db8:	f800283a 	ret
  104dbc:	d8803217 	ldw	r2,200(sp)
  104dc0:	003ff206 	br	104d8c <black_to_red_frame+0xfe104d8c>
  104dc4:	05400ac4 	movi	r21,43
  104dc8:	9c400007 	ldb	r17,0(r19)
  104dcc:	003f7106 	br	104b94 <black_to_red_frame+0xfe104b94>
  104dd0:	9c400007 	ldb	r17,0(r19)
  104dd4:	98800044 	addi	r2,r19,1
  104dd8:	8f071126 	beq	r17,fp,106a20 <___svfprintf_internal_r+0x1fe4>
  104ddc:	8cbff404 	addi	r18,r17,-48
  104de0:	1027883a 	mov	r19,r2
  104de4:	0007883a 	mov	r3,zero
  104de8:	a4bf6b36 	bltu	r20,r18,104b98 <black_to_red_frame+0xfe104b98>
  104dec:	0009883a 	mov	r4,zero
  104df0:	01400284 	movi	r5,10
  104df4:	0103f1c0 	call	103f1c <__mulsi3>
  104df8:	9c400007 	ldb	r17,0(r19)
  104dfc:	9089883a 	add	r4,r18,r2
  104e00:	9cc00044 	addi	r19,r19,1
  104e04:	8cbff404 	addi	r18,r17,-48
  104e08:	a4bff92e 	bgeu	r20,r18,104df0 <black_to_red_frame+0xfe104df0>
  104e0c:	2007883a 	mov	r3,r4
  104e10:	203f610e 	bge	r4,zero,104b98 <black_to_red_frame+0xfe104b98>
  104e14:	00ffffc4 	movi	r3,-1
  104e18:	003f5f06 	br	104b98 <black_to_red_frame+0xfe104b98>
  104e1c:	d9402a17 	ldw	r5,168(sp)
  104e20:	29402014 	ori	r5,r5,128
  104e24:	d9402a15 	stw	r5,168(sp)
  104e28:	9c400007 	ldb	r17,0(r19)
  104e2c:	003f5906 	br	104b94 <black_to_red_frame+0xfe104b94>
  104e30:	d9402a17 	ldw	r5,168(sp)
  104e34:	1825883a 	mov	r18,r3
  104e38:	dd402785 	stb	r21,158(sp)
  104e3c:	29400414 	ori	r5,r5,16
  104e40:	d9402a15 	stw	r5,168(sp)
  104e44:	d8c02a17 	ldw	r3,168(sp)
  104e48:	b011883a 	mov	r8,r22
  104e4c:	1880080c 	andi	r2,r3,32
  104e50:	10021426 	beq	r2,zero,1056a4 <___svfprintf_internal_r+0xc68>
  104e54:	d9002f17 	ldw	r4,188(sp)
  104e58:	20800117 	ldw	r2,4(r4)
  104e5c:	25000017 	ldw	r20,0(r4)
  104e60:	21000204 	addi	r4,r4,8
  104e64:	d9002f15 	stw	r4,188(sp)
  104e68:	102b883a 	mov	r21,r2
  104e6c:	10021716 	blt	r2,zero,1056cc <___svfprintf_internal_r+0xc90>
  104e70:	dd802783 	ldbu	r22,158(sp)
  104e74:	00c00044 	movi	r3,1
  104e78:	a544b03a 	or	r2,r20,r21
  104e7c:	90000416 	blt	r18,zero,104e90 <___svfprintf_internal_r+0x454>
  104e80:	d9402a17 	ldw	r5,168(sp)
  104e84:	013fdfc4 	movi	r4,-129
  104e88:	290a703a 	and	r5,r5,r4
  104e8c:	d9402a15 	stw	r5,168(sp)
  104e90:	10025a1e 	bne	r2,zero,1057fc <___svfprintf_internal_r+0xdc0>
  104e94:	9002591e 	bne	r18,zero,1057fc <___svfprintf_internal_r+0xdc0>
  104e98:	18c03fcc 	andi	r3,r3,255
  104e9c:	1803751e 	bne	r3,zero,105c74 <___svfprintf_internal_r+0x1238>
  104ea0:	d8c02a17 	ldw	r3,168(sp)
  104ea4:	1880004c 	andi	r2,r3,1
  104ea8:	10037226 	beq	r2,zero,105c74 <___svfprintf_internal_r+0x1238>
  104eac:	dd003e17 	ldw	r20,248(sp)
  104eb0:	00800c04 	movi	r2,48
  104eb4:	d8801dc5 	stb	r2,119(sp)
  104eb8:	dc001dc4 	addi	r16,sp,119
  104ebc:	a005883a 	mov	r2,r20
  104ec0:	a480010e 	bge	r20,r18,104ec8 <___svfprintf_internal_r+0x48c>
  104ec4:	9005883a 	mov	r2,r18
  104ec8:	d8802b15 	stw	r2,172(sp)
  104ecc:	d8003315 	stw	zero,204(sp)
  104ed0:	b0803fcc 	andi	r2,r22,255
  104ed4:	1080201c 	xori	r2,r2,128
  104ed8:	10bfe004 	addi	r2,r2,-128
  104edc:	10000326 	beq	r2,zero,104eec <___svfprintf_internal_r+0x4b0>
  104ee0:	d8c02b17 	ldw	r3,172(sp)
  104ee4:	18c00044 	addi	r3,r3,1
  104ee8:	d8c02b15 	stw	r3,172(sp)
  104eec:	d8c02a17 	ldw	r3,168(sp)
  104ef0:	18c0008c 	andi	r3,r3,2
  104ef4:	d8c02c15 	stw	r3,176(sp)
  104ef8:	18000326 	beq	r3,zero,104f08 <___svfprintf_internal_r+0x4cc>
  104efc:	d8c02b17 	ldw	r3,172(sp)
  104f00:	18c00084 	addi	r3,r3,2
  104f04:	d8c02b15 	stw	r3,172(sp)
  104f08:	d8c02a17 	ldw	r3,168(sp)
  104f0c:	18c0210c 	andi	r3,r3,132
  104f10:	d8c02d15 	stw	r3,180(sp)
  104f14:	18021e1e 	bne	r3,zero,105790 <___svfprintf_internal_r+0xd54>
  104f18:	d9003017 	ldw	r4,192(sp)
  104f1c:	d8c02b17 	ldw	r3,172(sp)
  104f20:	20f9c83a 	sub	fp,r4,r3
  104f24:	07021a0e 	bge	zero,fp,105790 <___svfprintf_internal_r+0xd54>
  104f28:	02400404 	movi	r9,16
  104f2c:	d8c02017 	ldw	r3,128(sp)
  104f30:	d8801f17 	ldw	r2,124(sp)
  104f34:	4f05af0e 	bge	r9,fp,1065f4 <___svfprintf_internal_r+0x1bb8>
  104f38:	01400474 	movhi	r5,17
  104f3c:	295a3e84 	addi	r5,r5,26874
  104f40:	dc403c15 	stw	r17,240(sp)
  104f44:	dc003d15 	stw	r16,244(sp)
  104f48:	e023883a 	mov	r17,fp
  104f4c:	d9403615 	stw	r5,216(sp)
  104f50:	9839883a 	mov	fp,r19
  104f54:	482d883a 	mov	r22,r9
  104f58:	9027883a 	mov	r19,r18
  104f5c:	054001c4 	movi	r21,7
  104f60:	dc003117 	ldw	r16,196(sp)
  104f64:	dc802e17 	ldw	r18,184(sp)
  104f68:	00000306 	br	104f78 <___svfprintf_internal_r+0x53c>
  104f6c:	8c7ffc04 	addi	r17,r17,-16
  104f70:	42000204 	addi	r8,r8,8
  104f74:	b440130e 	bge	r22,r17,104fc4 <___svfprintf_internal_r+0x588>
  104f78:	18c00404 	addi	r3,r3,16
  104f7c:	10800044 	addi	r2,r2,1
  104f80:	01000474 	movhi	r4,17
  104f84:	211a3e84 	addi	r4,r4,26874
  104f88:	41000015 	stw	r4,0(r8)
  104f8c:	45800115 	stw	r22,4(r8)
  104f90:	d8c02015 	stw	r3,128(sp)
  104f94:	d8801f15 	stw	r2,124(sp)
  104f98:	a8bff40e 	bge	r21,r2,104f6c <black_to_red_frame+0xfe104f6c>
  104f9c:	8009883a 	mov	r4,r16
  104fa0:	900b883a 	mov	r5,r18
  104fa4:	d9801e04 	addi	r6,sp,120
  104fa8:	010d5f80 	call	10d5f8 <__ssprint_r>
  104fac:	103f721e 	bne	r2,zero,104d78 <black_to_red_frame+0xfe104d78>
  104fb0:	8c7ffc04 	addi	r17,r17,-16
  104fb4:	d8c02017 	ldw	r3,128(sp)
  104fb8:	d8801f17 	ldw	r2,124(sp)
  104fbc:	da000404 	addi	r8,sp,16
  104fc0:	b47fed16 	blt	r22,r17,104f78 <black_to_red_frame+0xfe104f78>
  104fc4:	9825883a 	mov	r18,r19
  104fc8:	dc003d17 	ldw	r16,244(sp)
  104fcc:	e027883a 	mov	r19,fp
  104fd0:	8839883a 	mov	fp,r17
  104fd4:	dc403c17 	ldw	r17,240(sp)
  104fd8:	d9403617 	ldw	r5,216(sp)
  104fdc:	e0c7883a 	add	r3,fp,r3
  104fe0:	10800044 	addi	r2,r2,1
  104fe4:	41400015 	stw	r5,0(r8)
  104fe8:	47000115 	stw	fp,4(r8)
  104fec:	d8c02015 	stw	r3,128(sp)
  104ff0:	d8801f15 	stw	r2,124(sp)
  104ff4:	010001c4 	movi	r4,7
  104ff8:	20837816 	blt	r4,r2,105ddc <___svfprintf_internal_r+0x13a0>
  104ffc:	d8802787 	ldb	r2,158(sp)
  105000:	42000204 	addi	r8,r8,8
  105004:	10000c26 	beq	r2,zero,105038 <___svfprintf_internal_r+0x5fc>
  105008:	d8801f17 	ldw	r2,124(sp)
  10500c:	d9002784 	addi	r4,sp,158
  105010:	18c00044 	addi	r3,r3,1
  105014:	10800044 	addi	r2,r2,1
  105018:	41000015 	stw	r4,0(r8)
  10501c:	01000044 	movi	r4,1
  105020:	41000115 	stw	r4,4(r8)
  105024:	d8c02015 	stw	r3,128(sp)
  105028:	d8801f15 	stw	r2,124(sp)
  10502c:	010001c4 	movi	r4,7
  105030:	20830016 	blt	r4,r2,105c34 <___svfprintf_internal_r+0x11f8>
  105034:	42000204 	addi	r8,r8,8
  105038:	d8802c17 	ldw	r2,176(sp)
  10503c:	10000c26 	beq	r2,zero,105070 <___svfprintf_internal_r+0x634>
  105040:	d8801f17 	ldw	r2,124(sp)
  105044:	d9002704 	addi	r4,sp,156
  105048:	18c00084 	addi	r3,r3,2
  10504c:	10800044 	addi	r2,r2,1
  105050:	41000015 	stw	r4,0(r8)
  105054:	01000084 	movi	r4,2
  105058:	41000115 	stw	r4,4(r8)
  10505c:	d8c02015 	stw	r3,128(sp)
  105060:	d8801f15 	stw	r2,124(sp)
  105064:	010001c4 	movi	r4,7
  105068:	2082fa16 	blt	r4,r2,105c54 <___svfprintf_internal_r+0x1218>
  10506c:	42000204 	addi	r8,r8,8
  105070:	d9002d17 	ldw	r4,180(sp)
  105074:	00802004 	movi	r2,128
  105078:	20824126 	beq	r4,r2,105980 <___svfprintf_internal_r+0xf44>
  10507c:	9525c83a 	sub	r18,r18,r20
  105080:	04802c0e 	bge	zero,r18,105134 <___svfprintf_internal_r+0x6f8>
  105084:	05800404 	movi	r22,16
  105088:	d8801f17 	ldw	r2,124(sp)
  10508c:	05400474 	movhi	r21,17
  105090:	ad5a3a84 	addi	r21,r21,26858
  105094:	b4801e0e 	bge	r22,r18,105110 <___svfprintf_internal_r+0x6d4>
  105098:	dc402c15 	stw	r17,176(sp)
  10509c:	dc002d15 	stw	r16,180(sp)
  1050a0:	9023883a 	mov	r17,r18
  1050a4:	070001c4 	movi	fp,7
  1050a8:	dc003117 	ldw	r16,196(sp)
  1050ac:	dc802e17 	ldw	r18,184(sp)
  1050b0:	00000306 	br	1050c0 <___svfprintf_internal_r+0x684>
  1050b4:	8c7ffc04 	addi	r17,r17,-16
  1050b8:	42000204 	addi	r8,r8,8
  1050bc:	b440110e 	bge	r22,r17,105104 <___svfprintf_internal_r+0x6c8>
  1050c0:	18c00404 	addi	r3,r3,16
  1050c4:	10800044 	addi	r2,r2,1
  1050c8:	45c00015 	stw	r23,0(r8)
  1050cc:	45800115 	stw	r22,4(r8)
  1050d0:	d8c02015 	stw	r3,128(sp)
  1050d4:	d8801f15 	stw	r2,124(sp)
  1050d8:	e0bff60e 	bge	fp,r2,1050b4 <black_to_red_frame+0xfe1050b4>
  1050dc:	8009883a 	mov	r4,r16
  1050e0:	900b883a 	mov	r5,r18
  1050e4:	d9801e04 	addi	r6,sp,120
  1050e8:	010d5f80 	call	10d5f8 <__ssprint_r>
  1050ec:	103f221e 	bne	r2,zero,104d78 <black_to_red_frame+0xfe104d78>
  1050f0:	8c7ffc04 	addi	r17,r17,-16
  1050f4:	d8c02017 	ldw	r3,128(sp)
  1050f8:	d8801f17 	ldw	r2,124(sp)
  1050fc:	da000404 	addi	r8,sp,16
  105100:	b47fef16 	blt	r22,r17,1050c0 <black_to_red_frame+0xfe1050c0>
  105104:	8825883a 	mov	r18,r17
  105108:	dc002d17 	ldw	r16,180(sp)
  10510c:	dc402c17 	ldw	r17,176(sp)
  105110:	1c87883a 	add	r3,r3,r18
  105114:	10800044 	addi	r2,r2,1
  105118:	45400015 	stw	r21,0(r8)
  10511c:	44800115 	stw	r18,4(r8)
  105120:	d8c02015 	stw	r3,128(sp)
  105124:	d8801f15 	stw	r2,124(sp)
  105128:	010001c4 	movi	r4,7
  10512c:	2082b916 	blt	r4,r2,105c14 <___svfprintf_internal_r+0x11d8>
  105130:	42000204 	addi	r8,r8,8
  105134:	d9002a17 	ldw	r4,168(sp)
  105138:	2080400c 	andi	r2,r4,256
  10513c:	1001c51e 	bne	r2,zero,105854 <___svfprintf_internal_r+0xe18>
  105140:	d8801f17 	ldw	r2,124(sp)
  105144:	1d07883a 	add	r3,r3,r20
  105148:	44000015 	stw	r16,0(r8)
  10514c:	10800044 	addi	r2,r2,1
  105150:	45000115 	stw	r20,4(r8)
  105154:	d8c02015 	stw	r3,128(sp)
  105158:	d8801f15 	stw	r2,124(sp)
  10515c:	010001c4 	movi	r4,7
  105160:	20819e16 	blt	r4,r2,1057dc <___svfprintf_internal_r+0xda0>
  105164:	42000204 	addi	r8,r8,8
  105168:	d9402a17 	ldw	r5,168(sp)
  10516c:	2880010c 	andi	r2,r5,4
  105170:	10003326 	beq	r2,zero,105240 <___svfprintf_internal_r+0x804>
  105174:	d8803017 	ldw	r2,192(sp)
  105178:	d9002b17 	ldw	r4,172(sp)
  10517c:	1121c83a 	sub	r16,r2,r4
  105180:	04002f0e 	bge	zero,r16,105240 <___svfprintf_internal_r+0x804>
  105184:	04400404 	movi	r17,16
  105188:	d8801f17 	ldw	r2,124(sp)
  10518c:	8c054a0e 	bge	r17,r16,1066b8 <___svfprintf_internal_r+0x1c7c>
  105190:	01000474 	movhi	r4,17
  105194:	211a3e84 	addi	r4,r4,26874
  105198:	d9003615 	stw	r4,216(sp)
  10519c:	048001c4 	movi	r18,7
  1051a0:	dd003117 	ldw	r20,196(sp)
  1051a4:	dd402e17 	ldw	r21,184(sp)
  1051a8:	00000306 	br	1051b8 <___svfprintf_internal_r+0x77c>
  1051ac:	843ffc04 	addi	r16,r16,-16
  1051b0:	42000204 	addi	r8,r8,8
  1051b4:	8c00130e 	bge	r17,r16,105204 <___svfprintf_internal_r+0x7c8>
  1051b8:	18c00404 	addi	r3,r3,16
  1051bc:	10800044 	addi	r2,r2,1
  1051c0:	01400474 	movhi	r5,17
  1051c4:	295a3e84 	addi	r5,r5,26874
  1051c8:	41400015 	stw	r5,0(r8)
  1051cc:	44400115 	stw	r17,4(r8)
  1051d0:	d8c02015 	stw	r3,128(sp)
  1051d4:	d8801f15 	stw	r2,124(sp)
  1051d8:	90bff40e 	bge	r18,r2,1051ac <black_to_red_frame+0xfe1051ac>
  1051dc:	a009883a 	mov	r4,r20
  1051e0:	a80b883a 	mov	r5,r21
  1051e4:	d9801e04 	addi	r6,sp,120
  1051e8:	010d5f80 	call	10d5f8 <__ssprint_r>
  1051ec:	103ee21e 	bne	r2,zero,104d78 <black_to_red_frame+0xfe104d78>
  1051f0:	843ffc04 	addi	r16,r16,-16
  1051f4:	d8c02017 	ldw	r3,128(sp)
  1051f8:	d8801f17 	ldw	r2,124(sp)
  1051fc:	da000404 	addi	r8,sp,16
  105200:	8c3fed16 	blt	r17,r16,1051b8 <black_to_red_frame+0xfe1051b8>
  105204:	d9003617 	ldw	r4,216(sp)
  105208:	1c07883a 	add	r3,r3,r16
  10520c:	10800044 	addi	r2,r2,1
  105210:	41000015 	stw	r4,0(r8)
  105214:	44000115 	stw	r16,4(r8)
  105218:	d8c02015 	stw	r3,128(sp)
  10521c:	d8801f15 	stw	r2,124(sp)
  105220:	010001c4 	movi	r4,7
  105224:	2080060e 	bge	r4,r2,105240 <___svfprintf_internal_r+0x804>
  105228:	d9003117 	ldw	r4,196(sp)
  10522c:	d9402e17 	ldw	r5,184(sp)
  105230:	d9801e04 	addi	r6,sp,120
  105234:	010d5f80 	call	10d5f8 <__ssprint_r>
  105238:	103ecf1e 	bne	r2,zero,104d78 <black_to_red_frame+0xfe104d78>
  10523c:	d8c02017 	ldw	r3,128(sp)
  105240:	d8802b17 	ldw	r2,172(sp)
  105244:	d9403017 	ldw	r5,192(sp)
  105248:	1140010e 	bge	r2,r5,105250 <___svfprintf_internal_r+0x814>
  10524c:	2805883a 	mov	r2,r5
  105250:	d9003217 	ldw	r4,200(sp)
  105254:	2089883a 	add	r4,r4,r2
  105258:	d9003215 	stw	r4,200(sp)
  10525c:	18024d1e 	bne	r3,zero,105b94 <___svfprintf_internal_r+0x1158>
  105260:	98800007 	ldb	r2,0(r19)
  105264:	d8001f15 	stw	zero,124(sp)
  105268:	da000404 	addi	r8,sp,16
  10526c:	103e231e 	bne	r2,zero,104afc <black_to_red_frame+0xfe104afc>
  105270:	9821883a 	mov	r16,r19
  105274:	003e3906 	br	104b5c <black_to_red_frame+0xfe104b5c>
  105278:	1825883a 	mov	r18,r3
  10527c:	d8c02a17 	ldw	r3,168(sp)
  105280:	dd402785 	stb	r21,158(sp)
  105284:	b011883a 	mov	r8,r22
  105288:	1880020c 	andi	r2,r3,8
  10528c:	10038f26 	beq	r2,zero,1060cc <___svfprintf_internal_r+0x1690>
  105290:	d9002f17 	ldw	r4,188(sp)
  105294:	d9402f17 	ldw	r5,188(sp)
  105298:	d8802f17 	ldw	r2,188(sp)
  10529c:	21000017 	ldw	r4,0(r4)
  1052a0:	29400117 	ldw	r5,4(r5)
  1052a4:	10800204 	addi	r2,r2,8
  1052a8:	d9003715 	stw	r4,220(sp)
  1052ac:	d9403815 	stw	r5,224(sp)
  1052b0:	d8802f15 	stw	r2,188(sp)
  1052b4:	d9003717 	ldw	r4,220(sp)
  1052b8:	d9403817 	ldw	r5,224(sp)
  1052bc:	da004015 	stw	r8,256(sp)
  1052c0:	04000044 	movi	r16,1
  1052c4:	010d3b00 	call	10d3b0 <__fpclassifyd>
  1052c8:	da004017 	ldw	r8,256(sp)
  1052cc:	d9003717 	ldw	r4,220(sp)
  1052d0:	d9403817 	ldw	r5,224(sp)
  1052d4:	14036a1e 	bne	r2,r16,106080 <___svfprintf_internal_r+0x1644>
  1052d8:	000d883a 	mov	r6,zero
  1052dc:	000f883a 	mov	r7,zero
  1052e0:	01129240 	call	112924 <__ledf2>
  1052e4:	da004017 	ldw	r8,256(sp)
  1052e8:	10050216 	blt	r2,zero,1066f4 <___svfprintf_internal_r+0x1cb8>
  1052ec:	dd802783 	ldbu	r22,158(sp)
  1052f0:	008011c4 	movi	r2,71
  1052f4:	1444700e 	bge	r2,r17,1064b8 <___svfprintf_internal_r+0x1a7c>
  1052f8:	04000474 	movhi	r16,17
  1052fc:	841a2b04 	addi	r16,r16,26796
  105300:	d9002a17 	ldw	r4,168(sp)
  105304:	00bfdfc4 	movi	r2,-129
  105308:	00c000c4 	movi	r3,3
  10530c:	2088703a 	and	r4,r4,r2
  105310:	d8c02b15 	stw	r3,172(sp)
  105314:	d9002a15 	stw	r4,168(sp)
  105318:	1829883a 	mov	r20,r3
  10531c:	0025883a 	mov	r18,zero
  105320:	d8003315 	stw	zero,204(sp)
  105324:	003eea06 	br	104ed0 <black_to_red_frame+0xfe104ed0>
  105328:	8cbff404 	addi	r18,r17,-48
  10532c:	d8003015 	stw	zero,192(sp)
  105330:	0009883a 	mov	r4,zero
  105334:	1823883a 	mov	r17,r3
  105338:	01400284 	movi	r5,10
  10533c:	0103f1c0 	call	103f1c <__mulsi3>
  105340:	98c00007 	ldb	r3,0(r19)
  105344:	1489883a 	add	r4,r2,r18
  105348:	9cc00044 	addi	r19,r19,1
  10534c:	1cbff404 	addi	r18,r3,-48
  105350:	9805883a 	mov	r2,r19
  105354:	a4bff82e 	bgeu	r20,r18,105338 <black_to_red_frame+0xfe105338>
  105358:	d9003015 	stw	r4,192(sp)
  10535c:	8809883a 	mov	r4,r17
  105360:	1027883a 	mov	r19,r2
  105364:	1823883a 	mov	r17,r3
  105368:	2007883a 	mov	r3,r4
  10536c:	003e0a06 	br	104b98 <black_to_red_frame+0xfe104b98>
  105370:	d8802a17 	ldw	r2,168(sp)
  105374:	10800214 	ori	r2,r2,8
  105378:	d8802a15 	stw	r2,168(sp)
  10537c:	9c400007 	ldb	r17,0(r19)
  105380:	003e0406 	br	104b94 <black_to_red_frame+0xfe104b94>
  105384:	d9002a17 	ldw	r4,168(sp)
  105388:	b011883a 	mov	r8,r22
  10538c:	1825883a 	mov	r18,r3
  105390:	21000414 	ori	r4,r4,16
  105394:	d9002a15 	stw	r4,168(sp)
  105398:	d9402a17 	ldw	r5,168(sp)
  10539c:	2880080c 	andi	r2,r5,32
  1053a0:	1000d826 	beq	r2,zero,105704 <___svfprintf_internal_r+0xcc8>
  1053a4:	d8802f17 	ldw	r2,188(sp)
  1053a8:	0007883a 	mov	r3,zero
  1053ac:	15000017 	ldw	r20,0(r2)
  1053b0:	15400117 	ldw	r21,4(r2)
  1053b4:	10800204 	addi	r2,r2,8
  1053b8:	d8802f15 	stw	r2,188(sp)
  1053bc:	a544b03a 	or	r2,r20,r21
  1053c0:	d8002785 	stb	zero,158(sp)
  1053c4:	002d883a 	mov	r22,zero
  1053c8:	003eac06 	br	104e7c <black_to_red_frame+0xfe104e7c>
  1053cc:	d9002a17 	ldw	r4,168(sp)
  1053d0:	b011883a 	mov	r8,r22
  1053d4:	1825883a 	mov	r18,r3
  1053d8:	21000414 	ori	r4,r4,16
  1053dc:	d9002a15 	stw	r4,168(sp)
  1053e0:	d9402a17 	ldw	r5,168(sp)
  1053e4:	2880080c 	andi	r2,r5,32
  1053e8:	1000d626 	beq	r2,zero,105744 <___svfprintf_internal_r+0xd08>
  1053ec:	d8802f17 	ldw	r2,188(sp)
  1053f0:	00c00044 	movi	r3,1
  1053f4:	15000017 	ldw	r20,0(r2)
  1053f8:	15400117 	ldw	r21,4(r2)
  1053fc:	10800204 	addi	r2,r2,8
  105400:	d8802f15 	stw	r2,188(sp)
  105404:	a544b03a 	or	r2,r20,r21
  105408:	003fed06 	br	1053c0 <black_to_red_frame+0xfe1053c0>
  10540c:	d9002a17 	ldw	r4,168(sp)
  105410:	dd402785 	stb	r21,158(sp)
  105414:	b011883a 	mov	r8,r22
  105418:	2080080c 	andi	r2,r4,32
  10541c:	10033e26 	beq	r2,zero,106118 <___svfprintf_internal_r+0x16dc>
  105420:	d9402f17 	ldw	r5,188(sp)
  105424:	d9003217 	ldw	r4,200(sp)
  105428:	28800017 	ldw	r2,0(r5)
  10542c:	2007d7fa 	srai	r3,r4,31
  105430:	29400104 	addi	r5,r5,4
  105434:	d9402f15 	stw	r5,188(sp)
  105438:	11000015 	stw	r4,0(r2)
  10543c:	10c00115 	stw	r3,4(r2)
  105440:	003dac06 	br	104af4 <black_to_red_frame+0xfe104af4>
  105444:	d8c02f17 	ldw	r3,188(sp)
  105448:	d9002f17 	ldw	r4,188(sp)
  10544c:	b011883a 	mov	r8,r22
  105450:	18800017 	ldw	r2,0(r3)
  105454:	21000104 	addi	r4,r4,4
  105458:	00c00044 	movi	r3,1
  10545c:	d8c02b15 	stw	r3,172(sp)
  105460:	d8002785 	stb	zero,158(sp)
  105464:	d8801405 	stb	r2,80(sp)
  105468:	d9002f15 	stw	r4,188(sp)
  10546c:	1829883a 	mov	r20,r3
  105470:	0025883a 	mov	r18,zero
  105474:	d8003315 	stw	zero,204(sp)
  105478:	dc001404 	addi	r16,sp,80
  10547c:	0005883a 	mov	r2,zero
  105480:	003e9a06 	br	104eec <black_to_red_frame+0xfe104eec>
  105484:	d9402a17 	ldw	r5,168(sp)
  105488:	01000474 	movhi	r4,17
  10548c:	211a3304 	addi	r4,r4,26828
  105490:	dd402785 	stb	r21,158(sp)
  105494:	d9003b15 	stw	r4,236(sp)
  105498:	2880080c 	andi	r2,r5,32
  10549c:	b011883a 	mov	r8,r22
  1054a0:	1825883a 	mov	r18,r3
  1054a4:	10002f26 	beq	r2,zero,105564 <___svfprintf_internal_r+0xb28>
  1054a8:	d8802f17 	ldw	r2,188(sp)
  1054ac:	15000017 	ldw	r20,0(r2)
  1054b0:	15400117 	ldw	r21,4(r2)
  1054b4:	10800204 	addi	r2,r2,8
  1054b8:	d8802f15 	stw	r2,188(sp)
  1054bc:	d9002a17 	ldw	r4,168(sp)
  1054c0:	2080004c 	andi	r2,r4,1
  1054c4:	10027c26 	beq	r2,zero,105eb8 <___svfprintf_internal_r+0x147c>
  1054c8:	a544b03a 	or	r2,r20,r21
  1054cc:	10032926 	beq	r2,zero,106174 <___svfprintf_internal_r+0x1738>
  1054d0:	00c00c04 	movi	r3,48
  1054d4:	21000094 	ori	r4,r4,2
  1054d8:	d8c02705 	stb	r3,156(sp)
  1054dc:	dc402745 	stb	r17,157(sp)
  1054e0:	d9002a15 	stw	r4,168(sp)
  1054e4:	00c00084 	movi	r3,2
  1054e8:	003fb506 	br	1053c0 <black_to_red_frame+0xfe1053c0>
  1054ec:	a8803fcc 	andi	r2,r21,255
  1054f0:	1080201c 	xori	r2,r2,128
  1054f4:	10bfe004 	addi	r2,r2,-128
  1054f8:	1003111e 	bne	r2,zero,106140 <___svfprintf_internal_r+0x1704>
  1054fc:	05400804 	movi	r21,32
  105500:	9c400007 	ldb	r17,0(r19)
  105504:	003da306 	br	104b94 <black_to_red_frame+0xfe104b94>
  105508:	d8802a17 	ldw	r2,168(sp)
  10550c:	10800054 	ori	r2,r2,1
  105510:	d8802a15 	stw	r2,168(sp)
  105514:	9c400007 	ldb	r17,0(r19)
  105518:	003d9e06 	br	104b94 <black_to_red_frame+0xfe104b94>
  10551c:	d9002f17 	ldw	r4,188(sp)
  105520:	d9402f17 	ldw	r5,188(sp)
  105524:	21000017 	ldw	r4,0(r4)
  105528:	28800104 	addi	r2,r5,4
  10552c:	d9003015 	stw	r4,192(sp)
  105530:	203dfb16 	blt	r4,zero,104d20 <black_to_red_frame+0xfe104d20>
  105534:	d8802f15 	stw	r2,188(sp)
  105538:	9c400007 	ldb	r17,0(r19)
  10553c:	003d9506 	br	104b94 <black_to_red_frame+0xfe104b94>
  105540:	01400474 	movhi	r5,17
  105544:	295a2e04 	addi	r5,r5,26808
  105548:	d9403b15 	stw	r5,236(sp)
  10554c:	d9402a17 	ldw	r5,168(sp)
  105550:	dd402785 	stb	r21,158(sp)
  105554:	b011883a 	mov	r8,r22
  105558:	2880080c 	andi	r2,r5,32
  10555c:	1825883a 	mov	r18,r3
  105560:	103fd11e 	bne	r2,zero,1054a8 <black_to_red_frame+0xfe1054a8>
  105564:	d8c02a17 	ldw	r3,168(sp)
  105568:	1880040c 	andi	r2,r3,16
  10556c:	1002e126 	beq	r2,zero,1060f4 <___svfprintf_internal_r+0x16b8>
  105570:	d9002f17 	ldw	r4,188(sp)
  105574:	002b883a 	mov	r21,zero
  105578:	25000017 	ldw	r20,0(r4)
  10557c:	21000104 	addi	r4,r4,4
  105580:	d9002f15 	stw	r4,188(sp)
  105584:	003fcd06 	br	1054bc <black_to_red_frame+0xfe1054bc>
  105588:	d8802a17 	ldw	r2,168(sp)
  10558c:	10800814 	ori	r2,r2,32
  105590:	d8802a15 	stw	r2,168(sp)
  105594:	9c400007 	ldb	r17,0(r19)
  105598:	003d7e06 	br	104b94 <black_to_red_frame+0xfe104b94>
  10559c:	1825883a 	mov	r18,r3
  1055a0:	d8c02f17 	ldw	r3,188(sp)
  1055a4:	d8002785 	stb	zero,158(sp)
  1055a8:	b011883a 	mov	r8,r22
  1055ac:	1c000017 	ldw	r16,0(r3)
  1055b0:	1d400104 	addi	r21,r3,4
  1055b4:	80043226 	beq	r16,zero,106680 <___svfprintf_internal_r+0x1c44>
  1055b8:	8009883a 	mov	r4,r16
  1055bc:	90040616 	blt	r18,zero,1065d8 <___svfprintf_internal_r+0x1b9c>
  1055c0:	000b883a 	mov	r5,zero
  1055c4:	900d883a 	mov	r6,r18
  1055c8:	dd804015 	stw	r22,256(sp)
  1055cc:	010b8740 	call	10b874 <memchr>
  1055d0:	da004017 	ldw	r8,256(sp)
  1055d4:	10047226 	beq	r2,zero,1067a0 <___svfprintf_internal_r+0x1d64>
  1055d8:	1429c83a 	sub	r20,r2,r16
  1055dc:	9500010e 	bge	r18,r20,1055e4 <___svfprintf_internal_r+0xba8>
  1055e0:	9029883a 	mov	r20,r18
  1055e4:	a005883a 	mov	r2,r20
  1055e8:	a0040016 	blt	r20,zero,1065ec <___svfprintf_internal_r+0x1bb0>
  1055ec:	dd802783 	ldbu	r22,158(sp)
  1055f0:	d8802b15 	stw	r2,172(sp)
  1055f4:	dd402f15 	stw	r21,188(sp)
  1055f8:	0025883a 	mov	r18,zero
  1055fc:	d8003315 	stw	zero,204(sp)
  105600:	003e3306 	br	104ed0 <black_to_red_frame+0xfe104ed0>
  105604:	d9002f17 	ldw	r4,188(sp)
  105608:	d9402a17 	ldw	r5,168(sp)
  10560c:	00800c04 	movi	r2,48
  105610:	25000017 	ldw	r20,0(r4)
  105614:	d8802705 	stb	r2,156(sp)
  105618:	00801e04 	movi	r2,120
  10561c:	29400094 	ori	r5,r5,2
  105620:	d8802745 	stb	r2,157(sp)
  105624:	21000104 	addi	r4,r4,4
  105628:	00800474 	movhi	r2,17
  10562c:	109a3304 	addi	r2,r2,26828
  105630:	1825883a 	mov	r18,r3
  105634:	d8803b15 	stw	r2,236(sp)
  105638:	b011883a 	mov	r8,r22
  10563c:	002b883a 	mov	r21,zero
  105640:	d9402a15 	stw	r5,168(sp)
  105644:	d9002f15 	stw	r4,188(sp)
  105648:	00c00084 	movi	r3,2
  10564c:	04401e04 	movi	r17,120
  105650:	a005883a 	mov	r2,r20
  105654:	003f5a06 	br	1053c0 <black_to_red_frame+0xfe1053c0>
  105658:	d9002a17 	ldw	r4,168(sp)
  10565c:	21001014 	ori	r4,r4,64
  105660:	d9002a15 	stw	r4,168(sp)
  105664:	9c400007 	ldb	r17,0(r19)
  105668:	003d4a06 	br	104b94 <black_to_red_frame+0xfe104b94>
  10566c:	9c400007 	ldb	r17,0(r19)
  105670:	01401b04 	movi	r5,108
  105674:	9805883a 	mov	r2,r19
  105678:	89432826 	beq	r17,r5,10631c <___svfprintf_internal_r+0x18e0>
  10567c:	d9402a17 	ldw	r5,168(sp)
  105680:	29400414 	ori	r5,r5,16
  105684:	d9402a15 	stw	r5,168(sp)
  105688:	003d4206 	br	104b94 <black_to_red_frame+0xfe104b94>
  10568c:	1825883a 	mov	r18,r3
  105690:	d8c02a17 	ldw	r3,168(sp)
  105694:	dd402785 	stb	r21,158(sp)
  105698:	b011883a 	mov	r8,r22
  10569c:	1880080c 	andi	r2,r3,32
  1056a0:	103dec1e 	bne	r2,zero,104e54 <black_to_red_frame+0xfe104e54>
  1056a4:	d9402a17 	ldw	r5,168(sp)
  1056a8:	2880040c 	andi	r2,r5,16
  1056ac:	1002b326 	beq	r2,zero,10617c <___svfprintf_internal_r+0x1740>
  1056b0:	d8802f17 	ldw	r2,188(sp)
  1056b4:	15000017 	ldw	r20,0(r2)
  1056b8:	10800104 	addi	r2,r2,4
  1056bc:	d8802f15 	stw	r2,188(sp)
  1056c0:	a02bd7fa 	srai	r21,r20,31
  1056c4:	a805883a 	mov	r2,r21
  1056c8:	103de90e 	bge	r2,zero,104e70 <black_to_red_frame+0xfe104e70>
  1056cc:	0529c83a 	sub	r20,zero,r20
  1056d0:	a004c03a 	cmpne	r2,r20,zero
  1056d4:	056bc83a 	sub	r21,zero,r21
  1056d8:	05800b44 	movi	r22,45
  1056dc:	a8abc83a 	sub	r21,r21,r2
  1056e0:	dd802785 	stb	r22,158(sp)
  1056e4:	00c00044 	movi	r3,1
  1056e8:	a544b03a 	or	r2,r20,r21
  1056ec:	003de306 	br	104e7c <black_to_red_frame+0xfe104e7c>
  1056f0:	d9402a17 	ldw	r5,168(sp)
  1056f4:	b011883a 	mov	r8,r22
  1056f8:	1825883a 	mov	r18,r3
  1056fc:	2880080c 	andi	r2,r5,32
  105700:	103f281e 	bne	r2,zero,1053a4 <black_to_red_frame+0xfe1053a4>
  105704:	d8c02a17 	ldw	r3,168(sp)
  105708:	1880040c 	andi	r2,r3,16
  10570c:	10028e26 	beq	r2,zero,106148 <___svfprintf_internal_r+0x170c>
  105710:	d9002f17 	ldw	r4,188(sp)
  105714:	002b883a 	mov	r21,zero
  105718:	0007883a 	mov	r3,zero
  10571c:	25000017 	ldw	r20,0(r4)
  105720:	21000104 	addi	r4,r4,4
  105724:	d9002f15 	stw	r4,188(sp)
  105728:	a005883a 	mov	r2,r20
  10572c:	003f2406 	br	1053c0 <black_to_red_frame+0xfe1053c0>
  105730:	d9402a17 	ldw	r5,168(sp)
  105734:	b011883a 	mov	r8,r22
  105738:	1825883a 	mov	r18,r3
  10573c:	2880080c 	andi	r2,r5,32
  105740:	103f2a1e 	bne	r2,zero,1053ec <black_to_red_frame+0xfe1053ec>
  105744:	d8c02a17 	ldw	r3,168(sp)
  105748:	1880040c 	andi	r2,r3,16
  10574c:	10029526 	beq	r2,zero,1061a4 <___svfprintf_internal_r+0x1768>
  105750:	d9002f17 	ldw	r4,188(sp)
  105754:	002b883a 	mov	r21,zero
  105758:	00c00044 	movi	r3,1
  10575c:	25000017 	ldw	r20,0(r4)
  105760:	21000104 	addi	r4,r4,4
  105764:	d9002f15 	stw	r4,188(sp)
  105768:	a005883a 	mov	r2,r20
  10576c:	003f1406 	br	1053c0 <black_to_red_frame+0xfe1053c0>
  105770:	dd402785 	stb	r21,158(sp)
  105774:	b011883a 	mov	r8,r22
  105778:	883d7926 	beq	r17,zero,104d60 <black_to_red_frame+0xfe104d60>
  10577c:	00c00044 	movi	r3,1
  105780:	d8c02b15 	stw	r3,172(sp)
  105784:	dc401405 	stb	r17,80(sp)
  105788:	d8002785 	stb	zero,158(sp)
  10578c:	003f3706 	br	10546c <black_to_red_frame+0xfe10546c>
  105790:	d8c02017 	ldw	r3,128(sp)
  105794:	003e1b06 	br	105004 <black_to_red_frame+0xfe105004>
  105798:	d9003117 	ldw	r4,196(sp)
  10579c:	d9402e17 	ldw	r5,184(sp)
  1057a0:	d9801e04 	addi	r6,sp,120
  1057a4:	010d5f80 	call	10d5f8 <__ssprint_r>
  1057a8:	103d731e 	bne	r2,zero,104d78 <black_to_red_frame+0xfe104d78>
  1057ac:	d8c02017 	ldw	r3,128(sp)
  1057b0:	d8801f17 	ldw	r2,124(sp)
  1057b4:	da000404 	addi	r8,sp,16
  1057b8:	d9003417 	ldw	r4,208(sp)
  1057bc:	10800044 	addi	r2,r2,1
  1057c0:	44000015 	stw	r16,0(r8)
  1057c4:	20c7883a 	add	r3,r4,r3
  1057c8:	41000115 	stw	r4,4(r8)
  1057cc:	d8c02015 	stw	r3,128(sp)
  1057d0:	d8801f15 	stw	r2,124(sp)
  1057d4:	010001c4 	movi	r4,7
  1057d8:	20be620e 	bge	r4,r2,105164 <black_to_red_frame+0xfe105164>
  1057dc:	d9003117 	ldw	r4,196(sp)
  1057e0:	d9402e17 	ldw	r5,184(sp)
  1057e4:	d9801e04 	addi	r6,sp,120
  1057e8:	010d5f80 	call	10d5f8 <__ssprint_r>
  1057ec:	103d621e 	bne	r2,zero,104d78 <black_to_red_frame+0xfe104d78>
  1057f0:	d8c02017 	ldw	r3,128(sp)
  1057f4:	da000404 	addi	r8,sp,16
  1057f8:	003e5b06 	br	105168 <black_to_red_frame+0xfe105168>
  1057fc:	18803fcc 	andi	r2,r3,255
  105800:	00c00044 	movi	r3,1
  105804:	10c11e26 	beq	r2,r3,105c80 <___svfprintf_internal_r+0x1244>
  105808:	00c00084 	movi	r3,2
  10580c:	10c0e71e 	bne	r2,r3,105bac <___svfprintf_internal_r+0x1170>
  105810:	d9403b17 	ldw	r5,236(sp)
  105814:	d8c01dc4 	addi	r3,sp,119
  105818:	a08003cc 	andi	r2,r20,15
  10581c:	a808973a 	slli	r4,r21,28
  105820:	2885883a 	add	r2,r5,r2
  105824:	a028d13a 	srli	r20,r20,4
  105828:	10800003 	ldbu	r2,0(r2)
  10582c:	a82ad13a 	srli	r21,r21,4
  105830:	2528b03a 	or	r20,r4,r20
  105834:	18800005 	stb	r2,0(r3)
  105838:	a544b03a 	or	r2,r20,r21
  10583c:	1821883a 	mov	r16,r3
  105840:	18ffffc4 	addi	r3,r3,-1
  105844:	103ff41e 	bne	r2,zero,105818 <black_to_red_frame+0xfe105818>
  105848:	d8802817 	ldw	r2,160(sp)
  10584c:	1429c83a 	sub	r20,r2,r16
  105850:	003d9a06 	br	104ebc <black_to_red_frame+0xfe104ebc>
  105854:	00801944 	movi	r2,101
  105858:	1440820e 	bge	r2,r17,105a64 <___svfprintf_internal_r+0x1028>
  10585c:	d9003717 	ldw	r4,220(sp)
  105860:	d9403817 	ldw	r5,224(sp)
  105864:	000d883a 	mov	r6,zero
  105868:	000f883a 	mov	r7,zero
  10586c:	d8c03f15 	stw	r3,252(sp)
  105870:	da004015 	stw	r8,256(sp)
  105874:	01127c80 	call	1127c8 <__eqdf2>
  105878:	d8c03f17 	ldw	r3,252(sp)
  10587c:	da004017 	ldw	r8,256(sp)
  105880:	10011f1e 	bne	r2,zero,105d00 <___svfprintf_internal_r+0x12c4>
  105884:	d8801f17 	ldw	r2,124(sp)
  105888:	01000044 	movi	r4,1
  10588c:	18c00044 	addi	r3,r3,1
  105890:	10800044 	addi	r2,r2,1
  105894:	01400474 	movhi	r5,17
  105898:	295a3a04 	addi	r5,r5,26856
  10589c:	41000115 	stw	r4,4(r8)
  1058a0:	41400015 	stw	r5,0(r8)
  1058a4:	d8c02015 	stw	r3,128(sp)
  1058a8:	d8801f15 	stw	r2,124(sp)
  1058ac:	010001c4 	movi	r4,7
  1058b0:	20825516 	blt	r4,r2,106208 <___svfprintf_internal_r+0x17cc>
  1058b4:	42000204 	addi	r8,r8,8
  1058b8:	d8802617 	ldw	r2,152(sp)
  1058bc:	d9003417 	ldw	r4,208(sp)
  1058c0:	11000316 	blt	r2,r4,1058d0 <___svfprintf_internal_r+0xe94>
  1058c4:	d9402a17 	ldw	r5,168(sp)
  1058c8:	2880004c 	andi	r2,r5,1
  1058cc:	103e2626 	beq	r2,zero,105168 <black_to_red_frame+0xfe105168>
  1058d0:	d8803917 	ldw	r2,228(sp)
  1058d4:	d9003517 	ldw	r4,212(sp)
  1058d8:	d9403917 	ldw	r5,228(sp)
  1058dc:	1887883a 	add	r3,r3,r2
  1058e0:	d8801f17 	ldw	r2,124(sp)
  1058e4:	41000015 	stw	r4,0(r8)
  1058e8:	41400115 	stw	r5,4(r8)
  1058ec:	10800044 	addi	r2,r2,1
  1058f0:	d8c02015 	stw	r3,128(sp)
  1058f4:	d8801f15 	stw	r2,124(sp)
  1058f8:	010001c4 	movi	r4,7
  1058fc:	20828d16 	blt	r4,r2,106334 <___svfprintf_internal_r+0x18f8>
  105900:	42000204 	addi	r8,r8,8
  105904:	d8803417 	ldw	r2,208(sp)
  105908:	143fffc4 	addi	r16,r2,-1
  10590c:	043e160e 	bge	zero,r16,105168 <black_to_red_frame+0xfe105168>
  105910:	04400404 	movi	r17,16
  105914:	d8801f17 	ldw	r2,124(sp)
  105918:	05400474 	movhi	r21,17
  10591c:	ad5a3a84 	addi	r21,r21,26858
  105920:	8c01680e 	bge	r17,r16,105ec4 <___svfprintf_internal_r+0x1488>
  105924:	048001c4 	movi	r18,7
  105928:	dd003117 	ldw	r20,196(sp)
  10592c:	dd802e17 	ldw	r22,184(sp)
  105930:	00000306 	br	105940 <___svfprintf_internal_r+0xf04>
  105934:	42000204 	addi	r8,r8,8
  105938:	843ffc04 	addi	r16,r16,-16
  10593c:	8c01610e 	bge	r17,r16,105ec4 <___svfprintf_internal_r+0x1488>
  105940:	18c00404 	addi	r3,r3,16
  105944:	10800044 	addi	r2,r2,1
  105948:	45c00015 	stw	r23,0(r8)
  10594c:	44400115 	stw	r17,4(r8)
  105950:	d8c02015 	stw	r3,128(sp)
  105954:	d8801f15 	stw	r2,124(sp)
  105958:	90bff60e 	bge	r18,r2,105934 <black_to_red_frame+0xfe105934>
  10595c:	a009883a 	mov	r4,r20
  105960:	b00b883a 	mov	r5,r22
  105964:	d9801e04 	addi	r6,sp,120
  105968:	010d5f80 	call	10d5f8 <__ssprint_r>
  10596c:	103d021e 	bne	r2,zero,104d78 <black_to_red_frame+0xfe104d78>
  105970:	d8c02017 	ldw	r3,128(sp)
  105974:	d8801f17 	ldw	r2,124(sp)
  105978:	da000404 	addi	r8,sp,16
  10597c:	003fee06 	br	105938 <black_to_red_frame+0xfe105938>
  105980:	d9403017 	ldw	r5,192(sp)
  105984:	d8802b17 	ldw	r2,172(sp)
  105988:	28adc83a 	sub	r22,r5,r2
  10598c:	05bdbb0e 	bge	zero,r22,10507c <black_to_red_frame+0xfe10507c>
  105990:	07000404 	movi	fp,16
  105994:	d8801f17 	ldw	r2,124(sp)
  105998:	05400474 	movhi	r21,17
  10599c:	ad5a3a84 	addi	r21,r21,26858
  1059a0:	e580260e 	bge	fp,r22,105a3c <___svfprintf_internal_r+0x1000>
  1059a4:	dc402c15 	stw	r17,176(sp)
  1059a8:	dc002d15 	stw	r16,180(sp)
  1059ac:	b023883a 	mov	r17,r22
  1059b0:	01c001c4 	movi	r7,7
  1059b4:	a82d883a 	mov	r22,r21
  1059b8:	dc003117 	ldw	r16,196(sp)
  1059bc:	982b883a 	mov	r21,r19
  1059c0:	9027883a 	mov	r19,r18
  1059c4:	dc802e17 	ldw	r18,184(sp)
  1059c8:	00000306 	br	1059d8 <___svfprintf_internal_r+0xf9c>
  1059cc:	8c7ffc04 	addi	r17,r17,-16
  1059d0:	42000204 	addi	r8,r8,8
  1059d4:	e440130e 	bge	fp,r17,105a24 <___svfprintf_internal_r+0xfe8>
  1059d8:	18c00404 	addi	r3,r3,16
  1059dc:	10800044 	addi	r2,r2,1
  1059e0:	45c00015 	stw	r23,0(r8)
  1059e4:	47000115 	stw	fp,4(r8)
  1059e8:	d8c02015 	stw	r3,128(sp)
  1059ec:	d8801f15 	stw	r2,124(sp)
  1059f0:	38bff60e 	bge	r7,r2,1059cc <black_to_red_frame+0xfe1059cc>
  1059f4:	8009883a 	mov	r4,r16
  1059f8:	900b883a 	mov	r5,r18
  1059fc:	d9801e04 	addi	r6,sp,120
  105a00:	d9c03f15 	stw	r7,252(sp)
  105a04:	010d5f80 	call	10d5f8 <__ssprint_r>
  105a08:	d9c03f17 	ldw	r7,252(sp)
  105a0c:	103cda1e 	bne	r2,zero,104d78 <black_to_red_frame+0xfe104d78>
  105a10:	8c7ffc04 	addi	r17,r17,-16
  105a14:	d8c02017 	ldw	r3,128(sp)
  105a18:	d8801f17 	ldw	r2,124(sp)
  105a1c:	da000404 	addi	r8,sp,16
  105a20:	e47fed16 	blt	fp,r17,1059d8 <black_to_red_frame+0xfe1059d8>
  105a24:	9825883a 	mov	r18,r19
  105a28:	dc002d17 	ldw	r16,180(sp)
  105a2c:	a827883a 	mov	r19,r21
  105a30:	b02b883a 	mov	r21,r22
  105a34:	882d883a 	mov	r22,r17
  105a38:	dc402c17 	ldw	r17,176(sp)
  105a3c:	1d87883a 	add	r3,r3,r22
  105a40:	10800044 	addi	r2,r2,1
  105a44:	45400015 	stw	r21,0(r8)
  105a48:	45800115 	stw	r22,4(r8)
  105a4c:	d8c02015 	stw	r3,128(sp)
  105a50:	d8801f15 	stw	r2,124(sp)
  105a54:	010001c4 	movi	r4,7
  105a58:	20818116 	blt	r4,r2,106060 <___svfprintf_internal_r+0x1624>
  105a5c:	42000204 	addi	r8,r8,8
  105a60:	003d8606 	br	10507c <black_to_red_frame+0xfe10507c>
  105a64:	d9003417 	ldw	r4,208(sp)
  105a68:	00800044 	movi	r2,1
  105a6c:	1100340e 	bge	r2,r4,105b40 <___svfprintf_internal_r+0x1104>
  105a70:	dc401f17 	ldw	r17,124(sp)
  105a74:	00800044 	movi	r2,1
  105a78:	18c00044 	addi	r3,r3,1
  105a7c:	8c400044 	addi	r17,r17,1
  105a80:	40800115 	stw	r2,4(r8)
  105a84:	44000015 	stw	r16,0(r8)
  105a88:	d8c02015 	stw	r3,128(sp)
  105a8c:	dc401f15 	stw	r17,124(sp)
  105a90:	008001c4 	movi	r2,7
  105a94:	14416016 	blt	r2,r17,106018 <___svfprintf_internal_r+0x15dc>
  105a98:	42000204 	addi	r8,r8,8
  105a9c:	d8803917 	ldw	r2,228(sp)
  105aa0:	8c400044 	addi	r17,r17,1
  105aa4:	dc401f15 	stw	r17,124(sp)
  105aa8:	18a9883a 	add	r20,r3,r2
  105aac:	d8c03517 	ldw	r3,212(sp)
  105ab0:	40800115 	stw	r2,4(r8)
  105ab4:	dd002015 	stw	r20,128(sp)
  105ab8:	40c00015 	stw	r3,0(r8)
  105abc:	008001c4 	movi	r2,7
  105ac0:	14415e16 	blt	r2,r17,10603c <___svfprintf_internal_r+0x1600>
  105ac4:	44800204 	addi	r18,r8,8
  105ac8:	d9003717 	ldw	r4,220(sp)
  105acc:	d9403817 	ldw	r5,224(sp)
  105ad0:	000d883a 	mov	r6,zero
  105ad4:	000f883a 	mov	r7,zero
  105ad8:	01127c80 	call	1127c8 <__eqdf2>
  105adc:	1000c826 	beq	r2,zero,105e00 <___svfprintf_internal_r+0x13c4>
  105ae0:	d9003417 	ldw	r4,208(sp)
  105ae4:	84000044 	addi	r16,r16,1
  105ae8:	8c400044 	addi	r17,r17,1
  105aec:	20bfffc4 	addi	r2,r4,-1
  105af0:	a0a9883a 	add	r20,r20,r2
  105af4:	90800115 	stw	r2,4(r18)
  105af8:	94000015 	stw	r16,0(r18)
  105afc:	dd002015 	stw	r20,128(sp)
  105b00:	dc401f15 	stw	r17,124(sp)
  105b04:	008001c4 	movi	r2,7
  105b08:	14401916 	blt	r2,r17,105b70 <___svfprintf_internal_r+0x1134>
  105b0c:	94800204 	addi	r18,r18,8
  105b10:	d9003a17 	ldw	r4,232(sp)
  105b14:	d88022c4 	addi	r2,sp,139
  105b18:	8c400044 	addi	r17,r17,1
  105b1c:	2507883a 	add	r3,r4,r20
  105b20:	90800015 	stw	r2,0(r18)
  105b24:	91000115 	stw	r4,4(r18)
  105b28:	d8c02015 	stw	r3,128(sp)
  105b2c:	dc401f15 	stw	r17,124(sp)
  105b30:	008001c4 	movi	r2,7
  105b34:	147f2916 	blt	r2,r17,1057dc <black_to_red_frame+0xfe1057dc>
  105b38:	92000204 	addi	r8,r18,8
  105b3c:	003d8a06 	br	105168 <black_to_red_frame+0xfe105168>
  105b40:	d9402a17 	ldw	r5,168(sp)
  105b44:	2888703a 	and	r4,r5,r2
  105b48:	203fc91e 	bne	r4,zero,105a70 <black_to_red_frame+0xfe105a70>
  105b4c:	dc401f17 	ldw	r17,124(sp)
  105b50:	1d000044 	addi	r20,r3,1
  105b54:	40800115 	stw	r2,4(r8)
  105b58:	8c400044 	addi	r17,r17,1
  105b5c:	44000015 	stw	r16,0(r8)
  105b60:	dd002015 	stw	r20,128(sp)
  105b64:	dc401f15 	stw	r17,124(sp)
  105b68:	008001c4 	movi	r2,7
  105b6c:	1442550e 	bge	r2,r17,1064c4 <___svfprintf_internal_r+0x1a88>
  105b70:	d9003117 	ldw	r4,196(sp)
  105b74:	d9402e17 	ldw	r5,184(sp)
  105b78:	d9801e04 	addi	r6,sp,120
  105b7c:	010d5f80 	call	10d5f8 <__ssprint_r>
  105b80:	103c7d1e 	bne	r2,zero,104d78 <black_to_red_frame+0xfe104d78>
  105b84:	dd002017 	ldw	r20,128(sp)
  105b88:	dc401f17 	ldw	r17,124(sp)
  105b8c:	dc800404 	addi	r18,sp,16
  105b90:	003fdf06 	br	105b10 <black_to_red_frame+0xfe105b10>
  105b94:	d9003117 	ldw	r4,196(sp)
  105b98:	d9402e17 	ldw	r5,184(sp)
  105b9c:	d9801e04 	addi	r6,sp,120
  105ba0:	010d5f80 	call	10d5f8 <__ssprint_r>
  105ba4:	103dae26 	beq	r2,zero,105260 <black_to_red_frame+0xfe105260>
  105ba8:	003c7306 	br	104d78 <black_to_red_frame+0xfe104d78>
  105bac:	d8c01dc4 	addi	r3,sp,119
  105bb0:	a008d0fa 	srli	r4,r20,3
  105bb4:	a80a977a 	slli	r5,r21,29
  105bb8:	a82ad0fa 	srli	r21,r21,3
  105bbc:	a50001cc 	andi	r20,r20,7
  105bc0:	a0800c04 	addi	r2,r20,48
  105bc4:	2928b03a 	or	r20,r5,r4
  105bc8:	18800005 	stb	r2,0(r3)
  105bcc:	a548b03a 	or	r4,r20,r21
  105bd0:	1821883a 	mov	r16,r3
  105bd4:	18ffffc4 	addi	r3,r3,-1
  105bd8:	203ff51e 	bne	r4,zero,105bb0 <black_to_red_frame+0xfe105bb0>
  105bdc:	d9402a17 	ldw	r5,168(sp)
  105be0:	2900004c 	andi	r4,r5,1
  105be4:	800b883a 	mov	r5,r16
  105be8:	203f1726 	beq	r4,zero,105848 <black_to_red_frame+0xfe105848>
  105bec:	10803fcc 	andi	r2,r2,255
  105bf0:	1080201c 	xori	r2,r2,128
  105bf4:	10bfe004 	addi	r2,r2,-128
  105bf8:	01000c04 	movi	r4,48
  105bfc:	11026626 	beq	r2,r4,106598 <___svfprintf_internal_r+0x1b5c>
  105c00:	293fffc5 	stb	r4,-1(r5)
  105c04:	d9002817 	ldw	r4,160(sp)
  105c08:	1821883a 	mov	r16,r3
  105c0c:	20e9c83a 	sub	r20,r4,r3
  105c10:	003caa06 	br	104ebc <black_to_red_frame+0xfe104ebc>
  105c14:	d9003117 	ldw	r4,196(sp)
  105c18:	d9402e17 	ldw	r5,184(sp)
  105c1c:	d9801e04 	addi	r6,sp,120
  105c20:	010d5f80 	call	10d5f8 <__ssprint_r>
  105c24:	103c541e 	bne	r2,zero,104d78 <black_to_red_frame+0xfe104d78>
  105c28:	d8c02017 	ldw	r3,128(sp)
  105c2c:	da000404 	addi	r8,sp,16
  105c30:	003d4006 	br	105134 <black_to_red_frame+0xfe105134>
  105c34:	d9003117 	ldw	r4,196(sp)
  105c38:	d9402e17 	ldw	r5,184(sp)
  105c3c:	d9801e04 	addi	r6,sp,120
  105c40:	010d5f80 	call	10d5f8 <__ssprint_r>
  105c44:	103c4c1e 	bne	r2,zero,104d78 <black_to_red_frame+0xfe104d78>
  105c48:	d8c02017 	ldw	r3,128(sp)
  105c4c:	da000404 	addi	r8,sp,16
  105c50:	003cf906 	br	105038 <black_to_red_frame+0xfe105038>
  105c54:	d9003117 	ldw	r4,196(sp)
  105c58:	d9402e17 	ldw	r5,184(sp)
  105c5c:	d9801e04 	addi	r6,sp,120
  105c60:	010d5f80 	call	10d5f8 <__ssprint_r>
  105c64:	103c441e 	bne	r2,zero,104d78 <black_to_red_frame+0xfe104d78>
  105c68:	d8c02017 	ldw	r3,128(sp)
  105c6c:	da000404 	addi	r8,sp,16
  105c70:	003cff06 	br	105070 <black_to_red_frame+0xfe105070>
  105c74:	0029883a 	mov	r20,zero
  105c78:	dc001e04 	addi	r16,sp,120
  105c7c:	003c8f06 	br	104ebc <black_to_red_frame+0xfe104ebc>
  105c80:	a800021e 	bne	r21,zero,105c8c <___svfprintf_internal_r+0x1250>
  105c84:	00800244 	movi	r2,9
  105c88:	1500182e 	bgeu	r2,r20,105cec <___svfprintf_internal_r+0x12b0>
  105c8c:	d8801dc4 	addi	r2,sp,119
  105c90:	4039883a 	mov	fp,r8
  105c94:	a009883a 	mov	r4,r20
  105c98:	a80b883a 	mov	r5,r21
  105c9c:	01800284 	movi	r6,10
  105ca0:	000f883a 	mov	r7,zero
  105ca4:	1021883a 	mov	r16,r2
  105ca8:	0110f7c0 	call	110f7c <__umoddi3>
  105cac:	10800c04 	addi	r2,r2,48
  105cb0:	a009883a 	mov	r4,r20
  105cb4:	a80b883a 	mov	r5,r21
  105cb8:	80800005 	stb	r2,0(r16)
  105cbc:	01800284 	movi	r6,10
  105cc0:	000f883a 	mov	r7,zero
  105cc4:	01109280 	call	110928 <__udivdi3>
  105cc8:	182b883a 	mov	r21,r3
  105ccc:	10c6b03a 	or	r3,r2,r3
  105cd0:	1029883a 	mov	r20,r2
  105cd4:	80bfffc4 	addi	r2,r16,-1
  105cd8:	183fee1e 	bne	r3,zero,105c94 <black_to_red_frame+0xfe105c94>
  105cdc:	d9402817 	ldw	r5,160(sp)
  105ce0:	e011883a 	mov	r8,fp
  105ce4:	2c29c83a 	sub	r20,r5,r16
  105ce8:	003c7406 	br	104ebc <black_to_red_frame+0xfe104ebc>
  105cec:	a5000c04 	addi	r20,r20,48
  105cf0:	dd001dc5 	stb	r20,119(sp)
  105cf4:	dc001dc4 	addi	r16,sp,119
  105cf8:	dd003e17 	ldw	r20,248(sp)
  105cfc:	003c6f06 	br	104ebc <black_to_red_frame+0xfe104ebc>
  105d00:	d8802617 	ldw	r2,152(sp)
  105d04:	0081480e 	bge	zero,r2,106228 <___svfprintf_internal_r+0x17ec>
  105d08:	d9403417 	ldw	r5,208(sp)
  105d0c:	d8803317 	ldw	r2,204(sp)
  105d10:	8163883a 	add	r17,r16,r5
  105d14:	8c25c83a 	sub	r18,r17,r16
  105d18:	1480010e 	bge	r2,r18,105d20 <___svfprintf_internal_r+0x12e4>
  105d1c:	1025883a 	mov	r18,r2
  105d20:	04800a0e 	bge	zero,r18,105d4c <___svfprintf_internal_r+0x1310>
  105d24:	d8801f17 	ldw	r2,124(sp)
  105d28:	1c87883a 	add	r3,r3,r18
  105d2c:	44000015 	stw	r16,0(r8)
  105d30:	10800044 	addi	r2,r2,1
  105d34:	44800115 	stw	r18,4(r8)
  105d38:	d8c02015 	stw	r3,128(sp)
  105d3c:	d8801f15 	stw	r2,124(sp)
  105d40:	010001c4 	movi	r4,7
  105d44:	20823116 	blt	r4,r2,10660c <___svfprintf_internal_r+0x1bd0>
  105d48:	42000204 	addi	r8,r8,8
  105d4c:	90022d16 	blt	r18,zero,106604 <___svfprintf_internal_r+0x1bc8>
  105d50:	d9003317 	ldw	r4,204(sp)
  105d54:	24a5c83a 	sub	r18,r4,r18
  105d58:	04806a0e 	bge	zero,r18,105f04 <___svfprintf_internal_r+0x14c8>
  105d5c:	05000404 	movi	r20,16
  105d60:	d8801f17 	ldw	r2,124(sp)
  105d64:	05400474 	movhi	r21,17
  105d68:	ad5a3a84 	addi	r21,r21,26858
  105d6c:	a4811c0e 	bge	r20,r18,1061e0 <___svfprintf_internal_r+0x17a4>
  105d70:	9009883a 	mov	r4,r18
  105d74:	dc002c15 	stw	r16,176(sp)
  105d78:	8825883a 	mov	r18,r17
  105d7c:	058001c4 	movi	r22,7
  105d80:	df003117 	ldw	fp,196(sp)
  105d84:	dc002e17 	ldw	r16,184(sp)
  105d88:	2023883a 	mov	r17,r4
  105d8c:	00000306 	br	105d9c <___svfprintf_internal_r+0x1360>
  105d90:	42000204 	addi	r8,r8,8
  105d94:	8c7ffc04 	addi	r17,r17,-16
  105d98:	a4410d0e 	bge	r20,r17,1061d0 <___svfprintf_internal_r+0x1794>
  105d9c:	18c00404 	addi	r3,r3,16
  105da0:	10800044 	addi	r2,r2,1
  105da4:	45c00015 	stw	r23,0(r8)
  105da8:	45000115 	stw	r20,4(r8)
  105dac:	d8c02015 	stw	r3,128(sp)
  105db0:	d8801f15 	stw	r2,124(sp)
  105db4:	b0bff60e 	bge	r22,r2,105d90 <black_to_red_frame+0xfe105d90>
  105db8:	e009883a 	mov	r4,fp
  105dbc:	800b883a 	mov	r5,r16
  105dc0:	d9801e04 	addi	r6,sp,120
  105dc4:	010d5f80 	call	10d5f8 <__ssprint_r>
  105dc8:	103beb1e 	bne	r2,zero,104d78 <black_to_red_frame+0xfe104d78>
  105dcc:	d8c02017 	ldw	r3,128(sp)
  105dd0:	d8801f17 	ldw	r2,124(sp)
  105dd4:	da000404 	addi	r8,sp,16
  105dd8:	003fee06 	br	105d94 <black_to_red_frame+0xfe105d94>
  105ddc:	d9003117 	ldw	r4,196(sp)
  105de0:	d9402e17 	ldw	r5,184(sp)
  105de4:	d9801e04 	addi	r6,sp,120
  105de8:	010d5f80 	call	10d5f8 <__ssprint_r>
  105dec:	103be21e 	bne	r2,zero,104d78 <black_to_red_frame+0xfe104d78>
  105df0:	d8c02017 	ldw	r3,128(sp)
  105df4:	d8802787 	ldb	r2,158(sp)
  105df8:	da000404 	addi	r8,sp,16
  105dfc:	003c8106 	br	105004 <black_to_red_frame+0xfe105004>
  105e00:	d9403417 	ldw	r5,208(sp)
  105e04:	2c3fffc4 	addi	r16,r5,-1
  105e08:	043f410e 	bge	zero,r16,105b10 <black_to_red_frame+0xfe105b10>
  105e0c:	05800404 	movi	r22,16
  105e10:	05400474 	movhi	r21,17
  105e14:	ad5a3a84 	addi	r21,r21,26858
  105e18:	b4001e0e 	bge	r22,r16,105e94 <___svfprintf_internal_r+0x1458>
  105e1c:	a005883a 	mov	r2,r20
  105e20:	dcc02c15 	stw	r19,176(sp)
  105e24:	8029883a 	mov	r20,r16
  105e28:	070001c4 	movi	fp,7
  105e2c:	dc003117 	ldw	r16,196(sp)
  105e30:	dcc02e17 	ldw	r19,184(sp)
  105e34:	00000306 	br	105e44 <___svfprintf_internal_r+0x1408>
  105e38:	a53ffc04 	addi	r20,r20,-16
  105e3c:	94800204 	addi	r18,r18,8
  105e40:	b500110e 	bge	r22,r20,105e88 <___svfprintf_internal_r+0x144c>
  105e44:	10800404 	addi	r2,r2,16
  105e48:	8c400044 	addi	r17,r17,1
  105e4c:	95c00015 	stw	r23,0(r18)
  105e50:	95800115 	stw	r22,4(r18)
  105e54:	d8802015 	stw	r2,128(sp)
  105e58:	dc401f15 	stw	r17,124(sp)
  105e5c:	e47ff60e 	bge	fp,r17,105e38 <black_to_red_frame+0xfe105e38>
  105e60:	8009883a 	mov	r4,r16
  105e64:	980b883a 	mov	r5,r19
  105e68:	d9801e04 	addi	r6,sp,120
  105e6c:	010d5f80 	call	10d5f8 <__ssprint_r>
  105e70:	103bc11e 	bne	r2,zero,104d78 <black_to_red_frame+0xfe104d78>
  105e74:	a53ffc04 	addi	r20,r20,-16
  105e78:	d8802017 	ldw	r2,128(sp)
  105e7c:	dc401f17 	ldw	r17,124(sp)
  105e80:	dc800404 	addi	r18,sp,16
  105e84:	b53fef16 	blt	r22,r20,105e44 <black_to_red_frame+0xfe105e44>
  105e88:	dcc02c17 	ldw	r19,176(sp)
  105e8c:	a021883a 	mov	r16,r20
  105e90:	1029883a 	mov	r20,r2
  105e94:	a429883a 	add	r20,r20,r16
  105e98:	8c400044 	addi	r17,r17,1
  105e9c:	95400015 	stw	r21,0(r18)
  105ea0:	94000115 	stw	r16,4(r18)
  105ea4:	dd002015 	stw	r20,128(sp)
  105ea8:	dc401f15 	stw	r17,124(sp)
  105eac:	008001c4 	movi	r2,7
  105eb0:	147f160e 	bge	r2,r17,105b0c <black_to_red_frame+0xfe105b0c>
  105eb4:	003f2e06 	br	105b70 <black_to_red_frame+0xfe105b70>
  105eb8:	00c00084 	movi	r3,2
  105ebc:	a544b03a 	or	r2,r20,r21
  105ec0:	003d3f06 	br	1053c0 <black_to_red_frame+0xfe1053c0>
  105ec4:	45400015 	stw	r21,0(r8)
  105ec8:	44000115 	stw	r16,4(r8)
  105ecc:	1c07883a 	add	r3,r3,r16
  105ed0:	10800044 	addi	r2,r2,1
  105ed4:	d8c02015 	stw	r3,128(sp)
  105ed8:	d8801f15 	stw	r2,124(sp)
  105edc:	010001c4 	movi	r4,7
  105ee0:	20bca00e 	bge	r4,r2,105164 <black_to_red_frame+0xfe105164>
  105ee4:	003e3d06 	br	1057dc <black_to_red_frame+0xfe1057dc>
  105ee8:	d9003117 	ldw	r4,196(sp)
  105eec:	d9402e17 	ldw	r5,184(sp)
  105ef0:	d9801e04 	addi	r6,sp,120
  105ef4:	010d5f80 	call	10d5f8 <__ssprint_r>
  105ef8:	103b9f1e 	bne	r2,zero,104d78 <black_to_red_frame+0xfe104d78>
  105efc:	d8c02017 	ldw	r3,128(sp)
  105f00:	da000404 	addi	r8,sp,16
  105f04:	d9403317 	ldw	r5,204(sp)
  105f08:	d8802617 	ldw	r2,152(sp)
  105f0c:	d9003417 	ldw	r4,208(sp)
  105f10:	8161883a 	add	r16,r16,r5
  105f14:	11000316 	blt	r2,r4,105f24 <___svfprintf_internal_r+0x14e8>
  105f18:	d9402a17 	ldw	r5,168(sp)
  105f1c:	2900004c 	andi	r4,r5,1
  105f20:	20000d26 	beq	r4,zero,105f58 <___svfprintf_internal_r+0x151c>
  105f24:	d9003917 	ldw	r4,228(sp)
  105f28:	d9403517 	ldw	r5,212(sp)
  105f2c:	1907883a 	add	r3,r3,r4
  105f30:	d9001f17 	ldw	r4,124(sp)
  105f34:	41400015 	stw	r5,0(r8)
  105f38:	d9403917 	ldw	r5,228(sp)
  105f3c:	21000044 	addi	r4,r4,1
  105f40:	d8c02015 	stw	r3,128(sp)
  105f44:	41400115 	stw	r5,4(r8)
  105f48:	d9001f15 	stw	r4,124(sp)
  105f4c:	014001c4 	movi	r5,7
  105f50:	2901b616 	blt	r5,r4,10662c <___svfprintf_internal_r+0x1bf0>
  105f54:	42000204 	addi	r8,r8,8
  105f58:	d9003417 	ldw	r4,208(sp)
  105f5c:	8c23c83a 	sub	r17,r17,r16
  105f60:	2085c83a 	sub	r2,r4,r2
  105f64:	1025883a 	mov	r18,r2
  105f68:	8880010e 	bge	r17,r2,105f70 <___svfprintf_internal_r+0x1534>
  105f6c:	8825883a 	mov	r18,r17
  105f70:	04800a0e 	bge	zero,r18,105f9c <___svfprintf_internal_r+0x1560>
  105f74:	d9001f17 	ldw	r4,124(sp)
  105f78:	1c87883a 	add	r3,r3,r18
  105f7c:	44000015 	stw	r16,0(r8)
  105f80:	21000044 	addi	r4,r4,1
  105f84:	44800115 	stw	r18,4(r8)
  105f88:	d8c02015 	stw	r3,128(sp)
  105f8c:	d9001f15 	stw	r4,124(sp)
  105f90:	014001c4 	movi	r5,7
  105f94:	2901cc16 	blt	r5,r4,1066c8 <___svfprintf_internal_r+0x1c8c>
  105f98:	42000204 	addi	r8,r8,8
  105f9c:	9001b616 	blt	r18,zero,106678 <___svfprintf_internal_r+0x1c3c>
  105fa0:	14a1c83a 	sub	r16,r2,r18
  105fa4:	043c700e 	bge	zero,r16,105168 <black_to_red_frame+0xfe105168>
  105fa8:	04400404 	movi	r17,16
  105fac:	d8801f17 	ldw	r2,124(sp)
  105fb0:	05400474 	movhi	r21,17
  105fb4:	ad5a3a84 	addi	r21,r21,26858
  105fb8:	8c3fc20e 	bge	r17,r16,105ec4 <black_to_red_frame+0xfe105ec4>
  105fbc:	048001c4 	movi	r18,7
  105fc0:	dd003117 	ldw	r20,196(sp)
  105fc4:	dd802e17 	ldw	r22,184(sp)
  105fc8:	00000306 	br	105fd8 <___svfprintf_internal_r+0x159c>
  105fcc:	42000204 	addi	r8,r8,8
  105fd0:	843ffc04 	addi	r16,r16,-16
  105fd4:	8c3fbb0e 	bge	r17,r16,105ec4 <black_to_red_frame+0xfe105ec4>
  105fd8:	18c00404 	addi	r3,r3,16
  105fdc:	10800044 	addi	r2,r2,1
  105fe0:	45c00015 	stw	r23,0(r8)
  105fe4:	44400115 	stw	r17,4(r8)
  105fe8:	d8c02015 	stw	r3,128(sp)
  105fec:	d8801f15 	stw	r2,124(sp)
  105ff0:	90bff60e 	bge	r18,r2,105fcc <black_to_red_frame+0xfe105fcc>
  105ff4:	a009883a 	mov	r4,r20
  105ff8:	b00b883a 	mov	r5,r22
  105ffc:	d9801e04 	addi	r6,sp,120
  106000:	010d5f80 	call	10d5f8 <__ssprint_r>
  106004:	103b5c1e 	bne	r2,zero,104d78 <black_to_red_frame+0xfe104d78>
  106008:	d8c02017 	ldw	r3,128(sp)
  10600c:	d8801f17 	ldw	r2,124(sp)
  106010:	da000404 	addi	r8,sp,16
  106014:	003fee06 	br	105fd0 <black_to_red_frame+0xfe105fd0>
  106018:	d9003117 	ldw	r4,196(sp)
  10601c:	d9402e17 	ldw	r5,184(sp)
  106020:	d9801e04 	addi	r6,sp,120
  106024:	010d5f80 	call	10d5f8 <__ssprint_r>
  106028:	103b531e 	bne	r2,zero,104d78 <black_to_red_frame+0xfe104d78>
  10602c:	d8c02017 	ldw	r3,128(sp)
  106030:	dc401f17 	ldw	r17,124(sp)
  106034:	da000404 	addi	r8,sp,16
  106038:	003e9806 	br	105a9c <black_to_red_frame+0xfe105a9c>
  10603c:	d9003117 	ldw	r4,196(sp)
  106040:	d9402e17 	ldw	r5,184(sp)
  106044:	d9801e04 	addi	r6,sp,120
  106048:	010d5f80 	call	10d5f8 <__ssprint_r>
  10604c:	103b4a1e 	bne	r2,zero,104d78 <black_to_red_frame+0xfe104d78>
  106050:	dd002017 	ldw	r20,128(sp)
  106054:	dc401f17 	ldw	r17,124(sp)
  106058:	dc800404 	addi	r18,sp,16
  10605c:	003e9a06 	br	105ac8 <black_to_red_frame+0xfe105ac8>
  106060:	d9003117 	ldw	r4,196(sp)
  106064:	d9402e17 	ldw	r5,184(sp)
  106068:	d9801e04 	addi	r6,sp,120
  10606c:	010d5f80 	call	10d5f8 <__ssprint_r>
  106070:	103b411e 	bne	r2,zero,104d78 <black_to_red_frame+0xfe104d78>
  106074:	d8c02017 	ldw	r3,128(sp)
  106078:	da000404 	addi	r8,sp,16
  10607c:	003bff06 	br	10507c <black_to_red_frame+0xfe10507c>
  106080:	da004015 	stw	r8,256(sp)
  106084:	010d3b00 	call	10d3b0 <__fpclassifyd>
  106088:	da004017 	ldw	r8,256(sp)
  10608c:	1000b11e 	bne	r2,zero,106354 <___svfprintf_internal_r+0x1918>
  106090:	008011c4 	movi	r2,71
  106094:	1441180e 	bge	r2,r17,1064f8 <___svfprintf_internal_r+0x1abc>
  106098:	04000474 	movhi	r16,17
  10609c:	841a2d04 	addi	r16,r16,26804
  1060a0:	d9002a17 	ldw	r4,168(sp)
  1060a4:	00bfdfc4 	movi	r2,-129
  1060a8:	00c000c4 	movi	r3,3
  1060ac:	2088703a 	and	r4,r4,r2
  1060b0:	d8c02b15 	stw	r3,172(sp)
  1060b4:	d9002a15 	stw	r4,168(sp)
  1060b8:	dd802783 	ldbu	r22,158(sp)
  1060bc:	1829883a 	mov	r20,r3
  1060c0:	0025883a 	mov	r18,zero
  1060c4:	d8003315 	stw	zero,204(sp)
  1060c8:	003b8106 	br	104ed0 <black_to_red_frame+0xfe104ed0>
  1060cc:	d8c02f17 	ldw	r3,188(sp)
  1060d0:	d9002f17 	ldw	r4,188(sp)
  1060d4:	d9402f17 	ldw	r5,188(sp)
  1060d8:	18c00017 	ldw	r3,0(r3)
  1060dc:	21000117 	ldw	r4,4(r4)
  1060e0:	29400204 	addi	r5,r5,8
  1060e4:	d8c03715 	stw	r3,220(sp)
  1060e8:	d9003815 	stw	r4,224(sp)
  1060ec:	d9402f15 	stw	r5,188(sp)
  1060f0:	003c7006 	br	1052b4 <black_to_red_frame+0xfe1052b4>
  1060f4:	d9402a17 	ldw	r5,168(sp)
  1060f8:	2880100c 	andi	r2,r5,64
  1060fc:	10012926 	beq	r2,zero,1065a4 <___svfprintf_internal_r+0x1b68>
  106100:	d8802f17 	ldw	r2,188(sp)
  106104:	002b883a 	mov	r21,zero
  106108:	1500000b 	ldhu	r20,0(r2)
  10610c:	10800104 	addi	r2,r2,4
  106110:	d8802f15 	stw	r2,188(sp)
  106114:	003ce906 	br	1054bc <black_to_red_frame+0xfe1054bc>
  106118:	d9402a17 	ldw	r5,168(sp)
  10611c:	2880040c 	andi	r2,r5,16
  106120:	10011326 	beq	r2,zero,106570 <___svfprintf_internal_r+0x1b34>
  106124:	d8c02f17 	ldw	r3,188(sp)
  106128:	d9003217 	ldw	r4,200(sp)
  10612c:	18800017 	ldw	r2,0(r3)
  106130:	18c00104 	addi	r3,r3,4
  106134:	d8c02f15 	stw	r3,188(sp)
  106138:	11000015 	stw	r4,0(r2)
  10613c:	003a6d06 	br	104af4 <black_to_red_frame+0xfe104af4>
  106140:	9c400007 	ldb	r17,0(r19)
  106144:	003a9306 	br	104b94 <black_to_red_frame+0xfe104b94>
  106148:	d9402a17 	ldw	r5,168(sp)
  10614c:	2880100c 	andi	r2,r5,64
  106150:	1000ff26 	beq	r2,zero,106550 <___svfprintf_internal_r+0x1b14>
  106154:	d8802f17 	ldw	r2,188(sp)
  106158:	002b883a 	mov	r21,zero
  10615c:	0007883a 	mov	r3,zero
  106160:	1500000b 	ldhu	r20,0(r2)
  106164:	10800104 	addi	r2,r2,4
  106168:	d8802f15 	stw	r2,188(sp)
  10616c:	a005883a 	mov	r2,r20
  106170:	003c9306 	br	1053c0 <black_to_red_frame+0xfe1053c0>
  106174:	00c00084 	movi	r3,2
  106178:	003c9106 	br	1053c0 <black_to_red_frame+0xfe1053c0>
  10617c:	d8c02a17 	ldw	r3,168(sp)
  106180:	1880100c 	andi	r2,r3,64
  106184:	10010d26 	beq	r2,zero,1065bc <___svfprintf_internal_r+0x1b80>
  106188:	d9002f17 	ldw	r4,188(sp)
  10618c:	2500000f 	ldh	r20,0(r4)
  106190:	21000104 	addi	r4,r4,4
  106194:	d9002f15 	stw	r4,188(sp)
  106198:	a02bd7fa 	srai	r21,r20,31
  10619c:	a805883a 	mov	r2,r21
  1061a0:	003b3206 	br	104e6c <black_to_red_frame+0xfe104e6c>
  1061a4:	d9402a17 	ldw	r5,168(sp)
  1061a8:	2880100c 	andi	r2,r5,64
  1061ac:	1000e026 	beq	r2,zero,106530 <___svfprintf_internal_r+0x1af4>
  1061b0:	d8802f17 	ldw	r2,188(sp)
  1061b4:	002b883a 	mov	r21,zero
  1061b8:	00c00044 	movi	r3,1
  1061bc:	1500000b 	ldhu	r20,0(r2)
  1061c0:	10800104 	addi	r2,r2,4
  1061c4:	d8802f15 	stw	r2,188(sp)
  1061c8:	a005883a 	mov	r2,r20
  1061cc:	003c7c06 	br	1053c0 <black_to_red_frame+0xfe1053c0>
  1061d0:	dc002c17 	ldw	r16,176(sp)
  1061d4:	8809883a 	mov	r4,r17
  1061d8:	9023883a 	mov	r17,r18
  1061dc:	2025883a 	mov	r18,r4
  1061e0:	1c87883a 	add	r3,r3,r18
  1061e4:	10800044 	addi	r2,r2,1
  1061e8:	45400015 	stw	r21,0(r8)
  1061ec:	44800115 	stw	r18,4(r8)
  1061f0:	d8c02015 	stw	r3,128(sp)
  1061f4:	d8801f15 	stw	r2,124(sp)
  1061f8:	010001c4 	movi	r4,7
  1061fc:	20bf3a16 	blt	r4,r2,105ee8 <black_to_red_frame+0xfe105ee8>
  106200:	42000204 	addi	r8,r8,8
  106204:	003f3f06 	br	105f04 <black_to_red_frame+0xfe105f04>
  106208:	d9003117 	ldw	r4,196(sp)
  10620c:	d9402e17 	ldw	r5,184(sp)
  106210:	d9801e04 	addi	r6,sp,120
  106214:	010d5f80 	call	10d5f8 <__ssprint_r>
  106218:	103ad71e 	bne	r2,zero,104d78 <black_to_red_frame+0xfe104d78>
  10621c:	d8c02017 	ldw	r3,128(sp)
  106220:	da000404 	addi	r8,sp,16
  106224:	003da406 	br	1058b8 <black_to_red_frame+0xfe1058b8>
  106228:	d9001f17 	ldw	r4,124(sp)
  10622c:	01400474 	movhi	r5,17
  106230:	295a3a04 	addi	r5,r5,26856
  106234:	18c00044 	addi	r3,r3,1
  106238:	21000044 	addi	r4,r4,1
  10623c:	41400015 	stw	r5,0(r8)
  106240:	01400044 	movi	r5,1
  106244:	41400115 	stw	r5,4(r8)
  106248:	d8c02015 	stw	r3,128(sp)
  10624c:	d9001f15 	stw	r4,124(sp)
  106250:	014001c4 	movi	r5,7
  106254:	2900ab16 	blt	r5,r4,106504 <___svfprintf_internal_r+0x1ac8>
  106258:	42000204 	addi	r8,r8,8
  10625c:	1023883a 	mov	r17,r2
  106260:	8800051e 	bne	r17,zero,106278 <___svfprintf_internal_r+0x183c>
  106264:	d8803417 	ldw	r2,208(sp)
  106268:	1000031e 	bne	r2,zero,106278 <___svfprintf_internal_r+0x183c>
  10626c:	d9002a17 	ldw	r4,168(sp)
  106270:	2080004c 	andi	r2,r4,1
  106274:	103bbc26 	beq	r2,zero,105168 <black_to_red_frame+0xfe105168>
  106278:	d8803517 	ldw	r2,212(sp)
  10627c:	d9403917 	ldw	r5,228(sp)
  106280:	010001c4 	movi	r4,7
  106284:	40800015 	stw	r2,0(r8)
  106288:	d8801f17 	ldw	r2,124(sp)
  10628c:	1947883a 	add	r3,r3,r5
  106290:	41400115 	stw	r5,4(r8)
  106294:	10800044 	addi	r2,r2,1
  106298:	d8c02015 	stw	r3,128(sp)
  10629c:	d8801f15 	stw	r2,124(sp)
  1062a0:	20817a16 	blt	r4,r2,10688c <___svfprintf_internal_r+0x1e50>
  1062a4:	42000204 	addi	r8,r8,8
  1062a8:	0463c83a 	sub	r17,zero,r17
  1062ac:	047d420e 	bge	zero,r17,1057b8 <black_to_red_frame+0xfe1057b8>
  1062b0:	04800404 	movi	r18,16
  1062b4:	05400474 	movhi	r21,17
  1062b8:	ad5a3a84 	addi	r21,r21,26858
  1062bc:	9440e40e 	bge	r18,r17,106650 <___svfprintf_internal_r+0x1c14>
  1062c0:	050001c4 	movi	r20,7
  1062c4:	dd803117 	ldw	r22,196(sp)
  1062c8:	df002e17 	ldw	fp,184(sp)
  1062cc:	00000306 	br	1062dc <___svfprintf_internal_r+0x18a0>
  1062d0:	42000204 	addi	r8,r8,8
  1062d4:	8c7ffc04 	addi	r17,r17,-16
  1062d8:	9440dd0e 	bge	r18,r17,106650 <___svfprintf_internal_r+0x1c14>
  1062dc:	18c00404 	addi	r3,r3,16
  1062e0:	10800044 	addi	r2,r2,1
  1062e4:	45c00015 	stw	r23,0(r8)
  1062e8:	44800115 	stw	r18,4(r8)
  1062ec:	d8c02015 	stw	r3,128(sp)
  1062f0:	d8801f15 	stw	r2,124(sp)
  1062f4:	a0bff60e 	bge	r20,r2,1062d0 <black_to_red_frame+0xfe1062d0>
  1062f8:	b009883a 	mov	r4,r22
  1062fc:	e00b883a 	mov	r5,fp
  106300:	d9801e04 	addi	r6,sp,120
  106304:	010d5f80 	call	10d5f8 <__ssprint_r>
  106308:	103a9b1e 	bne	r2,zero,104d78 <black_to_red_frame+0xfe104d78>
  10630c:	d8c02017 	ldw	r3,128(sp)
  106310:	d8801f17 	ldw	r2,124(sp)
  106314:	da000404 	addi	r8,sp,16
  106318:	003fee06 	br	1062d4 <black_to_red_frame+0xfe1062d4>
  10631c:	d9002a17 	ldw	r4,168(sp)
  106320:	9cc00044 	addi	r19,r19,1
  106324:	14400047 	ldb	r17,1(r2)
  106328:	21000814 	ori	r4,r4,32
  10632c:	d9002a15 	stw	r4,168(sp)
  106330:	003a1806 	br	104b94 <black_to_red_frame+0xfe104b94>
  106334:	d9003117 	ldw	r4,196(sp)
  106338:	d9402e17 	ldw	r5,184(sp)
  10633c:	d9801e04 	addi	r6,sp,120
  106340:	010d5f80 	call	10d5f8 <__ssprint_r>
  106344:	103a8c1e 	bne	r2,zero,104d78 <black_to_red_frame+0xfe104d78>
  106348:	d8c02017 	ldw	r3,128(sp)
  10634c:	da000404 	addi	r8,sp,16
  106350:	003d6c06 	br	105904 <black_to_red_frame+0xfe105904>
  106354:	057ff7c4 	movi	r21,-33
  106358:	00bfffc4 	movi	r2,-1
  10635c:	8d6a703a 	and	r21,r17,r21
  106360:	90807126 	beq	r18,r2,106528 <___svfprintf_internal_r+0x1aec>
  106364:	008011c4 	movi	r2,71
  106368:	a8815226 	beq	r21,r2,1068b4 <___svfprintf_internal_r+0x1e78>
  10636c:	d8c02a17 	ldw	r3,168(sp)
  106370:	d9003817 	ldw	r4,224(sp)
  106374:	18c04014 	ori	r3,r3,256
  106378:	d8c02c15 	stw	r3,176(sp)
  10637c:	20015216 	blt	r4,zero,1068c8 <___svfprintf_internal_r+0x1e8c>
  106380:	dd003817 	ldw	r20,224(sp)
  106384:	d8002b05 	stb	zero,172(sp)
  106388:	00801984 	movi	r2,102
  10638c:	8880f126 	beq	r17,r2,106754 <___svfprintf_internal_r+0x1d18>
  106390:	00801184 	movi	r2,70
  106394:	8880ef26 	beq	r17,r2,106754 <___svfprintf_internal_r+0x1d18>
  106398:	00801144 	movi	r2,69
  10639c:	a8814826 	beq	r21,r2,1068c0 <___svfprintf_internal_r+0x1e84>
  1063a0:	902d883a 	mov	r22,r18
  1063a4:	d8802604 	addi	r2,sp,152
  1063a8:	d8800115 	stw	r2,4(sp)
  1063ac:	d9003117 	ldw	r4,196(sp)
  1063b0:	d8802504 	addi	r2,sp,148
  1063b4:	d9403717 	ldw	r5,220(sp)
  1063b8:	d8800215 	stw	r2,8(sp)
  1063bc:	d8802104 	addi	r2,sp,132
  1063c0:	dd800015 	stw	r22,0(sp)
  1063c4:	d8800315 	stw	r2,12(sp)
  1063c8:	a00d883a 	mov	r6,r20
  1063cc:	01c00084 	movi	r7,2
  1063d0:	da004015 	stw	r8,256(sp)
  1063d4:	0108f800 	call	108f80 <_dtoa_r>
  1063d8:	1021883a 	mov	r16,r2
  1063dc:	008019c4 	movi	r2,103
  1063e0:	da004017 	ldw	r8,256(sp)
  1063e4:	88800226 	beq	r17,r2,1063f0 <___svfprintf_internal_r+0x19b4>
  1063e8:	008011c4 	movi	r2,71
  1063ec:	8880031e 	bne	r17,r2,1063fc <___svfprintf_internal_r+0x19c0>
  1063f0:	d9002a17 	ldw	r4,168(sp)
  1063f4:	2080004c 	andi	r2,r4,1
  1063f8:	10015026 	beq	r2,zero,10693c <___svfprintf_internal_r+0x1f00>
  1063fc:	00801184 	movi	r2,70
  106400:	85b9883a 	add	fp,r16,r22
  106404:	a8810e26 	beq	r21,r2,106840 <___svfprintf_internal_r+0x1e04>
  106408:	d9003717 	ldw	r4,220(sp)
  10640c:	a00b883a 	mov	r5,r20
  106410:	000d883a 	mov	r6,zero
  106414:	000f883a 	mov	r7,zero
  106418:	da004015 	stw	r8,256(sp)
  10641c:	01127c80 	call	1127c8 <__eqdf2>
  106420:	da004017 	ldw	r8,256(sp)
  106424:	1000dc26 	beq	r2,zero,106798 <___svfprintf_internal_r+0x1d5c>
  106428:	d8802117 	ldw	r2,132(sp)
  10642c:	1700062e 	bgeu	r2,fp,106448 <___svfprintf_internal_r+0x1a0c>
  106430:	01000c04 	movi	r4,48
  106434:	10c00044 	addi	r3,r2,1
  106438:	d8c02115 	stw	r3,132(sp)
  10643c:	11000005 	stb	r4,0(r2)
  106440:	d8802117 	ldw	r2,132(sp)
  106444:	173ffb36 	bltu	r2,fp,106434 <black_to_red_frame+0xfe106434>
  106448:	1405c83a 	sub	r2,r2,r16
  10644c:	d8803415 	stw	r2,208(sp)
  106450:	008011c4 	movi	r2,71
  106454:	a880b226 	beq	r21,r2,106720 <___svfprintf_internal_r+0x1ce4>
  106458:	00801944 	movi	r2,101
  10645c:	1441840e 	bge	r2,r17,106a70 <___svfprintf_internal_r+0x2034>
  106460:	d8c02617 	ldw	r3,152(sp)
  106464:	00801984 	movi	r2,102
  106468:	d8c03315 	stw	r3,204(sp)
  10646c:	88812a26 	beq	r17,r2,106918 <___svfprintf_internal_r+0x1edc>
  106470:	d8c03317 	ldw	r3,204(sp)
  106474:	d9003417 	ldw	r4,208(sp)
  106478:	19011716 	blt	r3,r4,1068d8 <___svfprintf_internal_r+0x1e9c>
  10647c:	d9402a17 	ldw	r5,168(sp)
  106480:	2880004c 	andi	r2,r5,1
  106484:	10011d1e 	bne	r2,zero,1068fc <___svfprintf_internal_r+0x1ec0>
  106488:	1805883a 	mov	r2,r3
  10648c:	18017316 	blt	r3,zero,106a5c <___svfprintf_internal_r+0x2020>
  106490:	dd003317 	ldw	r20,204(sp)
  106494:	044019c4 	movi	r17,103
  106498:	dd802b07 	ldb	r22,172(sp)
  10649c:	b000981e 	bne	r22,zero,106700 <___svfprintf_internal_r+0x1cc4>
  1064a0:	d8c02c17 	ldw	r3,176(sp)
  1064a4:	dd802783 	ldbu	r22,158(sp)
  1064a8:	d8802b15 	stw	r2,172(sp)
  1064ac:	d8c02a15 	stw	r3,168(sp)
  1064b0:	0025883a 	mov	r18,zero
  1064b4:	003a8606 	br	104ed0 <black_to_red_frame+0xfe104ed0>
  1064b8:	04000474 	movhi	r16,17
  1064bc:	841a2a04 	addi	r16,r16,26792
  1064c0:	003b8f06 	br	105300 <black_to_red_frame+0xfe105300>
  1064c4:	44800204 	addi	r18,r8,8
  1064c8:	003d9106 	br	105b10 <black_to_red_frame+0xfe105b10>
  1064cc:	d9003117 	ldw	r4,196(sp)
  1064d0:	04001004 	movi	r16,64
  1064d4:	800b883a 	mov	r5,r16
  1064d8:	0103f6c0 	call	103f6c <_malloc_r>
  1064dc:	d9002e17 	ldw	r4,184(sp)
  1064e0:	20800015 	stw	r2,0(r4)
  1064e4:	20800415 	stw	r2,16(r4)
  1064e8:	10016326 	beq	r2,zero,106a78 <___svfprintf_internal_r+0x203c>
  1064ec:	d8802e17 	ldw	r2,184(sp)
  1064f0:	14000515 	stw	r16,20(r2)
  1064f4:	00396c06 	br	104aa8 <black_to_red_frame+0xfe104aa8>
  1064f8:	04000474 	movhi	r16,17
  1064fc:	841a2c04 	addi	r16,r16,26800
  106500:	003ee706 	br	1060a0 <black_to_red_frame+0xfe1060a0>
  106504:	d9003117 	ldw	r4,196(sp)
  106508:	d9402e17 	ldw	r5,184(sp)
  10650c:	d9801e04 	addi	r6,sp,120
  106510:	010d5f80 	call	10d5f8 <__ssprint_r>
  106514:	103a181e 	bne	r2,zero,104d78 <black_to_red_frame+0xfe104d78>
  106518:	dc402617 	ldw	r17,152(sp)
  10651c:	d8c02017 	ldw	r3,128(sp)
  106520:	da000404 	addi	r8,sp,16
  106524:	003f4e06 	br	106260 <black_to_red_frame+0xfe106260>
  106528:	04800184 	movi	r18,6
  10652c:	003f8f06 	br	10636c <black_to_red_frame+0xfe10636c>
  106530:	d8c02f17 	ldw	r3,188(sp)
  106534:	002b883a 	mov	r21,zero
  106538:	1d000017 	ldw	r20,0(r3)
  10653c:	18c00104 	addi	r3,r3,4
  106540:	d8c02f15 	stw	r3,188(sp)
  106544:	a005883a 	mov	r2,r20
  106548:	00c00044 	movi	r3,1
  10654c:	003b9c06 	br	1053c0 <black_to_red_frame+0xfe1053c0>
  106550:	d8c02f17 	ldw	r3,188(sp)
  106554:	002b883a 	mov	r21,zero
  106558:	1d000017 	ldw	r20,0(r3)
  10655c:	18c00104 	addi	r3,r3,4
  106560:	d8c02f15 	stw	r3,188(sp)
  106564:	a005883a 	mov	r2,r20
  106568:	0007883a 	mov	r3,zero
  10656c:	003b9406 	br	1053c0 <black_to_red_frame+0xfe1053c0>
  106570:	d9402a17 	ldw	r5,168(sp)
  106574:	2880100c 	andi	r2,r5,64
  106578:	10006f26 	beq	r2,zero,106738 <___svfprintf_internal_r+0x1cfc>
  10657c:	d8c02f17 	ldw	r3,188(sp)
  106580:	d9003217 	ldw	r4,200(sp)
  106584:	18800017 	ldw	r2,0(r3)
  106588:	18c00104 	addi	r3,r3,4
  10658c:	d8c02f15 	stw	r3,188(sp)
  106590:	1100000d 	sth	r4,0(r2)
  106594:	00395706 	br	104af4 <black_to_red_frame+0xfe104af4>
  106598:	d8c02817 	ldw	r3,160(sp)
  10659c:	1c29c83a 	sub	r20,r3,r16
  1065a0:	003a4606 	br	104ebc <black_to_red_frame+0xfe104ebc>
  1065a4:	d8c02f17 	ldw	r3,188(sp)
  1065a8:	002b883a 	mov	r21,zero
  1065ac:	1d000017 	ldw	r20,0(r3)
  1065b0:	18c00104 	addi	r3,r3,4
  1065b4:	d8c02f15 	stw	r3,188(sp)
  1065b8:	003bc006 	br	1054bc <black_to_red_frame+0xfe1054bc>
  1065bc:	d9402f17 	ldw	r5,188(sp)
  1065c0:	2d000017 	ldw	r20,0(r5)
  1065c4:	29400104 	addi	r5,r5,4
  1065c8:	d9402f15 	stw	r5,188(sp)
  1065cc:	a02bd7fa 	srai	r21,r20,31
  1065d0:	a805883a 	mov	r2,r21
  1065d4:	003a2506 	br	104e6c <black_to_red_frame+0xfe104e6c>
  1065d8:	dd804015 	stw	r22,256(sp)
  1065dc:	01049b00 	call	1049b0 <strlen>
  1065e0:	1029883a 	mov	r20,r2
  1065e4:	da004017 	ldw	r8,256(sp)
  1065e8:	a03c000e 	bge	r20,zero,1055ec <black_to_red_frame+0xfe1055ec>
  1065ec:	0005883a 	mov	r2,zero
  1065f0:	003bfe06 	br	1055ec <black_to_red_frame+0xfe1055ec>
  1065f4:	01000474 	movhi	r4,17
  1065f8:	211a3e84 	addi	r4,r4,26874
  1065fc:	d9003615 	stw	r4,216(sp)
  106600:	003a7506 	br	104fd8 <black_to_red_frame+0xfe104fd8>
  106604:	0025883a 	mov	r18,zero
  106608:	003dd106 	br	105d50 <black_to_red_frame+0xfe105d50>
  10660c:	d9003117 	ldw	r4,196(sp)
  106610:	d9402e17 	ldw	r5,184(sp)
  106614:	d9801e04 	addi	r6,sp,120
  106618:	010d5f80 	call	10d5f8 <__ssprint_r>
  10661c:	1039d61e 	bne	r2,zero,104d78 <black_to_red_frame+0xfe104d78>
  106620:	d8c02017 	ldw	r3,128(sp)
  106624:	da000404 	addi	r8,sp,16
  106628:	003dc806 	br	105d4c <black_to_red_frame+0xfe105d4c>
  10662c:	d9003117 	ldw	r4,196(sp)
  106630:	d9402e17 	ldw	r5,184(sp)
  106634:	d9801e04 	addi	r6,sp,120
  106638:	010d5f80 	call	10d5f8 <__ssprint_r>
  10663c:	1039ce1e 	bne	r2,zero,104d78 <black_to_red_frame+0xfe104d78>
  106640:	d8802617 	ldw	r2,152(sp)
  106644:	d8c02017 	ldw	r3,128(sp)
  106648:	da000404 	addi	r8,sp,16
  10664c:	003e4206 	br	105f58 <black_to_red_frame+0xfe105f58>
  106650:	1c47883a 	add	r3,r3,r17
  106654:	10800044 	addi	r2,r2,1
  106658:	45400015 	stw	r21,0(r8)
  10665c:	44400115 	stw	r17,4(r8)
  106660:	d8c02015 	stw	r3,128(sp)
  106664:	d8801f15 	stw	r2,124(sp)
  106668:	010001c4 	movi	r4,7
  10666c:	20bc4a16 	blt	r4,r2,105798 <black_to_red_frame+0xfe105798>
  106670:	42000204 	addi	r8,r8,8
  106674:	003c5006 	br	1057b8 <black_to_red_frame+0xfe1057b8>
  106678:	0025883a 	mov	r18,zero
  10667c:	003e4806 	br	105fa0 <black_to_red_frame+0xfe105fa0>
  106680:	00800184 	movi	r2,6
  106684:	1480012e 	bgeu	r2,r18,10668c <___svfprintf_internal_r+0x1c50>
  106688:	1025883a 	mov	r18,r2
  10668c:	9029883a 	mov	r20,r18
  106690:	9005883a 	mov	r2,r18
  106694:	9000d216 	blt	r18,zero,1069e0 <___svfprintf_internal_r+0x1fa4>
  106698:	d8802b15 	stw	r2,172(sp)
  10669c:	dd402f15 	stw	r21,188(sp)
  1066a0:	0025883a 	mov	r18,zero
  1066a4:	d8003315 	stw	zero,204(sp)
  1066a8:	04000474 	movhi	r16,17
  1066ac:	841a3804 	addi	r16,r16,26848
  1066b0:	0005883a 	mov	r2,zero
  1066b4:	003a0d06 	br	104eec <black_to_red_frame+0xfe104eec>
  1066b8:	01400474 	movhi	r5,17
  1066bc:	295a3e84 	addi	r5,r5,26874
  1066c0:	d9403615 	stw	r5,216(sp)
  1066c4:	003acf06 	br	105204 <black_to_red_frame+0xfe105204>
  1066c8:	d9003117 	ldw	r4,196(sp)
  1066cc:	d9402e17 	ldw	r5,184(sp)
  1066d0:	d9801e04 	addi	r6,sp,120
  1066d4:	010d5f80 	call	10d5f8 <__ssprint_r>
  1066d8:	1039a71e 	bne	r2,zero,104d78 <black_to_red_frame+0xfe104d78>
  1066dc:	d8802617 	ldw	r2,152(sp)
  1066e0:	d9403417 	ldw	r5,208(sp)
  1066e4:	d8c02017 	ldw	r3,128(sp)
  1066e8:	da000404 	addi	r8,sp,16
  1066ec:	2885c83a 	sub	r2,r5,r2
  1066f0:	003e2a06 	br	105f9c <black_to_red_frame+0xfe105f9c>
  1066f4:	05800b44 	movi	r22,45
  1066f8:	dd802785 	stb	r22,158(sp)
  1066fc:	003afc06 	br	1052f0 <black_to_red_frame+0xfe1052f0>
  106700:	00c00b44 	movi	r3,45
  106704:	d8c02785 	stb	r3,158(sp)
  106708:	d8c02c17 	ldw	r3,176(sp)
  10670c:	d8802b15 	stw	r2,172(sp)
  106710:	0025883a 	mov	r18,zero
  106714:	d8c02a15 	stw	r3,168(sp)
  106718:	00800b44 	movi	r2,45
  10671c:	0039f006 	br	104ee0 <black_to_red_frame+0xfe104ee0>
  106720:	d8802617 	ldw	r2,152(sp)
  106724:	00ffff44 	movi	r3,-3
  106728:	10c02416 	blt	r2,r3,1067bc <___svfprintf_internal_r+0x1d80>
  10672c:	90802316 	blt	r18,r2,1067bc <___svfprintf_internal_r+0x1d80>
  106730:	d8803315 	stw	r2,204(sp)
  106734:	003f4e06 	br	106470 <black_to_red_frame+0xfe106470>
  106738:	d9402f17 	ldw	r5,188(sp)
  10673c:	d8c03217 	ldw	r3,200(sp)
  106740:	28800017 	ldw	r2,0(r5)
  106744:	29400104 	addi	r5,r5,4
  106748:	d9402f15 	stw	r5,188(sp)
  10674c:	10c00015 	stw	r3,0(r2)
  106750:	0038e806 	br	104af4 <black_to_red_frame+0xfe104af4>
  106754:	d8802604 	addi	r2,sp,152
  106758:	d8800115 	stw	r2,4(sp)
  10675c:	d9003117 	ldw	r4,196(sp)
  106760:	d8802504 	addi	r2,sp,148
  106764:	d9403717 	ldw	r5,220(sp)
  106768:	d8800215 	stw	r2,8(sp)
  10676c:	d8802104 	addi	r2,sp,132
  106770:	dc800015 	stw	r18,0(sp)
  106774:	d8800315 	stw	r2,12(sp)
  106778:	a00d883a 	mov	r6,r20
  10677c:	01c000c4 	movi	r7,3
  106780:	da004015 	stw	r8,256(sp)
  106784:	0108f800 	call	108f80 <_dtoa_r>
  106788:	1021883a 	mov	r16,r2
  10678c:	902d883a 	mov	r22,r18
  106790:	da004017 	ldw	r8,256(sp)
  106794:	003f1906 	br	1063fc <black_to_red_frame+0xfe1063fc>
  106798:	e005883a 	mov	r2,fp
  10679c:	003f2a06 	br	106448 <black_to_red_frame+0xfe106448>
  1067a0:	dc802b15 	stw	r18,172(sp)
  1067a4:	9029883a 	mov	r20,r18
  1067a8:	dd802783 	ldbu	r22,158(sp)
  1067ac:	dd402f15 	stw	r21,188(sp)
  1067b0:	0025883a 	mov	r18,zero
  1067b4:	d8003315 	stw	zero,204(sp)
  1067b8:	0039c506 	br	104ed0 <black_to_red_frame+0xfe104ed0>
  1067bc:	8c7fff84 	addi	r17,r17,-2
  1067c0:	153fffc4 	addi	r20,r2,-1
  1067c4:	dd002615 	stw	r20,152(sp)
  1067c8:	dc4022c5 	stb	r17,139(sp)
  1067cc:	a0009016 	blt	r20,zero,106a10 <___svfprintf_internal_r+0x1fd4>
  1067d0:	00800ac4 	movi	r2,43
  1067d4:	d8802305 	stb	r2,140(sp)
  1067d8:	04800244 	movi	r18,9
  1067dc:	95005916 	blt	r18,r20,106944 <___svfprintf_internal_r+0x1f08>
  1067e0:	00800c04 	movi	r2,48
  1067e4:	a5000c04 	addi	r20,r20,48
  1067e8:	d8802345 	stb	r2,141(sp)
  1067ec:	dd002385 	stb	r20,142(sp)
  1067f0:	d8c023c4 	addi	r3,sp,143
  1067f4:	d88022c4 	addi	r2,sp,139
  1067f8:	1885c83a 	sub	r2,r3,r2
  1067fc:	d8c03417 	ldw	r3,208(sp)
  106800:	d8803a15 	stw	r2,232(sp)
  106804:	18a9883a 	add	r20,r3,r2
  106808:	00800044 	movi	r2,1
  10680c:	10c0080e 	bge	r2,r3,106830 <___svfprintf_internal_r+0x1df4>
  106810:	a5000044 	addi	r20,r20,1
  106814:	a005883a 	mov	r2,r20
  106818:	a0000216 	blt	r20,zero,106824 <___svfprintf_internal_r+0x1de8>
  10681c:	d8003315 	stw	zero,204(sp)
  106820:	003f1d06 	br	106498 <black_to_red_frame+0xfe106498>
  106824:	0005883a 	mov	r2,zero
  106828:	d8003315 	stw	zero,204(sp)
  10682c:	003f1a06 	br	106498 <black_to_red_frame+0xfe106498>
  106830:	d9002a17 	ldw	r4,168(sp)
  106834:	2084703a 	and	r2,r4,r2
  106838:	103ff51e 	bne	r2,zero,106810 <black_to_red_frame+0xfe106810>
  10683c:	003ff506 	br	106814 <black_to_red_frame+0xfe106814>
  106840:	81000007 	ldb	r4,0(r16)
  106844:	00800c04 	movi	r2,48
  106848:	20800326 	beq	r4,r2,106858 <___svfprintf_internal_r+0x1e1c>
  10684c:	d8c02617 	ldw	r3,152(sp)
  106850:	e0f9883a 	add	fp,fp,r3
  106854:	003eec06 	br	106408 <black_to_red_frame+0xfe106408>
  106858:	d9003717 	ldw	r4,220(sp)
  10685c:	a00b883a 	mov	r5,r20
  106860:	000d883a 	mov	r6,zero
  106864:	000f883a 	mov	r7,zero
  106868:	da004015 	stw	r8,256(sp)
  10686c:	01127c80 	call	1127c8 <__eqdf2>
  106870:	da004017 	ldw	r8,256(sp)
  106874:	103ff526 	beq	r2,zero,10684c <black_to_red_frame+0xfe10684c>
  106878:	00800044 	movi	r2,1
  10687c:	1587c83a 	sub	r3,r2,r22
  106880:	d8c02615 	stw	r3,152(sp)
  106884:	e0f9883a 	add	fp,fp,r3
  106888:	003edf06 	br	106408 <black_to_red_frame+0xfe106408>
  10688c:	d9003117 	ldw	r4,196(sp)
  106890:	d9402e17 	ldw	r5,184(sp)
  106894:	d9801e04 	addi	r6,sp,120
  106898:	010d5f80 	call	10d5f8 <__ssprint_r>
  10689c:	1039361e 	bne	r2,zero,104d78 <black_to_red_frame+0xfe104d78>
  1068a0:	dc402617 	ldw	r17,152(sp)
  1068a4:	d8c02017 	ldw	r3,128(sp)
  1068a8:	d8801f17 	ldw	r2,124(sp)
  1068ac:	da000404 	addi	r8,sp,16
  1068b0:	003e7d06 	br	1062a8 <black_to_red_frame+0xfe1062a8>
  1068b4:	903ead1e 	bne	r18,zero,10636c <black_to_red_frame+0xfe10636c>
  1068b8:	8025883a 	mov	r18,r16
  1068bc:	003eab06 	br	10636c <black_to_red_frame+0xfe10636c>
  1068c0:	95800044 	addi	r22,r18,1
  1068c4:	003eb706 	br	1063a4 <black_to_red_frame+0xfe1063a4>
  1068c8:	00c00b44 	movi	r3,45
  1068cc:	2520003c 	xorhi	r20,r4,32768
  1068d0:	d8c02b05 	stb	r3,172(sp)
  1068d4:	003eac06 	br	106388 <black_to_red_frame+0xfe106388>
  1068d8:	d8c03317 	ldw	r3,204(sp)
  1068dc:	00c0420e 	bge	zero,r3,1069e8 <___svfprintf_internal_r+0x1fac>
  1068e0:	05000044 	movi	r20,1
  1068e4:	d9003417 	ldw	r4,208(sp)
  1068e8:	a129883a 	add	r20,r20,r4
  1068ec:	a005883a 	mov	r2,r20
  1068f0:	a0000616 	blt	r20,zero,10690c <___svfprintf_internal_r+0x1ed0>
  1068f4:	044019c4 	movi	r17,103
  1068f8:	003ee706 	br	106498 <black_to_red_frame+0xfe106498>
  1068fc:	d8c03317 	ldw	r3,204(sp)
  106900:	1d000044 	addi	r20,r3,1
  106904:	a005883a 	mov	r2,r20
  106908:	a03ffa0e 	bge	r20,zero,1068f4 <black_to_red_frame+0xfe1068f4>
  10690c:	0005883a 	mov	r2,zero
  106910:	044019c4 	movi	r17,103
  106914:	003ee006 	br	106498 <black_to_red_frame+0xfe106498>
  106918:	00c0360e 	bge	zero,r3,1069f4 <___svfprintf_internal_r+0x1fb8>
  10691c:	9000291e 	bne	r18,zero,1069c4 <___svfprintf_internal_r+0x1f88>
  106920:	d9002a17 	ldw	r4,168(sp)
  106924:	2080004c 	andi	r2,r4,1
  106928:	1000261e 	bne	r2,zero,1069c4 <___svfprintf_internal_r+0x1f88>
  10692c:	1805883a 	mov	r2,r3
  106930:	18004c16 	blt	r3,zero,106a64 <___svfprintf_internal_r+0x2028>
  106934:	dd003317 	ldw	r20,204(sp)
  106938:	003ed706 	br	106498 <black_to_red_frame+0xfe106498>
  10693c:	d8802117 	ldw	r2,132(sp)
  106940:	003ec106 	br	106448 <black_to_red_frame+0xfe106448>
  106944:	d8c02284 	addi	r3,sp,138
  106948:	402d883a 	mov	r22,r8
  10694c:	a009883a 	mov	r4,r20
  106950:	01400284 	movi	r5,10
  106954:	182b883a 	mov	r21,r3
  106958:	0103ec00 	call	103ec0 <__modsi3>
  10695c:	10800c04 	addi	r2,r2,48
  106960:	a009883a 	mov	r4,r20
  106964:	a8800005 	stb	r2,0(r21)
  106968:	01400284 	movi	r5,10
  10696c:	0103e780 	call	103e78 <__divsi3>
  106970:	1029883a 	mov	r20,r2
  106974:	a8ffffc4 	addi	r3,r21,-1
  106978:	90bff416 	blt	r18,r2,10694c <black_to_red_frame+0xfe10694c>
  10697c:	11400c04 	addi	r5,r2,48
  106980:	a97fffc5 	stb	r5,-1(r21)
  106984:	d88022c4 	addi	r2,sp,139
  106988:	b011883a 	mov	r8,r22
  10698c:	18803f2e 	bgeu	r3,r2,106a8c <___svfprintf_internal_r+0x2050>
  106990:	d9002344 	addi	r4,sp,141
  106994:	a807883a 	mov	r3,r21
  106998:	00000206 	br	1069a4 <___svfprintf_internal_r+0x1f68>
  10699c:	19400003 	ldbu	r5,0(r3)
  1069a0:	18c00044 	addi	r3,r3,1
  1069a4:	21400005 	stb	r5,0(r4)
  1069a8:	21000044 	addi	r4,r4,1
  1069ac:	10fffb1e 	bne	r2,r3,10699c <black_to_red_frame+0xfe10699c>
  1069b0:	d8c02304 	addi	r3,sp,140
  1069b4:	1d47c83a 	sub	r3,r3,r21
  1069b8:	d9402344 	addi	r5,sp,141
  1069bc:	28c7883a 	add	r3,r5,r3
  1069c0:	003f8d06 	br	1067f8 <black_to_red_frame+0xfe1067f8>
  1069c4:	d8c03317 	ldw	r3,204(sp)
  1069c8:	94800044 	addi	r18,r18,1
  1069cc:	1ca9883a 	add	r20,r3,r18
  1069d0:	a005883a 	mov	r2,r20
  1069d4:	a03eb00e 	bge	r20,zero,106498 <black_to_red_frame+0xfe106498>
  1069d8:	0005883a 	mov	r2,zero
  1069dc:	003eae06 	br	106498 <black_to_red_frame+0xfe106498>
  1069e0:	0005883a 	mov	r2,zero
  1069e4:	003f2c06 	br	106698 <black_to_red_frame+0xfe106698>
  1069e8:	05000084 	movi	r20,2
  1069ec:	a0e9c83a 	sub	r20,r20,r3
  1069f0:	003fbc06 	br	1068e4 <black_to_red_frame+0xfe1068e4>
  1069f4:	9000151e 	bne	r18,zero,106a4c <___svfprintf_internal_r+0x2010>
  1069f8:	d9002a17 	ldw	r4,168(sp)
  1069fc:	2080004c 	andi	r2,r4,1
  106a00:	1000121e 	bne	r2,zero,106a4c <___svfprintf_internal_r+0x2010>
  106a04:	00800044 	movi	r2,1
  106a08:	1029883a 	mov	r20,r2
  106a0c:	003ea206 	br	106498 <black_to_red_frame+0xfe106498>
  106a10:	00800b44 	movi	r2,45
  106a14:	0529c83a 	sub	r20,zero,r20
  106a18:	d8802305 	stb	r2,140(sp)
  106a1c:	003f6e06 	br	1067d8 <black_to_red_frame+0xfe1067d8>
  106a20:	d9002f17 	ldw	r4,188(sp)
  106a24:	9c400043 	ldbu	r17,1(r19)
  106a28:	1027883a 	mov	r19,r2
  106a2c:	20c00017 	ldw	r3,0(r4)
  106a30:	21000104 	addi	r4,r4,4
  106a34:	d9002f15 	stw	r4,188(sp)
  106a38:	18001616 	blt	r3,zero,106a94 <___svfprintf_internal_r+0x2058>
  106a3c:	8c403fcc 	andi	r17,r17,255
  106a40:	8c40201c 	xori	r17,r17,128
  106a44:	8c7fe004 	addi	r17,r17,-128
  106a48:	00385206 	br	104b94 <black_to_red_frame+0xfe104b94>
  106a4c:	95000084 	addi	r20,r18,2
  106a50:	a005883a 	mov	r2,r20
  106a54:	a03e900e 	bge	r20,zero,106498 <black_to_red_frame+0xfe106498>
  106a58:	003fdf06 	br	1069d8 <black_to_red_frame+0xfe1069d8>
  106a5c:	0005883a 	mov	r2,zero
  106a60:	003e8b06 	br	106490 <black_to_red_frame+0xfe106490>
  106a64:	0005883a 	mov	r2,zero
  106a68:	dd003317 	ldw	r20,204(sp)
  106a6c:	003e8a06 	br	106498 <black_to_red_frame+0xfe106498>
  106a70:	d8802617 	ldw	r2,152(sp)
  106a74:	003f5206 	br	1067c0 <black_to_red_frame+0xfe1067c0>
  106a78:	d9403117 	ldw	r5,196(sp)
  106a7c:	00800304 	movi	r2,12
  106a80:	28800015 	stw	r2,0(r5)
  106a84:	00bfffc4 	movi	r2,-1
  106a88:	0038c006 	br	104d8c <black_to_red_frame+0xfe104d8c>
  106a8c:	d8c02344 	addi	r3,sp,141
  106a90:	003f5906 	br	1067f8 <black_to_red_frame+0xfe1067f8>
  106a94:	8c403fcc 	andi	r17,r17,255
  106a98:	8c40201c 	xori	r17,r17,128
  106a9c:	00ffffc4 	movi	r3,-1
  106aa0:	8c7fe004 	addi	r17,r17,-128
  106aa4:	00383b06 	br	104b94 <black_to_red_frame+0xfe104b94>

00106aa8 <___vfprintf_internal_r>:
  106aa8:	defeb604 	addi	sp,sp,-1320
  106aac:	dfc14915 	stw	ra,1316(sp)
  106ab0:	dcc14315 	stw	r19,1292(sp)
  106ab4:	dc414115 	stw	r17,1284(sp)
  106ab8:	d9012c15 	stw	r4,1200(sp)
  106abc:	2827883a 	mov	r19,r5
  106ac0:	3023883a 	mov	r17,r6
  106ac4:	d9c12f15 	stw	r7,1212(sp)
  106ac8:	df014815 	stw	fp,1312(sp)
  106acc:	ddc14715 	stw	r23,1308(sp)
  106ad0:	dd814615 	stw	r22,1304(sp)
  106ad4:	dd414515 	stw	r21,1300(sp)
  106ad8:	dd014415 	stw	r20,1296(sp)
  106adc:	dc814215 	stw	r18,1288(sp)
  106ae0:	dc014015 	stw	r16,1280(sp)
  106ae4:	010b68c0 	call	10b68c <_localeconv_r>
  106ae8:	10800017 	ldw	r2,0(r2)
  106aec:	1009883a 	mov	r4,r2
  106af0:	d8813415 	stw	r2,1232(sp)
  106af4:	01049b00 	call	1049b0 <strlen>
  106af8:	d8813815 	stw	r2,1248(sp)
  106afc:	d8812c17 	ldw	r2,1200(sp)
  106b00:	10000226 	beq	r2,zero,106b0c <___vfprintf_internal_r+0x64>
  106b04:	10800e17 	ldw	r2,56(r2)
  106b08:	10010826 	beq	r2,zero,106f2c <___vfprintf_internal_r+0x484>
  106b0c:	9880030b 	ldhu	r2,12(r19)
  106b10:	1108000c 	andi	r4,r2,8192
  106b14:	1007883a 	mov	r3,r2
  106b18:	2000071e 	bne	r4,zero,106b38 <___vfprintf_internal_r+0x90>
  106b1c:	99001917 	ldw	r4,100(r19)
  106b20:	10c80014 	ori	r3,r2,8192
  106b24:	00b7ffc4 	movi	r2,-8193
  106b28:	2088703a 	and	r4,r4,r2
  106b2c:	98c0030d 	sth	r3,12(r19)
  106b30:	1805883a 	mov	r2,r3
  106b34:	99001915 	stw	r4,100(r19)
  106b38:	1900020c 	andi	r4,r3,8
  106b3c:	2000ab26 	beq	r4,zero,106dec <___vfprintf_internal_r+0x344>
  106b40:	99000417 	ldw	r4,16(r19)
  106b44:	2000a926 	beq	r4,zero,106dec <___vfprintf_internal_r+0x344>
  106b48:	18c0068c 	andi	r3,r3,26
  106b4c:	01000284 	movi	r4,10
  106b50:	1900af26 	beq	r3,r4,106e10 <___vfprintf_internal_r+0x368>
  106b54:	d9010dc4 	addi	r4,sp,1079
  106b58:	d9410e04 	addi	r5,sp,1080
  106b5c:	d8800404 	addi	r2,sp,16
  106b60:	2907c83a 	sub	r3,r5,r4
  106b64:	d9012815 	stw	r4,1184(sp)
  106b68:	d9412915 	stw	r5,1188(sp)
  106b6c:	d8811e15 	stw	r2,1144(sp)
  106b70:	d8012015 	stw	zero,1152(sp)
  106b74:	d8011f15 	stw	zero,1148(sp)
  106b78:	d8013515 	stw	zero,1236(sp)
  106b7c:	d8013715 	stw	zero,1244(sp)
  106b80:	d8013915 	stw	zero,1252(sp)
  106b84:	d8013b15 	stw	zero,1260(sp)
  106b88:	d8013a15 	stw	zero,1256(sp)
  106b8c:	d8013115 	stw	zero,1220(sp)
  106b90:	1011883a 	mov	r8,r2
  106b94:	05c00474 	movhi	r23,17
  106b98:	bdda4284 	addi	r23,r23,26890
  106b9c:	d8c13d15 	stw	r3,1268(sp)
  106ba0:	88800007 	ldb	r2,0(r17)
  106ba4:	10021126 	beq	r2,zero,1073ec <___vfprintf_internal_r+0x944>
  106ba8:	00c00944 	movi	r3,37
  106bac:	8821883a 	mov	r16,r17
  106bb0:	10c0021e 	bne	r2,r3,106bbc <___vfprintf_internal_r+0x114>
  106bb4:	00001406 	br	106c08 <___vfprintf_internal_r+0x160>
  106bb8:	10c00326 	beq	r2,r3,106bc8 <___vfprintf_internal_r+0x120>
  106bbc:	84000044 	addi	r16,r16,1
  106bc0:	80800007 	ldb	r2,0(r16)
  106bc4:	103ffc1e 	bne	r2,zero,106bb8 <black_to_red_frame+0xfe106bb8>
  106bc8:	8465c83a 	sub	r18,r16,r17
  106bcc:	90000e26 	beq	r18,zero,106c08 <___vfprintf_internal_r+0x160>
  106bd0:	d8c12017 	ldw	r3,1152(sp)
  106bd4:	d8811f17 	ldw	r2,1148(sp)
  106bd8:	44400015 	stw	r17,0(r8)
  106bdc:	1c87883a 	add	r3,r3,r18
  106be0:	10800044 	addi	r2,r2,1
  106be4:	d8c12015 	stw	r3,1152(sp)
  106be8:	44800115 	stw	r18,4(r8)
  106bec:	d8811f15 	stw	r2,1148(sp)
  106bf0:	00c001c4 	movi	r3,7
  106bf4:	1880bb16 	blt	r3,r2,106ee4 <___vfprintf_internal_r+0x43c>
  106bf8:	42000204 	addi	r8,r8,8
  106bfc:	d9013117 	ldw	r4,1220(sp)
  106c00:	2489883a 	add	r4,r4,r18
  106c04:	d9013115 	stw	r4,1220(sp)
  106c08:	80800007 	ldb	r2,0(r16)
  106c0c:	1000bc26 	beq	r2,zero,106f00 <___vfprintf_internal_r+0x458>
  106c10:	053fffc4 	movi	r20,-1
  106c14:	84400044 	addi	r17,r16,1
  106c18:	84800047 	ldb	r18,1(r16)
  106c1c:	d8012785 	stb	zero,1182(sp)
  106c20:	002d883a 	mov	r22,zero
  106c24:	d8013015 	stw	zero,1216(sp)
  106c28:	d8012a15 	stw	zero,1192(sp)
  106c2c:	04001604 	movi	r16,88
  106c30:	05400244 	movi	r21,9
  106c34:	4039883a 	mov	fp,r8
  106c38:	a007883a 	mov	r3,r20
  106c3c:	8c400044 	addi	r17,r17,1
  106c40:	90bff804 	addi	r2,r18,-32
  106c44:	80832036 	bltu	r16,r2,1078c8 <___vfprintf_internal_r+0xe20>
  106c48:	1085883a 	add	r2,r2,r2
  106c4c:	1085883a 	add	r2,r2,r2
  106c50:	01400434 	movhi	r5,16
  106c54:	295b1904 	addi	r5,r5,27748
  106c58:	1145883a 	add	r2,r2,r5
  106c5c:	10800017 	ldw	r2,0(r2)
  106c60:	1000683a 	jmp	r2
  106c64:	00107668 	cmpgeui	zero,zero,16857
  106c68:	001078c8 	cmpgei	zero,zero,16867
  106c6c:	001078c8 	cmpgei	zero,zero,16867
  106c70:	00107684 	movi	zero,16858
  106c74:	001078c8 	cmpgei	zero,zero,16867
  106c78:	001078c8 	cmpgei	zero,zero,16867
  106c7c:	001078c8 	cmpgei	zero,zero,16867
  106c80:	001078c8 	cmpgei	zero,zero,16867
  106c84:	001078c8 	cmpgei	zero,zero,16867
  106c88:	001078c8 	cmpgei	zero,zero,16867
  106c8c:	00107698 	cmpnei	zero,zero,16858
  106c90:	00106f38 	rdprs	zero,zero,16828
  106c94:	001078c8 	cmpgei	zero,zero,16867
  106c98:	00106dd8 	cmpnei	zero,zero,16823
  106c9c:	00106f44 	movi	zero,16829
  106ca0:	001078c8 	cmpgei	zero,zero,16867
  106ca4:	00106f94 	movui	zero,16830
  106ca8:	001074a4 	muli	zero,zero,16850
  106cac:	001074a4 	muli	zero,zero,16850
  106cb0:	001074a4 	muli	zero,zero,16850
  106cb4:	001074a4 	muli	zero,zero,16850
  106cb8:	001074a4 	muli	zero,zero,16850
  106cbc:	001074a4 	muli	zero,zero,16850
  106cc0:	001074a4 	muli	zero,zero,16850
  106cc4:	001074a4 	muli	zero,zero,16850
  106cc8:	001074a4 	muli	zero,zero,16850
  106ccc:	001078c8 	cmpgei	zero,zero,16867
  106cd0:	001078c8 	cmpgei	zero,zero,16867
  106cd4:	001078c8 	cmpgei	zero,zero,16867
  106cd8:	001078c8 	cmpgei	zero,zero,16867
  106cdc:	001078c8 	cmpgei	zero,zero,16867
  106ce0:	001078c8 	cmpgei	zero,zero,16867
  106ce4:	001078c8 	cmpgei	zero,zero,16867
  106ce8:	001078c8 	cmpgei	zero,zero,16867
  106cec:	001078c8 	cmpgei	zero,zero,16867
  106cf0:	001078c8 	cmpgei	zero,zero,16867
  106cf4:	00106fa8 	cmpgeui	zero,zero,16830
  106cf8:	001073f4 	movhi	zero,16847
  106cfc:	001078c8 	cmpgei	zero,zero,16867
  106d00:	001073f4 	movhi	zero,16847
  106d04:	001078c8 	cmpgei	zero,zero,16867
  106d08:	001078c8 	cmpgei	zero,zero,16867
  106d0c:	001078c8 	cmpgei	zero,zero,16867
  106d10:	001078c8 	cmpgei	zero,zero,16867
  106d14:	001074ec 	andhi	zero,zero,16851
  106d18:	001078c8 	cmpgei	zero,zero,16867
  106d1c:	001078c8 	cmpgei	zero,zero,16867
  106d20:	00107500 	call	10750 <black_tx_descriptor+0xfe50>
  106d24:	001078c8 	cmpgei	zero,zero,16867
  106d28:	001078c8 	cmpgei	zero,zero,16867
  106d2c:	001078c8 	cmpgei	zero,zero,16867
  106d30:	001078c8 	cmpgei	zero,zero,16867
  106d34:	001078c8 	cmpgei	zero,zero,16867
  106d38:	00107548 	cmpgei	zero,zero,16853
  106d3c:	001078c8 	cmpgei	zero,zero,16867
  106d40:	001078c8 	cmpgei	zero,zero,16867
  106d44:	001076bc 	xorhi	zero,zero,16858
  106d48:	001078c8 	cmpgei	zero,zero,16867
  106d4c:	001078c8 	cmpgei	zero,zero,16867
  106d50:	001078c8 	cmpgei	zero,zero,16867
  106d54:	001078c8 	cmpgei	zero,zero,16867
  106d58:	001078c8 	cmpgei	zero,zero,16867
  106d5c:	001078c8 	cmpgei	zero,zero,16867
  106d60:	001078c8 	cmpgei	zero,zero,16867
  106d64:	001078c8 	cmpgei	zero,zero,16867
  106d68:	001078c8 	cmpgei	zero,zero,16867
  106d6c:	001078c8 	cmpgei	zero,zero,16867
  106d70:	001075c0 	call	1075c <black_tx_descriptor+0xfe5c>
  106d74:	00107738 	rdprs	zero,zero,16860
  106d78:	001073f4 	movhi	zero,16847
  106d7c:	001073f4 	movhi	zero,16847
  106d80:	001073f4 	movhi	zero,16847
  106d84:	00107704 	movi	zero,16860
  106d88:	00107738 	rdprs	zero,zero,16860
  106d8c:	001078c8 	cmpgei	zero,zero,16867
  106d90:	001078c8 	cmpgei	zero,zero,16867
  106d94:	00107718 	cmpnei	zero,zero,16860
  106d98:	001078c8 	cmpgei	zero,zero,16867
  106d9c:	00107588 	cmpgei	zero,zero,16854
  106da0:	00107848 	cmpgei	zero,zero,16865
  106da4:	001077f4 	movhi	zero,16863
  106da8:	00107778 	rdprs	zero,zero,16861
  106dac:	001078c8 	cmpgei	zero,zero,16867
  106db0:	0010778c 	andi	zero,zero,16862
  106db4:	001078c8 	cmpgei	zero,zero,16867
  106db8:	00107888 	cmpgei	zero,zero,16866
  106dbc:	001078c8 	cmpgei	zero,zero,16867
  106dc0:	001078c8 	cmpgei	zero,zero,16867
  106dc4:	00107600 	call	10760 <black_tx_descriptor+0xfe60>
  106dc8:	d9413017 	ldw	r5,1216(sp)
  106dcc:	d8812f15 	stw	r2,1212(sp)
  106dd0:	014bc83a 	sub	r5,zero,r5
  106dd4:	d9413015 	stw	r5,1216(sp)
  106dd8:	d8812a17 	ldw	r2,1192(sp)
  106ddc:	10800114 	ori	r2,r2,4
  106de0:	d8812a15 	stw	r2,1192(sp)
  106de4:	8c800007 	ldb	r18,0(r17)
  106de8:	003f9406 	br	106c3c <black_to_red_frame+0xfe106c3c>
  106dec:	d9012c17 	ldw	r4,1200(sp)
  106df0:	980b883a 	mov	r5,r19
  106df4:	0108c200 	call	108c20 <__swsetup_r>
  106df8:	10002d1e 	bne	r2,zero,106eb0 <___vfprintf_internal_r+0x408>
  106dfc:	9880030b 	ldhu	r2,12(r19)
  106e00:	01000284 	movi	r4,10
  106e04:	1007883a 	mov	r3,r2
  106e08:	18c0068c 	andi	r3,r3,26
  106e0c:	193f511e 	bne	r3,r4,106b54 <black_to_red_frame+0xfe106b54>
  106e10:	98c0038b 	ldhu	r3,14(r19)
  106e14:	193fffcc 	andi	r4,r3,65535
  106e18:	2120001c 	xori	r4,r4,32768
  106e1c:	21200004 	addi	r4,r4,-32768
  106e20:	203f4c16 	blt	r4,zero,106b54 <black_to_red_frame+0xfe106b54>
  106e24:	9ac01917 	ldw	r11,100(r19)
  106e28:	9a800717 	ldw	r10,28(r19)
  106e2c:	9a400917 	ldw	r9,36(r19)
  106e30:	d9012c17 	ldw	r4,1200(sp)
  106e34:	d9c12f17 	ldw	r7,1212(sp)
  106e38:	02010004 	movi	r8,1024
  106e3c:	10bfff4c 	andi	r2,r2,65533
  106e40:	d8c1078d 	sth	r3,1054(sp)
  106e44:	d9410404 	addi	r5,sp,1040
  106e48:	d8c00404 	addi	r3,sp,16
  106e4c:	880d883a 	mov	r6,r17
  106e50:	d881070d 	sth	r2,1052(sp)
  106e54:	dac11d15 	stw	r11,1140(sp)
  106e58:	da810b15 	stw	r10,1068(sp)
  106e5c:	da410d15 	stw	r9,1076(sp)
  106e60:	d8c10415 	stw	r3,1040(sp)
  106e64:	d8c10815 	stw	r3,1056(sp)
  106e68:	da010615 	stw	r8,1048(sp)
  106e6c:	da010915 	stw	r8,1060(sp)
  106e70:	d8010a15 	stw	zero,1064(sp)
  106e74:	0106aa80 	call	106aa8 <___vfprintf_internal_r>
  106e78:	1021883a 	mov	r16,r2
  106e7c:	10000416 	blt	r2,zero,106e90 <___vfprintf_internal_r+0x3e8>
  106e80:	d9012c17 	ldw	r4,1200(sp)
  106e84:	d9410404 	addi	r5,sp,1040
  106e88:	010a5bc0 	call	10a5bc <_fflush_r>
  106e8c:	10072a1e 	bne	r2,zero,108b38 <___vfprintf_internal_r+0x2090>
  106e90:	d881070b 	ldhu	r2,1052(sp)
  106e94:	1080100c 	andi	r2,r2,64
  106e98:	10000326 	beq	r2,zero,106ea8 <___vfprintf_internal_r+0x400>
  106e9c:	9880030b 	ldhu	r2,12(r19)
  106ea0:	10801014 	ori	r2,r2,64
  106ea4:	9880030d 	sth	r2,12(r19)
  106ea8:	8005883a 	mov	r2,r16
  106eac:	00000106 	br	106eb4 <___vfprintf_internal_r+0x40c>
  106eb0:	00bfffc4 	movi	r2,-1
  106eb4:	dfc14917 	ldw	ra,1316(sp)
  106eb8:	df014817 	ldw	fp,1312(sp)
  106ebc:	ddc14717 	ldw	r23,1308(sp)
  106ec0:	dd814617 	ldw	r22,1304(sp)
  106ec4:	dd414517 	ldw	r21,1300(sp)
  106ec8:	dd014417 	ldw	r20,1296(sp)
  106ecc:	dcc14317 	ldw	r19,1292(sp)
  106ed0:	dc814217 	ldw	r18,1288(sp)
  106ed4:	dc414117 	ldw	r17,1284(sp)
  106ed8:	dc014017 	ldw	r16,1280(sp)
  106edc:	dec14a04 	addi	sp,sp,1320
  106ee0:	f800283a 	ret
  106ee4:	d9012c17 	ldw	r4,1200(sp)
  106ee8:	980b883a 	mov	r5,r19
  106eec:	d9811e04 	addi	r6,sp,1144
  106ef0:	010ea840 	call	10ea84 <__sprint_r>
  106ef4:	1000081e 	bne	r2,zero,106f18 <___vfprintf_internal_r+0x470>
  106ef8:	da000404 	addi	r8,sp,16
  106efc:	003f3f06 	br	106bfc <black_to_red_frame+0xfe106bfc>
  106f00:	d8812017 	ldw	r2,1152(sp)
  106f04:	10000426 	beq	r2,zero,106f18 <___vfprintf_internal_r+0x470>
  106f08:	d9012c17 	ldw	r4,1200(sp)
  106f0c:	980b883a 	mov	r5,r19
  106f10:	d9811e04 	addi	r6,sp,1144
  106f14:	010ea840 	call	10ea84 <__sprint_r>
  106f18:	9880030b 	ldhu	r2,12(r19)
  106f1c:	1080100c 	andi	r2,r2,64
  106f20:	103fe31e 	bne	r2,zero,106eb0 <black_to_red_frame+0xfe106eb0>
  106f24:	d8813117 	ldw	r2,1220(sp)
  106f28:	003fe206 	br	106eb4 <black_to_red_frame+0xfe106eb4>
  106f2c:	d9012c17 	ldw	r4,1200(sp)
  106f30:	010a8dc0 	call	10a8dc <__sinit>
  106f34:	003ef506 	br	106b0c <black_to_red_frame+0xfe106b0c>
  106f38:	05800ac4 	movi	r22,43
  106f3c:	8c800007 	ldb	r18,0(r17)
  106f40:	003f3e06 	br	106c3c <black_to_red_frame+0xfe106c3c>
  106f44:	8c800007 	ldb	r18,0(r17)
  106f48:	00c00a84 	movi	r3,42
  106f4c:	88800044 	addi	r2,r17,1
  106f50:	90c6fb26 	beq	r18,r3,108b40 <___vfprintf_internal_r+0x2098>
  106f54:	953ff404 	addi	r20,r18,-48
  106f58:	1023883a 	mov	r17,r2
  106f5c:	0007883a 	mov	r3,zero
  106f60:	ad3f3736 	bltu	r21,r20,106c40 <black_to_red_frame+0xfe106c40>
  106f64:	0009883a 	mov	r4,zero
  106f68:	01400284 	movi	r5,10
  106f6c:	0103f1c0 	call	103f1c <__mulsi3>
  106f70:	8c800007 	ldb	r18,0(r17)
  106f74:	a089883a 	add	r4,r20,r2
  106f78:	8c400044 	addi	r17,r17,1
  106f7c:	953ff404 	addi	r20,r18,-48
  106f80:	ad3ff92e 	bgeu	r21,r20,106f68 <black_to_red_frame+0xfe106f68>
  106f84:	2007883a 	mov	r3,r4
  106f88:	203f2d0e 	bge	r4,zero,106c40 <black_to_red_frame+0xfe106c40>
  106f8c:	00ffffc4 	movi	r3,-1
  106f90:	003f2b06 	br	106c40 <black_to_red_frame+0xfe106c40>
  106f94:	d9412a17 	ldw	r5,1192(sp)
  106f98:	29402014 	ori	r5,r5,128
  106f9c:	d9412a15 	stw	r5,1192(sp)
  106fa0:	8c800007 	ldb	r18,0(r17)
  106fa4:	003f2506 	br	106c3c <black_to_red_frame+0xfe106c3c>
  106fa8:	d9412a17 	ldw	r5,1192(sp)
  106fac:	1829883a 	mov	r20,r3
  106fb0:	dd812785 	stb	r22,1182(sp)
  106fb4:	29400414 	ori	r5,r5,16
  106fb8:	d9412a15 	stw	r5,1192(sp)
  106fbc:	d8c12a17 	ldw	r3,1192(sp)
  106fc0:	e011883a 	mov	r8,fp
  106fc4:	1880080c 	andi	r2,r3,32
  106fc8:	1001e126 	beq	r2,zero,107750 <___vfprintf_internal_r+0xca8>
  106fcc:	d9012f17 	ldw	r4,1212(sp)
  106fd0:	20800117 	ldw	r2,4(r4)
  106fd4:	25400017 	ldw	r21,0(r4)
  106fd8:	21000204 	addi	r4,r4,8
  106fdc:	d9012f15 	stw	r4,1212(sp)
  106fe0:	102d883a 	mov	r22,r2
  106fe4:	10046916 	blt	r2,zero,10818c <___vfprintf_internal_r+0x16e4>
  106fe8:	df012783 	ldbu	fp,1182(sp)
  106fec:	00c00044 	movi	r3,1
  106ff0:	ad84b03a 	or	r2,r21,r22
  106ff4:	a0000416 	blt	r20,zero,107008 <___vfprintf_internal_r+0x560>
  106ff8:	d9412a17 	ldw	r5,1192(sp)
  106ffc:	013fdfc4 	movi	r4,-129
  107000:	290a703a 	and	r5,r5,r4
  107004:	d9412a15 	stw	r5,1192(sp)
  107008:	1002491e 	bne	r2,zero,107930 <___vfprintf_internal_r+0xe88>
  10700c:	a002481e 	bne	r20,zero,107930 <___vfprintf_internal_r+0xe88>
  107010:	18c03fcc 	andi	r3,r3,255
  107014:	1803871e 	bne	r3,zero,107e34 <___vfprintf_internal_r+0x138c>
  107018:	d9012a17 	ldw	r4,1192(sp)
  10701c:	2080004c 	andi	r2,r4,1
  107020:	10038426 	beq	r2,zero,107e34 <___vfprintf_internal_r+0x138c>
  107024:	d9413d17 	ldw	r5,1268(sp)
  107028:	00800c04 	movi	r2,48
  10702c:	d8810dc5 	stb	r2,1079(sp)
  107030:	d9412e15 	stw	r5,1208(sp)
  107034:	dc010dc4 	addi	r16,sp,1079
  107038:	d8812e17 	ldw	r2,1208(sp)
  10703c:	1500010e 	bge	r2,r20,107044 <___vfprintf_internal_r+0x59c>
  107040:	a005883a 	mov	r2,r20
  107044:	d8812b15 	stw	r2,1196(sp)
  107048:	d8013315 	stw	zero,1228(sp)
  10704c:	e0803fcc 	andi	r2,fp,255
  107050:	1080201c 	xori	r2,r2,128
  107054:	10bfe004 	addi	r2,r2,-128
  107058:	10000326 	beq	r2,zero,107068 <___vfprintf_internal_r+0x5c0>
  10705c:	d8c12b17 	ldw	r3,1196(sp)
  107060:	18c00044 	addi	r3,r3,1
  107064:	d8c12b15 	stw	r3,1196(sp)
  107068:	d8c12a17 	ldw	r3,1192(sp)
  10706c:	18c0008c 	andi	r3,r3,2
  107070:	d8c12d15 	stw	r3,1204(sp)
  107074:	18000326 	beq	r3,zero,107084 <___vfprintf_internal_r+0x5dc>
  107078:	d8c12b17 	ldw	r3,1196(sp)
  10707c:	18c00084 	addi	r3,r3,2
  107080:	d8c12b15 	stw	r3,1196(sp)
  107084:	d8c12a17 	ldw	r3,1192(sp)
  107088:	18c0210c 	andi	r3,r3,132
  10708c:	d8c13215 	stw	r3,1224(sp)
  107090:	1802151e 	bne	r3,zero,1078e8 <___vfprintf_internal_r+0xe40>
  107094:	d9013017 	ldw	r4,1216(sp)
  107098:	d8c12b17 	ldw	r3,1196(sp)
  10709c:	20f9c83a 	sub	fp,r4,r3
  1070a0:	0702110e 	bge	zero,fp,1078e8 <___vfprintf_internal_r+0xe40>
  1070a4:	02400404 	movi	r9,16
  1070a8:	d8c12017 	ldw	r3,1152(sp)
  1070ac:	d8811f17 	ldw	r2,1148(sp)
  1070b0:	4f059a0e 	bge	r9,fp,10871c <___vfprintf_internal_r+0x1c74>
  1070b4:	8809883a 	mov	r4,r17
  1070b8:	01400474 	movhi	r5,17
  1070bc:	295a4684 	addi	r5,r5,26906
  1070c0:	dc013c15 	stw	r16,1264(sp)
  1070c4:	e023883a 	mov	r17,fp
  1070c8:	d9413615 	stw	r5,1240(sp)
  1070cc:	482d883a 	mov	r22,r9
  1070d0:	054001c4 	movi	r21,7
  1070d4:	dc012c17 	ldw	r16,1200(sp)
  1070d8:	2039883a 	mov	fp,r4
  1070dc:	00000306 	br	1070ec <___vfprintf_internal_r+0x644>
  1070e0:	8c7ffc04 	addi	r17,r17,-16
  1070e4:	42000204 	addi	r8,r8,8
  1070e8:	b440130e 	bge	r22,r17,107138 <___vfprintf_internal_r+0x690>
  1070ec:	18c00404 	addi	r3,r3,16
  1070f0:	10800044 	addi	r2,r2,1
  1070f4:	01000474 	movhi	r4,17
  1070f8:	211a4684 	addi	r4,r4,26906
  1070fc:	41000015 	stw	r4,0(r8)
  107100:	45800115 	stw	r22,4(r8)
  107104:	d8c12015 	stw	r3,1152(sp)
  107108:	d8811f15 	stw	r2,1148(sp)
  10710c:	a8bff40e 	bge	r21,r2,1070e0 <black_to_red_frame+0xfe1070e0>
  107110:	8009883a 	mov	r4,r16
  107114:	980b883a 	mov	r5,r19
  107118:	d9811e04 	addi	r6,sp,1144
  10711c:	010ea840 	call	10ea84 <__sprint_r>
  107120:	103f7d1e 	bne	r2,zero,106f18 <black_to_red_frame+0xfe106f18>
  107124:	8c7ffc04 	addi	r17,r17,-16
  107128:	d8c12017 	ldw	r3,1152(sp)
  10712c:	d8811f17 	ldw	r2,1148(sp)
  107130:	da000404 	addi	r8,sp,16
  107134:	b47fed16 	blt	r22,r17,1070ec <black_to_red_frame+0xfe1070ec>
  107138:	dc013c17 	ldw	r16,1264(sp)
  10713c:	e009883a 	mov	r4,fp
  107140:	8839883a 	mov	fp,r17
  107144:	2023883a 	mov	r17,r4
  107148:	d9413617 	ldw	r5,1240(sp)
  10714c:	e0c7883a 	add	r3,fp,r3
  107150:	10800044 	addi	r2,r2,1
  107154:	41400015 	stw	r5,0(r8)
  107158:	47000115 	stw	fp,4(r8)
  10715c:	d8c12015 	stw	r3,1152(sp)
  107160:	d8811f15 	stw	r2,1148(sp)
  107164:	010001c4 	movi	r4,7
  107168:	20836b16 	blt	r4,r2,107f18 <___vfprintf_internal_r+0x1470>
  10716c:	d8812787 	ldb	r2,1182(sp)
  107170:	42000204 	addi	r8,r8,8
  107174:	10000c26 	beq	r2,zero,1071a8 <___vfprintf_internal_r+0x700>
  107178:	d8811f17 	ldw	r2,1148(sp)
  10717c:	d9012784 	addi	r4,sp,1182
  107180:	18c00044 	addi	r3,r3,1
  107184:	10800044 	addi	r2,r2,1
  107188:	41000015 	stw	r4,0(r8)
  10718c:	01000044 	movi	r4,1
  107190:	41000115 	stw	r4,4(r8)
  107194:	d8c12015 	stw	r3,1152(sp)
  107198:	d8811f15 	stw	r2,1148(sp)
  10719c:	010001c4 	movi	r4,7
  1071a0:	2082ef16 	blt	r4,r2,107d60 <___vfprintf_internal_r+0x12b8>
  1071a4:	42000204 	addi	r8,r8,8
  1071a8:	d8812d17 	ldw	r2,1204(sp)
  1071ac:	10000c26 	beq	r2,zero,1071e0 <___vfprintf_internal_r+0x738>
  1071b0:	d8811f17 	ldw	r2,1148(sp)
  1071b4:	d9012704 	addi	r4,sp,1180
  1071b8:	18c00084 	addi	r3,r3,2
  1071bc:	10800044 	addi	r2,r2,1
  1071c0:	41000015 	stw	r4,0(r8)
  1071c4:	01000084 	movi	r4,2
  1071c8:	41000115 	stw	r4,4(r8)
  1071cc:	d8c12015 	stw	r3,1152(sp)
  1071d0:	d8811f15 	stw	r2,1148(sp)
  1071d4:	010001c4 	movi	r4,7
  1071d8:	2082e916 	blt	r4,r2,107d80 <___vfprintf_internal_r+0x12d8>
  1071dc:	42000204 	addi	r8,r8,8
  1071e0:	d9013217 	ldw	r4,1224(sp)
  1071e4:	00802004 	movi	r2,128
  1071e8:	20823226 	beq	r4,r2,107ab4 <___vfprintf_internal_r+0x100c>
  1071ec:	d9012e17 	ldw	r4,1208(sp)
  1071f0:	a129c83a 	sub	r20,r20,r4
  1071f4:	05002d0e 	bge	zero,r20,1072ac <___vfprintf_internal_r+0x804>
  1071f8:	05800404 	movi	r22,16
  1071fc:	d8811f17 	ldw	r2,1148(sp)
  107200:	05400474 	movhi	r21,17
  107204:	ad5a4284 	addi	r21,r21,26890
  107208:	b5001f0e 	bge	r22,r20,107288 <___vfprintf_internal_r+0x7e0>
  10720c:	8809883a 	mov	r4,r17
  107210:	dc012d15 	stw	r16,1204(sp)
  107214:	a023883a 	mov	r17,r20
  107218:	070001c4 	movi	fp,7
  10721c:	dc012c17 	ldw	r16,1200(sp)
  107220:	2029883a 	mov	r20,r4
  107224:	00000306 	br	107234 <___vfprintf_internal_r+0x78c>
  107228:	8c7ffc04 	addi	r17,r17,-16
  10722c:	42000204 	addi	r8,r8,8
  107230:	b440110e 	bge	r22,r17,107278 <___vfprintf_internal_r+0x7d0>
  107234:	18c00404 	addi	r3,r3,16
  107238:	10800044 	addi	r2,r2,1
  10723c:	45c00015 	stw	r23,0(r8)
  107240:	45800115 	stw	r22,4(r8)
  107244:	d8c12015 	stw	r3,1152(sp)
  107248:	d8811f15 	stw	r2,1148(sp)
  10724c:	e0bff60e 	bge	fp,r2,107228 <black_to_red_frame+0xfe107228>
  107250:	8009883a 	mov	r4,r16
  107254:	980b883a 	mov	r5,r19
  107258:	d9811e04 	addi	r6,sp,1144
  10725c:	010ea840 	call	10ea84 <__sprint_r>
  107260:	103f2d1e 	bne	r2,zero,106f18 <black_to_red_frame+0xfe106f18>
  107264:	8c7ffc04 	addi	r17,r17,-16
  107268:	d8c12017 	ldw	r3,1152(sp)
  10726c:	d8811f17 	ldw	r2,1148(sp)
  107270:	da000404 	addi	r8,sp,16
  107274:	b47fef16 	blt	r22,r17,107234 <black_to_red_frame+0xfe107234>
  107278:	dc012d17 	ldw	r16,1204(sp)
  10727c:	a009883a 	mov	r4,r20
  107280:	8829883a 	mov	r20,r17
  107284:	2023883a 	mov	r17,r4
  107288:	1d07883a 	add	r3,r3,r20
  10728c:	10800044 	addi	r2,r2,1
  107290:	45400015 	stw	r21,0(r8)
  107294:	45000115 	stw	r20,4(r8)
  107298:	d8c12015 	stw	r3,1152(sp)
  10729c:	d8811f15 	stw	r2,1148(sp)
  1072a0:	010001c4 	movi	r4,7
  1072a4:	2082a616 	blt	r4,r2,107d40 <___vfprintf_internal_r+0x1298>
  1072a8:	42000204 	addi	r8,r8,8
  1072ac:	d9412a17 	ldw	r5,1192(sp)
  1072b0:	2880400c 	andi	r2,r5,256
  1072b4:	1001b51e 	bne	r2,zero,10798c <___vfprintf_internal_r+0xee4>
  1072b8:	d8812e17 	ldw	r2,1208(sp)
  1072bc:	d9012e17 	ldw	r4,1208(sp)
  1072c0:	44000015 	stw	r16,0(r8)
  1072c4:	1887883a 	add	r3,r3,r2
  1072c8:	d8811f17 	ldw	r2,1148(sp)
  1072cc:	10800044 	addi	r2,r2,1
  1072d0:	41000115 	stw	r4,4(r8)
  1072d4:	d8c12015 	stw	r3,1152(sp)
  1072d8:	d8811f15 	stw	r2,1148(sp)
  1072dc:	010001c4 	movi	r4,7
  1072e0:	20818b16 	blt	r4,r2,107910 <___vfprintf_internal_r+0xe68>
  1072e4:	42000204 	addi	r8,r8,8
  1072e8:	d9412a17 	ldw	r5,1192(sp)
  1072ec:	2880010c 	andi	r2,r5,4
  1072f0:	10003226 	beq	r2,zero,1073bc <___vfprintf_internal_r+0x914>
  1072f4:	d8813017 	ldw	r2,1216(sp)
  1072f8:	d9012b17 	ldw	r4,1196(sp)
  1072fc:	1121c83a 	sub	r16,r2,r4
  107300:	04002e0e 	bge	zero,r16,1073bc <___vfprintf_internal_r+0x914>
  107304:	04800404 	movi	r18,16
  107308:	d8811f17 	ldw	r2,1148(sp)
  10730c:	9405240e 	bge	r18,r16,1087a0 <___vfprintf_internal_r+0x1cf8>
  107310:	01000474 	movhi	r4,17
  107314:	211a4684 	addi	r4,r4,26906
  107318:	d9013615 	stw	r4,1240(sp)
  10731c:	050001c4 	movi	r20,7
  107320:	dd412c17 	ldw	r21,1200(sp)
  107324:	00000306 	br	107334 <___vfprintf_internal_r+0x88c>
  107328:	843ffc04 	addi	r16,r16,-16
  10732c:	42000204 	addi	r8,r8,8
  107330:	9400130e 	bge	r18,r16,107380 <___vfprintf_internal_r+0x8d8>
  107334:	18c00404 	addi	r3,r3,16
  107338:	10800044 	addi	r2,r2,1
  10733c:	01400474 	movhi	r5,17
  107340:	295a4684 	addi	r5,r5,26906
  107344:	41400015 	stw	r5,0(r8)
  107348:	44800115 	stw	r18,4(r8)
  10734c:	d8c12015 	stw	r3,1152(sp)
  107350:	d8811f15 	stw	r2,1148(sp)
  107354:	a0bff40e 	bge	r20,r2,107328 <black_to_red_frame+0xfe107328>
  107358:	a809883a 	mov	r4,r21
  10735c:	980b883a 	mov	r5,r19
  107360:	d9811e04 	addi	r6,sp,1144
  107364:	010ea840 	call	10ea84 <__sprint_r>
  107368:	103eeb1e 	bne	r2,zero,106f18 <black_to_red_frame+0xfe106f18>
  10736c:	843ffc04 	addi	r16,r16,-16
  107370:	d8c12017 	ldw	r3,1152(sp)
  107374:	d8811f17 	ldw	r2,1148(sp)
  107378:	da000404 	addi	r8,sp,16
  10737c:	943fed16 	blt	r18,r16,107334 <black_to_red_frame+0xfe107334>
  107380:	d9013617 	ldw	r4,1240(sp)
  107384:	1c07883a 	add	r3,r3,r16
  107388:	10800044 	addi	r2,r2,1
  10738c:	41000015 	stw	r4,0(r8)
  107390:	44000115 	stw	r16,4(r8)
  107394:	d8c12015 	stw	r3,1152(sp)
  107398:	d8811f15 	stw	r2,1148(sp)
  10739c:	010001c4 	movi	r4,7
  1073a0:	2080060e 	bge	r4,r2,1073bc <___vfprintf_internal_r+0x914>
  1073a4:	d9012c17 	ldw	r4,1200(sp)
  1073a8:	980b883a 	mov	r5,r19
  1073ac:	d9811e04 	addi	r6,sp,1144
  1073b0:	010ea840 	call	10ea84 <__sprint_r>
  1073b4:	103ed81e 	bne	r2,zero,106f18 <black_to_red_frame+0xfe106f18>
  1073b8:	d8c12017 	ldw	r3,1152(sp)
  1073bc:	d8812b17 	ldw	r2,1196(sp)
  1073c0:	d9413017 	ldw	r5,1216(sp)
  1073c4:	1140010e 	bge	r2,r5,1073cc <___vfprintf_internal_r+0x924>
  1073c8:	2805883a 	mov	r2,r5
  1073cc:	d9013117 	ldw	r4,1220(sp)
  1073d0:	2089883a 	add	r4,r4,r2
  1073d4:	d9013115 	stw	r4,1220(sp)
  1073d8:	1802381e 	bne	r3,zero,107cbc <___vfprintf_internal_r+0x1214>
  1073dc:	88800007 	ldb	r2,0(r17)
  1073e0:	d8011f15 	stw	zero,1148(sp)
  1073e4:	da000404 	addi	r8,sp,16
  1073e8:	103def1e 	bne	r2,zero,106ba8 <black_to_red_frame+0xfe106ba8>
  1073ec:	8821883a 	mov	r16,r17
  1073f0:	003e0506 	br	106c08 <black_to_red_frame+0xfe106c08>
  1073f4:	1829883a 	mov	r20,r3
  1073f8:	d8c12a17 	ldw	r3,1192(sp)
  1073fc:	dd812785 	stb	r22,1182(sp)
  107400:	e011883a 	mov	r8,fp
  107404:	1880020c 	andi	r2,r3,8
  107408:	1003c926 	beq	r2,zero,108330 <___vfprintf_internal_r+0x1888>
  10740c:	d9012f17 	ldw	r4,1212(sp)
  107410:	d9412f17 	ldw	r5,1212(sp)
  107414:	d8812f17 	ldw	r2,1212(sp)
  107418:	21000017 	ldw	r4,0(r4)
  10741c:	29400117 	ldw	r5,4(r5)
  107420:	10800204 	addi	r2,r2,8
  107424:	d9013715 	stw	r4,1244(sp)
  107428:	d9413915 	stw	r5,1252(sp)
  10742c:	d8812f15 	stw	r2,1212(sp)
  107430:	d9013717 	ldw	r4,1244(sp)
  107434:	d9413917 	ldw	r5,1252(sp)
  107438:	da013f15 	stw	r8,1276(sp)
  10743c:	04000044 	movi	r16,1
  107440:	010d3b00 	call	10d3b0 <__fpclassifyd>
  107444:	da013f17 	ldw	r8,1276(sp)
  107448:	d9013717 	ldw	r4,1244(sp)
  10744c:	d9413917 	ldw	r5,1252(sp)
  107450:	1403571e 	bne	r2,r16,1081b0 <___vfprintf_internal_r+0x1708>
  107454:	000d883a 	mov	r6,zero
  107458:	000f883a 	mov	r7,zero
  10745c:	01129240 	call	112924 <__ledf2>
  107460:	da013f17 	ldw	r8,1276(sp)
  107464:	1004f416 	blt	r2,zero,108838 <___vfprintf_internal_r+0x1d90>
  107468:	df012783 	ldbu	fp,1182(sp)
  10746c:	008011c4 	movi	r2,71
  107470:	14847a0e 	bge	r2,r18,10865c <___vfprintf_internal_r+0x1bb4>
  107474:	04000474 	movhi	r16,17
  107478:	841a2b04 	addi	r16,r16,26796
  10747c:	d9012a17 	ldw	r4,1192(sp)
  107480:	00bfdfc4 	movi	r2,-129
  107484:	00c000c4 	movi	r3,3
  107488:	2088703a 	and	r4,r4,r2
  10748c:	d8c12b15 	stw	r3,1196(sp)
  107490:	d9012a15 	stw	r4,1192(sp)
  107494:	d8c12e15 	stw	r3,1208(sp)
  107498:	0029883a 	mov	r20,zero
  10749c:	d8013315 	stw	zero,1228(sp)
  1074a0:	003eea06 	br	10704c <black_to_red_frame+0xfe10704c>
  1074a4:	953ff404 	addi	r20,r18,-48
  1074a8:	d8013015 	stw	zero,1216(sp)
  1074ac:	0009883a 	mov	r4,zero
  1074b0:	1825883a 	mov	r18,r3
  1074b4:	01400284 	movi	r5,10
  1074b8:	0103f1c0 	call	103f1c <__mulsi3>
  1074bc:	88c00007 	ldb	r3,0(r17)
  1074c0:	1509883a 	add	r4,r2,r20
  1074c4:	8c400044 	addi	r17,r17,1
  1074c8:	1d3ff404 	addi	r20,r3,-48
  1074cc:	8805883a 	mov	r2,r17
  1074d0:	ad3ff82e 	bgeu	r21,r20,1074b4 <black_to_red_frame+0xfe1074b4>
  1074d4:	d9013015 	stw	r4,1216(sp)
  1074d8:	9009883a 	mov	r4,r18
  1074dc:	1023883a 	mov	r17,r2
  1074e0:	1825883a 	mov	r18,r3
  1074e4:	2007883a 	mov	r3,r4
  1074e8:	003dd506 	br	106c40 <black_to_red_frame+0xfe106c40>
  1074ec:	d8812a17 	ldw	r2,1192(sp)
  1074f0:	10800214 	ori	r2,r2,8
  1074f4:	d8812a15 	stw	r2,1192(sp)
  1074f8:	8c800007 	ldb	r18,0(r17)
  1074fc:	003dcf06 	br	106c3c <black_to_red_frame+0xfe106c3c>
  107500:	d9012a17 	ldw	r4,1192(sp)
  107504:	e011883a 	mov	r8,fp
  107508:	1829883a 	mov	r20,r3
  10750c:	21000414 	ori	r4,r4,16
  107510:	d9012a15 	stw	r4,1192(sp)
  107514:	d9412a17 	ldw	r5,1192(sp)
  107518:	2880080c 	andi	r2,r5,32
  10751c:	1000cf26 	beq	r2,zero,10785c <___vfprintf_internal_r+0xdb4>
  107520:	d8812f17 	ldw	r2,1212(sp)
  107524:	0007883a 	mov	r3,zero
  107528:	15400017 	ldw	r21,0(r2)
  10752c:	15800117 	ldw	r22,4(r2)
  107530:	10800204 	addi	r2,r2,8
  107534:	d8812f15 	stw	r2,1212(sp)
  107538:	ad84b03a 	or	r2,r21,r22
  10753c:	d8012785 	stb	zero,1182(sp)
  107540:	0039883a 	mov	fp,zero
  107544:	003eab06 	br	106ff4 <black_to_red_frame+0xfe106ff4>
  107548:	d9012a17 	ldw	r4,1192(sp)
  10754c:	e011883a 	mov	r8,fp
  107550:	1829883a 	mov	r20,r3
  107554:	21000414 	ori	r4,r4,16
  107558:	d9012a15 	stw	r4,1192(sp)
  10755c:	d9412a17 	ldw	r5,1192(sp)
  107560:	2880080c 	andi	r2,r5,32
  107564:	1000cd26 	beq	r2,zero,10789c <___vfprintf_internal_r+0xdf4>
  107568:	d8812f17 	ldw	r2,1212(sp)
  10756c:	00c00044 	movi	r3,1
  107570:	15400017 	ldw	r21,0(r2)
  107574:	15800117 	ldw	r22,4(r2)
  107578:	10800204 	addi	r2,r2,8
  10757c:	d8812f15 	stw	r2,1212(sp)
  107580:	ad84b03a 	or	r2,r21,r22
  107584:	003fed06 	br	10753c <black_to_red_frame+0xfe10753c>
  107588:	d9012a17 	ldw	r4,1192(sp)
  10758c:	dd812785 	stb	r22,1182(sp)
  107590:	e011883a 	mov	r8,fp
  107594:	2080080c 	andi	r2,r4,32
  107598:	10039226 	beq	r2,zero,1083e4 <___vfprintf_internal_r+0x193c>
  10759c:	d9412f17 	ldw	r5,1212(sp)
  1075a0:	d9013117 	ldw	r4,1220(sp)
  1075a4:	28800017 	ldw	r2,0(r5)
  1075a8:	2007d7fa 	srai	r3,r4,31
  1075ac:	29400104 	addi	r5,r5,4
  1075b0:	d9412f15 	stw	r5,1212(sp)
  1075b4:	11000015 	stw	r4,0(r2)
  1075b8:	10c00115 	stw	r3,4(r2)
  1075bc:	003d7806 	br	106ba0 <black_to_red_frame+0xfe106ba0>
  1075c0:	d8c12f17 	ldw	r3,1212(sp)
  1075c4:	d9012f17 	ldw	r4,1212(sp)
  1075c8:	e011883a 	mov	r8,fp
  1075cc:	18800017 	ldw	r2,0(r3)
  1075d0:	21000104 	addi	r4,r4,4
  1075d4:	00c00044 	movi	r3,1
  1075d8:	d8c12b15 	stw	r3,1196(sp)
  1075dc:	d8012785 	stb	zero,1182(sp)
  1075e0:	d8810405 	stb	r2,1040(sp)
  1075e4:	d9012f15 	stw	r4,1212(sp)
  1075e8:	d8c12e15 	stw	r3,1208(sp)
  1075ec:	0029883a 	mov	r20,zero
  1075f0:	d8013315 	stw	zero,1228(sp)
  1075f4:	dc010404 	addi	r16,sp,1040
  1075f8:	0005883a 	mov	r2,zero
  1075fc:	003e9a06 	br	107068 <black_to_red_frame+0xfe107068>
  107600:	d9412a17 	ldw	r5,1192(sp)
  107604:	01000474 	movhi	r4,17
  107608:	211a3304 	addi	r4,r4,26828
  10760c:	dd812785 	stb	r22,1182(sp)
  107610:	d9013b15 	stw	r4,1260(sp)
  107614:	2880080c 	andi	r2,r5,32
  107618:	e011883a 	mov	r8,fp
  10761c:	1829883a 	mov	r20,r3
  107620:	10002f26 	beq	r2,zero,1076e0 <___vfprintf_internal_r+0xc38>
  107624:	d8812f17 	ldw	r2,1212(sp)
  107628:	15400017 	ldw	r21,0(r2)
  10762c:	15800117 	ldw	r22,4(r2)
  107630:	10800204 	addi	r2,r2,8
  107634:	d8812f15 	stw	r2,1212(sp)
  107638:	d9012a17 	ldw	r4,1192(sp)
  10763c:	2080004c 	andi	r2,r4,1
  107640:	10025f26 	beq	r2,zero,107fc0 <___vfprintf_internal_r+0x1518>
  107644:	ad84b03a 	or	r2,r21,r22
  107648:	10034e26 	beq	r2,zero,108384 <___vfprintf_internal_r+0x18dc>
  10764c:	00c00c04 	movi	r3,48
  107650:	21000094 	ori	r4,r4,2
  107654:	d8c12705 	stb	r3,1180(sp)
  107658:	dc812745 	stb	r18,1181(sp)
  10765c:	d9012a15 	stw	r4,1192(sp)
  107660:	00c00084 	movi	r3,2
  107664:	003fb506 	br	10753c <black_to_red_frame+0xfe10753c>
  107668:	b0803fcc 	andi	r2,r22,255
  10766c:	1080201c 	xori	r2,r2,128
  107670:	10bfe004 	addi	r2,r2,-128
  107674:	1003501e 	bne	r2,zero,1083b8 <___vfprintf_internal_r+0x1910>
  107678:	05800804 	movi	r22,32
  10767c:	8c800007 	ldb	r18,0(r17)
  107680:	003d6e06 	br	106c3c <black_to_red_frame+0xfe106c3c>
  107684:	d9012a17 	ldw	r4,1192(sp)
  107688:	21000054 	ori	r4,r4,1
  10768c:	d9012a15 	stw	r4,1192(sp)
  107690:	8c800007 	ldb	r18,0(r17)
  107694:	003d6906 	br	106c3c <black_to_red_frame+0xfe106c3c>
  107698:	d9412f17 	ldw	r5,1212(sp)
  10769c:	d9012f17 	ldw	r4,1212(sp)
  1076a0:	29400017 	ldw	r5,0(r5)
  1076a4:	20800104 	addi	r2,r4,4
  1076a8:	d9413015 	stw	r5,1216(sp)
  1076ac:	283dc616 	blt	r5,zero,106dc8 <black_to_red_frame+0xfe106dc8>
  1076b0:	d8812f15 	stw	r2,1212(sp)
  1076b4:	8c800007 	ldb	r18,0(r17)
  1076b8:	003d6006 	br	106c3c <black_to_red_frame+0xfe106c3c>
  1076bc:	d9412a17 	ldw	r5,1192(sp)
  1076c0:	00800474 	movhi	r2,17
  1076c4:	109a2e04 	addi	r2,r2,26808
  1076c8:	d8813b15 	stw	r2,1260(sp)
  1076cc:	dd812785 	stb	r22,1182(sp)
  1076d0:	2880080c 	andi	r2,r5,32
  1076d4:	e011883a 	mov	r8,fp
  1076d8:	1829883a 	mov	r20,r3
  1076dc:	103fd11e 	bne	r2,zero,107624 <black_to_red_frame+0xfe107624>
  1076e0:	d8c12a17 	ldw	r3,1192(sp)
  1076e4:	1880040c 	andi	r2,r3,16
  1076e8:	10033526 	beq	r2,zero,1083c0 <___vfprintf_internal_r+0x1918>
  1076ec:	d9012f17 	ldw	r4,1212(sp)
  1076f0:	002d883a 	mov	r22,zero
  1076f4:	25400017 	ldw	r21,0(r4)
  1076f8:	21000104 	addi	r4,r4,4
  1076fc:	d9012f15 	stw	r4,1212(sp)
  107700:	003fcd06 	br	107638 <black_to_red_frame+0xfe107638>
  107704:	d9012a17 	ldw	r4,1192(sp)
  107708:	21001014 	ori	r4,r4,64
  10770c:	d9012a15 	stw	r4,1192(sp)
  107710:	8c800007 	ldb	r18,0(r17)
  107714:	003d4906 	br	106c3c <black_to_red_frame+0xfe106c3c>
  107718:	8c800007 	ldb	r18,0(r17)
  10771c:	01401b04 	movi	r5,108
  107720:	8805883a 	mov	r2,r17
  107724:	9143db26 	beq	r18,r5,108694 <___vfprintf_internal_r+0x1bec>
  107728:	d9412a17 	ldw	r5,1192(sp)
  10772c:	29400414 	ori	r5,r5,16
  107730:	d9412a15 	stw	r5,1192(sp)
  107734:	003d4106 	br	106c3c <black_to_red_frame+0xfe106c3c>
  107738:	1829883a 	mov	r20,r3
  10773c:	d8c12a17 	ldw	r3,1192(sp)
  107740:	dd812785 	stb	r22,1182(sp)
  107744:	e011883a 	mov	r8,fp
  107748:	1880080c 	andi	r2,r3,32
  10774c:	103e1f1e 	bne	r2,zero,106fcc <black_to_red_frame+0xfe106fcc>
  107750:	d9412a17 	ldw	r5,1192(sp)
  107754:	2880040c 	andi	r2,r5,16
  107758:	10032f26 	beq	r2,zero,108418 <___vfprintf_internal_r+0x1970>
  10775c:	d8812f17 	ldw	r2,1212(sp)
  107760:	15400017 	ldw	r21,0(r2)
  107764:	10800104 	addi	r2,r2,4
  107768:	d8812f15 	stw	r2,1212(sp)
  10776c:	a82dd7fa 	srai	r22,r21,31
  107770:	b005883a 	mov	r2,r22
  107774:	003e1b06 	br	106fe4 <black_to_red_frame+0xfe106fe4>
  107778:	d8812a17 	ldw	r2,1192(sp)
  10777c:	10800814 	ori	r2,r2,32
  107780:	d8812a15 	stw	r2,1192(sp)
  107784:	8c800007 	ldb	r18,0(r17)
  107788:	003d2c06 	br	106c3c <black_to_red_frame+0xfe106c3c>
  10778c:	1829883a 	mov	r20,r3
  107790:	d8c12f17 	ldw	r3,1212(sp)
  107794:	d8012785 	stb	zero,1182(sp)
  107798:	e011883a 	mov	r8,fp
  10779c:	1c000017 	ldw	r16,0(r3)
  1077a0:	1d400104 	addi	r21,r3,4
  1077a4:	80040226 	beq	r16,zero,1087b0 <___vfprintf_internal_r+0x1d08>
  1077a8:	8009883a 	mov	r4,r16
  1077ac:	a003c716 	blt	r20,zero,1086cc <___vfprintf_internal_r+0x1c24>
  1077b0:	000b883a 	mov	r5,zero
  1077b4:	a00d883a 	mov	r6,r20
  1077b8:	df013f15 	stw	fp,1276(sp)
  1077bc:	010b8740 	call	10b874 <memchr>
  1077c0:	da013f17 	ldw	r8,1276(sp)
  1077c4:	10044326 	beq	r2,zero,1088d4 <___vfprintf_internal_r+0x1e2c>
  1077c8:	1405c83a 	sub	r2,r2,r16
  1077cc:	d8812e15 	stw	r2,1208(sp)
  1077d0:	a0837c16 	blt	r20,r2,1085c4 <___vfprintf_internal_r+0x1b1c>
  1077d4:	d8812e17 	ldw	r2,1208(sp)
  1077d8:	1003c116 	blt	r2,zero,1086e0 <___vfprintf_internal_r+0x1c38>
  1077dc:	df012783 	ldbu	fp,1182(sp)
  1077e0:	d8812b15 	stw	r2,1196(sp)
  1077e4:	dd412f15 	stw	r21,1212(sp)
  1077e8:	0029883a 	mov	r20,zero
  1077ec:	d8013315 	stw	zero,1228(sp)
  1077f0:	003e1606 	br	10704c <black_to_red_frame+0xfe10704c>
  1077f4:	d9012f17 	ldw	r4,1212(sp)
  1077f8:	d9412a17 	ldw	r5,1192(sp)
  1077fc:	00800c04 	movi	r2,48
  107800:	25400017 	ldw	r21,0(r4)
  107804:	d8812705 	stb	r2,1180(sp)
  107808:	00801e04 	movi	r2,120
  10780c:	29400094 	ori	r5,r5,2
  107810:	d8812745 	stb	r2,1181(sp)
  107814:	21000104 	addi	r4,r4,4
  107818:	00800474 	movhi	r2,17
  10781c:	109a3304 	addi	r2,r2,26828
  107820:	1829883a 	mov	r20,r3
  107824:	d8813b15 	stw	r2,1260(sp)
  107828:	e011883a 	mov	r8,fp
  10782c:	002d883a 	mov	r22,zero
  107830:	d9412a15 	stw	r5,1192(sp)
  107834:	d9012f15 	stw	r4,1212(sp)
  107838:	00c00084 	movi	r3,2
  10783c:	04801e04 	movi	r18,120
  107840:	a805883a 	mov	r2,r21
  107844:	003f3d06 	br	10753c <black_to_red_frame+0xfe10753c>
  107848:	d9412a17 	ldw	r5,1192(sp)
  10784c:	e011883a 	mov	r8,fp
  107850:	1829883a 	mov	r20,r3
  107854:	2880080c 	andi	r2,r5,32
  107858:	103f311e 	bne	r2,zero,107520 <black_to_red_frame+0xfe107520>
  10785c:	d8c12a17 	ldw	r3,1192(sp)
  107860:	1880040c 	andi	r2,r3,16
  107864:	1002c926 	beq	r2,zero,10838c <___vfprintf_internal_r+0x18e4>
  107868:	d9012f17 	ldw	r4,1212(sp)
  10786c:	002d883a 	mov	r22,zero
  107870:	0007883a 	mov	r3,zero
  107874:	25400017 	ldw	r21,0(r4)
  107878:	21000104 	addi	r4,r4,4
  10787c:	d9012f15 	stw	r4,1212(sp)
  107880:	a805883a 	mov	r2,r21
  107884:	003f2d06 	br	10753c <black_to_red_frame+0xfe10753c>
  107888:	d9412a17 	ldw	r5,1192(sp)
  10788c:	e011883a 	mov	r8,fp
  107890:	1829883a 	mov	r20,r3
  107894:	2880080c 	andi	r2,r5,32
  107898:	103f331e 	bne	r2,zero,107568 <black_to_red_frame+0xfe107568>
  10789c:	d8c12a17 	ldw	r3,1192(sp)
  1078a0:	1880040c 	andi	r2,r3,16
  1078a4:	1002ac26 	beq	r2,zero,108358 <___vfprintf_internal_r+0x18b0>
  1078a8:	d9012f17 	ldw	r4,1212(sp)
  1078ac:	002d883a 	mov	r22,zero
  1078b0:	00c00044 	movi	r3,1
  1078b4:	25400017 	ldw	r21,0(r4)
  1078b8:	21000104 	addi	r4,r4,4
  1078bc:	d9012f15 	stw	r4,1212(sp)
  1078c0:	a805883a 	mov	r2,r21
  1078c4:	003f1d06 	br	10753c <black_to_red_frame+0xfe10753c>
  1078c8:	dd812785 	stb	r22,1182(sp)
  1078cc:	e011883a 	mov	r8,fp
  1078d0:	903d8b26 	beq	r18,zero,106f00 <black_to_red_frame+0xfe106f00>
  1078d4:	00c00044 	movi	r3,1
  1078d8:	d8c12b15 	stw	r3,1196(sp)
  1078dc:	dc810405 	stb	r18,1040(sp)
  1078e0:	d8012785 	stb	zero,1182(sp)
  1078e4:	003f4006 	br	1075e8 <black_to_red_frame+0xfe1075e8>
  1078e8:	d8c12017 	ldw	r3,1152(sp)
  1078ec:	003e2106 	br	107174 <black_to_red_frame+0xfe107174>
  1078f0:	45400015 	stw	r21,0(r8)
  1078f4:	44000115 	stw	r16,4(r8)
  1078f8:	1c07883a 	add	r3,r3,r16
  1078fc:	10800044 	addi	r2,r2,1
  107900:	d8c12015 	stw	r3,1152(sp)
  107904:	d8811f15 	stw	r2,1148(sp)
  107908:	010001c4 	movi	r4,7
  10790c:	20be750e 	bge	r4,r2,1072e4 <black_to_red_frame+0xfe1072e4>
  107910:	d9012c17 	ldw	r4,1200(sp)
  107914:	980b883a 	mov	r5,r19
  107918:	d9811e04 	addi	r6,sp,1144
  10791c:	010ea840 	call	10ea84 <__sprint_r>
  107920:	103d7d1e 	bne	r2,zero,106f18 <black_to_red_frame+0xfe106f18>
  107924:	d8c12017 	ldw	r3,1152(sp)
  107928:	da000404 	addi	r8,sp,16
  10792c:	003e6e06 	br	1072e8 <black_to_red_frame+0xfe1072e8>
  107930:	18803fcc 	andi	r2,r3,255
  107934:	00c00044 	movi	r3,1
  107938:	10c11926 	beq	r2,r3,107da0 <___vfprintf_internal_r+0x12f8>
  10793c:	00c00084 	movi	r3,2
  107940:	10c0e41e 	bne	r2,r3,107cd4 <___vfprintf_internal_r+0x122c>
  107944:	d9413b17 	ldw	r5,1260(sp)
  107948:	d8c10dc4 	addi	r3,sp,1079
  10794c:	a88003cc 	andi	r2,r21,15
  107950:	b008973a 	slli	r4,r22,28
  107954:	2885883a 	add	r2,r5,r2
  107958:	a82ad13a 	srli	r21,r21,4
  10795c:	10800003 	ldbu	r2,0(r2)
  107960:	b02cd13a 	srli	r22,r22,4
  107964:	256ab03a 	or	r21,r4,r21
  107968:	18800005 	stb	r2,0(r3)
  10796c:	ad84b03a 	or	r2,r21,r22
  107970:	1821883a 	mov	r16,r3
  107974:	18ffffc4 	addi	r3,r3,-1
  107978:	103ff41e 	bne	r2,zero,10794c <black_to_red_frame+0xfe10794c>
  10797c:	d8c12917 	ldw	r3,1188(sp)
  107980:	1c07c83a 	sub	r3,r3,r16
  107984:	d8c12e15 	stw	r3,1208(sp)
  107988:	003dab06 	br	107038 <black_to_red_frame+0xfe107038>
  10798c:	00801944 	movi	r2,101
  107990:	14807e0e 	bge	r2,r18,107b8c <___vfprintf_internal_r+0x10e4>
  107994:	d9013717 	ldw	r4,1244(sp)
  107998:	d9413917 	ldw	r5,1252(sp)
  10799c:	000d883a 	mov	r6,zero
  1079a0:	000f883a 	mov	r7,zero
  1079a4:	d8c13e15 	stw	r3,1272(sp)
  1079a8:	da013f15 	stw	r8,1276(sp)
  1079ac:	01127c80 	call	1127c8 <__eqdf2>
  1079b0:	d8c13e17 	ldw	r3,1272(sp)
  1079b4:	da013f17 	ldw	r8,1276(sp)
  1079b8:	1001211e 	bne	r2,zero,107e40 <___vfprintf_internal_r+0x1398>
  1079bc:	d8811f17 	ldw	r2,1148(sp)
  1079c0:	01000044 	movi	r4,1
  1079c4:	18c00044 	addi	r3,r3,1
  1079c8:	10800044 	addi	r2,r2,1
  1079cc:	01400474 	movhi	r5,17
  1079d0:	295a3a04 	addi	r5,r5,26856
  1079d4:	41000115 	stw	r4,4(r8)
  1079d8:	41400015 	stw	r5,0(r8)
  1079dc:	d8c12015 	stw	r3,1152(sp)
  1079e0:	d8811f15 	stw	r2,1148(sp)
  1079e4:	010001c4 	movi	r4,7
  1079e8:	2082a316 	blt	r4,r2,108478 <___vfprintf_internal_r+0x19d0>
  1079ec:	42000204 	addi	r8,r8,8
  1079f0:	d8812617 	ldw	r2,1176(sp)
  1079f4:	d9013517 	ldw	r4,1236(sp)
  1079f8:	11000316 	blt	r2,r4,107a08 <___vfprintf_internal_r+0xf60>
  1079fc:	d9412a17 	ldw	r5,1192(sp)
  107a00:	2880004c 	andi	r2,r5,1
  107a04:	103e3826 	beq	r2,zero,1072e8 <black_to_red_frame+0xfe1072e8>
  107a08:	d8813817 	ldw	r2,1248(sp)
  107a0c:	d9013417 	ldw	r4,1232(sp)
  107a10:	d9413817 	ldw	r5,1248(sp)
  107a14:	1887883a 	add	r3,r3,r2
  107a18:	d8811f17 	ldw	r2,1148(sp)
  107a1c:	41000015 	stw	r4,0(r8)
  107a20:	41400115 	stw	r5,4(r8)
  107a24:	10800044 	addi	r2,r2,1
  107a28:	d8c12015 	stw	r3,1152(sp)
  107a2c:	d8811f15 	stw	r2,1148(sp)
  107a30:	010001c4 	movi	r4,7
  107a34:	20831d16 	blt	r4,r2,1086ac <___vfprintf_internal_r+0x1c04>
  107a38:	42000204 	addi	r8,r8,8
  107a3c:	d8813517 	ldw	r2,1236(sp)
  107a40:	143fffc4 	addi	r16,r2,-1
  107a44:	043e280e 	bge	zero,r16,1072e8 <black_to_red_frame+0xfe1072e8>
  107a48:	04800404 	movi	r18,16
  107a4c:	d8811f17 	ldw	r2,1148(sp)
  107a50:	05400474 	movhi	r21,17
  107a54:	ad5a4284 	addi	r21,r21,26890
  107a58:	943fa50e 	bge	r18,r16,1078f0 <black_to_red_frame+0xfe1078f0>
  107a5c:	050001c4 	movi	r20,7
  107a60:	dd812c17 	ldw	r22,1200(sp)
  107a64:	00000306 	br	107a74 <___vfprintf_internal_r+0xfcc>
  107a68:	42000204 	addi	r8,r8,8
  107a6c:	843ffc04 	addi	r16,r16,-16
  107a70:	943f9f0e 	bge	r18,r16,1078f0 <black_to_red_frame+0xfe1078f0>
  107a74:	18c00404 	addi	r3,r3,16
  107a78:	10800044 	addi	r2,r2,1
  107a7c:	45c00015 	stw	r23,0(r8)
  107a80:	44800115 	stw	r18,4(r8)
  107a84:	d8c12015 	stw	r3,1152(sp)
  107a88:	d8811f15 	stw	r2,1148(sp)
  107a8c:	a0bff60e 	bge	r20,r2,107a68 <black_to_red_frame+0xfe107a68>
  107a90:	b009883a 	mov	r4,r22
  107a94:	980b883a 	mov	r5,r19
  107a98:	d9811e04 	addi	r6,sp,1144
  107a9c:	010ea840 	call	10ea84 <__sprint_r>
  107aa0:	103d1d1e 	bne	r2,zero,106f18 <black_to_red_frame+0xfe106f18>
  107aa4:	d8c12017 	ldw	r3,1152(sp)
  107aa8:	d8811f17 	ldw	r2,1148(sp)
  107aac:	da000404 	addi	r8,sp,16
  107ab0:	003fee06 	br	107a6c <black_to_red_frame+0xfe107a6c>
  107ab4:	d9413017 	ldw	r5,1216(sp)
  107ab8:	d8812b17 	ldw	r2,1196(sp)
  107abc:	28adc83a 	sub	r22,r5,r2
  107ac0:	05bdca0e 	bge	zero,r22,1071ec <black_to_red_frame+0xfe1071ec>
  107ac4:	07000404 	movi	fp,16
  107ac8:	d8811f17 	ldw	r2,1148(sp)
  107acc:	05400474 	movhi	r21,17
  107ad0:	ad5a4284 	addi	r21,r21,26890
  107ad4:	e580230e 	bge	fp,r22,107b64 <___vfprintf_internal_r+0x10bc>
  107ad8:	a809883a 	mov	r4,r21
  107adc:	dc012d15 	stw	r16,1204(sp)
  107ae0:	882b883a 	mov	r21,r17
  107ae4:	01c001c4 	movi	r7,7
  107ae8:	b023883a 	mov	r17,r22
  107aec:	dc012c17 	ldw	r16,1200(sp)
  107af0:	202d883a 	mov	r22,r4
  107af4:	00000306 	br	107b04 <___vfprintf_internal_r+0x105c>
  107af8:	8c7ffc04 	addi	r17,r17,-16
  107afc:	42000204 	addi	r8,r8,8
  107b00:	e440130e 	bge	fp,r17,107b50 <___vfprintf_internal_r+0x10a8>
  107b04:	18c00404 	addi	r3,r3,16
  107b08:	10800044 	addi	r2,r2,1
  107b0c:	45c00015 	stw	r23,0(r8)
  107b10:	47000115 	stw	fp,4(r8)
  107b14:	d8c12015 	stw	r3,1152(sp)
  107b18:	d8811f15 	stw	r2,1148(sp)
  107b1c:	38bff60e 	bge	r7,r2,107af8 <black_to_red_frame+0xfe107af8>
  107b20:	8009883a 	mov	r4,r16
  107b24:	980b883a 	mov	r5,r19
  107b28:	d9811e04 	addi	r6,sp,1144
  107b2c:	d9c13e15 	stw	r7,1272(sp)
  107b30:	010ea840 	call	10ea84 <__sprint_r>
  107b34:	d9c13e17 	ldw	r7,1272(sp)
  107b38:	103cf71e 	bne	r2,zero,106f18 <black_to_red_frame+0xfe106f18>
  107b3c:	8c7ffc04 	addi	r17,r17,-16
  107b40:	d8c12017 	ldw	r3,1152(sp)
  107b44:	d8811f17 	ldw	r2,1148(sp)
  107b48:	da000404 	addi	r8,sp,16
  107b4c:	e47fed16 	blt	fp,r17,107b04 <black_to_red_frame+0xfe107b04>
  107b50:	dc012d17 	ldw	r16,1204(sp)
  107b54:	b009883a 	mov	r4,r22
  107b58:	882d883a 	mov	r22,r17
  107b5c:	a823883a 	mov	r17,r21
  107b60:	202b883a 	mov	r21,r4
  107b64:	1d87883a 	add	r3,r3,r22
  107b68:	10800044 	addi	r2,r2,1
  107b6c:	45400015 	stw	r21,0(r8)
  107b70:	45800115 	stw	r22,4(r8)
  107b74:	d8c12015 	stw	r3,1152(sp)
  107b78:	d8811f15 	stw	r2,1148(sp)
  107b7c:	010001c4 	movi	r4,7
  107b80:	20817a16 	blt	r4,r2,10816c <___vfprintf_internal_r+0x16c4>
  107b84:	42000204 	addi	r8,r8,8
  107b88:	003d9806 	br	1071ec <black_to_red_frame+0xfe1071ec>
  107b8c:	d9013517 	ldw	r4,1236(sp)
  107b90:	00800044 	movi	r2,1
  107b94:	1100340e 	bge	r2,r4,107c68 <___vfprintf_internal_r+0x11c0>
  107b98:	dc811f17 	ldw	r18,1148(sp)
  107b9c:	00800044 	movi	r2,1
  107ba0:	18c00044 	addi	r3,r3,1
  107ba4:	94800044 	addi	r18,r18,1
  107ba8:	40800115 	stw	r2,4(r8)
  107bac:	44000015 	stw	r16,0(r8)
  107bb0:	d8c12015 	stw	r3,1152(sp)
  107bb4:	dc811f15 	stw	r18,1148(sp)
  107bb8:	008001c4 	movi	r2,7
  107bbc:	14814e16 	blt	r2,r18,1080f8 <___vfprintf_internal_r+0x1650>
  107bc0:	42000204 	addi	r8,r8,8
  107bc4:	d8813817 	ldw	r2,1248(sp)
  107bc8:	94800044 	addi	r18,r18,1
  107bcc:	dc811f15 	stw	r18,1148(sp)
  107bd0:	18ad883a 	add	r22,r3,r2
  107bd4:	d8c13417 	ldw	r3,1232(sp)
  107bd8:	40800115 	stw	r2,4(r8)
  107bdc:	dd812015 	stw	r22,1152(sp)
  107be0:	40c00015 	stw	r3,0(r8)
  107be4:	008001c4 	movi	r2,7
  107be8:	14814c16 	blt	r2,r18,10811c <___vfprintf_internal_r+0x1674>
  107bec:	45000204 	addi	r20,r8,8
  107bf0:	d9013717 	ldw	r4,1244(sp)
  107bf4:	d9413917 	ldw	r5,1252(sp)
  107bf8:	000d883a 	mov	r6,zero
  107bfc:	000f883a 	mov	r7,zero
  107c00:	01127c80 	call	1127c8 <__eqdf2>
  107c04:	1000cd26 	beq	r2,zero,107f3c <___vfprintf_internal_r+0x1494>
  107c08:	d9013517 	ldw	r4,1236(sp)
  107c0c:	84000044 	addi	r16,r16,1
  107c10:	94800044 	addi	r18,r18,1
  107c14:	20bfffc4 	addi	r2,r4,-1
  107c18:	b0ad883a 	add	r22,r22,r2
  107c1c:	a0800115 	stw	r2,4(r20)
  107c20:	a4000015 	stw	r16,0(r20)
  107c24:	dd812015 	stw	r22,1152(sp)
  107c28:	dc811f15 	stw	r18,1148(sp)
  107c2c:	008001c4 	movi	r2,7
  107c30:	14801916 	blt	r2,r18,107c98 <___vfprintf_internal_r+0x11f0>
  107c34:	a5000204 	addi	r20,r20,8
  107c38:	d9013a17 	ldw	r4,1256(sp)
  107c3c:	d88122c4 	addi	r2,sp,1163
  107c40:	94800044 	addi	r18,r18,1
  107c44:	2587883a 	add	r3,r4,r22
  107c48:	a0800015 	stw	r2,0(r20)
  107c4c:	a1000115 	stw	r4,4(r20)
  107c50:	d8c12015 	stw	r3,1152(sp)
  107c54:	dc811f15 	stw	r18,1148(sp)
  107c58:	008001c4 	movi	r2,7
  107c5c:	14bf2c16 	blt	r2,r18,107910 <black_to_red_frame+0xfe107910>
  107c60:	a2000204 	addi	r8,r20,8
  107c64:	003da006 	br	1072e8 <black_to_red_frame+0xfe1072e8>
  107c68:	d9412a17 	ldw	r5,1192(sp)
  107c6c:	2888703a 	and	r4,r5,r2
  107c70:	203fc91e 	bne	r4,zero,107b98 <black_to_red_frame+0xfe107b98>
  107c74:	dc811f17 	ldw	r18,1148(sp)
  107c78:	1d800044 	addi	r22,r3,1
  107c7c:	40800115 	stw	r2,4(r8)
  107c80:	94800044 	addi	r18,r18,1
  107c84:	44000015 	stw	r16,0(r8)
  107c88:	dd812015 	stw	r22,1152(sp)
  107c8c:	dc811f15 	stw	r18,1148(sp)
  107c90:	008001c4 	movi	r2,7
  107c94:	1482740e 	bge	r2,r18,108668 <___vfprintf_internal_r+0x1bc0>
  107c98:	d9012c17 	ldw	r4,1200(sp)
  107c9c:	980b883a 	mov	r5,r19
  107ca0:	d9811e04 	addi	r6,sp,1144
  107ca4:	010ea840 	call	10ea84 <__sprint_r>
  107ca8:	103c9b1e 	bne	r2,zero,106f18 <black_to_red_frame+0xfe106f18>
  107cac:	dd812017 	ldw	r22,1152(sp)
  107cb0:	dc811f17 	ldw	r18,1148(sp)
  107cb4:	dd000404 	addi	r20,sp,16
  107cb8:	003fdf06 	br	107c38 <black_to_red_frame+0xfe107c38>
  107cbc:	d9012c17 	ldw	r4,1200(sp)
  107cc0:	980b883a 	mov	r5,r19
  107cc4:	d9811e04 	addi	r6,sp,1144
  107cc8:	010ea840 	call	10ea84 <__sprint_r>
  107ccc:	103dc326 	beq	r2,zero,1073dc <black_to_red_frame+0xfe1073dc>
  107cd0:	003c9106 	br	106f18 <black_to_red_frame+0xfe106f18>
  107cd4:	d8c10dc4 	addi	r3,sp,1079
  107cd8:	a808d0fa 	srli	r4,r21,3
  107cdc:	b00a977a 	slli	r5,r22,29
  107ce0:	b02cd0fa 	srli	r22,r22,3
  107ce4:	ad4001cc 	andi	r21,r21,7
  107ce8:	a8800c04 	addi	r2,r21,48
  107cec:	292ab03a 	or	r21,r5,r4
  107cf0:	18800005 	stb	r2,0(r3)
  107cf4:	ad88b03a 	or	r4,r21,r22
  107cf8:	1821883a 	mov	r16,r3
  107cfc:	18ffffc4 	addi	r3,r3,-1
  107d00:	203ff51e 	bne	r4,zero,107cd8 <black_to_red_frame+0xfe107cd8>
  107d04:	d9412a17 	ldw	r5,1192(sp)
  107d08:	2900004c 	andi	r4,r5,1
  107d0c:	800b883a 	mov	r5,r16
  107d10:	203f1a26 	beq	r4,zero,10797c <black_to_red_frame+0xfe10797c>
  107d14:	10803fcc 	andi	r2,r2,255
  107d18:	1080201c 	xori	r2,r2,128
  107d1c:	10bfe004 	addi	r2,r2,-128
  107d20:	01000c04 	movi	r4,48
  107d24:	113f1526 	beq	r2,r4,10797c <black_to_red_frame+0xfe10797c>
  107d28:	1821883a 	mov	r16,r3
  107d2c:	d8c12917 	ldw	r3,1188(sp)
  107d30:	293fffc5 	stb	r4,-1(r5)
  107d34:	1c07c83a 	sub	r3,r3,r16
  107d38:	d8c12e15 	stw	r3,1208(sp)
  107d3c:	003cbe06 	br	107038 <black_to_red_frame+0xfe107038>
  107d40:	d9012c17 	ldw	r4,1200(sp)
  107d44:	980b883a 	mov	r5,r19
  107d48:	d9811e04 	addi	r6,sp,1144
  107d4c:	010ea840 	call	10ea84 <__sprint_r>
  107d50:	103c711e 	bne	r2,zero,106f18 <black_to_red_frame+0xfe106f18>
  107d54:	d8c12017 	ldw	r3,1152(sp)
  107d58:	da000404 	addi	r8,sp,16
  107d5c:	003d5306 	br	1072ac <black_to_red_frame+0xfe1072ac>
  107d60:	d9012c17 	ldw	r4,1200(sp)
  107d64:	980b883a 	mov	r5,r19
  107d68:	d9811e04 	addi	r6,sp,1144
  107d6c:	010ea840 	call	10ea84 <__sprint_r>
  107d70:	103c691e 	bne	r2,zero,106f18 <black_to_red_frame+0xfe106f18>
  107d74:	d8c12017 	ldw	r3,1152(sp)
  107d78:	da000404 	addi	r8,sp,16
  107d7c:	003d0a06 	br	1071a8 <black_to_red_frame+0xfe1071a8>
  107d80:	d9012c17 	ldw	r4,1200(sp)
  107d84:	980b883a 	mov	r5,r19
  107d88:	d9811e04 	addi	r6,sp,1144
  107d8c:	010ea840 	call	10ea84 <__sprint_r>
  107d90:	103c611e 	bne	r2,zero,106f18 <black_to_red_frame+0xfe106f18>
  107d94:	d8c12017 	ldw	r3,1152(sp)
  107d98:	da000404 	addi	r8,sp,16
  107d9c:	003d1006 	br	1071e0 <black_to_red_frame+0xfe1071e0>
  107da0:	b000021e 	bne	r22,zero,107dac <___vfprintf_internal_r+0x1304>
  107da4:	00800244 	movi	r2,9
  107da8:	15401c2e 	bgeu	r2,r21,107e1c <___vfprintf_internal_r+0x1374>
  107dac:	dc412b15 	stw	r17,1196(sp)
  107db0:	d8810dc4 	addi	r2,sp,1079
  107db4:	b023883a 	mov	r17,r22
  107db8:	402d883a 	mov	r22,r8
  107dbc:	a809883a 	mov	r4,r21
  107dc0:	880b883a 	mov	r5,r17
  107dc4:	01800284 	movi	r6,10
  107dc8:	000f883a 	mov	r7,zero
  107dcc:	1021883a 	mov	r16,r2
  107dd0:	0110f7c0 	call	110f7c <__umoddi3>
  107dd4:	10800c04 	addi	r2,r2,48
  107dd8:	a809883a 	mov	r4,r21
  107ddc:	880b883a 	mov	r5,r17
  107de0:	80800005 	stb	r2,0(r16)
  107de4:	01800284 	movi	r6,10
  107de8:	000f883a 	mov	r7,zero
  107dec:	01109280 	call	110928 <__udivdi3>
  107df0:	1823883a 	mov	r17,r3
  107df4:	10c6b03a 	or	r3,r2,r3
  107df8:	102b883a 	mov	r21,r2
  107dfc:	80bfffc4 	addi	r2,r16,-1
  107e00:	183fee1e 	bne	r3,zero,107dbc <black_to_red_frame+0xfe107dbc>
  107e04:	d8c12917 	ldw	r3,1188(sp)
  107e08:	b011883a 	mov	r8,r22
  107e0c:	dc412b17 	ldw	r17,1196(sp)
  107e10:	1c07c83a 	sub	r3,r3,r16
  107e14:	d8c12e15 	stw	r3,1208(sp)
  107e18:	003c8706 	br	107038 <black_to_red_frame+0xfe107038>
  107e1c:	d9013d17 	ldw	r4,1268(sp)
  107e20:	ad400c04 	addi	r21,r21,48
  107e24:	dd410dc5 	stb	r21,1079(sp)
  107e28:	d9012e15 	stw	r4,1208(sp)
  107e2c:	dc010dc4 	addi	r16,sp,1079
  107e30:	003c8106 	br	107038 <black_to_red_frame+0xfe107038>
  107e34:	d8012e15 	stw	zero,1208(sp)
  107e38:	dc010e04 	addi	r16,sp,1080
  107e3c:	003c7e06 	br	107038 <black_to_red_frame+0xfe107038>
  107e40:	d8812617 	ldw	r2,1176(sp)
  107e44:	0081940e 	bge	zero,r2,108498 <___vfprintf_internal_r+0x19f0>
  107e48:	d9413517 	ldw	r5,1236(sp)
  107e4c:	d8813317 	ldw	r2,1228(sp)
  107e50:	8165883a 	add	r18,r16,r5
  107e54:	9429c83a 	sub	r20,r18,r16
  107e58:	1500010e 	bge	r2,r20,107e60 <___vfprintf_internal_r+0x13b8>
  107e5c:	1029883a 	mov	r20,r2
  107e60:	05000a0e 	bge	zero,r20,107e8c <___vfprintf_internal_r+0x13e4>
  107e64:	d8811f17 	ldw	r2,1148(sp)
  107e68:	1d07883a 	add	r3,r3,r20
  107e6c:	44000015 	stw	r16,0(r8)
  107e70:	10800044 	addi	r2,r2,1
  107e74:	45000115 	stw	r20,4(r8)
  107e78:	d8c12015 	stw	r3,1152(sp)
  107e7c:	d8811f15 	stw	r2,1148(sp)
  107e80:	010001c4 	movi	r4,7
  107e84:	20822b16 	blt	r4,r2,108734 <___vfprintf_internal_r+0x1c8c>
  107e88:	42000204 	addi	r8,r8,8
  107e8c:	a0022716 	blt	r20,zero,10872c <___vfprintf_internal_r+0x1c84>
  107e90:	d9013317 	ldw	r4,1228(sp)
  107e94:	2529c83a 	sub	r20,r4,r20
  107e98:	0500530e 	bge	zero,r20,107fe8 <___vfprintf_internal_r+0x1540>
  107e9c:	05800404 	movi	r22,16
  107ea0:	d8811f17 	ldw	r2,1148(sp)
  107ea4:	05400474 	movhi	r21,17
  107ea8:	ad5a4284 	addi	r21,r21,26890
  107eac:	b501680e 	bge	r22,r20,108450 <___vfprintf_internal_r+0x19a8>
  107eb0:	8809883a 	mov	r4,r17
  107eb4:	dc012e15 	stw	r16,1208(sp)
  107eb8:	a023883a 	mov	r17,r20
  107ebc:	070001c4 	movi	fp,7
  107ec0:	dc012c17 	ldw	r16,1200(sp)
  107ec4:	2029883a 	mov	r20,r4
  107ec8:	00000306 	br	107ed8 <___vfprintf_internal_r+0x1430>
  107ecc:	42000204 	addi	r8,r8,8
  107ed0:	8c7ffc04 	addi	r17,r17,-16
  107ed4:	b4415a0e 	bge	r22,r17,108440 <___vfprintf_internal_r+0x1998>
  107ed8:	18c00404 	addi	r3,r3,16
  107edc:	10800044 	addi	r2,r2,1
  107ee0:	45c00015 	stw	r23,0(r8)
  107ee4:	45800115 	stw	r22,4(r8)
  107ee8:	d8c12015 	stw	r3,1152(sp)
  107eec:	d8811f15 	stw	r2,1148(sp)
  107ef0:	e0bff60e 	bge	fp,r2,107ecc <black_to_red_frame+0xfe107ecc>
  107ef4:	8009883a 	mov	r4,r16
  107ef8:	980b883a 	mov	r5,r19
  107efc:	d9811e04 	addi	r6,sp,1144
  107f00:	010ea840 	call	10ea84 <__sprint_r>
  107f04:	103c041e 	bne	r2,zero,106f18 <black_to_red_frame+0xfe106f18>
  107f08:	d8c12017 	ldw	r3,1152(sp)
  107f0c:	d8811f17 	ldw	r2,1148(sp)
  107f10:	da000404 	addi	r8,sp,16
  107f14:	003fee06 	br	107ed0 <black_to_red_frame+0xfe107ed0>
  107f18:	d9012c17 	ldw	r4,1200(sp)
  107f1c:	980b883a 	mov	r5,r19
  107f20:	d9811e04 	addi	r6,sp,1144
  107f24:	010ea840 	call	10ea84 <__sprint_r>
  107f28:	103bfb1e 	bne	r2,zero,106f18 <black_to_red_frame+0xfe106f18>
  107f2c:	d8c12017 	ldw	r3,1152(sp)
  107f30:	d8812787 	ldb	r2,1182(sp)
  107f34:	da000404 	addi	r8,sp,16
  107f38:	003c8e06 	br	107174 <black_to_red_frame+0xfe107174>
  107f3c:	d9413517 	ldw	r5,1236(sp)
  107f40:	2c3fffc4 	addi	r16,r5,-1
  107f44:	043f3c0e 	bge	zero,r16,107c38 <black_to_red_frame+0xfe107c38>
  107f48:	07000404 	movi	fp,16
  107f4c:	05400474 	movhi	r21,17
  107f50:	ad5a4284 	addi	r21,r21,26890
  107f54:	e4007c0e 	bge	fp,r16,108148 <___vfprintf_internal_r+0x16a0>
  107f58:	dc412e15 	stw	r17,1208(sp)
  107f5c:	00c001c4 	movi	r3,7
  107f60:	8023883a 	mov	r17,r16
  107f64:	dc012c17 	ldw	r16,1200(sp)
  107f68:	00000306 	br	107f78 <___vfprintf_internal_r+0x14d0>
  107f6c:	a5000204 	addi	r20,r20,8
  107f70:	8c7ffc04 	addi	r17,r17,-16
  107f74:	e440720e 	bge	fp,r17,108140 <___vfprintf_internal_r+0x1698>
  107f78:	b5800404 	addi	r22,r22,16
  107f7c:	94800044 	addi	r18,r18,1
  107f80:	a5c00015 	stw	r23,0(r20)
  107f84:	a7000115 	stw	fp,4(r20)
  107f88:	dd812015 	stw	r22,1152(sp)
  107f8c:	dc811f15 	stw	r18,1148(sp)
  107f90:	1cbff60e 	bge	r3,r18,107f6c <black_to_red_frame+0xfe107f6c>
  107f94:	8009883a 	mov	r4,r16
  107f98:	980b883a 	mov	r5,r19
  107f9c:	d9811e04 	addi	r6,sp,1144
  107fa0:	d8c13e15 	stw	r3,1272(sp)
  107fa4:	010ea840 	call	10ea84 <__sprint_r>
  107fa8:	d8c13e17 	ldw	r3,1272(sp)
  107fac:	103bda1e 	bne	r2,zero,106f18 <black_to_red_frame+0xfe106f18>
  107fb0:	dd812017 	ldw	r22,1152(sp)
  107fb4:	dc811f17 	ldw	r18,1148(sp)
  107fb8:	dd000404 	addi	r20,sp,16
  107fbc:	003fec06 	br	107f70 <black_to_red_frame+0xfe107f70>
  107fc0:	00c00084 	movi	r3,2
  107fc4:	ad84b03a 	or	r2,r21,r22
  107fc8:	003d5c06 	br	10753c <black_to_red_frame+0xfe10753c>
  107fcc:	d9012c17 	ldw	r4,1200(sp)
  107fd0:	980b883a 	mov	r5,r19
  107fd4:	d9811e04 	addi	r6,sp,1144
  107fd8:	010ea840 	call	10ea84 <__sprint_r>
  107fdc:	103bce1e 	bne	r2,zero,106f18 <black_to_red_frame+0xfe106f18>
  107fe0:	d8c12017 	ldw	r3,1152(sp)
  107fe4:	da000404 	addi	r8,sp,16
  107fe8:	d9413317 	ldw	r5,1228(sp)
  107fec:	d8812617 	ldw	r2,1176(sp)
  107ff0:	d9013517 	ldw	r4,1236(sp)
  107ff4:	8161883a 	add	r16,r16,r5
  107ff8:	11000316 	blt	r2,r4,108008 <___vfprintf_internal_r+0x1560>
  107ffc:	d9412a17 	ldw	r5,1192(sp)
  108000:	2900004c 	andi	r4,r5,1
  108004:	20000d26 	beq	r4,zero,10803c <___vfprintf_internal_r+0x1594>
  108008:	d9013817 	ldw	r4,1248(sp)
  10800c:	d9413417 	ldw	r5,1232(sp)
  108010:	1907883a 	add	r3,r3,r4
  108014:	d9011f17 	ldw	r4,1148(sp)
  108018:	41400015 	stw	r5,0(r8)
  10801c:	d9413817 	ldw	r5,1248(sp)
  108020:	21000044 	addi	r4,r4,1
  108024:	d8c12015 	stw	r3,1152(sp)
  108028:	41400115 	stw	r5,4(r8)
  10802c:	d9011f15 	stw	r4,1148(sp)
  108030:	014001c4 	movi	r5,7
  108034:	2901c716 	blt	r5,r4,108754 <___vfprintf_internal_r+0x1cac>
  108038:	42000204 	addi	r8,r8,8
  10803c:	d9013517 	ldw	r4,1236(sp)
  108040:	9425c83a 	sub	r18,r18,r16
  108044:	2085c83a 	sub	r2,r4,r2
  108048:	1029883a 	mov	r20,r2
  10804c:	9080010e 	bge	r18,r2,108054 <___vfprintf_internal_r+0x15ac>
  108050:	9029883a 	mov	r20,r18
  108054:	05000a0e 	bge	zero,r20,108080 <___vfprintf_internal_r+0x15d8>
  108058:	d9011f17 	ldw	r4,1148(sp)
  10805c:	1d07883a 	add	r3,r3,r20
  108060:	44000015 	stw	r16,0(r8)
  108064:	21000044 	addi	r4,r4,1
  108068:	45000115 	stw	r20,4(r8)
  10806c:	d8c12015 	stw	r3,1152(sp)
  108070:	d9011f15 	stw	r4,1148(sp)
  108074:	014001c4 	movi	r5,7
  108078:	2901dd16 	blt	r5,r4,1087f0 <___vfprintf_internal_r+0x1d48>
  10807c:	42000204 	addi	r8,r8,8
  108080:	a001d916 	blt	r20,zero,1087e8 <___vfprintf_internal_r+0x1d40>
  108084:	1521c83a 	sub	r16,r2,r20
  108088:	043c970e 	bge	zero,r16,1072e8 <black_to_red_frame+0xfe1072e8>
  10808c:	04800404 	movi	r18,16
  108090:	d8811f17 	ldw	r2,1148(sp)
  108094:	05400474 	movhi	r21,17
  108098:	ad5a4284 	addi	r21,r21,26890
  10809c:	943e140e 	bge	r18,r16,1078f0 <black_to_red_frame+0xfe1078f0>
  1080a0:	050001c4 	movi	r20,7
  1080a4:	dd812c17 	ldw	r22,1200(sp)
  1080a8:	00000306 	br	1080b8 <___vfprintf_internal_r+0x1610>
  1080ac:	42000204 	addi	r8,r8,8
  1080b0:	843ffc04 	addi	r16,r16,-16
  1080b4:	943e0e0e 	bge	r18,r16,1078f0 <black_to_red_frame+0xfe1078f0>
  1080b8:	18c00404 	addi	r3,r3,16
  1080bc:	10800044 	addi	r2,r2,1
  1080c0:	45c00015 	stw	r23,0(r8)
  1080c4:	44800115 	stw	r18,4(r8)
  1080c8:	d8c12015 	stw	r3,1152(sp)
  1080cc:	d8811f15 	stw	r2,1148(sp)
  1080d0:	a0bff60e 	bge	r20,r2,1080ac <black_to_red_frame+0xfe1080ac>
  1080d4:	b009883a 	mov	r4,r22
  1080d8:	980b883a 	mov	r5,r19
  1080dc:	d9811e04 	addi	r6,sp,1144
  1080e0:	010ea840 	call	10ea84 <__sprint_r>
  1080e4:	103b8c1e 	bne	r2,zero,106f18 <black_to_red_frame+0xfe106f18>
  1080e8:	d8c12017 	ldw	r3,1152(sp)
  1080ec:	d8811f17 	ldw	r2,1148(sp)
  1080f0:	da000404 	addi	r8,sp,16
  1080f4:	003fee06 	br	1080b0 <black_to_red_frame+0xfe1080b0>
  1080f8:	d9012c17 	ldw	r4,1200(sp)
  1080fc:	980b883a 	mov	r5,r19
  108100:	d9811e04 	addi	r6,sp,1144
  108104:	010ea840 	call	10ea84 <__sprint_r>
  108108:	103b831e 	bne	r2,zero,106f18 <black_to_red_frame+0xfe106f18>
  10810c:	d8c12017 	ldw	r3,1152(sp)
  108110:	dc811f17 	ldw	r18,1148(sp)
  108114:	da000404 	addi	r8,sp,16
  108118:	003eaa06 	br	107bc4 <black_to_red_frame+0xfe107bc4>
  10811c:	d9012c17 	ldw	r4,1200(sp)
  108120:	980b883a 	mov	r5,r19
  108124:	d9811e04 	addi	r6,sp,1144
  108128:	010ea840 	call	10ea84 <__sprint_r>
  10812c:	103b7a1e 	bne	r2,zero,106f18 <black_to_red_frame+0xfe106f18>
  108130:	dd812017 	ldw	r22,1152(sp)
  108134:	dc811f17 	ldw	r18,1148(sp)
  108138:	dd000404 	addi	r20,sp,16
  10813c:	003eac06 	br	107bf0 <black_to_red_frame+0xfe107bf0>
  108140:	8821883a 	mov	r16,r17
  108144:	dc412e17 	ldw	r17,1208(sp)
  108148:	b42d883a 	add	r22,r22,r16
  10814c:	94800044 	addi	r18,r18,1
  108150:	a5400015 	stw	r21,0(r20)
  108154:	a4000115 	stw	r16,4(r20)
  108158:	dd812015 	stw	r22,1152(sp)
  10815c:	dc811f15 	stw	r18,1148(sp)
  108160:	008001c4 	movi	r2,7
  108164:	14beb30e 	bge	r2,r18,107c34 <black_to_red_frame+0xfe107c34>
  108168:	003ecb06 	br	107c98 <black_to_red_frame+0xfe107c98>
  10816c:	d9012c17 	ldw	r4,1200(sp)
  108170:	980b883a 	mov	r5,r19
  108174:	d9811e04 	addi	r6,sp,1144
  108178:	010ea840 	call	10ea84 <__sprint_r>
  10817c:	103b661e 	bne	r2,zero,106f18 <black_to_red_frame+0xfe106f18>
  108180:	d8c12017 	ldw	r3,1152(sp)
  108184:	da000404 	addi	r8,sp,16
  108188:	003c1806 	br	1071ec <black_to_red_frame+0xfe1071ec>
  10818c:	056bc83a 	sub	r21,zero,r21
  108190:	a804c03a 	cmpne	r2,r21,zero
  108194:	05adc83a 	sub	r22,zero,r22
  108198:	07000b44 	movi	fp,45
  10819c:	b0adc83a 	sub	r22,r22,r2
  1081a0:	df012785 	stb	fp,1182(sp)
  1081a4:	00c00044 	movi	r3,1
  1081a8:	ad84b03a 	or	r2,r21,r22
  1081ac:	003b9106 	br	106ff4 <black_to_red_frame+0xfe106ff4>
  1081b0:	da013f15 	stw	r8,1276(sp)
  1081b4:	010d3b00 	call	10d3b0 <__fpclassifyd>
  1081b8:	da013f17 	ldw	r8,1276(sp)
  1081bc:	1000f226 	beq	r2,zero,108588 <___vfprintf_internal_r+0x1ae0>
  1081c0:	05bff7c4 	movi	r22,-33
  1081c4:	00bfffc4 	movi	r2,-1
  1081c8:	95ac703a 	and	r22,r18,r22
  1081cc:	a0820b26 	beq	r20,r2,1089fc <___vfprintf_internal_r+0x1f54>
  1081d0:	008011c4 	movi	r2,71
  1081d4:	b081fc26 	beq	r22,r2,1089c8 <___vfprintf_internal_r+0x1f20>
  1081d8:	d8c12a17 	ldw	r3,1192(sp)
  1081dc:	d9013917 	ldw	r4,1252(sp)
  1081e0:	18c04014 	ori	r3,r3,256
  1081e4:	d8c12d15 	stw	r3,1204(sp)
  1081e8:	20020616 	blt	r4,zero,108a04 <___vfprintf_internal_r+0x1f5c>
  1081ec:	dd413917 	ldw	r21,1252(sp)
  1081f0:	d8012b05 	stb	zero,1196(sp)
  1081f4:	00801984 	movi	r2,102
  1081f8:	9081a526 	beq	r18,r2,108890 <___vfprintf_internal_r+0x1de8>
  1081fc:	00801184 	movi	r2,70
  108200:	9081a326 	beq	r18,r2,108890 <___vfprintf_internal_r+0x1de8>
  108204:	00801144 	movi	r2,69
  108208:	b0820226 	beq	r22,r2,108a14 <___vfprintf_internal_r+0x1f6c>
  10820c:	a039883a 	mov	fp,r20
  108210:	d8812604 	addi	r2,sp,1176
  108214:	d8800115 	stw	r2,4(sp)
  108218:	d9012c17 	ldw	r4,1200(sp)
  10821c:	d8812504 	addi	r2,sp,1172
  108220:	d9413717 	ldw	r5,1244(sp)
  108224:	d8800215 	stw	r2,8(sp)
  108228:	d8812104 	addi	r2,sp,1156
  10822c:	df000015 	stw	fp,0(sp)
  108230:	d8800315 	stw	r2,12(sp)
  108234:	a80d883a 	mov	r6,r21
  108238:	01c00084 	movi	r7,2
  10823c:	da013f15 	stw	r8,1276(sp)
  108240:	0108f800 	call	108f80 <_dtoa_r>
  108244:	1021883a 	mov	r16,r2
  108248:	008019c4 	movi	r2,103
  10824c:	da013f17 	ldw	r8,1276(sp)
  108250:	90800226 	beq	r18,r2,10825c <___vfprintf_internal_r+0x17b4>
  108254:	008011c4 	movi	r2,71
  108258:	9080031e 	bne	r18,r2,108268 <___vfprintf_internal_r+0x17c0>
  10825c:	d9012a17 	ldw	r4,1192(sp)
  108260:	2080004c 	andi	r2,r4,1
  108264:	1001fe26 	beq	r2,zero,108a60 <___vfprintf_internal_r+0x1fb8>
  108268:	00801184 	movi	r2,70
  10826c:	8713883a 	add	r9,r16,fp
  108270:	b0819f26 	beq	r22,r2,1088f0 <___vfprintf_internal_r+0x1e48>
  108274:	d9013717 	ldw	r4,1244(sp)
  108278:	a80b883a 	mov	r5,r21
  10827c:	000d883a 	mov	r6,zero
  108280:	000f883a 	mov	r7,zero
  108284:	da013f15 	stw	r8,1276(sp)
  108288:	da413e15 	stw	r9,1272(sp)
  10828c:	01127c80 	call	1127c8 <__eqdf2>
  108290:	da013f17 	ldw	r8,1276(sp)
  108294:	da413e17 	ldw	r9,1272(sp)
  108298:	10017b26 	beq	r2,zero,108888 <___vfprintf_internal_r+0x1de0>
  10829c:	d8812117 	ldw	r2,1156(sp)
  1082a0:	1240062e 	bgeu	r2,r9,1082bc <___vfprintf_internal_r+0x1814>
  1082a4:	01000c04 	movi	r4,48
  1082a8:	10c00044 	addi	r3,r2,1
  1082ac:	d8c12115 	stw	r3,1156(sp)
  1082b0:	11000005 	stb	r4,0(r2)
  1082b4:	d8812117 	ldw	r2,1156(sp)
  1082b8:	127ffb36 	bltu	r2,r9,1082a8 <black_to_red_frame+0xfe1082a8>
  1082bc:	1405c83a 	sub	r2,r2,r16
  1082c0:	d8813515 	stw	r2,1236(sp)
  1082c4:	008011c4 	movi	r2,71
  1082c8:	b0816926 	beq	r22,r2,108870 <___vfprintf_internal_r+0x1dc8>
  1082cc:	00801944 	movi	r2,101
  1082d0:	14823f0e 	bge	r2,r18,108bd0 <___vfprintf_internal_r+0x2128>
  1082d4:	d8c12617 	ldw	r3,1176(sp)
  1082d8:	00801984 	movi	r2,102
  1082dc:	d8c13315 	stw	r3,1228(sp)
  1082e0:	9081e126 	beq	r18,r2,108a68 <___vfprintf_internal_r+0x1fc0>
  1082e4:	d8c13317 	ldw	r3,1228(sp)
  1082e8:	d9013517 	ldw	r4,1236(sp)
  1082ec:	1901cb16 	blt	r3,r4,108a1c <___vfprintf_internal_r+0x1f74>
  1082f0:	d9412a17 	ldw	r5,1192(sp)
  1082f4:	2880004c 	andi	r2,r5,1
  1082f8:	1001d11e 	bne	r2,zero,108a40 <___vfprintf_internal_r+0x1f98>
  1082fc:	1805883a 	mov	r2,r3
  108300:	18023116 	blt	r3,zero,108bc8 <___vfprintf_internal_r+0x2120>
  108304:	d8c13317 	ldw	r3,1228(sp)
  108308:	048019c4 	movi	r18,103
  10830c:	d8c12e15 	stw	r3,1208(sp)
  108310:	df012b07 	ldb	fp,1196(sp)
  108314:	e0014e1e 	bne	fp,zero,108850 <___vfprintf_internal_r+0x1da8>
  108318:	d8c12d17 	ldw	r3,1204(sp)
  10831c:	df012783 	ldbu	fp,1182(sp)
  108320:	d8812b15 	stw	r2,1196(sp)
  108324:	d8c12a15 	stw	r3,1192(sp)
  108328:	0029883a 	mov	r20,zero
  10832c:	003b4706 	br	10704c <black_to_red_frame+0xfe10704c>
  108330:	d8c12f17 	ldw	r3,1212(sp)
  108334:	d9012f17 	ldw	r4,1212(sp)
  108338:	d9412f17 	ldw	r5,1212(sp)
  10833c:	18c00017 	ldw	r3,0(r3)
  108340:	21000117 	ldw	r4,4(r4)
  108344:	29400204 	addi	r5,r5,8
  108348:	d8c13715 	stw	r3,1244(sp)
  10834c:	d9013915 	stw	r4,1252(sp)
  108350:	d9412f15 	stw	r5,1212(sp)
  108354:	003c3606 	br	107430 <black_to_red_frame+0xfe107430>
  108358:	d9412a17 	ldw	r5,1192(sp)
  10835c:	2880100c 	andi	r2,r5,64
  108360:	1000b026 	beq	r2,zero,108624 <___vfprintf_internal_r+0x1b7c>
  108364:	d8812f17 	ldw	r2,1212(sp)
  108368:	002d883a 	mov	r22,zero
  10836c:	00c00044 	movi	r3,1
  108370:	1540000b 	ldhu	r21,0(r2)
  108374:	10800104 	addi	r2,r2,4
  108378:	d8812f15 	stw	r2,1212(sp)
  10837c:	a805883a 	mov	r2,r21
  108380:	003c6e06 	br	10753c <black_to_red_frame+0xfe10753c>
  108384:	00c00084 	movi	r3,2
  108388:	003c6c06 	br	10753c <black_to_red_frame+0xfe10753c>
  10838c:	d9412a17 	ldw	r5,1192(sp)
  108390:	2880100c 	andi	r2,r5,64
  108394:	10009b26 	beq	r2,zero,108604 <___vfprintf_internal_r+0x1b5c>
  108398:	d8812f17 	ldw	r2,1212(sp)
  10839c:	002d883a 	mov	r22,zero
  1083a0:	0007883a 	mov	r3,zero
  1083a4:	1540000b 	ldhu	r21,0(r2)
  1083a8:	10800104 	addi	r2,r2,4
  1083ac:	d8812f15 	stw	r2,1212(sp)
  1083b0:	a805883a 	mov	r2,r21
  1083b4:	003c6106 	br	10753c <black_to_red_frame+0xfe10753c>
  1083b8:	8c800007 	ldb	r18,0(r17)
  1083bc:	003a1f06 	br	106c3c <black_to_red_frame+0xfe106c3c>
  1083c0:	d9412a17 	ldw	r5,1192(sp)
  1083c4:	2880100c 	andi	r2,r5,64
  1083c8:	10009e26 	beq	r2,zero,108644 <___vfprintf_internal_r+0x1b9c>
  1083cc:	d8812f17 	ldw	r2,1212(sp)
  1083d0:	002d883a 	mov	r22,zero
  1083d4:	1540000b 	ldhu	r21,0(r2)
  1083d8:	10800104 	addi	r2,r2,4
  1083dc:	d8812f15 	stw	r2,1212(sp)
  1083e0:	003c9506 	br	107638 <black_to_red_frame+0xfe107638>
  1083e4:	d9412a17 	ldw	r5,1192(sp)
  1083e8:	2880040c 	andi	r2,r5,16
  1083ec:	10007e1e 	bne	r2,zero,1085e8 <___vfprintf_internal_r+0x1b40>
  1083f0:	d9412a17 	ldw	r5,1192(sp)
  1083f4:	2880100c 	andi	r2,r5,64
  1083f8:	10010826 	beq	r2,zero,10881c <___vfprintf_internal_r+0x1d74>
  1083fc:	d8c12f17 	ldw	r3,1212(sp)
  108400:	d9013117 	ldw	r4,1220(sp)
  108404:	18800017 	ldw	r2,0(r3)
  108408:	18c00104 	addi	r3,r3,4
  10840c:	d8c12f15 	stw	r3,1212(sp)
  108410:	1100000d 	sth	r4,0(r2)
  108414:	0039e206 	br	106ba0 <black_to_red_frame+0xfe106ba0>
  108418:	d8c12a17 	ldw	r3,1192(sp)
  10841c:	1880100c 	andi	r2,r3,64
  108420:	10006a26 	beq	r2,zero,1085cc <___vfprintf_internal_r+0x1b24>
  108424:	d9012f17 	ldw	r4,1212(sp)
  108428:	2540000f 	ldh	r21,0(r4)
  10842c:	21000104 	addi	r4,r4,4
  108430:	d9012f15 	stw	r4,1212(sp)
  108434:	a82dd7fa 	srai	r22,r21,31
  108438:	b005883a 	mov	r2,r22
  10843c:	003ae906 	br	106fe4 <black_to_red_frame+0xfe106fe4>
  108440:	dc012e17 	ldw	r16,1208(sp)
  108444:	a009883a 	mov	r4,r20
  108448:	8829883a 	mov	r20,r17
  10844c:	2023883a 	mov	r17,r4
  108450:	1d07883a 	add	r3,r3,r20
  108454:	10800044 	addi	r2,r2,1
  108458:	45400015 	stw	r21,0(r8)
  10845c:	45000115 	stw	r20,4(r8)
  108460:	d8c12015 	stw	r3,1152(sp)
  108464:	d8811f15 	stw	r2,1148(sp)
  108468:	010001c4 	movi	r4,7
  10846c:	20bed716 	blt	r4,r2,107fcc <black_to_red_frame+0xfe107fcc>
  108470:	42000204 	addi	r8,r8,8
  108474:	003edc06 	br	107fe8 <black_to_red_frame+0xfe107fe8>
  108478:	d9012c17 	ldw	r4,1200(sp)
  10847c:	980b883a 	mov	r5,r19
  108480:	d9811e04 	addi	r6,sp,1144
  108484:	010ea840 	call	10ea84 <__sprint_r>
  108488:	103aa31e 	bne	r2,zero,106f18 <black_to_red_frame+0xfe106f18>
  10848c:	d8c12017 	ldw	r3,1152(sp)
  108490:	da000404 	addi	r8,sp,16
  108494:	003d5606 	br	1079f0 <black_to_red_frame+0xfe1079f0>
  108498:	d9011f17 	ldw	r4,1148(sp)
  10849c:	01400474 	movhi	r5,17
  1084a0:	295a3a04 	addi	r5,r5,26856
  1084a4:	18c00044 	addi	r3,r3,1
  1084a8:	21000044 	addi	r4,r4,1
  1084ac:	41400015 	stw	r5,0(r8)
  1084b0:	01400044 	movi	r5,1
  1084b4:	41400115 	stw	r5,4(r8)
  1084b8:	d8c12015 	stw	r3,1152(sp)
  1084bc:	d9011f15 	stw	r4,1148(sp)
  1084c0:	014001c4 	movi	r5,7
  1084c4:	29006a16 	blt	r5,r4,108670 <___vfprintf_internal_r+0x1bc8>
  1084c8:	42000204 	addi	r8,r8,8
  1084cc:	1025883a 	mov	r18,r2
  1084d0:	9000051e 	bne	r18,zero,1084e8 <___vfprintf_internal_r+0x1a40>
  1084d4:	d8813517 	ldw	r2,1236(sp)
  1084d8:	1000031e 	bne	r2,zero,1084e8 <___vfprintf_internal_r+0x1a40>
  1084dc:	d9012a17 	ldw	r4,1192(sp)
  1084e0:	2080004c 	andi	r2,r4,1
  1084e4:	103b8026 	beq	r2,zero,1072e8 <black_to_red_frame+0xfe1072e8>
  1084e8:	d8813417 	ldw	r2,1232(sp)
  1084ec:	d9413817 	ldw	r5,1248(sp)
  1084f0:	010001c4 	movi	r4,7
  1084f4:	40800015 	stw	r2,0(r8)
  1084f8:	d8811f17 	ldw	r2,1148(sp)
  1084fc:	1947883a 	add	r3,r3,r5
  108500:	41400115 	stw	r5,4(r8)
  108504:	10800044 	addi	r2,r2,1
  108508:	d8c12015 	stw	r3,1152(sp)
  10850c:	d8811f15 	stw	r2,1148(sp)
  108510:	20813016 	blt	r4,r2,1089d4 <___vfprintf_internal_r+0x1f2c>
  108514:	42000204 	addi	r8,r8,8
  108518:	04a5c83a 	sub	r18,zero,r18
  10851c:	04807a0e 	bge	zero,r18,108708 <___vfprintf_internal_r+0x1c60>
  108520:	05000404 	movi	r20,16
  108524:	05400474 	movhi	r21,17
  108528:	ad5a4284 	addi	r21,r21,26890
  10852c:	a480920e 	bge	r20,r18,108778 <___vfprintf_internal_r+0x1cd0>
  108530:	058001c4 	movi	r22,7
  108534:	df012c17 	ldw	fp,1200(sp)
  108538:	00000306 	br	108548 <___vfprintf_internal_r+0x1aa0>
  10853c:	42000204 	addi	r8,r8,8
  108540:	94bffc04 	addi	r18,r18,-16
  108544:	a4808c0e 	bge	r20,r18,108778 <___vfprintf_internal_r+0x1cd0>
  108548:	18c00404 	addi	r3,r3,16
  10854c:	10800044 	addi	r2,r2,1
  108550:	45c00015 	stw	r23,0(r8)
  108554:	45000115 	stw	r20,4(r8)
  108558:	d8c12015 	stw	r3,1152(sp)
  10855c:	d8811f15 	stw	r2,1148(sp)
  108560:	b0bff60e 	bge	r22,r2,10853c <black_to_red_frame+0xfe10853c>
  108564:	e009883a 	mov	r4,fp
  108568:	980b883a 	mov	r5,r19
  10856c:	d9811e04 	addi	r6,sp,1144
  108570:	010ea840 	call	10ea84 <__sprint_r>
  108574:	103a681e 	bne	r2,zero,106f18 <black_to_red_frame+0xfe106f18>
  108578:	d8c12017 	ldw	r3,1152(sp)
  10857c:	d8811f17 	ldw	r2,1148(sp)
  108580:	da000404 	addi	r8,sp,16
  108584:	003fee06 	br	108540 <black_to_red_frame+0xfe108540>
  108588:	008011c4 	movi	r2,71
  10858c:	1480ad16 	blt	r2,r18,108844 <___vfprintf_internal_r+0x1d9c>
  108590:	04000474 	movhi	r16,17
  108594:	841a2c04 	addi	r16,r16,26800
  108598:	d9012a17 	ldw	r4,1192(sp)
  10859c:	00bfdfc4 	movi	r2,-129
  1085a0:	00c000c4 	movi	r3,3
  1085a4:	2088703a 	and	r4,r4,r2
  1085a8:	d8c12b15 	stw	r3,1196(sp)
  1085ac:	d9012a15 	stw	r4,1192(sp)
  1085b0:	df012783 	ldbu	fp,1182(sp)
  1085b4:	d8c12e15 	stw	r3,1208(sp)
  1085b8:	0029883a 	mov	r20,zero
  1085bc:	d8013315 	stw	zero,1228(sp)
  1085c0:	003aa206 	br	10704c <black_to_red_frame+0xfe10704c>
  1085c4:	dd012e15 	stw	r20,1208(sp)
  1085c8:	003c8206 	br	1077d4 <black_to_red_frame+0xfe1077d4>
  1085cc:	d9412f17 	ldw	r5,1212(sp)
  1085d0:	2d400017 	ldw	r21,0(r5)
  1085d4:	29400104 	addi	r5,r5,4
  1085d8:	d9412f15 	stw	r5,1212(sp)
  1085dc:	a82dd7fa 	srai	r22,r21,31
  1085e0:	b005883a 	mov	r2,r22
  1085e4:	003a7f06 	br	106fe4 <black_to_red_frame+0xfe106fe4>
  1085e8:	d8c12f17 	ldw	r3,1212(sp)
  1085ec:	d9013117 	ldw	r4,1220(sp)
  1085f0:	18800017 	ldw	r2,0(r3)
  1085f4:	18c00104 	addi	r3,r3,4
  1085f8:	d8c12f15 	stw	r3,1212(sp)
  1085fc:	11000015 	stw	r4,0(r2)
  108600:	00396706 	br	106ba0 <black_to_red_frame+0xfe106ba0>
  108604:	d8c12f17 	ldw	r3,1212(sp)
  108608:	002d883a 	mov	r22,zero
  10860c:	1d400017 	ldw	r21,0(r3)
  108610:	18c00104 	addi	r3,r3,4
  108614:	d8c12f15 	stw	r3,1212(sp)
  108618:	a805883a 	mov	r2,r21
  10861c:	0007883a 	mov	r3,zero
  108620:	003bc606 	br	10753c <black_to_red_frame+0xfe10753c>
  108624:	d8c12f17 	ldw	r3,1212(sp)
  108628:	002d883a 	mov	r22,zero
  10862c:	1d400017 	ldw	r21,0(r3)
  108630:	18c00104 	addi	r3,r3,4
  108634:	d8c12f15 	stw	r3,1212(sp)
  108638:	a805883a 	mov	r2,r21
  10863c:	00c00044 	movi	r3,1
  108640:	003bbe06 	br	10753c <black_to_red_frame+0xfe10753c>
  108644:	d8c12f17 	ldw	r3,1212(sp)
  108648:	002d883a 	mov	r22,zero
  10864c:	1d400017 	ldw	r21,0(r3)
  108650:	18c00104 	addi	r3,r3,4
  108654:	d8c12f15 	stw	r3,1212(sp)
  108658:	003bf706 	br	107638 <black_to_red_frame+0xfe107638>
  10865c:	04000474 	movhi	r16,17
  108660:	841a2a04 	addi	r16,r16,26792
  108664:	003b8506 	br	10747c <black_to_red_frame+0xfe10747c>
  108668:	45000204 	addi	r20,r8,8
  10866c:	003d7206 	br	107c38 <black_to_red_frame+0xfe107c38>
  108670:	d9012c17 	ldw	r4,1200(sp)
  108674:	980b883a 	mov	r5,r19
  108678:	d9811e04 	addi	r6,sp,1144
  10867c:	010ea840 	call	10ea84 <__sprint_r>
  108680:	103a251e 	bne	r2,zero,106f18 <black_to_red_frame+0xfe106f18>
  108684:	dc812617 	ldw	r18,1176(sp)
  108688:	d8c12017 	ldw	r3,1152(sp)
  10868c:	da000404 	addi	r8,sp,16
  108690:	003f8f06 	br	1084d0 <black_to_red_frame+0xfe1084d0>
  108694:	d9012a17 	ldw	r4,1192(sp)
  108698:	8c400044 	addi	r17,r17,1
  10869c:	14800047 	ldb	r18,1(r2)
  1086a0:	21000814 	ori	r4,r4,32
  1086a4:	d9012a15 	stw	r4,1192(sp)
  1086a8:	00396406 	br	106c3c <black_to_red_frame+0xfe106c3c>
  1086ac:	d9012c17 	ldw	r4,1200(sp)
  1086b0:	980b883a 	mov	r5,r19
  1086b4:	d9811e04 	addi	r6,sp,1144
  1086b8:	010ea840 	call	10ea84 <__sprint_r>
  1086bc:	103a161e 	bne	r2,zero,106f18 <black_to_red_frame+0xfe106f18>
  1086c0:	d8c12017 	ldw	r3,1152(sp)
  1086c4:	da000404 	addi	r8,sp,16
  1086c8:	003cdc06 	br	107a3c <black_to_red_frame+0xfe107a3c>
  1086cc:	df013f15 	stw	fp,1276(sp)
  1086d0:	01049b00 	call	1049b0 <strlen>
  1086d4:	d8812e15 	stw	r2,1208(sp)
  1086d8:	da013f17 	ldw	r8,1276(sp)
  1086dc:	103c3f0e 	bge	r2,zero,1077dc <black_to_red_frame+0xfe1077dc>
  1086e0:	0005883a 	mov	r2,zero
  1086e4:	003c3d06 	br	1077dc <black_to_red_frame+0xfe1077dc>
  1086e8:	d9012c17 	ldw	r4,1200(sp)
  1086ec:	980b883a 	mov	r5,r19
  1086f0:	d9811e04 	addi	r6,sp,1144
  1086f4:	010ea840 	call	10ea84 <__sprint_r>
  1086f8:	103a071e 	bne	r2,zero,106f18 <black_to_red_frame+0xfe106f18>
  1086fc:	d8c12017 	ldw	r3,1152(sp)
  108700:	d8811f17 	ldw	r2,1148(sp)
  108704:	da000404 	addi	r8,sp,16
  108708:	d9013517 	ldw	r4,1236(sp)
  10870c:	10800044 	addi	r2,r2,1
  108710:	44000015 	stw	r16,0(r8)
  108714:	20c7883a 	add	r3,r4,r3
  108718:	003aed06 	br	1072d0 <black_to_red_frame+0xfe1072d0>
  10871c:	01000474 	movhi	r4,17
  108720:	211a4684 	addi	r4,r4,26906
  108724:	d9013615 	stw	r4,1240(sp)
  108728:	003a8706 	br	107148 <black_to_red_frame+0xfe107148>
  10872c:	0029883a 	mov	r20,zero
  108730:	003dd706 	br	107e90 <black_to_red_frame+0xfe107e90>
  108734:	d9012c17 	ldw	r4,1200(sp)
  108738:	980b883a 	mov	r5,r19
  10873c:	d9811e04 	addi	r6,sp,1144
  108740:	010ea840 	call	10ea84 <__sprint_r>
  108744:	1039f41e 	bne	r2,zero,106f18 <black_to_red_frame+0xfe106f18>
  108748:	d8c12017 	ldw	r3,1152(sp)
  10874c:	da000404 	addi	r8,sp,16
  108750:	003dce06 	br	107e8c <black_to_red_frame+0xfe107e8c>
  108754:	d9012c17 	ldw	r4,1200(sp)
  108758:	980b883a 	mov	r5,r19
  10875c:	d9811e04 	addi	r6,sp,1144
  108760:	010ea840 	call	10ea84 <__sprint_r>
  108764:	1039ec1e 	bne	r2,zero,106f18 <black_to_red_frame+0xfe106f18>
  108768:	d8812617 	ldw	r2,1176(sp)
  10876c:	d8c12017 	ldw	r3,1152(sp)
  108770:	da000404 	addi	r8,sp,16
  108774:	003e3106 	br	10803c <black_to_red_frame+0xfe10803c>
  108778:	1c87883a 	add	r3,r3,r18
  10877c:	10800044 	addi	r2,r2,1
  108780:	45400015 	stw	r21,0(r8)
  108784:	44800115 	stw	r18,4(r8)
  108788:	d8c12015 	stw	r3,1152(sp)
  10878c:	d8811f15 	stw	r2,1148(sp)
  108790:	010001c4 	movi	r4,7
  108794:	20bfd416 	blt	r4,r2,1086e8 <black_to_red_frame+0xfe1086e8>
  108798:	42000204 	addi	r8,r8,8
  10879c:	003fda06 	br	108708 <black_to_red_frame+0xfe108708>
  1087a0:	01400474 	movhi	r5,17
  1087a4:	295a4684 	addi	r5,r5,26906
  1087a8:	d9413615 	stw	r5,1240(sp)
  1087ac:	003af406 	br	107380 <black_to_red_frame+0xfe107380>
  1087b0:	00800184 	movi	r2,6
  1087b4:	1500012e 	bgeu	r2,r20,1087bc <___vfprintf_internal_r+0x1d14>
  1087b8:	1029883a 	mov	r20,r2
  1087bc:	dd012e15 	stw	r20,1208(sp)
  1087c0:	a005883a 	mov	r2,r20
  1087c4:	a000d216 	blt	r20,zero,108b10 <___vfprintf_internal_r+0x2068>
  1087c8:	d8812b15 	stw	r2,1196(sp)
  1087cc:	dd412f15 	stw	r21,1212(sp)
  1087d0:	0029883a 	mov	r20,zero
  1087d4:	d8013315 	stw	zero,1228(sp)
  1087d8:	04000474 	movhi	r16,17
  1087dc:	841a3804 	addi	r16,r16,26848
  1087e0:	0005883a 	mov	r2,zero
  1087e4:	003a2006 	br	107068 <black_to_red_frame+0xfe107068>
  1087e8:	0029883a 	mov	r20,zero
  1087ec:	003e2506 	br	108084 <black_to_red_frame+0xfe108084>
  1087f0:	d9012c17 	ldw	r4,1200(sp)
  1087f4:	980b883a 	mov	r5,r19
  1087f8:	d9811e04 	addi	r6,sp,1144
  1087fc:	010ea840 	call	10ea84 <__sprint_r>
  108800:	1039c51e 	bne	r2,zero,106f18 <black_to_red_frame+0xfe106f18>
  108804:	d8812617 	ldw	r2,1176(sp)
  108808:	d9413517 	ldw	r5,1236(sp)
  10880c:	d8c12017 	ldw	r3,1152(sp)
  108810:	da000404 	addi	r8,sp,16
  108814:	2885c83a 	sub	r2,r5,r2
  108818:	003e1906 	br	108080 <black_to_red_frame+0xfe108080>
  10881c:	d9412f17 	ldw	r5,1212(sp)
  108820:	d8c13117 	ldw	r3,1220(sp)
  108824:	28800017 	ldw	r2,0(r5)
  108828:	29400104 	addi	r5,r5,4
  10882c:	d9412f15 	stw	r5,1212(sp)
  108830:	10c00015 	stw	r3,0(r2)
  108834:	0038da06 	br	106ba0 <black_to_red_frame+0xfe106ba0>
  108838:	07000b44 	movi	fp,45
  10883c:	df012785 	stb	fp,1182(sp)
  108840:	003b0a06 	br	10746c <black_to_red_frame+0xfe10746c>
  108844:	04000474 	movhi	r16,17
  108848:	841a2d04 	addi	r16,r16,26804
  10884c:	003f5206 	br	108598 <black_to_red_frame+0xfe108598>
  108850:	00c00b44 	movi	r3,45
  108854:	d8c12785 	stb	r3,1182(sp)
  108858:	d8c12d17 	ldw	r3,1204(sp)
  10885c:	d8812b15 	stw	r2,1196(sp)
  108860:	0029883a 	mov	r20,zero
  108864:	d8c12a15 	stw	r3,1192(sp)
  108868:	00800b44 	movi	r2,45
  10886c:	0039fb06 	br	10705c <black_to_red_frame+0xfe10705c>
  108870:	d8812617 	ldw	r2,1176(sp)
  108874:	00ffff44 	movi	r3,-3
  108878:	10c03216 	blt	r2,r3,108944 <___vfprintf_internal_r+0x1e9c>
  10887c:	a0803116 	blt	r20,r2,108944 <___vfprintf_internal_r+0x1e9c>
  108880:	d8813315 	stw	r2,1228(sp)
  108884:	003e9706 	br	1082e4 <black_to_red_frame+0xfe1082e4>
  108888:	4805883a 	mov	r2,r9
  10888c:	003e8b06 	br	1082bc <black_to_red_frame+0xfe1082bc>
  108890:	d8812604 	addi	r2,sp,1176
  108894:	d8800115 	stw	r2,4(sp)
  108898:	d9012c17 	ldw	r4,1200(sp)
  10889c:	d8812504 	addi	r2,sp,1172
  1088a0:	d9413717 	ldw	r5,1244(sp)
  1088a4:	d8800215 	stw	r2,8(sp)
  1088a8:	d8812104 	addi	r2,sp,1156
  1088ac:	dd000015 	stw	r20,0(sp)
  1088b0:	d8800315 	stw	r2,12(sp)
  1088b4:	a80d883a 	mov	r6,r21
  1088b8:	01c000c4 	movi	r7,3
  1088bc:	da013f15 	stw	r8,1276(sp)
  1088c0:	0108f800 	call	108f80 <_dtoa_r>
  1088c4:	1021883a 	mov	r16,r2
  1088c8:	a039883a 	mov	fp,r20
  1088cc:	da013f17 	ldw	r8,1276(sp)
  1088d0:	003e6506 	br	108268 <black_to_red_frame+0xfe108268>
  1088d4:	dd012b15 	stw	r20,1196(sp)
  1088d8:	dd012e15 	stw	r20,1208(sp)
  1088dc:	df012783 	ldbu	fp,1182(sp)
  1088e0:	dd412f15 	stw	r21,1212(sp)
  1088e4:	0029883a 	mov	r20,zero
  1088e8:	d8013315 	stw	zero,1228(sp)
  1088ec:	0039d706 	br	10704c <black_to_red_frame+0xfe10704c>
  1088f0:	81000007 	ldb	r4,0(r16)
  1088f4:	00800c04 	movi	r2,48
  1088f8:	20800326 	beq	r4,r2,108908 <___vfprintf_internal_r+0x1e60>
  1088fc:	d8c12617 	ldw	r3,1176(sp)
  108900:	48d3883a 	add	r9,r9,r3
  108904:	003e5b06 	br	108274 <black_to_red_frame+0xfe108274>
  108908:	d9013717 	ldw	r4,1244(sp)
  10890c:	a80b883a 	mov	r5,r21
  108910:	000d883a 	mov	r6,zero
  108914:	000f883a 	mov	r7,zero
  108918:	da013f15 	stw	r8,1276(sp)
  10891c:	da413e15 	stw	r9,1272(sp)
  108920:	01127c80 	call	1127c8 <__eqdf2>
  108924:	da013f17 	ldw	r8,1276(sp)
  108928:	da413e17 	ldw	r9,1272(sp)
  10892c:	103ff326 	beq	r2,zero,1088fc <black_to_red_frame+0xfe1088fc>
  108930:	00800044 	movi	r2,1
  108934:	1707c83a 	sub	r3,r2,fp
  108938:	d8c12615 	stw	r3,1176(sp)
  10893c:	48d3883a 	add	r9,r9,r3
  108940:	003e4c06 	br	108274 <black_to_red_frame+0xfe108274>
  108944:	94bfff84 	addi	r18,r18,-2
  108948:	157fffc4 	addi	r21,r2,-1
  10894c:	dd412615 	stw	r21,1176(sp)
  108950:	dc8122c5 	stb	r18,1163(sp)
  108954:	a8009016 	blt	r21,zero,108b98 <___vfprintf_internal_r+0x20f0>
  108958:	00800ac4 	movi	r2,43
  10895c:	d8812305 	stb	r2,1164(sp)
  108960:	05000244 	movi	r20,9
  108964:	a5404a16 	blt	r20,r21,108a90 <___vfprintf_internal_r+0x1fe8>
  108968:	00800c04 	movi	r2,48
  10896c:	ad400c04 	addi	r21,r21,48
  108970:	d8812345 	stb	r2,1165(sp)
  108974:	dd412385 	stb	r21,1166(sp)
  108978:	d8c123c4 	addi	r3,sp,1167
  10897c:	d88122c4 	addi	r2,sp,1163
  108980:	1885c83a 	sub	r2,r3,r2
  108984:	d8c13517 	ldw	r3,1236(sp)
  108988:	d9013517 	ldw	r4,1236(sp)
  10898c:	d8813a15 	stw	r2,1256(sp)
  108990:	1887883a 	add	r3,r3,r2
  108994:	d8c12e15 	stw	r3,1208(sp)
  108998:	00800044 	movi	r2,1
  10899c:	11007a0e 	bge	r2,r4,108b88 <___vfprintf_internal_r+0x20e0>
  1089a0:	d8c12e17 	ldw	r3,1208(sp)
  1089a4:	18c00044 	addi	r3,r3,1
  1089a8:	d8c12e15 	stw	r3,1208(sp)
  1089ac:	1805883a 	mov	r2,r3
  1089b0:	18000216 	blt	r3,zero,1089bc <___vfprintf_internal_r+0x1f14>
  1089b4:	d8013315 	stw	zero,1228(sp)
  1089b8:	003e5506 	br	108310 <black_to_red_frame+0xfe108310>
  1089bc:	0005883a 	mov	r2,zero
  1089c0:	d8013315 	stw	zero,1228(sp)
  1089c4:	003e5206 	br	108310 <black_to_red_frame+0xfe108310>
  1089c8:	a03e031e 	bne	r20,zero,1081d8 <black_to_red_frame+0xfe1081d8>
  1089cc:	8029883a 	mov	r20,r16
  1089d0:	003e0106 	br	1081d8 <black_to_red_frame+0xfe1081d8>
  1089d4:	d9012c17 	ldw	r4,1200(sp)
  1089d8:	980b883a 	mov	r5,r19
  1089dc:	d9811e04 	addi	r6,sp,1144
  1089e0:	010ea840 	call	10ea84 <__sprint_r>
  1089e4:	10394c1e 	bne	r2,zero,106f18 <black_to_red_frame+0xfe106f18>
  1089e8:	dc812617 	ldw	r18,1176(sp)
  1089ec:	d8c12017 	ldw	r3,1152(sp)
  1089f0:	d8811f17 	ldw	r2,1148(sp)
  1089f4:	da000404 	addi	r8,sp,16
  1089f8:	003ec706 	br	108518 <black_to_red_frame+0xfe108518>
  1089fc:	05000184 	movi	r20,6
  108a00:	003df506 	br	1081d8 <black_to_red_frame+0xfe1081d8>
  108a04:	00c00b44 	movi	r3,45
  108a08:	2560003c 	xorhi	r21,r4,32768
  108a0c:	d8c12b05 	stb	r3,1196(sp)
  108a10:	003df806 	br	1081f4 <black_to_red_frame+0xfe1081f4>
  108a14:	a7000044 	addi	fp,r20,1
  108a18:	003dfd06 	br	108210 <black_to_red_frame+0xfe108210>
  108a1c:	d8c13317 	ldw	r3,1228(sp)
  108a20:	00c0610e 	bge	zero,r3,108ba8 <___vfprintf_internal_r+0x2100>
  108a24:	00800044 	movi	r2,1
  108a28:	d9013517 	ldw	r4,1236(sp)
  108a2c:	1105883a 	add	r2,r2,r4
  108a30:	d8812e15 	stw	r2,1208(sp)
  108a34:	10000716 	blt	r2,zero,108a54 <___vfprintf_internal_r+0x1fac>
  108a38:	048019c4 	movi	r18,103
  108a3c:	003e3406 	br	108310 <black_to_red_frame+0xfe108310>
  108a40:	d8c13317 	ldw	r3,1228(sp)
  108a44:	18c00044 	addi	r3,r3,1
  108a48:	d8c12e15 	stw	r3,1208(sp)
  108a4c:	1805883a 	mov	r2,r3
  108a50:	183ff90e 	bge	r3,zero,108a38 <black_to_red_frame+0xfe108a38>
  108a54:	0005883a 	mov	r2,zero
  108a58:	048019c4 	movi	r18,103
  108a5c:	003e2c06 	br	108310 <black_to_red_frame+0xfe108310>
  108a60:	d8812117 	ldw	r2,1156(sp)
  108a64:	003e1506 	br	1082bc <black_to_red_frame+0xfe1082bc>
  108a68:	00c0400e 	bge	zero,r3,108b6c <___vfprintf_internal_r+0x20c4>
  108a6c:	a0002a1e 	bne	r20,zero,108b18 <___vfprintf_internal_r+0x2070>
  108a70:	d9012a17 	ldw	r4,1192(sp)
  108a74:	2080004c 	andi	r2,r4,1
  108a78:	1000271e 	bne	r2,zero,108b18 <___vfprintf_internal_r+0x2070>
  108a7c:	1805883a 	mov	r2,r3
  108a80:	18005a16 	blt	r3,zero,108bec <___vfprintf_internal_r+0x2144>
  108a84:	d8c13317 	ldw	r3,1228(sp)
  108a88:	d8c12e15 	stw	r3,1208(sp)
  108a8c:	003e2006 	br	108310 <black_to_red_frame+0xfe108310>
  108a90:	d8c12284 	addi	r3,sp,1162
  108a94:	4039883a 	mov	fp,r8
  108a98:	a809883a 	mov	r4,r21
  108a9c:	01400284 	movi	r5,10
  108aa0:	182d883a 	mov	r22,r3
  108aa4:	0103ec00 	call	103ec0 <__modsi3>
  108aa8:	10800c04 	addi	r2,r2,48
  108aac:	a809883a 	mov	r4,r21
  108ab0:	b0800005 	stb	r2,0(r22)
  108ab4:	01400284 	movi	r5,10
  108ab8:	0103e780 	call	103e78 <__divsi3>
  108abc:	102b883a 	mov	r21,r2
  108ac0:	b0ffffc4 	addi	r3,r22,-1
  108ac4:	a0bff416 	blt	r20,r2,108a98 <black_to_red_frame+0xfe108a98>
  108ac8:	11400c04 	addi	r5,r2,48
  108acc:	b17fffc5 	stb	r5,-1(r22)
  108ad0:	d88122c4 	addi	r2,sp,1163
  108ad4:	e011883a 	mov	r8,fp
  108ad8:	1880462e 	bgeu	r3,r2,108bf4 <___vfprintf_internal_r+0x214c>
  108adc:	d9012344 	addi	r4,sp,1165
  108ae0:	b007883a 	mov	r3,r22
  108ae4:	00000206 	br	108af0 <___vfprintf_internal_r+0x2048>
  108ae8:	19400003 	ldbu	r5,0(r3)
  108aec:	18c00044 	addi	r3,r3,1
  108af0:	21400005 	stb	r5,0(r4)
  108af4:	21000044 	addi	r4,r4,1
  108af8:	10fffb1e 	bne	r2,r3,108ae8 <black_to_red_frame+0xfe108ae8>
  108afc:	d8c12304 	addi	r3,sp,1164
  108b00:	1d87c83a 	sub	r3,r3,r22
  108b04:	d9412344 	addi	r5,sp,1165
  108b08:	28c7883a 	add	r3,r5,r3
  108b0c:	003f9c06 	br	108980 <black_to_red_frame+0xfe108980>
  108b10:	0005883a 	mov	r2,zero
  108b14:	003f2c06 	br	1087c8 <black_to_red_frame+0xfe1087c8>
  108b18:	d8c13317 	ldw	r3,1228(sp)
  108b1c:	a5000044 	addi	r20,r20,1
  108b20:	1d29883a 	add	r20,r3,r20
  108b24:	dd012e15 	stw	r20,1208(sp)
  108b28:	a005883a 	mov	r2,r20
  108b2c:	a03df80e 	bge	r20,zero,108310 <black_to_red_frame+0xfe108310>
  108b30:	0005883a 	mov	r2,zero
  108b34:	003df606 	br	108310 <black_to_red_frame+0xfe108310>
  108b38:	043fffc4 	movi	r16,-1
  108b3c:	0038d406 	br	106e90 <black_to_red_frame+0xfe106e90>
  108b40:	d9012f17 	ldw	r4,1212(sp)
  108b44:	8c800043 	ldbu	r18,1(r17)
  108b48:	1023883a 	mov	r17,r2
  108b4c:	20c00017 	ldw	r3,0(r4)
  108b50:	21000104 	addi	r4,r4,4
  108b54:	d9012f15 	stw	r4,1212(sp)
  108b58:	18001f16 	blt	r3,zero,108bd8 <___vfprintf_internal_r+0x2130>
  108b5c:	94803fcc 	andi	r18,r18,255
  108b60:	9480201c 	xori	r18,r18,128
  108b64:	94bfe004 	addi	r18,r18,-128
  108b68:	00383406 	br	106c3c <black_to_red_frame+0xfe106c3c>
  108b6c:	a000111e 	bne	r20,zero,108bb4 <___vfprintf_internal_r+0x210c>
  108b70:	d9012a17 	ldw	r4,1192(sp)
  108b74:	2080004c 	andi	r2,r4,1
  108b78:	10000e1e 	bne	r2,zero,108bb4 <___vfprintf_internal_r+0x210c>
  108b7c:	00800044 	movi	r2,1
  108b80:	d8812e15 	stw	r2,1208(sp)
  108b84:	003de206 	br	108310 <black_to_red_frame+0xfe108310>
  108b88:	d9412a17 	ldw	r5,1192(sp)
  108b8c:	2884703a 	and	r2,r5,r2
  108b90:	103f831e 	bne	r2,zero,1089a0 <black_to_red_frame+0xfe1089a0>
  108b94:	003f8506 	br	1089ac <black_to_red_frame+0xfe1089ac>
  108b98:	00800b44 	movi	r2,45
  108b9c:	056bc83a 	sub	r21,zero,r21
  108ba0:	d8812305 	stb	r2,1164(sp)
  108ba4:	003f6e06 	br	108960 <black_to_red_frame+0xfe108960>
  108ba8:	00800084 	movi	r2,2
  108bac:	10c5c83a 	sub	r2,r2,r3
  108bb0:	003f9d06 	br	108a28 <black_to_red_frame+0xfe108a28>
  108bb4:	a5000084 	addi	r20,r20,2
  108bb8:	dd012e15 	stw	r20,1208(sp)
  108bbc:	a005883a 	mov	r2,r20
  108bc0:	a03dd30e 	bge	r20,zero,108310 <black_to_red_frame+0xfe108310>
  108bc4:	003fda06 	br	108b30 <black_to_red_frame+0xfe108b30>
  108bc8:	0005883a 	mov	r2,zero
  108bcc:	003dcd06 	br	108304 <black_to_red_frame+0xfe108304>
  108bd0:	d8812617 	ldw	r2,1176(sp)
  108bd4:	003f5c06 	br	108948 <black_to_red_frame+0xfe108948>
  108bd8:	94803fcc 	andi	r18,r18,255
  108bdc:	9480201c 	xori	r18,r18,128
  108be0:	00ffffc4 	movi	r3,-1
  108be4:	94bfe004 	addi	r18,r18,-128
  108be8:	00381406 	br	106c3c <black_to_red_frame+0xfe106c3c>
  108bec:	0005883a 	mov	r2,zero
  108bf0:	003fa406 	br	108a84 <black_to_red_frame+0xfe108a84>
  108bf4:	d8c12344 	addi	r3,sp,1165
  108bf8:	003f6106 	br	108980 <black_to_red_frame+0xfe108980>

00108bfc <__vfprintf_internal>:
  108bfc:	008004b4 	movhi	r2,18
  108c00:	10a1f404 	addi	r2,r2,-30768
  108c04:	2007883a 	mov	r3,r4
  108c08:	11000017 	ldw	r4,0(r2)
  108c0c:	2805883a 	mov	r2,r5
  108c10:	300f883a 	mov	r7,r6
  108c14:	180b883a 	mov	r5,r3
  108c18:	100d883a 	mov	r6,r2
  108c1c:	0106aa81 	jmpi	106aa8 <___vfprintf_internal_r>

00108c20 <__swsetup_r>:
  108c20:	008004b4 	movhi	r2,18
  108c24:	10a1f404 	addi	r2,r2,-30768
  108c28:	10800017 	ldw	r2,0(r2)
  108c2c:	defffd04 	addi	sp,sp,-12
  108c30:	dc400115 	stw	r17,4(sp)
  108c34:	dc000015 	stw	r16,0(sp)
  108c38:	dfc00215 	stw	ra,8(sp)
  108c3c:	2023883a 	mov	r17,r4
  108c40:	2821883a 	mov	r16,r5
  108c44:	10000226 	beq	r2,zero,108c50 <__swsetup_r+0x30>
  108c48:	10c00e17 	ldw	r3,56(r2)
  108c4c:	18002e26 	beq	r3,zero,108d08 <__swsetup_r+0xe8>
  108c50:	8080030b 	ldhu	r2,12(r16)
  108c54:	10c0020c 	andi	r3,r2,8
  108c58:	100d883a 	mov	r6,r2
  108c5c:	18000f26 	beq	r3,zero,108c9c <__swsetup_r+0x7c>
  108c60:	80c00417 	ldw	r3,16(r16)
  108c64:	18001526 	beq	r3,zero,108cbc <__swsetup_r+0x9c>
  108c68:	1100004c 	andi	r4,r2,1
  108c6c:	20001c1e 	bne	r4,zero,108ce0 <__swsetup_r+0xc0>
  108c70:	1080008c 	andi	r2,r2,2
  108c74:	1000271e 	bne	r2,zero,108d14 <__swsetup_r+0xf4>
  108c78:	80800517 	ldw	r2,20(r16)
  108c7c:	80800215 	stw	r2,8(r16)
  108c80:	18001c26 	beq	r3,zero,108cf4 <__swsetup_r+0xd4>
  108c84:	0005883a 	mov	r2,zero
  108c88:	dfc00217 	ldw	ra,8(sp)
  108c8c:	dc400117 	ldw	r17,4(sp)
  108c90:	dc000017 	ldw	r16,0(sp)
  108c94:	dec00304 	addi	sp,sp,12
  108c98:	f800283a 	ret
  108c9c:	3080040c 	andi	r2,r6,16
  108ca0:	10001726 	beq	r2,zero,108d00 <__swsetup_r+0xe0>
  108ca4:	3080010c 	andi	r2,r6,4
  108ca8:	10001d1e 	bne	r2,zero,108d20 <__swsetup_r+0x100>
  108cac:	80c00417 	ldw	r3,16(r16)
  108cb0:	30800214 	ori	r2,r6,8
  108cb4:	8080030d 	sth	r2,12(r16)
  108cb8:	183feb1e 	bne	r3,zero,108c68 <black_to_red_frame+0xfe108c68>
  108cbc:	1140a00c 	andi	r5,r2,640
  108cc0:	01008004 	movi	r4,512
  108cc4:	293fe826 	beq	r5,r4,108c68 <black_to_red_frame+0xfe108c68>
  108cc8:	8809883a 	mov	r4,r17
  108ccc:	800b883a 	mov	r5,r16
  108cd0:	010b6c00 	call	10b6c0 <__smakebuf_r>
  108cd4:	8080030b 	ldhu	r2,12(r16)
  108cd8:	80c00417 	ldw	r3,16(r16)
  108cdc:	003fe206 	br	108c68 <black_to_red_frame+0xfe108c68>
  108ce0:	80800517 	ldw	r2,20(r16)
  108ce4:	80000215 	stw	zero,8(r16)
  108ce8:	0085c83a 	sub	r2,zero,r2
  108cec:	80800615 	stw	r2,24(r16)
  108cf0:	183fe41e 	bne	r3,zero,108c84 <black_to_red_frame+0xfe108c84>
  108cf4:	8080030b 	ldhu	r2,12(r16)
  108cf8:	1080200c 	andi	r2,r2,128
  108cfc:	103fe226 	beq	r2,zero,108c88 <black_to_red_frame+0xfe108c88>
  108d00:	00bfffc4 	movi	r2,-1
  108d04:	003fe006 	br	108c88 <black_to_red_frame+0xfe108c88>
  108d08:	1009883a 	mov	r4,r2
  108d0c:	010a8dc0 	call	10a8dc <__sinit>
  108d10:	003fcf06 	br	108c50 <black_to_red_frame+0xfe108c50>
  108d14:	0005883a 	mov	r2,zero
  108d18:	80800215 	stw	r2,8(r16)
  108d1c:	003fd806 	br	108c80 <black_to_red_frame+0xfe108c80>
  108d20:	81400c17 	ldw	r5,48(r16)
  108d24:	28000626 	beq	r5,zero,108d40 <__swsetup_r+0x120>
  108d28:	80801004 	addi	r2,r16,64
  108d2c:	28800326 	beq	r5,r2,108d3c <__swsetup_r+0x11c>
  108d30:	8809883a 	mov	r4,r17
  108d34:	010ad100 	call	10ad10 <_free_r>
  108d38:	8180030b 	ldhu	r6,12(r16)
  108d3c:	80000c15 	stw	zero,48(r16)
  108d40:	80c00417 	ldw	r3,16(r16)
  108d44:	00bff6c4 	movi	r2,-37
  108d48:	118c703a 	and	r6,r2,r6
  108d4c:	80000115 	stw	zero,4(r16)
  108d50:	80c00015 	stw	r3,0(r16)
  108d54:	003fd606 	br	108cb0 <black_to_red_frame+0xfe108cb0>

00108d58 <quorem>:
  108d58:	defff204 	addi	sp,sp,-56
  108d5c:	dd400915 	stw	r21,36(sp)
  108d60:	20800417 	ldw	r2,16(r4)
  108d64:	2d400417 	ldw	r21,16(r5)
  108d68:	dfc00d15 	stw	ra,52(sp)
  108d6c:	df000c15 	stw	fp,48(sp)
  108d70:	ddc00b15 	stw	r23,44(sp)
  108d74:	dd800a15 	stw	r22,40(sp)
  108d78:	dd000815 	stw	r20,32(sp)
  108d7c:	dcc00715 	stw	r19,28(sp)
  108d80:	dc800615 	stw	r18,24(sp)
  108d84:	dc400515 	stw	r17,20(sp)
  108d88:	dc000415 	stw	r16,16(sp)
  108d8c:	d9000015 	stw	r4,0(sp)
  108d90:	d9400115 	stw	r5,4(sp)
  108d94:	15407816 	blt	r2,r21,108f78 <quorem+0x220>
  108d98:	ad7fffc4 	addi	r21,r21,-1
  108d9c:	ad79883a 	add	fp,r21,r21
  108da0:	28c00504 	addi	r3,r5,20
  108da4:	e739883a 	add	fp,fp,fp
  108da8:	1f2f883a 	add	r23,r3,fp
  108dac:	24400504 	addi	r17,r4,20
  108db0:	8f39883a 	add	fp,r17,fp
  108db4:	b9400017 	ldw	r5,0(r23)
  108db8:	e1000017 	ldw	r4,0(fp)
  108dbc:	d8c00215 	stw	r3,8(sp)
  108dc0:	29400044 	addi	r5,r5,1
  108dc4:	df000315 	stw	fp,12(sp)
  108dc8:	0103f0c0 	call	103f0c <__udivsi3>
  108dcc:	1021883a 	mov	r16,r2
  108dd0:	10003026 	beq	r2,zero,108e94 <quorem+0x13c>
  108dd4:	dcc00217 	ldw	r19,8(sp)
  108dd8:	8829883a 	mov	r20,r17
  108ddc:	002d883a 	mov	r22,zero
  108de0:	0039883a 	mov	fp,zero
  108de4:	9c800017 	ldw	r18,0(r19)
  108de8:	800b883a 	mov	r5,r16
  108dec:	9cc00104 	addi	r19,r19,4
  108df0:	913fffcc 	andi	r4,r18,65535
  108df4:	0103f1c0 	call	103f1c <__mulsi3>
  108df8:	9008d43a 	srli	r4,r18,16
  108dfc:	800b883a 	mov	r5,r16
  108e00:	b0ad883a 	add	r22,r22,r2
  108e04:	0103f1c0 	call	103f1c <__mulsi3>
  108e08:	a1400017 	ldw	r5,0(r20)
  108e0c:	b010d43a 	srli	r8,r22,16
  108e10:	b0ffffcc 	andi	r3,r22,65535
  108e14:	293fffcc 	andi	r4,r5,65535
  108e18:	2709883a 	add	r4,r4,fp
  108e1c:	280cd43a 	srli	r6,r5,16
  108e20:	20c9c83a 	sub	r4,r4,r3
  108e24:	4085883a 	add	r2,r8,r2
  108e28:	2007d43a 	srai	r3,r4,16
  108e2c:	117fffcc 	andi	r5,r2,65535
  108e30:	314bc83a 	sub	r5,r6,r5
  108e34:	28cb883a 	add	r5,r5,r3
  108e38:	280c943a 	slli	r6,r5,16
  108e3c:	213fffcc 	andi	r4,r4,65535
  108e40:	102cd43a 	srli	r22,r2,16
  108e44:	3108b03a 	or	r4,r6,r4
  108e48:	a1000015 	stw	r4,0(r20)
  108e4c:	2839d43a 	srai	fp,r5,16
  108e50:	a5000104 	addi	r20,r20,4
  108e54:	bcffe32e 	bgeu	r23,r19,108de4 <black_to_red_frame+0xfe108de4>
  108e58:	d8c00317 	ldw	r3,12(sp)
  108e5c:	18800017 	ldw	r2,0(r3)
  108e60:	10000c1e 	bne	r2,zero,108e94 <quorem+0x13c>
  108e64:	18bfff04 	addi	r2,r3,-4
  108e68:	8880082e 	bgeu	r17,r2,108e8c <quorem+0x134>
  108e6c:	18ffff17 	ldw	r3,-4(r3)
  108e70:	18000326 	beq	r3,zero,108e80 <quorem+0x128>
  108e74:	00000506 	br	108e8c <quorem+0x134>
  108e78:	10c00017 	ldw	r3,0(r2)
  108e7c:	1800031e 	bne	r3,zero,108e8c <quorem+0x134>
  108e80:	10bfff04 	addi	r2,r2,-4
  108e84:	ad7fffc4 	addi	r21,r21,-1
  108e88:	88bffb36 	bltu	r17,r2,108e78 <black_to_red_frame+0xfe108e78>
  108e8c:	d8c00017 	ldw	r3,0(sp)
  108e90:	1d400415 	stw	r21,16(r3)
  108e94:	d9000017 	ldw	r4,0(sp)
  108e98:	d9400117 	ldw	r5,4(sp)
  108e9c:	010c6280 	call	10c628 <__mcmp>
  108ea0:	10002816 	blt	r2,zero,108f44 <quorem+0x1ec>
  108ea4:	d8c00217 	ldw	r3,8(sp)
  108ea8:	84000044 	addi	r16,r16,1
  108eac:	880d883a 	mov	r6,r17
  108eb0:	000f883a 	mov	r7,zero
  108eb4:	32800017 	ldw	r10,0(r6)
  108eb8:	1a400017 	ldw	r9,0(r3)
  108ebc:	31800104 	addi	r6,r6,4
  108ec0:	523fffcc 	andi	r8,r10,65535
  108ec4:	48bfffcc 	andi	r2,r9,65535
  108ec8:	41cf883a 	add	r7,r8,r7
  108ecc:	3891c83a 	sub	r8,r7,r2
  108ed0:	4812d43a 	srli	r9,r9,16
  108ed4:	500ed43a 	srli	r7,r10,16
  108ed8:	4005d43a 	srai	r2,r8,16
  108edc:	423fffcc 	andi	r8,r8,65535
  108ee0:	3a4fc83a 	sub	r7,r7,r9
  108ee4:	388f883a 	add	r7,r7,r2
  108ee8:	3804943a 	slli	r2,r7,16
  108eec:	18c00104 	addi	r3,r3,4
  108ef0:	380fd43a 	srai	r7,r7,16
  108ef4:	1210b03a 	or	r8,r2,r8
  108ef8:	323fff15 	stw	r8,-4(r6)
  108efc:	b8ffed2e 	bgeu	r23,r3,108eb4 <black_to_red_frame+0xfe108eb4>
  108f00:	ad45883a 	add	r2,r21,r21
  108f04:	1085883a 	add	r2,r2,r2
  108f08:	8887883a 	add	r3,r17,r2
  108f0c:	18800017 	ldw	r2,0(r3)
  108f10:	10000c1e 	bne	r2,zero,108f44 <quorem+0x1ec>
  108f14:	18bfff04 	addi	r2,r3,-4
  108f18:	8880082e 	bgeu	r17,r2,108f3c <quorem+0x1e4>
  108f1c:	18ffff17 	ldw	r3,-4(r3)
  108f20:	18000326 	beq	r3,zero,108f30 <quorem+0x1d8>
  108f24:	00000506 	br	108f3c <quorem+0x1e4>
  108f28:	10c00017 	ldw	r3,0(r2)
  108f2c:	1800031e 	bne	r3,zero,108f3c <quorem+0x1e4>
  108f30:	10bfff04 	addi	r2,r2,-4
  108f34:	ad7fffc4 	addi	r21,r21,-1
  108f38:	88bffb36 	bltu	r17,r2,108f28 <black_to_red_frame+0xfe108f28>
  108f3c:	d8c00017 	ldw	r3,0(sp)
  108f40:	1d400415 	stw	r21,16(r3)
  108f44:	8005883a 	mov	r2,r16
  108f48:	dfc00d17 	ldw	ra,52(sp)
  108f4c:	df000c17 	ldw	fp,48(sp)
  108f50:	ddc00b17 	ldw	r23,44(sp)
  108f54:	dd800a17 	ldw	r22,40(sp)
  108f58:	dd400917 	ldw	r21,36(sp)
  108f5c:	dd000817 	ldw	r20,32(sp)
  108f60:	dcc00717 	ldw	r19,28(sp)
  108f64:	dc800617 	ldw	r18,24(sp)
  108f68:	dc400517 	ldw	r17,20(sp)
  108f6c:	dc000417 	ldw	r16,16(sp)
  108f70:	dec00e04 	addi	sp,sp,56
  108f74:	f800283a 	ret
  108f78:	0005883a 	mov	r2,zero
  108f7c:	003ff206 	br	108f48 <black_to_red_frame+0xfe108f48>

00108f80 <_dtoa_r>:
  108f80:	20801017 	ldw	r2,64(r4)
  108f84:	deffdf04 	addi	sp,sp,-132
  108f88:	dcc01a15 	stw	r19,104(sp)
  108f8c:	dc801915 	stw	r18,100(sp)
  108f90:	dc401815 	stw	r17,96(sp)
  108f94:	dc001715 	stw	r16,92(sp)
  108f98:	dfc02015 	stw	ra,128(sp)
  108f9c:	df001f15 	stw	fp,124(sp)
  108fa0:	ddc01e15 	stw	r23,120(sp)
  108fa4:	dd801d15 	stw	r22,116(sp)
  108fa8:	dd401c15 	stw	r21,112(sp)
  108fac:	dd001b15 	stw	r20,108(sp)
  108fb0:	d9400315 	stw	r5,12(sp)
  108fb4:	d9c00415 	stw	r7,16(sp)
  108fb8:	2021883a 	mov	r16,r4
  108fbc:	3023883a 	mov	r17,r6
  108fc0:	dcc02317 	ldw	r19,140(sp)
  108fc4:	3025883a 	mov	r18,r6
  108fc8:	10000826 	beq	r2,zero,108fec <_dtoa_r+0x6c>
  108fcc:	20c01117 	ldw	r3,68(r4)
  108fd0:	01800044 	movi	r6,1
  108fd4:	100b883a 	mov	r5,r2
  108fd8:	30cc983a 	sll	r6,r6,r3
  108fdc:	10c00115 	stw	r3,4(r2)
  108fe0:	11800215 	stw	r6,8(r2)
  108fe4:	010bd600 	call	10bd60 <_Bfree>
  108fe8:	80001015 	stw	zero,64(r16)
  108fec:	88002e16 	blt	r17,zero,1090a8 <_dtoa_r+0x128>
  108ff0:	98000015 	stw	zero,0(r19)
  108ff4:	88dffc2c 	andhi	r3,r17,32752
  108ff8:	009ffc34 	movhi	r2,32752
  108ffc:	18801b26 	beq	r3,r2,10906c <_dtoa_r+0xec>
  109000:	d9000317 	ldw	r4,12(sp)
  109004:	900b883a 	mov	r5,r18
  109008:	000d883a 	mov	r6,zero
  10900c:	000f883a 	mov	r7,zero
  109010:	01127c80 	call	1127c8 <__eqdf2>
  109014:	10002b1e 	bne	r2,zero,1090c4 <_dtoa_r+0x144>
  109018:	d8c02217 	ldw	r3,136(sp)
  10901c:	d9002417 	ldw	r4,144(sp)
  109020:	00800044 	movi	r2,1
  109024:	18800015 	stw	r2,0(r3)
  109028:	2001a026 	beq	r4,zero,1096ac <_dtoa_r+0x72c>
  10902c:	00800474 	movhi	r2,17
  109030:	109a3a44 	addi	r2,r2,26857
  109034:	20800015 	stw	r2,0(r4)
  109038:	10bfffc4 	addi	r2,r2,-1
  10903c:	dfc02017 	ldw	ra,128(sp)
  109040:	df001f17 	ldw	fp,124(sp)
  109044:	ddc01e17 	ldw	r23,120(sp)
  109048:	dd801d17 	ldw	r22,116(sp)
  10904c:	dd401c17 	ldw	r21,112(sp)
  109050:	dd001b17 	ldw	r20,108(sp)
  109054:	dcc01a17 	ldw	r19,104(sp)
  109058:	dc801917 	ldw	r18,100(sp)
  10905c:	dc401817 	ldw	r17,96(sp)
  109060:	dc001717 	ldw	r16,92(sp)
  109064:	dec02104 	addi	sp,sp,132
  109068:	f800283a 	ret
  10906c:	d8c02217 	ldw	r3,136(sp)
  109070:	d9000317 	ldw	r4,12(sp)
  109074:	0089c3c4 	movi	r2,9999
  109078:	18800015 	stw	r2,0(r3)
  10907c:	20017926 	beq	r4,zero,109664 <_dtoa_r+0x6e4>
  109080:	00800474 	movhi	r2,17
  109084:	109a4e04 	addi	r2,r2,26936
  109088:	d9802417 	ldw	r6,144(sp)
  10908c:	303feb26 	beq	r6,zero,10903c <black_to_red_frame+0xfe10903c>
  109090:	10c000c7 	ldb	r3,3(r2)
  109094:	18017a1e 	bne	r3,zero,109680 <_dtoa_r+0x700>
  109098:	10c000c4 	addi	r3,r2,3
  10909c:	d9c02417 	ldw	r7,144(sp)
  1090a0:	38c00015 	stw	r3,0(r7)
  1090a4:	003fe506 	br	10903c <black_to_red_frame+0xfe10903c>
  1090a8:	04a00034 	movhi	r18,32768
  1090ac:	94bfffc4 	addi	r18,r18,-1
  1090b0:	8ca4703a 	and	r18,r17,r18
  1090b4:	00800044 	movi	r2,1
  1090b8:	98800015 	stw	r2,0(r19)
  1090bc:	9023883a 	mov	r17,r18
  1090c0:	003fcc06 	br	108ff4 <black_to_red_frame+0xfe108ff4>
  1090c4:	d9400317 	ldw	r5,12(sp)
  1090c8:	d8800204 	addi	r2,sp,8
  1090cc:	8828d53a 	srli	r20,r17,20
  1090d0:	d8800015 	stw	r2,0(sp)
  1090d4:	8009883a 	mov	r4,r16
  1090d8:	900d883a 	mov	r6,r18
  1090dc:	d9c00104 	addi	r7,sp,4
  1090e0:	010c9880 	call	10c988 <__d2b>
  1090e4:	1039883a 	mov	fp,r2
  1090e8:	a001671e 	bne	r20,zero,109688 <_dtoa_r+0x708>
  1090ec:	dd400217 	ldw	r21,8(sp)
  1090f0:	dd000117 	ldw	r20,4(sp)
  1090f4:	00befbc4 	movi	r2,-1041
  1090f8:	ad29883a 	add	r20,r21,r20
  1090fc:	a082d616 	blt	r20,r2,109c58 <_dtoa_r+0xcd8>
  109100:	d9800317 	ldw	r6,12(sp)
  109104:	013f0384 	movi	r4,-1010
  109108:	2509c83a 	sub	r4,r4,r20
  10910c:	a0810484 	addi	r2,r20,1042
  109110:	8922983a 	sll	r17,r17,r4
  109114:	3084d83a 	srl	r2,r6,r2
  109118:	8888b03a 	or	r4,r17,r2
  10911c:	0113be80 	call	113be8 <__floatunsidf>
  109120:	1009883a 	mov	r4,r2
  109124:	017f8434 	movhi	r5,65040
  109128:	00800044 	movi	r2,1
  10912c:	194b883a 	add	r5,r3,r5
  109130:	a53fffc4 	addi	r20,r20,-1
  109134:	d8800f15 	stw	r2,60(sp)
  109138:	000d883a 	mov	r6,zero
  10913c:	01cffe34 	movhi	r7,16376
  109140:	01132100 	call	113210 <__subdf3>
  109144:	1009883a 	mov	r4,r2
  109148:	180b883a 	mov	r5,r3
  10914c:	0198dbf4 	movhi	r6,25455
  109150:	3190d844 	addi	r6,r6,17249
  109154:	01cff4f4 	movhi	r7,16339
  109158:	39e1e9c4 	addi	r7,r7,-30809
  10915c:	0112a100 	call	112a10 <__muldf3>
  109160:	180b883a 	mov	r5,r3
  109164:	01a2d874 	movhi	r6,35681
  109168:	31b22cc4 	addi	r6,r6,-14157
  10916c:	01cff1f4 	movhi	r7,16327
  109170:	39e28a04 	addi	r7,r7,-30168
  109174:	1009883a 	mov	r4,r2
  109178:	01115b00 	call	1115b0 <__adddf3>
  10917c:	a009883a 	mov	r4,r20
  109180:	1027883a 	mov	r19,r2
  109184:	1823883a 	mov	r17,r3
  109188:	0113b180 	call	113b18 <__floatsidf>
  10918c:	1009883a 	mov	r4,r2
  109190:	180b883a 	mov	r5,r3
  109194:	019427f4 	movhi	r6,20639
  109198:	319e7ec4 	addi	r6,r6,31227
  10919c:	01cff4f4 	movhi	r7,16339
  1091a0:	39d104c4 	addi	r7,r7,17427
  1091a4:	0112a100 	call	112a10 <__muldf3>
  1091a8:	9809883a 	mov	r4,r19
  1091ac:	880b883a 	mov	r5,r17
  1091b0:	100d883a 	mov	r6,r2
  1091b4:	180f883a 	mov	r7,r3
  1091b8:	01115b00 	call	1115b0 <__adddf3>
  1091bc:	1009883a 	mov	r4,r2
  1091c0:	180b883a 	mov	r5,r3
  1091c4:	1027883a 	mov	r19,r2
  1091c8:	1823883a 	mov	r17,r3
  1091cc:	0113a980 	call	113a98 <__fixdfsi>
  1091d0:	9809883a 	mov	r4,r19
  1091d4:	880b883a 	mov	r5,r17
  1091d8:	000d883a 	mov	r6,zero
  1091dc:	000f883a 	mov	r7,zero
  1091e0:	d8800615 	stw	r2,24(sp)
  1091e4:	01129240 	call	112924 <__ledf2>
  1091e8:	10028416 	blt	r2,zero,109bfc <_dtoa_r+0xc7c>
  1091ec:	d9000617 	ldw	r4,24(sp)
  1091f0:	00800584 	movi	r2,22
  1091f4:	11027236 	bltu	r2,r4,109bc0 <_dtoa_r+0xc40>
  1091f8:	200490fa 	slli	r2,r4,3
  1091fc:	00c00474 	movhi	r3,17
  109200:	18da6a04 	addi	r3,r3,27048
  109204:	d9800317 	ldw	r6,12(sp)
  109208:	1885883a 	add	r2,r3,r2
  10920c:	11000017 	ldw	r4,0(r2)
  109210:	11400117 	ldw	r5,4(r2)
  109214:	900f883a 	mov	r7,r18
  109218:	011284c0 	call	11284c <__gedf2>
  10921c:	0082930e 	bge	zero,r2,109c6c <_dtoa_r+0xcec>
  109220:	d9800617 	ldw	r6,24(sp)
  109224:	d8000e15 	stw	zero,56(sp)
  109228:	31bfffc4 	addi	r6,r6,-1
  10922c:	d9800615 	stw	r6,24(sp)
  109230:	ad2bc83a 	sub	r21,r21,r20
  109234:	ad7fffc4 	addi	r21,r21,-1
  109238:	a8026c16 	blt	r21,zero,109bec <_dtoa_r+0xc6c>
  10923c:	d8000815 	stw	zero,32(sp)
  109240:	d8800617 	ldw	r2,24(sp)
  109244:	10026116 	blt	r2,zero,109bcc <_dtoa_r+0xc4c>
  109248:	a8ab883a 	add	r21,r21,r2
  10924c:	d8800b15 	stw	r2,44(sp)
  109250:	d8000a15 	stw	zero,40(sp)
  109254:	d9c00417 	ldw	r7,16(sp)
  109258:	00800244 	movi	r2,9
  10925c:	11c11636 	bltu	r2,r7,1096b8 <_dtoa_r+0x738>
  109260:	00800144 	movi	r2,5
  109264:	11c4cc0e 	bge	r2,r7,10a598 <_dtoa_r+0x1618>
  109268:	39ffff04 	addi	r7,r7,-4
  10926c:	d9c00415 	stw	r7,16(sp)
  109270:	0027883a 	mov	r19,zero
  109274:	d8c00417 	ldw	r3,16(sp)
  109278:	008000c4 	movi	r2,3
  10927c:	1883aa26 	beq	r3,r2,10a128 <_dtoa_r+0x11a8>
  109280:	10c35b0e 	bge	r2,r3,109ff0 <_dtoa_r+0x1070>
  109284:	d9000417 	ldw	r4,16(sp)
  109288:	00800104 	movi	r2,4
  10928c:	2082da26 	beq	r4,r2,109df8 <_dtoa_r+0xe78>
  109290:	00800144 	movi	r2,5
  109294:	2081091e 	bne	r4,r2,1096bc <_dtoa_r+0x73c>
  109298:	01c00044 	movi	r7,1
  10929c:	d9c00c15 	stw	r7,48(sp)
  1092a0:	d8c02117 	ldw	r3,132(sp)
  1092a4:	d9000617 	ldw	r4,24(sp)
  1092a8:	1907883a 	add	r3,r3,r4
  1092ac:	19800044 	addi	r6,r3,1
  1092b0:	d8c00d15 	stw	r3,52(sp)
  1092b4:	d9800915 	stw	r6,36(sp)
  1092b8:	0183a90e 	bge	zero,r6,10a160 <_dtoa_r+0x11e0>
  1092bc:	d9800917 	ldw	r6,36(sp)
  1092c0:	80001115 	stw	zero,68(r16)
  1092c4:	008005c4 	movi	r2,23
  1092c8:	1184b52e 	bgeu	r2,r6,10a5a0 <_dtoa_r+0x1620>
  1092cc:	00c00044 	movi	r3,1
  1092d0:	00800104 	movi	r2,4
  1092d4:	1085883a 	add	r2,r2,r2
  1092d8:	11000504 	addi	r4,r2,20
  1092dc:	180b883a 	mov	r5,r3
  1092e0:	18c00044 	addi	r3,r3,1
  1092e4:	313ffb2e 	bgeu	r6,r4,1092d4 <black_to_red_frame+0xfe1092d4>
  1092e8:	81401115 	stw	r5,68(r16)
  1092ec:	3023883a 	mov	r17,r6
  1092f0:	8009883a 	mov	r4,r16
  1092f4:	010bcb80 	call	10bcb8 <_Balloc>
  1092f8:	d8800715 	stw	r2,28(sp)
  1092fc:	80801015 	stw	r2,64(r16)
  109300:	00800384 	movi	r2,14
  109304:	1440f936 	bltu	r2,r17,1096ec <_dtoa_r+0x76c>
  109308:	9800f826 	beq	r19,zero,1096ec <_dtoa_r+0x76c>
  10930c:	d9c00617 	ldw	r7,24(sp)
  109310:	01c39c0e 	bge	zero,r7,10a184 <_dtoa_r+0x1204>
  109314:	388003cc 	andi	r2,r7,15
  109318:	100490fa 	slli	r2,r2,3
  10931c:	382dd13a 	srai	r22,r7,4
  109320:	00c00474 	movhi	r3,17
  109324:	18da6a04 	addi	r3,r3,27048
  109328:	1885883a 	add	r2,r3,r2
  10932c:	b0c0040c 	andi	r3,r22,16
  109330:	12800017 	ldw	r10,0(r2)
  109334:	12400117 	ldw	r9,4(r2)
  109338:	18038526 	beq	r3,zero,10a150 <_dtoa_r+0x11d0>
  10933c:	00800474 	movhi	r2,17
  109340:	109a6004 	addi	r2,r2,27008
  109344:	11800817 	ldw	r6,32(r2)
  109348:	11c00917 	ldw	r7,36(r2)
  10934c:	d9000317 	ldw	r4,12(sp)
  109350:	900b883a 	mov	r5,r18
  109354:	da401515 	stw	r9,84(sp)
  109358:	da801615 	stw	r10,88(sp)
  10935c:	0111e2c0 	call	111e2c <__divdf3>
  109360:	da401517 	ldw	r9,84(sp)
  109364:	da801617 	ldw	r10,88(sp)
  109368:	1027883a 	mov	r19,r2
  10936c:	1829883a 	mov	r20,r3
  109370:	b58003cc 	andi	r22,r22,15
  109374:	044000c4 	movi	r17,3
  109378:	b0001126 	beq	r22,zero,1093c0 <_dtoa_r+0x440>
  10937c:	05c00474 	movhi	r23,17
  109380:	bdda6004 	addi	r23,r23,27008
  109384:	5005883a 	mov	r2,r10
  109388:	4807883a 	mov	r3,r9
  10938c:	b180004c 	andi	r6,r22,1
  109390:	1009883a 	mov	r4,r2
  109394:	b02dd07a 	srai	r22,r22,1
  109398:	180b883a 	mov	r5,r3
  10939c:	30000426 	beq	r6,zero,1093b0 <_dtoa_r+0x430>
  1093a0:	b9800017 	ldw	r6,0(r23)
  1093a4:	b9c00117 	ldw	r7,4(r23)
  1093a8:	8c400044 	addi	r17,r17,1
  1093ac:	0112a100 	call	112a10 <__muldf3>
  1093b0:	bdc00204 	addi	r23,r23,8
  1093b4:	b03ff51e 	bne	r22,zero,10938c <black_to_red_frame+0xfe10938c>
  1093b8:	1015883a 	mov	r10,r2
  1093bc:	1813883a 	mov	r9,r3
  1093c0:	9809883a 	mov	r4,r19
  1093c4:	a00b883a 	mov	r5,r20
  1093c8:	500d883a 	mov	r6,r10
  1093cc:	480f883a 	mov	r7,r9
  1093d0:	0111e2c0 	call	111e2c <__divdf3>
  1093d4:	1027883a 	mov	r19,r2
  1093d8:	1829883a 	mov	r20,r3
  1093dc:	d8c00e17 	ldw	r3,56(sp)
  1093e0:	18000626 	beq	r3,zero,1093fc <_dtoa_r+0x47c>
  1093e4:	9809883a 	mov	r4,r19
  1093e8:	a00b883a 	mov	r5,r20
  1093ec:	000d883a 	mov	r6,zero
  1093f0:	01cffc34 	movhi	r7,16368
  1093f4:	01129240 	call	112924 <__ledf2>
  1093f8:	10041516 	blt	r2,zero,10a450 <_dtoa_r+0x14d0>
  1093fc:	8809883a 	mov	r4,r17
  109400:	0113b180 	call	113b18 <__floatsidf>
  109404:	1009883a 	mov	r4,r2
  109408:	180b883a 	mov	r5,r3
  10940c:	980d883a 	mov	r6,r19
  109410:	a00f883a 	mov	r7,r20
  109414:	0112a100 	call	112a10 <__muldf3>
  109418:	1009883a 	mov	r4,r2
  10941c:	180b883a 	mov	r5,r3
  109420:	000d883a 	mov	r6,zero
  109424:	01d00734 	movhi	r7,16412
  109428:	01115b00 	call	1115b0 <__adddf3>
  10942c:	1023883a 	mov	r17,r2
  109430:	d8800917 	ldw	r2,36(sp)
  109434:	05bf3034 	movhi	r22,64704
  109438:	1daf883a 	add	r23,r3,r22
  10943c:	10031e26 	beq	r2,zero,10a0b8 <_dtoa_r+0x1138>
  109440:	d8c00617 	ldw	r3,24(sp)
  109444:	dac00917 	ldw	r11,36(sp)
  109448:	d8c01315 	stw	r3,76(sp)
  10944c:	d9000c17 	ldw	r4,48(sp)
  109450:	20039626 	beq	r4,zero,10a2ac <_dtoa_r+0x132c>
  109454:	58bfffc4 	addi	r2,r11,-1
  109458:	100490fa 	slli	r2,r2,3
  10945c:	00c00474 	movhi	r3,17
  109460:	18da6a04 	addi	r3,r3,27048
  109464:	0009883a 	mov	r4,zero
  109468:	1885883a 	add	r2,r3,r2
  10946c:	11800017 	ldw	r6,0(r2)
  109470:	11c00117 	ldw	r7,4(r2)
  109474:	d8800717 	ldw	r2,28(sp)
  109478:	014ff834 	movhi	r5,16352
  10947c:	dac01615 	stw	r11,88(sp)
  109480:	15800044 	addi	r22,r2,1
  109484:	0111e2c0 	call	111e2c <__divdf3>
  109488:	880d883a 	mov	r6,r17
  10948c:	b80f883a 	mov	r7,r23
  109490:	1009883a 	mov	r4,r2
  109494:	180b883a 	mov	r5,r3
  109498:	01132100 	call	113210 <__subdf3>
  10949c:	a00b883a 	mov	r5,r20
  1094a0:	9809883a 	mov	r4,r19
  1094a4:	102f883a 	mov	r23,r2
  1094a8:	d8c01015 	stw	r3,64(sp)
  1094ac:	0113a980 	call	113a98 <__fixdfsi>
  1094b0:	1009883a 	mov	r4,r2
  1094b4:	d8801515 	stw	r2,84(sp)
  1094b8:	0113b180 	call	113b18 <__floatsidf>
  1094bc:	9809883a 	mov	r4,r19
  1094c0:	a00b883a 	mov	r5,r20
  1094c4:	100d883a 	mov	r6,r2
  1094c8:	180f883a 	mov	r7,r3
  1094cc:	01132100 	call	113210 <__subdf3>
  1094d0:	da401517 	ldw	r9,84(sp)
  1094d4:	1827883a 	mov	r19,r3
  1094d8:	d8c00717 	ldw	r3,28(sp)
  1094dc:	d9401017 	ldw	r5,64(sp)
  1094e0:	4a400c04 	addi	r9,r9,48
  1094e4:	1023883a 	mov	r17,r2
  1094e8:	1a400005 	stb	r9,0(r3)
  1094ec:	b809883a 	mov	r4,r23
  1094f0:	880d883a 	mov	r6,r17
  1094f4:	980f883a 	mov	r7,r19
  1094f8:	4829883a 	mov	r20,r9
  1094fc:	011284c0 	call	11284c <__gedf2>
  109500:	00842216 	blt	zero,r2,10a58c <_dtoa_r+0x160c>
  109504:	0009883a 	mov	r4,zero
  109508:	014ffc34 	movhi	r5,16368
  10950c:	880d883a 	mov	r6,r17
  109510:	980f883a 	mov	r7,r19
  109514:	01132100 	call	113210 <__subdf3>
  109518:	d9401017 	ldw	r5,64(sp)
  10951c:	b809883a 	mov	r4,r23
  109520:	100d883a 	mov	r6,r2
  109524:	180f883a 	mov	r7,r3
  109528:	011284c0 	call	11284c <__gedf2>
  10952c:	dac01617 	ldw	r11,88(sp)
  109530:	00841316 	blt	zero,r2,10a580 <_dtoa_r+0x1600>
  109534:	00800044 	movi	r2,1
  109538:	12c06c0e 	bge	r2,r11,1096ec <_dtoa_r+0x76c>
  10953c:	d9000717 	ldw	r4,28(sp)
  109540:	dd401215 	stw	r21,72(sp)
  109544:	dc001115 	stw	r16,68(sp)
  109548:	22d7883a 	add	r11,r4,r11
  10954c:	dc801415 	stw	r18,80(sp)
  109550:	582b883a 	mov	r21,r11
  109554:	b021883a 	mov	r16,r22
  109558:	dc801017 	ldw	r18,64(sp)
  10955c:	00000906 	br	109584 <_dtoa_r+0x604>
  109560:	01132100 	call	113210 <__subdf3>
  109564:	1009883a 	mov	r4,r2
  109568:	180b883a 	mov	r5,r3
  10956c:	b80d883a 	mov	r6,r23
  109570:	900f883a 	mov	r7,r18
  109574:	01129240 	call	112924 <__ledf2>
  109578:	1003ea16 	blt	r2,zero,10a524 <_dtoa_r+0x15a4>
  10957c:	b543ed26 	beq	r22,r21,10a534 <_dtoa_r+0x15b4>
  109580:	b021883a 	mov	r16,r22
  109584:	b809883a 	mov	r4,r23
  109588:	900b883a 	mov	r5,r18
  10958c:	000d883a 	mov	r6,zero
  109590:	01d00934 	movhi	r7,16420
  109594:	0112a100 	call	112a10 <__muldf3>
  109598:	000d883a 	mov	r6,zero
  10959c:	01d00934 	movhi	r7,16420
  1095a0:	8809883a 	mov	r4,r17
  1095a4:	980b883a 	mov	r5,r19
  1095a8:	102f883a 	mov	r23,r2
  1095ac:	1825883a 	mov	r18,r3
  1095b0:	0112a100 	call	112a10 <__muldf3>
  1095b4:	180b883a 	mov	r5,r3
  1095b8:	1009883a 	mov	r4,r2
  1095bc:	1823883a 	mov	r17,r3
  1095c0:	1027883a 	mov	r19,r2
  1095c4:	0113a980 	call	113a98 <__fixdfsi>
  1095c8:	1009883a 	mov	r4,r2
  1095cc:	1029883a 	mov	r20,r2
  1095d0:	0113b180 	call	113b18 <__floatsidf>
  1095d4:	9809883a 	mov	r4,r19
  1095d8:	880b883a 	mov	r5,r17
  1095dc:	100d883a 	mov	r6,r2
  1095e0:	180f883a 	mov	r7,r3
  1095e4:	01132100 	call	113210 <__subdf3>
  1095e8:	a5000c04 	addi	r20,r20,48
  1095ec:	1009883a 	mov	r4,r2
  1095f0:	180b883a 	mov	r5,r3
  1095f4:	b80d883a 	mov	r6,r23
  1095f8:	900f883a 	mov	r7,r18
  1095fc:	85000005 	stb	r20,0(r16)
  109600:	1023883a 	mov	r17,r2
  109604:	1827883a 	mov	r19,r3
  109608:	01129240 	call	112924 <__ledf2>
  10960c:	b5800044 	addi	r22,r22,1
  109610:	0009883a 	mov	r4,zero
  109614:	014ffc34 	movhi	r5,16368
  109618:	880d883a 	mov	r6,r17
  10961c:	980f883a 	mov	r7,r19
  109620:	103fcf0e 	bge	r2,zero,109560 <black_to_red_frame+0xfe109560>
  109624:	d8c01317 	ldw	r3,76(sp)
  109628:	dc001117 	ldw	r16,68(sp)
  10962c:	d8c00615 	stw	r3,24(sp)
  109630:	8009883a 	mov	r4,r16
  109634:	e00b883a 	mov	r5,fp
  109638:	010bd600 	call	10bd60 <_Bfree>
  10963c:	d9800617 	ldw	r6,24(sp)
  109640:	d9c02217 	ldw	r7,136(sp)
  109644:	b0000005 	stb	zero,0(r22)
  109648:	30800044 	addi	r2,r6,1
  10964c:	38800015 	stw	r2,0(r7)
  109650:	d8802417 	ldw	r2,144(sp)
  109654:	10026426 	beq	r2,zero,109fe8 <_dtoa_r+0x1068>
  109658:	15800015 	stw	r22,0(r2)
  10965c:	d8800717 	ldw	r2,28(sp)
  109660:	003e7606 	br	10903c <black_to_red_frame+0xfe10903c>
  109664:	00800434 	movhi	r2,16
  109668:	10bfffc4 	addi	r2,r2,-1
  10966c:	88a2703a 	and	r17,r17,r2
  109670:	883e831e 	bne	r17,zero,109080 <black_to_red_frame+0xfe109080>
  109674:	00800474 	movhi	r2,17
  109678:	109a4b04 	addi	r2,r2,26924
  10967c:	003e8206 	br	109088 <black_to_red_frame+0xfe109088>
  109680:	10c00204 	addi	r3,r2,8
  109684:	003e8506 	br	10909c <black_to_red_frame+0xfe10909c>
  109688:	01400434 	movhi	r5,16
  10968c:	297fffc4 	addi	r5,r5,-1
  109690:	914a703a 	and	r5,r18,r5
  109694:	d9000317 	ldw	r4,12(sp)
  109698:	294ffc34 	orhi	r5,r5,16368
  10969c:	a53f0044 	addi	r20,r20,-1023
  1096a0:	dd400217 	ldw	r21,8(sp)
  1096a4:	d8000f15 	stw	zero,60(sp)
  1096a8:	003ea306 	br	109138 <black_to_red_frame+0xfe109138>
  1096ac:	00800474 	movhi	r2,17
  1096b0:	109a3a04 	addi	r2,r2,26856
  1096b4:	003e6106 	br	10903c <black_to_red_frame+0xfe10903c>
  1096b8:	d8000415 	stw	zero,16(sp)
  1096bc:	8009883a 	mov	r4,r16
  1096c0:	80001115 	stw	zero,68(r16)
  1096c4:	000b883a 	mov	r5,zero
  1096c8:	010bcb80 	call	10bcb8 <_Balloc>
  1096cc:	00ffffc4 	movi	r3,-1
  1096d0:	01000044 	movi	r4,1
  1096d4:	d8800715 	stw	r2,28(sp)
  1096d8:	d8c00d15 	stw	r3,52(sp)
  1096dc:	80801015 	stw	r2,64(r16)
  1096e0:	d8002115 	stw	zero,132(sp)
  1096e4:	d8c00915 	stw	r3,36(sp)
  1096e8:	d9000c15 	stw	r4,48(sp)
  1096ec:	d8800117 	ldw	r2,4(sp)
  1096f0:	10008e16 	blt	r2,zero,10992c <_dtoa_r+0x9ac>
  1096f4:	d9000617 	ldw	r4,24(sp)
  1096f8:	00c00384 	movi	r3,14
  1096fc:	19008b16 	blt	r3,r4,10992c <_dtoa_r+0x9ac>
  109700:	200490fa 	slli	r2,r4,3
  109704:	d9802117 	ldw	r6,132(sp)
  109708:	00c00474 	movhi	r3,17
  10970c:	18da6a04 	addi	r3,r3,27048
  109710:	1885883a 	add	r2,r3,r2
  109714:	14400017 	ldw	r17,0(r2)
  109718:	14c00117 	ldw	r19,4(r2)
  10971c:	3001be16 	blt	r6,zero,109e18 <_dtoa_r+0xe98>
  109720:	d9000317 	ldw	r4,12(sp)
  109724:	880d883a 	mov	r6,r17
  109728:	980f883a 	mov	r7,r19
  10972c:	900b883a 	mov	r5,r18
  109730:	0111e2c0 	call	111e2c <__divdf3>
  109734:	180b883a 	mov	r5,r3
  109738:	1009883a 	mov	r4,r2
  10973c:	0113a980 	call	113a98 <__fixdfsi>
  109740:	1009883a 	mov	r4,r2
  109744:	102f883a 	mov	r23,r2
  109748:	0113b180 	call	113b18 <__floatsidf>
  10974c:	1009883a 	mov	r4,r2
  109750:	180b883a 	mov	r5,r3
  109754:	880d883a 	mov	r6,r17
  109758:	980f883a 	mov	r7,r19
  10975c:	0112a100 	call	112a10 <__muldf3>
  109760:	d9000317 	ldw	r4,12(sp)
  109764:	900b883a 	mov	r5,r18
  109768:	100d883a 	mov	r6,r2
  10976c:	180f883a 	mov	r7,r3
  109770:	01132100 	call	113210 <__subdf3>
  109774:	d9c00717 	ldw	r7,28(sp)
  109778:	1009883a 	mov	r4,r2
  10977c:	b8800c04 	addi	r2,r23,48
  109780:	38800005 	stb	r2,0(r7)
  109784:	3d800044 	addi	r22,r7,1
  109788:	d9c00917 	ldw	r7,36(sp)
  10978c:	01800044 	movi	r6,1
  109790:	180b883a 	mov	r5,r3
  109794:	2005883a 	mov	r2,r4
  109798:	39803e26 	beq	r7,r6,109894 <_dtoa_r+0x914>
  10979c:	000d883a 	mov	r6,zero
  1097a0:	01d00934 	movhi	r7,16420
  1097a4:	0112a100 	call	112a10 <__muldf3>
  1097a8:	1009883a 	mov	r4,r2
  1097ac:	180b883a 	mov	r5,r3
  1097b0:	000d883a 	mov	r6,zero
  1097b4:	000f883a 	mov	r7,zero
  1097b8:	1029883a 	mov	r20,r2
  1097bc:	182b883a 	mov	r21,r3
  1097c0:	01127c80 	call	1127c8 <__eqdf2>
  1097c4:	103f9a26 	beq	r2,zero,109630 <black_to_red_frame+0xfe109630>
  1097c8:	d8c00717 	ldw	r3,28(sp)
  1097cc:	d9000917 	ldw	r4,36(sp)
  1097d0:	b025883a 	mov	r18,r22
  1097d4:	df000415 	stw	fp,16(sp)
  1097d8:	1905883a 	add	r2,r3,r4
  1097dc:	15ffffc4 	addi	r23,r2,-1
  1097e0:	dc000315 	stw	r16,12(sp)
  1097e4:	00000a06 	br	109810 <_dtoa_r+0x890>
  1097e8:	0112a100 	call	112a10 <__muldf3>
  1097ec:	1009883a 	mov	r4,r2
  1097f0:	180b883a 	mov	r5,r3
  1097f4:	000d883a 	mov	r6,zero
  1097f8:	000f883a 	mov	r7,zero
  1097fc:	1029883a 	mov	r20,r2
  109800:	182b883a 	mov	r21,r3
  109804:	01127c80 	call	1127c8 <__eqdf2>
  109808:	10021926 	beq	r2,zero,10a070 <_dtoa_r+0x10f0>
  10980c:	e025883a 	mov	r18,fp
  109810:	880d883a 	mov	r6,r17
  109814:	980f883a 	mov	r7,r19
  109818:	a009883a 	mov	r4,r20
  10981c:	a80b883a 	mov	r5,r21
  109820:	0111e2c0 	call	111e2c <__divdf3>
  109824:	180b883a 	mov	r5,r3
  109828:	1009883a 	mov	r4,r2
  10982c:	0113a980 	call	113a98 <__fixdfsi>
  109830:	1009883a 	mov	r4,r2
  109834:	1021883a 	mov	r16,r2
  109838:	0113b180 	call	113b18 <__floatsidf>
  10983c:	1009883a 	mov	r4,r2
  109840:	180b883a 	mov	r5,r3
  109844:	880d883a 	mov	r6,r17
  109848:	980f883a 	mov	r7,r19
  10984c:	0112a100 	call	112a10 <__muldf3>
  109850:	a009883a 	mov	r4,r20
  109854:	a80b883a 	mov	r5,r21
  109858:	100d883a 	mov	r6,r2
  10985c:	180f883a 	mov	r7,r3
  109860:	01132100 	call	113210 <__subdf3>
  109864:	82800c04 	addi	r10,r16,48
  109868:	97000044 	addi	fp,r18,1
  10986c:	92800005 	stb	r10,0(r18)
  109870:	000d883a 	mov	r6,zero
  109874:	01d00934 	movhi	r7,16420
  109878:	1009883a 	mov	r4,r2
  10987c:	180b883a 	mov	r5,r3
  109880:	e02d883a 	mov	r22,fp
  109884:	95ffd81e 	bne	r18,r23,1097e8 <black_to_red_frame+0xfe1097e8>
  109888:	802f883a 	mov	r23,r16
  10988c:	df000417 	ldw	fp,16(sp)
  109890:	dc000317 	ldw	r16,12(sp)
  109894:	1009883a 	mov	r4,r2
  109898:	180b883a 	mov	r5,r3
  10989c:	100d883a 	mov	r6,r2
  1098a0:	180f883a 	mov	r7,r3
  1098a4:	01115b00 	call	1115b0 <__adddf3>
  1098a8:	8809883a 	mov	r4,r17
  1098ac:	980b883a 	mov	r5,r19
  1098b0:	100d883a 	mov	r6,r2
  1098b4:	180f883a 	mov	r7,r3
  1098b8:	1025883a 	mov	r18,r2
  1098bc:	1829883a 	mov	r20,r3
  1098c0:	01129240 	call	112924 <__ledf2>
  1098c4:	10000816 	blt	r2,zero,1098e8 <_dtoa_r+0x968>
  1098c8:	8809883a 	mov	r4,r17
  1098cc:	980b883a 	mov	r5,r19
  1098d0:	900d883a 	mov	r6,r18
  1098d4:	a00f883a 	mov	r7,r20
  1098d8:	01127c80 	call	1127c8 <__eqdf2>
  1098dc:	103f541e 	bne	r2,zero,109630 <black_to_red_frame+0xfe109630>
  1098e0:	bdc0004c 	andi	r23,r23,1
  1098e4:	b83f5226 	beq	r23,zero,109630 <black_to_red_frame+0xfe109630>
  1098e8:	b53fffc3 	ldbu	r20,-1(r22)
  1098ec:	b0ffff84 	addi	r3,r22,-2
  1098f0:	01400e44 	movi	r5,57
  1098f4:	d9800717 	ldw	r6,28(sp)
  1098f8:	00000406 	br	10990c <_dtoa_r+0x98c>
  1098fc:	30824326 	beq	r6,r2,10a20c <_dtoa_r+0x128c>
  109900:	1d000003 	ldbu	r20,0(r3)
  109904:	102d883a 	mov	r22,r2
  109908:	18ffffc4 	addi	r3,r3,-1
  10990c:	a1003fcc 	andi	r4,r20,255
  109910:	2100201c 	xori	r4,r4,128
  109914:	213fe004 	addi	r4,r4,-128
  109918:	b0bfffc4 	addi	r2,r22,-1
  10991c:	217ff726 	beq	r4,r5,1098fc <black_to_red_frame+0xfe1098fc>
  109920:	a2400044 	addi	r9,r20,1
  109924:	12400005 	stb	r9,0(r2)
  109928:	003f4106 	br	109630 <black_to_red_frame+0xfe109630>
  10992c:	d9000c17 	ldw	r4,48(sp)
  109930:	2000be26 	beq	r4,zero,109c2c <_dtoa_r+0xcac>
  109934:	d9800417 	ldw	r6,16(sp)
  109938:	00c00044 	movi	r3,1
  10993c:	19815e0e 	bge	r3,r6,109eb8 <_dtoa_r+0xf38>
  109940:	d8800917 	ldw	r2,36(sp)
  109944:	d8c00a17 	ldw	r3,40(sp)
  109948:	153fffc4 	addi	r20,r2,-1
  10994c:	1d01f816 	blt	r3,r20,10a130 <_dtoa_r+0x11b0>
  109950:	1d29c83a 	sub	r20,r3,r20
  109954:	d9c00917 	ldw	r7,36(sp)
  109958:	3802ad16 	blt	r7,zero,10a410 <_dtoa_r+0x1490>
  10995c:	dcc00817 	ldw	r19,32(sp)
  109960:	d8800917 	ldw	r2,36(sp)
  109964:	d8c00817 	ldw	r3,32(sp)
  109968:	8009883a 	mov	r4,r16
  10996c:	01400044 	movi	r5,1
  109970:	1887883a 	add	r3,r3,r2
  109974:	d8c00815 	stw	r3,32(sp)
  109978:	a8ab883a 	add	r21,r21,r2
  10997c:	010c0e80 	call	10c0e8 <__i2b>
  109980:	1023883a 	mov	r17,r2
  109984:	98000826 	beq	r19,zero,1099a8 <_dtoa_r+0xa28>
  109988:	0540070e 	bge	zero,r21,1099a8 <_dtoa_r+0xa28>
  10998c:	a805883a 	mov	r2,r21
  109990:	9d411716 	blt	r19,r21,109df0 <_dtoa_r+0xe70>
  109994:	d9000817 	ldw	r4,32(sp)
  109998:	98a7c83a 	sub	r19,r19,r2
  10999c:	a8abc83a 	sub	r21,r21,r2
  1099a0:	2089c83a 	sub	r4,r4,r2
  1099a4:	d9000815 	stw	r4,32(sp)
  1099a8:	d9800a17 	ldw	r6,40(sp)
  1099ac:	0180140e 	bge	zero,r6,109a00 <_dtoa_r+0xa80>
  1099b0:	d9c00c17 	ldw	r7,48(sp)
  1099b4:	3801d626 	beq	r7,zero,10a110 <_dtoa_r+0x1190>
  1099b8:	05000e0e 	bge	zero,r20,1099f4 <_dtoa_r+0xa74>
  1099bc:	880b883a 	mov	r5,r17
  1099c0:	8009883a 	mov	r4,r16
  1099c4:	a00d883a 	mov	r6,r20
  1099c8:	010c3900 	call	10c390 <__pow5mult>
  1099cc:	e00d883a 	mov	r6,fp
  1099d0:	8009883a 	mov	r4,r16
  1099d4:	100b883a 	mov	r5,r2
  1099d8:	1023883a 	mov	r17,r2
  1099dc:	010c1240 	call	10c124 <__multiply>
  1099e0:	102d883a 	mov	r22,r2
  1099e4:	e00b883a 	mov	r5,fp
  1099e8:	8009883a 	mov	r4,r16
  1099ec:	010bd600 	call	10bd60 <_Bfree>
  1099f0:	b039883a 	mov	fp,r22
  1099f4:	d8800a17 	ldw	r2,40(sp)
  1099f8:	150dc83a 	sub	r6,r2,r20
  1099fc:	30011f1e 	bne	r6,zero,109e7c <_dtoa_r+0xefc>
  109a00:	8009883a 	mov	r4,r16
  109a04:	01400044 	movi	r5,1
  109a08:	010c0e80 	call	10c0e8 <__i2b>
  109a0c:	d8c00b17 	ldw	r3,44(sp)
  109a10:	1029883a 	mov	r20,r2
  109a14:	00c0050e 	bge	zero,r3,109a2c <_dtoa_r+0xaac>
  109a18:	8009883a 	mov	r4,r16
  109a1c:	100b883a 	mov	r5,r2
  109a20:	180d883a 	mov	r6,r3
  109a24:	010c3900 	call	10c390 <__pow5mult>
  109a28:	1029883a 	mov	r20,r2
  109a2c:	d9000417 	ldw	r4,16(sp)
  109a30:	00800044 	movi	r2,1
  109a34:	1100e00e 	bge	r2,r4,109db8 <_dtoa_r+0xe38>
  109a38:	0025883a 	mov	r18,zero
  109a3c:	d8800b17 	ldw	r2,44(sp)
  109a40:	10015f1e 	bne	r2,zero,109fc0 <_dtoa_r+0x1040>
  109a44:	00800044 	movi	r2,1
  109a48:	1545883a 	add	r2,r2,r21
  109a4c:	108007cc 	andi	r2,r2,31
  109a50:	10007a26 	beq	r2,zero,109c3c <_dtoa_r+0xcbc>
  109a54:	01000804 	movi	r4,32
  109a58:	2089c83a 	sub	r4,r4,r2
  109a5c:	00c00104 	movi	r3,4
  109a60:	1902d20e 	bge	r3,r4,10a5ac <_dtoa_r+0x162c>
  109a64:	00c00704 	movi	r3,28
  109a68:	1885c83a 	sub	r2,r3,r2
  109a6c:	d8c00817 	ldw	r3,32(sp)
  109a70:	98a7883a 	add	r19,r19,r2
  109a74:	a8ab883a 	add	r21,r21,r2
  109a78:	1887883a 	add	r3,r3,r2
  109a7c:	d8c00815 	stw	r3,32(sp)
  109a80:	d9800817 	ldw	r6,32(sp)
  109a84:	0180040e 	bge	zero,r6,109a98 <_dtoa_r+0xb18>
  109a88:	e00b883a 	mov	r5,fp
  109a8c:	8009883a 	mov	r4,r16
  109a90:	010c4d80 	call	10c4d8 <__lshift>
  109a94:	1039883a 	mov	fp,r2
  109a98:	0540050e 	bge	zero,r21,109ab0 <_dtoa_r+0xb30>
  109a9c:	a00b883a 	mov	r5,r20
  109aa0:	8009883a 	mov	r4,r16
  109aa4:	a80d883a 	mov	r6,r21
  109aa8:	010c4d80 	call	10c4d8 <__lshift>
  109aac:	1029883a 	mov	r20,r2
  109ab0:	d9c00e17 	ldw	r7,56(sp)
  109ab4:	3801301e 	bne	r7,zero,109f78 <_dtoa_r+0xff8>
  109ab8:	d9c00917 	ldw	r7,36(sp)
  109abc:	01c1500e 	bge	zero,r7,10a000 <_dtoa_r+0x1080>
  109ac0:	d8800c17 	ldw	r2,48(sp)
  109ac4:	10006b1e 	bne	r2,zero,109c74 <_dtoa_r+0xcf4>
  109ac8:	dc800717 	ldw	r18,28(sp)
  109acc:	dcc00917 	ldw	r19,36(sp)
  109ad0:	902b883a 	mov	r21,r18
  109ad4:	00000206 	br	109ae0 <_dtoa_r+0xb60>
  109ad8:	010bd880 	call	10bd88 <__multadd>
  109adc:	1039883a 	mov	fp,r2
  109ae0:	e009883a 	mov	r4,fp
  109ae4:	a00b883a 	mov	r5,r20
  109ae8:	0108d580 	call	108d58 <quorem>
  109aec:	10800c04 	addi	r2,r2,48
  109af0:	90800005 	stb	r2,0(r18)
  109af4:	94800044 	addi	r18,r18,1
  109af8:	9547c83a 	sub	r3,r18,r21
  109afc:	8009883a 	mov	r4,r16
  109b00:	e00b883a 	mov	r5,fp
  109b04:	01800284 	movi	r6,10
  109b08:	000f883a 	mov	r7,zero
  109b0c:	1cfff216 	blt	r3,r19,109ad8 <black_to_red_frame+0xfe109ad8>
  109b10:	102f883a 	mov	r23,r2
  109b14:	d8800917 	ldw	r2,36(sp)
  109b18:	0082410e 	bge	zero,r2,10a420 <_dtoa_r+0x14a0>
  109b1c:	d9000717 	ldw	r4,28(sp)
  109b20:	002b883a 	mov	r21,zero
  109b24:	20ad883a 	add	r22,r4,r2
  109b28:	e00b883a 	mov	r5,fp
  109b2c:	8009883a 	mov	r4,r16
  109b30:	01800044 	movi	r6,1
  109b34:	010c4d80 	call	10c4d8 <__lshift>
  109b38:	1009883a 	mov	r4,r2
  109b3c:	a00b883a 	mov	r5,r20
  109b40:	1039883a 	mov	fp,r2
  109b44:	010c6280 	call	10c628 <__mcmp>
  109b48:	0080d10e 	bge	zero,r2,109e90 <_dtoa_r+0xf10>
  109b4c:	b13fffc3 	ldbu	r4,-1(r22)
  109b50:	b0ffff84 	addi	r3,r22,-2
  109b54:	01800e44 	movi	r6,57
  109b58:	d9c00717 	ldw	r7,28(sp)
  109b5c:	00000406 	br	109b70 <_dtoa_r+0xbf0>
  109b60:	38813c26 	beq	r7,r2,10a054 <_dtoa_r+0x10d4>
  109b64:	19000003 	ldbu	r4,0(r3)
  109b68:	102d883a 	mov	r22,r2
  109b6c:	18ffffc4 	addi	r3,r3,-1
  109b70:	21403fcc 	andi	r5,r4,255
  109b74:	2940201c 	xori	r5,r5,128
  109b78:	297fe004 	addi	r5,r5,-128
  109b7c:	b0bfffc4 	addi	r2,r22,-1
  109b80:	29bff726 	beq	r5,r6,109b60 <black_to_red_frame+0xfe109b60>
  109b84:	21000044 	addi	r4,r4,1
  109b88:	11000005 	stb	r4,0(r2)
  109b8c:	8009883a 	mov	r4,r16
  109b90:	a00b883a 	mov	r5,r20
  109b94:	010bd600 	call	10bd60 <_Bfree>
  109b98:	883ea526 	beq	r17,zero,109630 <black_to_red_frame+0xfe109630>
  109b9c:	a8000426 	beq	r21,zero,109bb0 <_dtoa_r+0xc30>
  109ba0:	ac400326 	beq	r21,r17,109bb0 <_dtoa_r+0xc30>
  109ba4:	8009883a 	mov	r4,r16
  109ba8:	a80b883a 	mov	r5,r21
  109bac:	010bd600 	call	10bd60 <_Bfree>
  109bb0:	8009883a 	mov	r4,r16
  109bb4:	880b883a 	mov	r5,r17
  109bb8:	010bd600 	call	10bd60 <_Bfree>
  109bbc:	003e9c06 	br	109630 <black_to_red_frame+0xfe109630>
  109bc0:	01c00044 	movi	r7,1
  109bc4:	d9c00e15 	stw	r7,56(sp)
  109bc8:	003d9906 	br	109230 <black_to_red_frame+0xfe109230>
  109bcc:	d8c00817 	ldw	r3,32(sp)
  109bd0:	d9000617 	ldw	r4,24(sp)
  109bd4:	d8000b15 	stw	zero,44(sp)
  109bd8:	1907c83a 	sub	r3,r3,r4
  109bdc:	010dc83a 	sub	r6,zero,r4
  109be0:	d8c00815 	stw	r3,32(sp)
  109be4:	d9800a15 	stw	r6,40(sp)
  109be8:	003d9a06 	br	109254 <black_to_red_frame+0xfe109254>
  109bec:	056bc83a 	sub	r21,zero,r21
  109bf0:	dd400815 	stw	r21,32(sp)
  109bf4:	002b883a 	mov	r21,zero
  109bf8:	003d9106 	br	109240 <black_to_red_frame+0xfe109240>
  109bfc:	d9000617 	ldw	r4,24(sp)
  109c00:	0113b180 	call	113b18 <__floatsidf>
  109c04:	1009883a 	mov	r4,r2
  109c08:	180b883a 	mov	r5,r3
  109c0c:	980d883a 	mov	r6,r19
  109c10:	880f883a 	mov	r7,r17
  109c14:	01127c80 	call	1127c8 <__eqdf2>
  109c18:	103d7426 	beq	r2,zero,1091ec <black_to_red_frame+0xfe1091ec>
  109c1c:	d8c00617 	ldw	r3,24(sp)
  109c20:	18ffffc4 	addi	r3,r3,-1
  109c24:	d8c00615 	stw	r3,24(sp)
  109c28:	003d7006 	br	1091ec <black_to_red_frame+0xfe1091ec>
  109c2c:	dd000a17 	ldw	r20,40(sp)
  109c30:	dcc00817 	ldw	r19,32(sp)
  109c34:	0023883a 	mov	r17,zero
  109c38:	003f5206 	br	109984 <black_to_red_frame+0xfe109984>
  109c3c:	00800704 	movi	r2,28
  109c40:	d9000817 	ldw	r4,32(sp)
  109c44:	98a7883a 	add	r19,r19,r2
  109c48:	a8ab883a 	add	r21,r21,r2
  109c4c:	2089883a 	add	r4,r4,r2
  109c50:	d9000815 	stw	r4,32(sp)
  109c54:	003f8a06 	br	109a80 <black_to_red_frame+0xfe109a80>
  109c58:	d9c00317 	ldw	r7,12(sp)
  109c5c:	013efb84 	movi	r4,-1042
  109c60:	2509c83a 	sub	r4,r4,r20
  109c64:	3908983a 	sll	r4,r7,r4
  109c68:	003d2c06 	br	10911c <black_to_red_frame+0xfe10911c>
  109c6c:	d8000e15 	stw	zero,56(sp)
  109c70:	003d6f06 	br	109230 <black_to_red_frame+0xfe109230>
  109c74:	04c0050e 	bge	zero,r19,109c8c <_dtoa_r+0xd0c>
  109c78:	880b883a 	mov	r5,r17
  109c7c:	8009883a 	mov	r4,r16
  109c80:	980d883a 	mov	r6,r19
  109c84:	010c4d80 	call	10c4d8 <__lshift>
  109c88:	1023883a 	mov	r17,r2
  109c8c:	9001681e 	bne	r18,zero,10a230 <_dtoa_r+0x12b0>
  109c90:	8827883a 	mov	r19,r17
  109c94:	d8c00717 	ldw	r3,28(sp)
  109c98:	d9000917 	ldw	r4,36(sp)
  109c9c:	1dffffc4 	addi	r23,r3,-1
  109ca0:	1825883a 	mov	r18,r3
  109ca4:	d8c00317 	ldw	r3,12(sp)
  109ca8:	b92f883a 	add	r23,r23,r4
  109cac:	ddc00515 	stw	r23,20(sp)
  109cb0:	18c0004c 	andi	r3,r3,1
  109cb4:	d8c00315 	stw	r3,12(sp)
  109cb8:	e009883a 	mov	r4,fp
  109cbc:	a00b883a 	mov	r5,r20
  109cc0:	0108d580 	call	108d58 <quorem>
  109cc4:	e009883a 	mov	r4,fp
  109cc8:	880b883a 	mov	r5,r17
  109ccc:	102d883a 	mov	r22,r2
  109cd0:	010c6280 	call	10c628 <__mcmp>
  109cd4:	8009883a 	mov	r4,r16
  109cd8:	a00b883a 	mov	r5,r20
  109cdc:	980d883a 	mov	r6,r19
  109ce0:	102b883a 	mov	r21,r2
  109ce4:	010c6880 	call	10c688 <__mdiff>
  109ce8:	1007883a 	mov	r3,r2
  109cec:	10800317 	ldw	r2,12(r2)
  109cf0:	b5c00c04 	addi	r23,r22,48
  109cf4:	10009b1e 	bne	r2,zero,109f64 <_dtoa_r+0xfe4>
  109cf8:	180b883a 	mov	r5,r3
  109cfc:	e009883a 	mov	r4,fp
  109d00:	d8c01515 	stw	r3,84(sp)
  109d04:	010c6280 	call	10c628 <__mcmp>
  109d08:	d8c01517 	ldw	r3,84(sp)
  109d0c:	8009883a 	mov	r4,r16
  109d10:	d8801515 	stw	r2,84(sp)
  109d14:	180b883a 	mov	r5,r3
  109d18:	010bd600 	call	10bd60 <_Bfree>
  109d1c:	d8801517 	ldw	r2,84(sp)
  109d20:	1000041e 	bne	r2,zero,109d34 <_dtoa_r+0xdb4>
  109d24:	d9000417 	ldw	r4,16(sp)
  109d28:	2000021e 	bne	r4,zero,109d34 <_dtoa_r+0xdb4>
  109d2c:	d8c00317 	ldw	r3,12(sp)
  109d30:	18007926 	beq	r3,zero,109f18 <_dtoa_r+0xf98>
  109d34:	a8006616 	blt	r21,zero,109ed0 <_dtoa_r+0xf50>
  109d38:	a800041e 	bne	r21,zero,109d4c <_dtoa_r+0xdcc>
  109d3c:	d9000417 	ldw	r4,16(sp)
  109d40:	2000021e 	bne	r4,zero,109d4c <_dtoa_r+0xdcc>
  109d44:	d8c00317 	ldw	r3,12(sp)
  109d48:	18006126 	beq	r3,zero,109ed0 <_dtoa_r+0xf50>
  109d4c:	00814916 	blt	zero,r2,10a274 <_dtoa_r+0x12f4>
  109d50:	d8c00517 	ldw	r3,20(sp)
  109d54:	95400044 	addi	r21,r18,1
  109d58:	95c00005 	stb	r23,0(r18)
  109d5c:	a82d883a 	mov	r22,r21
  109d60:	90c14c26 	beq	r18,r3,10a294 <_dtoa_r+0x1314>
  109d64:	e00b883a 	mov	r5,fp
  109d68:	8009883a 	mov	r4,r16
  109d6c:	01800284 	movi	r6,10
  109d70:	000f883a 	mov	r7,zero
  109d74:	010bd880 	call	10bd88 <__multadd>
  109d78:	1039883a 	mov	fp,r2
  109d7c:	8cc07026 	beq	r17,r19,109f40 <_dtoa_r+0xfc0>
  109d80:	880b883a 	mov	r5,r17
  109d84:	01800284 	movi	r6,10
  109d88:	000f883a 	mov	r7,zero
  109d8c:	8009883a 	mov	r4,r16
  109d90:	010bd880 	call	10bd88 <__multadd>
  109d94:	980b883a 	mov	r5,r19
  109d98:	8009883a 	mov	r4,r16
  109d9c:	01800284 	movi	r6,10
  109da0:	000f883a 	mov	r7,zero
  109da4:	1023883a 	mov	r17,r2
  109da8:	010bd880 	call	10bd88 <__multadd>
  109dac:	1027883a 	mov	r19,r2
  109db0:	a825883a 	mov	r18,r21
  109db4:	003fc006 	br	109cb8 <black_to_red_frame+0xfe109cb8>
  109db8:	d9800317 	ldw	r6,12(sp)
  109dbc:	303f1e1e 	bne	r6,zero,109a38 <black_to_red_frame+0xfe109a38>
  109dc0:	00c00434 	movhi	r3,16
  109dc4:	18ffffc4 	addi	r3,r3,-1
  109dc8:	90c6703a 	and	r3,r18,r3
  109dcc:	183f1a1e 	bne	r3,zero,109a38 <black_to_red_frame+0xfe109a38>
  109dd0:	949ffc2c 	andhi	r18,r18,32752
  109dd4:	903f1826 	beq	r18,zero,109a38 <black_to_red_frame+0xfe109a38>
  109dd8:	d9c00817 	ldw	r7,32(sp)
  109ddc:	a8ab883a 	add	r21,r21,r2
  109de0:	1025883a 	mov	r18,r2
  109de4:	388f883a 	add	r7,r7,r2
  109de8:	d9c00815 	stw	r7,32(sp)
  109dec:	003f1306 	br	109a3c <black_to_red_frame+0xfe109a3c>
  109df0:	9805883a 	mov	r2,r19
  109df4:	003ee706 	br	109994 <black_to_red_frame+0xfe109994>
  109df8:	01800044 	movi	r6,1
  109dfc:	d9800c15 	stw	r6,48(sp)
  109e00:	d8802117 	ldw	r2,132(sp)
  109e04:	0080da0e 	bge	zero,r2,10a170 <_dtoa_r+0x11f0>
  109e08:	100d883a 	mov	r6,r2
  109e0c:	d8800d15 	stw	r2,52(sp)
  109e10:	d8800915 	stw	r2,36(sp)
  109e14:	003d2a06 	br	1092c0 <black_to_red_frame+0xfe1092c0>
  109e18:	d8800917 	ldw	r2,36(sp)
  109e1c:	00be4016 	blt	zero,r2,109720 <black_to_red_frame+0xfe109720>
  109e20:	1000b81e 	bne	r2,zero,10a104 <_dtoa_r+0x1184>
  109e24:	8809883a 	mov	r4,r17
  109e28:	980b883a 	mov	r5,r19
  109e2c:	000d883a 	mov	r6,zero
  109e30:	01d00534 	movhi	r7,16404
  109e34:	0112a100 	call	112a10 <__muldf3>
  109e38:	d9800317 	ldw	r6,12(sp)
  109e3c:	1009883a 	mov	r4,r2
  109e40:	180b883a 	mov	r5,r3
  109e44:	900f883a 	mov	r7,r18
  109e48:	011284c0 	call	11284c <__gedf2>
  109e4c:	0029883a 	mov	r20,zero
  109e50:	0023883a 	mov	r17,zero
  109e54:	10007716 	blt	r2,zero,10a034 <_dtoa_r+0x10b4>
  109e58:	d9002117 	ldw	r4,132(sp)
  109e5c:	dd800717 	ldw	r22,28(sp)
  109e60:	0108303a 	nor	r4,zero,r4
  109e64:	d9000615 	stw	r4,24(sp)
  109e68:	8009883a 	mov	r4,r16
  109e6c:	a00b883a 	mov	r5,r20
  109e70:	010bd600 	call	10bd60 <_Bfree>
  109e74:	883f4e1e 	bne	r17,zero,109bb0 <black_to_red_frame+0xfe109bb0>
  109e78:	003ded06 	br	109630 <black_to_red_frame+0xfe109630>
  109e7c:	e00b883a 	mov	r5,fp
  109e80:	8009883a 	mov	r4,r16
  109e84:	010c3900 	call	10c390 <__pow5mult>
  109e88:	1039883a 	mov	fp,r2
  109e8c:	003edc06 	br	109a00 <black_to_red_frame+0xfe109a00>
  109e90:	1000021e 	bne	r2,zero,109e9c <_dtoa_r+0xf1c>
  109e94:	ba40004c 	andi	r9,r23,1
  109e98:	483f2c1e 	bne	r9,zero,109b4c <black_to_red_frame+0xfe109b4c>
  109e9c:	01000c04 	movi	r4,48
  109ea0:	00000106 	br	109ea8 <_dtoa_r+0xf28>
  109ea4:	102d883a 	mov	r22,r2
  109ea8:	b0bfffc4 	addi	r2,r22,-1
  109eac:	10c00007 	ldb	r3,0(r2)
  109eb0:	193ffc26 	beq	r3,r4,109ea4 <black_to_red_frame+0xfe109ea4>
  109eb4:	003f3506 	br	109b8c <black_to_red_frame+0xfe109b8c>
  109eb8:	d9c00f17 	ldw	r7,60(sp)
  109ebc:	38015a26 	beq	r7,zero,10a428 <_dtoa_r+0x14a8>
  109ec0:	10810cc4 	addi	r2,r2,1075
  109ec4:	dd000a17 	ldw	r20,40(sp)
  109ec8:	dcc00817 	ldw	r19,32(sp)
  109ecc:	003ea506 	br	109964 <black_to_red_frame+0xfe109964>
  109ed0:	00800c0e 	bge	zero,r2,109f04 <_dtoa_r+0xf84>
  109ed4:	e00b883a 	mov	r5,fp
  109ed8:	8009883a 	mov	r4,r16
  109edc:	01800044 	movi	r6,1
  109ee0:	010c4d80 	call	10c4d8 <__lshift>
  109ee4:	1009883a 	mov	r4,r2
  109ee8:	a00b883a 	mov	r5,r20
  109eec:	1039883a 	mov	fp,r2
  109ef0:	010c6280 	call	10c628 <__mcmp>
  109ef4:	0081930e 	bge	zero,r2,10a544 <_dtoa_r+0x15c4>
  109ef8:	00800e44 	movi	r2,57
  109efc:	b8800a26 	beq	r23,r2,109f28 <_dtoa_r+0xfa8>
  109f00:	b5c00c44 	addi	r23,r22,49
  109f04:	882b883a 	mov	r21,r17
  109f08:	95800044 	addi	r22,r18,1
  109f0c:	95c00005 	stb	r23,0(r18)
  109f10:	9823883a 	mov	r17,r19
  109f14:	003f1d06 	br	109b8c <black_to_red_frame+0xfe109b8c>
  109f18:	00800e44 	movi	r2,57
  109f1c:	b8800226 	beq	r23,r2,109f28 <_dtoa_r+0xfa8>
  109f20:	057ff716 	blt	zero,r21,109f00 <black_to_red_frame+0xfe109f00>
  109f24:	003ff706 	br	109f04 <black_to_red_frame+0xfe109f04>
  109f28:	01000e44 	movi	r4,57
  109f2c:	882b883a 	mov	r21,r17
  109f30:	95800044 	addi	r22,r18,1
  109f34:	91000005 	stb	r4,0(r18)
  109f38:	9823883a 	mov	r17,r19
  109f3c:	003f0406 	br	109b50 <black_to_red_frame+0xfe109b50>
  109f40:	880b883a 	mov	r5,r17
  109f44:	8009883a 	mov	r4,r16
  109f48:	01800284 	movi	r6,10
  109f4c:	000f883a 	mov	r7,zero
  109f50:	010bd880 	call	10bd88 <__multadd>
  109f54:	1023883a 	mov	r17,r2
  109f58:	1027883a 	mov	r19,r2
  109f5c:	a825883a 	mov	r18,r21
  109f60:	003f5506 	br	109cb8 <black_to_red_frame+0xfe109cb8>
  109f64:	8009883a 	mov	r4,r16
  109f68:	180b883a 	mov	r5,r3
  109f6c:	010bd600 	call	10bd60 <_Bfree>
  109f70:	00800044 	movi	r2,1
  109f74:	003f6f06 	br	109d34 <black_to_red_frame+0xfe109d34>
  109f78:	e009883a 	mov	r4,fp
  109f7c:	a00b883a 	mov	r5,r20
  109f80:	010c6280 	call	10c628 <__mcmp>
  109f84:	103ecc0e 	bge	r2,zero,109ab8 <black_to_red_frame+0xfe109ab8>
  109f88:	e00b883a 	mov	r5,fp
  109f8c:	8009883a 	mov	r4,r16
  109f90:	01800284 	movi	r6,10
  109f94:	000f883a 	mov	r7,zero
  109f98:	010bd880 	call	10bd88 <__multadd>
  109f9c:	1039883a 	mov	fp,r2
  109fa0:	d8800617 	ldw	r2,24(sp)
  109fa4:	d8c00c17 	ldw	r3,48(sp)
  109fa8:	10bfffc4 	addi	r2,r2,-1
  109fac:	d8800615 	stw	r2,24(sp)
  109fb0:	1801681e 	bne	r3,zero,10a554 <_dtoa_r+0x15d4>
  109fb4:	d9800d17 	ldw	r6,52(sp)
  109fb8:	d9800915 	stw	r6,36(sp)
  109fbc:	003ebe06 	br	109ab8 <black_to_red_frame+0xfe109ab8>
  109fc0:	a0800417 	ldw	r2,16(r20)
  109fc4:	10800104 	addi	r2,r2,4
  109fc8:	1085883a 	add	r2,r2,r2
  109fcc:	1085883a 	add	r2,r2,r2
  109fd0:	a085883a 	add	r2,r20,r2
  109fd4:	11000017 	ldw	r4,0(r2)
  109fd8:	010bfd00 	call	10bfd0 <__hi0bits>
  109fdc:	00c00804 	movi	r3,32
  109fe0:	1885c83a 	sub	r2,r3,r2
  109fe4:	003e9806 	br	109a48 <black_to_red_frame+0xfe109a48>
  109fe8:	d8800717 	ldw	r2,28(sp)
  109fec:	003c1306 	br	10903c <black_to_red_frame+0xfe10903c>
  109ff0:	00800084 	movi	r2,2
  109ff4:	18bdb11e 	bne	r3,r2,1096bc <black_to_red_frame+0xfe1096bc>
  109ff8:	d8000c15 	stw	zero,48(sp)
  109ffc:	003f8006 	br	109e00 <black_to_red_frame+0xfe109e00>
  10a000:	d8c00417 	ldw	r3,16(sp)
  10a004:	00800084 	movi	r2,2
  10a008:	10fead0e 	bge	r2,r3,109ac0 <black_to_red_frame+0xfe109ac0>
  10a00c:	383f921e 	bne	r7,zero,109e58 <black_to_red_frame+0xfe109e58>
  10a010:	a00b883a 	mov	r5,r20
  10a014:	8009883a 	mov	r4,r16
  10a018:	01800144 	movi	r6,5
  10a01c:	010bd880 	call	10bd88 <__multadd>
  10a020:	e009883a 	mov	r4,fp
  10a024:	100b883a 	mov	r5,r2
  10a028:	1029883a 	mov	r20,r2
  10a02c:	010c6280 	call	10c628 <__mcmp>
  10a030:	00bf890e 	bge	zero,r2,109e58 <black_to_red_frame+0xfe109e58>
  10a034:	d9c00617 	ldw	r7,24(sp)
  10a038:	d9800717 	ldw	r6,28(sp)
  10a03c:	00800c44 	movi	r2,49
  10a040:	39c00044 	addi	r7,r7,1
  10a044:	35800044 	addi	r22,r6,1
  10a048:	30800005 	stb	r2,0(r6)
  10a04c:	d9c00615 	stw	r7,24(sp)
  10a050:	003f8506 	br	109e68 <black_to_red_frame+0xfe109e68>
  10a054:	d9800617 	ldw	r6,24(sp)
  10a058:	d9c00717 	ldw	r7,28(sp)
  10a05c:	00800c44 	movi	r2,49
  10a060:	31800044 	addi	r6,r6,1
  10a064:	d9800615 	stw	r6,24(sp)
  10a068:	38800005 	stb	r2,0(r7)
  10a06c:	003ec706 	br	109b8c <black_to_red_frame+0xfe109b8c>
  10a070:	df000417 	ldw	fp,16(sp)
  10a074:	dc000317 	ldw	r16,12(sp)
  10a078:	003d6d06 	br	109630 <black_to_red_frame+0xfe109630>
  10a07c:	8809883a 	mov	r4,r17
  10a080:	0113b180 	call	113b18 <__floatsidf>
  10a084:	9809883a 	mov	r4,r19
  10a088:	a00b883a 	mov	r5,r20
  10a08c:	100d883a 	mov	r6,r2
  10a090:	180f883a 	mov	r7,r3
  10a094:	0112a100 	call	112a10 <__muldf3>
  10a098:	1009883a 	mov	r4,r2
  10a09c:	180b883a 	mov	r5,r3
  10a0a0:	000d883a 	mov	r6,zero
  10a0a4:	01d00734 	movhi	r7,16412
  10a0a8:	01115b00 	call	1115b0 <__adddf3>
  10a0ac:	05bf3034 	movhi	r22,64704
  10a0b0:	1023883a 	mov	r17,r2
  10a0b4:	1daf883a 	add	r23,r3,r22
  10a0b8:	9809883a 	mov	r4,r19
  10a0bc:	a00b883a 	mov	r5,r20
  10a0c0:	000d883a 	mov	r6,zero
  10a0c4:	01d00534 	movhi	r7,16404
  10a0c8:	01132100 	call	113210 <__subdf3>
  10a0cc:	1009883a 	mov	r4,r2
  10a0d0:	180b883a 	mov	r5,r3
  10a0d4:	880d883a 	mov	r6,r17
  10a0d8:	b80f883a 	mov	r7,r23
  10a0dc:	1027883a 	mov	r19,r2
  10a0e0:	1829883a 	mov	r20,r3
  10a0e4:	011284c0 	call	11284c <__gedf2>
  10a0e8:	00806d16 	blt	zero,r2,10a2a0 <_dtoa_r+0x1320>
  10a0ec:	b9e0003c 	xorhi	r7,r23,32768
  10a0f0:	9809883a 	mov	r4,r19
  10a0f4:	a00b883a 	mov	r5,r20
  10a0f8:	880d883a 	mov	r6,r17
  10a0fc:	01129240 	call	112924 <__ledf2>
  10a100:	103d7a0e 	bge	r2,zero,1096ec <black_to_red_frame+0xfe1096ec>
  10a104:	0029883a 	mov	r20,zero
  10a108:	0023883a 	mov	r17,zero
  10a10c:	003f5206 	br	109e58 <black_to_red_frame+0xfe109e58>
  10a110:	d9800a17 	ldw	r6,40(sp)
  10a114:	e00b883a 	mov	r5,fp
  10a118:	8009883a 	mov	r4,r16
  10a11c:	010c3900 	call	10c390 <__pow5mult>
  10a120:	1039883a 	mov	fp,r2
  10a124:	003e3606 	br	109a00 <black_to_red_frame+0xfe109a00>
  10a128:	d8000c15 	stw	zero,48(sp)
  10a12c:	003c5c06 	br	1092a0 <black_to_red_frame+0xfe1092a0>
  10a130:	d9000a17 	ldw	r4,40(sp)
  10a134:	d9800b17 	ldw	r6,44(sp)
  10a138:	dd000a15 	stw	r20,40(sp)
  10a13c:	a105c83a 	sub	r2,r20,r4
  10a140:	308d883a 	add	r6,r6,r2
  10a144:	d9800b15 	stw	r6,44(sp)
  10a148:	0029883a 	mov	r20,zero
  10a14c:	003e0106 	br	109954 <black_to_red_frame+0xfe109954>
  10a150:	dcc00317 	ldw	r19,12(sp)
  10a154:	9029883a 	mov	r20,r18
  10a158:	04400084 	movi	r17,2
  10a15c:	003c8606 	br	109378 <black_to_red_frame+0xfe109378>
  10a160:	3023883a 	mov	r17,r6
  10a164:	80001115 	stw	zero,68(r16)
  10a168:	000b883a 	mov	r5,zero
  10a16c:	003c6006 	br	1092f0 <black_to_red_frame+0xfe1092f0>
  10a170:	04400044 	movi	r17,1
  10a174:	dc400d15 	stw	r17,52(sp)
  10a178:	dc400915 	stw	r17,36(sp)
  10a17c:	dc402115 	stw	r17,132(sp)
  10a180:	003ff806 	br	10a164 <black_to_red_frame+0xfe10a164>
  10a184:	d8800617 	ldw	r2,24(sp)
  10a188:	00adc83a 	sub	r22,zero,r2
  10a18c:	b000ac26 	beq	r22,zero,10a440 <_dtoa_r+0x14c0>
  10a190:	b08003cc 	andi	r2,r22,15
  10a194:	100490fa 	slli	r2,r2,3
  10a198:	00c00474 	movhi	r3,17
  10a19c:	18da6a04 	addi	r3,r3,27048
  10a1a0:	d9000317 	ldw	r4,12(sp)
  10a1a4:	1885883a 	add	r2,r3,r2
  10a1a8:	11800017 	ldw	r6,0(r2)
  10a1ac:	11c00117 	ldw	r7,4(r2)
  10a1b0:	b02dd13a 	srai	r22,r22,4
  10a1b4:	900b883a 	mov	r5,r18
  10a1b8:	0112a100 	call	112a10 <__muldf3>
  10a1bc:	1027883a 	mov	r19,r2
  10a1c0:	1829883a 	mov	r20,r3
  10a1c4:	b000ec26 	beq	r22,zero,10a578 <_dtoa_r+0x15f8>
  10a1c8:	05c00474 	movhi	r23,17
  10a1cc:	bdda6004 	addi	r23,r23,27008
  10a1d0:	04400084 	movi	r17,2
  10a1d4:	b180004c 	andi	r6,r22,1
  10a1d8:	1009883a 	mov	r4,r2
  10a1dc:	b02dd07a 	srai	r22,r22,1
  10a1e0:	180b883a 	mov	r5,r3
  10a1e4:	30000426 	beq	r6,zero,10a1f8 <_dtoa_r+0x1278>
  10a1e8:	b9800017 	ldw	r6,0(r23)
  10a1ec:	b9c00117 	ldw	r7,4(r23)
  10a1f0:	8c400044 	addi	r17,r17,1
  10a1f4:	0112a100 	call	112a10 <__muldf3>
  10a1f8:	bdc00204 	addi	r23,r23,8
  10a1fc:	b03ff51e 	bne	r22,zero,10a1d4 <black_to_red_frame+0xfe10a1d4>
  10a200:	1027883a 	mov	r19,r2
  10a204:	1829883a 	mov	r20,r3
  10a208:	003c7406 	br	1093dc <black_to_red_frame+0xfe1093dc>
  10a20c:	d9800617 	ldw	r6,24(sp)
  10a210:	d9c00717 	ldw	r7,28(sp)
  10a214:	00c00c04 	movi	r3,48
  10a218:	31800044 	addi	r6,r6,1
  10a21c:	38c00005 	stb	r3,0(r7)
  10a220:	02400c44 	movi	r9,49
  10a224:	d9800615 	stw	r6,24(sp)
  10a228:	12400005 	stb	r9,0(r2)
  10a22c:	003d0006 	br	109630 <black_to_red_frame+0xfe109630>
  10a230:	89400117 	ldw	r5,4(r17)
  10a234:	8009883a 	mov	r4,r16
  10a238:	010bcb80 	call	10bcb8 <_Balloc>
  10a23c:	89800417 	ldw	r6,16(r17)
  10a240:	11000304 	addi	r4,r2,12
  10a244:	89400304 	addi	r5,r17,12
  10a248:	31800084 	addi	r6,r6,2
  10a24c:	318d883a 	add	r6,r6,r6
  10a250:	318d883a 	add	r6,r6,r6
  10a254:	1025883a 	mov	r18,r2
  10a258:	010b95c0 	call	10b95c <memcpy>
  10a25c:	8009883a 	mov	r4,r16
  10a260:	900b883a 	mov	r5,r18
  10a264:	01800044 	movi	r6,1
  10a268:	010c4d80 	call	10c4d8 <__lshift>
  10a26c:	1027883a 	mov	r19,r2
  10a270:	003e8806 	br	109c94 <black_to_red_frame+0xfe109c94>
  10a274:	00800e44 	movi	r2,57
  10a278:	b8bf2b26 	beq	r23,r2,109f28 <black_to_red_frame+0xfe109f28>
  10a27c:	ba400044 	addi	r9,r23,1
  10a280:	882b883a 	mov	r21,r17
  10a284:	95800044 	addi	r22,r18,1
  10a288:	92400005 	stb	r9,0(r18)
  10a28c:	9823883a 	mov	r17,r19
  10a290:	003e3e06 	br	109b8c <black_to_red_frame+0xfe109b8c>
  10a294:	882b883a 	mov	r21,r17
  10a298:	9823883a 	mov	r17,r19
  10a29c:	003e2206 	br	109b28 <black_to_red_frame+0xfe109b28>
  10a2a0:	0029883a 	mov	r20,zero
  10a2a4:	0023883a 	mov	r17,zero
  10a2a8:	003f6206 	br	10a034 <black_to_red_frame+0xfe10a034>
  10a2ac:	59bfffc4 	addi	r6,r11,-1
  10a2b0:	300490fa 	slli	r2,r6,3
  10a2b4:	00c00474 	movhi	r3,17
  10a2b8:	18da6a04 	addi	r3,r3,27048
  10a2bc:	b80f883a 	mov	r7,r23
  10a2c0:	1885883a 	add	r2,r3,r2
  10a2c4:	11000017 	ldw	r4,0(r2)
  10a2c8:	11400117 	ldw	r5,4(r2)
  10a2cc:	d8800717 	ldw	r2,28(sp)
  10a2d0:	d9801015 	stw	r6,64(sp)
  10a2d4:	880d883a 	mov	r6,r17
  10a2d8:	dac01615 	stw	r11,88(sp)
  10a2dc:	15800044 	addi	r22,r2,1
  10a2e0:	0112a100 	call	112a10 <__muldf3>
  10a2e4:	a00b883a 	mov	r5,r20
  10a2e8:	9809883a 	mov	r4,r19
  10a2ec:	d8c01215 	stw	r3,72(sp)
  10a2f0:	d8801115 	stw	r2,68(sp)
  10a2f4:	0113a980 	call	113a98 <__fixdfsi>
  10a2f8:	1009883a 	mov	r4,r2
  10a2fc:	1023883a 	mov	r17,r2
  10a300:	0113b180 	call	113b18 <__floatsidf>
  10a304:	9809883a 	mov	r4,r19
  10a308:	a00b883a 	mov	r5,r20
  10a30c:	100d883a 	mov	r6,r2
  10a310:	180f883a 	mov	r7,r3
  10a314:	01132100 	call	113210 <__subdf3>
  10a318:	1815883a 	mov	r10,r3
  10a31c:	d8c00717 	ldw	r3,28(sp)
  10a320:	8c400c04 	addi	r17,r17,48
  10a324:	102f883a 	mov	r23,r2
  10a328:	1c400005 	stb	r17,0(r3)
  10a32c:	dac01617 	ldw	r11,88(sp)
  10a330:	00800044 	movi	r2,1
  10a334:	58802426 	beq	r11,r2,10a3c8 <_dtoa_r+0x1448>
  10a338:	d9800717 	ldw	r6,28(sp)
  10a33c:	dc001415 	stw	r16,80(sp)
  10a340:	b805883a 	mov	r2,r23
  10a344:	32d7883a 	add	r11,r6,r11
  10a348:	b027883a 	mov	r19,r22
  10a34c:	5821883a 	mov	r16,r11
  10a350:	5007883a 	mov	r3,r10
  10a354:	902f883a 	mov	r23,r18
  10a358:	000d883a 	mov	r6,zero
  10a35c:	01d00934 	movhi	r7,16420
  10a360:	1009883a 	mov	r4,r2
  10a364:	180b883a 	mov	r5,r3
  10a368:	0112a100 	call	112a10 <__muldf3>
  10a36c:	180b883a 	mov	r5,r3
  10a370:	1009883a 	mov	r4,r2
  10a374:	1829883a 	mov	r20,r3
  10a378:	1025883a 	mov	r18,r2
  10a37c:	0113a980 	call	113a98 <__fixdfsi>
  10a380:	1009883a 	mov	r4,r2
  10a384:	1023883a 	mov	r17,r2
  10a388:	0113b180 	call	113b18 <__floatsidf>
  10a38c:	9009883a 	mov	r4,r18
  10a390:	a00b883a 	mov	r5,r20
  10a394:	100d883a 	mov	r6,r2
  10a398:	180f883a 	mov	r7,r3
  10a39c:	8c400c04 	addi	r17,r17,48
  10a3a0:	01132100 	call	113210 <__subdf3>
  10a3a4:	9cc00044 	addi	r19,r19,1
  10a3a8:	9c7fffc5 	stb	r17,-1(r19)
  10a3ac:	9c3fea1e 	bne	r19,r16,10a358 <black_to_red_frame+0xfe10a358>
  10a3b0:	d9c01017 	ldw	r7,64(sp)
  10a3b4:	dc001417 	ldw	r16,80(sp)
  10a3b8:	b825883a 	mov	r18,r23
  10a3bc:	1815883a 	mov	r10,r3
  10a3c0:	102f883a 	mov	r23,r2
  10a3c4:	b1ed883a 	add	r22,r22,r7
  10a3c8:	d9001117 	ldw	r4,68(sp)
  10a3cc:	d9401217 	ldw	r5,72(sp)
  10a3d0:	000d883a 	mov	r6,zero
  10a3d4:	01cff834 	movhi	r7,16352
  10a3d8:	da801615 	stw	r10,88(sp)
  10a3dc:	01115b00 	call	1115b0 <__adddf3>
  10a3e0:	da801617 	ldw	r10,88(sp)
  10a3e4:	1009883a 	mov	r4,r2
  10a3e8:	180b883a 	mov	r5,r3
  10a3ec:	500f883a 	mov	r7,r10
  10a3f0:	b80d883a 	mov	r6,r23
  10a3f4:	01129240 	call	112924 <__ledf2>
  10a3f8:	da801617 	ldw	r10,88(sp)
  10a3fc:	1000330e 	bge	r2,zero,10a4cc <_dtoa_r+0x154c>
  10a400:	d9001317 	ldw	r4,76(sp)
  10a404:	b53fffc3 	ldbu	r20,-1(r22)
  10a408:	d9000615 	stw	r4,24(sp)
  10a40c:	003d3706 	br	1098ec <black_to_red_frame+0xfe1098ec>
  10a410:	d8800817 	ldw	r2,32(sp)
  10a414:	11e7c83a 	sub	r19,r2,r7
  10a418:	0005883a 	mov	r2,zero
  10a41c:	003d5106 	br	109964 <black_to_red_frame+0xfe109964>
  10a420:	00800044 	movi	r2,1
  10a424:	003dbd06 	br	109b1c <black_to_red_frame+0xfe109b1c>
  10a428:	d8800217 	ldw	r2,8(sp)
  10a42c:	00c00d84 	movi	r3,54
  10a430:	dd000a17 	ldw	r20,40(sp)
  10a434:	1885c83a 	sub	r2,r3,r2
  10a438:	dcc00817 	ldw	r19,32(sp)
  10a43c:	003d4906 	br	109964 <black_to_red_frame+0xfe109964>
  10a440:	dcc00317 	ldw	r19,12(sp)
  10a444:	9029883a 	mov	r20,r18
  10a448:	04400084 	movi	r17,2
  10a44c:	003be306 	br	1093dc <black_to_red_frame+0xfe1093dc>
  10a450:	d9000917 	ldw	r4,36(sp)
  10a454:	203f0926 	beq	r4,zero,10a07c <black_to_red_frame+0xfe10a07c>
  10a458:	d9800d17 	ldw	r6,52(sp)
  10a45c:	01bca30e 	bge	zero,r6,1096ec <black_to_red_frame+0xfe1096ec>
  10a460:	a00b883a 	mov	r5,r20
  10a464:	9809883a 	mov	r4,r19
  10a468:	000d883a 	mov	r6,zero
  10a46c:	01d00934 	movhi	r7,16420
  10a470:	0112a100 	call	112a10 <__muldf3>
  10a474:	89000044 	addi	r4,r17,1
  10a478:	1027883a 	mov	r19,r2
  10a47c:	1829883a 	mov	r20,r3
  10a480:	0113b180 	call	113b18 <__floatsidf>
  10a484:	9809883a 	mov	r4,r19
  10a488:	a00b883a 	mov	r5,r20
  10a48c:	100d883a 	mov	r6,r2
  10a490:	180f883a 	mov	r7,r3
  10a494:	0112a100 	call	112a10 <__muldf3>
  10a498:	01d00734 	movhi	r7,16412
  10a49c:	1009883a 	mov	r4,r2
  10a4a0:	180b883a 	mov	r5,r3
  10a4a4:	000d883a 	mov	r6,zero
  10a4a8:	01115b00 	call	1115b0 <__adddf3>
  10a4ac:	d9c00617 	ldw	r7,24(sp)
  10a4b0:	05bf3034 	movhi	r22,64704
  10a4b4:	1023883a 	mov	r17,r2
  10a4b8:	39ffffc4 	addi	r7,r7,-1
  10a4bc:	d9c01315 	stw	r7,76(sp)
  10a4c0:	1daf883a 	add	r23,r3,r22
  10a4c4:	dac00d17 	ldw	r11,52(sp)
  10a4c8:	003be006 	br	10944c <black_to_red_frame+0xfe10944c>
  10a4cc:	d9801117 	ldw	r6,68(sp)
  10a4d0:	d9c01217 	ldw	r7,72(sp)
  10a4d4:	0009883a 	mov	r4,zero
  10a4d8:	014ff834 	movhi	r5,16352
  10a4dc:	da801615 	stw	r10,88(sp)
  10a4e0:	01132100 	call	113210 <__subdf3>
  10a4e4:	da801617 	ldw	r10,88(sp)
  10a4e8:	1009883a 	mov	r4,r2
  10a4ec:	180b883a 	mov	r5,r3
  10a4f0:	b80d883a 	mov	r6,r23
  10a4f4:	500f883a 	mov	r7,r10
  10a4f8:	011284c0 	call	11284c <__gedf2>
  10a4fc:	00bc7b0e 	bge	zero,r2,1096ec <black_to_red_frame+0xfe1096ec>
  10a500:	01000c04 	movi	r4,48
  10a504:	00000106 	br	10a50c <_dtoa_r+0x158c>
  10a508:	102d883a 	mov	r22,r2
  10a50c:	b0bfffc4 	addi	r2,r22,-1
  10a510:	10c00007 	ldb	r3,0(r2)
  10a514:	193ffc26 	beq	r3,r4,10a508 <black_to_red_frame+0xfe10a508>
  10a518:	d9001317 	ldw	r4,76(sp)
  10a51c:	d9000615 	stw	r4,24(sp)
  10a520:	003c4306 	br	109630 <black_to_red_frame+0xfe109630>
  10a524:	d8c01317 	ldw	r3,76(sp)
  10a528:	dc001117 	ldw	r16,68(sp)
  10a52c:	d8c00615 	stw	r3,24(sp)
  10a530:	003cee06 	br	1098ec <black_to_red_frame+0xfe1098ec>
  10a534:	dd401217 	ldw	r21,72(sp)
  10a538:	dc001117 	ldw	r16,68(sp)
  10a53c:	dc801417 	ldw	r18,80(sp)
  10a540:	003c6a06 	br	1096ec <black_to_red_frame+0xfe1096ec>
  10a544:	103e6f1e 	bne	r2,zero,109f04 <black_to_red_frame+0xfe109f04>
  10a548:	b880004c 	andi	r2,r23,1
  10a54c:	103e6d26 	beq	r2,zero,109f04 <black_to_red_frame+0xfe109f04>
  10a550:	003e6906 	br	109ef8 <black_to_red_frame+0xfe109ef8>
  10a554:	8009883a 	mov	r4,r16
  10a558:	880b883a 	mov	r5,r17
  10a55c:	01800284 	movi	r6,10
  10a560:	000f883a 	mov	r7,zero
  10a564:	010bd880 	call	10bd88 <__multadd>
  10a568:	d9000d17 	ldw	r4,52(sp)
  10a56c:	1023883a 	mov	r17,r2
  10a570:	d9000915 	stw	r4,36(sp)
  10a574:	003d5006 	br	109ab8 <black_to_red_frame+0xfe109ab8>
  10a578:	04400084 	movi	r17,2
  10a57c:	003b9706 	br	1093dc <black_to_red_frame+0xfe1093dc>
  10a580:	d8801317 	ldw	r2,76(sp)
  10a584:	d8800615 	stw	r2,24(sp)
  10a588:	003cd806 	br	1098ec <black_to_red_frame+0xfe1098ec>
  10a58c:	d8801317 	ldw	r2,76(sp)
  10a590:	d8800615 	stw	r2,24(sp)
  10a594:	003c2606 	br	109630 <black_to_red_frame+0xfe109630>
  10a598:	04c00044 	movi	r19,1
  10a59c:	003b3506 	br	109274 <black_to_red_frame+0xfe109274>
  10a5a0:	3023883a 	mov	r17,r6
  10a5a4:	000b883a 	mov	r5,zero
  10a5a8:	003b5106 	br	1092f0 <black_to_red_frame+0xfe1092f0>
  10a5ac:	20fd3426 	beq	r4,r3,109a80 <black_to_red_frame+0xfe109a80>
  10a5b0:	00c00f04 	movi	r3,60
  10a5b4:	1885c83a 	sub	r2,r3,r2
  10a5b8:	003da106 	br	109c40 <black_to_red_frame+0xfe109c40>

0010a5bc <_fflush_r>:
  10a5bc:	defffb04 	addi	sp,sp,-20
  10a5c0:	dcc00315 	stw	r19,12(sp)
  10a5c4:	dc400115 	stw	r17,4(sp)
  10a5c8:	dfc00415 	stw	ra,16(sp)
  10a5cc:	dc800215 	stw	r18,8(sp)
  10a5d0:	dc000015 	stw	r16,0(sp)
  10a5d4:	2027883a 	mov	r19,r4
  10a5d8:	2823883a 	mov	r17,r5
  10a5dc:	20000226 	beq	r4,zero,10a5e8 <_fflush_r+0x2c>
  10a5e0:	20800e17 	ldw	r2,56(r4)
  10a5e4:	10005826 	beq	r2,zero,10a748 <_fflush_r+0x18c>
  10a5e8:	8880030b 	ldhu	r2,12(r17)
  10a5ec:	10ffffcc 	andi	r3,r2,65535
  10a5f0:	18e0001c 	xori	r3,r3,32768
  10a5f4:	18e00004 	addi	r3,r3,-32768
  10a5f8:	18002b26 	beq	r3,zero,10a6a8 <_fflush_r+0xec>
  10a5fc:	10c0020c 	andi	r3,r2,8
  10a600:	1800311e 	bne	r3,zero,10a6c8 <_fflush_r+0x10c>
  10a604:	88c00117 	ldw	r3,4(r17)
  10a608:	10820014 	ori	r2,r2,2048
  10a60c:	8880030d 	sth	r2,12(r17)
  10a610:	00c05c0e 	bge	zero,r3,10a784 <_fflush_r+0x1c8>
  10a614:	88c00a17 	ldw	r3,40(r17)
  10a618:	18002326 	beq	r3,zero,10a6a8 <_fflush_r+0xec>
  10a61c:	9c000017 	ldw	r16,0(r19)
  10a620:	1104000c 	andi	r4,r2,4096
  10a624:	98000015 	stw	zero,0(r19)
  10a628:	20004b26 	beq	r4,zero,10a758 <_fflush_r+0x19c>
  10a62c:	89801417 	ldw	r6,80(r17)
  10a630:	1080010c 	andi	r2,r2,4
  10a634:	10000626 	beq	r2,zero,10a650 <_fflush_r+0x94>
  10a638:	89000117 	ldw	r4,4(r17)
  10a63c:	88800c17 	ldw	r2,48(r17)
  10a640:	310dc83a 	sub	r6,r6,r4
  10a644:	10000226 	beq	r2,zero,10a650 <_fflush_r+0x94>
  10a648:	88800f17 	ldw	r2,60(r17)
  10a64c:	308dc83a 	sub	r6,r6,r2
  10a650:	89400717 	ldw	r5,28(r17)
  10a654:	9809883a 	mov	r4,r19
  10a658:	000f883a 	mov	r7,zero
  10a65c:	183ee83a 	callr	r3
  10a660:	00ffffc4 	movi	r3,-1
  10a664:	10c04a26 	beq	r2,r3,10a790 <_fflush_r+0x1d4>
  10a668:	88c0030b 	ldhu	r3,12(r17)
  10a66c:	89000417 	ldw	r4,16(r17)
  10a670:	88000115 	stw	zero,4(r17)
  10a674:	197dffcc 	andi	r5,r3,63487
  10a678:	8940030d 	sth	r5,12(r17)
  10a67c:	89000015 	stw	r4,0(r17)
  10a680:	18c4000c 	andi	r3,r3,4096
  10a684:	1800581e 	bne	r3,zero,10a7e8 <_fflush_r+0x22c>
  10a688:	89400c17 	ldw	r5,48(r17)
  10a68c:	9c000015 	stw	r16,0(r19)
  10a690:	28000526 	beq	r5,zero,10a6a8 <_fflush_r+0xec>
  10a694:	88801004 	addi	r2,r17,64
  10a698:	28800226 	beq	r5,r2,10a6a4 <_fflush_r+0xe8>
  10a69c:	9809883a 	mov	r4,r19
  10a6a0:	010ad100 	call	10ad10 <_free_r>
  10a6a4:	88000c15 	stw	zero,48(r17)
  10a6a8:	0005883a 	mov	r2,zero
  10a6ac:	dfc00417 	ldw	ra,16(sp)
  10a6b0:	dcc00317 	ldw	r19,12(sp)
  10a6b4:	dc800217 	ldw	r18,8(sp)
  10a6b8:	dc400117 	ldw	r17,4(sp)
  10a6bc:	dc000017 	ldw	r16,0(sp)
  10a6c0:	dec00504 	addi	sp,sp,20
  10a6c4:	f800283a 	ret
  10a6c8:	8c800417 	ldw	r18,16(r17)
  10a6cc:	903ff626 	beq	r18,zero,10a6a8 <black_to_red_frame+0xfe10a6a8>
  10a6d0:	8c000017 	ldw	r16,0(r17)
  10a6d4:	108000cc 	andi	r2,r2,3
  10a6d8:	8c800015 	stw	r18,0(r17)
  10a6dc:	84a1c83a 	sub	r16,r16,r18
  10a6e0:	10001b26 	beq	r2,zero,10a750 <_fflush_r+0x194>
  10a6e4:	0005883a 	mov	r2,zero
  10a6e8:	88800215 	stw	r2,8(r17)
  10a6ec:	04000316 	blt	zero,r16,10a6fc <_fflush_r+0x140>
  10a6f0:	003fed06 	br	10a6a8 <black_to_red_frame+0xfe10a6a8>
  10a6f4:	90a5883a 	add	r18,r18,r2
  10a6f8:	043feb0e 	bge	zero,r16,10a6a8 <black_to_red_frame+0xfe10a6a8>
  10a6fc:	88800917 	ldw	r2,36(r17)
  10a700:	89400717 	ldw	r5,28(r17)
  10a704:	800f883a 	mov	r7,r16
  10a708:	900d883a 	mov	r6,r18
  10a70c:	9809883a 	mov	r4,r19
  10a710:	103ee83a 	callr	r2
  10a714:	80a1c83a 	sub	r16,r16,r2
  10a718:	00bff616 	blt	zero,r2,10a6f4 <black_to_red_frame+0xfe10a6f4>
  10a71c:	88c0030b 	ldhu	r3,12(r17)
  10a720:	00bfffc4 	movi	r2,-1
  10a724:	18c01014 	ori	r3,r3,64
  10a728:	88c0030d 	sth	r3,12(r17)
  10a72c:	dfc00417 	ldw	ra,16(sp)
  10a730:	dcc00317 	ldw	r19,12(sp)
  10a734:	dc800217 	ldw	r18,8(sp)
  10a738:	dc400117 	ldw	r17,4(sp)
  10a73c:	dc000017 	ldw	r16,0(sp)
  10a740:	dec00504 	addi	sp,sp,20
  10a744:	f800283a 	ret
  10a748:	010a8dc0 	call	10a8dc <__sinit>
  10a74c:	003fa606 	br	10a5e8 <black_to_red_frame+0xfe10a5e8>
  10a750:	88800517 	ldw	r2,20(r17)
  10a754:	003fe406 	br	10a6e8 <black_to_red_frame+0xfe10a6e8>
  10a758:	89400717 	ldw	r5,28(r17)
  10a75c:	000d883a 	mov	r6,zero
  10a760:	9809883a 	mov	r4,r19
  10a764:	01c00044 	movi	r7,1
  10a768:	183ee83a 	callr	r3
  10a76c:	100d883a 	mov	r6,r2
  10a770:	00bfffc4 	movi	r2,-1
  10a774:	30801326 	beq	r6,r2,10a7c4 <_fflush_r+0x208>
  10a778:	8880030b 	ldhu	r2,12(r17)
  10a77c:	88c00a17 	ldw	r3,40(r17)
  10a780:	003fab06 	br	10a630 <black_to_red_frame+0xfe10a630>
  10a784:	88c00f17 	ldw	r3,60(r17)
  10a788:	00ffa216 	blt	zero,r3,10a614 <black_to_red_frame+0xfe10a614>
  10a78c:	003fc606 	br	10a6a8 <black_to_red_frame+0xfe10a6a8>
  10a790:	98c00017 	ldw	r3,0(r19)
  10a794:	183fb426 	beq	r3,zero,10a668 <black_to_red_frame+0xfe10a668>
  10a798:	01000744 	movi	r4,29
  10a79c:	19000226 	beq	r3,r4,10a7a8 <_fflush_r+0x1ec>
  10a7a0:	01000584 	movi	r4,22
  10a7a4:	1900121e 	bne	r3,r4,10a7f0 <_fflush_r+0x234>
  10a7a8:	88c0030b 	ldhu	r3,12(r17)
  10a7ac:	88800417 	ldw	r2,16(r17)
  10a7b0:	88000115 	stw	zero,4(r17)
  10a7b4:	18fdffcc 	andi	r3,r3,63487
  10a7b8:	88c0030d 	sth	r3,12(r17)
  10a7bc:	88800015 	stw	r2,0(r17)
  10a7c0:	003fb106 	br	10a688 <black_to_red_frame+0xfe10a688>
  10a7c4:	98800017 	ldw	r2,0(r19)
  10a7c8:	103feb26 	beq	r2,zero,10a778 <black_to_red_frame+0xfe10a778>
  10a7cc:	00c00744 	movi	r3,29
  10a7d0:	10c00226 	beq	r2,r3,10a7dc <_fflush_r+0x220>
  10a7d4:	00c00584 	movi	r3,22
  10a7d8:	10ffd01e 	bne	r2,r3,10a71c <black_to_red_frame+0xfe10a71c>
  10a7dc:	9c000015 	stw	r16,0(r19)
  10a7e0:	0005883a 	mov	r2,zero
  10a7e4:	003fb106 	br	10a6ac <black_to_red_frame+0xfe10a6ac>
  10a7e8:	88801415 	stw	r2,80(r17)
  10a7ec:	003fa606 	br	10a688 <black_to_red_frame+0xfe10a688>
  10a7f0:	88c0030b 	ldhu	r3,12(r17)
  10a7f4:	18c01014 	ori	r3,r3,64
  10a7f8:	88c0030d 	sth	r3,12(r17)
  10a7fc:	003fab06 	br	10a6ac <black_to_red_frame+0xfe10a6ac>

0010a800 <fflush>:
  10a800:	200b883a 	mov	r5,r4
  10a804:	20000426 	beq	r4,zero,10a818 <fflush+0x18>
  10a808:	008004b4 	movhi	r2,18
  10a80c:	10a1f404 	addi	r2,r2,-30768
  10a810:	11000017 	ldw	r4,0(r2)
  10a814:	010a5bc1 	jmpi	10a5bc <_fflush_r>
  10a818:	008004b4 	movhi	r2,18
  10a81c:	10a1f304 	addi	r2,r2,-30772
  10a820:	11000017 	ldw	r4,0(r2)
  10a824:	01400474 	movhi	r5,17
  10a828:	29696f04 	addi	r5,r5,-23108
  10a82c:	010b5341 	jmpi	10b534 <_fwalk_reent>

0010a830 <__fp_lock>:
  10a830:	0005883a 	mov	r2,zero
  10a834:	f800283a 	ret

0010a838 <__fp_unlock>:
  10a838:	0005883a 	mov	r2,zero
  10a83c:	f800283a 	ret

0010a840 <_cleanup_r>:
  10a840:	01400474 	movhi	r5,17
  10a844:	2940dd04 	addi	r5,r5,884
  10a848:	010b48c1 	jmpi	10b48c <_fwalk>

0010a84c <__sfmoreglue>:
  10a84c:	defffc04 	addi	sp,sp,-16
  10a850:	dc800215 	stw	r18,8(sp)
  10a854:	2825883a 	mov	r18,r5
  10a858:	dc000015 	stw	r16,0(sp)
  10a85c:	01401a04 	movi	r5,104
  10a860:	2021883a 	mov	r16,r4
  10a864:	9009883a 	mov	r4,r18
  10a868:	dfc00315 	stw	ra,12(sp)
  10a86c:	dc400115 	stw	r17,4(sp)
  10a870:	0103f1c0 	call	103f1c <__mulsi3>
  10a874:	8009883a 	mov	r4,r16
  10a878:	11400304 	addi	r5,r2,12
  10a87c:	1023883a 	mov	r17,r2
  10a880:	0103f6c0 	call	103f6c <_malloc_r>
  10a884:	1021883a 	mov	r16,r2
  10a888:	10000726 	beq	r2,zero,10a8a8 <__sfmoreglue+0x5c>
  10a88c:	11000304 	addi	r4,r2,12
  10a890:	10000015 	stw	zero,0(r2)
  10a894:	14800115 	stw	r18,4(r2)
  10a898:	11000215 	stw	r4,8(r2)
  10a89c:	000b883a 	mov	r5,zero
  10a8a0:	880d883a 	mov	r6,r17
  10a8a4:	010bba40 	call	10bba4 <memset>
  10a8a8:	8005883a 	mov	r2,r16
  10a8ac:	dfc00317 	ldw	ra,12(sp)
  10a8b0:	dc800217 	ldw	r18,8(sp)
  10a8b4:	dc400117 	ldw	r17,4(sp)
  10a8b8:	dc000017 	ldw	r16,0(sp)
  10a8bc:	dec00404 	addi	sp,sp,16
  10a8c0:	f800283a 	ret

0010a8c4 <_cleanup>:
  10a8c4:	008004b4 	movhi	r2,18
  10a8c8:	10a1f304 	addi	r2,r2,-30772
  10a8cc:	11000017 	ldw	r4,0(r2)
  10a8d0:	01400474 	movhi	r5,17
  10a8d4:	2940dd04 	addi	r5,r5,884
  10a8d8:	010b48c1 	jmpi	10b48c <_fwalk>

0010a8dc <__sinit>:
  10a8dc:	20800e17 	ldw	r2,56(r4)
  10a8e0:	defff704 	addi	sp,sp,-36
  10a8e4:	dc800215 	stw	r18,8(sp)
  10a8e8:	dfc00815 	stw	ra,32(sp)
  10a8ec:	ddc00715 	stw	r23,28(sp)
  10a8f0:	dd800615 	stw	r22,24(sp)
  10a8f4:	dd400515 	stw	r21,20(sp)
  10a8f8:	dd000415 	stw	r20,16(sp)
  10a8fc:	dcc00315 	stw	r19,12(sp)
  10a900:	dc400115 	stw	r17,4(sp)
  10a904:	dc000015 	stw	r16,0(sp)
  10a908:	2025883a 	mov	r18,r4
  10a90c:	10004f1e 	bne	r2,zero,10aa4c <__sinit+0x170>
  10a910:	24000117 	ldw	r16,4(r4)
  10a914:	00c00474 	movhi	r3,17
  10a918:	18ea1004 	addi	r3,r3,-22464
  10a91c:	20c00f15 	stw	r3,60(r4)
  10a920:	2080bb04 	addi	r2,r4,748
  10a924:	00c000c4 	movi	r3,3
  10a928:	05c00044 	movi	r23,1
  10a92c:	20c0b915 	stw	r3,740(r4)
  10a930:	2080ba15 	stw	r2,744(r4)
  10a934:	25c00e15 	stw	r23,56(r4)
  10a938:	2000b815 	stw	zero,736(r4)
  10a93c:	00800104 	movi	r2,4
  10a940:	81001704 	addi	r4,r16,92
  10a944:	000b883a 	mov	r5,zero
  10a948:	01800204 	movi	r6,8
  10a94c:	80000015 	stw	zero,0(r16)
  10a950:	80000115 	stw	zero,4(r16)
  10a954:	80000215 	stw	zero,8(r16)
  10a958:	8080030d 	sth	r2,12(r16)
  10a95c:	80001915 	stw	zero,100(r16)
  10a960:	8000038d 	sth	zero,14(r16)
  10a964:	80000415 	stw	zero,16(r16)
  10a968:	80000515 	stw	zero,20(r16)
  10a96c:	80000615 	stw	zero,24(r16)
  10a970:	010bba40 	call	10bba4 <memset>
  10a974:	94400217 	ldw	r17,8(r18)
  10a978:	05800474 	movhi	r22,17
  10a97c:	b5b50604 	addi	r22,r22,-11240
  10a980:	05400474 	movhi	r21,17
  10a984:	ad751d04 	addi	r21,r21,-11148
  10a988:	05000474 	movhi	r20,17
  10a98c:	a5353c04 	addi	r20,r20,-11024
  10a990:	04c00474 	movhi	r19,17
  10a994:	9cf55304 	addi	r19,r19,-10932
  10a998:	84000715 	stw	r16,28(r16)
  10a99c:	85800815 	stw	r22,32(r16)
  10a9a0:	85400915 	stw	r21,36(r16)
  10a9a4:	85000a15 	stw	r20,40(r16)
  10a9a8:	84c00b15 	stw	r19,44(r16)
  10a9ac:	00800284 	movi	r2,10
  10a9b0:	89001704 	addi	r4,r17,92
  10a9b4:	000b883a 	mov	r5,zero
  10a9b8:	01800204 	movi	r6,8
  10a9bc:	88000015 	stw	zero,0(r17)
  10a9c0:	88000115 	stw	zero,4(r17)
  10a9c4:	88000215 	stw	zero,8(r17)
  10a9c8:	8880030d 	sth	r2,12(r17)
  10a9cc:	88001915 	stw	zero,100(r17)
  10a9d0:	8dc0038d 	sth	r23,14(r17)
  10a9d4:	88000415 	stw	zero,16(r17)
  10a9d8:	88000515 	stw	zero,20(r17)
  10a9dc:	88000615 	stw	zero,24(r17)
  10a9e0:	010bba40 	call	10bba4 <memset>
  10a9e4:	94000317 	ldw	r16,12(r18)
  10a9e8:	00800484 	movi	r2,18
  10a9ec:	8c400715 	stw	r17,28(r17)
  10a9f0:	8d800815 	stw	r22,32(r17)
  10a9f4:	8d400915 	stw	r21,36(r17)
  10a9f8:	8d000a15 	stw	r20,40(r17)
  10a9fc:	8cc00b15 	stw	r19,44(r17)
  10aa00:	8080030d 	sth	r2,12(r16)
  10aa04:	00800084 	movi	r2,2
  10aa08:	80000015 	stw	zero,0(r16)
  10aa0c:	80000115 	stw	zero,4(r16)
  10aa10:	80000215 	stw	zero,8(r16)
  10aa14:	80001915 	stw	zero,100(r16)
  10aa18:	8080038d 	sth	r2,14(r16)
  10aa1c:	80000415 	stw	zero,16(r16)
  10aa20:	80000515 	stw	zero,20(r16)
  10aa24:	80000615 	stw	zero,24(r16)
  10aa28:	81001704 	addi	r4,r16,92
  10aa2c:	000b883a 	mov	r5,zero
  10aa30:	01800204 	movi	r6,8
  10aa34:	010bba40 	call	10bba4 <memset>
  10aa38:	84000715 	stw	r16,28(r16)
  10aa3c:	85800815 	stw	r22,32(r16)
  10aa40:	85400915 	stw	r21,36(r16)
  10aa44:	85000a15 	stw	r20,40(r16)
  10aa48:	84c00b15 	stw	r19,44(r16)
  10aa4c:	dfc00817 	ldw	ra,32(sp)
  10aa50:	ddc00717 	ldw	r23,28(sp)
  10aa54:	dd800617 	ldw	r22,24(sp)
  10aa58:	dd400517 	ldw	r21,20(sp)
  10aa5c:	dd000417 	ldw	r20,16(sp)
  10aa60:	dcc00317 	ldw	r19,12(sp)
  10aa64:	dc800217 	ldw	r18,8(sp)
  10aa68:	dc400117 	ldw	r17,4(sp)
  10aa6c:	dc000017 	ldw	r16,0(sp)
  10aa70:	dec00904 	addi	sp,sp,36
  10aa74:	f800283a 	ret

0010aa78 <__sfp>:
  10aa78:	defffb04 	addi	sp,sp,-20
  10aa7c:	008004b4 	movhi	r2,18
  10aa80:	10a1f304 	addi	r2,r2,-30772
  10aa84:	dc800215 	stw	r18,8(sp)
  10aa88:	14800017 	ldw	r18,0(r2)
  10aa8c:	dcc00315 	stw	r19,12(sp)
  10aa90:	dfc00415 	stw	ra,16(sp)
  10aa94:	90800e17 	ldw	r2,56(r18)
  10aa98:	dc400115 	stw	r17,4(sp)
  10aa9c:	dc000015 	stw	r16,0(sp)
  10aaa0:	2027883a 	mov	r19,r4
  10aaa4:	10002f26 	beq	r2,zero,10ab64 <__sfp+0xec>
  10aaa8:	9480b804 	addi	r18,r18,736
  10aaac:	047fffc4 	movi	r17,-1
  10aab0:	91400117 	ldw	r5,4(r18)
  10aab4:	94000217 	ldw	r16,8(r18)
  10aab8:	297fffc4 	addi	r5,r5,-1
  10aabc:	28000a16 	blt	r5,zero,10aae8 <__sfp+0x70>
  10aac0:	8080030f 	ldh	r2,12(r16)
  10aac4:	10000c26 	beq	r2,zero,10aaf8 <__sfp+0x80>
  10aac8:	80c01d04 	addi	r3,r16,116
  10aacc:	00000206 	br	10aad8 <__sfp+0x60>
  10aad0:	18bfe60f 	ldh	r2,-104(r3)
  10aad4:	10000826 	beq	r2,zero,10aaf8 <__sfp+0x80>
  10aad8:	297fffc4 	addi	r5,r5,-1
  10aadc:	1c3ffd04 	addi	r16,r3,-12
  10aae0:	18c01a04 	addi	r3,r3,104
  10aae4:	2c7ffa1e 	bne	r5,r17,10aad0 <black_to_red_frame+0xfe10aad0>
  10aae8:	90800017 	ldw	r2,0(r18)
  10aaec:	10002026 	beq	r2,zero,10ab70 <__sfp+0xf8>
  10aaf0:	1025883a 	mov	r18,r2
  10aaf4:	003fee06 	br	10aab0 <black_to_red_frame+0xfe10aab0>
  10aaf8:	00bfffc4 	movi	r2,-1
  10aafc:	8080038d 	sth	r2,14(r16)
  10ab00:	00800044 	movi	r2,1
  10ab04:	8080030d 	sth	r2,12(r16)
  10ab08:	80001915 	stw	zero,100(r16)
  10ab0c:	80000015 	stw	zero,0(r16)
  10ab10:	80000215 	stw	zero,8(r16)
  10ab14:	80000115 	stw	zero,4(r16)
  10ab18:	80000415 	stw	zero,16(r16)
  10ab1c:	80000515 	stw	zero,20(r16)
  10ab20:	80000615 	stw	zero,24(r16)
  10ab24:	81001704 	addi	r4,r16,92
  10ab28:	000b883a 	mov	r5,zero
  10ab2c:	01800204 	movi	r6,8
  10ab30:	010bba40 	call	10bba4 <memset>
  10ab34:	8005883a 	mov	r2,r16
  10ab38:	80000c15 	stw	zero,48(r16)
  10ab3c:	80000d15 	stw	zero,52(r16)
  10ab40:	80001115 	stw	zero,68(r16)
  10ab44:	80001215 	stw	zero,72(r16)
  10ab48:	dfc00417 	ldw	ra,16(sp)
  10ab4c:	dcc00317 	ldw	r19,12(sp)
  10ab50:	dc800217 	ldw	r18,8(sp)
  10ab54:	dc400117 	ldw	r17,4(sp)
  10ab58:	dc000017 	ldw	r16,0(sp)
  10ab5c:	dec00504 	addi	sp,sp,20
  10ab60:	f800283a 	ret
  10ab64:	9009883a 	mov	r4,r18
  10ab68:	010a8dc0 	call	10a8dc <__sinit>
  10ab6c:	003fce06 	br	10aaa8 <black_to_red_frame+0xfe10aaa8>
  10ab70:	9809883a 	mov	r4,r19
  10ab74:	01400104 	movi	r5,4
  10ab78:	010a84c0 	call	10a84c <__sfmoreglue>
  10ab7c:	90800015 	stw	r2,0(r18)
  10ab80:	103fdb1e 	bne	r2,zero,10aaf0 <black_to_red_frame+0xfe10aaf0>
  10ab84:	00800304 	movi	r2,12
  10ab88:	98800015 	stw	r2,0(r19)
  10ab8c:	0005883a 	mov	r2,zero
  10ab90:	003fed06 	br	10ab48 <black_to_red_frame+0xfe10ab48>

0010ab94 <__sfp_lock_acquire>:
  10ab94:	f800283a 	ret

0010ab98 <__sfp_lock_release>:
  10ab98:	f800283a 	ret

0010ab9c <__sinit_lock_acquire>:
  10ab9c:	f800283a 	ret

0010aba0 <__sinit_lock_release>:
  10aba0:	f800283a 	ret

0010aba4 <__fp_lock_all>:
  10aba4:	008004b4 	movhi	r2,18
  10aba8:	10a1f404 	addi	r2,r2,-30768
  10abac:	11000017 	ldw	r4,0(r2)
  10abb0:	01400474 	movhi	r5,17
  10abb4:	296a0c04 	addi	r5,r5,-22480
  10abb8:	010b48c1 	jmpi	10b48c <_fwalk>

0010abbc <__fp_unlock_all>:
  10abbc:	008004b4 	movhi	r2,18
  10abc0:	10a1f404 	addi	r2,r2,-30768
  10abc4:	11000017 	ldw	r4,0(r2)
  10abc8:	01400474 	movhi	r5,17
  10abcc:	296a0e04 	addi	r5,r5,-22472
  10abd0:	010b48c1 	jmpi	10b48c <_fwalk>

0010abd4 <_malloc_trim_r>:
  10abd4:	defffb04 	addi	sp,sp,-20
  10abd8:	dcc00315 	stw	r19,12(sp)
  10abdc:	dc800215 	stw	r18,8(sp)
  10abe0:	dc400115 	stw	r17,4(sp)
  10abe4:	dc000015 	stw	r16,0(sp)
  10abe8:	2827883a 	mov	r19,r5
  10abec:	dfc00415 	stw	ra,16(sp)
  10abf0:	04400474 	movhi	r17,17
  10abf4:	8c5b0404 	addi	r17,r17,27664
  10abf8:	2021883a 	mov	r16,r4
  10abfc:	01141680 	call	114168 <__malloc_lock>
  10ac00:	88800217 	ldw	r2,8(r17)
  10ac04:	14800117 	ldw	r18,4(r2)
  10ac08:	00bfff04 	movi	r2,-4
  10ac0c:	90a4703a 	and	r18,r18,r2
  10ac10:	94e7c83a 	sub	r19,r18,r19
  10ac14:	9cc3fbc4 	addi	r19,r19,4079
  10ac18:	9826d33a 	srli	r19,r19,12
  10ac1c:	0083ffc4 	movi	r2,4095
  10ac20:	9cffffc4 	addi	r19,r19,-1
  10ac24:	9826933a 	slli	r19,r19,12
  10ac28:	14c0060e 	bge	r2,r19,10ac44 <_malloc_trim_r+0x70>
  10ac2c:	8009883a 	mov	r4,r16
  10ac30:	000b883a 	mov	r5,zero
  10ac34:	01048880 	call	104888 <_sbrk_r>
  10ac38:	88c00217 	ldw	r3,8(r17)
  10ac3c:	1c87883a 	add	r3,r3,r18
  10ac40:	10c00a26 	beq	r2,r3,10ac6c <_malloc_trim_r+0x98>
  10ac44:	8009883a 	mov	r4,r16
  10ac48:	011416c0 	call	11416c <__malloc_unlock>
  10ac4c:	0005883a 	mov	r2,zero
  10ac50:	dfc00417 	ldw	ra,16(sp)
  10ac54:	dcc00317 	ldw	r19,12(sp)
  10ac58:	dc800217 	ldw	r18,8(sp)
  10ac5c:	dc400117 	ldw	r17,4(sp)
  10ac60:	dc000017 	ldw	r16,0(sp)
  10ac64:	dec00504 	addi	sp,sp,20
  10ac68:	f800283a 	ret
  10ac6c:	8009883a 	mov	r4,r16
  10ac70:	04cbc83a 	sub	r5,zero,r19
  10ac74:	01048880 	call	104888 <_sbrk_r>
  10ac78:	00ffffc4 	movi	r3,-1
  10ac7c:	10c01326 	beq	r2,r3,10accc <_malloc_trim_r+0xf8>
  10ac80:	008004b4 	movhi	r2,18
  10ac84:	10a91604 	addi	r2,r2,-23464
  10ac88:	11000017 	ldw	r4,0(r2)
  10ac8c:	88c00217 	ldw	r3,8(r17)
  10ac90:	94e5c83a 	sub	r18,r18,r19
  10ac94:	94800054 	ori	r18,r18,1
  10ac98:	24e7c83a 	sub	r19,r4,r19
  10ac9c:	1c800115 	stw	r18,4(r3)
  10aca0:	8009883a 	mov	r4,r16
  10aca4:	14c00015 	stw	r19,0(r2)
  10aca8:	011416c0 	call	11416c <__malloc_unlock>
  10acac:	00800044 	movi	r2,1
  10acb0:	dfc00417 	ldw	ra,16(sp)
  10acb4:	dcc00317 	ldw	r19,12(sp)
  10acb8:	dc800217 	ldw	r18,8(sp)
  10acbc:	dc400117 	ldw	r17,4(sp)
  10acc0:	dc000017 	ldw	r16,0(sp)
  10acc4:	dec00504 	addi	sp,sp,20
  10acc8:	f800283a 	ret
  10accc:	8009883a 	mov	r4,r16
  10acd0:	000b883a 	mov	r5,zero
  10acd4:	01048880 	call	104888 <_sbrk_r>
  10acd8:	88c00217 	ldw	r3,8(r17)
  10acdc:	014003c4 	movi	r5,15
  10ace0:	10c9c83a 	sub	r4,r2,r3
  10ace4:	293fd70e 	bge	r5,r4,10ac44 <black_to_red_frame+0xfe10ac44>
  10ace8:	014004b4 	movhi	r5,18
  10acec:	2961f104 	addi	r5,r5,-30780
  10acf0:	29400017 	ldw	r5,0(r5)
  10acf4:	21000054 	ori	r4,r4,1
  10acf8:	19000115 	stw	r4,4(r3)
  10acfc:	1145c83a 	sub	r2,r2,r5
  10ad00:	014004b4 	movhi	r5,18
  10ad04:	29691604 	addi	r5,r5,-23464
  10ad08:	28800015 	stw	r2,0(r5)
  10ad0c:	003fcd06 	br	10ac44 <black_to_red_frame+0xfe10ac44>

0010ad10 <_free_r>:
  10ad10:	defffd04 	addi	sp,sp,-12
  10ad14:	dc000015 	stw	r16,0(sp)
  10ad18:	dfc00215 	stw	ra,8(sp)
  10ad1c:	dc400115 	stw	r17,4(sp)
  10ad20:	2821883a 	mov	r16,r5
  10ad24:	28004c26 	beq	r5,zero,10ae58 <_free_r+0x148>
  10ad28:	2023883a 	mov	r17,r4
  10ad2c:	01141680 	call	114168 <__malloc_lock>
  10ad30:	823fff17 	ldw	r8,-4(r16)
  10ad34:	00bfff84 	movi	r2,-2
  10ad38:	81bffe04 	addi	r6,r16,-8
  10ad3c:	4084703a 	and	r2,r8,r2
  10ad40:	3087883a 	add	r3,r6,r2
  10ad44:	01400474 	movhi	r5,17
  10ad48:	295b0404 	addi	r5,r5,27664
  10ad4c:	1a400117 	ldw	r9,4(r3)
  10ad50:	29000217 	ldw	r4,8(r5)
  10ad54:	01ffff04 	movi	r7,-4
  10ad58:	49ce703a 	and	r7,r9,r7
  10ad5c:	20c06526 	beq	r4,r3,10aef4 <_free_r+0x1e4>
  10ad60:	19c00115 	stw	r7,4(r3)
  10ad64:	4200004c 	andi	r8,r8,1
  10ad68:	40003026 	beq	r8,zero,10ae2c <_free_r+0x11c>
  10ad6c:	0009883a 	mov	r4,zero
  10ad70:	19d1883a 	add	r8,r3,r7
  10ad74:	42000117 	ldw	r8,4(r8)
  10ad78:	4200004c 	andi	r8,r8,1
  10ad7c:	4000061e 	bne	r8,zero,10ad98 <_free_r+0x88>
  10ad80:	11c5883a 	add	r2,r2,r7
  10ad84:	19c00217 	ldw	r7,8(r3)
  10ad88:	20004e26 	beq	r4,zero,10aec4 <_free_r+0x1b4>
  10ad8c:	18c00317 	ldw	r3,12(r3)
  10ad90:	38c00315 	stw	r3,12(r7)
  10ad94:	19c00215 	stw	r7,8(r3)
  10ad98:	10c00054 	ori	r3,r2,1
  10ad9c:	30c00115 	stw	r3,4(r6)
  10ada0:	3087883a 	add	r3,r6,r2
  10ada4:	18800015 	stw	r2,0(r3)
  10ada8:	20001a1e 	bne	r4,zero,10ae14 <_free_r+0x104>
  10adac:	00c07fc4 	movi	r3,511
  10adb0:	18802e2e 	bgeu	r3,r2,10ae6c <_free_r+0x15c>
  10adb4:	1006d27a 	srli	r3,r2,9
  10adb8:	01000104 	movi	r4,4
  10adbc:	20c06636 	bltu	r4,r3,10af58 <_free_r+0x248>
  10adc0:	1008d1ba 	srli	r4,r2,6
  10adc4:	21000e04 	addi	r4,r4,56
  10adc8:	210f883a 	add	r7,r4,r4
  10adcc:	39cf883a 	add	r7,r7,r7
  10add0:	39cf883a 	add	r7,r7,r7
  10add4:	29cf883a 	add	r7,r5,r7
  10add8:	38c00217 	ldw	r3,8(r7)
  10addc:	01400474 	movhi	r5,17
  10ade0:	295b0404 	addi	r5,r5,27664
  10ade4:	19c06126 	beq	r3,r7,10af6c <_free_r+0x25c>
  10ade8:	013fff04 	movi	r4,-4
  10adec:	19400117 	ldw	r5,4(r3)
  10adf0:	290a703a 	and	r5,r5,r4
  10adf4:	1140022e 	bgeu	r2,r5,10ae00 <_free_r+0xf0>
  10adf8:	18c00217 	ldw	r3,8(r3)
  10adfc:	38fffb1e 	bne	r7,r3,10adec <black_to_red_frame+0xfe10adec>
  10ae00:	18800317 	ldw	r2,12(r3)
  10ae04:	30800315 	stw	r2,12(r6)
  10ae08:	30c00215 	stw	r3,8(r6)
  10ae0c:	11800215 	stw	r6,8(r2)
  10ae10:	19800315 	stw	r6,12(r3)
  10ae14:	8809883a 	mov	r4,r17
  10ae18:	dfc00217 	ldw	ra,8(sp)
  10ae1c:	dc400117 	ldw	r17,4(sp)
  10ae20:	dc000017 	ldw	r16,0(sp)
  10ae24:	dec00304 	addi	sp,sp,12
  10ae28:	011416c1 	jmpi	11416c <__malloc_unlock>
  10ae2c:	813ffe17 	ldw	r4,-8(r16)
  10ae30:	2a400204 	addi	r9,r5,8
  10ae34:	310dc83a 	sub	r6,r6,r4
  10ae38:	32000217 	ldw	r8,8(r6)
  10ae3c:	1105883a 	add	r2,r2,r4
  10ae40:	42404326 	beq	r8,r9,10af50 <_free_r+0x240>
  10ae44:	32400317 	ldw	r9,12(r6)
  10ae48:	0009883a 	mov	r4,zero
  10ae4c:	42400315 	stw	r9,12(r8)
  10ae50:	4a000215 	stw	r8,8(r9)
  10ae54:	003fc606 	br	10ad70 <black_to_red_frame+0xfe10ad70>
  10ae58:	dfc00217 	ldw	ra,8(sp)
  10ae5c:	dc400117 	ldw	r17,4(sp)
  10ae60:	dc000017 	ldw	r16,0(sp)
  10ae64:	dec00304 	addi	sp,sp,12
  10ae68:	f800283a 	ret
  10ae6c:	1004d0fa 	srli	r2,r2,3
  10ae70:	02000044 	movi	r8,1
  10ae74:	29c00117 	ldw	r7,4(r5)
  10ae78:	1087883a 	add	r3,r2,r2
  10ae7c:	18c7883a 	add	r3,r3,r3
  10ae80:	18c7883a 	add	r3,r3,r3
  10ae84:	28c7883a 	add	r3,r5,r3
  10ae88:	1005d0ba 	srai	r2,r2,2
  10ae8c:	19000217 	ldw	r4,8(r3)
  10ae90:	30c00315 	stw	r3,12(r6)
  10ae94:	4084983a 	sll	r2,r8,r2
  10ae98:	31000215 	stw	r4,8(r6)
  10ae9c:	19800215 	stw	r6,8(r3)
  10aea0:	11c4b03a 	or	r2,r2,r7
  10aea4:	21800315 	stw	r6,12(r4)
  10aea8:	8809883a 	mov	r4,r17
  10aeac:	28800115 	stw	r2,4(r5)
  10aeb0:	dfc00217 	ldw	ra,8(sp)
  10aeb4:	dc400117 	ldw	r17,4(sp)
  10aeb8:	dc000017 	ldw	r16,0(sp)
  10aebc:	dec00304 	addi	sp,sp,12
  10aec0:	011416c1 	jmpi	11416c <__malloc_unlock>
  10aec4:	02000474 	movhi	r8,17
  10aec8:	421b0604 	addi	r8,r8,27672
  10aecc:	3a3faf1e 	bne	r7,r8,10ad8c <black_to_red_frame+0xfe10ad8c>
  10aed0:	29800515 	stw	r6,20(r5)
  10aed4:	29800415 	stw	r6,16(r5)
  10aed8:	10c00054 	ori	r3,r2,1
  10aedc:	31c00315 	stw	r7,12(r6)
  10aee0:	31c00215 	stw	r7,8(r6)
  10aee4:	30c00115 	stw	r3,4(r6)
  10aee8:	308d883a 	add	r6,r6,r2
  10aeec:	30800015 	stw	r2,0(r6)
  10aef0:	003fc806 	br	10ae14 <black_to_red_frame+0xfe10ae14>
  10aef4:	4200004c 	andi	r8,r8,1
  10aef8:	3885883a 	add	r2,r7,r2
  10aefc:	4000071e 	bne	r8,zero,10af1c <_free_r+0x20c>
  10af00:	81fffe17 	ldw	r7,-8(r16)
  10af04:	31cdc83a 	sub	r6,r6,r7
  10af08:	30c00317 	ldw	r3,12(r6)
  10af0c:	31000217 	ldw	r4,8(r6)
  10af10:	11c5883a 	add	r2,r2,r7
  10af14:	20c00315 	stw	r3,12(r4)
  10af18:	19000215 	stw	r4,8(r3)
  10af1c:	00c004b4 	movhi	r3,18
  10af20:	18e1f204 	addi	r3,r3,-30776
  10af24:	11000054 	ori	r4,r2,1
  10af28:	18c00017 	ldw	r3,0(r3)
  10af2c:	31000115 	stw	r4,4(r6)
  10af30:	29800215 	stw	r6,8(r5)
  10af34:	10ffb736 	bltu	r2,r3,10ae14 <black_to_red_frame+0xfe10ae14>
  10af38:	008004b4 	movhi	r2,18
  10af3c:	10a90b04 	addi	r2,r2,-23508
  10af40:	11400017 	ldw	r5,0(r2)
  10af44:	8809883a 	mov	r4,r17
  10af48:	010abd40 	call	10abd4 <_malloc_trim_r>
  10af4c:	003fb106 	br	10ae14 <black_to_red_frame+0xfe10ae14>
  10af50:	01000044 	movi	r4,1
  10af54:	003f8606 	br	10ad70 <black_to_red_frame+0xfe10ad70>
  10af58:	01000504 	movi	r4,20
  10af5c:	20c00b36 	bltu	r4,r3,10af8c <_free_r+0x27c>
  10af60:	190016c4 	addi	r4,r3,91
  10af64:	210f883a 	add	r7,r4,r4
  10af68:	003f9806 	br	10adcc <black_to_red_frame+0xfe10adcc>
  10af6c:	2009d0ba 	srai	r4,r4,2
  10af70:	00800044 	movi	r2,1
  10af74:	29c00117 	ldw	r7,4(r5)
  10af78:	1108983a 	sll	r4,r2,r4
  10af7c:	1805883a 	mov	r2,r3
  10af80:	21c8b03a 	or	r4,r4,r7
  10af84:	29000115 	stw	r4,4(r5)
  10af88:	003f9e06 	br	10ae04 <black_to_red_frame+0xfe10ae04>
  10af8c:	01001504 	movi	r4,84
  10af90:	20c00436 	bltu	r4,r3,10afa4 <_free_r+0x294>
  10af94:	1008d33a 	srli	r4,r2,12
  10af98:	21001b84 	addi	r4,r4,110
  10af9c:	210f883a 	add	r7,r4,r4
  10afa0:	003f8a06 	br	10adcc <black_to_red_frame+0xfe10adcc>
  10afa4:	01005504 	movi	r4,340
  10afa8:	20c00436 	bltu	r4,r3,10afbc <_free_r+0x2ac>
  10afac:	1008d3fa 	srli	r4,r2,15
  10afb0:	21001dc4 	addi	r4,r4,119
  10afb4:	210f883a 	add	r7,r4,r4
  10afb8:	003f8406 	br	10adcc <black_to_red_frame+0xfe10adcc>
  10afbc:	01015504 	movi	r4,1364
  10afc0:	20c00436 	bltu	r4,r3,10afd4 <_free_r+0x2c4>
  10afc4:	1008d4ba 	srli	r4,r2,18
  10afc8:	21001f04 	addi	r4,r4,124
  10afcc:	210f883a 	add	r7,r4,r4
  10afd0:	003f7e06 	br	10adcc <black_to_red_frame+0xfe10adcc>
  10afd4:	01c03f04 	movi	r7,252
  10afd8:	01001f84 	movi	r4,126
  10afdc:	003f7b06 	br	10adcc <black_to_red_frame+0xfe10adcc>

0010afe0 <__sfvwrite_r>:
  10afe0:	30800217 	ldw	r2,8(r6)
  10afe4:	defff404 	addi	sp,sp,-48
  10afe8:	dcc00515 	stw	r19,20(sp)
  10afec:	dfc00b15 	stw	ra,44(sp)
  10aff0:	df000a15 	stw	fp,40(sp)
  10aff4:	ddc00915 	stw	r23,36(sp)
  10aff8:	dd800815 	stw	r22,32(sp)
  10affc:	dd400715 	stw	r21,28(sp)
  10b000:	dd000615 	stw	r20,24(sp)
  10b004:	dc800415 	stw	r18,16(sp)
  10b008:	dc400315 	stw	r17,12(sp)
  10b00c:	dc000215 	stw	r16,8(sp)
  10b010:	3027883a 	mov	r19,r6
  10b014:	10001d26 	beq	r2,zero,10b08c <__sfvwrite_r+0xac>
  10b018:	2880030b 	ldhu	r2,12(r5)
  10b01c:	202b883a 	mov	r21,r4
  10b020:	2821883a 	mov	r16,r5
  10b024:	10c0020c 	andi	r3,r2,8
  10b028:	18002526 	beq	r3,zero,10b0c0 <__sfvwrite_r+0xe0>
  10b02c:	28c00417 	ldw	r3,16(r5)
  10b030:	18002326 	beq	r3,zero,10b0c0 <__sfvwrite_r+0xe0>
  10b034:	10c0008c 	andi	r3,r2,2
  10b038:	9c400017 	ldw	r17,0(r19)
  10b03c:	18002826 	beq	r3,zero,10b0e0 <__sfvwrite_r+0x100>
  10b040:	0029883a 	mov	r20,zero
  10b044:	0025883a 	mov	r18,zero
  10b048:	05810004 	movi	r22,1024
  10b04c:	a00d883a 	mov	r6,r20
  10b050:	a809883a 	mov	r4,r21
  10b054:	90004726 	beq	r18,zero,10b174 <__sfvwrite_r+0x194>
  10b058:	900f883a 	mov	r7,r18
  10b05c:	81400717 	ldw	r5,28(r16)
  10b060:	b480012e 	bgeu	r22,r18,10b068 <__sfvwrite_r+0x88>
  10b064:	01c10004 	movi	r7,1024
  10b068:	80800917 	ldw	r2,36(r16)
  10b06c:	103ee83a 	callr	r2
  10b070:	00804c0e 	bge	zero,r2,10b1a4 <__sfvwrite_r+0x1c4>
  10b074:	98c00217 	ldw	r3,8(r19)
  10b078:	a0a9883a 	add	r20,r20,r2
  10b07c:	90a5c83a 	sub	r18,r18,r2
  10b080:	1885c83a 	sub	r2,r3,r2
  10b084:	98800215 	stw	r2,8(r19)
  10b088:	103ff01e 	bne	r2,zero,10b04c <black_to_red_frame+0xfe10b04c>
  10b08c:	0005883a 	mov	r2,zero
  10b090:	dfc00b17 	ldw	ra,44(sp)
  10b094:	df000a17 	ldw	fp,40(sp)
  10b098:	ddc00917 	ldw	r23,36(sp)
  10b09c:	dd800817 	ldw	r22,32(sp)
  10b0a0:	dd400717 	ldw	r21,28(sp)
  10b0a4:	dd000617 	ldw	r20,24(sp)
  10b0a8:	dcc00517 	ldw	r19,20(sp)
  10b0ac:	dc800417 	ldw	r18,16(sp)
  10b0b0:	dc400317 	ldw	r17,12(sp)
  10b0b4:	dc000217 	ldw	r16,8(sp)
  10b0b8:	dec00c04 	addi	sp,sp,48
  10b0bc:	f800283a 	ret
  10b0c0:	a809883a 	mov	r4,r21
  10b0c4:	800b883a 	mov	r5,r16
  10b0c8:	0108c200 	call	108c20 <__swsetup_r>
  10b0cc:	1000e81e 	bne	r2,zero,10b470 <__sfvwrite_r+0x490>
  10b0d0:	8080030b 	ldhu	r2,12(r16)
  10b0d4:	9c400017 	ldw	r17,0(r19)
  10b0d8:	10c0008c 	andi	r3,r2,2
  10b0dc:	183fd81e 	bne	r3,zero,10b040 <black_to_red_frame+0xfe10b040>
  10b0e0:	10c0004c 	andi	r3,r2,1
  10b0e4:	002d883a 	mov	r22,zero
  10b0e8:	1800331e 	bne	r3,zero,10b1b8 <__sfvwrite_r+0x1d8>
  10b0ec:	0025883a 	mov	r18,zero
  10b0f0:	90001c26 	beq	r18,zero,10b164 <__sfvwrite_r+0x184>
  10b0f4:	10c0800c 	andi	r3,r2,512
  10b0f8:	85000217 	ldw	r20,8(r16)
  10b0fc:	18006f26 	beq	r3,zero,10b2bc <__sfvwrite_r+0x2dc>
  10b100:	95008936 	bltu	r18,r20,10b328 <__sfvwrite_r+0x348>
  10b104:	10c1200c 	andi	r3,r2,1152
  10b108:	1800a11e 	bne	r3,zero,10b390 <__sfvwrite_r+0x3b0>
  10b10c:	81000017 	ldw	r4,0(r16)
  10b110:	a02f883a 	mov	r23,r20
  10b114:	a039883a 	mov	fp,r20
  10b118:	9029883a 	mov	r20,r18
  10b11c:	b00b883a 	mov	r5,r22
  10b120:	b80d883a 	mov	r6,r23
  10b124:	010ba680 	call	10ba68 <memmove>
  10b128:	81400217 	ldw	r5,8(r16)
  10b12c:	81000017 	ldw	r4,0(r16)
  10b130:	9005883a 	mov	r2,r18
  10b134:	2f39c83a 	sub	fp,r5,fp
  10b138:	25c7883a 	add	r3,r4,r23
  10b13c:	87000215 	stw	fp,8(r16)
  10b140:	80c00015 	stw	r3,0(r16)
  10b144:	98c00217 	ldw	r3,8(r19)
  10b148:	b0ad883a 	add	r22,r22,r2
  10b14c:	90a5c83a 	sub	r18,r18,r2
  10b150:	1d29c83a 	sub	r20,r3,r20
  10b154:	9d000215 	stw	r20,8(r19)
  10b158:	a03fcc26 	beq	r20,zero,10b08c <black_to_red_frame+0xfe10b08c>
  10b15c:	8080030b 	ldhu	r2,12(r16)
  10b160:	903fe41e 	bne	r18,zero,10b0f4 <black_to_red_frame+0xfe10b0f4>
  10b164:	8d800017 	ldw	r22,0(r17)
  10b168:	8c800117 	ldw	r18,4(r17)
  10b16c:	8c400204 	addi	r17,r17,8
  10b170:	003fdf06 	br	10b0f0 <black_to_red_frame+0xfe10b0f0>
  10b174:	8d000017 	ldw	r20,0(r17)
  10b178:	8c800117 	ldw	r18,4(r17)
  10b17c:	8c400204 	addi	r17,r17,8
  10b180:	003fb206 	br	10b04c <black_to_red_frame+0xfe10b04c>
  10b184:	010ce4c0 	call	10ce4c <_realloc_r>
  10b188:	1039883a 	mov	fp,r2
  10b18c:	10009d1e 	bne	r2,zero,10b404 <__sfvwrite_r+0x424>
  10b190:	81400417 	ldw	r5,16(r16)
  10b194:	a809883a 	mov	r4,r21
  10b198:	010ad100 	call	10ad10 <_free_r>
  10b19c:	00800304 	movi	r2,12
  10b1a0:	a8800015 	stw	r2,0(r21)
  10b1a4:	80c0030b 	ldhu	r3,12(r16)
  10b1a8:	00bfffc4 	movi	r2,-1
  10b1ac:	18c01014 	ori	r3,r3,64
  10b1b0:	80c0030d 	sth	r3,12(r16)
  10b1b4:	003fb606 	br	10b090 <black_to_red_frame+0xfe10b090>
  10b1b8:	0007883a 	mov	r3,zero
  10b1bc:	0039883a 	mov	fp,zero
  10b1c0:	0025883a 	mov	r18,zero
  10b1c4:	90001f26 	beq	r18,zero,10b244 <__sfvwrite_r+0x264>
  10b1c8:	18006826 	beq	r3,zero,10b36c <__sfvwrite_r+0x38c>
  10b1cc:	b02f883a 	mov	r23,r22
  10b1d0:	9580012e 	bgeu	r18,r22,10b1d8 <__sfvwrite_r+0x1f8>
  10b1d4:	902f883a 	mov	r23,r18
  10b1d8:	81000017 	ldw	r4,0(r16)
  10b1dc:	80800417 	ldw	r2,16(r16)
  10b1e0:	b829883a 	mov	r20,r23
  10b1e4:	81800217 	ldw	r6,8(r16)
  10b1e8:	81c00517 	ldw	r7,20(r16)
  10b1ec:	1100022e 	bgeu	r2,r4,10b1f8 <__sfvwrite_r+0x218>
  10b1f0:	31d1883a 	add	r8,r6,r7
  10b1f4:	45c01816 	blt	r8,r23,10b258 <__sfvwrite_r+0x278>
  10b1f8:	b9c03f16 	blt	r23,r7,10b2f8 <__sfvwrite_r+0x318>
  10b1fc:	80800917 	ldw	r2,36(r16)
  10b200:	81400717 	ldw	r5,28(r16)
  10b204:	a809883a 	mov	r4,r21
  10b208:	d8c00115 	stw	r3,4(sp)
  10b20c:	e00d883a 	mov	r6,fp
  10b210:	103ee83a 	callr	r2
  10b214:	1029883a 	mov	r20,r2
  10b218:	d8c00117 	ldw	r3,4(sp)
  10b21c:	00bfe10e 	bge	zero,r2,10b1a4 <black_to_red_frame+0xfe10b1a4>
  10b220:	b52dc83a 	sub	r22,r22,r20
  10b224:	b0001f26 	beq	r22,zero,10b2a4 <__sfvwrite_r+0x2c4>
  10b228:	98800217 	ldw	r2,8(r19)
  10b22c:	e539883a 	add	fp,fp,r20
  10b230:	9525c83a 	sub	r18,r18,r20
  10b234:	1529c83a 	sub	r20,r2,r20
  10b238:	9d000215 	stw	r20,8(r19)
  10b23c:	a03f9326 	beq	r20,zero,10b08c <black_to_red_frame+0xfe10b08c>
  10b240:	903fe11e 	bne	r18,zero,10b1c8 <black_to_red_frame+0xfe10b1c8>
  10b244:	8f000017 	ldw	fp,0(r17)
  10b248:	8c800117 	ldw	r18,4(r17)
  10b24c:	0007883a 	mov	r3,zero
  10b250:	8c400204 	addi	r17,r17,8
  10b254:	003fdb06 	br	10b1c4 <black_to_red_frame+0xfe10b1c4>
  10b258:	400d883a 	mov	r6,r8
  10b25c:	e00b883a 	mov	r5,fp
  10b260:	d8c00115 	stw	r3,4(sp)
  10b264:	da000015 	stw	r8,0(sp)
  10b268:	010ba680 	call	10ba68 <memmove>
  10b26c:	da000017 	ldw	r8,0(sp)
  10b270:	80800017 	ldw	r2,0(r16)
  10b274:	a809883a 	mov	r4,r21
  10b278:	800b883a 	mov	r5,r16
  10b27c:	1205883a 	add	r2,r2,r8
  10b280:	80800015 	stw	r2,0(r16)
  10b284:	da000015 	stw	r8,0(sp)
  10b288:	010a5bc0 	call	10a5bc <_fflush_r>
  10b28c:	d8c00117 	ldw	r3,4(sp)
  10b290:	da000017 	ldw	r8,0(sp)
  10b294:	103fc31e 	bne	r2,zero,10b1a4 <black_to_red_frame+0xfe10b1a4>
  10b298:	4029883a 	mov	r20,r8
  10b29c:	b52dc83a 	sub	r22,r22,r20
  10b2a0:	b03fe11e 	bne	r22,zero,10b228 <black_to_red_frame+0xfe10b228>
  10b2a4:	a809883a 	mov	r4,r21
  10b2a8:	800b883a 	mov	r5,r16
  10b2ac:	010a5bc0 	call	10a5bc <_fflush_r>
  10b2b0:	103fbc1e 	bne	r2,zero,10b1a4 <black_to_red_frame+0xfe10b1a4>
  10b2b4:	0007883a 	mov	r3,zero
  10b2b8:	003fdb06 	br	10b228 <black_to_red_frame+0xfe10b228>
  10b2bc:	81000017 	ldw	r4,0(r16)
  10b2c0:	80800417 	ldw	r2,16(r16)
  10b2c4:	1100012e 	bgeu	r2,r4,10b2cc <__sfvwrite_r+0x2ec>
  10b2c8:	a4805836 	bltu	r20,r18,10b42c <__sfvwrite_r+0x44c>
  10b2cc:	81c00517 	ldw	r7,20(r16)
  10b2d0:	91c01a36 	bltu	r18,r7,10b33c <__sfvwrite_r+0x35c>
  10b2d4:	80800917 	ldw	r2,36(r16)
  10b2d8:	81400717 	ldw	r5,28(r16)
  10b2dc:	a809883a 	mov	r4,r21
  10b2e0:	b00d883a 	mov	r6,r22
  10b2e4:	103ee83a 	callr	r2
  10b2e8:	1029883a 	mov	r20,r2
  10b2ec:	00bfad0e 	bge	zero,r2,10b1a4 <black_to_red_frame+0xfe10b1a4>
  10b2f0:	a005883a 	mov	r2,r20
  10b2f4:	003f9306 	br	10b144 <black_to_red_frame+0xfe10b144>
  10b2f8:	b80d883a 	mov	r6,r23
  10b2fc:	e00b883a 	mov	r5,fp
  10b300:	d8c00115 	stw	r3,4(sp)
  10b304:	010ba680 	call	10ba68 <memmove>
  10b308:	80800217 	ldw	r2,8(r16)
  10b30c:	81000017 	ldw	r4,0(r16)
  10b310:	d8c00117 	ldw	r3,4(sp)
  10b314:	15c5c83a 	sub	r2,r2,r23
  10b318:	25ef883a 	add	r23,r4,r23
  10b31c:	80800215 	stw	r2,8(r16)
  10b320:	85c00015 	stw	r23,0(r16)
  10b324:	003fbe06 	br	10b220 <black_to_red_frame+0xfe10b220>
  10b328:	81000017 	ldw	r4,0(r16)
  10b32c:	9039883a 	mov	fp,r18
  10b330:	9029883a 	mov	r20,r18
  10b334:	902f883a 	mov	r23,r18
  10b338:	003f7806 	br	10b11c <black_to_red_frame+0xfe10b11c>
  10b33c:	b00b883a 	mov	r5,r22
  10b340:	900d883a 	mov	r6,r18
  10b344:	010ba680 	call	10ba68 <memmove>
  10b348:	80c00217 	ldw	r3,8(r16)
  10b34c:	80800017 	ldw	r2,0(r16)
  10b350:	9029883a 	mov	r20,r18
  10b354:	1c87c83a 	sub	r3,r3,r18
  10b358:	1485883a 	add	r2,r2,r18
  10b35c:	80800015 	stw	r2,0(r16)
  10b360:	80c00215 	stw	r3,8(r16)
  10b364:	9005883a 	mov	r2,r18
  10b368:	003f7606 	br	10b144 <black_to_red_frame+0xfe10b144>
  10b36c:	e009883a 	mov	r4,fp
  10b370:	01400284 	movi	r5,10
  10b374:	900d883a 	mov	r6,r18
  10b378:	010b8740 	call	10b874 <memchr>
  10b37c:	10003926 	beq	r2,zero,10b464 <__sfvwrite_r+0x484>
  10b380:	15800044 	addi	r22,r2,1
  10b384:	b72dc83a 	sub	r22,r22,fp
  10b388:	00c00044 	movi	r3,1
  10b38c:	003f8f06 	br	10b1cc <black_to_red_frame+0xfe10b1cc>
  10b390:	81000517 	ldw	r4,20(r16)
  10b394:	81400417 	ldw	r5,16(r16)
  10b398:	80c00017 	ldw	r3,0(r16)
  10b39c:	210d883a 	add	r6,r4,r4
  10b3a0:	3109883a 	add	r4,r6,r4
  10b3a4:	2028d7fa 	srli	r20,r4,31
  10b3a8:	196fc83a 	sub	r23,r3,r5
  10b3ac:	b9800044 	addi	r6,r23,1
  10b3b0:	a109883a 	add	r4,r20,r4
  10b3b4:	2029d07a 	srai	r20,r4,1
  10b3b8:	348d883a 	add	r6,r6,r18
  10b3bc:	a180272e 	bgeu	r20,r6,10b45c <__sfvwrite_r+0x47c>
  10b3c0:	3029883a 	mov	r20,r6
  10b3c4:	1081000c 	andi	r2,r2,1024
  10b3c8:	a809883a 	mov	r4,r21
  10b3cc:	103f6d26 	beq	r2,zero,10b184 <black_to_red_frame+0xfe10b184>
  10b3d0:	300b883a 	mov	r5,r6
  10b3d4:	0103f6c0 	call	103f6c <_malloc_r>
  10b3d8:	1039883a 	mov	fp,r2
  10b3dc:	103f6f26 	beq	r2,zero,10b19c <black_to_red_frame+0xfe10b19c>
  10b3e0:	81400417 	ldw	r5,16(r16)
  10b3e4:	1009883a 	mov	r4,r2
  10b3e8:	b80d883a 	mov	r6,r23
  10b3ec:	010b95c0 	call	10b95c <memcpy>
  10b3f0:	8080030b 	ldhu	r2,12(r16)
  10b3f4:	00fedfc4 	movi	r3,-1153
  10b3f8:	10c4703a 	and	r2,r2,r3
  10b3fc:	10802014 	ori	r2,r2,128
  10b400:	8080030d 	sth	r2,12(r16)
  10b404:	e5c9883a 	add	r4,fp,r23
  10b408:	a5c7c83a 	sub	r3,r20,r23
  10b40c:	87000415 	stw	fp,16(r16)
  10b410:	85000515 	stw	r20,20(r16)
  10b414:	81000015 	stw	r4,0(r16)
  10b418:	9039883a 	mov	fp,r18
  10b41c:	80c00215 	stw	r3,8(r16)
  10b420:	9029883a 	mov	r20,r18
  10b424:	902f883a 	mov	r23,r18
  10b428:	003f3c06 	br	10b11c <black_to_red_frame+0xfe10b11c>
  10b42c:	b00b883a 	mov	r5,r22
  10b430:	a00d883a 	mov	r6,r20
  10b434:	010ba680 	call	10ba68 <memmove>
  10b438:	80800017 	ldw	r2,0(r16)
  10b43c:	a809883a 	mov	r4,r21
  10b440:	800b883a 	mov	r5,r16
  10b444:	1505883a 	add	r2,r2,r20
  10b448:	80800015 	stw	r2,0(r16)
  10b44c:	010a5bc0 	call	10a5bc <_fflush_r>
  10b450:	103f541e 	bne	r2,zero,10b1a4 <black_to_red_frame+0xfe10b1a4>
  10b454:	a005883a 	mov	r2,r20
  10b458:	003f3a06 	br	10b144 <black_to_red_frame+0xfe10b144>
  10b45c:	a00d883a 	mov	r6,r20
  10b460:	003fd806 	br	10b3c4 <black_to_red_frame+0xfe10b3c4>
  10b464:	95800044 	addi	r22,r18,1
  10b468:	00c00044 	movi	r3,1
  10b46c:	003f5706 	br	10b1cc <black_to_red_frame+0xfe10b1cc>
  10b470:	80c0030b 	ldhu	r3,12(r16)
  10b474:	00bfffc4 	movi	r2,-1
  10b478:	18c01014 	ori	r3,r3,64
  10b47c:	80c0030d 	sth	r3,12(r16)
  10b480:	00c00244 	movi	r3,9
  10b484:	a8c00015 	stw	r3,0(r21)
  10b488:	003f0106 	br	10b090 <black_to_red_frame+0xfe10b090>

0010b48c <_fwalk>:
  10b48c:	defff904 	addi	sp,sp,-28
  10b490:	dcc00315 	stw	r19,12(sp)
  10b494:	24c0b804 	addi	r19,r4,736
  10b498:	dd400515 	stw	r21,20(sp)
  10b49c:	dd000415 	stw	r20,16(sp)
  10b4a0:	dfc00615 	stw	ra,24(sp)
  10b4a4:	dc800215 	stw	r18,8(sp)
  10b4a8:	dc400115 	stw	r17,4(sp)
  10b4ac:	dc000015 	stw	r16,0(sp)
  10b4b0:	282b883a 	mov	r21,r5
  10b4b4:	0029883a 	mov	r20,zero
  10b4b8:	010ab940 	call	10ab94 <__sfp_lock_acquire>
  10b4bc:	98001226 	beq	r19,zero,10b508 <_fwalk+0x7c>
  10b4c0:	04bfffc4 	movi	r18,-1
  10b4c4:	9c400117 	ldw	r17,4(r19)
  10b4c8:	9c000217 	ldw	r16,8(r19)
  10b4cc:	8c7fffc4 	addi	r17,r17,-1
  10b4d0:	88000b16 	blt	r17,zero,10b500 <_fwalk+0x74>
  10b4d4:	84000304 	addi	r16,r16,12
  10b4d8:	80c0000f 	ldh	r3,0(r16)
  10b4dc:	8c7fffc4 	addi	r17,r17,-1
  10b4e0:	813ffd04 	addi	r4,r16,-12
  10b4e4:	18000426 	beq	r3,zero,10b4f8 <_fwalk+0x6c>
  10b4e8:	80c0008f 	ldh	r3,2(r16)
  10b4ec:	1c800226 	beq	r3,r18,10b4f8 <_fwalk+0x6c>
  10b4f0:	a83ee83a 	callr	r21
  10b4f4:	a0a8b03a 	or	r20,r20,r2
  10b4f8:	84001a04 	addi	r16,r16,104
  10b4fc:	8cbff61e 	bne	r17,r18,10b4d8 <black_to_red_frame+0xfe10b4d8>
  10b500:	9cc00017 	ldw	r19,0(r19)
  10b504:	983fef1e 	bne	r19,zero,10b4c4 <black_to_red_frame+0xfe10b4c4>
  10b508:	010ab980 	call	10ab98 <__sfp_lock_release>
  10b50c:	a005883a 	mov	r2,r20
  10b510:	dfc00617 	ldw	ra,24(sp)
  10b514:	dd400517 	ldw	r21,20(sp)
  10b518:	dd000417 	ldw	r20,16(sp)
  10b51c:	dcc00317 	ldw	r19,12(sp)
  10b520:	dc800217 	ldw	r18,8(sp)
  10b524:	dc400117 	ldw	r17,4(sp)
  10b528:	dc000017 	ldw	r16,0(sp)
  10b52c:	dec00704 	addi	sp,sp,28
  10b530:	f800283a 	ret

0010b534 <_fwalk_reent>:
  10b534:	defff804 	addi	sp,sp,-32
  10b538:	dcc00315 	stw	r19,12(sp)
  10b53c:	24c0b804 	addi	r19,r4,736
  10b540:	dd800615 	stw	r22,24(sp)
  10b544:	dd400515 	stw	r21,20(sp)
  10b548:	dd000415 	stw	r20,16(sp)
  10b54c:	dfc00715 	stw	ra,28(sp)
  10b550:	dc800215 	stw	r18,8(sp)
  10b554:	dc400115 	stw	r17,4(sp)
  10b558:	dc000015 	stw	r16,0(sp)
  10b55c:	2029883a 	mov	r20,r4
  10b560:	282b883a 	mov	r21,r5
  10b564:	002d883a 	mov	r22,zero
  10b568:	010ab940 	call	10ab94 <__sfp_lock_acquire>
  10b56c:	98001326 	beq	r19,zero,10b5bc <_fwalk_reent+0x88>
  10b570:	04bfffc4 	movi	r18,-1
  10b574:	9c400117 	ldw	r17,4(r19)
  10b578:	9c000217 	ldw	r16,8(r19)
  10b57c:	8c7fffc4 	addi	r17,r17,-1
  10b580:	88000c16 	blt	r17,zero,10b5b4 <_fwalk_reent+0x80>
  10b584:	84000304 	addi	r16,r16,12
  10b588:	80c0000f 	ldh	r3,0(r16)
  10b58c:	8c7fffc4 	addi	r17,r17,-1
  10b590:	817ffd04 	addi	r5,r16,-12
  10b594:	18000526 	beq	r3,zero,10b5ac <_fwalk_reent+0x78>
  10b598:	80c0008f 	ldh	r3,2(r16)
  10b59c:	a009883a 	mov	r4,r20
  10b5a0:	1c800226 	beq	r3,r18,10b5ac <_fwalk_reent+0x78>
  10b5a4:	a83ee83a 	callr	r21
  10b5a8:	b0acb03a 	or	r22,r22,r2
  10b5ac:	84001a04 	addi	r16,r16,104
  10b5b0:	8cbff51e 	bne	r17,r18,10b588 <black_to_red_frame+0xfe10b588>
  10b5b4:	9cc00017 	ldw	r19,0(r19)
  10b5b8:	983fee1e 	bne	r19,zero,10b574 <black_to_red_frame+0xfe10b574>
  10b5bc:	010ab980 	call	10ab98 <__sfp_lock_release>
  10b5c0:	b005883a 	mov	r2,r22
  10b5c4:	dfc00717 	ldw	ra,28(sp)
  10b5c8:	dd800617 	ldw	r22,24(sp)
  10b5cc:	dd400517 	ldw	r21,20(sp)
  10b5d0:	dd000417 	ldw	r20,16(sp)
  10b5d4:	dcc00317 	ldw	r19,12(sp)
  10b5d8:	dc800217 	ldw	r18,8(sp)
  10b5dc:	dc400117 	ldw	r17,4(sp)
  10b5e0:	dc000017 	ldw	r16,0(sp)
  10b5e4:	dec00804 	addi	sp,sp,32
  10b5e8:	f800283a 	ret

0010b5ec <_setlocale_r>:
  10b5ec:	defffe04 	addi	sp,sp,-8
  10b5f0:	dc000015 	stw	r16,0(sp)
  10b5f4:	dfc00115 	stw	ra,4(sp)
  10b5f8:	3021883a 	mov	r16,r6
  10b5fc:	30000526 	beq	r6,zero,10b614 <_setlocale_r+0x28>
  10b600:	3009883a 	mov	r4,r6
  10b604:	01400474 	movhi	r5,17
  10b608:	295a5004 	addi	r5,r5,26944
  10b60c:	010d5540 	call	10d554 <strcmp>
  10b610:	1000061e 	bne	r2,zero,10b62c <_setlocale_r+0x40>
  10b614:	00800474 	movhi	r2,17
  10b618:	109a4f04 	addi	r2,r2,26940
  10b61c:	dfc00117 	ldw	ra,4(sp)
  10b620:	dc000017 	ldw	r16,0(sp)
  10b624:	dec00204 	addi	sp,sp,8
  10b628:	f800283a 	ret
  10b62c:	8009883a 	mov	r4,r16
  10b630:	01400474 	movhi	r5,17
  10b634:	295a4f04 	addi	r5,r5,26940
  10b638:	010d5540 	call	10d554 <strcmp>
  10b63c:	103ff526 	beq	r2,zero,10b614 <black_to_red_frame+0xfe10b614>
  10b640:	8009883a 	mov	r4,r16
  10b644:	01400474 	movhi	r5,17
  10b648:	295a3204 	addi	r5,r5,26824
  10b64c:	010d5540 	call	10d554 <strcmp>
  10b650:	103ff026 	beq	r2,zero,10b614 <black_to_red_frame+0xfe10b614>
  10b654:	0005883a 	mov	r2,zero
  10b658:	003ff006 	br	10b61c <black_to_red_frame+0xfe10b61c>

0010b65c <__locale_charset>:
  10b65c:	00800474 	movhi	r2,17
  10b660:	109d1704 	addi	r2,r2,29788
  10b664:	f800283a 	ret

0010b668 <__locale_mb_cur_max>:
  10b668:	008004b4 	movhi	r2,18
  10b66c:	10a1f504 	addi	r2,r2,-30764
  10b670:	10800017 	ldw	r2,0(r2)
  10b674:	f800283a 	ret

0010b678 <__locale_msgcharset>:
  10b678:	00800474 	movhi	r2,17
  10b67c:	109d0f04 	addi	r2,r2,29756
  10b680:	f800283a 	ret

0010b684 <__locale_cjk_lang>:
  10b684:	0005883a 	mov	r2,zero
  10b688:	f800283a 	ret

0010b68c <_localeconv_r>:
  10b68c:	00800474 	movhi	r2,17
  10b690:	109d1f04 	addi	r2,r2,29820
  10b694:	f800283a 	ret

0010b698 <setlocale>:
  10b698:	00c004b4 	movhi	r3,18
  10b69c:	18e1f404 	addi	r3,r3,-30768
  10b6a0:	2005883a 	mov	r2,r4
  10b6a4:	19000017 	ldw	r4,0(r3)
  10b6a8:	280d883a 	mov	r6,r5
  10b6ac:	100b883a 	mov	r5,r2
  10b6b0:	010b5ec1 	jmpi	10b5ec <_setlocale_r>

0010b6b4 <localeconv>:
  10b6b4:	00800474 	movhi	r2,17
  10b6b8:	109d1f04 	addi	r2,r2,29820
  10b6bc:	f800283a 	ret

0010b6c0 <__smakebuf_r>:
  10b6c0:	2880030b 	ldhu	r2,12(r5)
  10b6c4:	deffec04 	addi	sp,sp,-80
  10b6c8:	dc000f15 	stw	r16,60(sp)
  10b6cc:	dfc01315 	stw	ra,76(sp)
  10b6d0:	dcc01215 	stw	r19,72(sp)
  10b6d4:	dc801115 	stw	r18,68(sp)
  10b6d8:	dc401015 	stw	r17,64(sp)
  10b6dc:	10c0008c 	andi	r3,r2,2
  10b6e0:	2821883a 	mov	r16,r5
  10b6e4:	18003a1e 	bne	r3,zero,10b7d0 <__smakebuf_r+0x110>
  10b6e8:	2940038f 	ldh	r5,14(r5)
  10b6ec:	2023883a 	mov	r17,r4
  10b6f0:	28001b16 	blt	r5,zero,10b760 <__smakebuf_r+0xa0>
  10b6f4:	d80d883a 	mov	r6,sp
  10b6f8:	01105840 	call	110584 <_fstat_r>
  10b6fc:	10001716 	blt	r2,zero,10b75c <__smakebuf_r+0x9c>
  10b700:	d8800117 	ldw	r2,4(sp)
  10b704:	00e00014 	movui	r3,32768
  10b708:	10bc000c 	andi	r2,r2,61440
  10b70c:	10c03e26 	beq	r2,r3,10b808 <__smakebuf_r+0x148>
  10b710:	80c0030b 	ldhu	r3,12(r16)
  10b714:	18c20014 	ori	r3,r3,2048
  10b718:	80c0030d 	sth	r3,12(r16)
  10b71c:	00c80004 	movi	r3,8192
  10b720:	10c0431e 	bne	r2,r3,10b830 <__smakebuf_r+0x170>
  10b724:	8140038f 	ldh	r5,14(r16)
  10b728:	8809883a 	mov	r4,r17
  10b72c:	01105ec0 	call	1105ec <_isatty_r>
  10b730:	10004d26 	beq	r2,zero,10b868 <__smakebuf_r+0x1a8>
  10b734:	80c0030b 	ldhu	r3,12(r16)
  10b738:	04c00044 	movi	r19,1
  10b73c:	808010c4 	addi	r2,r16,67
  10b740:	1cc6b03a 	or	r3,r3,r19
  10b744:	80c0030d 	sth	r3,12(r16)
  10b748:	80800015 	stw	r2,0(r16)
  10b74c:	80800415 	stw	r2,16(r16)
  10b750:	84c00515 	stw	r19,20(r16)
  10b754:	04810004 	movi	r18,1024
  10b758:	00000706 	br	10b778 <__smakebuf_r+0xb8>
  10b75c:	8080030b 	ldhu	r2,12(r16)
  10b760:	10c0200c 	andi	r3,r2,128
  10b764:	1800261e 	bne	r3,zero,10b800 <__smakebuf_r+0x140>
  10b768:	04810004 	movi	r18,1024
  10b76c:	10820014 	ori	r2,r2,2048
  10b770:	8080030d 	sth	r2,12(r16)
  10b774:	0027883a 	mov	r19,zero
  10b778:	8809883a 	mov	r4,r17
  10b77c:	900b883a 	mov	r5,r18
  10b780:	0103f6c0 	call	103f6c <_malloc_r>
  10b784:	10002d26 	beq	r2,zero,10b83c <__smakebuf_r+0x17c>
  10b788:	80c0030b 	ldhu	r3,12(r16)
  10b78c:	01000474 	movhi	r4,17
  10b790:	212a1004 	addi	r4,r4,-22464
  10b794:	89000f15 	stw	r4,60(r17)
  10b798:	18c02014 	ori	r3,r3,128
  10b79c:	80c0030d 	sth	r3,12(r16)
  10b7a0:	80800015 	stw	r2,0(r16)
  10b7a4:	80800415 	stw	r2,16(r16)
  10b7a8:	84800515 	stw	r18,20(r16)
  10b7ac:	98000d26 	beq	r19,zero,10b7e4 <__smakebuf_r+0x124>
  10b7b0:	8140038f 	ldh	r5,14(r16)
  10b7b4:	8809883a 	mov	r4,r17
  10b7b8:	01105ec0 	call	1105ec <_isatty_r>
  10b7bc:	10000926 	beq	r2,zero,10b7e4 <__smakebuf_r+0x124>
  10b7c0:	8080030b 	ldhu	r2,12(r16)
  10b7c4:	10800054 	ori	r2,r2,1
  10b7c8:	8080030d 	sth	r2,12(r16)
  10b7cc:	00000506 	br	10b7e4 <__smakebuf_r+0x124>
  10b7d0:	288010c4 	addi	r2,r5,67
  10b7d4:	28800015 	stw	r2,0(r5)
  10b7d8:	28800415 	stw	r2,16(r5)
  10b7dc:	00800044 	movi	r2,1
  10b7e0:	28800515 	stw	r2,20(r5)
  10b7e4:	dfc01317 	ldw	ra,76(sp)
  10b7e8:	dcc01217 	ldw	r19,72(sp)
  10b7ec:	dc801117 	ldw	r18,68(sp)
  10b7f0:	dc401017 	ldw	r17,64(sp)
  10b7f4:	dc000f17 	ldw	r16,60(sp)
  10b7f8:	dec01404 	addi	sp,sp,80
  10b7fc:	f800283a 	ret
  10b800:	04801004 	movi	r18,64
  10b804:	003fd906 	br	10b76c <black_to_red_frame+0xfe10b76c>
  10b808:	81000a17 	ldw	r4,40(r16)
  10b80c:	00c00474 	movhi	r3,17
  10b810:	18f53c04 	addi	r3,r3,-11024
  10b814:	20ffbe1e 	bne	r4,r3,10b710 <black_to_red_frame+0xfe10b710>
  10b818:	80c0030b 	ldhu	r3,12(r16)
  10b81c:	01010004 	movi	r4,1024
  10b820:	81001315 	stw	r4,76(r16)
  10b824:	1906b03a 	or	r3,r3,r4
  10b828:	80c0030d 	sth	r3,12(r16)
  10b82c:	003fbb06 	br	10b71c <black_to_red_frame+0xfe10b71c>
  10b830:	0027883a 	mov	r19,zero
  10b834:	04810004 	movi	r18,1024
  10b838:	003fcf06 	br	10b778 <black_to_red_frame+0xfe10b778>
  10b83c:	8080030b 	ldhu	r2,12(r16)
  10b840:	10c0800c 	andi	r3,r2,512
  10b844:	183fe71e 	bne	r3,zero,10b7e4 <black_to_red_frame+0xfe10b7e4>
  10b848:	10800094 	ori	r2,r2,2
  10b84c:	80c010c4 	addi	r3,r16,67
  10b850:	8080030d 	sth	r2,12(r16)
  10b854:	00800044 	movi	r2,1
  10b858:	80c00015 	stw	r3,0(r16)
  10b85c:	80c00415 	stw	r3,16(r16)
  10b860:	80800515 	stw	r2,20(r16)
  10b864:	003fdf06 	br	10b7e4 <black_to_red_frame+0xfe10b7e4>
  10b868:	04c00044 	movi	r19,1
  10b86c:	04810004 	movi	r18,1024
  10b870:	003fc106 	br	10b778 <black_to_red_frame+0xfe10b778>

0010b874 <memchr>:
  10b874:	208000cc 	andi	r2,r4,3
  10b878:	2811883a 	mov	r8,r5
  10b87c:	10003526 	beq	r2,zero,10b954 <memchr+0xe0>
  10b880:	30bfffc4 	addi	r2,r6,-1
  10b884:	30001b26 	beq	r6,zero,10b8f4 <memchr+0x80>
  10b888:	21800003 	ldbu	r6,0(r4)
  10b88c:	28c03fcc 	andi	r3,r5,255
  10b890:	30c01a26 	beq	r6,r3,10b8fc <memchr+0x88>
  10b894:	180d883a 	mov	r6,r3
  10b898:	00000406 	br	10b8ac <memchr+0x38>
  10b89c:	10001526 	beq	r2,zero,10b8f4 <memchr+0x80>
  10b8a0:	20c00003 	ldbu	r3,0(r4)
  10b8a4:	10bfffc4 	addi	r2,r2,-1
  10b8a8:	19801426 	beq	r3,r6,10b8fc <memchr+0x88>
  10b8ac:	21000044 	addi	r4,r4,1
  10b8b0:	20c000cc 	andi	r3,r4,3
  10b8b4:	183ff91e 	bne	r3,zero,10b89c <black_to_red_frame+0xfe10b89c>
  10b8b8:	02c000c4 	movi	r11,3
  10b8bc:	58801136 	bltu	r11,r2,10b904 <memchr+0x90>
  10b8c0:	10000c26 	beq	r2,zero,10b8f4 <memchr+0x80>
  10b8c4:	20c00003 	ldbu	r3,0(r4)
  10b8c8:	29403fcc 	andi	r5,r5,255
  10b8cc:	19400b26 	beq	r3,r5,10b8fc <memchr+0x88>
  10b8d0:	20c00044 	addi	r3,r4,1
  10b8d4:	2085883a 	add	r2,r4,r2
  10b8d8:	41803fcc 	andi	r6,r8,255
  10b8dc:	00000306 	br	10b8ec <memchr+0x78>
  10b8e0:	18c00044 	addi	r3,r3,1
  10b8e4:	197fffc3 	ldbu	r5,-1(r3)
  10b8e8:	29800426 	beq	r5,r6,10b8fc <memchr+0x88>
  10b8ec:	1809883a 	mov	r4,r3
  10b8f0:	18bffb1e 	bne	r3,r2,10b8e0 <black_to_red_frame+0xfe10b8e0>
  10b8f4:	0005883a 	mov	r2,zero
  10b8f8:	f800283a 	ret
  10b8fc:	2005883a 	mov	r2,r4
  10b900:	f800283a 	ret
  10b904:	28c03fcc 	andi	r3,r5,255
  10b908:	180c923a 	slli	r6,r3,8
  10b90c:	02bfbff4 	movhi	r10,65279
  10b910:	52bfbfc4 	addi	r10,r10,-257
  10b914:	02602074 	movhi	r9,32897
  10b918:	4a602004 	addi	r9,r9,-32640
  10b91c:	30c6b03a 	or	r3,r6,r3
  10b920:	180c943a 	slli	r6,r3,16
  10b924:	30ccb03a 	or	r6,r6,r3
  10b928:	20c00017 	ldw	r3,0(r4)
  10b92c:	30c6f03a 	xor	r3,r6,r3
  10b930:	1a8f883a 	add	r7,r3,r10
  10b934:	00c6303a 	nor	r3,zero,r3
  10b938:	38c6703a 	and	r3,r7,r3
  10b93c:	1a46703a 	and	r3,r3,r9
  10b940:	183fdf1e 	bne	r3,zero,10b8c0 <black_to_red_frame+0xfe10b8c0>
  10b944:	10bfff04 	addi	r2,r2,-4
  10b948:	21000104 	addi	r4,r4,4
  10b94c:	58bff636 	bltu	r11,r2,10b928 <black_to_red_frame+0xfe10b928>
  10b950:	003fdb06 	br	10b8c0 <black_to_red_frame+0xfe10b8c0>
  10b954:	3005883a 	mov	r2,r6
  10b958:	003fd706 	br	10b8b8 <black_to_red_frame+0xfe10b8b8>

0010b95c <memcpy>:
  10b95c:	00c003c4 	movi	r3,15
  10b960:	2005883a 	mov	r2,r4
  10b964:	1980372e 	bgeu	r3,r6,10ba44 <memcpy+0xe8>
  10b968:	2146b03a 	or	r3,r4,r5
  10b96c:	18c000cc 	andi	r3,r3,3
  10b970:	1800371e 	bne	r3,zero,10ba50 <memcpy+0xf4>
  10b974:	327ffc04 	addi	r9,r6,-16
  10b978:	4812d13a 	srli	r9,r9,4
  10b97c:	2007883a 	mov	r3,r4
  10b980:	280f883a 	mov	r7,r5
  10b984:	4808913a 	slli	r4,r9,4
  10b988:	1109883a 	add	r4,r2,r4
  10b98c:	21000404 	addi	r4,r4,16
  10b990:	3a000017 	ldw	r8,0(r7)
  10b994:	18c00404 	addi	r3,r3,16
  10b998:	39c00404 	addi	r7,r7,16
  10b99c:	1a3ffc15 	stw	r8,-16(r3)
  10b9a0:	3a3ffd17 	ldw	r8,-12(r7)
  10b9a4:	1a3ffd15 	stw	r8,-12(r3)
  10b9a8:	3a3ffe17 	ldw	r8,-8(r7)
  10b9ac:	1a3ffe15 	stw	r8,-8(r3)
  10b9b0:	3a3fff17 	ldw	r8,-4(r7)
  10b9b4:	1a3fff15 	stw	r8,-4(r3)
  10b9b8:	193ff51e 	bne	r3,r4,10b990 <black_to_red_frame+0xfe10b990>
  10b9bc:	49000044 	addi	r4,r9,1
  10b9c0:	2008913a 	slli	r4,r4,4
  10b9c4:	328003cc 	andi	r10,r6,15
  10b9c8:	1107883a 	add	r3,r2,r4
  10b9cc:	290b883a 	add	r5,r5,r4
  10b9d0:	010000c4 	movi	r4,3
  10b9d4:	2280212e 	bgeu	r4,r10,10ba5c <memcpy+0x100>
  10b9d8:	52bfff04 	addi	r10,r10,-4
  10b9dc:	5014d0ba 	srli	r10,r10,2
  10b9e0:	180f883a 	mov	r7,r3
  10b9e4:	2811883a 	mov	r8,r5
  10b9e8:	5289883a 	add	r4,r10,r10
  10b9ec:	2109883a 	add	r4,r4,r4
  10b9f0:	21000104 	addi	r4,r4,4
  10b9f4:	1909883a 	add	r4,r3,r4
  10b9f8:	42400017 	ldw	r9,0(r8)
  10b9fc:	39c00104 	addi	r7,r7,4
  10ba00:	42000104 	addi	r8,r8,4
  10ba04:	3a7fff15 	stw	r9,-4(r7)
  10ba08:	393ffb1e 	bne	r7,r4,10b9f8 <black_to_red_frame+0xfe10b9f8>
  10ba0c:	51000044 	addi	r4,r10,1
  10ba10:	2109883a 	add	r4,r4,r4
  10ba14:	2109883a 	add	r4,r4,r4
  10ba18:	318000cc 	andi	r6,r6,3
  10ba1c:	1907883a 	add	r3,r3,r4
  10ba20:	290b883a 	add	r5,r5,r4
  10ba24:	30000c26 	beq	r6,zero,10ba58 <memcpy+0xfc>
  10ba28:	298d883a 	add	r6,r5,r6
  10ba2c:	29c00003 	ldbu	r7,0(r5)
  10ba30:	18c00044 	addi	r3,r3,1
  10ba34:	29400044 	addi	r5,r5,1
  10ba38:	19ffffc5 	stb	r7,-1(r3)
  10ba3c:	29bffb1e 	bne	r5,r6,10ba2c <black_to_red_frame+0xfe10ba2c>
  10ba40:	f800283a 	ret
  10ba44:	2007883a 	mov	r3,r4
  10ba48:	303ff71e 	bne	r6,zero,10ba28 <black_to_red_frame+0xfe10ba28>
  10ba4c:	00000206 	br	10ba58 <memcpy+0xfc>
  10ba50:	2007883a 	mov	r3,r4
  10ba54:	003ff406 	br	10ba28 <black_to_red_frame+0xfe10ba28>
  10ba58:	f800283a 	ret
  10ba5c:	500d883a 	mov	r6,r10
  10ba60:	303ff11e 	bne	r6,zero,10ba28 <black_to_red_frame+0xfe10ba28>
  10ba64:	003ffc06 	br	10ba58 <black_to_red_frame+0xfe10ba58>

0010ba68 <memmove>:
  10ba68:	2005883a 	mov	r2,r4
  10ba6c:	29000b2e 	bgeu	r5,r4,10ba9c <memmove+0x34>
  10ba70:	298f883a 	add	r7,r5,r6
  10ba74:	21c0092e 	bgeu	r4,r7,10ba9c <memmove+0x34>
  10ba78:	2187883a 	add	r3,r4,r6
  10ba7c:	198bc83a 	sub	r5,r3,r6
  10ba80:	30003e26 	beq	r6,zero,10bb7c <memmove+0x114>
  10ba84:	39ffffc4 	addi	r7,r7,-1
  10ba88:	39000003 	ldbu	r4,0(r7)
  10ba8c:	18ffffc4 	addi	r3,r3,-1
  10ba90:	19000005 	stb	r4,0(r3)
  10ba94:	197ffb1e 	bne	r3,r5,10ba84 <black_to_red_frame+0xfe10ba84>
  10ba98:	f800283a 	ret
  10ba9c:	00c003c4 	movi	r3,15
  10baa0:	1980372e 	bgeu	r3,r6,10bb80 <memmove+0x118>
  10baa4:	1146b03a 	or	r3,r2,r5
  10baa8:	18c000cc 	andi	r3,r3,3
  10baac:	1800371e 	bne	r3,zero,10bb8c <memmove+0x124>
  10bab0:	327ffc04 	addi	r9,r6,-16
  10bab4:	4812d13a 	srli	r9,r9,4
  10bab8:	280f883a 	mov	r7,r5
  10babc:	1007883a 	mov	r3,r2
  10bac0:	4810913a 	slli	r8,r9,4
  10bac4:	1211883a 	add	r8,r2,r8
  10bac8:	42000404 	addi	r8,r8,16
  10bacc:	39000017 	ldw	r4,0(r7)
  10bad0:	18c00404 	addi	r3,r3,16
  10bad4:	39c00404 	addi	r7,r7,16
  10bad8:	193ffc15 	stw	r4,-16(r3)
  10badc:	393ffd17 	ldw	r4,-12(r7)
  10bae0:	193ffd15 	stw	r4,-12(r3)
  10bae4:	393ffe17 	ldw	r4,-8(r7)
  10bae8:	193ffe15 	stw	r4,-8(r3)
  10baec:	393fff17 	ldw	r4,-4(r7)
  10baf0:	193fff15 	stw	r4,-4(r3)
  10baf4:	1a3ff51e 	bne	r3,r8,10bacc <black_to_red_frame+0xfe10bacc>
  10baf8:	49000044 	addi	r4,r9,1
  10bafc:	2008913a 	slli	r4,r4,4
  10bb00:	328003cc 	andi	r10,r6,15
  10bb04:	1107883a 	add	r3,r2,r4
  10bb08:	290b883a 	add	r5,r5,r4
  10bb0c:	010000c4 	movi	r4,3
  10bb10:	2280212e 	bgeu	r4,r10,10bb98 <memmove+0x130>
  10bb14:	52bfff04 	addi	r10,r10,-4
  10bb18:	5014d0ba 	srli	r10,r10,2
  10bb1c:	180f883a 	mov	r7,r3
  10bb20:	2809883a 	mov	r4,r5
  10bb24:	5291883a 	add	r8,r10,r10
  10bb28:	4211883a 	add	r8,r8,r8
  10bb2c:	42400104 	addi	r9,r8,4
  10bb30:	1a53883a 	add	r9,r3,r9
  10bb34:	22000017 	ldw	r8,0(r4)
  10bb38:	39c00104 	addi	r7,r7,4
  10bb3c:	21000104 	addi	r4,r4,4
  10bb40:	3a3fff15 	stw	r8,-4(r7)
  10bb44:	3a7ffb1e 	bne	r7,r9,10bb34 <black_to_red_frame+0xfe10bb34>
  10bb48:	51000044 	addi	r4,r10,1
  10bb4c:	2109883a 	add	r4,r4,r4
  10bb50:	2109883a 	add	r4,r4,r4
  10bb54:	318000cc 	andi	r6,r6,3
  10bb58:	1907883a 	add	r3,r3,r4
  10bb5c:	290b883a 	add	r5,r5,r4
  10bb60:	30000c26 	beq	r6,zero,10bb94 <memmove+0x12c>
  10bb64:	198d883a 	add	r6,r3,r6
  10bb68:	29c00003 	ldbu	r7,0(r5)
  10bb6c:	18c00044 	addi	r3,r3,1
  10bb70:	29400044 	addi	r5,r5,1
  10bb74:	19ffffc5 	stb	r7,-1(r3)
  10bb78:	19bffb1e 	bne	r3,r6,10bb68 <black_to_red_frame+0xfe10bb68>
  10bb7c:	f800283a 	ret
  10bb80:	1007883a 	mov	r3,r2
  10bb84:	303ff71e 	bne	r6,zero,10bb64 <black_to_red_frame+0xfe10bb64>
  10bb88:	00000206 	br	10bb94 <memmove+0x12c>
  10bb8c:	1007883a 	mov	r3,r2
  10bb90:	003ff406 	br	10bb64 <black_to_red_frame+0xfe10bb64>
  10bb94:	f800283a 	ret
  10bb98:	500d883a 	mov	r6,r10
  10bb9c:	303ff11e 	bne	r6,zero,10bb64 <black_to_red_frame+0xfe10bb64>
  10bba0:	003ffc06 	br	10bb94 <black_to_red_frame+0xfe10bb94>

0010bba4 <memset>:
  10bba4:	20c000cc 	andi	r3,r4,3
  10bba8:	2005883a 	mov	r2,r4
  10bbac:	18003f26 	beq	r3,zero,10bcac <memset+0x108>
  10bbb0:	31ffffc4 	addi	r7,r6,-1
  10bbb4:	30003b26 	beq	r6,zero,10bca4 <memset+0x100>
  10bbb8:	2813883a 	mov	r9,r5
  10bbbc:	200d883a 	mov	r6,r4
  10bbc0:	2007883a 	mov	r3,r4
  10bbc4:	00000406 	br	10bbd8 <memset+0x34>
  10bbc8:	3a3fffc4 	addi	r8,r7,-1
  10bbcc:	31800044 	addi	r6,r6,1
  10bbd0:	38003426 	beq	r7,zero,10bca4 <memset+0x100>
  10bbd4:	400f883a 	mov	r7,r8
  10bbd8:	18c00044 	addi	r3,r3,1
  10bbdc:	32400005 	stb	r9,0(r6)
  10bbe0:	1a0000cc 	andi	r8,r3,3
  10bbe4:	403ff81e 	bne	r8,zero,10bbc8 <black_to_red_frame+0xfe10bbc8>
  10bbe8:	010000c4 	movi	r4,3
  10bbec:	21c0282e 	bgeu	r4,r7,10bc90 <memset+0xec>
  10bbf0:	29003fcc 	andi	r4,r5,255
  10bbf4:	2010923a 	slli	r8,r4,8
  10bbf8:	4108b03a 	or	r4,r8,r4
  10bbfc:	2010943a 	slli	r8,r4,16
  10bc00:	4110b03a 	or	r8,r8,r4
  10bc04:	010003c4 	movi	r4,15
  10bc08:	21c0122e 	bgeu	r4,r7,10bc54 <memset+0xb0>
  10bc0c:	3a7ffc04 	addi	r9,r7,-16
  10bc10:	4812d13a 	srli	r9,r9,4
  10bc14:	19000404 	addi	r4,r3,16
  10bc18:	180d883a 	mov	r6,r3
  10bc1c:	4814913a 	slli	r10,r9,4
  10bc20:	2289883a 	add	r4,r4,r10
  10bc24:	32000015 	stw	r8,0(r6)
  10bc28:	32000115 	stw	r8,4(r6)
  10bc2c:	32000215 	stw	r8,8(r6)
  10bc30:	32000315 	stw	r8,12(r6)
  10bc34:	31800404 	addi	r6,r6,16
  10bc38:	313ffa1e 	bne	r6,r4,10bc24 <black_to_red_frame+0xfe10bc24>
  10bc3c:	4a400044 	addi	r9,r9,1
  10bc40:	4812913a 	slli	r9,r9,4
  10bc44:	39c003cc 	andi	r7,r7,15
  10bc48:	010000c4 	movi	r4,3
  10bc4c:	1a47883a 	add	r3,r3,r9
  10bc50:	21c00f2e 	bgeu	r4,r7,10bc90 <memset+0xec>
  10bc54:	3a7fff04 	addi	r9,r7,-4
  10bc58:	4812d0ba 	srli	r9,r9,2
  10bc5c:	19000104 	addi	r4,r3,4
  10bc60:	180d883a 	mov	r6,r3
  10bc64:	4a55883a 	add	r10,r9,r9
  10bc68:	5295883a 	add	r10,r10,r10
  10bc6c:	2289883a 	add	r4,r4,r10
  10bc70:	32000015 	stw	r8,0(r6)
  10bc74:	31800104 	addi	r6,r6,4
  10bc78:	313ffd1e 	bne	r6,r4,10bc70 <black_to_red_frame+0xfe10bc70>
  10bc7c:	4a400044 	addi	r9,r9,1
  10bc80:	4a53883a 	add	r9,r9,r9
  10bc84:	4a53883a 	add	r9,r9,r9
  10bc88:	1a47883a 	add	r3,r3,r9
  10bc8c:	39c000cc 	andi	r7,r7,3
  10bc90:	38000526 	beq	r7,zero,10bca8 <memset+0x104>
  10bc94:	19cf883a 	add	r7,r3,r7
  10bc98:	19400005 	stb	r5,0(r3)
  10bc9c:	18c00044 	addi	r3,r3,1
  10bca0:	19fffd1e 	bne	r3,r7,10bc98 <black_to_red_frame+0xfe10bc98>
  10bca4:	f800283a 	ret
  10bca8:	f800283a 	ret
  10bcac:	2007883a 	mov	r3,r4
  10bcb0:	300f883a 	mov	r7,r6
  10bcb4:	003fcc06 	br	10bbe8 <black_to_red_frame+0xfe10bbe8>

0010bcb8 <_Balloc>:
  10bcb8:	20801317 	ldw	r2,76(r4)
  10bcbc:	defffc04 	addi	sp,sp,-16
  10bcc0:	dc400115 	stw	r17,4(sp)
  10bcc4:	dc000015 	stw	r16,0(sp)
  10bcc8:	dfc00315 	stw	ra,12(sp)
  10bccc:	dc800215 	stw	r18,8(sp)
  10bcd0:	2023883a 	mov	r17,r4
  10bcd4:	2821883a 	mov	r16,r5
  10bcd8:	10000f26 	beq	r2,zero,10bd18 <_Balloc+0x60>
  10bcdc:	8407883a 	add	r3,r16,r16
  10bce0:	18c7883a 	add	r3,r3,r3
  10bce4:	10c7883a 	add	r3,r2,r3
  10bce8:	18800017 	ldw	r2,0(r3)
  10bcec:	10001126 	beq	r2,zero,10bd34 <_Balloc+0x7c>
  10bcf0:	11000017 	ldw	r4,0(r2)
  10bcf4:	19000015 	stw	r4,0(r3)
  10bcf8:	10000415 	stw	zero,16(r2)
  10bcfc:	10000315 	stw	zero,12(r2)
  10bd00:	dfc00317 	ldw	ra,12(sp)
  10bd04:	dc800217 	ldw	r18,8(sp)
  10bd08:	dc400117 	ldw	r17,4(sp)
  10bd0c:	dc000017 	ldw	r16,0(sp)
  10bd10:	dec00404 	addi	sp,sp,16
  10bd14:	f800283a 	ret
  10bd18:	01400104 	movi	r5,4
  10bd1c:	01800844 	movi	r6,33
  10bd20:	01101740 	call	110174 <_calloc_r>
  10bd24:	88801315 	stw	r2,76(r17)
  10bd28:	103fec1e 	bne	r2,zero,10bcdc <black_to_red_frame+0xfe10bcdc>
  10bd2c:	0005883a 	mov	r2,zero
  10bd30:	003ff306 	br	10bd00 <black_to_red_frame+0xfe10bd00>
  10bd34:	01400044 	movi	r5,1
  10bd38:	2c24983a 	sll	r18,r5,r16
  10bd3c:	8809883a 	mov	r4,r17
  10bd40:	91800144 	addi	r6,r18,5
  10bd44:	318d883a 	add	r6,r6,r6
  10bd48:	318d883a 	add	r6,r6,r6
  10bd4c:	01101740 	call	110174 <_calloc_r>
  10bd50:	103ff626 	beq	r2,zero,10bd2c <black_to_red_frame+0xfe10bd2c>
  10bd54:	14000115 	stw	r16,4(r2)
  10bd58:	14800215 	stw	r18,8(r2)
  10bd5c:	003fe606 	br	10bcf8 <black_to_red_frame+0xfe10bcf8>

0010bd60 <_Bfree>:
  10bd60:	28000826 	beq	r5,zero,10bd84 <_Bfree+0x24>
  10bd64:	28c00117 	ldw	r3,4(r5)
  10bd68:	20801317 	ldw	r2,76(r4)
  10bd6c:	18c7883a 	add	r3,r3,r3
  10bd70:	18c7883a 	add	r3,r3,r3
  10bd74:	10c5883a 	add	r2,r2,r3
  10bd78:	10c00017 	ldw	r3,0(r2)
  10bd7c:	28c00015 	stw	r3,0(r5)
  10bd80:	11400015 	stw	r5,0(r2)
  10bd84:	f800283a 	ret

0010bd88 <__multadd>:
  10bd88:	defff604 	addi	sp,sp,-40
  10bd8c:	dd400515 	stw	r21,20(sp)
  10bd90:	2d400417 	ldw	r21,16(r5)
  10bd94:	df000815 	stw	fp,32(sp)
  10bd98:	ddc00715 	stw	r23,28(sp)
  10bd9c:	dd800615 	stw	r22,24(sp)
  10bda0:	dd000415 	stw	r20,16(sp)
  10bda4:	dc400115 	stw	r17,4(sp)
  10bda8:	dc000015 	stw	r16,0(sp)
  10bdac:	dfc00915 	stw	ra,36(sp)
  10bdb0:	dcc00315 	stw	r19,12(sp)
  10bdb4:	dc800215 	stw	r18,8(sp)
  10bdb8:	282d883a 	mov	r22,r5
  10bdbc:	202f883a 	mov	r23,r4
  10bdc0:	3029883a 	mov	r20,r6
  10bdc4:	3839883a 	mov	fp,r7
  10bdc8:	2c000504 	addi	r16,r5,20
  10bdcc:	0023883a 	mov	r17,zero
  10bdd0:	84c00017 	ldw	r19,0(r16)
  10bdd4:	a00b883a 	mov	r5,r20
  10bdd8:	8c400044 	addi	r17,r17,1
  10bddc:	993fffcc 	andi	r4,r19,65535
  10bde0:	0103f1c0 	call	103f1c <__mulsi3>
  10bde4:	1725883a 	add	r18,r2,fp
  10bde8:	9808d43a 	srli	r4,r19,16
  10bdec:	9026d43a 	srli	r19,r18,16
  10bdf0:	a00b883a 	mov	r5,r20
  10bdf4:	0103f1c0 	call	103f1c <__mulsi3>
  10bdf8:	988f883a 	add	r7,r19,r2
  10bdfc:	3804943a 	slli	r2,r7,16
  10be00:	94bfffcc 	andi	r18,r18,65535
  10be04:	3838d43a 	srli	fp,r7,16
  10be08:	14a5883a 	add	r18,r2,r18
  10be0c:	84800015 	stw	r18,0(r16)
  10be10:	84000104 	addi	r16,r16,4
  10be14:	8d7fee16 	blt	r17,r21,10bdd0 <black_to_red_frame+0xfe10bdd0>
  10be18:	e0000926 	beq	fp,zero,10be40 <__multadd+0xb8>
  10be1c:	b0800217 	ldw	r2,8(r22)
  10be20:	a880140e 	bge	r21,r2,10be74 <__multadd+0xec>
  10be24:	a8800144 	addi	r2,r21,5
  10be28:	1085883a 	add	r2,r2,r2
  10be2c:	1085883a 	add	r2,r2,r2
  10be30:	b085883a 	add	r2,r22,r2
  10be34:	17000015 	stw	fp,0(r2)
  10be38:	ad400044 	addi	r21,r21,1
  10be3c:	b5400415 	stw	r21,16(r22)
  10be40:	b005883a 	mov	r2,r22
  10be44:	dfc00917 	ldw	ra,36(sp)
  10be48:	df000817 	ldw	fp,32(sp)
  10be4c:	ddc00717 	ldw	r23,28(sp)
  10be50:	dd800617 	ldw	r22,24(sp)
  10be54:	dd400517 	ldw	r21,20(sp)
  10be58:	dd000417 	ldw	r20,16(sp)
  10be5c:	dcc00317 	ldw	r19,12(sp)
  10be60:	dc800217 	ldw	r18,8(sp)
  10be64:	dc400117 	ldw	r17,4(sp)
  10be68:	dc000017 	ldw	r16,0(sp)
  10be6c:	dec00a04 	addi	sp,sp,40
  10be70:	f800283a 	ret
  10be74:	b1400117 	ldw	r5,4(r22)
  10be78:	b809883a 	mov	r4,r23
  10be7c:	29400044 	addi	r5,r5,1
  10be80:	010bcb80 	call	10bcb8 <_Balloc>
  10be84:	b1800417 	ldw	r6,16(r22)
  10be88:	b1400304 	addi	r5,r22,12
  10be8c:	11000304 	addi	r4,r2,12
  10be90:	31800084 	addi	r6,r6,2
  10be94:	318d883a 	add	r6,r6,r6
  10be98:	318d883a 	add	r6,r6,r6
  10be9c:	1021883a 	mov	r16,r2
  10bea0:	010b95c0 	call	10b95c <memcpy>
  10bea4:	b0c00117 	ldw	r3,4(r22)
  10bea8:	b8801317 	ldw	r2,76(r23)
  10beac:	18c7883a 	add	r3,r3,r3
  10beb0:	18c7883a 	add	r3,r3,r3
  10beb4:	10c5883a 	add	r2,r2,r3
  10beb8:	10c00017 	ldw	r3,0(r2)
  10bebc:	b0c00015 	stw	r3,0(r22)
  10bec0:	15800015 	stw	r22,0(r2)
  10bec4:	802d883a 	mov	r22,r16
  10bec8:	003fd606 	br	10be24 <black_to_red_frame+0xfe10be24>

0010becc <__s2b>:
  10becc:	defff904 	addi	sp,sp,-28
  10bed0:	dd000415 	stw	r20,16(sp)
  10bed4:	dc400115 	stw	r17,4(sp)
  10bed8:	2829883a 	mov	r20,r5
  10bedc:	2023883a 	mov	r17,r4
  10bee0:	01400244 	movi	r5,9
  10bee4:	39000204 	addi	r4,r7,8
  10bee8:	dcc00315 	stw	r19,12(sp)
  10beec:	dc800215 	stw	r18,8(sp)
  10bef0:	dfc00615 	stw	ra,24(sp)
  10bef4:	dd400515 	stw	r21,20(sp)
  10bef8:	dc000015 	stw	r16,0(sp)
  10befc:	3827883a 	mov	r19,r7
  10bf00:	3025883a 	mov	r18,r6
  10bf04:	0103e780 	call	103e78 <__divsi3>
  10bf08:	00c00044 	movi	r3,1
  10bf0c:	000b883a 	mov	r5,zero
  10bf10:	1880030e 	bge	r3,r2,10bf20 <__s2b+0x54>
  10bf14:	18c7883a 	add	r3,r3,r3
  10bf18:	29400044 	addi	r5,r5,1
  10bf1c:	18bffd16 	blt	r3,r2,10bf14 <black_to_red_frame+0xfe10bf14>
  10bf20:	8809883a 	mov	r4,r17
  10bf24:	010bcb80 	call	10bcb8 <_Balloc>
  10bf28:	d8c00717 	ldw	r3,28(sp)
  10bf2c:	10c00515 	stw	r3,20(r2)
  10bf30:	00c00044 	movi	r3,1
  10bf34:	10c00415 	stw	r3,16(r2)
  10bf38:	00c00244 	movi	r3,9
  10bf3c:	1c80210e 	bge	r3,r18,10bfc4 <__s2b+0xf8>
  10bf40:	a0eb883a 	add	r21,r20,r3
  10bf44:	a821883a 	mov	r16,r21
  10bf48:	a4a9883a 	add	r20,r20,r18
  10bf4c:	81c00007 	ldb	r7,0(r16)
  10bf50:	8809883a 	mov	r4,r17
  10bf54:	84000044 	addi	r16,r16,1
  10bf58:	100b883a 	mov	r5,r2
  10bf5c:	01800284 	movi	r6,10
  10bf60:	39fff404 	addi	r7,r7,-48
  10bf64:	010bd880 	call	10bd88 <__multadd>
  10bf68:	853ff81e 	bne	r16,r20,10bf4c <black_to_red_frame+0xfe10bf4c>
  10bf6c:	aca1883a 	add	r16,r21,r18
  10bf70:	843ffe04 	addi	r16,r16,-8
  10bf74:	94c00a0e 	bge	r18,r19,10bfa0 <__s2b+0xd4>
  10bf78:	84e7883a 	add	r19,r16,r19
  10bf7c:	9ca5c83a 	sub	r18,r19,r18
  10bf80:	81c00007 	ldb	r7,0(r16)
  10bf84:	8809883a 	mov	r4,r17
  10bf88:	84000044 	addi	r16,r16,1
  10bf8c:	100b883a 	mov	r5,r2
  10bf90:	01800284 	movi	r6,10
  10bf94:	39fff404 	addi	r7,r7,-48
  10bf98:	010bd880 	call	10bd88 <__multadd>
  10bf9c:	84bff81e 	bne	r16,r18,10bf80 <black_to_red_frame+0xfe10bf80>
  10bfa0:	dfc00617 	ldw	ra,24(sp)
  10bfa4:	dd400517 	ldw	r21,20(sp)
  10bfa8:	dd000417 	ldw	r20,16(sp)
  10bfac:	dcc00317 	ldw	r19,12(sp)
  10bfb0:	dc800217 	ldw	r18,8(sp)
  10bfb4:	dc400117 	ldw	r17,4(sp)
  10bfb8:	dc000017 	ldw	r16,0(sp)
  10bfbc:	dec00704 	addi	sp,sp,28
  10bfc0:	f800283a 	ret
  10bfc4:	a4000284 	addi	r16,r20,10
  10bfc8:	1825883a 	mov	r18,r3
  10bfcc:	003fe906 	br	10bf74 <black_to_red_frame+0xfe10bf74>

0010bfd0 <__hi0bits>:
  10bfd0:	20bfffec 	andhi	r2,r4,65535
  10bfd4:	1000141e 	bne	r2,zero,10c028 <__hi0bits+0x58>
  10bfd8:	2008943a 	slli	r4,r4,16
  10bfdc:	00800404 	movi	r2,16
  10bfe0:	20ffc02c 	andhi	r3,r4,65280
  10bfe4:	1800021e 	bne	r3,zero,10bff0 <__hi0bits+0x20>
  10bfe8:	2008923a 	slli	r4,r4,8
  10bfec:	10800204 	addi	r2,r2,8
  10bff0:	20fc002c 	andhi	r3,r4,61440
  10bff4:	1800021e 	bne	r3,zero,10c000 <__hi0bits+0x30>
  10bff8:	2008913a 	slli	r4,r4,4
  10bffc:	10800104 	addi	r2,r2,4
  10c000:	20f0002c 	andhi	r3,r4,49152
  10c004:	1800031e 	bne	r3,zero,10c014 <__hi0bits+0x44>
  10c008:	2109883a 	add	r4,r4,r4
  10c00c:	10800084 	addi	r2,r2,2
  10c010:	2109883a 	add	r4,r4,r4
  10c014:	20000316 	blt	r4,zero,10c024 <__hi0bits+0x54>
  10c018:	2110002c 	andhi	r4,r4,16384
  10c01c:	2000041e 	bne	r4,zero,10c030 <__hi0bits+0x60>
  10c020:	00800804 	movi	r2,32
  10c024:	f800283a 	ret
  10c028:	0005883a 	mov	r2,zero
  10c02c:	003fec06 	br	10bfe0 <black_to_red_frame+0xfe10bfe0>
  10c030:	10800044 	addi	r2,r2,1
  10c034:	f800283a 	ret

0010c038 <__lo0bits>:
  10c038:	20c00017 	ldw	r3,0(r4)
  10c03c:	188001cc 	andi	r2,r3,7
  10c040:	10000826 	beq	r2,zero,10c064 <__lo0bits+0x2c>
  10c044:	1880004c 	andi	r2,r3,1
  10c048:	1000211e 	bne	r2,zero,10c0d0 <__lo0bits+0x98>
  10c04c:	1880008c 	andi	r2,r3,2
  10c050:	1000211e 	bne	r2,zero,10c0d8 <__lo0bits+0xa0>
  10c054:	1806d0ba 	srli	r3,r3,2
  10c058:	00800084 	movi	r2,2
  10c05c:	20c00015 	stw	r3,0(r4)
  10c060:	f800283a 	ret
  10c064:	18bfffcc 	andi	r2,r3,65535
  10c068:	10001326 	beq	r2,zero,10c0b8 <__lo0bits+0x80>
  10c06c:	0005883a 	mov	r2,zero
  10c070:	19403fcc 	andi	r5,r3,255
  10c074:	2800021e 	bne	r5,zero,10c080 <__lo0bits+0x48>
  10c078:	1806d23a 	srli	r3,r3,8
  10c07c:	10800204 	addi	r2,r2,8
  10c080:	194003cc 	andi	r5,r3,15
  10c084:	2800021e 	bne	r5,zero,10c090 <__lo0bits+0x58>
  10c088:	1806d13a 	srli	r3,r3,4
  10c08c:	10800104 	addi	r2,r2,4
  10c090:	194000cc 	andi	r5,r3,3
  10c094:	2800021e 	bne	r5,zero,10c0a0 <__lo0bits+0x68>
  10c098:	1806d0ba 	srli	r3,r3,2
  10c09c:	10800084 	addi	r2,r2,2
  10c0a0:	1940004c 	andi	r5,r3,1
  10c0a4:	2800081e 	bne	r5,zero,10c0c8 <__lo0bits+0x90>
  10c0a8:	1806d07a 	srli	r3,r3,1
  10c0ac:	1800051e 	bne	r3,zero,10c0c4 <__lo0bits+0x8c>
  10c0b0:	00800804 	movi	r2,32
  10c0b4:	f800283a 	ret
  10c0b8:	1806d43a 	srli	r3,r3,16
  10c0bc:	00800404 	movi	r2,16
  10c0c0:	003feb06 	br	10c070 <black_to_red_frame+0xfe10c070>
  10c0c4:	10800044 	addi	r2,r2,1
  10c0c8:	20c00015 	stw	r3,0(r4)
  10c0cc:	f800283a 	ret
  10c0d0:	0005883a 	mov	r2,zero
  10c0d4:	f800283a 	ret
  10c0d8:	1806d07a 	srli	r3,r3,1
  10c0dc:	00800044 	movi	r2,1
  10c0e0:	20c00015 	stw	r3,0(r4)
  10c0e4:	f800283a 	ret

0010c0e8 <__i2b>:
  10c0e8:	defffd04 	addi	sp,sp,-12
  10c0ec:	dc000015 	stw	r16,0(sp)
  10c0f0:	04000044 	movi	r16,1
  10c0f4:	dc400115 	stw	r17,4(sp)
  10c0f8:	2823883a 	mov	r17,r5
  10c0fc:	800b883a 	mov	r5,r16
  10c100:	dfc00215 	stw	ra,8(sp)
  10c104:	010bcb80 	call	10bcb8 <_Balloc>
  10c108:	14400515 	stw	r17,20(r2)
  10c10c:	14000415 	stw	r16,16(r2)
  10c110:	dfc00217 	ldw	ra,8(sp)
  10c114:	dc400117 	ldw	r17,4(sp)
  10c118:	dc000017 	ldw	r16,0(sp)
  10c11c:	dec00304 	addi	sp,sp,12
  10c120:	f800283a 	ret

0010c124 <__multiply>:
  10c124:	defff004 	addi	sp,sp,-64
  10c128:	dc400715 	stw	r17,28(sp)
  10c12c:	dc000615 	stw	r16,24(sp)
  10c130:	34400417 	ldw	r17,16(r6)
  10c134:	2c000417 	ldw	r16,16(r5)
  10c138:	df000e15 	stw	fp,56(sp)
  10c13c:	dd000a15 	stw	r20,40(sp)
  10c140:	dfc00f15 	stw	ra,60(sp)
  10c144:	ddc00d15 	stw	r23,52(sp)
  10c148:	dd800c15 	stw	r22,48(sp)
  10c14c:	dd400b15 	stw	r21,44(sp)
  10c150:	dcc00915 	stw	r19,36(sp)
  10c154:	dc800815 	stw	r18,32(sp)
  10c158:	2839883a 	mov	fp,r5
  10c15c:	3029883a 	mov	r20,r6
  10c160:	8440050e 	bge	r16,r17,10c178 <__multiply+0x54>
  10c164:	8007883a 	mov	r3,r16
  10c168:	3039883a 	mov	fp,r6
  10c16c:	8821883a 	mov	r16,r17
  10c170:	2829883a 	mov	r20,r5
  10c174:	1823883a 	mov	r17,r3
  10c178:	e0800217 	ldw	r2,8(fp)
  10c17c:	8447883a 	add	r3,r16,r17
  10c180:	d8c00115 	stw	r3,4(sp)
  10c184:	e1400117 	ldw	r5,4(fp)
  10c188:	10c0010e 	bge	r2,r3,10c190 <__multiply+0x6c>
  10c18c:	29400044 	addi	r5,r5,1
  10c190:	010bcb80 	call	10bcb8 <_Balloc>
  10c194:	d8c00117 	ldw	r3,4(sp)
  10c198:	d8800515 	stw	r2,20(sp)
  10c19c:	18ef883a 	add	r23,r3,r3
  10c1a0:	bdef883a 	add	r23,r23,r23
  10c1a4:	10c00504 	addi	r3,r2,20
  10c1a8:	1def883a 	add	r23,r3,r23
  10c1ac:	d8c00015 	stw	r3,0(sp)
  10c1b0:	ddc00215 	stw	r23,8(sp)
  10c1b4:	1805883a 	mov	r2,r3
  10c1b8:	1dc0042e 	bgeu	r3,r23,10c1cc <__multiply+0xa8>
  10c1bc:	d8c00217 	ldw	r3,8(sp)
  10c1c0:	10000015 	stw	zero,0(r2)
  10c1c4:	10800104 	addi	r2,r2,4
  10c1c8:	10fffc36 	bltu	r2,r3,10c1bc <black_to_red_frame+0xfe10c1bc>
  10c1cc:	8c63883a 	add	r17,r17,r17
  10c1d0:	a5000504 	addi	r20,r20,20
  10c1d4:	8c63883a 	add	r17,r17,r17
  10c1d8:	e7000504 	addi	fp,fp,20
  10c1dc:	8421883a 	add	r16,r16,r16
  10c1e0:	a463883a 	add	r17,r20,r17
  10c1e4:	8421883a 	add	r16,r16,r16
  10c1e8:	df000315 	stw	fp,12(sp)
  10c1ec:	dc400415 	stw	r17,16(sp)
  10c1f0:	e425883a 	add	r18,fp,r16
  10c1f4:	a440482e 	bgeu	r20,r17,10c318 <__multiply+0x1f4>
  10c1f8:	a4000017 	ldw	r16,0(r20)
  10c1fc:	847fffcc 	andi	r17,r16,65535
  10c200:	88001d26 	beq	r17,zero,10c278 <__multiply+0x154>
  10c204:	dc000017 	ldw	r16,0(sp)
  10c208:	dcc00317 	ldw	r19,12(sp)
  10c20c:	002b883a 	mov	r21,zero
  10c210:	9dc00017 	ldw	r23,0(r19)
  10c214:	85800017 	ldw	r22,0(r16)
  10c218:	880b883a 	mov	r5,r17
  10c21c:	b93fffcc 	andi	r4,r23,65535
  10c220:	0103f1c0 	call	103f1c <__mulsi3>
  10c224:	b808d43a 	srli	r4,r23,16
  10c228:	b0ffffcc 	andi	r3,r22,65535
  10c22c:	1885883a 	add	r2,r3,r2
  10c230:	880b883a 	mov	r5,r17
  10c234:	156b883a 	add	r21,r2,r21
  10c238:	b02cd43a 	srli	r22,r22,16
  10c23c:	0103f1c0 	call	103f1c <__mulsi3>
  10c240:	a808d43a 	srli	r4,r21,16
  10c244:	b085883a 	add	r2,r22,r2
  10c248:	a8ffffcc 	andi	r3,r21,65535
  10c24c:	110d883a 	add	r6,r2,r4
  10c250:	3004943a 	slli	r2,r6,16
  10c254:	9cc00104 	addi	r19,r19,4
  10c258:	8009883a 	mov	r4,r16
  10c25c:	10c6b03a 	or	r3,r2,r3
  10c260:	80c00015 	stw	r3,0(r16)
  10c264:	302ad43a 	srli	r21,r6,16
  10c268:	84000104 	addi	r16,r16,4
  10c26c:	9cbfe836 	bltu	r19,r18,10c210 <black_to_red_frame+0xfe10c210>
  10c270:	25400115 	stw	r21,4(r4)
  10c274:	a4000017 	ldw	r16,0(r20)
  10c278:	8020d43a 	srli	r16,r16,16
  10c27c:	80002026 	beq	r16,zero,10c300 <__multiply+0x1dc>
  10c280:	d8c00017 	ldw	r3,0(sp)
  10c284:	dd400317 	ldw	r21,12(sp)
  10c288:	002f883a 	mov	r23,zero
  10c28c:	1f000017 	ldw	fp,0(r3)
  10c290:	182d883a 	mov	r22,r3
  10c294:	e023883a 	mov	r17,fp
  10c298:	a900000b 	ldhu	r4,0(r21)
  10c29c:	8822d43a 	srli	r17,r17,16
  10c2a0:	800b883a 	mov	r5,r16
  10c2a4:	0103f1c0 	call	103f1c <__mulsi3>
  10c2a8:	1445883a 	add	r2,r2,r17
  10c2ac:	15ef883a 	add	r23,r2,r23
  10c2b0:	b804943a 	slli	r2,r23,16
  10c2b4:	e1ffffcc 	andi	r7,fp,65535
  10c2b8:	ad400104 	addi	r21,r21,4
  10c2bc:	11ceb03a 	or	r7,r2,r7
  10c2c0:	b1c00015 	stw	r7,0(r22)
  10c2c4:	a93fff17 	ldw	r4,-4(r21)
  10c2c8:	b7000117 	ldw	fp,4(r22)
  10c2cc:	800b883a 	mov	r5,r16
  10c2d0:	2008d43a 	srli	r4,r4,16
  10c2d4:	e023883a 	mov	r17,fp
  10c2d8:	b027883a 	mov	r19,r22
  10c2dc:	0103f1c0 	call	103f1c <__mulsi3>
  10c2e0:	b812d43a 	srli	r9,r23,16
  10c2e4:	e23fffcc 	andi	r8,fp,65535
  10c2e8:	1205883a 	add	r2,r2,r8
  10c2ec:	1279883a 	add	fp,r2,r9
  10c2f0:	b5800104 	addi	r22,r22,4
  10c2f4:	e02ed43a 	srli	r23,fp,16
  10c2f8:	acbfe736 	bltu	r21,r18,10c298 <black_to_red_frame+0xfe10c298>
  10c2fc:	9f000115 	stw	fp,4(r19)
  10c300:	d8c00017 	ldw	r3,0(sp)
  10c304:	a5000104 	addi	r20,r20,4
  10c308:	18c00104 	addi	r3,r3,4
  10c30c:	d8c00015 	stw	r3,0(sp)
  10c310:	d8c00417 	ldw	r3,16(sp)
  10c314:	a0ffb836 	bltu	r20,r3,10c1f8 <black_to_red_frame+0xfe10c1f8>
  10c318:	d8c00117 	ldw	r3,4(sp)
  10c31c:	00c00c0e 	bge	zero,r3,10c350 <__multiply+0x22c>
  10c320:	d8c00217 	ldw	r3,8(sp)
  10c324:	18bfff17 	ldw	r2,-4(r3)
  10c328:	1dffff04 	addi	r23,r3,-4
  10c32c:	10000326 	beq	r2,zero,10c33c <__multiply+0x218>
  10c330:	00000706 	br	10c350 <__multiply+0x22c>
  10c334:	b8800017 	ldw	r2,0(r23)
  10c338:	1000051e 	bne	r2,zero,10c350 <__multiply+0x22c>
  10c33c:	d8c00117 	ldw	r3,4(sp)
  10c340:	bdffff04 	addi	r23,r23,-4
  10c344:	18ffffc4 	addi	r3,r3,-1
  10c348:	d8c00115 	stw	r3,4(sp)
  10c34c:	183ff91e 	bne	r3,zero,10c334 <black_to_red_frame+0xfe10c334>
  10c350:	d8c00517 	ldw	r3,20(sp)
  10c354:	d9000117 	ldw	r4,4(sp)
  10c358:	1805883a 	mov	r2,r3
  10c35c:	19000415 	stw	r4,16(r3)
  10c360:	dfc00f17 	ldw	ra,60(sp)
  10c364:	df000e17 	ldw	fp,56(sp)
  10c368:	ddc00d17 	ldw	r23,52(sp)
  10c36c:	dd800c17 	ldw	r22,48(sp)
  10c370:	dd400b17 	ldw	r21,44(sp)
  10c374:	dd000a17 	ldw	r20,40(sp)
  10c378:	dcc00917 	ldw	r19,36(sp)
  10c37c:	dc800817 	ldw	r18,32(sp)
  10c380:	dc400717 	ldw	r17,28(sp)
  10c384:	dc000617 	ldw	r16,24(sp)
  10c388:	dec01004 	addi	sp,sp,64
  10c38c:	f800283a 	ret

0010c390 <__pow5mult>:
  10c390:	defffa04 	addi	sp,sp,-24
  10c394:	dcc00315 	stw	r19,12(sp)
  10c398:	dc800215 	stw	r18,8(sp)
  10c39c:	dc000015 	stw	r16,0(sp)
  10c3a0:	dfc00515 	stw	ra,20(sp)
  10c3a4:	dd000415 	stw	r20,16(sp)
  10c3a8:	dc400115 	stw	r17,4(sp)
  10c3ac:	308000cc 	andi	r2,r6,3
  10c3b0:	3021883a 	mov	r16,r6
  10c3b4:	2027883a 	mov	r19,r4
  10c3b8:	2825883a 	mov	r18,r5
  10c3bc:	1000301e 	bne	r2,zero,10c480 <__pow5mult+0xf0>
  10c3c0:	8021d0ba 	srai	r16,r16,2
  10c3c4:	80001b26 	beq	r16,zero,10c434 <__pow5mult+0xa4>
  10c3c8:	9c401217 	ldw	r17,72(r19)
  10c3cc:	88003726 	beq	r17,zero,10c4ac <__pow5mult+0x11c>
  10c3d0:	80c0004c 	andi	r3,r16,1
  10c3d4:	1800071e 	bne	r3,zero,10c3f4 <__pow5mult+0x64>
  10c3d8:	8021d07a 	srai	r16,r16,1
  10c3dc:	80001526 	beq	r16,zero,10c434 <__pow5mult+0xa4>
  10c3e0:	88800017 	ldw	r2,0(r17)
  10c3e4:	10001c26 	beq	r2,zero,10c458 <__pow5mult+0xc8>
  10c3e8:	1023883a 	mov	r17,r2
  10c3ec:	80c0004c 	andi	r3,r16,1
  10c3f0:	183ff926 	beq	r3,zero,10c3d8 <black_to_red_frame+0xfe10c3d8>
  10c3f4:	900b883a 	mov	r5,r18
  10c3f8:	880d883a 	mov	r6,r17
  10c3fc:	9809883a 	mov	r4,r19
  10c400:	010c1240 	call	10c124 <__multiply>
  10c404:	90001c26 	beq	r18,zero,10c478 <__pow5mult+0xe8>
  10c408:	91000117 	ldw	r4,4(r18)
  10c40c:	98c01317 	ldw	r3,76(r19)
  10c410:	8021d07a 	srai	r16,r16,1
  10c414:	2109883a 	add	r4,r4,r4
  10c418:	2109883a 	add	r4,r4,r4
  10c41c:	1907883a 	add	r3,r3,r4
  10c420:	19000017 	ldw	r4,0(r3)
  10c424:	91000015 	stw	r4,0(r18)
  10c428:	1c800015 	stw	r18,0(r3)
  10c42c:	1025883a 	mov	r18,r2
  10c430:	803feb1e 	bne	r16,zero,10c3e0 <black_to_red_frame+0xfe10c3e0>
  10c434:	9005883a 	mov	r2,r18
  10c438:	dfc00517 	ldw	ra,20(sp)
  10c43c:	dd000417 	ldw	r20,16(sp)
  10c440:	dcc00317 	ldw	r19,12(sp)
  10c444:	dc800217 	ldw	r18,8(sp)
  10c448:	dc400117 	ldw	r17,4(sp)
  10c44c:	dc000017 	ldw	r16,0(sp)
  10c450:	dec00604 	addi	sp,sp,24
  10c454:	f800283a 	ret
  10c458:	880b883a 	mov	r5,r17
  10c45c:	880d883a 	mov	r6,r17
  10c460:	9809883a 	mov	r4,r19
  10c464:	010c1240 	call	10c124 <__multiply>
  10c468:	88800015 	stw	r2,0(r17)
  10c46c:	10000015 	stw	zero,0(r2)
  10c470:	1023883a 	mov	r17,r2
  10c474:	003fdd06 	br	10c3ec <black_to_red_frame+0xfe10c3ec>
  10c478:	1025883a 	mov	r18,r2
  10c47c:	003fd606 	br	10c3d8 <black_to_red_frame+0xfe10c3d8>
  10c480:	10bfffc4 	addi	r2,r2,-1
  10c484:	1085883a 	add	r2,r2,r2
  10c488:	00c00474 	movhi	r3,17
  10c48c:	18da5304 	addi	r3,r3,26956
  10c490:	1085883a 	add	r2,r2,r2
  10c494:	1885883a 	add	r2,r3,r2
  10c498:	11800017 	ldw	r6,0(r2)
  10c49c:	000f883a 	mov	r7,zero
  10c4a0:	010bd880 	call	10bd88 <__multadd>
  10c4a4:	1025883a 	mov	r18,r2
  10c4a8:	003fc506 	br	10c3c0 <black_to_red_frame+0xfe10c3c0>
  10c4ac:	05000044 	movi	r20,1
  10c4b0:	9809883a 	mov	r4,r19
  10c4b4:	a00b883a 	mov	r5,r20
  10c4b8:	010bcb80 	call	10bcb8 <_Balloc>
  10c4bc:	1023883a 	mov	r17,r2
  10c4c0:	00809c44 	movi	r2,625
  10c4c4:	88800515 	stw	r2,20(r17)
  10c4c8:	8d000415 	stw	r20,16(r17)
  10c4cc:	9c401215 	stw	r17,72(r19)
  10c4d0:	88000015 	stw	zero,0(r17)
  10c4d4:	003fbe06 	br	10c3d0 <black_to_red_frame+0xfe10c3d0>

0010c4d8 <__lshift>:
  10c4d8:	defff904 	addi	sp,sp,-28
  10c4dc:	dd000415 	stw	r20,16(sp)
  10c4e0:	dc400115 	stw	r17,4(sp)
  10c4e4:	2d000417 	ldw	r20,16(r5)
  10c4e8:	3023d17a 	srai	r17,r6,5
  10c4ec:	28800217 	ldw	r2,8(r5)
  10c4f0:	dd400515 	stw	r21,20(sp)
  10c4f4:	8d29883a 	add	r20,r17,r20
  10c4f8:	dcc00315 	stw	r19,12(sp)
  10c4fc:	dc800215 	stw	r18,8(sp)
  10c500:	dc000015 	stw	r16,0(sp)
  10c504:	dfc00615 	stw	ra,24(sp)
  10c508:	a4000044 	addi	r16,r20,1
  10c50c:	2825883a 	mov	r18,r5
  10c510:	302b883a 	mov	r21,r6
  10c514:	2027883a 	mov	r19,r4
  10c518:	29400117 	ldw	r5,4(r5)
  10c51c:	1400030e 	bge	r2,r16,10c52c <__lshift+0x54>
  10c520:	1085883a 	add	r2,r2,r2
  10c524:	29400044 	addi	r5,r5,1
  10c528:	143ffd16 	blt	r2,r16,10c520 <black_to_red_frame+0xfe10c520>
  10c52c:	9809883a 	mov	r4,r19
  10c530:	010bcb80 	call	10bcb8 <_Balloc>
  10c534:	11000504 	addi	r4,r2,20
  10c538:	0440090e 	bge	zero,r17,10c560 <__lshift+0x88>
  10c53c:	200f883a 	mov	r7,r4
  10c540:	0007883a 	mov	r3,zero
  10c544:	38000015 	stw	zero,0(r7)
  10c548:	18c00044 	addi	r3,r3,1
  10c54c:	39c00104 	addi	r7,r7,4
  10c550:	1c7ffc1e 	bne	r3,r17,10c544 <black_to_red_frame+0xfe10c544>
  10c554:	18c7883a 	add	r3,r3,r3
  10c558:	18c7883a 	add	r3,r3,r3
  10c55c:	20c9883a 	add	r4,r4,r3
  10c560:	92400417 	ldw	r9,16(r18)
  10c564:	90c00504 	addi	r3,r18,20
  10c568:	a98007cc 	andi	r6,r21,31
  10c56c:	4a53883a 	add	r9,r9,r9
  10c570:	4a53883a 	add	r9,r9,r9
  10c574:	1a53883a 	add	r9,r3,r9
  10c578:	30002426 	beq	r6,zero,10c60c <__lshift+0x134>
  10c57c:	01400804 	movi	r5,32
  10c580:	298bc83a 	sub	r5,r5,r6
  10c584:	200f883a 	mov	r7,r4
  10c588:	0011883a 	mov	r8,zero
  10c58c:	1a800017 	ldw	r10,0(r3)
  10c590:	3809883a 	mov	r4,r7
  10c594:	39c00104 	addi	r7,r7,4
  10c598:	5194983a 	sll	r10,r10,r6
  10c59c:	18c00104 	addi	r3,r3,4
  10c5a0:	4290b03a 	or	r8,r8,r10
  10c5a4:	3a3fff15 	stw	r8,-4(r7)
  10c5a8:	1a3fff17 	ldw	r8,-4(r3)
  10c5ac:	4150d83a 	srl	r8,r8,r5
  10c5b0:	1a7ff636 	bltu	r3,r9,10c58c <black_to_red_frame+0xfe10c58c>
  10c5b4:	22000115 	stw	r8,4(r4)
  10c5b8:	40000126 	beq	r8,zero,10c5c0 <__lshift+0xe8>
  10c5bc:	a4000084 	addi	r16,r20,2
  10c5c0:	91000117 	ldw	r4,4(r18)
  10c5c4:	98c01317 	ldw	r3,76(r19)
  10c5c8:	843fffc4 	addi	r16,r16,-1
  10c5cc:	2109883a 	add	r4,r4,r4
  10c5d0:	2109883a 	add	r4,r4,r4
  10c5d4:	1907883a 	add	r3,r3,r4
  10c5d8:	19000017 	ldw	r4,0(r3)
  10c5dc:	14000415 	stw	r16,16(r2)
  10c5e0:	91000015 	stw	r4,0(r18)
  10c5e4:	1c800015 	stw	r18,0(r3)
  10c5e8:	dfc00617 	ldw	ra,24(sp)
  10c5ec:	dd400517 	ldw	r21,20(sp)
  10c5f0:	dd000417 	ldw	r20,16(sp)
  10c5f4:	dcc00317 	ldw	r19,12(sp)
  10c5f8:	dc800217 	ldw	r18,8(sp)
  10c5fc:	dc400117 	ldw	r17,4(sp)
  10c600:	dc000017 	ldw	r16,0(sp)
  10c604:	dec00704 	addi	sp,sp,28
  10c608:	f800283a 	ret
  10c60c:	200f883a 	mov	r7,r4
  10c610:	19800017 	ldw	r6,0(r3)
  10c614:	39c00104 	addi	r7,r7,4
  10c618:	18c00104 	addi	r3,r3,4
  10c61c:	39bfff15 	stw	r6,-4(r7)
  10c620:	1a7ffb36 	bltu	r3,r9,10c610 <black_to_red_frame+0xfe10c610>
  10c624:	003fe606 	br	10c5c0 <black_to_red_frame+0xfe10c5c0>

0010c628 <__mcmp>:
  10c628:	20800417 	ldw	r2,16(r4)
  10c62c:	28c00417 	ldw	r3,16(r5)
  10c630:	10c5c83a 	sub	r2,r2,r3
  10c634:	1000111e 	bne	r2,zero,10c67c <__mcmp+0x54>
  10c638:	18c7883a 	add	r3,r3,r3
  10c63c:	18c7883a 	add	r3,r3,r3
  10c640:	21000504 	addi	r4,r4,20
  10c644:	29400504 	addi	r5,r5,20
  10c648:	20c5883a 	add	r2,r4,r3
  10c64c:	28cb883a 	add	r5,r5,r3
  10c650:	00000106 	br	10c658 <__mcmp+0x30>
  10c654:	2080082e 	bgeu	r4,r2,10c678 <__mcmp+0x50>
  10c658:	10bfff04 	addi	r2,r2,-4
  10c65c:	297fff04 	addi	r5,r5,-4
  10c660:	11800017 	ldw	r6,0(r2)
  10c664:	28c00017 	ldw	r3,0(r5)
  10c668:	30fffa26 	beq	r6,r3,10c654 <black_to_red_frame+0xfe10c654>
  10c66c:	30c00436 	bltu	r6,r3,10c680 <__mcmp+0x58>
  10c670:	00800044 	movi	r2,1
  10c674:	f800283a 	ret
  10c678:	0005883a 	mov	r2,zero
  10c67c:	f800283a 	ret
  10c680:	00bfffc4 	movi	r2,-1
  10c684:	f800283a 	ret

0010c688 <__mdiff>:
  10c688:	defffc04 	addi	sp,sp,-16
  10c68c:	dc000015 	stw	r16,0(sp)
  10c690:	2821883a 	mov	r16,r5
  10c694:	200f883a 	mov	r7,r4
  10c698:	300b883a 	mov	r5,r6
  10c69c:	8009883a 	mov	r4,r16
  10c6a0:	dc400115 	stw	r17,4(sp)
  10c6a4:	dfc00315 	stw	ra,12(sp)
  10c6a8:	dc800215 	stw	r18,8(sp)
  10c6ac:	3023883a 	mov	r17,r6
  10c6b0:	010c6280 	call	10c628 <__mcmp>
  10c6b4:	10005226 	beq	r2,zero,10c800 <__mdiff+0x178>
  10c6b8:	10004c16 	blt	r2,zero,10c7ec <__mdiff+0x164>
  10c6bc:	0025883a 	mov	r18,zero
  10c6c0:	81400117 	ldw	r5,4(r16)
  10c6c4:	3809883a 	mov	r4,r7
  10c6c8:	010bcb80 	call	10bcb8 <_Balloc>
  10c6cc:	82800417 	ldw	r10,16(r16)
  10c6d0:	8b400417 	ldw	r13,16(r17)
  10c6d4:	81000504 	addi	r4,r16,20
  10c6d8:	5299883a 	add	r12,r10,r10
  10c6dc:	6b5b883a 	add	r13,r13,r13
  10c6e0:	6319883a 	add	r12,r12,r12
  10c6e4:	89800504 	addi	r6,r17,20
  10c6e8:	6b5b883a 	add	r13,r13,r13
  10c6ec:	14800315 	stw	r18,12(r2)
  10c6f0:	2319883a 	add	r12,r4,r12
  10c6f4:	335b883a 	add	r13,r6,r13
  10c6f8:	11400504 	addi	r5,r2,20
  10c6fc:	0007883a 	mov	r3,zero
  10c700:	00000106 	br	10c708 <__mdiff+0x80>
  10c704:	400b883a 	mov	r5,r8
  10c708:	22400017 	ldw	r9,0(r4)
  10c70c:	32000017 	ldw	r8,0(r6)
  10c710:	31800104 	addi	r6,r6,4
  10c714:	49ffffcc 	andi	r7,r9,65535
  10c718:	42ffffcc 	andi	r11,r8,65535
  10c71c:	38c7883a 	add	r3,r7,r3
  10c720:	1acfc83a 	sub	r7,r3,r11
  10c724:	4010d43a 	srli	r8,r8,16
  10c728:	4806d43a 	srli	r3,r9,16
  10c72c:	3817d43a 	srai	r11,r7,16
  10c730:	39ffffcc 	andi	r7,r7,65535
  10c734:	1a07c83a 	sub	r3,r3,r8
  10c738:	1ac7883a 	add	r3,r3,r11
  10c73c:	1812943a 	slli	r9,r3,16
  10c740:	2a000104 	addi	r8,r5,4
  10c744:	21000104 	addi	r4,r4,4
  10c748:	49ceb03a 	or	r7,r9,r7
  10c74c:	29c00015 	stw	r7,0(r5)
  10c750:	1807d43a 	srai	r3,r3,16
  10c754:	337feb36 	bltu	r6,r13,10c704 <black_to_red_frame+0xfe10c704>
  10c758:	2013883a 	mov	r9,r4
  10c75c:	2300342e 	bgeu	r4,r12,10c830 <__mdiff+0x1a8>
  10c760:	400b883a 	mov	r5,r8
  10c764:	21c00017 	ldw	r7,0(r4)
  10c768:	29400104 	addi	r5,r5,4
  10c76c:	21000104 	addi	r4,r4,4
  10c770:	39bfffcc 	andi	r6,r7,65535
  10c774:	30cd883a 	add	r6,r6,r3
  10c778:	3007d43a 	srai	r3,r6,16
  10c77c:	380ed43a 	srli	r7,r7,16
  10c780:	31bfffcc 	andi	r6,r6,65535
  10c784:	19c7883a 	add	r3,r3,r7
  10c788:	180e943a 	slli	r7,r3,16
  10c78c:	1807d43a 	srai	r3,r3,16
  10c790:	398cb03a 	or	r6,r7,r6
  10c794:	29bfff15 	stw	r6,-4(r5)
  10c798:	233ff236 	bltu	r4,r12,10c764 <black_to_red_frame+0xfe10c764>
  10c79c:	0248303a 	nor	r4,zero,r9
  10c7a0:	2309883a 	add	r4,r4,r12
  10c7a4:	2008d0ba 	srli	r4,r4,2
  10c7a8:	21000044 	addi	r4,r4,1
  10c7ac:	2109883a 	add	r4,r4,r4
  10c7b0:	2109883a 	add	r4,r4,r4
  10c7b4:	4111883a 	add	r8,r8,r4
  10c7b8:	413fff04 	addi	r4,r8,-4
  10c7bc:	3000041e 	bne	r6,zero,10c7d0 <__mdiff+0x148>
  10c7c0:	213fff04 	addi	r4,r4,-4
  10c7c4:	20c00017 	ldw	r3,0(r4)
  10c7c8:	52bfffc4 	addi	r10,r10,-1
  10c7cc:	183ffc26 	beq	r3,zero,10c7c0 <black_to_red_frame+0xfe10c7c0>
  10c7d0:	12800415 	stw	r10,16(r2)
  10c7d4:	dfc00317 	ldw	ra,12(sp)
  10c7d8:	dc800217 	ldw	r18,8(sp)
  10c7dc:	dc400117 	ldw	r17,4(sp)
  10c7e0:	dc000017 	ldw	r16,0(sp)
  10c7e4:	dec00404 	addi	sp,sp,16
  10c7e8:	f800283a 	ret
  10c7ec:	8005883a 	mov	r2,r16
  10c7f0:	04800044 	movi	r18,1
  10c7f4:	8821883a 	mov	r16,r17
  10c7f8:	1023883a 	mov	r17,r2
  10c7fc:	003fb006 	br	10c6c0 <black_to_red_frame+0xfe10c6c0>
  10c800:	3809883a 	mov	r4,r7
  10c804:	000b883a 	mov	r5,zero
  10c808:	010bcb80 	call	10bcb8 <_Balloc>
  10c80c:	00c00044 	movi	r3,1
  10c810:	10c00415 	stw	r3,16(r2)
  10c814:	10000515 	stw	zero,20(r2)
  10c818:	dfc00317 	ldw	ra,12(sp)
  10c81c:	dc800217 	ldw	r18,8(sp)
  10c820:	dc400117 	ldw	r17,4(sp)
  10c824:	dc000017 	ldw	r16,0(sp)
  10c828:	dec00404 	addi	sp,sp,16
  10c82c:	f800283a 	ret
  10c830:	380d883a 	mov	r6,r7
  10c834:	003fe006 	br	10c7b8 <black_to_red_frame+0xfe10c7b8>

0010c838 <__ulp>:
  10c838:	295ffc2c 	andhi	r5,r5,32752
  10c83c:	00bf3034 	movhi	r2,64704
  10c840:	2887883a 	add	r3,r5,r2
  10c844:	00c0020e 	bge	zero,r3,10c850 <__ulp+0x18>
  10c848:	0005883a 	mov	r2,zero
  10c84c:	f800283a 	ret
  10c850:	00c7c83a 	sub	r3,zero,r3
  10c854:	1805d53a 	srai	r2,r3,20
  10c858:	00c004c4 	movi	r3,19
  10c85c:	18800a0e 	bge	r3,r2,10c888 <__ulp+0x50>
  10c860:	01000c84 	movi	r4,50
  10c864:	0007883a 	mov	r3,zero
  10c868:	20800516 	blt	r4,r2,10c880 <__ulp+0x48>
  10c86c:	01000cc4 	movi	r4,51
  10c870:	2085c83a 	sub	r2,r4,r2
  10c874:	01000044 	movi	r4,1
  10c878:	2084983a 	sll	r2,r4,r2
  10c87c:	f800283a 	ret
  10c880:	00800044 	movi	r2,1
  10c884:	f800283a 	ret
  10c888:	00c00234 	movhi	r3,8
  10c88c:	1887d83a 	sra	r3,r3,r2
  10c890:	0005883a 	mov	r2,zero
  10c894:	f800283a 	ret

0010c898 <__b2d>:
  10c898:	21800417 	ldw	r6,16(r4)
  10c89c:	22000504 	addi	r8,r4,20
  10c8a0:	deffff04 	addi	sp,sp,-4
  10c8a4:	318d883a 	add	r6,r6,r6
  10c8a8:	318d883a 	add	r6,r6,r6
  10c8ac:	418d883a 	add	r6,r8,r6
  10c8b0:	31ffff17 	ldw	r7,-4(r6)
  10c8b4:	327fff04 	addi	r9,r6,-4
  10c8b8:	dfc00015 	stw	ra,0(sp)
  10c8bc:	3809883a 	mov	r4,r7
  10c8c0:	010bfd00 	call	10bfd0 <__hi0bits>
  10c8c4:	00c00804 	movi	r3,32
  10c8c8:	1887c83a 	sub	r3,r3,r2
  10c8cc:	28c00015 	stw	r3,0(r5)
  10c8d0:	00c00284 	movi	r3,10
  10c8d4:	18800d16 	blt	r3,r2,10c90c <__b2d+0x74>
  10c8d8:	010002c4 	movi	r4,11
  10c8dc:	2089c83a 	sub	r4,r4,r2
  10c8e0:	3906d83a 	srl	r3,r7,r4
  10c8e4:	18cffc34 	orhi	r3,r3,16368
  10c8e8:	4240232e 	bgeu	r8,r9,10c978 <__b2d+0xe0>
  10c8ec:	317ffe17 	ldw	r5,-8(r6)
  10c8f0:	2908d83a 	srl	r4,r5,r4
  10c8f4:	10800544 	addi	r2,r2,21
  10c8f8:	388e983a 	sll	r7,r7,r2
  10c8fc:	21c4b03a 	or	r2,r4,r7
  10c900:	dfc00017 	ldw	ra,0(sp)
  10c904:	dec00104 	addi	sp,sp,4
  10c908:	f800283a 	ret
  10c90c:	42401136 	bltu	r8,r9,10c954 <__b2d+0xbc>
  10c910:	113ffd44 	addi	r4,r2,-11
  10c914:	000b883a 	mov	r5,zero
  10c918:	20001226 	beq	r4,zero,10c964 <__b2d+0xcc>
  10c91c:	00c00ac4 	movi	r3,43
  10c920:	1885c83a 	sub	r2,r3,r2
  10c924:	3906983a 	sll	r3,r7,r4
  10c928:	288cd83a 	srl	r6,r5,r2
  10c92c:	18cffc34 	orhi	r3,r3,16368
  10c930:	1986b03a 	or	r3,r3,r6
  10c934:	4240122e 	bgeu	r8,r9,10c980 <__b2d+0xe8>
  10c938:	49bfff17 	ldw	r6,-4(r9)
  10c93c:	3084d83a 	srl	r2,r6,r2
  10c940:	2908983a 	sll	r4,r5,r4
  10c944:	1104b03a 	or	r2,r2,r4
  10c948:	dfc00017 	ldw	ra,0(sp)
  10c94c:	dec00104 	addi	sp,sp,4
  10c950:	f800283a 	ret
  10c954:	113ffd44 	addi	r4,r2,-11
  10c958:	327ffe04 	addi	r9,r6,-8
  10c95c:	317ffe17 	ldw	r5,-8(r6)
  10c960:	203fee1e 	bne	r4,zero,10c91c <black_to_red_frame+0xfe10c91c>
  10c964:	38cffc34 	orhi	r3,r7,16368
  10c968:	2805883a 	mov	r2,r5
  10c96c:	dfc00017 	ldw	ra,0(sp)
  10c970:	dec00104 	addi	sp,sp,4
  10c974:	f800283a 	ret
  10c978:	0009883a 	mov	r4,zero
  10c97c:	003fdd06 	br	10c8f4 <black_to_red_frame+0xfe10c8f4>
  10c980:	0005883a 	mov	r2,zero
  10c984:	003fee06 	br	10c940 <black_to_red_frame+0xfe10c940>

0010c988 <__d2b>:
  10c988:	defffa04 	addi	sp,sp,-24
  10c98c:	dc400315 	stw	r17,12(sp)
  10c990:	2823883a 	mov	r17,r5
  10c994:	01400044 	movi	r5,1
  10c998:	dc800415 	stw	r18,16(sp)
  10c99c:	dc000215 	stw	r16,8(sp)
  10c9a0:	dfc00515 	stw	ra,20(sp)
  10c9a4:	3021883a 	mov	r16,r6
  10c9a8:	3825883a 	mov	r18,r7
  10c9ac:	010bcb80 	call	10bcb8 <_Balloc>
  10c9b0:	8012907a 	slli	r9,r16,1
  10c9b4:	1011883a 	mov	r8,r2
  10c9b8:	00800434 	movhi	r2,16
  10c9bc:	10bfffc4 	addi	r2,r2,-1
  10c9c0:	4812d57a 	srli	r9,r9,21
  10c9c4:	80a0703a 	and	r16,r16,r2
  10c9c8:	48000126 	beq	r9,zero,10c9d0 <__d2b+0x48>
  10c9cc:	84000434 	orhi	r16,r16,16
  10c9d0:	dc000015 	stw	r16,0(sp)
  10c9d4:	88001e26 	beq	r17,zero,10ca50 <__d2b+0xc8>
  10c9d8:	d9000104 	addi	r4,sp,4
  10c9dc:	dc400115 	stw	r17,4(sp)
  10c9e0:	010c0380 	call	10c038 <__lo0bits>
  10c9e4:	d8c00017 	ldw	r3,0(sp)
  10c9e8:	10002f1e 	bne	r2,zero,10caa8 <__d2b+0x120>
  10c9ec:	d9000117 	ldw	r4,4(sp)
  10c9f0:	41000515 	stw	r4,20(r8)
  10c9f4:	180b003a 	cmpeq	r5,r3,zero
  10c9f8:	01000084 	movi	r4,2
  10c9fc:	214bc83a 	sub	r5,r4,r5
  10ca00:	40c00615 	stw	r3,24(r8)
  10ca04:	41400415 	stw	r5,16(r8)
  10ca08:	4800191e 	bne	r9,zero,10ca70 <__d2b+0xe8>
  10ca0c:	280690ba 	slli	r3,r5,2
  10ca10:	10bef384 	addi	r2,r2,-1074
  10ca14:	90800015 	stw	r2,0(r18)
  10ca18:	40c5883a 	add	r2,r8,r3
  10ca1c:	11000417 	ldw	r4,16(r2)
  10ca20:	010bfd00 	call	10bfd0 <__hi0bits>
  10ca24:	280a917a 	slli	r5,r5,5
  10ca28:	d8c00617 	ldw	r3,24(sp)
  10ca2c:	2885c83a 	sub	r2,r5,r2
  10ca30:	18800015 	stw	r2,0(r3)
  10ca34:	4005883a 	mov	r2,r8
  10ca38:	dfc00517 	ldw	ra,20(sp)
  10ca3c:	dc800417 	ldw	r18,16(sp)
  10ca40:	dc400317 	ldw	r17,12(sp)
  10ca44:	dc000217 	ldw	r16,8(sp)
  10ca48:	dec00604 	addi	sp,sp,24
  10ca4c:	f800283a 	ret
  10ca50:	d809883a 	mov	r4,sp
  10ca54:	010c0380 	call	10c038 <__lo0bits>
  10ca58:	d8c00017 	ldw	r3,0(sp)
  10ca5c:	01400044 	movi	r5,1
  10ca60:	41400415 	stw	r5,16(r8)
  10ca64:	40c00515 	stw	r3,20(r8)
  10ca68:	10800804 	addi	r2,r2,32
  10ca6c:	483fe726 	beq	r9,zero,10ca0c <black_to_red_frame+0xfe10ca0c>
  10ca70:	00c00d44 	movi	r3,53
  10ca74:	4a7ef344 	addi	r9,r9,-1075
  10ca78:	4893883a 	add	r9,r9,r2
  10ca7c:	1885c83a 	sub	r2,r3,r2
  10ca80:	d8c00617 	ldw	r3,24(sp)
  10ca84:	92400015 	stw	r9,0(r18)
  10ca88:	18800015 	stw	r2,0(r3)
  10ca8c:	4005883a 	mov	r2,r8
  10ca90:	dfc00517 	ldw	ra,20(sp)
  10ca94:	dc800417 	ldw	r18,16(sp)
  10ca98:	dc400317 	ldw	r17,12(sp)
  10ca9c:	dc000217 	ldw	r16,8(sp)
  10caa0:	dec00604 	addi	sp,sp,24
  10caa4:	f800283a 	ret
  10caa8:	01000804 	movi	r4,32
  10caac:	2089c83a 	sub	r4,r4,r2
  10cab0:	1908983a 	sll	r4,r3,r4
  10cab4:	d9400117 	ldw	r5,4(sp)
  10cab8:	1886d83a 	srl	r3,r3,r2
  10cabc:	2148b03a 	or	r4,r4,r5
  10cac0:	41000515 	stw	r4,20(r8)
  10cac4:	d8c00015 	stw	r3,0(sp)
  10cac8:	003fca06 	br	10c9f4 <black_to_red_frame+0xfe10c9f4>

0010cacc <__ratio>:
  10cacc:	defffd04 	addi	sp,sp,-12
  10cad0:	2817883a 	mov	r11,r5
  10cad4:	201b883a 	mov	r13,r4
  10cad8:	d9400104 	addi	r5,sp,4
  10cadc:	dfc00215 	stw	ra,8(sp)
  10cae0:	010c8980 	call	10c898 <__b2d>
  10cae4:	5809883a 	mov	r4,r11
  10cae8:	d80b883a 	mov	r5,sp
  10caec:	1019883a 	mov	r12,r2
  10caf0:	1815883a 	mov	r10,r3
  10caf4:	010c8980 	call	10c898 <__b2d>
  10caf8:	69400417 	ldw	r5,16(r13)
  10cafc:	59000417 	ldw	r4,16(r11)
  10cb00:	d9800117 	ldw	r6,4(sp)
  10cb04:	2909c83a 	sub	r4,r5,r4
  10cb08:	d9400017 	ldw	r5,0(sp)
  10cb0c:	2008917a 	slli	r4,r4,5
  10cb10:	314bc83a 	sub	r5,r6,r5
  10cb14:	290b883a 	add	r5,r5,r4
  10cb18:	01400a0e 	bge	zero,r5,10cb44 <__ratio+0x78>
  10cb1c:	280a953a 	slli	r5,r5,20
  10cb20:	6009883a 	mov	r4,r12
  10cb24:	100d883a 	mov	r6,r2
  10cb28:	2a95883a 	add	r10,r5,r10
  10cb2c:	500b883a 	mov	r5,r10
  10cb30:	180f883a 	mov	r7,r3
  10cb34:	0111e2c0 	call	111e2c <__divdf3>
  10cb38:	dfc00217 	ldw	ra,8(sp)
  10cb3c:	dec00304 	addi	sp,sp,12
  10cb40:	f800283a 	ret
  10cb44:	280a953a 	slli	r5,r5,20
  10cb48:	6009883a 	mov	r4,r12
  10cb4c:	100d883a 	mov	r6,r2
  10cb50:	1947c83a 	sub	r3,r3,r5
  10cb54:	180f883a 	mov	r7,r3
  10cb58:	500b883a 	mov	r5,r10
  10cb5c:	0111e2c0 	call	111e2c <__divdf3>
  10cb60:	dfc00217 	ldw	ra,8(sp)
  10cb64:	dec00304 	addi	sp,sp,12
  10cb68:	f800283a 	ret

0010cb6c <_mprec_log10>:
  10cb6c:	defffe04 	addi	sp,sp,-8
  10cb70:	dc000015 	stw	r16,0(sp)
  10cb74:	dfc00115 	stw	ra,4(sp)
  10cb78:	008005c4 	movi	r2,23
  10cb7c:	2021883a 	mov	r16,r4
  10cb80:	11000d0e 	bge	r2,r4,10cbb8 <_mprec_log10+0x4c>
  10cb84:	0005883a 	mov	r2,zero
  10cb88:	00cffc34 	movhi	r3,16368
  10cb8c:	843fffc4 	addi	r16,r16,-1
  10cb90:	1009883a 	mov	r4,r2
  10cb94:	180b883a 	mov	r5,r3
  10cb98:	000d883a 	mov	r6,zero
  10cb9c:	01d00934 	movhi	r7,16420
  10cba0:	0112a100 	call	112a10 <__muldf3>
  10cba4:	803ff91e 	bne	r16,zero,10cb8c <black_to_red_frame+0xfe10cb8c>
  10cba8:	dfc00117 	ldw	ra,4(sp)
  10cbac:	dc000017 	ldw	r16,0(sp)
  10cbb0:	dec00204 	addi	sp,sp,8
  10cbb4:	f800283a 	ret
  10cbb8:	202090fa 	slli	r16,r4,3
  10cbbc:	00800474 	movhi	r2,17
  10cbc0:	109a6a04 	addi	r2,r2,27048
  10cbc4:	1421883a 	add	r16,r2,r16
  10cbc8:	80800017 	ldw	r2,0(r16)
  10cbcc:	80c00117 	ldw	r3,4(r16)
  10cbd0:	dfc00117 	ldw	ra,4(sp)
  10cbd4:	dc000017 	ldw	r16,0(sp)
  10cbd8:	dec00204 	addi	sp,sp,8
  10cbdc:	f800283a 	ret

0010cbe0 <__copybits>:
  10cbe0:	297fffc4 	addi	r5,r5,-1
  10cbe4:	2811d17a 	srai	r8,r5,5
  10cbe8:	31c00417 	ldw	r7,16(r6)
  10cbec:	30800504 	addi	r2,r6,20
  10cbf0:	42000044 	addi	r8,r8,1
  10cbf4:	39cf883a 	add	r7,r7,r7
  10cbf8:	4211883a 	add	r8,r8,r8
  10cbfc:	39cf883a 	add	r7,r7,r7
  10cc00:	4211883a 	add	r8,r8,r8
  10cc04:	11cf883a 	add	r7,r2,r7
  10cc08:	2211883a 	add	r8,r4,r8
  10cc0c:	11c00d2e 	bgeu	r2,r7,10cc44 <__copybits+0x64>
  10cc10:	2007883a 	mov	r3,r4
  10cc14:	11400017 	ldw	r5,0(r2)
  10cc18:	18c00104 	addi	r3,r3,4
  10cc1c:	10800104 	addi	r2,r2,4
  10cc20:	197fff15 	stw	r5,-4(r3)
  10cc24:	11fffb36 	bltu	r2,r7,10cc14 <black_to_red_frame+0xfe10cc14>
  10cc28:	3985c83a 	sub	r2,r7,r6
  10cc2c:	10bffac4 	addi	r2,r2,-21
  10cc30:	1004d0ba 	srli	r2,r2,2
  10cc34:	10800044 	addi	r2,r2,1
  10cc38:	1085883a 	add	r2,r2,r2
  10cc3c:	1085883a 	add	r2,r2,r2
  10cc40:	2089883a 	add	r4,r4,r2
  10cc44:	2200032e 	bgeu	r4,r8,10cc54 <__copybits+0x74>
  10cc48:	20000015 	stw	zero,0(r4)
  10cc4c:	21000104 	addi	r4,r4,4
  10cc50:	223ffd36 	bltu	r4,r8,10cc48 <black_to_red_frame+0xfe10cc48>
  10cc54:	f800283a 	ret

0010cc58 <__any_on>:
  10cc58:	20800417 	ldw	r2,16(r4)
  10cc5c:	2807d17a 	srai	r3,r5,5
  10cc60:	21000504 	addi	r4,r4,20
  10cc64:	10c00d0e 	bge	r2,r3,10cc9c <__any_on+0x44>
  10cc68:	1085883a 	add	r2,r2,r2
  10cc6c:	1085883a 	add	r2,r2,r2
  10cc70:	2085883a 	add	r2,r4,r2
  10cc74:	2080182e 	bgeu	r4,r2,10ccd8 <__any_on+0x80>
  10cc78:	10ffff17 	ldw	r3,-4(r2)
  10cc7c:	10bfff04 	addi	r2,r2,-4
  10cc80:	1800041e 	bne	r3,zero,10cc94 <__any_on+0x3c>
  10cc84:	2080142e 	bgeu	r4,r2,10ccd8 <__any_on+0x80>
  10cc88:	10bfff04 	addi	r2,r2,-4
  10cc8c:	10c00017 	ldw	r3,0(r2)
  10cc90:	183ffc26 	beq	r3,zero,10cc84 <black_to_red_frame+0xfe10cc84>
  10cc94:	00800044 	movi	r2,1
  10cc98:	f800283a 	ret
  10cc9c:	18800a0e 	bge	r3,r2,10ccc8 <__any_on+0x70>
  10cca0:	18c7883a 	add	r3,r3,r3
  10cca4:	18c7883a 	add	r3,r3,r3
  10cca8:	294007cc 	andi	r5,r5,31
  10ccac:	20c5883a 	add	r2,r4,r3
  10ccb0:	283ff026 	beq	r5,zero,10cc74 <black_to_red_frame+0xfe10cc74>
  10ccb4:	10c00017 	ldw	r3,0(r2)
  10ccb8:	194cd83a 	srl	r6,r3,r5
  10ccbc:	314a983a 	sll	r5,r6,r5
  10ccc0:	28fff41e 	bne	r5,r3,10cc94 <black_to_red_frame+0xfe10cc94>
  10ccc4:	003feb06 	br	10cc74 <black_to_red_frame+0xfe10cc74>
  10ccc8:	18c7883a 	add	r3,r3,r3
  10cccc:	18c7883a 	add	r3,r3,r3
  10ccd0:	20c5883a 	add	r2,r4,r3
  10ccd4:	003fe706 	br	10cc74 <black_to_red_frame+0xfe10cc74>
  10ccd8:	0005883a 	mov	r2,zero
  10ccdc:	f800283a 	ret

0010cce0 <_putc_r>:
  10cce0:	defffc04 	addi	sp,sp,-16
  10cce4:	dc000215 	stw	r16,8(sp)
  10cce8:	dfc00315 	stw	ra,12(sp)
  10ccec:	2021883a 	mov	r16,r4
  10ccf0:	20000226 	beq	r4,zero,10ccfc <_putc_r+0x1c>
  10ccf4:	20800e17 	ldw	r2,56(r4)
  10ccf8:	10001b26 	beq	r2,zero,10cd68 <_putc_r+0x88>
  10ccfc:	30800217 	ldw	r2,8(r6)
  10cd00:	10bfffc4 	addi	r2,r2,-1
  10cd04:	30800215 	stw	r2,8(r6)
  10cd08:	10000a16 	blt	r2,zero,10cd34 <_putc_r+0x54>
  10cd0c:	30800017 	ldw	r2,0(r6)
  10cd10:	11400005 	stb	r5,0(r2)
  10cd14:	30800017 	ldw	r2,0(r6)
  10cd18:	10c00044 	addi	r3,r2,1
  10cd1c:	30c00015 	stw	r3,0(r6)
  10cd20:	10800003 	ldbu	r2,0(r2)
  10cd24:	dfc00317 	ldw	ra,12(sp)
  10cd28:	dc000217 	ldw	r16,8(sp)
  10cd2c:	dec00404 	addi	sp,sp,16
  10cd30:	f800283a 	ret
  10cd34:	30c00617 	ldw	r3,24(r6)
  10cd38:	10c00616 	blt	r2,r3,10cd54 <_putc_r+0x74>
  10cd3c:	30800017 	ldw	r2,0(r6)
  10cd40:	00c00284 	movi	r3,10
  10cd44:	11400005 	stb	r5,0(r2)
  10cd48:	30800017 	ldw	r2,0(r6)
  10cd4c:	11400003 	ldbu	r5,0(r2)
  10cd50:	28fff11e 	bne	r5,r3,10cd18 <black_to_red_frame+0xfe10cd18>
  10cd54:	8009883a 	mov	r4,r16
  10cd58:	dfc00317 	ldw	ra,12(sp)
  10cd5c:	dc000217 	ldw	r16,8(sp)
  10cd60:	dec00404 	addi	sp,sp,16
  10cd64:	010ff081 	jmpi	10ff08 <__swbuf_r>
  10cd68:	d9400015 	stw	r5,0(sp)
  10cd6c:	d9800115 	stw	r6,4(sp)
  10cd70:	010a8dc0 	call	10a8dc <__sinit>
  10cd74:	d9800117 	ldw	r6,4(sp)
  10cd78:	d9400017 	ldw	r5,0(sp)
  10cd7c:	003fdf06 	br	10ccfc <black_to_red_frame+0xfe10ccfc>

0010cd80 <putc>:
  10cd80:	defffc04 	addi	sp,sp,-16
  10cd84:	dc400115 	stw	r17,4(sp)
  10cd88:	044004b4 	movhi	r17,18
  10cd8c:	8c61f404 	addi	r17,r17,-30768
  10cd90:	88800017 	ldw	r2,0(r17)
  10cd94:	dc800215 	stw	r18,8(sp)
  10cd98:	dc000015 	stw	r16,0(sp)
  10cd9c:	dfc00315 	stw	ra,12(sp)
  10cda0:	2025883a 	mov	r18,r4
  10cda4:	2821883a 	mov	r16,r5
  10cda8:	10000226 	beq	r2,zero,10cdb4 <putc+0x34>
  10cdac:	10c00e17 	ldw	r3,56(r2)
  10cdb0:	18001a26 	beq	r3,zero,10ce1c <putc+0x9c>
  10cdb4:	80800217 	ldw	r2,8(r16)
  10cdb8:	10bfffc4 	addi	r2,r2,-1
  10cdbc:	80800215 	stw	r2,8(r16)
  10cdc0:	10000c16 	blt	r2,zero,10cdf4 <putc+0x74>
  10cdc4:	80800017 	ldw	r2,0(r16)
  10cdc8:	14800005 	stb	r18,0(r2)
  10cdcc:	80800017 	ldw	r2,0(r16)
  10cdd0:	10c00044 	addi	r3,r2,1
  10cdd4:	80c00015 	stw	r3,0(r16)
  10cdd8:	10800003 	ldbu	r2,0(r2)
  10cddc:	dfc00317 	ldw	ra,12(sp)
  10cde0:	dc800217 	ldw	r18,8(sp)
  10cde4:	dc400117 	ldw	r17,4(sp)
  10cde8:	dc000017 	ldw	r16,0(sp)
  10cdec:	dec00404 	addi	sp,sp,16
  10cdf0:	f800283a 	ret
  10cdf4:	80c00617 	ldw	r3,24(r16)
  10cdf8:	10c00b16 	blt	r2,r3,10ce28 <putc+0xa8>
  10cdfc:	80800017 	ldw	r2,0(r16)
  10ce00:	00c00284 	movi	r3,10
  10ce04:	14800005 	stb	r18,0(r2)
  10ce08:	80800017 	ldw	r2,0(r16)
  10ce0c:	11400003 	ldbu	r5,0(r2)
  10ce10:	28ffef1e 	bne	r5,r3,10cdd0 <black_to_red_frame+0xfe10cdd0>
  10ce14:	89000017 	ldw	r4,0(r17)
  10ce18:	00000506 	br	10ce30 <putc+0xb0>
  10ce1c:	1009883a 	mov	r4,r2
  10ce20:	010a8dc0 	call	10a8dc <__sinit>
  10ce24:	003fe306 	br	10cdb4 <black_to_red_frame+0xfe10cdb4>
  10ce28:	89000017 	ldw	r4,0(r17)
  10ce2c:	900b883a 	mov	r5,r18
  10ce30:	800d883a 	mov	r6,r16
  10ce34:	dfc00317 	ldw	ra,12(sp)
  10ce38:	dc800217 	ldw	r18,8(sp)
  10ce3c:	dc400117 	ldw	r17,4(sp)
  10ce40:	dc000017 	ldw	r16,0(sp)
  10ce44:	dec00404 	addi	sp,sp,16
  10ce48:	010ff081 	jmpi	10ff08 <__swbuf_r>

0010ce4c <_realloc_r>:
  10ce4c:	defff604 	addi	sp,sp,-40
  10ce50:	dd000415 	stw	r20,16(sp)
  10ce54:	dc000015 	stw	r16,0(sp)
  10ce58:	dfc00915 	stw	ra,36(sp)
  10ce5c:	df000815 	stw	fp,32(sp)
  10ce60:	ddc00715 	stw	r23,28(sp)
  10ce64:	dd800615 	stw	r22,24(sp)
  10ce68:	dd400515 	stw	r21,20(sp)
  10ce6c:	dcc00315 	stw	r19,12(sp)
  10ce70:	dc800215 	stw	r18,8(sp)
  10ce74:	dc400115 	stw	r17,4(sp)
  10ce78:	2821883a 	mov	r16,r5
  10ce7c:	3029883a 	mov	r20,r6
  10ce80:	28009a26 	beq	r5,zero,10d0ec <_realloc_r+0x2a0>
  10ce84:	202b883a 	mov	r21,r4
  10ce88:	01141680 	call	114168 <__malloc_lock>
  10ce8c:	80ffff17 	ldw	r3,-4(r16)
  10ce90:	047fff04 	movi	r17,-4
  10ce94:	a08002c4 	addi	r2,r20,11
  10ce98:	01000584 	movi	r4,22
  10ce9c:	84fffe04 	addi	r19,r16,-8
  10cea0:	1c62703a 	and	r17,r3,r17
  10cea4:	2080372e 	bgeu	r4,r2,10cf84 <_realloc_r+0x138>
  10cea8:	04bffe04 	movi	r18,-8
  10ceac:	14a4703a 	and	r18,r2,r18
  10ceb0:	9005883a 	mov	r2,r18
  10ceb4:	90005b16 	blt	r18,zero,10d024 <_realloc_r+0x1d8>
  10ceb8:	95005a36 	bltu	r18,r20,10d024 <_realloc_r+0x1d8>
  10cebc:	8880340e 	bge	r17,r2,10cf90 <_realloc_r+0x144>
  10cec0:	05c00474 	movhi	r23,17
  10cec4:	bddb0404 	addi	r23,r23,27664
  10cec8:	b9000217 	ldw	r4,8(r23)
  10cecc:	9c4b883a 	add	r5,r19,r17
  10ced0:	21409626 	beq	r4,r5,10d12c <_realloc_r+0x2e0>
  10ced4:	29800117 	ldw	r6,4(r5)
  10ced8:	01ffff84 	movi	r7,-2
  10cedc:	31ce703a 	and	r7,r6,r7
  10cee0:	29cf883a 	add	r7,r5,r7
  10cee4:	39c00117 	ldw	r7,4(r7)
  10cee8:	39c0004c 	andi	r7,r7,1
  10ceec:	38004226 	beq	r7,zero,10cff8 <_realloc_r+0x1ac>
  10cef0:	000d883a 	mov	r6,zero
  10cef4:	000b883a 	mov	r5,zero
  10cef8:	18c0004c 	andi	r3,r3,1
  10cefc:	18005c1e 	bne	r3,zero,10d070 <_realloc_r+0x224>
  10cf00:	85bffe17 	ldw	r22,-8(r16)
  10cf04:	00ffff04 	movi	r3,-4
  10cf08:	9dadc83a 	sub	r22,r19,r22
  10cf0c:	b1c00117 	ldw	r7,4(r22)
  10cf10:	38c6703a 	and	r3,r7,r3
  10cf14:	28005426 	beq	r5,zero,10d068 <_realloc_r+0x21c>
  10cf18:	1c47883a 	add	r3,r3,r17
  10cf1c:	2900bf26 	beq	r5,r4,10d21c <_realloc_r+0x3d0>
  10cf20:	30ef883a 	add	r23,r6,r3
  10cf24:	b8807e16 	blt	r23,r2,10d120 <_realloc_r+0x2d4>
  10cf28:	28800317 	ldw	r2,12(r5)
  10cf2c:	28c00217 	ldw	r3,8(r5)
  10cf30:	89bfff04 	addi	r6,r17,-4
  10cf34:	01000904 	movi	r4,36
  10cf38:	18800315 	stw	r2,12(r3)
  10cf3c:	10c00215 	stw	r3,8(r2)
  10cf40:	b1400217 	ldw	r5,8(r22)
  10cf44:	b0c00317 	ldw	r3,12(r22)
  10cf48:	b5000204 	addi	r20,r22,8
  10cf4c:	28c00315 	stw	r3,12(r5)
  10cf50:	19400215 	stw	r5,8(r3)
  10cf54:	21808536 	bltu	r4,r6,10d16c <_realloc_r+0x320>
  10cf58:	008004c4 	movi	r2,19
  10cf5c:	1180932e 	bgeu	r2,r6,10d1ac <_realloc_r+0x360>
  10cf60:	80800017 	ldw	r2,0(r16)
  10cf64:	b0800215 	stw	r2,8(r22)
  10cf68:	80800117 	ldw	r2,4(r16)
  10cf6c:	b0800315 	stw	r2,12(r22)
  10cf70:	008006c4 	movi	r2,27
  10cf74:	1180df36 	bltu	r2,r6,10d2f4 <_realloc_r+0x4a8>
  10cf78:	b0c00404 	addi	r3,r22,16
  10cf7c:	84000204 	addi	r16,r16,8
  10cf80:	00008b06 	br	10d1b0 <_realloc_r+0x364>
  10cf84:	00800404 	movi	r2,16
  10cf88:	1025883a 	mov	r18,r2
  10cf8c:	003fca06 	br	10ceb8 <black_to_red_frame+0xfe10ceb8>
  10cf90:	8029883a 	mov	r20,r16
  10cf94:	8c8dc83a 	sub	r6,r17,r18
  10cf98:	008003c4 	movi	r2,15
  10cf9c:	18c0004c 	andi	r3,r3,1
  10cfa0:	11802436 	bltu	r2,r6,10d034 <_realloc_r+0x1e8>
  10cfa4:	1c46b03a 	or	r3,r3,r17
  10cfa8:	98c00115 	stw	r3,4(r19)
  10cfac:	9c63883a 	add	r17,r19,r17
  10cfb0:	88800117 	ldw	r2,4(r17)
  10cfb4:	10800054 	ori	r2,r2,1
  10cfb8:	88800115 	stw	r2,4(r17)
  10cfbc:	a809883a 	mov	r4,r21
  10cfc0:	011416c0 	call	11416c <__malloc_unlock>
  10cfc4:	a005883a 	mov	r2,r20
  10cfc8:	dfc00917 	ldw	ra,36(sp)
  10cfcc:	df000817 	ldw	fp,32(sp)
  10cfd0:	ddc00717 	ldw	r23,28(sp)
  10cfd4:	dd800617 	ldw	r22,24(sp)
  10cfd8:	dd400517 	ldw	r21,20(sp)
  10cfdc:	dd000417 	ldw	r20,16(sp)
  10cfe0:	dcc00317 	ldw	r19,12(sp)
  10cfe4:	dc800217 	ldw	r18,8(sp)
  10cfe8:	dc400117 	ldw	r17,4(sp)
  10cfec:	dc000017 	ldw	r16,0(sp)
  10cff0:	dec00a04 	addi	sp,sp,40
  10cff4:	f800283a 	ret
  10cff8:	01ffff04 	movi	r7,-4
  10cffc:	31cc703a 	and	r6,r6,r7
  10d000:	344f883a 	add	r7,r6,r17
  10d004:	38bfbc16 	blt	r7,r2,10cef8 <black_to_red_frame+0xfe10cef8>
  10d008:	28800317 	ldw	r2,12(r5)
  10d00c:	29000217 	ldw	r4,8(r5)
  10d010:	8029883a 	mov	r20,r16
  10d014:	3823883a 	mov	r17,r7
  10d018:	20800315 	stw	r2,12(r4)
  10d01c:	11000215 	stw	r4,8(r2)
  10d020:	003fdc06 	br	10cf94 <black_to_red_frame+0xfe10cf94>
  10d024:	00800304 	movi	r2,12
  10d028:	a8800015 	stw	r2,0(r21)
  10d02c:	0005883a 	mov	r2,zero
  10d030:	003fe506 	br	10cfc8 <black_to_red_frame+0xfe10cfc8>
  10d034:	1c86b03a 	or	r3,r3,r18
  10d038:	9c8b883a 	add	r5,r19,r18
  10d03c:	98c00115 	stw	r3,4(r19)
  10d040:	30800054 	ori	r2,r6,1
  10d044:	28800115 	stw	r2,4(r5)
  10d048:	298d883a 	add	r6,r5,r6
  10d04c:	30800117 	ldw	r2,4(r6)
  10d050:	a809883a 	mov	r4,r21
  10d054:	29400204 	addi	r5,r5,8
  10d058:	10800054 	ori	r2,r2,1
  10d05c:	30800115 	stw	r2,4(r6)
  10d060:	010ad100 	call	10ad10 <_free_r>
  10d064:	003fd506 	br	10cfbc <black_to_red_frame+0xfe10cfbc>
  10d068:	1c6f883a 	add	r23,r3,r17
  10d06c:	b880370e 	bge	r23,r2,10d14c <_realloc_r+0x300>
  10d070:	a00b883a 	mov	r5,r20
  10d074:	a809883a 	mov	r4,r21
  10d078:	0103f6c0 	call	103f6c <_malloc_r>
  10d07c:	1029883a 	mov	r20,r2
  10d080:	1000c026 	beq	r2,zero,10d384 <_realloc_r+0x538>
  10d084:	80ffff17 	ldw	r3,-4(r16)
  10d088:	113ffe04 	addi	r4,r2,-8
  10d08c:	00bfff84 	movi	r2,-2
  10d090:	1884703a 	and	r2,r3,r2
  10d094:	9885883a 	add	r2,r19,r2
  10d098:	20809026 	beq	r4,r2,10d2dc <_realloc_r+0x490>
  10d09c:	89bfff04 	addi	r6,r17,-4
  10d0a0:	00800904 	movi	r2,36
  10d0a4:	11805936 	bltu	r2,r6,10d20c <_realloc_r+0x3c0>
  10d0a8:	00c004c4 	movi	r3,19
  10d0ac:	19803636 	bltu	r3,r6,10d188 <_realloc_r+0x33c>
  10d0b0:	a005883a 	mov	r2,r20
  10d0b4:	8007883a 	mov	r3,r16
  10d0b8:	19000017 	ldw	r4,0(r3)
  10d0bc:	11000015 	stw	r4,0(r2)
  10d0c0:	19000117 	ldw	r4,4(r3)
  10d0c4:	11000115 	stw	r4,4(r2)
  10d0c8:	18c00217 	ldw	r3,8(r3)
  10d0cc:	10c00215 	stw	r3,8(r2)
  10d0d0:	800b883a 	mov	r5,r16
  10d0d4:	a809883a 	mov	r4,r21
  10d0d8:	010ad100 	call	10ad10 <_free_r>
  10d0dc:	a809883a 	mov	r4,r21
  10d0e0:	011416c0 	call	11416c <__malloc_unlock>
  10d0e4:	a005883a 	mov	r2,r20
  10d0e8:	003fb706 	br	10cfc8 <black_to_red_frame+0xfe10cfc8>
  10d0ec:	300b883a 	mov	r5,r6
  10d0f0:	dfc00917 	ldw	ra,36(sp)
  10d0f4:	df000817 	ldw	fp,32(sp)
  10d0f8:	ddc00717 	ldw	r23,28(sp)
  10d0fc:	dd800617 	ldw	r22,24(sp)
  10d100:	dd400517 	ldw	r21,20(sp)
  10d104:	dd000417 	ldw	r20,16(sp)
  10d108:	dcc00317 	ldw	r19,12(sp)
  10d10c:	dc800217 	ldw	r18,8(sp)
  10d110:	dc400117 	ldw	r17,4(sp)
  10d114:	dc000017 	ldw	r16,0(sp)
  10d118:	dec00a04 	addi	sp,sp,40
  10d11c:	0103f6c1 	jmpi	103f6c <_malloc_r>
  10d120:	182f883a 	mov	r23,r3
  10d124:	b8bfd216 	blt	r23,r2,10d070 <black_to_red_frame+0xfe10d070>
  10d128:	00000806 	br	10d14c <_realloc_r+0x300>
  10d12c:	21800117 	ldw	r6,4(r4)
  10d130:	017fff04 	movi	r5,-4
  10d134:	91c00404 	addi	r7,r18,16
  10d138:	314c703a 	and	r6,r6,r5
  10d13c:	344b883a 	add	r5,r6,r17
  10d140:	29c0250e 	bge	r5,r7,10d1d8 <_realloc_r+0x38c>
  10d144:	200b883a 	mov	r5,r4
  10d148:	003f6b06 	br	10cef8 <black_to_red_frame+0xfe10cef8>
  10d14c:	b0800317 	ldw	r2,12(r22)
  10d150:	b0c00217 	ldw	r3,8(r22)
  10d154:	89bfff04 	addi	r6,r17,-4
  10d158:	01000904 	movi	r4,36
  10d15c:	18800315 	stw	r2,12(r3)
  10d160:	10c00215 	stw	r3,8(r2)
  10d164:	b5000204 	addi	r20,r22,8
  10d168:	21bf7b2e 	bgeu	r4,r6,10cf58 <black_to_red_frame+0xfe10cf58>
  10d16c:	a009883a 	mov	r4,r20
  10d170:	800b883a 	mov	r5,r16
  10d174:	010ba680 	call	10ba68 <memmove>
  10d178:	b0c00117 	ldw	r3,4(r22)
  10d17c:	b823883a 	mov	r17,r23
  10d180:	b027883a 	mov	r19,r22
  10d184:	003f8306 	br	10cf94 <black_to_red_frame+0xfe10cf94>
  10d188:	80c00017 	ldw	r3,0(r16)
  10d18c:	a0c00015 	stw	r3,0(r20)
  10d190:	80c00117 	ldw	r3,4(r16)
  10d194:	a0c00115 	stw	r3,4(r20)
  10d198:	00c006c4 	movi	r3,27
  10d19c:	19804736 	bltu	r3,r6,10d2bc <_realloc_r+0x470>
  10d1a0:	a0800204 	addi	r2,r20,8
  10d1a4:	80c00204 	addi	r3,r16,8
  10d1a8:	003fc306 	br	10d0b8 <black_to_red_frame+0xfe10d0b8>
  10d1ac:	a007883a 	mov	r3,r20
  10d1b0:	80800017 	ldw	r2,0(r16)
  10d1b4:	b823883a 	mov	r17,r23
  10d1b8:	b027883a 	mov	r19,r22
  10d1bc:	18800015 	stw	r2,0(r3)
  10d1c0:	80800117 	ldw	r2,4(r16)
  10d1c4:	18800115 	stw	r2,4(r3)
  10d1c8:	80800217 	ldw	r2,8(r16)
  10d1cc:	18800215 	stw	r2,8(r3)
  10d1d0:	b0c00117 	ldw	r3,4(r22)
  10d1d4:	003f6f06 	br	10cf94 <black_to_red_frame+0xfe10cf94>
  10d1d8:	9ca7883a 	add	r19,r19,r18
  10d1dc:	2c85c83a 	sub	r2,r5,r18
  10d1e0:	bcc00215 	stw	r19,8(r23)
  10d1e4:	10800054 	ori	r2,r2,1
  10d1e8:	98800115 	stw	r2,4(r19)
  10d1ec:	80bfff17 	ldw	r2,-4(r16)
  10d1f0:	a809883a 	mov	r4,r21
  10d1f4:	1080004c 	andi	r2,r2,1
  10d1f8:	90a4b03a 	or	r18,r18,r2
  10d1fc:	84bfff15 	stw	r18,-4(r16)
  10d200:	011416c0 	call	11416c <__malloc_unlock>
  10d204:	8005883a 	mov	r2,r16
  10d208:	003f6f06 	br	10cfc8 <black_to_red_frame+0xfe10cfc8>
  10d20c:	a009883a 	mov	r4,r20
  10d210:	800b883a 	mov	r5,r16
  10d214:	010ba680 	call	10ba68 <memmove>
  10d218:	003fad06 	br	10d0d0 <black_to_red_frame+0xfe10d0d0>
  10d21c:	30f9883a 	add	fp,r6,r3
  10d220:	91000404 	addi	r4,r18,16
  10d224:	e13fbe16 	blt	fp,r4,10d120 <black_to_red_frame+0xfe10d120>
  10d228:	b0800317 	ldw	r2,12(r22)
  10d22c:	b0c00217 	ldw	r3,8(r22)
  10d230:	89bfff04 	addi	r6,r17,-4
  10d234:	01000904 	movi	r4,36
  10d238:	18800315 	stw	r2,12(r3)
  10d23c:	10c00215 	stw	r3,8(r2)
  10d240:	b4400204 	addi	r17,r22,8
  10d244:	21804336 	bltu	r4,r6,10d354 <_realloc_r+0x508>
  10d248:	008004c4 	movi	r2,19
  10d24c:	11803f2e 	bgeu	r2,r6,10d34c <_realloc_r+0x500>
  10d250:	80800017 	ldw	r2,0(r16)
  10d254:	b0800215 	stw	r2,8(r22)
  10d258:	80800117 	ldw	r2,4(r16)
  10d25c:	b0800315 	stw	r2,12(r22)
  10d260:	008006c4 	movi	r2,27
  10d264:	11803f36 	bltu	r2,r6,10d364 <_realloc_r+0x518>
  10d268:	b0c00404 	addi	r3,r22,16
  10d26c:	84000204 	addi	r16,r16,8
  10d270:	80800017 	ldw	r2,0(r16)
  10d274:	18800015 	stw	r2,0(r3)
  10d278:	80800117 	ldw	r2,4(r16)
  10d27c:	18800115 	stw	r2,4(r3)
  10d280:	80800217 	ldw	r2,8(r16)
  10d284:	18800215 	stw	r2,8(r3)
  10d288:	b487883a 	add	r3,r22,r18
  10d28c:	e485c83a 	sub	r2,fp,r18
  10d290:	b8c00215 	stw	r3,8(r23)
  10d294:	10800054 	ori	r2,r2,1
  10d298:	18800115 	stw	r2,4(r3)
  10d29c:	b0800117 	ldw	r2,4(r22)
  10d2a0:	a809883a 	mov	r4,r21
  10d2a4:	1080004c 	andi	r2,r2,1
  10d2a8:	90a4b03a 	or	r18,r18,r2
  10d2ac:	b4800115 	stw	r18,4(r22)
  10d2b0:	011416c0 	call	11416c <__malloc_unlock>
  10d2b4:	8805883a 	mov	r2,r17
  10d2b8:	003f4306 	br	10cfc8 <black_to_red_frame+0xfe10cfc8>
  10d2bc:	80c00217 	ldw	r3,8(r16)
  10d2c0:	a0c00215 	stw	r3,8(r20)
  10d2c4:	80c00317 	ldw	r3,12(r16)
  10d2c8:	a0c00315 	stw	r3,12(r20)
  10d2cc:	30801126 	beq	r6,r2,10d314 <_realloc_r+0x4c8>
  10d2d0:	a0800404 	addi	r2,r20,16
  10d2d4:	80c00404 	addi	r3,r16,16
  10d2d8:	003f7706 	br	10d0b8 <black_to_red_frame+0xfe10d0b8>
  10d2dc:	a13fff17 	ldw	r4,-4(r20)
  10d2e0:	00bfff04 	movi	r2,-4
  10d2e4:	8029883a 	mov	r20,r16
  10d2e8:	2084703a 	and	r2,r4,r2
  10d2ec:	88a3883a 	add	r17,r17,r2
  10d2f0:	003f2806 	br	10cf94 <black_to_red_frame+0xfe10cf94>
  10d2f4:	80800217 	ldw	r2,8(r16)
  10d2f8:	b0800415 	stw	r2,16(r22)
  10d2fc:	80800317 	ldw	r2,12(r16)
  10d300:	b0800515 	stw	r2,20(r22)
  10d304:	31000a26 	beq	r6,r4,10d330 <_realloc_r+0x4e4>
  10d308:	b0c00604 	addi	r3,r22,24
  10d30c:	84000404 	addi	r16,r16,16
  10d310:	003fa706 	br	10d1b0 <black_to_red_frame+0xfe10d1b0>
  10d314:	81000417 	ldw	r4,16(r16)
  10d318:	a0800604 	addi	r2,r20,24
  10d31c:	80c00604 	addi	r3,r16,24
  10d320:	a1000415 	stw	r4,16(r20)
  10d324:	81000517 	ldw	r4,20(r16)
  10d328:	a1000515 	stw	r4,20(r20)
  10d32c:	003f6206 	br	10d0b8 <black_to_red_frame+0xfe10d0b8>
  10d330:	80800417 	ldw	r2,16(r16)
  10d334:	84000604 	addi	r16,r16,24
  10d338:	b0c00804 	addi	r3,r22,32
  10d33c:	b0800615 	stw	r2,24(r22)
  10d340:	80bfff17 	ldw	r2,-4(r16)
  10d344:	b0800715 	stw	r2,28(r22)
  10d348:	003f9906 	br	10d1b0 <black_to_red_frame+0xfe10d1b0>
  10d34c:	8807883a 	mov	r3,r17
  10d350:	003fc706 	br	10d270 <black_to_red_frame+0xfe10d270>
  10d354:	8809883a 	mov	r4,r17
  10d358:	800b883a 	mov	r5,r16
  10d35c:	010ba680 	call	10ba68 <memmove>
  10d360:	003fc906 	br	10d288 <black_to_red_frame+0xfe10d288>
  10d364:	80800217 	ldw	r2,8(r16)
  10d368:	b0800415 	stw	r2,16(r22)
  10d36c:	80800317 	ldw	r2,12(r16)
  10d370:	b0800515 	stw	r2,20(r22)
  10d374:	31000726 	beq	r6,r4,10d394 <_realloc_r+0x548>
  10d378:	b0c00604 	addi	r3,r22,24
  10d37c:	84000404 	addi	r16,r16,16
  10d380:	003fbb06 	br	10d270 <black_to_red_frame+0xfe10d270>
  10d384:	a809883a 	mov	r4,r21
  10d388:	011416c0 	call	11416c <__malloc_unlock>
  10d38c:	0005883a 	mov	r2,zero
  10d390:	003f0d06 	br	10cfc8 <black_to_red_frame+0xfe10cfc8>
  10d394:	80800417 	ldw	r2,16(r16)
  10d398:	84000604 	addi	r16,r16,24
  10d39c:	b0c00804 	addi	r3,r22,32
  10d3a0:	b0800615 	stw	r2,24(r22)
  10d3a4:	80bfff17 	ldw	r2,-4(r16)
  10d3a8:	b0800715 	stw	r2,28(r22)
  10d3ac:	003fb006 	br	10d270 <black_to_red_frame+0xfe10d270>

0010d3b0 <__fpclassifyd>:
  10d3b0:	00a00034 	movhi	r2,32768
  10d3b4:	10bfffc4 	addi	r2,r2,-1
  10d3b8:	288a703a 	and	r5,r5,r2
  10d3bc:	28000726 	beq	r5,zero,10d3dc <__fpclassifyd+0x2c>
  10d3c0:	00bffc34 	movhi	r2,65520
  10d3c4:	2885883a 	add	r2,r5,r2
  10d3c8:	00dff834 	movhi	r3,32736
  10d3cc:	18ffffc4 	addi	r3,r3,-1
  10d3d0:	18800636 	bltu	r3,r2,10d3ec <__fpclassifyd+0x3c>
  10d3d4:	00800104 	movi	r2,4
  10d3d8:	f800283a 	ret
  10d3dc:	2005003a 	cmpeq	r2,r4,zero
  10d3e0:	00c000c4 	movi	r3,3
  10d3e4:	1885c83a 	sub	r2,r3,r2
  10d3e8:	f800283a 	ret
  10d3ec:	00800434 	movhi	r2,16
  10d3f0:	10bfffc4 	addi	r2,r2,-1
  10d3f4:	11400236 	bltu	r2,r5,10d400 <__fpclassifyd+0x50>
  10d3f8:	008000c4 	movi	r2,3
  10d3fc:	f800283a 	ret
  10d400:	009ffc34 	movhi	r2,32752
  10d404:	28800226 	beq	r5,r2,10d410 <__fpclassifyd+0x60>
  10d408:	0005883a 	mov	r2,zero
  10d40c:	f800283a 	ret
  10d410:	2005003a 	cmpeq	r2,r4,zero
  10d414:	f800283a 	ret

0010d418 <__sread>:
  10d418:	defffe04 	addi	sp,sp,-8
  10d41c:	dc000015 	stw	r16,0(sp)
  10d420:	2821883a 	mov	r16,r5
  10d424:	2940038f 	ldh	r5,14(r5)
  10d428:	dfc00115 	stw	ra,4(sp)
  10d42c:	01106bc0 	call	1106bc <_read_r>
  10d430:	10000716 	blt	r2,zero,10d450 <__sread+0x38>
  10d434:	80c01417 	ldw	r3,80(r16)
  10d438:	1887883a 	add	r3,r3,r2
  10d43c:	80c01415 	stw	r3,80(r16)
  10d440:	dfc00117 	ldw	ra,4(sp)
  10d444:	dc000017 	ldw	r16,0(sp)
  10d448:	dec00204 	addi	sp,sp,8
  10d44c:	f800283a 	ret
  10d450:	80c0030b 	ldhu	r3,12(r16)
  10d454:	18fbffcc 	andi	r3,r3,61439
  10d458:	80c0030d 	sth	r3,12(r16)
  10d45c:	dfc00117 	ldw	ra,4(sp)
  10d460:	dc000017 	ldw	r16,0(sp)
  10d464:	dec00204 	addi	sp,sp,8
  10d468:	f800283a 	ret

0010d46c <__seofread>:
  10d46c:	0005883a 	mov	r2,zero
  10d470:	f800283a 	ret

0010d474 <__swrite>:
  10d474:	2880030b 	ldhu	r2,12(r5)
  10d478:	defffb04 	addi	sp,sp,-20
  10d47c:	dcc00315 	stw	r19,12(sp)
  10d480:	dc800215 	stw	r18,8(sp)
  10d484:	dc400115 	stw	r17,4(sp)
  10d488:	dc000015 	stw	r16,0(sp)
  10d48c:	dfc00415 	stw	ra,16(sp)
  10d490:	10c0400c 	andi	r3,r2,256
  10d494:	2821883a 	mov	r16,r5
  10d498:	2027883a 	mov	r19,r4
  10d49c:	3025883a 	mov	r18,r6
  10d4a0:	3823883a 	mov	r17,r7
  10d4a4:	18000526 	beq	r3,zero,10d4bc <__swrite+0x48>
  10d4a8:	2940038f 	ldh	r5,14(r5)
  10d4ac:	000d883a 	mov	r6,zero
  10d4b0:	01c00084 	movi	r7,2
  10d4b4:	01106500 	call	110650 <_lseek_r>
  10d4b8:	8080030b 	ldhu	r2,12(r16)
  10d4bc:	8140038f 	ldh	r5,14(r16)
  10d4c0:	10bbffcc 	andi	r2,r2,61439
  10d4c4:	9809883a 	mov	r4,r19
  10d4c8:	900d883a 	mov	r6,r18
  10d4cc:	880f883a 	mov	r7,r17
  10d4d0:	8080030d 	sth	r2,12(r16)
  10d4d4:	dfc00417 	ldw	ra,16(sp)
  10d4d8:	dcc00317 	ldw	r19,12(sp)
  10d4dc:	dc800217 	ldw	r18,8(sp)
  10d4e0:	dc400117 	ldw	r17,4(sp)
  10d4e4:	dc000017 	ldw	r16,0(sp)
  10d4e8:	dec00504 	addi	sp,sp,20
  10d4ec:	01100a41 	jmpi	1100a4 <_write_r>

0010d4f0 <__sseek>:
  10d4f0:	defffe04 	addi	sp,sp,-8
  10d4f4:	dc000015 	stw	r16,0(sp)
  10d4f8:	2821883a 	mov	r16,r5
  10d4fc:	2940038f 	ldh	r5,14(r5)
  10d500:	dfc00115 	stw	ra,4(sp)
  10d504:	01106500 	call	110650 <_lseek_r>
  10d508:	00ffffc4 	movi	r3,-1
  10d50c:	10c00826 	beq	r2,r3,10d530 <__sseek+0x40>
  10d510:	80c0030b 	ldhu	r3,12(r16)
  10d514:	80801415 	stw	r2,80(r16)
  10d518:	18c40014 	ori	r3,r3,4096
  10d51c:	80c0030d 	sth	r3,12(r16)
  10d520:	dfc00117 	ldw	ra,4(sp)
  10d524:	dc000017 	ldw	r16,0(sp)
  10d528:	dec00204 	addi	sp,sp,8
  10d52c:	f800283a 	ret
  10d530:	80c0030b 	ldhu	r3,12(r16)
  10d534:	18fbffcc 	andi	r3,r3,61439
  10d538:	80c0030d 	sth	r3,12(r16)
  10d53c:	dfc00117 	ldw	ra,4(sp)
  10d540:	dc000017 	ldw	r16,0(sp)
  10d544:	dec00204 	addi	sp,sp,8
  10d548:	f800283a 	ret

0010d54c <__sclose>:
  10d54c:	2940038f 	ldh	r5,14(r5)
  10d550:	01101101 	jmpi	110110 <_close_r>

0010d554 <strcmp>:
  10d554:	2144b03a 	or	r2,r4,r5
  10d558:	108000cc 	andi	r2,r2,3
  10d55c:	1000171e 	bne	r2,zero,10d5bc <strcmp+0x68>
  10d560:	20800017 	ldw	r2,0(r4)
  10d564:	28c00017 	ldw	r3,0(r5)
  10d568:	10c0141e 	bne	r2,r3,10d5bc <strcmp+0x68>
  10d56c:	027fbff4 	movhi	r9,65279
  10d570:	4a7fbfc4 	addi	r9,r9,-257
  10d574:	1247883a 	add	r3,r2,r9
  10d578:	0084303a 	nor	r2,zero,r2
  10d57c:	1884703a 	and	r2,r3,r2
  10d580:	02202074 	movhi	r8,32897
  10d584:	42202004 	addi	r8,r8,-32640
  10d588:	1204703a 	and	r2,r2,r8
  10d58c:	10000226 	beq	r2,zero,10d598 <strcmp+0x44>
  10d590:	00001706 	br	10d5f0 <strcmp+0x9c>
  10d594:	3000161e 	bne	r6,zero,10d5f0 <strcmp+0x9c>
  10d598:	21000104 	addi	r4,r4,4
  10d59c:	20800017 	ldw	r2,0(r4)
  10d5a0:	29400104 	addi	r5,r5,4
  10d5a4:	28c00017 	ldw	r3,0(r5)
  10d5a8:	124f883a 	add	r7,r2,r9
  10d5ac:	008c303a 	nor	r6,zero,r2
  10d5b0:	398c703a 	and	r6,r7,r6
  10d5b4:	320c703a 	and	r6,r6,r8
  10d5b8:	10fff626 	beq	r2,r3,10d594 <black_to_red_frame+0xfe10d594>
  10d5bc:	20800007 	ldb	r2,0(r4)
  10d5c0:	1000051e 	bne	r2,zero,10d5d8 <strcmp+0x84>
  10d5c4:	00000606 	br	10d5e0 <strcmp+0x8c>
  10d5c8:	21000044 	addi	r4,r4,1
  10d5cc:	20800007 	ldb	r2,0(r4)
  10d5d0:	29400044 	addi	r5,r5,1
  10d5d4:	10000226 	beq	r2,zero,10d5e0 <strcmp+0x8c>
  10d5d8:	28c00007 	ldb	r3,0(r5)
  10d5dc:	10fffa26 	beq	r2,r3,10d5c8 <black_to_red_frame+0xfe10d5c8>
  10d5e0:	20c00003 	ldbu	r3,0(r4)
  10d5e4:	28800003 	ldbu	r2,0(r5)
  10d5e8:	1885c83a 	sub	r2,r3,r2
  10d5ec:	f800283a 	ret
  10d5f0:	0005883a 	mov	r2,zero
  10d5f4:	f800283a 	ret

0010d5f8 <__ssprint_r>:
  10d5f8:	30800217 	ldw	r2,8(r6)
  10d5fc:	defff604 	addi	sp,sp,-40
  10d600:	dd000415 	stw	r20,16(sp)
  10d604:	dc800215 	stw	r18,8(sp)
  10d608:	dfc00915 	stw	ra,36(sp)
  10d60c:	df000815 	stw	fp,32(sp)
  10d610:	ddc00715 	stw	r23,28(sp)
  10d614:	dd800615 	stw	r22,24(sp)
  10d618:	dd400515 	stw	r21,20(sp)
  10d61c:	dcc00315 	stw	r19,12(sp)
  10d620:	dc400115 	stw	r17,4(sp)
  10d624:	dc000015 	stw	r16,0(sp)
  10d628:	3029883a 	mov	r20,r6
  10d62c:	34800017 	ldw	r18,0(r6)
  10d630:	10005726 	beq	r2,zero,10d790 <__ssprint_r+0x198>
  10d634:	202b883a 	mov	r21,r4
  10d638:	28c00217 	ldw	r3,8(r5)
  10d63c:	29000017 	ldw	r4,0(r5)
  10d640:	2823883a 	mov	r17,r5
  10d644:	0039883a 	mov	fp,zero
  10d648:	0021883a 	mov	r16,zero
  10d64c:	80001326 	beq	r16,zero,10d69c <__ssprint_r+0xa4>
  10d650:	1827883a 	mov	r19,r3
  10d654:	80c01536 	bltu	r16,r3,10d6ac <__ssprint_r+0xb4>
  10d658:	8880030b 	ldhu	r2,12(r17)
  10d65c:	10c1200c 	andi	r3,r2,1152
  10d660:	1800151e 	bne	r3,zero,10d6b8 <__ssprint_r+0xc0>
  10d664:	982f883a 	mov	r23,r19
  10d668:	e00b883a 	mov	r5,fp
  10d66c:	b80d883a 	mov	r6,r23
  10d670:	010ba680 	call	10ba68 <memmove>
  10d674:	88c00217 	ldw	r3,8(r17)
  10d678:	89000017 	ldw	r4,0(r17)
  10d67c:	a0800217 	ldw	r2,8(r20)
  10d680:	1cc7c83a 	sub	r3,r3,r19
  10d684:	25c9883a 	add	r4,r4,r23
  10d688:	88c00215 	stw	r3,8(r17)
  10d68c:	89000015 	stw	r4,0(r17)
  10d690:	1405c83a 	sub	r2,r2,r16
  10d694:	a0800215 	stw	r2,8(r20)
  10d698:	10003d26 	beq	r2,zero,10d790 <__ssprint_r+0x198>
  10d69c:	97000017 	ldw	fp,0(r18)
  10d6a0:	94000117 	ldw	r16,4(r18)
  10d6a4:	94800204 	addi	r18,r18,8
  10d6a8:	003fe806 	br	10d64c <black_to_red_frame+0xfe10d64c>
  10d6ac:	8027883a 	mov	r19,r16
  10d6b0:	802f883a 	mov	r23,r16
  10d6b4:	003fec06 	br	10d668 <black_to_red_frame+0xfe10d668>
  10d6b8:	88c00517 	ldw	r3,20(r17)
  10d6bc:	89400417 	ldw	r5,16(r17)
  10d6c0:	81800044 	addi	r6,r16,1
  10d6c4:	18e7883a 	add	r19,r3,r3
  10d6c8:	98c7883a 	add	r3,r19,r3
  10d6cc:	1826d7fa 	srli	r19,r3,31
  10d6d0:	216fc83a 	sub	r23,r4,r5
  10d6d4:	35cd883a 	add	r6,r6,r23
  10d6d8:	98c7883a 	add	r3,r19,r3
  10d6dc:	1827d07a 	srai	r19,r3,1
  10d6e0:	99801a2e 	bgeu	r19,r6,10d74c <__ssprint_r+0x154>
  10d6e4:	1081000c 	andi	r2,r2,1024
  10d6e8:	3027883a 	mov	r19,r6
  10d6ec:	a809883a 	mov	r4,r21
  10d6f0:	10001a26 	beq	r2,zero,10d75c <__ssprint_r+0x164>
  10d6f4:	300b883a 	mov	r5,r6
  10d6f8:	0103f6c0 	call	103f6c <_malloc_r>
  10d6fc:	102d883a 	mov	r22,r2
  10d700:	10001c26 	beq	r2,zero,10d774 <__ssprint_r+0x17c>
  10d704:	89400417 	ldw	r5,16(r17)
  10d708:	1009883a 	mov	r4,r2
  10d70c:	b80d883a 	mov	r6,r23
  10d710:	010b95c0 	call	10b95c <memcpy>
  10d714:	8880030b 	ldhu	r2,12(r17)
  10d718:	00fedfc4 	movi	r3,-1153
  10d71c:	10c4703a 	and	r2,r2,r3
  10d720:	10802014 	ori	r2,r2,128
  10d724:	8880030d 	sth	r2,12(r17)
  10d728:	b5c9883a 	add	r4,r22,r23
  10d72c:	9defc83a 	sub	r23,r19,r23
  10d730:	8cc00515 	stw	r19,20(r17)
  10d734:	8dc00215 	stw	r23,8(r17)
  10d738:	8d800415 	stw	r22,16(r17)
  10d73c:	89000015 	stw	r4,0(r17)
  10d740:	8027883a 	mov	r19,r16
  10d744:	802f883a 	mov	r23,r16
  10d748:	003fc706 	br	10d668 <black_to_red_frame+0xfe10d668>
  10d74c:	1081000c 	andi	r2,r2,1024
  10d750:	980d883a 	mov	r6,r19
  10d754:	a809883a 	mov	r4,r21
  10d758:	103fe61e 	bne	r2,zero,10d6f4 <black_to_red_frame+0xfe10d6f4>
  10d75c:	010ce4c0 	call	10ce4c <_realloc_r>
  10d760:	102d883a 	mov	r22,r2
  10d764:	103ff01e 	bne	r2,zero,10d728 <black_to_red_frame+0xfe10d728>
  10d768:	89400417 	ldw	r5,16(r17)
  10d76c:	a809883a 	mov	r4,r21
  10d770:	010ad100 	call	10ad10 <_free_r>
  10d774:	88c0030b 	ldhu	r3,12(r17)
  10d778:	00800304 	movi	r2,12
  10d77c:	a8800015 	stw	r2,0(r21)
  10d780:	18c01014 	ori	r3,r3,64
  10d784:	88c0030d 	sth	r3,12(r17)
  10d788:	00bfffc4 	movi	r2,-1
  10d78c:	a0000215 	stw	zero,8(r20)
  10d790:	a0000115 	stw	zero,4(r20)
  10d794:	dfc00917 	ldw	ra,36(sp)
  10d798:	df000817 	ldw	fp,32(sp)
  10d79c:	ddc00717 	ldw	r23,28(sp)
  10d7a0:	dd800617 	ldw	r22,24(sp)
  10d7a4:	dd400517 	ldw	r21,20(sp)
  10d7a8:	dd000417 	ldw	r20,16(sp)
  10d7ac:	dcc00317 	ldw	r19,12(sp)
  10d7b0:	dc800217 	ldw	r18,8(sp)
  10d7b4:	dc400117 	ldw	r17,4(sp)
  10d7b8:	dc000017 	ldw	r16,0(sp)
  10d7bc:	dec00a04 	addi	sp,sp,40
  10d7c0:	f800283a 	ret

0010d7c4 <___svfiprintf_internal_r>:
  10d7c4:	2880030b 	ldhu	r2,12(r5)
  10d7c8:	deffc804 	addi	sp,sp,-224
  10d7cc:	dd003215 	stw	r20,200(sp)
  10d7d0:	dfc03715 	stw	ra,220(sp)
  10d7d4:	df003615 	stw	fp,216(sp)
  10d7d8:	ddc03515 	stw	r23,212(sp)
  10d7dc:	dd803415 	stw	r22,208(sp)
  10d7e0:	dd403315 	stw	r21,204(sp)
  10d7e4:	dcc03115 	stw	r19,196(sp)
  10d7e8:	dc803015 	stw	r18,192(sp)
  10d7ec:	dc402f15 	stw	r17,188(sp)
  10d7f0:	dc002e15 	stw	r16,184(sp)
  10d7f4:	d9402415 	stw	r5,144(sp)
  10d7f8:	d9002915 	stw	r4,164(sp)
  10d7fc:	1080200c 	andi	r2,r2,128
  10d800:	d9c02515 	stw	r7,148(sp)
  10d804:	3029883a 	mov	r20,r6
  10d808:	10000226 	beq	r2,zero,10d814 <___svfiprintf_internal_r+0x50>
  10d80c:	28800417 	ldw	r2,16(r5)
  10d810:	10041026 	beq	r2,zero,10e854 <___svfiprintf_internal_r+0x1090>
  10d814:	d8801a04 	addi	r2,sp,104
  10d818:	d8c019c4 	addi	r3,sp,103
  10d81c:	dc402917 	ldw	r17,164(sp)
  10d820:	10c9c83a 	sub	r4,r2,r3
  10d824:	d8801e15 	stw	r2,120(sp)
  10d828:	d8c01f15 	stw	r3,124(sp)
  10d82c:	dec01a15 	stw	sp,104(sp)
  10d830:	d8001c15 	stw	zero,112(sp)
  10d834:	d8001b15 	stw	zero,108(sp)
  10d838:	d8002a15 	stw	zero,168(sp)
  10d83c:	d8002715 	stw	zero,156(sp)
  10d840:	d811883a 	mov	r8,sp
  10d844:	04c00474 	movhi	r19,17
  10d848:	9cda9c04 	addi	r19,r19,27248
  10d84c:	d9002c15 	stw	r4,176(sp)
  10d850:	a0800007 	ldb	r2,0(r20)
  10d854:	1002a326 	beq	r2,zero,10e2e4 <___svfiprintf_internal_r+0xb20>
  10d858:	00c00944 	movi	r3,37
  10d85c:	a025883a 	mov	r18,r20
  10d860:	10c0021e 	bne	r2,r3,10d86c <___svfiprintf_internal_r+0xa8>
  10d864:	00001406 	br	10d8b8 <___svfiprintf_internal_r+0xf4>
  10d868:	10c00326 	beq	r2,r3,10d878 <___svfiprintf_internal_r+0xb4>
  10d86c:	94800044 	addi	r18,r18,1
  10d870:	90800007 	ldb	r2,0(r18)
  10d874:	103ffc1e 	bne	r2,zero,10d868 <black_to_red_frame+0xfe10d868>
  10d878:	9521c83a 	sub	r16,r18,r20
  10d87c:	80000e26 	beq	r16,zero,10d8b8 <___svfiprintf_internal_r+0xf4>
  10d880:	d8c01c17 	ldw	r3,112(sp)
  10d884:	d8801b17 	ldw	r2,108(sp)
  10d888:	45000015 	stw	r20,0(r8)
  10d88c:	1c07883a 	add	r3,r3,r16
  10d890:	10800044 	addi	r2,r2,1
  10d894:	d8c01c15 	stw	r3,112(sp)
  10d898:	44000115 	stw	r16,4(r8)
  10d89c:	d8801b15 	stw	r2,108(sp)
  10d8a0:	00c001c4 	movi	r3,7
  10d8a4:	18831a16 	blt	r3,r2,10e510 <___svfiprintf_internal_r+0xd4c>
  10d8a8:	42000204 	addi	r8,r8,8
  10d8ac:	d9402717 	ldw	r5,156(sp)
  10d8b0:	2c0b883a 	add	r5,r5,r16
  10d8b4:	d9402715 	stw	r5,156(sp)
  10d8b8:	90800007 	ldb	r2,0(r18)
  10d8bc:	1002a026 	beq	r2,zero,10e340 <___svfiprintf_internal_r+0xb7c>
  10d8c0:	002d883a 	mov	r22,zero
  10d8c4:	00bfffc4 	movi	r2,-1
  10d8c8:	0021883a 	mov	r16,zero
  10d8cc:	95000044 	addi	r20,r18,1
  10d8d0:	90c00047 	ldb	r3,1(r18)
  10d8d4:	dd802005 	stb	r22,128(sp)
  10d8d8:	d8001d85 	stb	zero,118(sp)
  10d8dc:	d8802115 	stw	r2,132(sp)
  10d8e0:	d8002215 	stw	zero,136(sp)
  10d8e4:	04801604 	movi	r18,88
  10d8e8:	05400244 	movi	r21,9
  10d8ec:	07000a84 	movi	fp,42
  10d8f0:	402f883a 	mov	r23,r8
  10d8f4:	802d883a 	mov	r22,r16
  10d8f8:	a5000044 	addi	r20,r20,1
  10d8fc:	18bff804 	addi	r2,r3,-32
  10d900:	90817636 	bltu	r18,r2,10dedc <___svfiprintf_internal_r+0x718>
  10d904:	1085883a 	add	r2,r2,r2
  10d908:	1085883a 	add	r2,r2,r2
  10d90c:	01000474 	movhi	r4,17
  10d910:	21364804 	addi	r4,r4,-9952
  10d914:	1105883a 	add	r2,r2,r4
  10d918:	10800017 	ldw	r2,0(r2)
  10d91c:	1000683a 	jmp	r2
  10d920:	0010dad4 	movui	zero,17259
  10d924:	0010dedc 	xori	zero,zero,17275
  10d928:	0010dedc 	xori	zero,zero,17275
  10d92c:	0010dac8 	cmpgei	zero,zero,17259
  10d930:	0010dedc 	xori	zero,zero,17275
  10d934:	0010dedc 	xori	zero,zero,17275
  10d938:	0010dedc 	xori	zero,zero,17275
  10d93c:	0010dedc 	xori	zero,zero,17275
  10d940:	0010dedc 	xori	zero,zero,17275
  10d944:	0010dedc 	xori	zero,zero,17275
  10d948:	0010da84 	movi	zero,17258
  10d94c:	0010dab8 	rdprs	zero,zero,17258
  10d950:	0010dedc 	xori	zero,zero,17275
  10d954:	0010daac 	andhi	zero,zero,17258
  10d958:	0010de94 	movui	zero,17274
  10d95c:	0010dedc 	xori	zero,zero,17275
  10d960:	0010de88 	cmpgei	zero,zero,17274
  10d964:	0010df0c 	andi	zero,zero,17276
  10d968:	0010df0c 	andi	zero,zero,17276
  10d96c:	0010df0c 	andi	zero,zero,17276
  10d970:	0010df0c 	andi	zero,zero,17276
  10d974:	0010df0c 	andi	zero,zero,17276
  10d978:	0010df0c 	andi	zero,zero,17276
  10d97c:	0010df0c 	andi	zero,zero,17276
  10d980:	0010df0c 	andi	zero,zero,17276
  10d984:	0010df0c 	andi	zero,zero,17276
  10d988:	0010dedc 	xori	zero,zero,17275
  10d98c:	0010dedc 	xori	zero,zero,17275
  10d990:	0010dedc 	xori	zero,zero,17275
  10d994:	0010dedc 	xori	zero,zero,17275
  10d998:	0010dedc 	xori	zero,zero,17275
  10d99c:	0010dedc 	xori	zero,zero,17275
  10d9a0:	0010dedc 	xori	zero,zero,17275
  10d9a4:	0010dedc 	xori	zero,zero,17275
  10d9a8:	0010dedc 	xori	zero,zero,17275
  10d9ac:	0010dedc 	xori	zero,zero,17275
  10d9b0:	0010dd80 	call	10dd8 <black_tx_descriptor+0x104d8>
  10d9b4:	0010dedc 	xori	zero,zero,17275
  10d9b8:	0010dedc 	xori	zero,zero,17275
  10d9bc:	0010dedc 	xori	zero,zero,17275
  10d9c0:	0010dedc 	xori	zero,zero,17275
  10d9c4:	0010dedc 	xori	zero,zero,17275
  10d9c8:	0010dedc 	xori	zero,zero,17275
  10d9cc:	0010dedc 	xori	zero,zero,17275
  10d9d0:	0010dedc 	xori	zero,zero,17275
  10d9d4:	0010dedc 	xori	zero,zero,17275
  10d9d8:	0010dedc 	xori	zero,zero,17275
  10d9dc:	0010de0c 	andi	zero,zero,17272
  10d9e0:	0010dedc 	xori	zero,zero,17275
  10d9e4:	0010dedc 	xori	zero,zero,17275
  10d9e8:	0010dedc 	xori	zero,zero,17275
  10d9ec:	0010dedc 	xori	zero,zero,17275
  10d9f0:	0010dedc 	xori	zero,zero,17275
  10d9f4:	0010ddcc 	andi	zero,zero,17271
  10d9f8:	0010dedc 	xori	zero,zero,17275
  10d9fc:	0010dedc 	xori	zero,zero,17275
  10da00:	0010de3c 	xorhi	zero,zero,17272
  10da04:	0010dedc 	xori	zero,zero,17275
  10da08:	0010dedc 	xori	zero,zero,17275
  10da0c:	0010dedc 	xori	zero,zero,17275
  10da10:	0010dedc 	xori	zero,zero,17275
  10da14:	0010dedc 	xori	zero,zero,17275
  10da18:	0010dedc 	xori	zero,zero,17275
  10da1c:	0010dedc 	xori	zero,zero,17275
  10da20:	0010dedc 	xori	zero,zero,17275
  10da24:	0010dedc 	xori	zero,zero,17275
  10da28:	0010dedc 	xori	zero,zero,17275
  10da2c:	0010dc44 	movi	zero,17265
  10da30:	0010dfa0 	cmpeqi	zero,zero,17278
  10da34:	0010dedc 	xori	zero,zero,17275
  10da38:	0010dedc 	xori	zero,zero,17275
  10da3c:	0010dedc 	xori	zero,zero,17275
  10da40:	0010df94 	movui	zero,17278
  10da44:	0010dfa0 	cmpeqi	zero,zero,17278
  10da48:	0010dedc 	xori	zero,zero,17275
  10da4c:	0010dedc 	xori	zero,zero,17275
  10da50:	0010df7c 	xorhi	zero,zero,17277
  10da54:	0010dedc 	xori	zero,zero,17275
  10da58:	0010df40 	call	10df4 <black_tx_descriptor+0x104f4>
  10da5c:	0010e054 	movui	zero,17281
  10da60:	0010e00c 	andi	zero,zero,17280
  10da64:	0010dc38 	rdprs	zero,zero,17264
  10da68:	0010dedc 	xori	zero,zero,17275
  10da6c:	0010dbd8 	cmpnei	zero,zero,17263
  10da70:	0010dedc 	xori	zero,zero,17275
  10da74:	0010db3c 	xorhi	zero,zero,17260
  10da78:	0010dedc 	xori	zero,zero,17275
  10da7c:	0010dedc 	xori	zero,zero,17275
  10da80:	0010daec 	andhi	zero,zero,17259
  10da84:	d9002517 	ldw	r4,148(sp)
  10da88:	d9402517 	ldw	r5,148(sp)
  10da8c:	21000017 	ldw	r4,0(r4)
  10da90:	28800104 	addi	r2,r5,4
  10da94:	d9002215 	stw	r4,136(sp)
  10da98:	2002f20e 	bge	r4,zero,10e664 <___svfiprintf_internal_r+0xea0>
  10da9c:	d8c02217 	ldw	r3,136(sp)
  10daa0:	d8802515 	stw	r2,148(sp)
  10daa4:	00c7c83a 	sub	r3,zero,r3
  10daa8:	d8c02215 	stw	r3,136(sp)
  10daac:	b5800114 	ori	r22,r22,4
  10dab0:	a0c00007 	ldb	r3,0(r20)
  10dab4:	003f9006 	br	10d8f8 <black_to_red_frame+0xfe10d8f8>
  10dab8:	00c00ac4 	movi	r3,43
  10dabc:	d8c02005 	stb	r3,128(sp)
  10dac0:	a0c00007 	ldb	r3,0(r20)
  10dac4:	003f8c06 	br	10d8f8 <black_to_red_frame+0xfe10d8f8>
  10dac8:	b5800054 	ori	r22,r22,1
  10dacc:	a0c00007 	ldb	r3,0(r20)
  10dad0:	003f8906 	br	10d8f8 <black_to_red_frame+0xfe10d8f8>
  10dad4:	d8802007 	ldb	r2,128(sp)
  10dad8:	1003001e 	bne	r2,zero,10e6dc <___svfiprintf_internal_r+0xf18>
  10dadc:	00c00804 	movi	r3,32
  10dae0:	d8c02005 	stb	r3,128(sp)
  10dae4:	a0c00007 	ldb	r3,0(r20)
  10dae8:	003f8306 	br	10d8f8 <black_to_red_frame+0xfe10d8f8>
  10daec:	b021883a 	mov	r16,r22
  10daf0:	dd802003 	ldbu	r22,128(sp)
  10daf4:	01000474 	movhi	r4,17
  10daf8:	211a3304 	addi	r4,r4,26828
  10dafc:	d9002a15 	stw	r4,168(sp)
  10db00:	dd801d85 	stb	r22,118(sp)
  10db04:	8080080c 	andi	r2,r16,32
  10db08:	b811883a 	mov	r8,r23
  10db0c:	1000d426 	beq	r2,zero,10de60 <___svfiprintf_internal_r+0x69c>
  10db10:	d9402517 	ldw	r5,148(sp)
  10db14:	2d800017 	ldw	r22,0(r5)
  10db18:	2dc00117 	ldw	r23,4(r5)
  10db1c:	29400204 	addi	r5,r5,8
  10db20:	d9402515 	stw	r5,148(sp)
  10db24:	8080004c 	andi	r2,r16,1
  10db28:	1002bd26 	beq	r2,zero,10e620 <___svfiprintf_internal_r+0xe5c>
  10db2c:	b5c8b03a 	or	r4,r22,r23
  10db30:	2002d41e 	bne	r4,zero,10e684 <___svfiprintf_internal_r+0xec0>
  10db34:	00800084 	movi	r2,2
  10db38:	00000c06 	br	10db6c <___svfiprintf_internal_r+0x3a8>
  10db3c:	b021883a 	mov	r16,r22
  10db40:	8080080c 	andi	r2,r16,32
  10db44:	b811883a 	mov	r8,r23
  10db48:	1000a426 	beq	r2,zero,10dddc <___svfiprintf_internal_r+0x618>
  10db4c:	d8802517 	ldw	r2,148(sp)
  10db50:	d8c02517 	ldw	r3,148(sp)
  10db54:	15800017 	ldw	r22,0(r2)
  10db58:	15c00117 	ldw	r23,4(r2)
  10db5c:	18c00204 	addi	r3,r3,8
  10db60:	00800044 	movi	r2,1
  10db64:	d8c02515 	stw	r3,148(sp)
  10db68:	b5c8b03a 	or	r4,r22,r23
  10db6c:	dd402117 	ldw	r21,132(sp)
  10db70:	d8001d85 	stb	zero,118(sp)
  10db74:	0039883a 	mov	fp,zero
  10db78:	d8c02117 	ldw	r3,132(sp)
  10db7c:	18000216 	blt	r3,zero,10db88 <___svfiprintf_internal_r+0x3c4>
  10db80:	00ffdfc4 	movi	r3,-129
  10db84:	80e0703a 	and	r16,r16,r3
  10db88:	10803fcc 	andi	r2,r2,255
  10db8c:	2001d71e 	bne	r4,zero,10e2ec <___svfiprintf_internal_r+0xb28>
  10db90:	d9002117 	ldw	r4,132(sp)
  10db94:	2001d51e 	bne	r4,zero,10e2ec <___svfiprintf_internal_r+0xb28>
  10db98:	1000021e 	bne	r2,zero,10dba4 <___svfiprintf_internal_r+0x3e0>
  10db9c:	8080004c 	andi	r2,r16,1
  10dba0:	1002b31e 	bne	r2,zero,10e670 <___svfiprintf_internal_r+0xeac>
  10dba4:	dc801a04 	addi	r18,sp,104
  10dba8:	d8c02117 	ldw	r3,132(sp)
  10dbac:	dd402015 	stw	r21,128(sp)
  10dbb0:	a8c0010e 	bge	r21,r3,10dbb8 <___svfiprintf_internal_r+0x3f4>
  10dbb4:	d8c02015 	stw	r3,128(sp)
  10dbb8:	e7003fcc 	andi	fp,fp,255
  10dbbc:	e700201c 	xori	fp,fp,128
  10dbc0:	e73fe004 	addi	fp,fp,-128
  10dbc4:	e0002d26 	beq	fp,zero,10dc7c <___svfiprintf_internal_r+0x4b8>
  10dbc8:	d8c02017 	ldw	r3,128(sp)
  10dbcc:	18c00044 	addi	r3,r3,1
  10dbd0:	d8c02015 	stw	r3,128(sp)
  10dbd4:	00002906 	br	10dc7c <___svfiprintf_internal_r+0x4b8>
  10dbd8:	d8c02517 	ldw	r3,148(sp)
  10dbdc:	d8001d85 	stb	zero,118(sp)
  10dbe0:	b811883a 	mov	r8,r23
  10dbe4:	1c800017 	ldw	r18,0(r3)
  10dbe8:	b021883a 	mov	r16,r22
  10dbec:	1dc00104 	addi	r23,r3,4
  10dbf0:	90032226 	beq	r18,zero,10e87c <___svfiprintf_internal_r+0x10b8>
  10dbf4:	d9002117 	ldw	r4,132(sp)
  10dbf8:	20030a16 	blt	r4,zero,10e824 <___svfiprintf_internal_r+0x1060>
  10dbfc:	d9802117 	ldw	r6,132(sp)
  10dc00:	9009883a 	mov	r4,r18
  10dc04:	000b883a 	mov	r5,zero
  10dc08:	da002d15 	stw	r8,180(sp)
  10dc0c:	010b8740 	call	10b874 <memchr>
  10dc10:	da002d17 	ldw	r8,180(sp)
  10dc14:	10033926 	beq	r2,zero,10e8fc <___svfiprintf_internal_r+0x1138>
  10dc18:	d9402117 	ldw	r5,132(sp)
  10dc1c:	14abc83a 	sub	r21,r2,r18
  10dc20:	2d40010e 	bge	r5,r21,10dc28 <___svfiprintf_internal_r+0x464>
  10dc24:	282b883a 	mov	r21,r5
  10dc28:	df001d83 	ldbu	fp,118(sp)
  10dc2c:	ddc02515 	stw	r23,148(sp)
  10dc30:	d8002115 	stw	zero,132(sp)
  10dc34:	003fdc06 	br	10dba8 <black_to_red_frame+0xfe10dba8>
  10dc38:	b5800814 	ori	r22,r22,32
  10dc3c:	a0c00007 	ldb	r3,0(r20)
  10dc40:	003f2d06 	br	10d8f8 <black_to_red_frame+0xfe10d8f8>
  10dc44:	d8c02517 	ldw	r3,148(sp)
  10dc48:	d9002517 	ldw	r4,148(sp)
  10dc4c:	b811883a 	mov	r8,r23
  10dc50:	18800017 	ldw	r2,0(r3)
  10dc54:	21000104 	addi	r4,r4,4
  10dc58:	00c00044 	movi	r3,1
  10dc5c:	b021883a 	mov	r16,r22
  10dc60:	d8c02015 	stw	r3,128(sp)
  10dc64:	d8001d85 	stb	zero,118(sp)
  10dc68:	d8801005 	stb	r2,64(sp)
  10dc6c:	d9002515 	stw	r4,148(sp)
  10dc70:	182b883a 	mov	r21,r3
  10dc74:	dc801004 	addi	r18,sp,64
  10dc78:	d8002115 	stw	zero,132(sp)
  10dc7c:	80c0008c 	andi	r3,r16,2
  10dc80:	d8c02315 	stw	r3,140(sp)
  10dc84:	18000326 	beq	r3,zero,10dc94 <___svfiprintf_internal_r+0x4d0>
  10dc88:	d8c02017 	ldw	r3,128(sp)
  10dc8c:	18c00084 	addi	r3,r3,2
  10dc90:	d8c02015 	stw	r3,128(sp)
  10dc94:	80c0210c 	andi	r3,r16,132
  10dc98:	d8c02615 	stw	r3,152(sp)
  10dc9c:	1800fd1e 	bne	r3,zero,10e094 <___svfiprintf_internal_r+0x8d0>
  10dca0:	d9002217 	ldw	r4,136(sp)
  10dca4:	d8c02017 	ldw	r3,128(sp)
  10dca8:	20edc83a 	sub	r22,r4,r3
  10dcac:	0580f90e 	bge	zero,r22,10e094 <___svfiprintf_internal_r+0x8d0>
  10dcb0:	02400404 	movi	r9,16
  10dcb4:	d8c01c17 	ldw	r3,112(sp)
  10dcb8:	d8801b17 	ldw	r2,108(sp)
  10dcbc:	4d83010e 	bge	r9,r22,10e8c4 <___svfiprintf_internal_r+0x1100>
  10dcc0:	01400474 	movhi	r5,17
  10dcc4:	295aa004 	addi	r5,r5,27264
  10dcc8:	dc802b15 	stw	r18,172(sp)
  10dccc:	d9402815 	stw	r5,160(sp)
  10dcd0:	b025883a 	mov	r18,r22
  10dcd4:	4839883a 	mov	fp,r9
  10dcd8:	a02d883a 	mov	r22,r20
  10dcdc:	05c001c4 	movi	r23,7
  10dce0:	8029883a 	mov	r20,r16
  10dce4:	dc002417 	ldw	r16,144(sp)
  10dce8:	00000306 	br	10dcf8 <___svfiprintf_internal_r+0x534>
  10dcec:	94bffc04 	addi	r18,r18,-16
  10dcf0:	42000204 	addi	r8,r8,8
  10dcf4:	e480130e 	bge	fp,r18,10dd44 <___svfiprintf_internal_r+0x580>
  10dcf8:	18c00404 	addi	r3,r3,16
  10dcfc:	10800044 	addi	r2,r2,1
  10dd00:	01000474 	movhi	r4,17
  10dd04:	211aa004 	addi	r4,r4,27264
  10dd08:	41000015 	stw	r4,0(r8)
  10dd0c:	47000115 	stw	fp,4(r8)
  10dd10:	d8c01c15 	stw	r3,112(sp)
  10dd14:	d8801b15 	stw	r2,108(sp)
  10dd18:	b8bff40e 	bge	r23,r2,10dcec <black_to_red_frame+0xfe10dcec>
  10dd1c:	8809883a 	mov	r4,r17
  10dd20:	800b883a 	mov	r5,r16
  10dd24:	d9801a04 	addi	r6,sp,104
  10dd28:	010d5f80 	call	10d5f8 <__ssprint_r>
  10dd2c:	10018a1e 	bne	r2,zero,10e358 <___svfiprintf_internal_r+0xb94>
  10dd30:	94bffc04 	addi	r18,r18,-16
  10dd34:	d8c01c17 	ldw	r3,112(sp)
  10dd38:	d8801b17 	ldw	r2,108(sp)
  10dd3c:	d811883a 	mov	r8,sp
  10dd40:	e4bfed16 	blt	fp,r18,10dcf8 <black_to_red_frame+0xfe10dcf8>
  10dd44:	a021883a 	mov	r16,r20
  10dd48:	b029883a 	mov	r20,r22
  10dd4c:	902d883a 	mov	r22,r18
  10dd50:	dc802b17 	ldw	r18,172(sp)
  10dd54:	d9402817 	ldw	r5,160(sp)
  10dd58:	b0c7883a 	add	r3,r22,r3
  10dd5c:	10800044 	addi	r2,r2,1
  10dd60:	41400015 	stw	r5,0(r8)
  10dd64:	45800115 	stw	r22,4(r8)
  10dd68:	d8c01c15 	stw	r3,112(sp)
  10dd6c:	d8801b15 	stw	r2,108(sp)
  10dd70:	010001c4 	movi	r4,7
  10dd74:	20822116 	blt	r4,r2,10e5fc <___svfiprintf_internal_r+0xe38>
  10dd78:	42000204 	addi	r8,r8,8
  10dd7c:	0000c706 	br	10e09c <___svfiprintf_internal_r+0x8d8>
  10dd80:	b021883a 	mov	r16,r22
  10dd84:	dd802003 	ldbu	r22,128(sp)
  10dd88:	84000414 	ori	r16,r16,16
  10dd8c:	8080080c 	andi	r2,r16,32
  10dd90:	dd801d85 	stb	r22,118(sp)
  10dd94:	b811883a 	mov	r8,r23
  10dd98:	10008726 	beq	r2,zero,10dfb8 <___svfiprintf_internal_r+0x7f4>
  10dd9c:	d9402517 	ldw	r5,148(sp)
  10dda0:	28800117 	ldw	r2,4(r5)
  10dda4:	2d800017 	ldw	r22,0(r5)
  10dda8:	29400204 	addi	r5,r5,8
  10ddac:	d9402515 	stw	r5,148(sp)
  10ddb0:	102f883a 	mov	r23,r2
  10ddb4:	10008b16 	blt	r2,zero,10dfe4 <___svfiprintf_internal_r+0x820>
  10ddb8:	df001d83 	ldbu	fp,118(sp)
  10ddbc:	dd402117 	ldw	r21,132(sp)
  10ddc0:	00800044 	movi	r2,1
  10ddc4:	b5c8b03a 	or	r4,r22,r23
  10ddc8:	003f6b06 	br	10db78 <black_to_red_frame+0xfe10db78>
  10ddcc:	b4000414 	ori	r16,r22,16
  10ddd0:	8080080c 	andi	r2,r16,32
  10ddd4:	b811883a 	mov	r8,r23
  10ddd8:	103f5c1e 	bne	r2,zero,10db4c <black_to_red_frame+0xfe10db4c>
  10dddc:	8080040c 	andi	r2,r16,16
  10dde0:	1002461e 	bne	r2,zero,10e6fc <___svfiprintf_internal_r+0xf38>
  10dde4:	8080100c 	andi	r2,r16,64
  10dde8:	10027226 	beq	r2,zero,10e7b4 <___svfiprintf_internal_r+0xff0>
  10ddec:	d9402517 	ldw	r5,148(sp)
  10ddf0:	002f883a 	mov	r23,zero
  10ddf4:	00800044 	movi	r2,1
  10ddf8:	2d80000b 	ldhu	r22,0(r5)
  10ddfc:	29400104 	addi	r5,r5,4
  10de00:	d9402515 	stw	r5,148(sp)
  10de04:	b009883a 	mov	r4,r22
  10de08:	003f5806 	br	10db6c <black_to_red_frame+0xfe10db6c>
  10de0c:	b4000414 	ori	r16,r22,16
  10de10:	8080080c 	andi	r2,r16,32
  10de14:	b811883a 	mov	r8,r23
  10de18:	10009226 	beq	r2,zero,10e064 <___svfiprintf_internal_r+0x8a0>
  10de1c:	d9402517 	ldw	r5,148(sp)
  10de20:	0005883a 	mov	r2,zero
  10de24:	2d800017 	ldw	r22,0(r5)
  10de28:	2dc00117 	ldw	r23,4(r5)
  10de2c:	29400204 	addi	r5,r5,8
  10de30:	d9402515 	stw	r5,148(sp)
  10de34:	b5c8b03a 	or	r4,r22,r23
  10de38:	003f4c06 	br	10db6c <black_to_red_frame+0xfe10db6c>
  10de3c:	b021883a 	mov	r16,r22
  10de40:	dd802003 	ldbu	r22,128(sp)
  10de44:	01400474 	movhi	r5,17
  10de48:	295a2e04 	addi	r5,r5,26808
  10de4c:	d9402a15 	stw	r5,168(sp)
  10de50:	dd801d85 	stb	r22,118(sp)
  10de54:	8080080c 	andi	r2,r16,32
  10de58:	b811883a 	mov	r8,r23
  10de5c:	103f2c1e 	bne	r2,zero,10db10 <black_to_red_frame+0xfe10db10>
  10de60:	8080040c 	andi	r2,r16,16
  10de64:	10021f1e 	bne	r2,zero,10e6e4 <___svfiprintf_internal_r+0xf20>
  10de68:	8080100c 	andi	r2,r16,64
  10de6c:	10024b26 	beq	r2,zero,10e79c <___svfiprintf_internal_r+0xfd8>
  10de70:	d9002517 	ldw	r4,148(sp)
  10de74:	002f883a 	mov	r23,zero
  10de78:	2580000b 	ldhu	r22,0(r4)
  10de7c:	21000104 	addi	r4,r4,4
  10de80:	d9002515 	stw	r4,148(sp)
  10de84:	003f2706 	br	10db24 <black_to_red_frame+0xfe10db24>
  10de88:	b5802014 	ori	r22,r22,128
  10de8c:	a0c00007 	ldb	r3,0(r20)
  10de90:	003e9906 	br	10d8f8 <black_to_red_frame+0xfe10d8f8>
  10de94:	a0c00007 	ldb	r3,0(r20)
  10de98:	a0800044 	addi	r2,r20,1
  10de9c:	1f029e26 	beq	r3,fp,10e918 <___svfiprintf_internal_r+0x1154>
  10dea0:	1c3ff404 	addi	r16,r3,-48
  10dea4:	1029883a 	mov	r20,r2
  10dea8:	0009883a 	mov	r4,zero
  10deac:	ac029136 	bltu	r21,r16,10e8f4 <___svfiprintf_internal_r+0x1130>
  10deb0:	01400284 	movi	r5,10
  10deb4:	0103f1c0 	call	103f1c <__mulsi3>
  10deb8:	a0c00007 	ldb	r3,0(r20)
  10debc:	8089883a 	add	r4,r16,r2
  10dec0:	a5000044 	addi	r20,r20,1
  10dec4:	1c3ff404 	addi	r16,r3,-48
  10dec8:	ac3ff92e 	bgeu	r21,r16,10deb0 <black_to_red_frame+0xfe10deb0>
  10decc:	20025e16 	blt	r4,zero,10e848 <___svfiprintf_internal_r+0x1084>
  10ded0:	d9002115 	stw	r4,132(sp)
  10ded4:	18bff804 	addi	r2,r3,-32
  10ded8:	90be8a2e 	bgeu	r18,r2,10d904 <black_to_red_frame+0xfe10d904>
  10dedc:	b021883a 	mov	r16,r22
  10dee0:	dd802003 	ldbu	r22,128(sp)
  10dee4:	b811883a 	mov	r8,r23
  10dee8:	dd801d85 	stb	r22,118(sp)
  10deec:	18011426 	beq	r3,zero,10e340 <___svfiprintf_internal_r+0xb7c>
  10def0:	00800044 	movi	r2,1
  10def4:	d8802015 	stw	r2,128(sp)
  10def8:	d8c01005 	stb	r3,64(sp)
  10defc:	d8001d85 	stb	zero,118(sp)
  10df00:	102b883a 	mov	r21,r2
  10df04:	dc801004 	addi	r18,sp,64
  10df08:	003f5b06 	br	10dc78 <black_to_red_frame+0xfe10dc78>
  10df0c:	d8002215 	stw	zero,136(sp)
  10df10:	1c3ff404 	addi	r16,r3,-48
  10df14:	d9002217 	ldw	r4,136(sp)
  10df18:	01400284 	movi	r5,10
  10df1c:	0103f1c0 	call	103f1c <__mulsi3>
  10df20:	a0c00007 	ldb	r3,0(r20)
  10df24:	1421883a 	add	r16,r2,r16
  10df28:	dc002215 	stw	r16,136(sp)
  10df2c:	a0800044 	addi	r2,r20,1
  10df30:	1c3ff404 	addi	r16,r3,-48
  10df34:	1029883a 	mov	r20,r2
  10df38:	ac3ff62e 	bgeu	r21,r16,10df14 <black_to_red_frame+0xfe10df14>
  10df3c:	003e6f06 	br	10d8fc <black_to_red_frame+0xfe10d8fc>
  10df40:	b021883a 	mov	r16,r22
  10df44:	dd802003 	ldbu	r22,128(sp)
  10df48:	8080080c 	andi	r2,r16,32
  10df4c:	b811883a 	mov	r8,r23
  10df50:	dd801d85 	stb	r22,118(sp)
  10df54:	1001d11e 	bne	r2,zero,10e69c <___svfiprintf_internal_r+0xed8>
  10df58:	8080040c 	andi	r2,r16,16
  10df5c:	10022526 	beq	r2,zero,10e7f4 <___svfiprintf_internal_r+0x1030>
  10df60:	d9402517 	ldw	r5,148(sp)
  10df64:	d8c02717 	ldw	r3,156(sp)
  10df68:	28800017 	ldw	r2,0(r5)
  10df6c:	29400104 	addi	r5,r5,4
  10df70:	d9402515 	stw	r5,148(sp)
  10df74:	10c00015 	stw	r3,0(r2)
  10df78:	003e3506 	br	10d850 <black_to_red_frame+0xfe10d850>
  10df7c:	a0c00007 	ldb	r3,0(r20)
  10df80:	01401b04 	movi	r5,108
  10df84:	a005883a 	mov	r2,r20
  10df88:	1941ec26 	beq	r3,r5,10e73c <___svfiprintf_internal_r+0xf78>
  10df8c:	b5800414 	ori	r22,r22,16
  10df90:	003e5906 	br	10d8f8 <black_to_red_frame+0xfe10d8f8>
  10df94:	b5801014 	ori	r22,r22,64
  10df98:	a0c00007 	ldb	r3,0(r20)
  10df9c:	003e5606 	br	10d8f8 <black_to_red_frame+0xfe10d8f8>
  10dfa0:	b021883a 	mov	r16,r22
  10dfa4:	dd802003 	ldbu	r22,128(sp)
  10dfa8:	8080080c 	andi	r2,r16,32
  10dfac:	b811883a 	mov	r8,r23
  10dfb0:	dd801d85 	stb	r22,118(sp)
  10dfb4:	103f791e 	bne	r2,zero,10dd9c <black_to_red_frame+0xfe10dd9c>
  10dfb8:	8080040c 	andi	r2,r16,16
  10dfbc:	1001c01e 	bne	r2,zero,10e6c0 <___svfiprintf_internal_r+0xefc>
  10dfc0:	8080100c 	andi	r2,r16,64
  10dfc4:	1001ee26 	beq	r2,zero,10e780 <___svfiprintf_internal_r+0xfbc>
  10dfc8:	d8c02517 	ldw	r3,148(sp)
  10dfcc:	1d80000f 	ldh	r22,0(r3)
  10dfd0:	18c00104 	addi	r3,r3,4
  10dfd4:	d8c02515 	stw	r3,148(sp)
  10dfd8:	b02fd7fa 	srai	r23,r22,31
  10dfdc:	b805883a 	mov	r2,r23
  10dfe0:	103f750e 	bge	r2,zero,10ddb8 <black_to_red_frame+0xfe10ddb8>
  10dfe4:	05adc83a 	sub	r22,zero,r22
  10dfe8:	b004c03a 	cmpne	r2,r22,zero
  10dfec:	05efc83a 	sub	r23,zero,r23
  10dff0:	b8afc83a 	sub	r23,r23,r2
  10dff4:	07000b44 	movi	fp,45
  10dff8:	df001d85 	stb	fp,118(sp)
  10dffc:	dd402117 	ldw	r21,132(sp)
  10e000:	00800044 	movi	r2,1
  10e004:	b5c8b03a 	or	r4,r22,r23
  10e008:	003edb06 	br	10db78 <black_to_red_frame+0xfe10db78>
  10e00c:	d9402517 	ldw	r5,148(sp)
  10e010:	b021883a 	mov	r16,r22
  10e014:	00800c04 	movi	r2,48
  10e018:	2d800017 	ldw	r22,0(r5)
  10e01c:	d8801d05 	stb	r2,116(sp)
  10e020:	00801e04 	movi	r2,120
  10e024:	d8801d45 	stb	r2,117(sp)
  10e028:	29400104 	addi	r5,r5,4
  10e02c:	00800474 	movhi	r2,17
  10e030:	109a3304 	addi	r2,r2,26828
  10e034:	b811883a 	mov	r8,r23
  10e038:	d8802a15 	stw	r2,168(sp)
  10e03c:	002f883a 	mov	r23,zero
  10e040:	84000094 	ori	r16,r16,2
  10e044:	d9402515 	stw	r5,148(sp)
  10e048:	00800084 	movi	r2,2
  10e04c:	b009883a 	mov	r4,r22
  10e050:	003ec606 	br	10db6c <black_to_red_frame+0xfe10db6c>
  10e054:	b021883a 	mov	r16,r22
  10e058:	8080080c 	andi	r2,r16,32
  10e05c:	b811883a 	mov	r8,r23
  10e060:	103f6e1e 	bne	r2,zero,10de1c <black_to_red_frame+0xfe10de1c>
  10e064:	8080040c 	andi	r2,r16,16
  10e068:	1001ac1e 	bne	r2,zero,10e71c <___svfiprintf_internal_r+0xf58>
  10e06c:	8080100c 	andi	r2,r16,64
  10e070:	1001d826 	beq	r2,zero,10e7d4 <___svfiprintf_internal_r+0x1010>
  10e074:	d8c02517 	ldw	r3,148(sp)
  10e078:	002f883a 	mov	r23,zero
  10e07c:	0005883a 	mov	r2,zero
  10e080:	1d80000b 	ldhu	r22,0(r3)
  10e084:	18c00104 	addi	r3,r3,4
  10e088:	d8c02515 	stw	r3,148(sp)
  10e08c:	b009883a 	mov	r4,r22
  10e090:	003eb606 	br	10db6c <black_to_red_frame+0xfe10db6c>
  10e094:	d8c01c17 	ldw	r3,112(sp)
  10e098:	d8801b17 	ldw	r2,108(sp)
  10e09c:	d9001d87 	ldb	r4,118(sp)
  10e0a0:	20000b26 	beq	r4,zero,10e0d0 <___svfiprintf_internal_r+0x90c>
  10e0a4:	d9001d84 	addi	r4,sp,118
  10e0a8:	18c00044 	addi	r3,r3,1
  10e0ac:	10800044 	addi	r2,r2,1
  10e0b0:	41000015 	stw	r4,0(r8)
  10e0b4:	01000044 	movi	r4,1
  10e0b8:	41000115 	stw	r4,4(r8)
  10e0bc:	d8c01c15 	stw	r3,112(sp)
  10e0c0:	d8801b15 	stw	r2,108(sp)
  10e0c4:	010001c4 	movi	r4,7
  10e0c8:	20813a16 	blt	r4,r2,10e5b4 <___svfiprintf_internal_r+0xdf0>
  10e0cc:	42000204 	addi	r8,r8,8
  10e0d0:	d9002317 	ldw	r4,140(sp)
  10e0d4:	20000b26 	beq	r4,zero,10e104 <___svfiprintf_internal_r+0x940>
  10e0d8:	d9001d04 	addi	r4,sp,116
  10e0dc:	18c00084 	addi	r3,r3,2
  10e0e0:	10800044 	addi	r2,r2,1
  10e0e4:	41000015 	stw	r4,0(r8)
  10e0e8:	01000084 	movi	r4,2
  10e0ec:	41000115 	stw	r4,4(r8)
  10e0f0:	d8c01c15 	stw	r3,112(sp)
  10e0f4:	d8801b15 	stw	r2,108(sp)
  10e0f8:	010001c4 	movi	r4,7
  10e0fc:	20813616 	blt	r4,r2,10e5d8 <___svfiprintf_internal_r+0xe14>
  10e100:	42000204 	addi	r8,r8,8
  10e104:	d9402617 	ldw	r5,152(sp)
  10e108:	01002004 	movi	r4,128
  10e10c:	2900a326 	beq	r5,r4,10e39c <___svfiprintf_internal_r+0xbd8>
  10e110:	d9402117 	ldw	r5,132(sp)
  10e114:	2d79c83a 	sub	fp,r5,r21
  10e118:	07002f0e 	bge	zero,fp,10e1d8 <___svfiprintf_internal_r+0xa14>
  10e11c:	01c00404 	movi	r7,16
  10e120:	3f01930e 	bge	r7,fp,10e770 <___svfiprintf_internal_r+0xfac>
  10e124:	01400474 	movhi	r5,17
  10e128:	295a9c04 	addi	r5,r5,27248
  10e12c:	dc802115 	stw	r18,132(sp)
  10e130:	d9402315 	stw	r5,140(sp)
  10e134:	e025883a 	mov	r18,fp
  10e138:	382d883a 	mov	r22,r7
  10e13c:	a039883a 	mov	fp,r20
  10e140:	05c001c4 	movi	r23,7
  10e144:	8029883a 	mov	r20,r16
  10e148:	dc002417 	ldw	r16,144(sp)
  10e14c:	00000306 	br	10e15c <___svfiprintf_internal_r+0x998>
  10e150:	94bffc04 	addi	r18,r18,-16
  10e154:	42000204 	addi	r8,r8,8
  10e158:	b480110e 	bge	r22,r18,10e1a0 <___svfiprintf_internal_r+0x9dc>
  10e15c:	18c00404 	addi	r3,r3,16
  10e160:	10800044 	addi	r2,r2,1
  10e164:	44c00015 	stw	r19,0(r8)
  10e168:	45800115 	stw	r22,4(r8)
  10e16c:	d8c01c15 	stw	r3,112(sp)
  10e170:	d8801b15 	stw	r2,108(sp)
  10e174:	b8bff60e 	bge	r23,r2,10e150 <black_to_red_frame+0xfe10e150>
  10e178:	8809883a 	mov	r4,r17
  10e17c:	800b883a 	mov	r5,r16
  10e180:	d9801a04 	addi	r6,sp,104
  10e184:	010d5f80 	call	10d5f8 <__ssprint_r>
  10e188:	1000731e 	bne	r2,zero,10e358 <___svfiprintf_internal_r+0xb94>
  10e18c:	94bffc04 	addi	r18,r18,-16
  10e190:	d8c01c17 	ldw	r3,112(sp)
  10e194:	d8801b17 	ldw	r2,108(sp)
  10e198:	d811883a 	mov	r8,sp
  10e19c:	b4bfef16 	blt	r22,r18,10e15c <black_to_red_frame+0xfe10e15c>
  10e1a0:	a021883a 	mov	r16,r20
  10e1a4:	e029883a 	mov	r20,fp
  10e1a8:	9039883a 	mov	fp,r18
  10e1ac:	dc802117 	ldw	r18,132(sp)
  10e1b0:	d9002317 	ldw	r4,140(sp)
  10e1b4:	1f07883a 	add	r3,r3,fp
  10e1b8:	10800044 	addi	r2,r2,1
  10e1bc:	41000015 	stw	r4,0(r8)
  10e1c0:	47000115 	stw	fp,4(r8)
  10e1c4:	d8c01c15 	stw	r3,112(sp)
  10e1c8:	d8801b15 	stw	r2,108(sp)
  10e1cc:	010001c4 	movi	r4,7
  10e1d0:	2080d616 	blt	r4,r2,10e52c <___svfiprintf_internal_r+0xd68>
  10e1d4:	42000204 	addi	r8,r8,8
  10e1d8:	a8c7883a 	add	r3,r21,r3
  10e1dc:	10800044 	addi	r2,r2,1
  10e1e0:	44800015 	stw	r18,0(r8)
  10e1e4:	45400115 	stw	r21,4(r8)
  10e1e8:	d8c01c15 	stw	r3,112(sp)
  10e1ec:	d8801b15 	stw	r2,108(sp)
  10e1f0:	010001c4 	movi	r4,7
  10e1f4:	20809d16 	blt	r4,r2,10e46c <___svfiprintf_internal_r+0xca8>
  10e1f8:	42000204 	addi	r8,r8,8
  10e1fc:	8400010c 	andi	r16,r16,4
  10e200:	80002c26 	beq	r16,zero,10e2b4 <___svfiprintf_internal_r+0xaf0>
  10e204:	d9402217 	ldw	r5,136(sp)
  10e208:	d8802017 	ldw	r2,128(sp)
  10e20c:	28a1c83a 	sub	r16,r5,r2
  10e210:	0400280e 	bge	zero,r16,10e2b4 <___svfiprintf_internal_r+0xaf0>
  10e214:	04800404 	movi	r18,16
  10e218:	d8801b17 	ldw	r2,108(sp)
  10e21c:	9401ad0e 	bge	r18,r16,10e8d4 <___svfiprintf_internal_r+0x1110>
  10e220:	01400474 	movhi	r5,17
  10e224:	295aa004 	addi	r5,r5,27264
  10e228:	d9402815 	stw	r5,160(sp)
  10e22c:	054001c4 	movi	r21,7
  10e230:	dd802417 	ldw	r22,144(sp)
  10e234:	00000306 	br	10e244 <___svfiprintf_internal_r+0xa80>
  10e238:	843ffc04 	addi	r16,r16,-16
  10e23c:	42000204 	addi	r8,r8,8
  10e240:	9400130e 	bge	r18,r16,10e290 <___svfiprintf_internal_r+0xacc>
  10e244:	18c00404 	addi	r3,r3,16
  10e248:	10800044 	addi	r2,r2,1
  10e24c:	01000474 	movhi	r4,17
  10e250:	211aa004 	addi	r4,r4,27264
  10e254:	41000015 	stw	r4,0(r8)
  10e258:	44800115 	stw	r18,4(r8)
  10e25c:	d8c01c15 	stw	r3,112(sp)
  10e260:	d8801b15 	stw	r2,108(sp)
  10e264:	a8bff40e 	bge	r21,r2,10e238 <black_to_red_frame+0xfe10e238>
  10e268:	8809883a 	mov	r4,r17
  10e26c:	b00b883a 	mov	r5,r22
  10e270:	d9801a04 	addi	r6,sp,104
  10e274:	010d5f80 	call	10d5f8 <__ssprint_r>
  10e278:	1000371e 	bne	r2,zero,10e358 <___svfiprintf_internal_r+0xb94>
  10e27c:	843ffc04 	addi	r16,r16,-16
  10e280:	d8c01c17 	ldw	r3,112(sp)
  10e284:	d8801b17 	ldw	r2,108(sp)
  10e288:	d811883a 	mov	r8,sp
  10e28c:	943fed16 	blt	r18,r16,10e244 <black_to_red_frame+0xfe10e244>
  10e290:	d9402817 	ldw	r5,160(sp)
  10e294:	1c07883a 	add	r3,r3,r16
  10e298:	10800044 	addi	r2,r2,1
  10e29c:	41400015 	stw	r5,0(r8)
  10e2a0:	44000115 	stw	r16,4(r8)
  10e2a4:	d8c01c15 	stw	r3,112(sp)
  10e2a8:	d8801b15 	stw	r2,108(sp)
  10e2ac:	010001c4 	movi	r4,7
  10e2b0:	2080e516 	blt	r4,r2,10e648 <___svfiprintf_internal_r+0xe84>
  10e2b4:	dd802017 	ldw	r22,128(sp)
  10e2b8:	d8802217 	ldw	r2,136(sp)
  10e2bc:	b080010e 	bge	r22,r2,10e2c4 <___svfiprintf_internal_r+0xb00>
  10e2c0:	102d883a 	mov	r22,r2
  10e2c4:	d9002717 	ldw	r4,156(sp)
  10e2c8:	2589883a 	add	r4,r4,r22
  10e2cc:	d9002715 	stw	r4,156(sp)
  10e2d0:	18006e1e 	bne	r3,zero,10e48c <___svfiprintf_internal_r+0xcc8>
  10e2d4:	a0800007 	ldb	r2,0(r20)
  10e2d8:	d8001b15 	stw	zero,108(sp)
  10e2dc:	d811883a 	mov	r8,sp
  10e2e0:	103d5d1e 	bne	r2,zero,10d858 <black_to_red_frame+0xfe10d858>
  10e2e4:	a025883a 	mov	r18,r20
  10e2e8:	003d7306 	br	10d8b8 <black_to_red_frame+0xfe10d8b8>
  10e2ec:	00c00044 	movi	r3,1
  10e2f0:	10c09726 	beq	r2,r3,10e550 <___svfiprintf_internal_r+0xd8c>
  10e2f4:	00c00084 	movi	r3,2
  10e2f8:	10c06a1e 	bne	r2,r3,10e4a4 <___svfiprintf_internal_r+0xce0>
  10e2fc:	d9402a17 	ldw	r5,168(sp)
  10e300:	d88019c4 	addi	r2,sp,103
  10e304:	b0c003cc 	andi	r3,r22,15
  10e308:	b808973a 	slli	r4,r23,28
  10e30c:	28c7883a 	add	r3,r5,r3
  10e310:	b02cd13a 	srli	r22,r22,4
  10e314:	18c00003 	ldbu	r3,0(r3)
  10e318:	b82ed13a 	srli	r23,r23,4
  10e31c:	25acb03a 	or	r22,r4,r22
  10e320:	10c00005 	stb	r3,0(r2)
  10e324:	b5c6b03a 	or	r3,r22,r23
  10e328:	1025883a 	mov	r18,r2
  10e32c:	10bfffc4 	addi	r2,r2,-1
  10e330:	183ff41e 	bne	r3,zero,10e304 <black_to_red_frame+0xfe10e304>
  10e334:	d9401e17 	ldw	r5,120(sp)
  10e338:	2cabc83a 	sub	r21,r5,r18
  10e33c:	003e1a06 	br	10dba8 <black_to_red_frame+0xfe10dba8>
  10e340:	d8801c17 	ldw	r2,112(sp)
  10e344:	10000426 	beq	r2,zero,10e358 <___svfiprintf_internal_r+0xb94>
  10e348:	d9002917 	ldw	r4,164(sp)
  10e34c:	d9402417 	ldw	r5,144(sp)
  10e350:	d9801a04 	addi	r6,sp,104
  10e354:	010d5f80 	call	10d5f8 <__ssprint_r>
  10e358:	d9402417 	ldw	r5,144(sp)
  10e35c:	2880030b 	ldhu	r2,12(r5)
  10e360:	1080100c 	andi	r2,r2,64
  10e364:	10006826 	beq	r2,zero,10e508 <___svfiprintf_internal_r+0xd44>
  10e368:	00bfffc4 	movi	r2,-1
  10e36c:	dfc03717 	ldw	ra,220(sp)
  10e370:	df003617 	ldw	fp,216(sp)
  10e374:	ddc03517 	ldw	r23,212(sp)
  10e378:	dd803417 	ldw	r22,208(sp)
  10e37c:	dd403317 	ldw	r21,204(sp)
  10e380:	dd003217 	ldw	r20,200(sp)
  10e384:	dcc03117 	ldw	r19,196(sp)
  10e388:	dc803017 	ldw	r18,192(sp)
  10e38c:	dc402f17 	ldw	r17,188(sp)
  10e390:	dc002e17 	ldw	r16,184(sp)
  10e394:	dec03804 	addi	sp,sp,224
  10e398:	f800283a 	ret
  10e39c:	d9002217 	ldw	r4,136(sp)
  10e3a0:	d9402017 	ldw	r5,128(sp)
  10e3a4:	2179c83a 	sub	fp,r4,r5
  10e3a8:	073f590e 	bge	zero,fp,10e110 <black_to_red_frame+0xfe10e110>
  10e3ac:	01c00404 	movi	r7,16
  10e3b0:	3f014c0e 	bge	r7,fp,10e8e4 <___svfiprintf_internal_r+0x1120>
  10e3b4:	01400474 	movhi	r5,17
  10e3b8:	295a9c04 	addi	r5,r5,27248
  10e3bc:	dc802615 	stw	r18,152(sp)
  10e3c0:	d9402315 	stw	r5,140(sp)
  10e3c4:	e025883a 	mov	r18,fp
  10e3c8:	382f883a 	mov	r23,r7
  10e3cc:	a039883a 	mov	fp,r20
  10e3d0:	058001c4 	movi	r22,7
  10e3d4:	8029883a 	mov	r20,r16
  10e3d8:	dc002417 	ldw	r16,144(sp)
  10e3dc:	00000306 	br	10e3ec <___svfiprintf_internal_r+0xc28>
  10e3e0:	94bffc04 	addi	r18,r18,-16
  10e3e4:	42000204 	addi	r8,r8,8
  10e3e8:	bc80110e 	bge	r23,r18,10e430 <___svfiprintf_internal_r+0xc6c>
  10e3ec:	18c00404 	addi	r3,r3,16
  10e3f0:	10800044 	addi	r2,r2,1
  10e3f4:	44c00015 	stw	r19,0(r8)
  10e3f8:	45c00115 	stw	r23,4(r8)
  10e3fc:	d8c01c15 	stw	r3,112(sp)
  10e400:	d8801b15 	stw	r2,108(sp)
  10e404:	b0bff60e 	bge	r22,r2,10e3e0 <black_to_red_frame+0xfe10e3e0>
  10e408:	8809883a 	mov	r4,r17
  10e40c:	800b883a 	mov	r5,r16
  10e410:	d9801a04 	addi	r6,sp,104
  10e414:	010d5f80 	call	10d5f8 <__ssprint_r>
  10e418:	103fcf1e 	bne	r2,zero,10e358 <black_to_red_frame+0xfe10e358>
  10e41c:	94bffc04 	addi	r18,r18,-16
  10e420:	d8c01c17 	ldw	r3,112(sp)
  10e424:	d8801b17 	ldw	r2,108(sp)
  10e428:	d811883a 	mov	r8,sp
  10e42c:	bcbfef16 	blt	r23,r18,10e3ec <black_to_red_frame+0xfe10e3ec>
  10e430:	a021883a 	mov	r16,r20
  10e434:	e029883a 	mov	r20,fp
  10e438:	9039883a 	mov	fp,r18
  10e43c:	dc802617 	ldw	r18,152(sp)
  10e440:	d9002317 	ldw	r4,140(sp)
  10e444:	1f07883a 	add	r3,r3,fp
  10e448:	10800044 	addi	r2,r2,1
  10e44c:	41000015 	stw	r4,0(r8)
  10e450:	47000115 	stw	fp,4(r8)
  10e454:	d8c01c15 	stw	r3,112(sp)
  10e458:	d8801b15 	stw	r2,108(sp)
  10e45c:	010001c4 	movi	r4,7
  10e460:	2080ba16 	blt	r4,r2,10e74c <___svfiprintf_internal_r+0xf88>
  10e464:	42000204 	addi	r8,r8,8
  10e468:	003f2906 	br	10e110 <black_to_red_frame+0xfe10e110>
  10e46c:	d9402417 	ldw	r5,144(sp)
  10e470:	8809883a 	mov	r4,r17
  10e474:	d9801a04 	addi	r6,sp,104
  10e478:	010d5f80 	call	10d5f8 <__ssprint_r>
  10e47c:	103fb61e 	bne	r2,zero,10e358 <black_to_red_frame+0xfe10e358>
  10e480:	d8c01c17 	ldw	r3,112(sp)
  10e484:	d811883a 	mov	r8,sp
  10e488:	003f5c06 	br	10e1fc <black_to_red_frame+0xfe10e1fc>
  10e48c:	d9402417 	ldw	r5,144(sp)
  10e490:	8809883a 	mov	r4,r17
  10e494:	d9801a04 	addi	r6,sp,104
  10e498:	010d5f80 	call	10d5f8 <__ssprint_r>
  10e49c:	103f8d26 	beq	r2,zero,10e2d4 <black_to_red_frame+0xfe10e2d4>
  10e4a0:	003fad06 	br	10e358 <black_to_red_frame+0xfe10e358>
  10e4a4:	d8c019c4 	addi	r3,sp,103
  10e4a8:	b008d0fa 	srli	r4,r22,3
  10e4ac:	b80a977a 	slli	r5,r23,29
  10e4b0:	b82ed0fa 	srli	r23,r23,3
  10e4b4:	b58001cc 	andi	r22,r22,7
  10e4b8:	b0800c04 	addi	r2,r22,48
  10e4bc:	292cb03a 	or	r22,r5,r4
  10e4c0:	18800005 	stb	r2,0(r3)
  10e4c4:	b5c8b03a 	or	r4,r22,r23
  10e4c8:	1825883a 	mov	r18,r3
  10e4cc:	18ffffc4 	addi	r3,r3,-1
  10e4d0:	203ff51e 	bne	r4,zero,10e4a8 <black_to_red_frame+0xfe10e4a8>
  10e4d4:	8100004c 	andi	r4,r16,1
  10e4d8:	900b883a 	mov	r5,r18
  10e4dc:	203f9526 	beq	r4,zero,10e334 <black_to_red_frame+0xfe10e334>
  10e4e0:	10803fcc 	andi	r2,r2,255
  10e4e4:	1080201c 	xori	r2,r2,128
  10e4e8:	10bfe004 	addi	r2,r2,-128
  10e4ec:	01000c04 	movi	r4,48
  10e4f0:	1100c926 	beq	r2,r4,10e818 <___svfiprintf_internal_r+0x1054>
  10e4f4:	1825883a 	mov	r18,r3
  10e4f8:	d8c01e17 	ldw	r3,120(sp)
  10e4fc:	293fffc5 	stb	r4,-1(r5)
  10e500:	1cabc83a 	sub	r21,r3,r18
  10e504:	003da806 	br	10dba8 <black_to_red_frame+0xfe10dba8>
  10e508:	d8802717 	ldw	r2,156(sp)
  10e50c:	003f9706 	br	10e36c <black_to_red_frame+0xfe10e36c>
  10e510:	d9402417 	ldw	r5,144(sp)
  10e514:	8809883a 	mov	r4,r17
  10e518:	d9801a04 	addi	r6,sp,104
  10e51c:	010d5f80 	call	10d5f8 <__ssprint_r>
  10e520:	103f8d1e 	bne	r2,zero,10e358 <black_to_red_frame+0xfe10e358>
  10e524:	d811883a 	mov	r8,sp
  10e528:	003ce006 	br	10d8ac <black_to_red_frame+0xfe10d8ac>
  10e52c:	d9402417 	ldw	r5,144(sp)
  10e530:	8809883a 	mov	r4,r17
  10e534:	d9801a04 	addi	r6,sp,104
  10e538:	010d5f80 	call	10d5f8 <__ssprint_r>
  10e53c:	103f861e 	bne	r2,zero,10e358 <black_to_red_frame+0xfe10e358>
  10e540:	d8c01c17 	ldw	r3,112(sp)
  10e544:	d8801b17 	ldw	r2,108(sp)
  10e548:	d811883a 	mov	r8,sp
  10e54c:	003f2206 	br	10e1d8 <black_to_red_frame+0xfe10e1d8>
  10e550:	b8003626 	beq	r23,zero,10e62c <___svfiprintf_internal_r+0xe68>
  10e554:	d88019c4 	addi	r2,sp,103
  10e558:	402b883a 	mov	r21,r8
  10e55c:	b009883a 	mov	r4,r22
  10e560:	b80b883a 	mov	r5,r23
  10e564:	01800284 	movi	r6,10
  10e568:	000f883a 	mov	r7,zero
  10e56c:	1025883a 	mov	r18,r2
  10e570:	0110f7c0 	call	110f7c <__umoddi3>
  10e574:	10800c04 	addi	r2,r2,48
  10e578:	b009883a 	mov	r4,r22
  10e57c:	b80b883a 	mov	r5,r23
  10e580:	90800005 	stb	r2,0(r18)
  10e584:	01800284 	movi	r6,10
  10e588:	000f883a 	mov	r7,zero
  10e58c:	01109280 	call	110928 <__udivdi3>
  10e590:	182f883a 	mov	r23,r3
  10e594:	10c6b03a 	or	r3,r2,r3
  10e598:	102d883a 	mov	r22,r2
  10e59c:	90bfffc4 	addi	r2,r18,-1
  10e5a0:	183fee1e 	bne	r3,zero,10e55c <black_to_red_frame+0xfe10e55c>
  10e5a4:	d9001e17 	ldw	r4,120(sp)
  10e5a8:	a811883a 	mov	r8,r21
  10e5ac:	24abc83a 	sub	r21,r4,r18
  10e5b0:	003d7d06 	br	10dba8 <black_to_red_frame+0xfe10dba8>
  10e5b4:	d9402417 	ldw	r5,144(sp)
  10e5b8:	8809883a 	mov	r4,r17
  10e5bc:	d9801a04 	addi	r6,sp,104
  10e5c0:	010d5f80 	call	10d5f8 <__ssprint_r>
  10e5c4:	103f641e 	bne	r2,zero,10e358 <black_to_red_frame+0xfe10e358>
  10e5c8:	d8c01c17 	ldw	r3,112(sp)
  10e5cc:	d8801b17 	ldw	r2,108(sp)
  10e5d0:	d811883a 	mov	r8,sp
  10e5d4:	003ebe06 	br	10e0d0 <black_to_red_frame+0xfe10e0d0>
  10e5d8:	d9402417 	ldw	r5,144(sp)
  10e5dc:	8809883a 	mov	r4,r17
  10e5e0:	d9801a04 	addi	r6,sp,104
  10e5e4:	010d5f80 	call	10d5f8 <__ssprint_r>
  10e5e8:	103f5b1e 	bne	r2,zero,10e358 <black_to_red_frame+0xfe10e358>
  10e5ec:	d8c01c17 	ldw	r3,112(sp)
  10e5f0:	d8801b17 	ldw	r2,108(sp)
  10e5f4:	d811883a 	mov	r8,sp
  10e5f8:	003ec206 	br	10e104 <black_to_red_frame+0xfe10e104>
  10e5fc:	d9402417 	ldw	r5,144(sp)
  10e600:	8809883a 	mov	r4,r17
  10e604:	d9801a04 	addi	r6,sp,104
  10e608:	010d5f80 	call	10d5f8 <__ssprint_r>
  10e60c:	103f521e 	bne	r2,zero,10e358 <black_to_red_frame+0xfe10e358>
  10e610:	d8c01c17 	ldw	r3,112(sp)
  10e614:	d8801b17 	ldw	r2,108(sp)
  10e618:	d811883a 	mov	r8,sp
  10e61c:	003e9f06 	br	10e09c <black_to_red_frame+0xfe10e09c>
  10e620:	00800084 	movi	r2,2
  10e624:	b5c8b03a 	or	r4,r22,r23
  10e628:	003d5006 	br	10db6c <black_to_red_frame+0xfe10db6c>
  10e62c:	00800244 	movi	r2,9
  10e630:	15bfc836 	bltu	r2,r22,10e554 <black_to_red_frame+0xfe10e554>
  10e634:	b5800c04 	addi	r22,r22,48
  10e638:	dd8019c5 	stb	r22,103(sp)
  10e63c:	dd402c17 	ldw	r21,176(sp)
  10e640:	dc8019c4 	addi	r18,sp,103
  10e644:	003d5806 	br	10dba8 <black_to_red_frame+0xfe10dba8>
  10e648:	d9402417 	ldw	r5,144(sp)
  10e64c:	8809883a 	mov	r4,r17
  10e650:	d9801a04 	addi	r6,sp,104
  10e654:	010d5f80 	call	10d5f8 <__ssprint_r>
  10e658:	103f3f1e 	bne	r2,zero,10e358 <black_to_red_frame+0xfe10e358>
  10e65c:	d8c01c17 	ldw	r3,112(sp)
  10e660:	003f1406 	br	10e2b4 <black_to_red_frame+0xfe10e2b4>
  10e664:	d8802515 	stw	r2,148(sp)
  10e668:	a0c00007 	ldb	r3,0(r20)
  10e66c:	003ca206 	br	10d8f8 <black_to_red_frame+0xfe10d8f8>
  10e670:	00800c04 	movi	r2,48
  10e674:	d88019c5 	stb	r2,103(sp)
  10e678:	dd402c17 	ldw	r21,176(sp)
  10e67c:	dc8019c4 	addi	r18,sp,103
  10e680:	003d4906 	br	10dba8 <black_to_red_frame+0xfe10dba8>
  10e684:	00800c04 	movi	r2,48
  10e688:	d8801d05 	stb	r2,116(sp)
  10e68c:	d8c01d45 	stb	r3,117(sp)
  10e690:	84000094 	ori	r16,r16,2
  10e694:	00800084 	movi	r2,2
  10e698:	003d3406 	br	10db6c <black_to_red_frame+0xfe10db6c>
  10e69c:	d9402517 	ldw	r5,148(sp)
  10e6a0:	d9002717 	ldw	r4,156(sp)
  10e6a4:	28800017 	ldw	r2,0(r5)
  10e6a8:	2007d7fa 	srai	r3,r4,31
  10e6ac:	29400104 	addi	r5,r5,4
  10e6b0:	d9402515 	stw	r5,148(sp)
  10e6b4:	11000015 	stw	r4,0(r2)
  10e6b8:	10c00115 	stw	r3,4(r2)
  10e6bc:	003c6406 	br	10d850 <black_to_red_frame+0xfe10d850>
  10e6c0:	d8802517 	ldw	r2,148(sp)
  10e6c4:	15800017 	ldw	r22,0(r2)
  10e6c8:	10800104 	addi	r2,r2,4
  10e6cc:	d8802515 	stw	r2,148(sp)
  10e6d0:	b02fd7fa 	srai	r23,r22,31
  10e6d4:	b805883a 	mov	r2,r23
  10e6d8:	003db606 	br	10ddb4 <black_to_red_frame+0xfe10ddb4>
  10e6dc:	a0c00007 	ldb	r3,0(r20)
  10e6e0:	003c8506 	br	10d8f8 <black_to_red_frame+0xfe10d8f8>
  10e6e4:	d8802517 	ldw	r2,148(sp)
  10e6e8:	002f883a 	mov	r23,zero
  10e6ec:	15800017 	ldw	r22,0(r2)
  10e6f0:	10800104 	addi	r2,r2,4
  10e6f4:	d8802515 	stw	r2,148(sp)
  10e6f8:	003d0a06 	br	10db24 <black_to_red_frame+0xfe10db24>
  10e6fc:	d9002517 	ldw	r4,148(sp)
  10e700:	002f883a 	mov	r23,zero
  10e704:	00800044 	movi	r2,1
  10e708:	25800017 	ldw	r22,0(r4)
  10e70c:	21000104 	addi	r4,r4,4
  10e710:	d9002515 	stw	r4,148(sp)
  10e714:	b009883a 	mov	r4,r22
  10e718:	003d1406 	br	10db6c <black_to_red_frame+0xfe10db6c>
  10e71c:	d8802517 	ldw	r2,148(sp)
  10e720:	002f883a 	mov	r23,zero
  10e724:	15800017 	ldw	r22,0(r2)
  10e728:	10800104 	addi	r2,r2,4
  10e72c:	d8802515 	stw	r2,148(sp)
  10e730:	b009883a 	mov	r4,r22
  10e734:	0005883a 	mov	r2,zero
  10e738:	003d0c06 	br	10db6c <black_to_red_frame+0xfe10db6c>
  10e73c:	a5000044 	addi	r20,r20,1
  10e740:	b5800814 	ori	r22,r22,32
  10e744:	10c00047 	ldb	r3,1(r2)
  10e748:	003c6b06 	br	10d8f8 <black_to_red_frame+0xfe10d8f8>
  10e74c:	d9402417 	ldw	r5,144(sp)
  10e750:	8809883a 	mov	r4,r17
  10e754:	d9801a04 	addi	r6,sp,104
  10e758:	010d5f80 	call	10d5f8 <__ssprint_r>
  10e75c:	103efe1e 	bne	r2,zero,10e358 <black_to_red_frame+0xfe10e358>
  10e760:	d8c01c17 	ldw	r3,112(sp)
  10e764:	d8801b17 	ldw	r2,108(sp)
  10e768:	d811883a 	mov	r8,sp
  10e76c:	003e6806 	br	10e110 <black_to_red_frame+0xfe10e110>
  10e770:	01000474 	movhi	r4,17
  10e774:	211a9c04 	addi	r4,r4,27248
  10e778:	d9002315 	stw	r4,140(sp)
  10e77c:	003e8c06 	br	10e1b0 <black_to_red_frame+0xfe10e1b0>
  10e780:	d9002517 	ldw	r4,148(sp)
  10e784:	25800017 	ldw	r22,0(r4)
  10e788:	21000104 	addi	r4,r4,4
  10e78c:	d9002515 	stw	r4,148(sp)
  10e790:	b02fd7fa 	srai	r23,r22,31
  10e794:	b805883a 	mov	r2,r23
  10e798:	003d8606 	br	10ddb4 <black_to_red_frame+0xfe10ddb4>
  10e79c:	d9402517 	ldw	r5,148(sp)
  10e7a0:	002f883a 	mov	r23,zero
  10e7a4:	2d800017 	ldw	r22,0(r5)
  10e7a8:	29400104 	addi	r5,r5,4
  10e7ac:	d9402515 	stw	r5,148(sp)
  10e7b0:	003cdc06 	br	10db24 <black_to_red_frame+0xfe10db24>
  10e7b4:	d8802517 	ldw	r2,148(sp)
  10e7b8:	002f883a 	mov	r23,zero
  10e7bc:	15800017 	ldw	r22,0(r2)
  10e7c0:	10800104 	addi	r2,r2,4
  10e7c4:	d8802515 	stw	r2,148(sp)
  10e7c8:	b009883a 	mov	r4,r22
  10e7cc:	00800044 	movi	r2,1
  10e7d0:	003ce606 	br	10db6c <black_to_red_frame+0xfe10db6c>
  10e7d4:	d9002517 	ldw	r4,148(sp)
  10e7d8:	002f883a 	mov	r23,zero
  10e7dc:	0005883a 	mov	r2,zero
  10e7e0:	25800017 	ldw	r22,0(r4)
  10e7e4:	21000104 	addi	r4,r4,4
  10e7e8:	d9002515 	stw	r4,148(sp)
  10e7ec:	b009883a 	mov	r4,r22
  10e7f0:	003cde06 	br	10db6c <black_to_red_frame+0xfe10db6c>
  10e7f4:	8400100c 	andi	r16,r16,64
  10e7f8:	80002b26 	beq	r16,zero,10e8a8 <___svfiprintf_internal_r+0x10e4>
  10e7fc:	d9002517 	ldw	r4,148(sp)
  10e800:	d9402717 	ldw	r5,156(sp)
  10e804:	20800017 	ldw	r2,0(r4)
  10e808:	21000104 	addi	r4,r4,4
  10e80c:	d9002515 	stw	r4,148(sp)
  10e810:	1140000d 	sth	r5,0(r2)
  10e814:	003c0e06 	br	10d850 <black_to_red_frame+0xfe10d850>
  10e818:	d8801e17 	ldw	r2,120(sp)
  10e81c:	14abc83a 	sub	r21,r2,r18
  10e820:	003ce106 	br	10dba8 <black_to_red_frame+0xfe10dba8>
  10e824:	9009883a 	mov	r4,r18
  10e828:	da002d15 	stw	r8,180(sp)
  10e82c:	01049b00 	call	1049b0 <strlen>
  10e830:	102b883a 	mov	r21,r2
  10e834:	df001d83 	ldbu	fp,118(sp)
  10e838:	ddc02515 	stw	r23,148(sp)
  10e83c:	d8002115 	stw	zero,132(sp)
  10e840:	da002d17 	ldw	r8,180(sp)
  10e844:	003cd806 	br	10dba8 <black_to_red_frame+0xfe10dba8>
  10e848:	013fffc4 	movi	r4,-1
  10e84c:	d9002115 	stw	r4,132(sp)
  10e850:	003da006 	br	10ded4 <black_to_red_frame+0xfe10ded4>
  10e854:	04001004 	movi	r16,64
  10e858:	800b883a 	mov	r5,r16
  10e85c:	0103f6c0 	call	103f6c <_malloc_r>
  10e860:	d8c02417 	ldw	r3,144(sp)
  10e864:	18800015 	stw	r2,0(r3)
  10e868:	18800415 	stw	r2,16(r3)
  10e86c:	10003826 	beq	r2,zero,10e950 <___svfiprintf_internal_r+0x118c>
  10e870:	d9402417 	ldw	r5,144(sp)
  10e874:	2c000515 	stw	r16,20(r5)
  10e878:	003be606 	br	10d814 <black_to_red_frame+0xfe10d814>
  10e87c:	dd402117 	ldw	r21,132(sp)
  10e880:	00800184 	movi	r2,6
  10e884:	1540012e 	bgeu	r2,r21,10e88c <___svfiprintf_internal_r+0x10c8>
  10e888:	102b883a 	mov	r21,r2
  10e88c:	a82d883a 	mov	r22,r21
  10e890:	a8001f16 	blt	r21,zero,10e910 <___svfiprintf_internal_r+0x114c>
  10e894:	dd802015 	stw	r22,128(sp)
  10e898:	ddc02515 	stw	r23,148(sp)
  10e89c:	04800474 	movhi	r18,17
  10e8a0:	949a3804 	addi	r18,r18,26848
  10e8a4:	003cf406 	br	10dc78 <black_to_red_frame+0xfe10dc78>
  10e8a8:	d8c02517 	ldw	r3,148(sp)
  10e8ac:	d9002717 	ldw	r4,156(sp)
  10e8b0:	18800017 	ldw	r2,0(r3)
  10e8b4:	18c00104 	addi	r3,r3,4
  10e8b8:	d8c02515 	stw	r3,148(sp)
  10e8bc:	11000015 	stw	r4,0(r2)
  10e8c0:	003be306 	br	10d850 <black_to_red_frame+0xfe10d850>
  10e8c4:	01000474 	movhi	r4,17
  10e8c8:	211aa004 	addi	r4,r4,27264
  10e8cc:	d9002815 	stw	r4,160(sp)
  10e8d0:	003d2006 	br	10dd54 <black_to_red_frame+0xfe10dd54>
  10e8d4:	01000474 	movhi	r4,17
  10e8d8:	211aa004 	addi	r4,r4,27264
  10e8dc:	d9002815 	stw	r4,160(sp)
  10e8e0:	003e6b06 	br	10e290 <black_to_red_frame+0xfe10e290>
  10e8e4:	01000474 	movhi	r4,17
  10e8e8:	211a9c04 	addi	r4,r4,27248
  10e8ec:	d9002315 	stw	r4,140(sp)
  10e8f0:	003ed306 	br	10e440 <black_to_red_frame+0xfe10e440>
  10e8f4:	d8002115 	stw	zero,132(sp)
  10e8f8:	003c0006 	br	10d8fc <black_to_red_frame+0xfe10d8fc>
  10e8fc:	dd402117 	ldw	r21,132(sp)
  10e900:	df001d83 	ldbu	fp,118(sp)
  10e904:	ddc02515 	stw	r23,148(sp)
  10e908:	d8002115 	stw	zero,132(sp)
  10e90c:	003ca606 	br	10dba8 <black_to_red_frame+0xfe10dba8>
  10e910:	002d883a 	mov	r22,zero
  10e914:	003fdf06 	br	10e894 <black_to_red_frame+0xfe10e894>
  10e918:	d9002517 	ldw	r4,148(sp)
  10e91c:	d9402517 	ldw	r5,148(sp)
  10e920:	21000017 	ldw	r4,0(r4)
  10e924:	d9002115 	stw	r4,132(sp)
  10e928:	d8c02117 	ldw	r3,132(sp)
  10e92c:	29000104 	addi	r4,r5,4
  10e930:	18000c16 	blt	r3,zero,10e964 <___svfiprintf_internal_r+0x11a0>
  10e934:	a0c00043 	ldbu	r3,1(r20)
  10e938:	d9002515 	stw	r4,148(sp)
  10e93c:	1029883a 	mov	r20,r2
  10e940:	18c03fcc 	andi	r3,r3,255
  10e944:	18c0201c 	xori	r3,r3,128
  10e948:	18ffe004 	addi	r3,r3,-128
  10e94c:	003bea06 	br	10d8f8 <black_to_red_frame+0xfe10d8f8>
  10e950:	d9002917 	ldw	r4,164(sp)
  10e954:	00800304 	movi	r2,12
  10e958:	20800015 	stw	r2,0(r4)
  10e95c:	00bfffc4 	movi	r2,-1
  10e960:	003e8206 	br	10e36c <black_to_red_frame+0xfe10e36c>
  10e964:	a0c00043 	ldbu	r3,1(r20)
  10e968:	d9002515 	stw	r4,148(sp)
  10e96c:	013fffc4 	movi	r4,-1
  10e970:	18c03fcc 	andi	r3,r3,255
  10e974:	18c0201c 	xori	r3,r3,128
  10e978:	1029883a 	mov	r20,r2
  10e97c:	d9002115 	stw	r4,132(sp)
  10e980:	18ffe004 	addi	r3,r3,-128
  10e984:	003bdc06 	br	10d8f8 <black_to_red_frame+0xfe10d8f8>

0010e988 <__sprint_r.part.0>:
  10e988:	28801917 	ldw	r2,100(r5)
  10e98c:	defff604 	addi	sp,sp,-40
  10e990:	dd800615 	stw	r22,24(sp)
  10e994:	dcc00315 	stw	r19,12(sp)
  10e998:	dfc00915 	stw	ra,36(sp)
  10e99c:	df000815 	stw	fp,32(sp)
  10e9a0:	ddc00715 	stw	r23,28(sp)
  10e9a4:	dd400515 	stw	r21,20(sp)
  10e9a8:	dd000415 	stw	r20,16(sp)
  10e9ac:	dc800215 	stw	r18,8(sp)
  10e9b0:	dc400115 	stw	r17,4(sp)
  10e9b4:	dc000015 	stw	r16,0(sp)
  10e9b8:	1088000c 	andi	r2,r2,8192
  10e9bc:	2827883a 	mov	r19,r5
  10e9c0:	302d883a 	mov	r22,r6
  10e9c4:	10002d26 	beq	r2,zero,10ea7c <__sprint_r.part.0+0xf4>
  10e9c8:	30800217 	ldw	r2,8(r6)
  10e9cc:	35c00017 	ldw	r23,0(r6)
  10e9d0:	10002826 	beq	r2,zero,10ea74 <__sprint_r.part.0+0xec>
  10e9d4:	202b883a 	mov	r21,r4
  10e9d8:	bf000104 	addi	fp,r23,4
  10e9dc:	053fffc4 	movi	r20,-1
  10e9e0:	e4800017 	ldw	r18,0(fp)
  10e9e4:	bc400017 	ldw	r17,0(r23)
  10e9e8:	0021883a 	mov	r16,zero
  10e9ec:	9024d0ba 	srli	r18,r18,2
  10e9f0:	04800316 	blt	zero,r18,10ea00 <__sprint_r.part.0+0x78>
  10e9f4:	00001806 	br	10ea58 <__sprint_r.part.0+0xd0>
  10e9f8:	8c400104 	addi	r17,r17,4
  10e9fc:	94001526 	beq	r18,r16,10ea54 <__sprint_r.part.0+0xcc>
  10ea00:	89400017 	ldw	r5,0(r17)
  10ea04:	a809883a 	mov	r4,r21
  10ea08:	980d883a 	mov	r6,r19
  10ea0c:	01103880 	call	110388 <_fputwc_r>
  10ea10:	84000044 	addi	r16,r16,1
  10ea14:	153ff81e 	bne	r2,r20,10e9f8 <black_to_red_frame+0xfe10e9f8>
  10ea18:	a005883a 	mov	r2,r20
  10ea1c:	b0000215 	stw	zero,8(r22)
  10ea20:	b0000115 	stw	zero,4(r22)
  10ea24:	dfc00917 	ldw	ra,36(sp)
  10ea28:	df000817 	ldw	fp,32(sp)
  10ea2c:	ddc00717 	ldw	r23,28(sp)
  10ea30:	dd800617 	ldw	r22,24(sp)
  10ea34:	dd400517 	ldw	r21,20(sp)
  10ea38:	dd000417 	ldw	r20,16(sp)
  10ea3c:	dcc00317 	ldw	r19,12(sp)
  10ea40:	dc800217 	ldw	r18,8(sp)
  10ea44:	dc400117 	ldw	r17,4(sp)
  10ea48:	dc000017 	ldw	r16,0(sp)
  10ea4c:	dec00a04 	addi	sp,sp,40
  10ea50:	f800283a 	ret
  10ea54:	b0800217 	ldw	r2,8(r22)
  10ea58:	94a5883a 	add	r18,r18,r18
  10ea5c:	94a5883a 	add	r18,r18,r18
  10ea60:	1485c83a 	sub	r2,r2,r18
  10ea64:	b0800215 	stw	r2,8(r22)
  10ea68:	bdc00204 	addi	r23,r23,8
  10ea6c:	e7000204 	addi	fp,fp,8
  10ea70:	103fdb1e 	bne	r2,zero,10e9e0 <black_to_red_frame+0xfe10e9e0>
  10ea74:	0005883a 	mov	r2,zero
  10ea78:	003fe806 	br	10ea1c <black_to_red_frame+0xfe10ea1c>
  10ea7c:	010afe00 	call	10afe0 <__sfvwrite_r>
  10ea80:	003fe606 	br	10ea1c <black_to_red_frame+0xfe10ea1c>

0010ea84 <__sprint_r>:
  10ea84:	30c00217 	ldw	r3,8(r6)
  10ea88:	18000126 	beq	r3,zero,10ea90 <__sprint_r+0xc>
  10ea8c:	010e9881 	jmpi	10e988 <__sprint_r.part.0>
  10ea90:	30000115 	stw	zero,4(r6)
  10ea94:	0005883a 	mov	r2,zero
  10ea98:	f800283a 	ret

0010ea9c <___vfiprintf_internal_r>:
  10ea9c:	defec804 	addi	sp,sp,-1248
  10eaa0:	dfc13715 	stw	ra,1244(sp)
  10eaa4:	df013615 	stw	fp,1240(sp)
  10eaa8:	ddc13515 	stw	r23,1236(sp)
  10eaac:	dd813415 	stw	r22,1232(sp)
  10eab0:	dd413315 	stw	r21,1228(sp)
  10eab4:	dd013215 	stw	r20,1224(sp)
  10eab8:	dcc13115 	stw	r19,1220(sp)
  10eabc:	dc813015 	stw	r18,1216(sp)
  10eac0:	dc412f15 	stw	r17,1212(sp)
  10eac4:	dc012e15 	stw	r16,1208(sp)
  10eac8:	d9012215 	stw	r4,1160(sp)
  10eacc:	d9412015 	stw	r5,1152(sp)
  10ead0:	d9c12315 	stw	r7,1164(sp)
  10ead4:	3013883a 	mov	r9,r6
  10ead8:	20000226 	beq	r4,zero,10eae4 <___vfiprintf_internal_r+0x48>
  10eadc:	20800e17 	ldw	r2,56(r4)
  10eae0:	1000f926 	beq	r2,zero,10eec8 <___vfiprintf_internal_r+0x42c>
  10eae4:	d8c12017 	ldw	r3,1152(sp)
  10eae8:	1880030b 	ldhu	r2,12(r3)
  10eaec:	1108000c 	andi	r4,r2,8192
  10eaf0:	1007883a 	mov	r3,r2
  10eaf4:	2000081e 	bne	r4,zero,10eb18 <___vfiprintf_internal_r+0x7c>
  10eaf8:	d9412017 	ldw	r5,1152(sp)
  10eafc:	10c80014 	ori	r3,r2,8192
  10eb00:	00b7ffc4 	movi	r2,-8193
  10eb04:	29001917 	ldw	r4,100(r5)
  10eb08:	28c0030d 	sth	r3,12(r5)
  10eb0c:	2088703a 	and	r4,r4,r2
  10eb10:	29001915 	stw	r4,100(r5)
  10eb14:	1805883a 	mov	r2,r3
  10eb18:	1900020c 	andi	r4,r3,8
  10eb1c:	2000a726 	beq	r4,zero,10edbc <___vfiprintf_internal_r+0x320>
  10eb20:	d9412017 	ldw	r5,1152(sp)
  10eb24:	29000417 	ldw	r4,16(r5)
  10eb28:	2000a426 	beq	r4,zero,10edbc <___vfiprintf_internal_r+0x320>
  10eb2c:	18c0068c 	andi	r3,r3,26
  10eb30:	01000284 	movi	r4,10
  10eb34:	1900ad26 	beq	r3,r4,10edec <___vfiprintf_internal_r+0x350>
  10eb38:	d90109c4 	addi	r4,sp,1063
  10eb3c:	d9410a04 	addi	r5,sp,1064
  10eb40:	2905c83a 	sub	r2,r5,r4
  10eb44:	d9011e15 	stw	r4,1144(sp)
  10eb48:	d9411f15 	stw	r5,1148(sp)
  10eb4c:	dec11a15 	stw	sp,1128(sp)
  10eb50:	d8011c15 	stw	zero,1136(sp)
  10eb54:	d8011b15 	stw	zero,1132(sp)
  10eb58:	d8012715 	stw	zero,1180(sp)
  10eb5c:	d8012415 	stw	zero,1168(sp)
  10eb60:	d811883a 	mov	r8,sp
  10eb64:	04c00474 	movhi	r19,17
  10eb68:	9cdaa804 	addi	r19,r19,27296
  10eb6c:	04000474 	movhi	r16,17
  10eb70:	841aa404 	addi	r16,r16,27280
  10eb74:	d8812815 	stw	r2,1184(sp)
  10eb78:	48800007 	ldb	r2,0(r9)
  10eb7c:	10040126 	beq	r2,zero,10fb84 <___vfiprintf_internal_r+0x10e8>
  10eb80:	00c00944 	movi	r3,37
  10eb84:	4829883a 	mov	r20,r9
  10eb88:	10c0021e 	bne	r2,r3,10eb94 <___vfiprintf_internal_r+0xf8>
  10eb8c:	00001606 	br	10ebe8 <___vfiprintf_internal_r+0x14c>
  10eb90:	10c00326 	beq	r2,r3,10eba0 <___vfiprintf_internal_r+0x104>
  10eb94:	a5000044 	addi	r20,r20,1
  10eb98:	a0800007 	ldb	r2,0(r20)
  10eb9c:	103ffc1e 	bne	r2,zero,10eb90 <black_to_red_frame+0xfe10eb90>
  10eba0:	a263c83a 	sub	r17,r20,r9
  10eba4:	88001026 	beq	r17,zero,10ebe8 <___vfiprintf_internal_r+0x14c>
  10eba8:	d8c11c17 	ldw	r3,1136(sp)
  10ebac:	d8811b17 	ldw	r2,1132(sp)
  10ebb0:	42400015 	stw	r9,0(r8)
  10ebb4:	88c7883a 	add	r3,r17,r3
  10ebb8:	10800044 	addi	r2,r2,1
  10ebbc:	44400115 	stw	r17,4(r8)
  10ebc0:	d8c11c15 	stw	r3,1136(sp)
  10ebc4:	d8811b15 	stw	r2,1132(sp)
  10ebc8:	010001c4 	movi	r4,7
  10ebcc:	2080760e 	bge	r4,r2,10eda8 <___vfiprintf_internal_r+0x30c>
  10ebd0:	1803b41e 	bne	r3,zero,10faa4 <___vfiprintf_internal_r+0x1008>
  10ebd4:	d8c12417 	ldw	r3,1168(sp)
  10ebd8:	d8011b15 	stw	zero,1132(sp)
  10ebdc:	d811883a 	mov	r8,sp
  10ebe0:	1c47883a 	add	r3,r3,r17
  10ebe4:	d8c12415 	stw	r3,1168(sp)
  10ebe8:	a0800007 	ldb	r2,0(r20)
  10ebec:	1002dc26 	beq	r2,zero,10f760 <___vfiprintf_internal_r+0xcc4>
  10ebf0:	04bfffc4 	movi	r18,-1
  10ebf4:	a2400044 	addi	r9,r20,1
  10ebf8:	a0c00047 	ldb	r3,1(r20)
  10ebfc:	d8011d85 	stb	zero,1142(sp)
  10ec00:	002d883a 	mov	r22,zero
  10ec04:	d8012115 	stw	zero,1156(sp)
  10ec08:	0023883a 	mov	r17,zero
  10ec0c:	05001604 	movi	r20,88
  10ec10:	05400244 	movi	r21,9
  10ec14:	402f883a 	mov	r23,r8
  10ec18:	900d883a 	mov	r6,r18
  10ec1c:	4a400044 	addi	r9,r9,1
  10ec20:	18bff804 	addi	r2,r3,-32
  10ec24:	a0828736 	bltu	r20,r2,10f644 <___vfiprintf_internal_r+0xba8>
  10ec28:	1085883a 	add	r2,r2,r2
  10ec2c:	1085883a 	add	r2,r2,r2
  10ec30:	01000474 	movhi	r4,17
  10ec34:	213b1104 	addi	r4,r4,-5052
  10ec38:	1105883a 	add	r2,r2,r4
  10ec3c:	10800017 	ldw	r2,0(r2)
  10ec40:	1000683a 	jmp	r2
  10ec44:	0010f3a4 	muli	zero,zero,17358
  10ec48:	0010f644 	movi	zero,17369
  10ec4c:	0010f644 	movi	zero,17369
  10ec50:	0010f3c0 	call	10f3c <black_tx_descriptor+0x1063c>
  10ec54:	0010f644 	movi	zero,17369
  10ec58:	0010f644 	movi	zero,17369
  10ec5c:	0010f644 	movi	zero,17369
  10ec60:	0010f644 	movi	zero,17369
  10ec64:	0010f644 	movi	zero,17369
  10ec68:	0010f644 	movi	zero,17369
  10ec6c:	0010f454 	movui	zero,17361
  10ec70:	0010f47c 	xorhi	zero,zero,17361
  10ec74:	0010f644 	movi	zero,17369
  10ec78:	0010eee8 	cmpgeui	zero,zero,17339
  10ec7c:	0010f488 	cmpgei	zero,zero,17362
  10ec80:	0010f644 	movi	zero,17369
  10ec84:	0010eef4 	movhi	zero,17339
  10ec88:	0010ef00 	call	10ef0 <black_tx_descriptor+0x105f0>
  10ec8c:	0010ef00 	call	10ef0 <black_tx_descriptor+0x105f0>
  10ec90:	0010ef00 	call	10ef0 <black_tx_descriptor+0x105f0>
  10ec94:	0010ef00 	call	10ef0 <black_tx_descriptor+0x105f0>
  10ec98:	0010ef00 	call	10ef0 <black_tx_descriptor+0x105f0>
  10ec9c:	0010ef00 	call	10ef0 <black_tx_descriptor+0x105f0>
  10eca0:	0010ef00 	call	10ef0 <black_tx_descriptor+0x105f0>
  10eca4:	0010ef00 	call	10ef0 <black_tx_descriptor+0x105f0>
  10eca8:	0010ef00 	call	10ef0 <black_tx_descriptor+0x105f0>
  10ecac:	0010f644 	movi	zero,17369
  10ecb0:	0010f644 	movi	zero,17369
  10ecb4:	0010f644 	movi	zero,17369
  10ecb8:	0010f644 	movi	zero,17369
  10ecbc:	0010f644 	movi	zero,17369
  10ecc0:	0010f644 	movi	zero,17369
  10ecc4:	0010f644 	movi	zero,17369
  10ecc8:	0010f644 	movi	zero,17369
  10eccc:	0010f644 	movi	zero,17369
  10ecd0:	0010f644 	movi	zero,17369
  10ecd4:	0010ef48 	cmpgei	zero,zero,17341
  10ecd8:	0010f644 	movi	zero,17369
  10ecdc:	0010f644 	movi	zero,17369
  10ece0:	0010f644 	movi	zero,17369
  10ece4:	0010f644 	movi	zero,17369
  10ece8:	0010f644 	movi	zero,17369
  10ecec:	0010f644 	movi	zero,17369
  10ecf0:	0010f644 	movi	zero,17369
  10ecf4:	0010f644 	movi	zero,17369
  10ecf8:	0010f644 	movi	zero,17369
  10ecfc:	0010f644 	movi	zero,17369
  10ed00:	0010f29c 	xori	zero,zero,17354
  10ed04:	0010f644 	movi	zero,17369
  10ed08:	0010f644 	movi	zero,17369
  10ed0c:	0010f644 	movi	zero,17369
  10ed10:	0010f644 	movi	zero,17369
  10ed14:	0010f644 	movi	zero,17369
  10ed18:	0010f2e0 	cmpeqi	zero,zero,17355
  10ed1c:	0010f644 	movi	zero,17369
  10ed20:	0010f644 	movi	zero,17369
  10ed24:	0010f318 	cmpnei	zero,zero,17356
  10ed28:	0010f644 	movi	zero,17369
  10ed2c:	0010f644 	movi	zero,17369
  10ed30:	0010f644 	movi	zero,17369
  10ed34:	0010f644 	movi	zero,17369
  10ed38:	0010f644 	movi	zero,17369
  10ed3c:	0010f644 	movi	zero,17369
  10ed40:	0010f644 	movi	zero,17369
  10ed44:	0010f644 	movi	zero,17369
  10ed48:	0010f644 	movi	zero,17369
  10ed4c:	0010f644 	movi	zero,17369
  10ed50:	0010f374 	movhi	zero,17357
  10ed54:	0010f4e8 	cmpgeui	zero,zero,17363
  10ed58:	0010f644 	movi	zero,17369
  10ed5c:	0010f644 	movi	zero,17369
  10ed60:	0010f644 	movi	zero,17369
  10ed64:	0010f4dc 	xori	zero,zero,17363
  10ed68:	0010f4e8 	cmpgeui	zero,zero,17363
  10ed6c:	0010f644 	movi	zero,17369
  10ed70:	0010f644 	movi	zero,17369
  10ed74:	0010f3cc 	andi	zero,zero,17359
  10ed78:	0010f644 	movi	zero,17369
  10ed7c:	0010f3e4 	muli	zero,zero,17359
  10ed80:	0010f41c 	xori	zero,zero,17360
  10ed84:	0010f5fc 	xorhi	zero,zero,17367
  10ed88:	0010f520 	cmpeqi	zero,zero,17364
  10ed8c:	0010f644 	movi	zero,17369
  10ed90:	0010f52c 	andhi	zero,zero,17364
  10ed94:	0010f644 	movi	zero,17369
  10ed98:	0010f584 	movi	zero,17366
  10ed9c:	0010f644 	movi	zero,17369
  10eda0:	0010f644 	movi	zero,17369
  10eda4:	0010f5bc 	xorhi	zero,zero,17366
  10eda8:	42000204 	addi	r8,r8,8
  10edac:	d8c12417 	ldw	r3,1168(sp)
  10edb0:	1c47883a 	add	r3,r3,r17
  10edb4:	d8c12415 	stw	r3,1168(sp)
  10edb8:	003f8b06 	br	10ebe8 <black_to_red_frame+0xfe10ebe8>
  10edbc:	d9012217 	ldw	r4,1160(sp)
  10edc0:	d9412017 	ldw	r5,1152(sp)
  10edc4:	da412d15 	stw	r9,1204(sp)
  10edc8:	0108c200 	call	108c20 <__swsetup_r>
  10edcc:	da412d17 	ldw	r9,1204(sp)
  10edd0:	1000301e 	bne	r2,zero,10ee94 <___vfiprintf_internal_r+0x3f8>
  10edd4:	d8c12017 	ldw	r3,1152(sp)
  10edd8:	01000284 	movi	r4,10
  10eddc:	1880030b 	ldhu	r2,12(r3)
  10ede0:	1007883a 	mov	r3,r2
  10ede4:	18c0068c 	andi	r3,r3,26
  10ede8:	193f531e 	bne	r3,r4,10eb38 <black_to_red_frame+0xfe10eb38>
  10edec:	d9012017 	ldw	r4,1152(sp)
  10edf0:	20c0038b 	ldhu	r3,14(r4)
  10edf4:	193fffcc 	andi	r4,r3,65535
  10edf8:	2120001c 	xori	r4,r4,32768
  10edfc:	21200004 	addi	r4,r4,-32768
  10ee00:	203f4d16 	blt	r4,zero,10eb38 <black_to_red_frame+0xfe10eb38>
  10ee04:	d9412017 	ldw	r5,1152(sp)
  10ee08:	d9012217 	ldw	r4,1160(sp)
  10ee0c:	d9c12317 	ldw	r7,1164(sp)
  10ee10:	2b001917 	ldw	r12,100(r5)
  10ee14:	2ac00717 	ldw	r11,28(r5)
  10ee18:	2a800917 	ldw	r10,36(r5)
  10ee1c:	02010004 	movi	r8,1024
  10ee20:	10bfff4c 	andi	r2,r2,65533
  10ee24:	da0b883a 	add	r5,sp,r8
  10ee28:	480d883a 	mov	r6,r9
  10ee2c:	d881030d 	sth	r2,1036(sp)
  10ee30:	db011915 	stw	r12,1124(sp)
  10ee34:	d8c1038d 	sth	r3,1038(sp)
  10ee38:	dac10715 	stw	r11,1052(sp)
  10ee3c:	da810915 	stw	r10,1060(sp)
  10ee40:	dec10015 	stw	sp,1024(sp)
  10ee44:	dec10415 	stw	sp,1040(sp)
  10ee48:	da010215 	stw	r8,1032(sp)
  10ee4c:	da010515 	stw	r8,1044(sp)
  10ee50:	d8010615 	stw	zero,1048(sp)
  10ee54:	010ea9c0 	call	10ea9c <___vfiprintf_internal_r>
  10ee58:	1021883a 	mov	r16,r2
  10ee5c:	10000416 	blt	r2,zero,10ee70 <___vfiprintf_internal_r+0x3d4>
  10ee60:	d9012217 	ldw	r4,1160(sp)
  10ee64:	d9410004 	addi	r5,sp,1024
  10ee68:	010a5bc0 	call	10a5bc <_fflush_r>
  10ee6c:	10040b1e 	bne	r2,zero,10fe9c <___vfiprintf_internal_r+0x1400>
  10ee70:	d881030b 	ldhu	r2,1036(sp)
  10ee74:	1080100c 	andi	r2,r2,64
  10ee78:	10000426 	beq	r2,zero,10ee8c <___vfiprintf_internal_r+0x3f0>
  10ee7c:	d8c12017 	ldw	r3,1152(sp)
  10ee80:	1880030b 	ldhu	r2,12(r3)
  10ee84:	10801014 	ori	r2,r2,64
  10ee88:	1880030d 	sth	r2,12(r3)
  10ee8c:	8005883a 	mov	r2,r16
  10ee90:	00000106 	br	10ee98 <___vfiprintf_internal_r+0x3fc>
  10ee94:	00bfffc4 	movi	r2,-1
  10ee98:	dfc13717 	ldw	ra,1244(sp)
  10ee9c:	df013617 	ldw	fp,1240(sp)
  10eea0:	ddc13517 	ldw	r23,1236(sp)
  10eea4:	dd813417 	ldw	r22,1232(sp)
  10eea8:	dd413317 	ldw	r21,1228(sp)
  10eeac:	dd013217 	ldw	r20,1224(sp)
  10eeb0:	dcc13117 	ldw	r19,1220(sp)
  10eeb4:	dc813017 	ldw	r18,1216(sp)
  10eeb8:	dc412f17 	ldw	r17,1212(sp)
  10eebc:	dc012e17 	ldw	r16,1208(sp)
  10eec0:	dec13804 	addi	sp,sp,1248
  10eec4:	f800283a 	ret
  10eec8:	d9812d15 	stw	r6,1204(sp)
  10eecc:	010a8dc0 	call	10a8dc <__sinit>
  10eed0:	da412d17 	ldw	r9,1204(sp)
  10eed4:	003f0306 	br	10eae4 <black_to_red_frame+0xfe10eae4>
  10eed8:	d9412117 	ldw	r5,1156(sp)
  10eedc:	d8812315 	stw	r2,1164(sp)
  10eee0:	014bc83a 	sub	r5,zero,r5
  10eee4:	d9412115 	stw	r5,1156(sp)
  10eee8:	8c400114 	ori	r17,r17,4
  10eeec:	48c00007 	ldb	r3,0(r9)
  10eef0:	003f4a06 	br	10ec1c <black_to_red_frame+0xfe10ec1c>
  10eef4:	8c402014 	ori	r17,r17,128
  10eef8:	48c00007 	ldb	r3,0(r9)
  10eefc:	003f4706 	br	10ec1c <black_to_red_frame+0xfe10ec1c>
  10ef00:	4825883a 	mov	r18,r9
  10ef04:	d8012115 	stw	zero,1156(sp)
  10ef08:	1f3ff404 	addi	fp,r3,-48
  10ef0c:	00000106 	br	10ef14 <___vfiprintf_internal_r+0x478>
  10ef10:	1025883a 	mov	r18,r2
  10ef14:	d9012117 	ldw	r4,1156(sp)
  10ef18:	01400284 	movi	r5,10
  10ef1c:	d9812b15 	stw	r6,1196(sp)
  10ef20:	0103f1c0 	call	103f1c <__mulsi3>
  10ef24:	90c00007 	ldb	r3,0(r18)
  10ef28:	1739883a 	add	fp,r2,fp
  10ef2c:	df012115 	stw	fp,1156(sp)
  10ef30:	90800044 	addi	r2,r18,1
  10ef34:	1f3ff404 	addi	fp,r3,-48
  10ef38:	1013883a 	mov	r9,r2
  10ef3c:	d9812b17 	ldw	r6,1196(sp)
  10ef40:	af3ff32e 	bgeu	r21,fp,10ef10 <black_to_red_frame+0xfe10ef10>
  10ef44:	003f3606 	br	10ec20 <black_to_red_frame+0xfe10ec20>
  10ef48:	8c400414 	ori	r17,r17,16
  10ef4c:	dd811d85 	stb	r22,1142(sp)
  10ef50:	8880080c 	andi	r2,r17,32
  10ef54:	b811883a 	mov	r8,r23
  10ef58:	3025883a 	mov	r18,r6
  10ef5c:	10016726 	beq	r2,zero,10f4fc <___vfiprintf_internal_r+0xa60>
  10ef60:	d8c12317 	ldw	r3,1164(sp)
  10ef64:	18800117 	ldw	r2,4(r3)
  10ef68:	1d000017 	ldw	r20,0(r3)
  10ef6c:	18c00204 	addi	r3,r3,8
  10ef70:	d8c12315 	stw	r3,1164(sp)
  10ef74:	102b883a 	mov	r21,r2
  10ef78:	10030416 	blt	r2,zero,10fb8c <___vfiprintf_internal_r+0x10f0>
  10ef7c:	dd811d83 	ldbu	r22,1142(sp)
  10ef80:	900f883a 	mov	r7,r18
  10ef84:	00800044 	movi	r2,1
  10ef88:	a548b03a 	or	r4,r20,r21
  10ef8c:	90000216 	blt	r18,zero,10ef98 <___vfiprintf_internal_r+0x4fc>
  10ef90:	00ffdfc4 	movi	r3,-129
  10ef94:	88e2703a 	and	r17,r17,r3
  10ef98:	10803fcc 	andi	r2,r2,255
  10ef9c:	2001db1e 	bne	r4,zero,10f70c <___vfiprintf_internal_r+0xc70>
  10efa0:	9001da1e 	bne	r18,zero,10f70c <___vfiprintf_internal_r+0xc70>
  10efa4:	1002ab1e 	bne	r2,zero,10fa54 <___vfiprintf_internal_r+0xfb8>
  10efa8:	8880004c 	andi	r2,r17,1
  10efac:	1002a926 	beq	r2,zero,10fa54 <___vfiprintf_internal_r+0xfb8>
  10efb0:	d9c12817 	ldw	r7,1184(sp)
  10efb4:	00800c04 	movi	r2,48
  10efb8:	d88109c5 	stb	r2,1063(sp)
  10efbc:	ddc109c4 	addi	r23,sp,1063
  10efc0:	3829883a 	mov	r20,r7
  10efc4:	3c80010e 	bge	r7,r18,10efcc <___vfiprintf_internal_r+0x530>
  10efc8:	9029883a 	mov	r20,r18
  10efcc:	b5803fcc 	andi	r22,r22,255
  10efd0:	b580201c 	xori	r22,r22,128
  10efd4:	b5bfe004 	addi	r22,r22,-128
  10efd8:	b0000126 	beq	r22,zero,10efe0 <___vfiprintf_internal_r+0x544>
  10efdc:	a5000044 	addi	r20,r20,1
  10efe0:	8a80008c 	andi	r10,r17,2
  10efe4:	50000126 	beq	r10,zero,10efec <___vfiprintf_internal_r+0x550>
  10efe8:	a5000084 	addi	r20,r20,2
  10efec:	8d40210c 	andi	r21,r17,132
  10eff0:	a801aa1e 	bne	r21,zero,10f69c <___vfiprintf_internal_r+0xc00>
  10eff4:	d8c12117 	ldw	r3,1156(sp)
  10eff8:	1d2dc83a 	sub	r22,r3,r20
  10effc:	0581a70e 	bge	zero,r22,10f69c <___vfiprintf_internal_r+0xc00>
  10f000:	07000404 	movi	fp,16
  10f004:	d8c11c17 	ldw	r3,1136(sp)
  10f008:	e583780e 	bge	fp,r22,10fdec <___vfiprintf_internal_r+0x1350>
  10f00c:	01400474 	movhi	r5,17
  10f010:	295aa804 	addi	r5,r5,27296
  10f014:	dc412615 	stw	r17,1176(sp)
  10f018:	d9011b17 	ldw	r4,1132(sp)
  10f01c:	b023883a 	mov	r17,r22
  10f020:	d9412515 	stw	r5,1172(sp)
  10f024:	030001c4 	movi	r12,7
  10f028:	d9c12915 	stw	r7,1188(sp)
  10f02c:	da812a15 	stw	r10,1192(sp)
  10f030:	482d883a 	mov	r22,r9
  10f034:	00000506 	br	10f04c <___vfiprintf_internal_r+0x5b0>
  10f038:	21400084 	addi	r5,r4,2
  10f03c:	42000204 	addi	r8,r8,8
  10f040:	1009883a 	mov	r4,r2
  10f044:	8c7ffc04 	addi	r17,r17,-16
  10f048:	e4400d0e 	bge	fp,r17,10f080 <___vfiprintf_internal_r+0x5e4>
  10f04c:	18c00404 	addi	r3,r3,16
  10f050:	20800044 	addi	r2,r4,1
  10f054:	44c00015 	stw	r19,0(r8)
  10f058:	47000115 	stw	fp,4(r8)
  10f05c:	d8c11c15 	stw	r3,1136(sp)
  10f060:	d8811b15 	stw	r2,1132(sp)
  10f064:	60bff40e 	bge	r12,r2,10f038 <black_to_red_frame+0xfe10f038>
  10f068:	1801801e 	bne	r3,zero,10f66c <___vfiprintf_internal_r+0xbd0>
  10f06c:	8c7ffc04 	addi	r17,r17,-16
  10f070:	0009883a 	mov	r4,zero
  10f074:	01400044 	movi	r5,1
  10f078:	d811883a 	mov	r8,sp
  10f07c:	e47ff316 	blt	fp,r17,10f04c <black_to_red_frame+0xfe10f04c>
  10f080:	b013883a 	mov	r9,r22
  10f084:	d9c12917 	ldw	r7,1188(sp)
  10f088:	882d883a 	mov	r22,r17
  10f08c:	da812a17 	ldw	r10,1192(sp)
  10f090:	dc412617 	ldw	r17,1176(sp)
  10f094:	d8812517 	ldw	r2,1172(sp)
  10f098:	b0c7883a 	add	r3,r22,r3
  10f09c:	45800115 	stw	r22,4(r8)
  10f0a0:	40800015 	stw	r2,0(r8)
  10f0a4:	d8c11c15 	stw	r3,1136(sp)
  10f0a8:	d9411b15 	stw	r5,1132(sp)
  10f0ac:	008001c4 	movi	r2,7
  10f0b0:	11426a16 	blt	r2,r5,10fa5c <___vfiprintf_internal_r+0xfc0>
  10f0b4:	d9011d87 	ldb	r4,1142(sp)
  10f0b8:	42000204 	addi	r8,r8,8
  10f0bc:	28800044 	addi	r2,r5,1
  10f0c0:	20017b1e 	bne	r4,zero,10f6b0 <___vfiprintf_internal_r+0xc14>
  10f0c4:	50000c26 	beq	r10,zero,10f0f8 <___vfiprintf_internal_r+0x65c>
  10f0c8:	d9011d04 	addi	r4,sp,1140
  10f0cc:	18c00084 	addi	r3,r3,2
  10f0d0:	41000015 	stw	r4,0(r8)
  10f0d4:	01000084 	movi	r4,2
  10f0d8:	41000115 	stw	r4,4(r8)
  10f0dc:	d8c11c15 	stw	r3,1136(sp)
  10f0e0:	d8811b15 	stw	r2,1132(sp)
  10f0e4:	010001c4 	movi	r4,7
  10f0e8:	20821716 	blt	r4,r2,10f948 <___vfiprintf_internal_r+0xeac>
  10f0ec:	100b883a 	mov	r5,r2
  10f0f0:	42000204 	addi	r8,r8,8
  10f0f4:	10800044 	addi	r2,r2,1
  10f0f8:	01002004 	movi	r4,128
  10f0fc:	a901d126 	beq	r21,r4,10f844 <___vfiprintf_internal_r+0xda8>
  10f100:	91e5c83a 	sub	r18,r18,r7
  10f104:	0480290e 	bge	zero,r18,10f1ac <___vfiprintf_internal_r+0x710>
  10f108:	05800404 	movi	r22,16
  10f10c:	05400474 	movhi	r21,17
  10f110:	ad5aa404 	addi	r21,r21,27280
  10f114:	b4801c0e 	bge	r22,r18,10f188 <___vfiprintf_internal_r+0x6ec>
  10f118:	dc412515 	stw	r17,1172(sp)
  10f11c:	070001c4 	movi	fp,7
  10f120:	9023883a 	mov	r17,r18
  10f124:	d9c12615 	stw	r7,1176(sp)
  10f128:	4825883a 	mov	r18,r9
  10f12c:	00000506 	br	10f144 <___vfiprintf_internal_r+0x6a8>
  10f130:	28800084 	addi	r2,r5,2
  10f134:	42000204 	addi	r8,r8,8
  10f138:	200b883a 	mov	r5,r4
  10f13c:	8c7ffc04 	addi	r17,r17,-16
  10f140:	b4400d0e 	bge	r22,r17,10f178 <___vfiprintf_internal_r+0x6dc>
  10f144:	18c00404 	addi	r3,r3,16
  10f148:	29000044 	addi	r4,r5,1
  10f14c:	44000015 	stw	r16,0(r8)
  10f150:	45800115 	stw	r22,4(r8)
  10f154:	d8c11c15 	stw	r3,1136(sp)
  10f158:	d9011b15 	stw	r4,1132(sp)
  10f15c:	e13ff40e 	bge	fp,r4,10f130 <black_to_red_frame+0xfe10f130>
  10f160:	1801601e 	bne	r3,zero,10f6e4 <___vfiprintf_internal_r+0xc48>
  10f164:	8c7ffc04 	addi	r17,r17,-16
  10f168:	000b883a 	mov	r5,zero
  10f16c:	00800044 	movi	r2,1
  10f170:	d811883a 	mov	r8,sp
  10f174:	b47ff316 	blt	r22,r17,10f144 <black_to_red_frame+0xfe10f144>
  10f178:	9013883a 	mov	r9,r18
  10f17c:	d9c12617 	ldw	r7,1176(sp)
  10f180:	8825883a 	mov	r18,r17
  10f184:	dc412517 	ldw	r17,1172(sp)
  10f188:	1c87883a 	add	r3,r3,r18
  10f18c:	45400015 	stw	r21,0(r8)
  10f190:	44800115 	stw	r18,4(r8)
  10f194:	d8c11c15 	stw	r3,1136(sp)
  10f198:	d8811b15 	stw	r2,1132(sp)
  10f19c:	010001c4 	movi	r4,7
  10f1a0:	20819e16 	blt	r4,r2,10f81c <___vfiprintf_internal_r+0xd80>
  10f1a4:	42000204 	addi	r8,r8,8
  10f1a8:	10800044 	addi	r2,r2,1
  10f1ac:	38c7883a 	add	r3,r7,r3
  10f1b0:	45c00015 	stw	r23,0(r8)
  10f1b4:	41c00115 	stw	r7,4(r8)
  10f1b8:	d8c11c15 	stw	r3,1136(sp)
  10f1bc:	d8811b15 	stw	r2,1132(sp)
  10f1c0:	010001c4 	movi	r4,7
  10f1c4:	20819d0e 	bge	r4,r2,10f83c <___vfiprintf_internal_r+0xda0>
  10f1c8:	1802291e 	bne	r3,zero,10fa70 <___vfiprintf_internal_r+0xfd4>
  10f1cc:	d8011b15 	stw	zero,1132(sp)
  10f1d0:	d811883a 	mov	r8,sp
  10f1d4:	8c40010c 	andi	r17,r17,4
  10f1d8:	88017526 	beq	r17,zero,10f7b0 <___vfiprintf_internal_r+0xd14>
  10f1dc:	d9412117 	ldw	r5,1156(sp)
  10f1e0:	2d23c83a 	sub	r17,r5,r20
  10f1e4:	0441720e 	bge	zero,r17,10f7b0 <___vfiprintf_internal_r+0xd14>
  10f1e8:	04800404 	movi	r18,16
  10f1ec:	9443170e 	bge	r18,r17,10fe4c <___vfiprintf_internal_r+0x13b0>
  10f1f0:	01400474 	movhi	r5,17
  10f1f4:	295aa804 	addi	r5,r5,27296
  10f1f8:	d9011b17 	ldw	r4,1132(sp)
  10f1fc:	d9412515 	stw	r5,1172(sp)
  10f200:	058001c4 	movi	r22,7
  10f204:	dd412217 	ldw	r21,1160(sp)
  10f208:	ddc12017 	ldw	r23,1152(sp)
  10f20c:	4839883a 	mov	fp,r9
  10f210:	00000506 	br	10f228 <___vfiprintf_internal_r+0x78c>
  10f214:	21400084 	addi	r5,r4,2
  10f218:	42000204 	addi	r8,r8,8
  10f21c:	1009883a 	mov	r4,r2
  10f220:	8c7ffc04 	addi	r17,r17,-16
  10f224:	94400d0e 	bge	r18,r17,10f25c <___vfiprintf_internal_r+0x7c0>
  10f228:	18c00404 	addi	r3,r3,16
  10f22c:	20800044 	addi	r2,r4,1
  10f230:	44c00015 	stw	r19,0(r8)
  10f234:	44800115 	stw	r18,4(r8)
  10f238:	d8c11c15 	stw	r3,1136(sp)
  10f23c:	d8811b15 	stw	r2,1132(sp)
  10f240:	b0bff40e 	bge	r22,r2,10f214 <black_to_red_frame+0xfe10f214>
  10f244:	18016b1e 	bne	r3,zero,10f7f4 <___vfiprintf_internal_r+0xd58>
  10f248:	8c7ffc04 	addi	r17,r17,-16
  10f24c:	0009883a 	mov	r4,zero
  10f250:	01400044 	movi	r5,1
  10f254:	d811883a 	mov	r8,sp
  10f258:	947ff316 	blt	r18,r17,10f228 <black_to_red_frame+0xfe10f228>
  10f25c:	e013883a 	mov	r9,fp
  10f260:	d8812517 	ldw	r2,1172(sp)
  10f264:	1c47883a 	add	r3,r3,r17
  10f268:	44400115 	stw	r17,4(r8)
  10f26c:	40800015 	stw	r2,0(r8)
  10f270:	d8c11c15 	stw	r3,1136(sp)
  10f274:	d9411b15 	stw	r5,1132(sp)
  10f278:	008001c4 	movi	r2,7
  10f27c:	11414c0e 	bge	r2,r5,10f7b0 <___vfiprintf_internal_r+0xd14>
  10f280:	1801431e 	bne	r3,zero,10f790 <___vfiprintf_internal_r+0xcf4>
  10f284:	d8c12117 	ldw	r3,1156(sp)
  10f288:	a0c28e16 	blt	r20,r3,10fcc4 <___vfiprintf_internal_r+0x1228>
  10f28c:	d9012417 	ldw	r4,1168(sp)
  10f290:	2509883a 	add	r4,r4,r20
  10f294:	d9012415 	stw	r4,1168(sp)
  10f298:	00015306 	br	10f7e8 <___vfiprintf_internal_r+0xd4c>
  10f29c:	8c400414 	ori	r17,r17,16
  10f2a0:	8880080c 	andi	r2,r17,32
  10f2a4:	b811883a 	mov	r8,r23
  10f2a8:	3025883a 	mov	r18,r6
  10f2ac:	10005f26 	beq	r2,zero,10f42c <___vfiprintf_internal_r+0x990>
  10f2b0:	d8812317 	ldw	r2,1164(sp)
  10f2b4:	d8c12317 	ldw	r3,1164(sp)
  10f2b8:	15000017 	ldw	r20,0(r2)
  10f2bc:	15400117 	ldw	r21,4(r2)
  10f2c0:	18c00204 	addi	r3,r3,8
  10f2c4:	0005883a 	mov	r2,zero
  10f2c8:	d8c12315 	stw	r3,1164(sp)
  10f2cc:	a548b03a 	or	r4,r20,r21
  10f2d0:	d8011d85 	stb	zero,1142(sp)
  10f2d4:	900f883a 	mov	r7,r18
  10f2d8:	002d883a 	mov	r22,zero
  10f2dc:	003f2b06 	br	10ef8c <black_to_red_frame+0xfe10ef8c>
  10f2e0:	8c400414 	ori	r17,r17,16
  10f2e4:	8880080c 	andi	r2,r17,32
  10f2e8:	b811883a 	mov	r8,r23
  10f2ec:	3025883a 	mov	r18,r6
  10f2f0:	1000a826 	beq	r2,zero,10f594 <___vfiprintf_internal_r+0xaf8>
  10f2f4:	d8812317 	ldw	r2,1164(sp)
  10f2f8:	d8c12317 	ldw	r3,1164(sp)
  10f2fc:	15000017 	ldw	r20,0(r2)
  10f300:	15400117 	ldw	r21,4(r2)
  10f304:	18c00204 	addi	r3,r3,8
  10f308:	00800044 	movi	r2,1
  10f30c:	d8c12315 	stw	r3,1164(sp)
  10f310:	a548b03a 	or	r4,r20,r21
  10f314:	003fee06 	br	10f2d0 <black_to_red_frame+0xfe10f2d0>
  10f318:	01400474 	movhi	r5,17
  10f31c:	295a2e04 	addi	r5,r5,26808
  10f320:	dd811d85 	stb	r22,1142(sp)
  10f324:	d9412715 	stw	r5,1180(sp)
  10f328:	8880080c 	andi	r2,r17,32
  10f32c:	b811883a 	mov	r8,r23
  10f330:	3025883a 	mov	r18,r6
  10f334:	1000a926 	beq	r2,zero,10f5dc <___vfiprintf_internal_r+0xb40>
  10f338:	d9412317 	ldw	r5,1164(sp)
  10f33c:	2d000017 	ldw	r20,0(r5)
  10f340:	2d400117 	ldw	r21,4(r5)
  10f344:	29400204 	addi	r5,r5,8
  10f348:	d9412315 	stw	r5,1164(sp)
  10f34c:	8880004c 	andi	r2,r17,1
  10f350:	1001d126 	beq	r2,zero,10fa98 <___vfiprintf_internal_r+0xffc>
  10f354:	a548b03a 	or	r4,r20,r21
  10f358:	20021626 	beq	r4,zero,10fbb4 <___vfiprintf_internal_r+0x1118>
  10f35c:	00800c04 	movi	r2,48
  10f360:	d8811d05 	stb	r2,1140(sp)
  10f364:	d8c11d45 	stb	r3,1141(sp)
  10f368:	8c400094 	ori	r17,r17,2
  10f36c:	00800084 	movi	r2,2
  10f370:	003fd706 	br	10f2d0 <black_to_red_frame+0xfe10f2d0>
  10f374:	d9412317 	ldw	r5,1164(sp)
  10f378:	05000044 	movi	r20,1
  10f37c:	b811883a 	mov	r8,r23
  10f380:	28800017 	ldw	r2,0(r5)
  10f384:	29400104 	addi	r5,r5,4
  10f388:	d8011d85 	stb	zero,1142(sp)
  10f38c:	d8810005 	stb	r2,1024(sp)
  10f390:	d9412315 	stw	r5,1164(sp)
  10f394:	a00f883a 	mov	r7,r20
  10f398:	ddc10004 	addi	r23,sp,1024
  10f39c:	0025883a 	mov	r18,zero
  10f3a0:	003f0f06 	br	10efe0 <black_to_red_frame+0xfe10efe0>
  10f3a4:	b0803fcc 	andi	r2,r22,255
  10f3a8:	1080201c 	xori	r2,r2,128
  10f3ac:	10bfe004 	addi	r2,r2,-128
  10f3b0:	10021f1e 	bne	r2,zero,10fc30 <___vfiprintf_internal_r+0x1194>
  10f3b4:	05800804 	movi	r22,32
  10f3b8:	48c00007 	ldb	r3,0(r9)
  10f3bc:	003e1706 	br	10ec1c <black_to_red_frame+0xfe10ec1c>
  10f3c0:	8c400054 	ori	r17,r17,1
  10f3c4:	48c00007 	ldb	r3,0(r9)
  10f3c8:	003e1406 	br	10ec1c <black_to_red_frame+0xfe10ec1c>
  10f3cc:	48c00007 	ldb	r3,0(r9)
  10f3d0:	01001b04 	movi	r4,108
  10f3d4:	4805883a 	mov	r2,r9
  10f3d8:	19026526 	beq	r3,r4,10fd70 <___vfiprintf_internal_r+0x12d4>
  10f3dc:	8c400414 	ori	r17,r17,16
  10f3e0:	003e0e06 	br	10ec1c <black_to_red_frame+0xfe10ec1c>
  10f3e4:	dd811d85 	stb	r22,1142(sp)
  10f3e8:	8880080c 	andi	r2,r17,32
  10f3ec:	b811883a 	mov	r8,r23
  10f3f0:	10020426 	beq	r2,zero,10fc04 <___vfiprintf_internal_r+0x1168>
  10f3f4:	d8c12317 	ldw	r3,1164(sp)
  10f3f8:	d9012417 	ldw	r4,1168(sp)
  10f3fc:	d9412317 	ldw	r5,1164(sp)
  10f400:	18800017 	ldw	r2,0(r3)
  10f404:	2007d7fa 	srai	r3,r4,31
  10f408:	29400104 	addi	r5,r5,4
  10f40c:	d9412315 	stw	r5,1164(sp)
  10f410:	11000015 	stw	r4,0(r2)
  10f414:	10c00115 	stw	r3,4(r2)
  10f418:	003dd706 	br	10eb78 <black_to_red_frame+0xfe10eb78>
  10f41c:	8880080c 	andi	r2,r17,32
  10f420:	b811883a 	mov	r8,r23
  10f424:	3025883a 	mov	r18,r6
  10f428:	103fa11e 	bne	r2,zero,10f2b0 <black_to_red_frame+0xfe10f2b0>
  10f42c:	8880040c 	andi	r2,r17,16
  10f430:	1001ea26 	beq	r2,zero,10fbdc <___vfiprintf_internal_r+0x1140>
  10f434:	d9012317 	ldw	r4,1164(sp)
  10f438:	002b883a 	mov	r21,zero
  10f43c:	0005883a 	mov	r2,zero
  10f440:	25000017 	ldw	r20,0(r4)
  10f444:	21000104 	addi	r4,r4,4
  10f448:	d9012315 	stw	r4,1164(sp)
  10f44c:	a009883a 	mov	r4,r20
  10f450:	003f9f06 	br	10f2d0 <black_to_red_frame+0xfe10f2d0>
  10f454:	d8812317 	ldw	r2,1164(sp)
  10f458:	d8c12317 	ldw	r3,1164(sp)
  10f45c:	10800017 	ldw	r2,0(r2)
  10f460:	d8812115 	stw	r2,1156(sp)
  10f464:	d9012117 	ldw	r4,1156(sp)
  10f468:	18800104 	addi	r2,r3,4
  10f46c:	203e9a16 	blt	r4,zero,10eed8 <black_to_red_frame+0xfe10eed8>
  10f470:	d8812315 	stw	r2,1164(sp)
  10f474:	48c00007 	ldb	r3,0(r9)
  10f478:	003de806 	br	10ec1c <black_to_red_frame+0xfe10ec1c>
  10f47c:	05800ac4 	movi	r22,43
  10f480:	48c00007 	ldb	r3,0(r9)
  10f484:	003de506 	br	10ec1c <black_to_red_frame+0xfe10ec1c>
  10f488:	48c00007 	ldb	r3,0(r9)
  10f48c:	01000a84 	movi	r4,42
  10f490:	48800044 	addi	r2,r9,1
  10f494:	19028326 	beq	r3,r4,10fea4 <___vfiprintf_internal_r+0x1408>
  10f498:	1f3ff404 	addi	fp,r3,-48
  10f49c:	af027a36 	bltu	r21,fp,10fe88 <___vfiprintf_internal_r+0x13ec>
  10f4a0:	1025883a 	mov	r18,r2
  10f4a4:	0009883a 	mov	r4,zero
  10f4a8:	00000106 	br	10f4b0 <___vfiprintf_internal_r+0xa14>
  10f4ac:	4825883a 	mov	r18,r9
  10f4b0:	01400284 	movi	r5,10
  10f4b4:	0103f1c0 	call	103f1c <__mulsi3>
  10f4b8:	90c00007 	ldb	r3,0(r18)
  10f4bc:	e089883a 	add	r4,fp,r2
  10f4c0:	92400044 	addi	r9,r18,1
  10f4c4:	1f3ff404 	addi	fp,r3,-48
  10f4c8:	af3ff82e 	bgeu	r21,fp,10f4ac <black_to_red_frame+0xfe10f4ac>
  10f4cc:	2025883a 	mov	r18,r4
  10f4d0:	20022416 	blt	r4,zero,10fd64 <___vfiprintf_internal_r+0x12c8>
  10f4d4:	900d883a 	mov	r6,r18
  10f4d8:	003dd106 	br	10ec20 <black_to_red_frame+0xfe10ec20>
  10f4dc:	8c401014 	ori	r17,r17,64
  10f4e0:	48c00007 	ldb	r3,0(r9)
  10f4e4:	003dcd06 	br	10ec1c <black_to_red_frame+0xfe10ec1c>
  10f4e8:	dd811d85 	stb	r22,1142(sp)
  10f4ec:	8880080c 	andi	r2,r17,32
  10f4f0:	b811883a 	mov	r8,r23
  10f4f4:	3025883a 	mov	r18,r6
  10f4f8:	103e991e 	bne	r2,zero,10ef60 <black_to_red_frame+0xfe10ef60>
  10f4fc:	8880040c 	andi	r2,r17,16
  10f500:	1001d726 	beq	r2,zero,10fc60 <___vfiprintf_internal_r+0x11c4>
  10f504:	d9012317 	ldw	r4,1164(sp)
  10f508:	25000017 	ldw	r20,0(r4)
  10f50c:	21000104 	addi	r4,r4,4
  10f510:	d9012315 	stw	r4,1164(sp)
  10f514:	a02bd7fa 	srai	r21,r20,31
  10f518:	a805883a 	mov	r2,r21
  10f51c:	003e9606 	br	10ef78 <black_to_red_frame+0xfe10ef78>
  10f520:	8c400814 	ori	r17,r17,32
  10f524:	48c00007 	ldb	r3,0(r9)
  10f528:	003dbc06 	br	10ec1c <black_to_red_frame+0xfe10ec1c>
  10f52c:	d9412317 	ldw	r5,1164(sp)
  10f530:	b811883a 	mov	r8,r23
  10f534:	d8011d85 	stb	zero,1142(sp)
  10f538:	2dc00017 	ldw	r23,0(r5)
  10f53c:	3025883a 	mov	r18,r6
  10f540:	2d400104 	addi	r21,r5,4
  10f544:	b8022f26 	beq	r23,zero,10fe04 <___vfiprintf_internal_r+0x1368>
  10f548:	b809883a 	mov	r4,r23
  10f54c:	30020f16 	blt	r6,zero,10fd8c <___vfiprintf_internal_r+0x12f0>
  10f550:	000b883a 	mov	r5,zero
  10f554:	da012b15 	stw	r8,1196(sp)
  10f558:	da412d15 	stw	r9,1204(sp)
  10f55c:	010b8740 	call	10b874 <memchr>
  10f560:	da012b17 	ldw	r8,1196(sp)
  10f564:	da412d17 	ldw	r9,1204(sp)
  10f568:	10024226 	beq	r2,zero,10fe74 <___vfiprintf_internal_r+0x13d8>
  10f56c:	15cfc83a 	sub	r7,r2,r23
  10f570:	91c1d616 	blt	r18,r7,10fccc <___vfiprintf_internal_r+0x1230>
  10f574:	dd811d83 	ldbu	r22,1142(sp)
  10f578:	dd412315 	stw	r21,1164(sp)
  10f57c:	0025883a 	mov	r18,zero
  10f580:	003e8f06 	br	10efc0 <black_to_red_frame+0xfe10efc0>
  10f584:	8880080c 	andi	r2,r17,32
  10f588:	b811883a 	mov	r8,r23
  10f58c:	3025883a 	mov	r18,r6
  10f590:	103f581e 	bne	r2,zero,10f2f4 <black_to_red_frame+0xfe10f2f4>
  10f594:	8880040c 	andi	r2,r17,16
  10f598:	1001a726 	beq	r2,zero,10fc38 <___vfiprintf_internal_r+0x119c>
  10f59c:	d9012317 	ldw	r4,1164(sp)
  10f5a0:	002b883a 	mov	r21,zero
  10f5a4:	00800044 	movi	r2,1
  10f5a8:	25000017 	ldw	r20,0(r4)
  10f5ac:	21000104 	addi	r4,r4,4
  10f5b0:	d9012315 	stw	r4,1164(sp)
  10f5b4:	a009883a 	mov	r4,r20
  10f5b8:	003f4506 	br	10f2d0 <black_to_red_frame+0xfe10f2d0>
  10f5bc:	01000474 	movhi	r4,17
  10f5c0:	211a3304 	addi	r4,r4,26828
  10f5c4:	dd811d85 	stb	r22,1142(sp)
  10f5c8:	d9012715 	stw	r4,1180(sp)
  10f5cc:	8880080c 	andi	r2,r17,32
  10f5d0:	b811883a 	mov	r8,r23
  10f5d4:	3025883a 	mov	r18,r6
  10f5d8:	103f571e 	bne	r2,zero,10f338 <black_to_red_frame+0xfe10f338>
  10f5dc:	8880040c 	andi	r2,r17,16
  10f5e0:	10017626 	beq	r2,zero,10fbbc <___vfiprintf_internal_r+0x1120>
  10f5e4:	d8812317 	ldw	r2,1164(sp)
  10f5e8:	002b883a 	mov	r21,zero
  10f5ec:	15000017 	ldw	r20,0(r2)
  10f5f0:	10800104 	addi	r2,r2,4
  10f5f4:	d8812315 	stw	r2,1164(sp)
  10f5f8:	003f5406 	br	10f34c <black_to_red_frame+0xfe10f34c>
  10f5fc:	d8c12317 	ldw	r3,1164(sp)
  10f600:	00800c04 	movi	r2,48
  10f604:	01000474 	movhi	r4,17
  10f608:	211a3304 	addi	r4,r4,26828
  10f60c:	1d000017 	ldw	r20,0(r3)
  10f610:	d8811d05 	stb	r2,1140(sp)
  10f614:	18c00104 	addi	r3,r3,4
  10f618:	00801e04 	movi	r2,120
  10f61c:	d8811d45 	stb	r2,1141(sp)
  10f620:	d9012715 	stw	r4,1180(sp)
  10f624:	b811883a 	mov	r8,r23
  10f628:	3025883a 	mov	r18,r6
  10f62c:	002b883a 	mov	r21,zero
  10f630:	8c400094 	ori	r17,r17,2
  10f634:	d8c12315 	stw	r3,1164(sp)
  10f638:	00800084 	movi	r2,2
  10f63c:	a009883a 	mov	r4,r20
  10f640:	003f2306 	br	10f2d0 <black_to_red_frame+0xfe10f2d0>
  10f644:	dd811d85 	stb	r22,1142(sp)
  10f648:	b811883a 	mov	r8,r23
  10f64c:	18004426 	beq	r3,zero,10f760 <___vfiprintf_internal_r+0xcc4>
  10f650:	05000044 	movi	r20,1
  10f654:	d8c10005 	stb	r3,1024(sp)
  10f658:	d8011d85 	stb	zero,1142(sp)
  10f65c:	a00f883a 	mov	r7,r20
  10f660:	ddc10004 	addi	r23,sp,1024
  10f664:	0025883a 	mov	r18,zero
  10f668:	003e5d06 	br	10efe0 <black_to_red_frame+0xfe10efe0>
  10f66c:	d9012217 	ldw	r4,1160(sp)
  10f670:	d9412017 	ldw	r5,1152(sp)
  10f674:	d9811a04 	addi	r6,sp,1128
  10f678:	db012b15 	stw	r12,1196(sp)
  10f67c:	010e9880 	call	10e988 <__sprint_r.part.0>
  10f680:	db012b17 	ldw	r12,1196(sp)
  10f684:	10003c1e 	bne	r2,zero,10f778 <___vfiprintf_internal_r+0xcdc>
  10f688:	d9011b17 	ldw	r4,1132(sp)
  10f68c:	d8c11c17 	ldw	r3,1136(sp)
  10f690:	d811883a 	mov	r8,sp
  10f694:	21400044 	addi	r5,r4,1
  10f698:	003e6a06 	br	10f044 <black_to_red_frame+0xfe10f044>
  10f69c:	d9411b17 	ldw	r5,1132(sp)
  10f6a0:	d8c11c17 	ldw	r3,1136(sp)
  10f6a4:	28800044 	addi	r2,r5,1
  10f6a8:	d9011d87 	ldb	r4,1142(sp)
  10f6ac:	203e8526 	beq	r4,zero,10f0c4 <black_to_red_frame+0xfe10f0c4>
  10f6b0:	01000044 	movi	r4,1
  10f6b4:	d9411d84 	addi	r5,sp,1142
  10f6b8:	1907883a 	add	r3,r3,r4
  10f6bc:	41400015 	stw	r5,0(r8)
  10f6c0:	41000115 	stw	r4,4(r8)
  10f6c4:	d8c11c15 	stw	r3,1136(sp)
  10f6c8:	d8811b15 	stw	r2,1132(sp)
  10f6cc:	014001c4 	movi	r5,7
  10f6d0:	28809816 	blt	r5,r2,10f934 <___vfiprintf_internal_r+0xe98>
  10f6d4:	100b883a 	mov	r5,r2
  10f6d8:	42000204 	addi	r8,r8,8
  10f6dc:	1105883a 	add	r2,r2,r4
  10f6e0:	003e7806 	br	10f0c4 <black_to_red_frame+0xfe10f0c4>
  10f6e4:	d9012217 	ldw	r4,1160(sp)
  10f6e8:	d9412017 	ldw	r5,1152(sp)
  10f6ec:	d9811a04 	addi	r6,sp,1128
  10f6f0:	010e9880 	call	10e988 <__sprint_r.part.0>
  10f6f4:	1000201e 	bne	r2,zero,10f778 <___vfiprintf_internal_r+0xcdc>
  10f6f8:	d9411b17 	ldw	r5,1132(sp)
  10f6fc:	d8c11c17 	ldw	r3,1136(sp)
  10f700:	d811883a 	mov	r8,sp
  10f704:	28800044 	addi	r2,r5,1
  10f708:	003e8c06 	br	10f13c <black_to_red_frame+0xfe10f13c>
  10f70c:	00c00044 	movi	r3,1
  10f710:	10c0ab26 	beq	r2,r3,10f9c0 <___vfiprintf_internal_r+0xf24>
  10f714:	00c00084 	movi	r3,2
  10f718:	10c0901e 	bne	r2,r3,10f95c <___vfiprintf_internal_r+0xec0>
  10f71c:	d9412717 	ldw	r5,1180(sp)
  10f720:	d88109c4 	addi	r2,sp,1063
  10f724:	a0c003cc 	andi	r3,r20,15
  10f728:	a808973a 	slli	r4,r21,28
  10f72c:	28c7883a 	add	r3,r5,r3
  10f730:	a028d13a 	srli	r20,r20,4
  10f734:	18c00003 	ldbu	r3,0(r3)
  10f738:	a82ad13a 	srli	r21,r21,4
  10f73c:	2528b03a 	or	r20,r4,r20
  10f740:	10c00005 	stb	r3,0(r2)
  10f744:	a546b03a 	or	r3,r20,r21
  10f748:	102f883a 	mov	r23,r2
  10f74c:	10bfffc4 	addi	r2,r2,-1
  10f750:	183ff41e 	bne	r3,zero,10f724 <black_to_red_frame+0xfe10f724>
  10f754:	d8811f17 	ldw	r2,1148(sp)
  10f758:	15cfc83a 	sub	r7,r2,r23
  10f75c:	003e1806 	br	10efc0 <black_to_red_frame+0xfe10efc0>
  10f760:	d8811c17 	ldw	r2,1136(sp)
  10f764:	10000426 	beq	r2,zero,10f778 <___vfiprintf_internal_r+0xcdc>
  10f768:	d9012217 	ldw	r4,1160(sp)
  10f76c:	d9412017 	ldw	r5,1152(sp)
  10f770:	d9811a04 	addi	r6,sp,1128
  10f774:	010e9880 	call	10e988 <__sprint_r.part.0>
  10f778:	d8c12017 	ldw	r3,1152(sp)
  10f77c:	1880030b 	ldhu	r2,12(r3)
  10f780:	1080100c 	andi	r2,r2,64
  10f784:	103dc31e 	bne	r2,zero,10ee94 <black_to_red_frame+0xfe10ee94>
  10f788:	d8812417 	ldw	r2,1168(sp)
  10f78c:	003dc206 	br	10ee98 <black_to_red_frame+0xfe10ee98>
  10f790:	d9012217 	ldw	r4,1160(sp)
  10f794:	d9412017 	ldw	r5,1152(sp)
  10f798:	d9811a04 	addi	r6,sp,1128
  10f79c:	da412d15 	stw	r9,1204(sp)
  10f7a0:	010e9880 	call	10e988 <__sprint_r.part.0>
  10f7a4:	da412d17 	ldw	r9,1204(sp)
  10f7a8:	103ff31e 	bne	r2,zero,10f778 <black_to_red_frame+0xfe10f778>
  10f7ac:	d8c11c17 	ldw	r3,1136(sp)
  10f7b0:	d9412117 	ldw	r5,1156(sp)
  10f7b4:	a140010e 	bge	r20,r5,10f7bc <___vfiprintf_internal_r+0xd20>
  10f7b8:	2829883a 	mov	r20,r5
  10f7bc:	d8812417 	ldw	r2,1168(sp)
  10f7c0:	1505883a 	add	r2,r2,r20
  10f7c4:	d8812415 	stw	r2,1168(sp)
  10f7c8:	18000726 	beq	r3,zero,10f7e8 <___vfiprintf_internal_r+0xd4c>
  10f7cc:	d9012217 	ldw	r4,1160(sp)
  10f7d0:	d9412017 	ldw	r5,1152(sp)
  10f7d4:	d9811a04 	addi	r6,sp,1128
  10f7d8:	da412d15 	stw	r9,1204(sp)
  10f7dc:	010e9880 	call	10e988 <__sprint_r.part.0>
  10f7e0:	da412d17 	ldw	r9,1204(sp)
  10f7e4:	103fe41e 	bne	r2,zero,10f778 <black_to_red_frame+0xfe10f778>
  10f7e8:	d8011b15 	stw	zero,1132(sp)
  10f7ec:	d811883a 	mov	r8,sp
  10f7f0:	003ce106 	br	10eb78 <black_to_red_frame+0xfe10eb78>
  10f7f4:	a809883a 	mov	r4,r21
  10f7f8:	b80b883a 	mov	r5,r23
  10f7fc:	d9811a04 	addi	r6,sp,1128
  10f800:	010e9880 	call	10e988 <__sprint_r.part.0>
  10f804:	103fdc1e 	bne	r2,zero,10f778 <black_to_red_frame+0xfe10f778>
  10f808:	d9011b17 	ldw	r4,1132(sp)
  10f80c:	d8c11c17 	ldw	r3,1136(sp)
  10f810:	d811883a 	mov	r8,sp
  10f814:	21400044 	addi	r5,r4,1
  10f818:	003e8106 	br	10f220 <black_to_red_frame+0xfe10f220>
  10f81c:	1800cb1e 	bne	r3,zero,10fb4c <___vfiprintf_internal_r+0x10b0>
  10f820:	00800044 	movi	r2,1
  10f824:	ddc00015 	stw	r23,0(sp)
  10f828:	d9c00115 	stw	r7,4(sp)
  10f82c:	d9c11c15 	stw	r7,1136(sp)
  10f830:	d8811b15 	stw	r2,1132(sp)
  10f834:	3807883a 	mov	r3,r7
  10f838:	d811883a 	mov	r8,sp
  10f83c:	42000204 	addi	r8,r8,8
  10f840:	003e6406 	br	10f1d4 <black_to_red_frame+0xfe10f1d4>
  10f844:	d9012117 	ldw	r4,1156(sp)
  10f848:	252dc83a 	sub	r22,r4,r20
  10f84c:	05be2c0e 	bge	zero,r22,10f100 <black_to_red_frame+0xfe10f100>
  10f850:	07000404 	movi	fp,16
  10f854:	e581830e 	bge	fp,r22,10fe64 <___vfiprintf_internal_r+0x13c8>
  10f858:	05400474 	movhi	r21,17
  10f85c:	ad5aa404 	addi	r21,r21,27280
  10f860:	dc412515 	stw	r17,1172(sp)
  10f864:	028001c4 	movi	r10,7
  10f868:	b023883a 	mov	r17,r22
  10f86c:	d9c12615 	stw	r7,1176(sp)
  10f870:	a82d883a 	mov	r22,r21
  10f874:	482b883a 	mov	r21,r9
  10f878:	00000506 	br	10f890 <___vfiprintf_internal_r+0xdf4>
  10f87c:	29000084 	addi	r4,r5,2
  10f880:	42000204 	addi	r8,r8,8
  10f884:	100b883a 	mov	r5,r2
  10f888:	8c7ffc04 	addi	r17,r17,-16
  10f88c:	e4400d0e 	bge	fp,r17,10f8c4 <___vfiprintf_internal_r+0xe28>
  10f890:	18c00404 	addi	r3,r3,16
  10f894:	28800044 	addi	r2,r5,1
  10f898:	44000015 	stw	r16,0(r8)
  10f89c:	47000115 	stw	fp,4(r8)
  10f8a0:	d8c11c15 	stw	r3,1136(sp)
  10f8a4:	d8811b15 	stw	r2,1132(sp)
  10f8a8:	50bff40e 	bge	r10,r2,10f87c <black_to_red_frame+0xfe10f87c>
  10f8ac:	1800151e 	bne	r3,zero,10f904 <___vfiprintf_internal_r+0xe68>
  10f8b0:	8c7ffc04 	addi	r17,r17,-16
  10f8b4:	000b883a 	mov	r5,zero
  10f8b8:	01000044 	movi	r4,1
  10f8bc:	d811883a 	mov	r8,sp
  10f8c0:	e47ff316 	blt	fp,r17,10f890 <black_to_red_frame+0xfe10f890>
  10f8c4:	a813883a 	mov	r9,r21
  10f8c8:	d9c12617 	ldw	r7,1176(sp)
  10f8cc:	b02b883a 	mov	r21,r22
  10f8d0:	882d883a 	mov	r22,r17
  10f8d4:	dc412517 	ldw	r17,1172(sp)
  10f8d8:	1d87883a 	add	r3,r3,r22
  10f8dc:	45400015 	stw	r21,0(r8)
  10f8e0:	45800115 	stw	r22,4(r8)
  10f8e4:	d8c11c15 	stw	r3,1136(sp)
  10f8e8:	d9011b15 	stw	r4,1132(sp)
  10f8ec:	008001c4 	movi	r2,7
  10f8f0:	11009116 	blt	r2,r4,10fb38 <___vfiprintf_internal_r+0x109c>
  10f8f4:	42000204 	addi	r8,r8,8
  10f8f8:	20800044 	addi	r2,r4,1
  10f8fc:	200b883a 	mov	r5,r4
  10f900:	003dff06 	br	10f100 <black_to_red_frame+0xfe10f100>
  10f904:	d9012217 	ldw	r4,1160(sp)
  10f908:	d9412017 	ldw	r5,1152(sp)
  10f90c:	d9811a04 	addi	r6,sp,1128
  10f910:	da812c15 	stw	r10,1200(sp)
  10f914:	010e9880 	call	10e988 <__sprint_r.part.0>
  10f918:	da812c17 	ldw	r10,1200(sp)
  10f91c:	103f961e 	bne	r2,zero,10f778 <black_to_red_frame+0xfe10f778>
  10f920:	d9411b17 	ldw	r5,1132(sp)
  10f924:	d8c11c17 	ldw	r3,1136(sp)
  10f928:	d811883a 	mov	r8,sp
  10f92c:	29000044 	addi	r4,r5,1
  10f930:	003fd506 	br	10f888 <black_to_red_frame+0xfe10f888>
  10f934:	1800701e 	bne	r3,zero,10faf8 <___vfiprintf_internal_r+0x105c>
  10f938:	000b883a 	mov	r5,zero
  10f93c:	2005883a 	mov	r2,r4
  10f940:	d811883a 	mov	r8,sp
  10f944:	003ddf06 	br	10f0c4 <black_to_red_frame+0xfe10f0c4>
  10f948:	18005d1e 	bne	r3,zero,10fac0 <___vfiprintf_internal_r+0x1024>
  10f94c:	000b883a 	mov	r5,zero
  10f950:	00800044 	movi	r2,1
  10f954:	d811883a 	mov	r8,sp
  10f958:	003de706 	br	10f0f8 <black_to_red_frame+0xfe10f0f8>
  10f95c:	d8c109c4 	addi	r3,sp,1063
  10f960:	a008d0fa 	srli	r4,r20,3
  10f964:	a80a977a 	slli	r5,r21,29
  10f968:	a82ad0fa 	srli	r21,r21,3
  10f96c:	a50001cc 	andi	r20,r20,7
  10f970:	a0800c04 	addi	r2,r20,48
  10f974:	2928b03a 	or	r20,r5,r4
  10f978:	18800005 	stb	r2,0(r3)
  10f97c:	a548b03a 	or	r4,r20,r21
  10f980:	182f883a 	mov	r23,r3
  10f984:	18ffffc4 	addi	r3,r3,-1
  10f988:	203ff51e 	bne	r4,zero,10f960 <black_to_red_frame+0xfe10f960>
  10f98c:	8900004c 	andi	r4,r17,1
  10f990:	b80b883a 	mov	r5,r23
  10f994:	203f6f26 	beq	r4,zero,10f754 <black_to_red_frame+0xfe10f754>
  10f998:	10803fcc 	andi	r2,r2,255
  10f99c:	1080201c 	xori	r2,r2,128
  10f9a0:	10bfe004 	addi	r2,r2,-128
  10f9a4:	01000c04 	movi	r4,48
  10f9a8:	1100f526 	beq	r2,r4,10fd80 <___vfiprintf_internal_r+0x12e4>
  10f9ac:	293fffc5 	stb	r4,-1(r5)
  10f9b0:	d9011f17 	ldw	r4,1148(sp)
  10f9b4:	182f883a 	mov	r23,r3
  10f9b8:	20cfc83a 	sub	r7,r4,r3
  10f9bc:	003d8006 	br	10efc0 <black_to_red_frame+0xfe10efc0>
  10f9c0:	a800021e 	bne	r21,zero,10f9cc <___vfiprintf_internal_r+0xf30>
  10f9c4:	00800244 	movi	r2,9
  10f9c8:	15001d2e 	bgeu	r2,r20,10fa40 <___vfiprintf_internal_r+0xfa4>
  10f9cc:	dc412515 	stw	r17,1172(sp)
  10f9d0:	d88109c4 	addi	r2,sp,1063
  10f9d4:	a823883a 	mov	r17,r21
  10f9d8:	4039883a 	mov	fp,r8
  10f9dc:	482b883a 	mov	r21,r9
  10f9e0:	a009883a 	mov	r4,r20
  10f9e4:	880b883a 	mov	r5,r17
  10f9e8:	01800284 	movi	r6,10
  10f9ec:	000f883a 	mov	r7,zero
  10f9f0:	102f883a 	mov	r23,r2
  10f9f4:	0110f7c0 	call	110f7c <__umoddi3>
  10f9f8:	10800c04 	addi	r2,r2,48
  10f9fc:	a009883a 	mov	r4,r20
  10fa00:	880b883a 	mov	r5,r17
  10fa04:	b8800005 	stb	r2,0(r23)
  10fa08:	01800284 	movi	r6,10
  10fa0c:	000f883a 	mov	r7,zero
  10fa10:	01109280 	call	110928 <__udivdi3>
  10fa14:	1823883a 	mov	r17,r3
  10fa18:	10c6b03a 	or	r3,r2,r3
  10fa1c:	1029883a 	mov	r20,r2
  10fa20:	b8bfffc4 	addi	r2,r23,-1
  10fa24:	183fee1e 	bne	r3,zero,10f9e0 <black_to_red_frame+0xfe10f9e0>
  10fa28:	d9411f17 	ldw	r5,1148(sp)
  10fa2c:	e011883a 	mov	r8,fp
  10fa30:	dc412517 	ldw	r17,1172(sp)
  10fa34:	a813883a 	mov	r9,r21
  10fa38:	2dcfc83a 	sub	r7,r5,r23
  10fa3c:	003d6006 	br	10efc0 <black_to_red_frame+0xfe10efc0>
  10fa40:	a5000c04 	addi	r20,r20,48
  10fa44:	dd0109c5 	stb	r20,1063(sp)
  10fa48:	d9c12817 	ldw	r7,1184(sp)
  10fa4c:	ddc109c4 	addi	r23,sp,1063
  10fa50:	003d5b06 	br	10efc0 <black_to_red_frame+0xfe10efc0>
  10fa54:	ddc10a04 	addi	r23,sp,1064
  10fa58:	003d5906 	br	10efc0 <black_to_red_frame+0xfe10efc0>
  10fa5c:	1800891e 	bne	r3,zero,10fc84 <___vfiprintf_internal_r+0x11e8>
  10fa60:	000b883a 	mov	r5,zero
  10fa64:	00800044 	movi	r2,1
  10fa68:	d811883a 	mov	r8,sp
  10fa6c:	003f0e06 	br	10f6a8 <black_to_red_frame+0xfe10f6a8>
  10fa70:	d9012217 	ldw	r4,1160(sp)
  10fa74:	d9412017 	ldw	r5,1152(sp)
  10fa78:	d9811a04 	addi	r6,sp,1128
  10fa7c:	da412d15 	stw	r9,1204(sp)
  10fa80:	010e9880 	call	10e988 <__sprint_r.part.0>
  10fa84:	da412d17 	ldw	r9,1204(sp)
  10fa88:	103f3b1e 	bne	r2,zero,10f778 <black_to_red_frame+0xfe10f778>
  10fa8c:	d8c11c17 	ldw	r3,1136(sp)
  10fa90:	d811883a 	mov	r8,sp
  10fa94:	003dcf06 	br	10f1d4 <black_to_red_frame+0xfe10f1d4>
  10fa98:	00800084 	movi	r2,2
  10fa9c:	a548b03a 	or	r4,r20,r21
  10faa0:	003e0b06 	br	10f2d0 <black_to_red_frame+0xfe10f2d0>
  10faa4:	d9012217 	ldw	r4,1160(sp)
  10faa8:	d9412017 	ldw	r5,1152(sp)
  10faac:	d9811a04 	addi	r6,sp,1128
  10fab0:	010e9880 	call	10e988 <__sprint_r.part.0>
  10fab4:	103f301e 	bne	r2,zero,10f778 <black_to_red_frame+0xfe10f778>
  10fab8:	d811883a 	mov	r8,sp
  10fabc:	003cbb06 	br	10edac <black_to_red_frame+0xfe10edac>
  10fac0:	d9012217 	ldw	r4,1160(sp)
  10fac4:	d9412017 	ldw	r5,1152(sp)
  10fac8:	d9811a04 	addi	r6,sp,1128
  10facc:	d9c12b15 	stw	r7,1196(sp)
  10fad0:	da412d15 	stw	r9,1204(sp)
  10fad4:	010e9880 	call	10e988 <__sprint_r.part.0>
  10fad8:	d9c12b17 	ldw	r7,1196(sp)
  10fadc:	da412d17 	ldw	r9,1204(sp)
  10fae0:	103f251e 	bne	r2,zero,10f778 <black_to_red_frame+0xfe10f778>
  10fae4:	d9411b17 	ldw	r5,1132(sp)
  10fae8:	d8c11c17 	ldw	r3,1136(sp)
  10faec:	d811883a 	mov	r8,sp
  10faf0:	28800044 	addi	r2,r5,1
  10faf4:	003d8006 	br	10f0f8 <black_to_red_frame+0xfe10f0f8>
  10faf8:	d9012217 	ldw	r4,1160(sp)
  10fafc:	d9412017 	ldw	r5,1152(sp)
  10fb00:	d9811a04 	addi	r6,sp,1128
  10fb04:	d9c12b15 	stw	r7,1196(sp)
  10fb08:	da412d15 	stw	r9,1204(sp)
  10fb0c:	da812c15 	stw	r10,1200(sp)
  10fb10:	010e9880 	call	10e988 <__sprint_r.part.0>
  10fb14:	d9c12b17 	ldw	r7,1196(sp)
  10fb18:	da412d17 	ldw	r9,1204(sp)
  10fb1c:	da812c17 	ldw	r10,1200(sp)
  10fb20:	103f151e 	bne	r2,zero,10f778 <black_to_red_frame+0xfe10f778>
  10fb24:	d9411b17 	ldw	r5,1132(sp)
  10fb28:	d8c11c17 	ldw	r3,1136(sp)
  10fb2c:	d811883a 	mov	r8,sp
  10fb30:	28800044 	addi	r2,r5,1
  10fb34:	003d6306 	br	10f0c4 <black_to_red_frame+0xfe10f0c4>
  10fb38:	18009e1e 	bne	r3,zero,10fdb4 <___vfiprintf_internal_r+0x1318>
  10fb3c:	000b883a 	mov	r5,zero
  10fb40:	00800044 	movi	r2,1
  10fb44:	d811883a 	mov	r8,sp
  10fb48:	003d6d06 	br	10f100 <black_to_red_frame+0xfe10f100>
  10fb4c:	d9012217 	ldw	r4,1160(sp)
  10fb50:	d9412017 	ldw	r5,1152(sp)
  10fb54:	d9811a04 	addi	r6,sp,1128
  10fb58:	d9c12b15 	stw	r7,1196(sp)
  10fb5c:	da412d15 	stw	r9,1204(sp)
  10fb60:	010e9880 	call	10e988 <__sprint_r.part.0>
  10fb64:	d9c12b17 	ldw	r7,1196(sp)
  10fb68:	da412d17 	ldw	r9,1204(sp)
  10fb6c:	103f021e 	bne	r2,zero,10f778 <black_to_red_frame+0xfe10f778>
  10fb70:	d8811b17 	ldw	r2,1132(sp)
  10fb74:	d8c11c17 	ldw	r3,1136(sp)
  10fb78:	d811883a 	mov	r8,sp
  10fb7c:	10800044 	addi	r2,r2,1
  10fb80:	003d8a06 	br	10f1ac <black_to_red_frame+0xfe10f1ac>
  10fb84:	4829883a 	mov	r20,r9
  10fb88:	003c1706 	br	10ebe8 <black_to_red_frame+0xfe10ebe8>
  10fb8c:	0529c83a 	sub	r20,zero,r20
  10fb90:	a004c03a 	cmpne	r2,r20,zero
  10fb94:	056bc83a 	sub	r21,zero,r21
  10fb98:	a8abc83a 	sub	r21,r21,r2
  10fb9c:	05800b44 	movi	r22,45
  10fba0:	dd811d85 	stb	r22,1142(sp)
  10fba4:	900f883a 	mov	r7,r18
  10fba8:	00800044 	movi	r2,1
  10fbac:	a548b03a 	or	r4,r20,r21
  10fbb0:	003cf606 	br	10ef8c <black_to_red_frame+0xfe10ef8c>
  10fbb4:	00800084 	movi	r2,2
  10fbb8:	003dc506 	br	10f2d0 <black_to_red_frame+0xfe10f2d0>
  10fbbc:	8880100c 	andi	r2,r17,64
  10fbc0:	10005a26 	beq	r2,zero,10fd2c <___vfiprintf_internal_r+0x1290>
  10fbc4:	d9012317 	ldw	r4,1164(sp)
  10fbc8:	002b883a 	mov	r21,zero
  10fbcc:	2500000b 	ldhu	r20,0(r4)
  10fbd0:	21000104 	addi	r4,r4,4
  10fbd4:	d9012315 	stw	r4,1164(sp)
  10fbd8:	003ddc06 	br	10f34c <black_to_red_frame+0xfe10f34c>
  10fbdc:	8880100c 	andi	r2,r17,64
  10fbe0:	10005826 	beq	r2,zero,10fd44 <___vfiprintf_internal_r+0x12a8>
  10fbe4:	d9412317 	ldw	r5,1164(sp)
  10fbe8:	002b883a 	mov	r21,zero
  10fbec:	0005883a 	mov	r2,zero
  10fbf0:	2d00000b 	ldhu	r20,0(r5)
  10fbf4:	29400104 	addi	r5,r5,4
  10fbf8:	d9412315 	stw	r5,1164(sp)
  10fbfc:	a009883a 	mov	r4,r20
  10fc00:	003db306 	br	10f2d0 <black_to_red_frame+0xfe10f2d0>
  10fc04:	8880040c 	andi	r2,r17,16
  10fc08:	1000411e 	bne	r2,zero,10fd10 <___vfiprintf_internal_r+0x1274>
  10fc0c:	8c40100c 	andi	r17,r17,64
  10fc10:	88008726 	beq	r17,zero,10fe30 <___vfiprintf_internal_r+0x1394>
  10fc14:	d9412317 	ldw	r5,1164(sp)
  10fc18:	d8c12417 	ldw	r3,1168(sp)
  10fc1c:	28800017 	ldw	r2,0(r5)
  10fc20:	29400104 	addi	r5,r5,4
  10fc24:	d9412315 	stw	r5,1164(sp)
  10fc28:	10c0000d 	sth	r3,0(r2)
  10fc2c:	003bd206 	br	10eb78 <black_to_red_frame+0xfe10eb78>
  10fc30:	48c00007 	ldb	r3,0(r9)
  10fc34:	003bf906 	br	10ec1c <black_to_red_frame+0xfe10ec1c>
  10fc38:	8880100c 	andi	r2,r17,64
  10fc3c:	10002c26 	beq	r2,zero,10fcf0 <___vfiprintf_internal_r+0x1254>
  10fc40:	d9412317 	ldw	r5,1164(sp)
  10fc44:	002b883a 	mov	r21,zero
  10fc48:	00800044 	movi	r2,1
  10fc4c:	2d00000b 	ldhu	r20,0(r5)
  10fc50:	29400104 	addi	r5,r5,4
  10fc54:	d9412315 	stw	r5,1164(sp)
  10fc58:	a009883a 	mov	r4,r20
  10fc5c:	003d9c06 	br	10f2d0 <black_to_red_frame+0xfe10f2d0>
  10fc60:	8880100c 	andi	r2,r17,64
  10fc64:	10001b26 	beq	r2,zero,10fcd4 <___vfiprintf_internal_r+0x1238>
  10fc68:	d9412317 	ldw	r5,1164(sp)
  10fc6c:	2d00000f 	ldh	r20,0(r5)
  10fc70:	29400104 	addi	r5,r5,4
  10fc74:	d9412315 	stw	r5,1164(sp)
  10fc78:	a02bd7fa 	srai	r21,r20,31
  10fc7c:	a805883a 	mov	r2,r21
  10fc80:	003cbd06 	br	10ef78 <black_to_red_frame+0xfe10ef78>
  10fc84:	d9012217 	ldw	r4,1160(sp)
  10fc88:	d9412017 	ldw	r5,1152(sp)
  10fc8c:	d9811a04 	addi	r6,sp,1128
  10fc90:	d9c12b15 	stw	r7,1196(sp)
  10fc94:	da412d15 	stw	r9,1204(sp)
  10fc98:	da812c15 	stw	r10,1200(sp)
  10fc9c:	010e9880 	call	10e988 <__sprint_r.part.0>
  10fca0:	d9c12b17 	ldw	r7,1196(sp)
  10fca4:	da412d17 	ldw	r9,1204(sp)
  10fca8:	da812c17 	ldw	r10,1200(sp)
  10fcac:	103eb21e 	bne	r2,zero,10f778 <black_to_red_frame+0xfe10f778>
  10fcb0:	d9411b17 	ldw	r5,1132(sp)
  10fcb4:	d8c11c17 	ldw	r3,1136(sp)
  10fcb8:	d811883a 	mov	r8,sp
  10fcbc:	28800044 	addi	r2,r5,1
  10fcc0:	003e7906 	br	10f6a8 <black_to_red_frame+0xfe10f6a8>
  10fcc4:	1829883a 	mov	r20,r3
  10fcc8:	003d7006 	br	10f28c <black_to_red_frame+0xfe10f28c>
  10fccc:	900f883a 	mov	r7,r18
  10fcd0:	003e2806 	br	10f574 <black_to_red_frame+0xfe10f574>
  10fcd4:	d8812317 	ldw	r2,1164(sp)
  10fcd8:	15000017 	ldw	r20,0(r2)
  10fcdc:	10800104 	addi	r2,r2,4
  10fce0:	d8812315 	stw	r2,1164(sp)
  10fce4:	a02bd7fa 	srai	r21,r20,31
  10fce8:	a805883a 	mov	r2,r21
  10fcec:	003ca206 	br	10ef78 <black_to_red_frame+0xfe10ef78>
  10fcf0:	d8812317 	ldw	r2,1164(sp)
  10fcf4:	002b883a 	mov	r21,zero
  10fcf8:	15000017 	ldw	r20,0(r2)
  10fcfc:	10800104 	addi	r2,r2,4
  10fd00:	d8812315 	stw	r2,1164(sp)
  10fd04:	a009883a 	mov	r4,r20
  10fd08:	00800044 	movi	r2,1
  10fd0c:	003d7006 	br	10f2d0 <black_to_red_frame+0xfe10f2d0>
  10fd10:	d8c12317 	ldw	r3,1164(sp)
  10fd14:	d9012417 	ldw	r4,1168(sp)
  10fd18:	18800017 	ldw	r2,0(r3)
  10fd1c:	18c00104 	addi	r3,r3,4
  10fd20:	d8c12315 	stw	r3,1164(sp)
  10fd24:	11000015 	stw	r4,0(r2)
  10fd28:	003b9306 	br	10eb78 <black_to_red_frame+0xfe10eb78>
  10fd2c:	d9412317 	ldw	r5,1164(sp)
  10fd30:	002b883a 	mov	r21,zero
  10fd34:	2d000017 	ldw	r20,0(r5)
  10fd38:	29400104 	addi	r5,r5,4
  10fd3c:	d9412315 	stw	r5,1164(sp)
  10fd40:	003d8206 	br	10f34c <black_to_red_frame+0xfe10f34c>
  10fd44:	d8812317 	ldw	r2,1164(sp)
  10fd48:	002b883a 	mov	r21,zero
  10fd4c:	15000017 	ldw	r20,0(r2)
  10fd50:	10800104 	addi	r2,r2,4
  10fd54:	d8812315 	stw	r2,1164(sp)
  10fd58:	a009883a 	mov	r4,r20
  10fd5c:	0005883a 	mov	r2,zero
  10fd60:	003d5b06 	br	10f2d0 <black_to_red_frame+0xfe10f2d0>
  10fd64:	04bfffc4 	movi	r18,-1
  10fd68:	900d883a 	mov	r6,r18
  10fd6c:	003bac06 	br	10ec20 <black_to_red_frame+0xfe10ec20>
  10fd70:	4a400044 	addi	r9,r9,1
  10fd74:	8c400814 	ori	r17,r17,32
  10fd78:	10c00047 	ldb	r3,1(r2)
  10fd7c:	003ba706 	br	10ec1c <black_to_red_frame+0xfe10ec1c>
  10fd80:	d8c11f17 	ldw	r3,1148(sp)
  10fd84:	1dcfc83a 	sub	r7,r3,r23
  10fd88:	003c8d06 	br	10efc0 <black_to_red_frame+0xfe10efc0>
  10fd8c:	da012b15 	stw	r8,1196(sp)
  10fd90:	da412d15 	stw	r9,1204(sp)
  10fd94:	01049b00 	call	1049b0 <strlen>
  10fd98:	100f883a 	mov	r7,r2
  10fd9c:	dd811d83 	ldbu	r22,1142(sp)
  10fda0:	dd412315 	stw	r21,1164(sp)
  10fda4:	0025883a 	mov	r18,zero
  10fda8:	da012b17 	ldw	r8,1196(sp)
  10fdac:	da412d17 	ldw	r9,1204(sp)
  10fdb0:	003c8306 	br	10efc0 <black_to_red_frame+0xfe10efc0>
  10fdb4:	d9012217 	ldw	r4,1160(sp)
  10fdb8:	d9412017 	ldw	r5,1152(sp)
  10fdbc:	d9811a04 	addi	r6,sp,1128
  10fdc0:	d9c12b15 	stw	r7,1196(sp)
  10fdc4:	da412d15 	stw	r9,1204(sp)
  10fdc8:	010e9880 	call	10e988 <__sprint_r.part.0>
  10fdcc:	d9c12b17 	ldw	r7,1196(sp)
  10fdd0:	da412d17 	ldw	r9,1204(sp)
  10fdd4:	103e681e 	bne	r2,zero,10f778 <black_to_red_frame+0xfe10f778>
  10fdd8:	d9411b17 	ldw	r5,1132(sp)
  10fddc:	d8c11c17 	ldw	r3,1136(sp)
  10fde0:	d811883a 	mov	r8,sp
  10fde4:	28800044 	addi	r2,r5,1
  10fde8:	003cc506 	br	10f100 <black_to_red_frame+0xfe10f100>
  10fdec:	d9411b17 	ldw	r5,1132(sp)
  10fdf0:	01000474 	movhi	r4,17
  10fdf4:	211aa804 	addi	r4,r4,27296
  10fdf8:	d9012515 	stw	r4,1172(sp)
  10fdfc:	29400044 	addi	r5,r5,1
  10fe00:	003ca406 	br	10f094 <black_to_red_frame+0xfe10f094>
  10fe04:	00800184 	movi	r2,6
  10fe08:	300f883a 	mov	r7,r6
  10fe0c:	1180012e 	bgeu	r2,r6,10fe14 <___vfiprintf_internal_r+0x1378>
  10fe10:	100f883a 	mov	r7,r2
  10fe14:	3829883a 	mov	r20,r7
  10fe18:	38001e16 	blt	r7,zero,10fe94 <___vfiprintf_internal_r+0x13f8>
  10fe1c:	dd412315 	stw	r21,1164(sp)
  10fe20:	05c00474 	movhi	r23,17
  10fe24:	bdda3804 	addi	r23,r23,26848
  10fe28:	0025883a 	mov	r18,zero
  10fe2c:	003c6c06 	br	10efe0 <black_to_red_frame+0xfe10efe0>
  10fe30:	d9012317 	ldw	r4,1164(sp)
  10fe34:	d9412417 	ldw	r5,1168(sp)
  10fe38:	20800017 	ldw	r2,0(r4)
  10fe3c:	21000104 	addi	r4,r4,4
  10fe40:	d9012315 	stw	r4,1164(sp)
  10fe44:	11400015 	stw	r5,0(r2)
  10fe48:	003b4b06 	br	10eb78 <black_to_red_frame+0xfe10eb78>
  10fe4c:	d9411b17 	ldw	r5,1132(sp)
  10fe50:	00800474 	movhi	r2,17
  10fe54:	109aa804 	addi	r2,r2,27296
  10fe58:	d8812515 	stw	r2,1172(sp)
  10fe5c:	29400044 	addi	r5,r5,1
  10fe60:	003cff06 	br	10f260 <black_to_red_frame+0xfe10f260>
  10fe64:	1009883a 	mov	r4,r2
  10fe68:	05400474 	movhi	r21,17
  10fe6c:	ad5aa404 	addi	r21,r21,27280
  10fe70:	003e9906 	br	10f8d8 <black_to_red_frame+0xfe10f8d8>
  10fe74:	900f883a 	mov	r7,r18
  10fe78:	dd811d83 	ldbu	r22,1142(sp)
  10fe7c:	dd412315 	stw	r21,1164(sp)
  10fe80:	0025883a 	mov	r18,zero
  10fe84:	003c4e06 	br	10efc0 <black_to_red_frame+0xfe10efc0>
  10fe88:	1013883a 	mov	r9,r2
  10fe8c:	000d883a 	mov	r6,zero
  10fe90:	003b6306 	br	10ec20 <black_to_red_frame+0xfe10ec20>
  10fe94:	0029883a 	mov	r20,zero
  10fe98:	003fe006 	br	10fe1c <black_to_red_frame+0xfe10fe1c>
  10fe9c:	043fffc4 	movi	r16,-1
  10fea0:	003bf306 	br	10ee70 <black_to_red_frame+0xfe10ee70>
  10fea4:	d9412317 	ldw	r5,1164(sp)
  10fea8:	48c00043 	ldbu	r3,1(r9)
  10feac:	1013883a 	mov	r9,r2
  10feb0:	29800017 	ldw	r6,0(r5)
  10feb4:	29000104 	addi	r4,r5,4
  10feb8:	d9012315 	stw	r4,1164(sp)
  10febc:	30000416 	blt	r6,zero,10fed0 <___vfiprintf_internal_r+0x1434>
  10fec0:	18c03fcc 	andi	r3,r3,255
  10fec4:	18c0201c 	xori	r3,r3,128
  10fec8:	18ffe004 	addi	r3,r3,-128
  10fecc:	003b5306 	br	10ec1c <black_to_red_frame+0xfe10ec1c>
  10fed0:	18c03fcc 	andi	r3,r3,255
  10fed4:	18c0201c 	xori	r3,r3,128
  10fed8:	01bfffc4 	movi	r6,-1
  10fedc:	18ffe004 	addi	r3,r3,-128
  10fee0:	003b4e06 	br	10ec1c <black_to_red_frame+0xfe10ec1c>

0010fee4 <__vfiprintf_internal>:
  10fee4:	008004b4 	movhi	r2,18
  10fee8:	10a1f404 	addi	r2,r2,-30768
  10feec:	2007883a 	mov	r3,r4
  10fef0:	11000017 	ldw	r4,0(r2)
  10fef4:	2805883a 	mov	r2,r5
  10fef8:	300f883a 	mov	r7,r6
  10fefc:	180b883a 	mov	r5,r3
  10ff00:	100d883a 	mov	r6,r2
  10ff04:	010ea9c1 	jmpi	10ea9c <___vfiprintf_internal_r>

0010ff08 <__swbuf_r>:
  10ff08:	defffc04 	addi	sp,sp,-16
  10ff0c:	dc800215 	stw	r18,8(sp)
  10ff10:	dc400115 	stw	r17,4(sp)
  10ff14:	dc000015 	stw	r16,0(sp)
  10ff18:	dfc00315 	stw	ra,12(sp)
  10ff1c:	2023883a 	mov	r17,r4
  10ff20:	2825883a 	mov	r18,r5
  10ff24:	3021883a 	mov	r16,r6
  10ff28:	20000226 	beq	r4,zero,10ff34 <__swbuf_r+0x2c>
  10ff2c:	20800e17 	ldw	r2,56(r4)
  10ff30:	10004d26 	beq	r2,zero,110068 <__swbuf_r+0x160>
  10ff34:	80800617 	ldw	r2,24(r16)
  10ff38:	80c0030b 	ldhu	r3,12(r16)
  10ff3c:	80800215 	stw	r2,8(r16)
  10ff40:	1880020c 	andi	r2,r3,8
  10ff44:	10004126 	beq	r2,zero,11004c <__swbuf_r+0x144>
  10ff48:	80800417 	ldw	r2,16(r16)
  10ff4c:	10003f26 	beq	r2,zero,11004c <__swbuf_r+0x144>
  10ff50:	1908000c 	andi	r4,r3,8192
  10ff54:	94803fcc 	andi	r18,r18,255
  10ff58:	20001726 	beq	r4,zero,10ffb8 <__swbuf_r+0xb0>
  10ff5c:	80c00017 	ldw	r3,0(r16)
  10ff60:	81000517 	ldw	r4,20(r16)
  10ff64:	1885c83a 	sub	r2,r3,r2
  10ff68:	11001d0e 	bge	r2,r4,10ffe0 <__swbuf_r+0xd8>
  10ff6c:	81000217 	ldw	r4,8(r16)
  10ff70:	19400044 	addi	r5,r3,1
  10ff74:	81400015 	stw	r5,0(r16)
  10ff78:	213fffc4 	addi	r4,r4,-1
  10ff7c:	81000215 	stw	r4,8(r16)
  10ff80:	1c800005 	stb	r18,0(r3)
  10ff84:	80c00517 	ldw	r3,20(r16)
  10ff88:	10800044 	addi	r2,r2,1
  10ff8c:	18802226 	beq	r3,r2,110018 <__swbuf_r+0x110>
  10ff90:	8080030b 	ldhu	r2,12(r16)
  10ff94:	1080004c 	andi	r2,r2,1
  10ff98:	1000251e 	bne	r2,zero,110030 <__swbuf_r+0x128>
  10ff9c:	9005883a 	mov	r2,r18
  10ffa0:	dfc00317 	ldw	ra,12(sp)
  10ffa4:	dc800217 	ldw	r18,8(sp)
  10ffa8:	dc400117 	ldw	r17,4(sp)
  10ffac:	dc000017 	ldw	r16,0(sp)
  10ffb0:	dec00404 	addi	sp,sp,16
  10ffb4:	f800283a 	ret
  10ffb8:	81401917 	ldw	r5,100(r16)
  10ffbc:	18c80014 	ori	r3,r3,8192
  10ffc0:	0137ffc4 	movi	r4,-8193
  10ffc4:	2908703a 	and	r4,r5,r4
  10ffc8:	80c0030d 	sth	r3,12(r16)
  10ffcc:	80c00017 	ldw	r3,0(r16)
  10ffd0:	81001915 	stw	r4,100(r16)
  10ffd4:	81000517 	ldw	r4,20(r16)
  10ffd8:	1885c83a 	sub	r2,r3,r2
  10ffdc:	113fe316 	blt	r2,r4,10ff6c <black_to_red_frame+0xfe10ff6c>
  10ffe0:	8809883a 	mov	r4,r17
  10ffe4:	800b883a 	mov	r5,r16
  10ffe8:	010a5bc0 	call	10a5bc <_fflush_r>
  10ffec:	10000e1e 	bne	r2,zero,110028 <__swbuf_r+0x120>
  10fff0:	80c00017 	ldw	r3,0(r16)
  10fff4:	81000217 	ldw	r4,8(r16)
  10fff8:	00800044 	movi	r2,1
  10fffc:	19400044 	addi	r5,r3,1
  110000:	213fffc4 	addi	r4,r4,-1
  110004:	81400015 	stw	r5,0(r16)
  110008:	81000215 	stw	r4,8(r16)
  11000c:	1c800005 	stb	r18,0(r3)
  110010:	80c00517 	ldw	r3,20(r16)
  110014:	18bfde1e 	bne	r3,r2,10ff90 <black_to_red_frame+0xfe10ff90>
  110018:	8809883a 	mov	r4,r17
  11001c:	800b883a 	mov	r5,r16
  110020:	010a5bc0 	call	10a5bc <_fflush_r>
  110024:	103fdd26 	beq	r2,zero,10ff9c <black_to_red_frame+0xfe10ff9c>
  110028:	00bfffc4 	movi	r2,-1
  11002c:	003fdc06 	br	10ffa0 <black_to_red_frame+0xfe10ffa0>
  110030:	00800284 	movi	r2,10
  110034:	90bfd91e 	bne	r18,r2,10ff9c <black_to_red_frame+0xfe10ff9c>
  110038:	8809883a 	mov	r4,r17
  11003c:	800b883a 	mov	r5,r16
  110040:	010a5bc0 	call	10a5bc <_fflush_r>
  110044:	103fd526 	beq	r2,zero,10ff9c <black_to_red_frame+0xfe10ff9c>
  110048:	003ff706 	br	110028 <black_to_red_frame+0xfe110028>
  11004c:	8809883a 	mov	r4,r17
  110050:	800b883a 	mov	r5,r16
  110054:	0108c200 	call	108c20 <__swsetup_r>
  110058:	80c0030b 	ldhu	r3,12(r16)
  11005c:	1000041e 	bne	r2,zero,110070 <__swbuf_r+0x168>
  110060:	80800417 	ldw	r2,16(r16)
  110064:	003fba06 	br	10ff50 <black_to_red_frame+0xfe10ff50>
  110068:	010a8dc0 	call	10a8dc <__sinit>
  11006c:	003fb106 	br	10ff34 <black_to_red_frame+0xfe10ff34>
  110070:	18c01014 	ori	r3,r3,64
  110074:	80c0030d 	sth	r3,12(r16)
  110078:	00c00244 	movi	r3,9
  11007c:	00bfffc4 	movi	r2,-1
  110080:	88c00015 	stw	r3,0(r17)
  110084:	003fc606 	br	10ffa0 <black_to_red_frame+0xfe10ffa0>

00110088 <__swbuf>:
  110088:	00c004b4 	movhi	r3,18
  11008c:	18e1f404 	addi	r3,r3,-30768
  110090:	2005883a 	mov	r2,r4
  110094:	19000017 	ldw	r4,0(r3)
  110098:	280d883a 	mov	r6,r5
  11009c:	100b883a 	mov	r5,r2
  1100a0:	010ff081 	jmpi	10ff08 <__swbuf_r>

001100a4 <_write_r>:
  1100a4:	defffd04 	addi	sp,sp,-12
  1100a8:	dc400115 	stw	r17,4(sp)
  1100ac:	dc000015 	stw	r16,0(sp)
  1100b0:	2023883a 	mov	r17,r4
  1100b4:	040004b4 	movhi	r16,18
  1100b8:	84290c04 	addi	r16,r16,-23504
  1100bc:	2809883a 	mov	r4,r5
  1100c0:	300b883a 	mov	r5,r6
  1100c4:	380d883a 	mov	r6,r7
  1100c8:	dfc00215 	stw	ra,8(sp)
  1100cc:	80000015 	stw	zero,0(r16)
  1100d0:	01143140 	call	114314 <write>
  1100d4:	00ffffc4 	movi	r3,-1
  1100d8:	10c00526 	beq	r2,r3,1100f0 <_write_r+0x4c>
  1100dc:	dfc00217 	ldw	ra,8(sp)
  1100e0:	dc400117 	ldw	r17,4(sp)
  1100e4:	dc000017 	ldw	r16,0(sp)
  1100e8:	dec00304 	addi	sp,sp,12
  1100ec:	f800283a 	ret
  1100f0:	80c00017 	ldw	r3,0(r16)
  1100f4:	183ff926 	beq	r3,zero,1100dc <black_to_red_frame+0xfe1100dc>
  1100f8:	88c00015 	stw	r3,0(r17)
  1100fc:	dfc00217 	ldw	ra,8(sp)
  110100:	dc400117 	ldw	r17,4(sp)
  110104:	dc000017 	ldw	r16,0(sp)
  110108:	dec00304 	addi	sp,sp,12
  11010c:	f800283a 	ret

00110110 <_close_r>:
  110110:	defffd04 	addi	sp,sp,-12
  110114:	dc400115 	stw	r17,4(sp)
  110118:	dc000015 	stw	r16,0(sp)
  11011c:	2023883a 	mov	r17,r4
  110120:	040004b4 	movhi	r16,18
  110124:	84290c04 	addi	r16,r16,-23504
  110128:	2809883a 	mov	r4,r5
  11012c:	dfc00215 	stw	ra,8(sp)
  110130:	80000015 	stw	zero,0(r16)
  110134:	0113d340 	call	113d34 <close>
  110138:	00ffffc4 	movi	r3,-1
  11013c:	10c00526 	beq	r2,r3,110154 <_close_r+0x44>
  110140:	dfc00217 	ldw	ra,8(sp)
  110144:	dc400117 	ldw	r17,4(sp)
  110148:	dc000017 	ldw	r16,0(sp)
  11014c:	dec00304 	addi	sp,sp,12
  110150:	f800283a 	ret
  110154:	80c00017 	ldw	r3,0(r16)
  110158:	183ff926 	beq	r3,zero,110140 <black_to_red_frame+0xfe110140>
  11015c:	88c00015 	stw	r3,0(r17)
  110160:	dfc00217 	ldw	ra,8(sp)
  110164:	dc400117 	ldw	r17,4(sp)
  110168:	dc000017 	ldw	r16,0(sp)
  11016c:	dec00304 	addi	sp,sp,12
  110170:	f800283a 	ret

00110174 <_calloc_r>:
  110174:	defffe04 	addi	sp,sp,-8
  110178:	dc000015 	stw	r16,0(sp)
  11017c:	2021883a 	mov	r16,r4
  110180:	2809883a 	mov	r4,r5
  110184:	300b883a 	mov	r5,r6
  110188:	dfc00115 	stw	ra,4(sp)
  11018c:	0103f1c0 	call	103f1c <__mulsi3>
  110190:	8009883a 	mov	r4,r16
  110194:	100b883a 	mov	r5,r2
  110198:	0103f6c0 	call	103f6c <_malloc_r>
  11019c:	1021883a 	mov	r16,r2
  1101a0:	10002826 	beq	r2,zero,110244 <_calloc_r+0xd0>
  1101a4:	11bfff17 	ldw	r6,-4(r2)
  1101a8:	00ffff04 	movi	r3,-4
  1101ac:	00800904 	movi	r2,36
  1101b0:	30cc703a 	and	r6,r6,r3
  1101b4:	30cd883a 	add	r6,r6,r3
  1101b8:	11801436 	bltu	r2,r6,11020c <_calloc_r+0x98>
  1101bc:	00c004c4 	movi	r3,19
  1101c0:	19800936 	bltu	r3,r6,1101e8 <_calloc_r+0x74>
  1101c4:	8005883a 	mov	r2,r16
  1101c8:	10000015 	stw	zero,0(r2)
  1101cc:	10000115 	stw	zero,4(r2)
  1101d0:	10000215 	stw	zero,8(r2)
  1101d4:	8005883a 	mov	r2,r16
  1101d8:	dfc00117 	ldw	ra,4(sp)
  1101dc:	dc000017 	ldw	r16,0(sp)
  1101e0:	dec00204 	addi	sp,sp,8
  1101e4:	f800283a 	ret
  1101e8:	80000015 	stw	zero,0(r16)
  1101ec:	80000115 	stw	zero,4(r16)
  1101f0:	00c006c4 	movi	r3,27
  1101f4:	19800d2e 	bgeu	r3,r6,11022c <_calloc_r+0xb8>
  1101f8:	80000215 	stw	zero,8(r16)
  1101fc:	80000315 	stw	zero,12(r16)
  110200:	30800c26 	beq	r6,r2,110234 <_calloc_r+0xc0>
  110204:	80800404 	addi	r2,r16,16
  110208:	003fef06 	br	1101c8 <black_to_red_frame+0xfe1101c8>
  11020c:	8009883a 	mov	r4,r16
  110210:	000b883a 	mov	r5,zero
  110214:	010bba40 	call	10bba4 <memset>
  110218:	8005883a 	mov	r2,r16
  11021c:	dfc00117 	ldw	ra,4(sp)
  110220:	dc000017 	ldw	r16,0(sp)
  110224:	dec00204 	addi	sp,sp,8
  110228:	f800283a 	ret
  11022c:	80800204 	addi	r2,r16,8
  110230:	003fe506 	br	1101c8 <black_to_red_frame+0xfe1101c8>
  110234:	80000415 	stw	zero,16(r16)
  110238:	80800604 	addi	r2,r16,24
  11023c:	80000515 	stw	zero,20(r16)
  110240:	003fe106 	br	1101c8 <black_to_red_frame+0xfe1101c8>
  110244:	0005883a 	mov	r2,zero
  110248:	003fe306 	br	1101d8 <black_to_red_frame+0xfe1101d8>

0011024c <_fclose_r>:
  11024c:	defffc04 	addi	sp,sp,-16
  110250:	dc000015 	stw	r16,0(sp)
  110254:	dfc00315 	stw	ra,12(sp)
  110258:	dc800215 	stw	r18,8(sp)
  11025c:	dc400115 	stw	r17,4(sp)
  110260:	2821883a 	mov	r16,r5
  110264:	28003126 	beq	r5,zero,11032c <_fclose_r+0xe0>
  110268:	2023883a 	mov	r17,r4
  11026c:	010ab940 	call	10ab94 <__sfp_lock_acquire>
  110270:	88000226 	beq	r17,zero,11027c <_fclose_r+0x30>
  110274:	88800e17 	ldw	r2,56(r17)
  110278:	10003326 	beq	r2,zero,110348 <_fclose_r+0xfc>
  11027c:	8080030f 	ldh	r2,12(r16)
  110280:	10002226 	beq	r2,zero,11030c <_fclose_r+0xc0>
  110284:	8809883a 	mov	r4,r17
  110288:	800b883a 	mov	r5,r16
  11028c:	010a5bc0 	call	10a5bc <_fflush_r>
  110290:	80c00b17 	ldw	r3,44(r16)
  110294:	1025883a 	mov	r18,r2
  110298:	18000426 	beq	r3,zero,1102ac <_fclose_r+0x60>
  11029c:	81400717 	ldw	r5,28(r16)
  1102a0:	8809883a 	mov	r4,r17
  1102a4:	183ee83a 	callr	r3
  1102a8:	10003016 	blt	r2,zero,11036c <_fclose_r+0x120>
  1102ac:	8080030b 	ldhu	r2,12(r16)
  1102b0:	1080200c 	andi	r2,r2,128
  1102b4:	1000291e 	bne	r2,zero,11035c <_fclose_r+0x110>
  1102b8:	81400c17 	ldw	r5,48(r16)
  1102bc:	28000526 	beq	r5,zero,1102d4 <_fclose_r+0x88>
  1102c0:	80801004 	addi	r2,r16,64
  1102c4:	28800226 	beq	r5,r2,1102d0 <_fclose_r+0x84>
  1102c8:	8809883a 	mov	r4,r17
  1102cc:	010ad100 	call	10ad10 <_free_r>
  1102d0:	80000c15 	stw	zero,48(r16)
  1102d4:	81401117 	ldw	r5,68(r16)
  1102d8:	28000326 	beq	r5,zero,1102e8 <_fclose_r+0x9c>
  1102dc:	8809883a 	mov	r4,r17
  1102e0:	010ad100 	call	10ad10 <_free_r>
  1102e4:	80001115 	stw	zero,68(r16)
  1102e8:	8000030d 	sth	zero,12(r16)
  1102ec:	010ab980 	call	10ab98 <__sfp_lock_release>
  1102f0:	9005883a 	mov	r2,r18
  1102f4:	dfc00317 	ldw	ra,12(sp)
  1102f8:	dc800217 	ldw	r18,8(sp)
  1102fc:	dc400117 	ldw	r17,4(sp)
  110300:	dc000017 	ldw	r16,0(sp)
  110304:	dec00404 	addi	sp,sp,16
  110308:	f800283a 	ret
  11030c:	010ab980 	call	10ab98 <__sfp_lock_release>
  110310:	0005883a 	mov	r2,zero
  110314:	dfc00317 	ldw	ra,12(sp)
  110318:	dc800217 	ldw	r18,8(sp)
  11031c:	dc400117 	ldw	r17,4(sp)
  110320:	dc000017 	ldw	r16,0(sp)
  110324:	dec00404 	addi	sp,sp,16
  110328:	f800283a 	ret
  11032c:	0005883a 	mov	r2,zero
  110330:	dfc00317 	ldw	ra,12(sp)
  110334:	dc800217 	ldw	r18,8(sp)
  110338:	dc400117 	ldw	r17,4(sp)
  11033c:	dc000017 	ldw	r16,0(sp)
  110340:	dec00404 	addi	sp,sp,16
  110344:	f800283a 	ret
  110348:	8809883a 	mov	r4,r17
  11034c:	010a8dc0 	call	10a8dc <__sinit>
  110350:	8080030f 	ldh	r2,12(r16)
  110354:	103fcb1e 	bne	r2,zero,110284 <black_to_red_frame+0xfe110284>
  110358:	003fec06 	br	11030c <black_to_red_frame+0xfe11030c>
  11035c:	81400417 	ldw	r5,16(r16)
  110360:	8809883a 	mov	r4,r17
  110364:	010ad100 	call	10ad10 <_free_r>
  110368:	003fd306 	br	1102b8 <black_to_red_frame+0xfe1102b8>
  11036c:	04bfffc4 	movi	r18,-1
  110370:	003fce06 	br	1102ac <black_to_red_frame+0xfe1102ac>

00110374 <fclose>:
  110374:	008004b4 	movhi	r2,18
  110378:	10a1f404 	addi	r2,r2,-30768
  11037c:	200b883a 	mov	r5,r4
  110380:	11000017 	ldw	r4,0(r2)
  110384:	011024c1 	jmpi	11024c <_fclose_r>

00110388 <_fputwc_r>:
  110388:	3080030b 	ldhu	r2,12(r6)
  11038c:	defff804 	addi	sp,sp,-32
  110390:	dcc00415 	stw	r19,16(sp)
  110394:	dc800315 	stw	r18,12(sp)
  110398:	dc000115 	stw	r16,4(sp)
  11039c:	dfc00715 	stw	ra,28(sp)
  1103a0:	dd400615 	stw	r21,24(sp)
  1103a4:	dd000515 	stw	r20,20(sp)
  1103a8:	dc400215 	stw	r17,8(sp)
  1103ac:	10c8000c 	andi	r3,r2,8192
  1103b0:	3021883a 	mov	r16,r6
  1103b4:	2027883a 	mov	r19,r4
  1103b8:	2825883a 	mov	r18,r5
  1103bc:	1800051e 	bne	r3,zero,1103d4 <_fputwc_r+0x4c>
  1103c0:	30c01917 	ldw	r3,100(r6)
  1103c4:	10880014 	ori	r2,r2,8192
  1103c8:	3080030d 	sth	r2,12(r6)
  1103cc:	18880014 	ori	r2,r3,8192
  1103d0:	30801915 	stw	r2,100(r6)
  1103d4:	010b6680 	call	10b668 <__locale_mb_cur_max>
  1103d8:	00c00044 	movi	r3,1
  1103dc:	10c03e26 	beq	r2,r3,1104d8 <_fputwc_r+0x150>
  1103e0:	9809883a 	mov	r4,r19
  1103e4:	d80b883a 	mov	r5,sp
  1103e8:	900d883a 	mov	r6,r18
  1103ec:	81c01704 	addi	r7,r16,92
  1103f0:	01107280 	call	110728 <_wcrtomb_r>
  1103f4:	1029883a 	mov	r20,r2
  1103f8:	00bfffc4 	movi	r2,-1
  1103fc:	a0802026 	beq	r20,r2,110480 <_fputwc_r+0xf8>
  110400:	d9400003 	ldbu	r5,0(sp)
  110404:	a0001c26 	beq	r20,zero,110478 <_fputwc_r+0xf0>
  110408:	0023883a 	mov	r17,zero
  11040c:	05400284 	movi	r21,10
  110410:	00000906 	br	110438 <_fputwc_r+0xb0>
  110414:	80c00017 	ldw	r3,0(r16)
  110418:	19400005 	stb	r5,0(r3)
  11041c:	80c00017 	ldw	r3,0(r16)
  110420:	18c00044 	addi	r3,r3,1
  110424:	80c00015 	stw	r3,0(r16)
  110428:	8c400044 	addi	r17,r17,1
  11042c:	dc47883a 	add	r3,sp,r17
  110430:	8d00112e 	bgeu	r17,r20,110478 <_fputwc_r+0xf0>
  110434:	19400003 	ldbu	r5,0(r3)
  110438:	80c00217 	ldw	r3,8(r16)
  11043c:	18ffffc4 	addi	r3,r3,-1
  110440:	80c00215 	stw	r3,8(r16)
  110444:	183ff30e 	bge	r3,zero,110414 <black_to_red_frame+0xfe110414>
  110448:	80800617 	ldw	r2,24(r16)
  11044c:	18801916 	blt	r3,r2,1104b4 <_fputwc_r+0x12c>
  110450:	80800017 	ldw	r2,0(r16)
  110454:	11400005 	stb	r5,0(r2)
  110458:	80800017 	ldw	r2,0(r16)
  11045c:	10c00003 	ldbu	r3,0(r2)
  110460:	10800044 	addi	r2,r2,1
  110464:	1d402326 	beq	r3,r21,1104f4 <_fputwc_r+0x16c>
  110468:	8c400044 	addi	r17,r17,1
  11046c:	80800015 	stw	r2,0(r16)
  110470:	dc47883a 	add	r3,sp,r17
  110474:	8d3fef36 	bltu	r17,r20,110434 <black_to_red_frame+0xfe110434>
  110478:	9005883a 	mov	r2,r18
  11047c:	00000406 	br	110490 <_fputwc_r+0x108>
  110480:	80c0030b 	ldhu	r3,12(r16)
  110484:	a005883a 	mov	r2,r20
  110488:	18c01014 	ori	r3,r3,64
  11048c:	80c0030d 	sth	r3,12(r16)
  110490:	dfc00717 	ldw	ra,28(sp)
  110494:	dd400617 	ldw	r21,24(sp)
  110498:	dd000517 	ldw	r20,20(sp)
  11049c:	dcc00417 	ldw	r19,16(sp)
  1104a0:	dc800317 	ldw	r18,12(sp)
  1104a4:	dc400217 	ldw	r17,8(sp)
  1104a8:	dc000117 	ldw	r16,4(sp)
  1104ac:	dec00804 	addi	sp,sp,32
  1104b0:	f800283a 	ret
  1104b4:	9809883a 	mov	r4,r19
  1104b8:	29403fcc 	andi	r5,r5,255
  1104bc:	800d883a 	mov	r6,r16
  1104c0:	010ff080 	call	10ff08 <__swbuf_r>
  1104c4:	10bfffe0 	cmpeqi	r2,r2,-1
  1104c8:	10803fcc 	andi	r2,r2,255
  1104cc:	103fd626 	beq	r2,zero,110428 <black_to_red_frame+0xfe110428>
  1104d0:	00bfffc4 	movi	r2,-1
  1104d4:	003fee06 	br	110490 <black_to_red_frame+0xfe110490>
  1104d8:	90ffffc4 	addi	r3,r18,-1
  1104dc:	01003f84 	movi	r4,254
  1104e0:	20ffbf36 	bltu	r4,r3,1103e0 <black_to_red_frame+0xfe1103e0>
  1104e4:	900b883a 	mov	r5,r18
  1104e8:	dc800005 	stb	r18,0(sp)
  1104ec:	1029883a 	mov	r20,r2
  1104f0:	003fc506 	br	110408 <black_to_red_frame+0xfe110408>
  1104f4:	9809883a 	mov	r4,r19
  1104f8:	a80b883a 	mov	r5,r21
  1104fc:	800d883a 	mov	r6,r16
  110500:	010ff080 	call	10ff08 <__swbuf_r>
  110504:	10bfffe0 	cmpeqi	r2,r2,-1
  110508:	003fef06 	br	1104c8 <black_to_red_frame+0xfe1104c8>

0011050c <fputwc>:
  11050c:	defffc04 	addi	sp,sp,-16
  110510:	dc000115 	stw	r16,4(sp)
  110514:	040004b4 	movhi	r16,18
  110518:	8421f404 	addi	r16,r16,-30768
  11051c:	80800017 	ldw	r2,0(r16)
  110520:	dc400215 	stw	r17,8(sp)
  110524:	dfc00315 	stw	ra,12(sp)
  110528:	2023883a 	mov	r17,r4
  11052c:	280d883a 	mov	r6,r5
  110530:	10000d26 	beq	r2,zero,110568 <fputwc+0x5c>
  110534:	10c00e17 	ldw	r3,56(r2)
  110538:	1009883a 	mov	r4,r2
  11053c:	1800041e 	bne	r3,zero,110550 <fputwc+0x44>
  110540:	d9400015 	stw	r5,0(sp)
  110544:	010a8dc0 	call	10a8dc <__sinit>
  110548:	81000017 	ldw	r4,0(r16)
  11054c:	d9800017 	ldw	r6,0(sp)
  110550:	880b883a 	mov	r5,r17
  110554:	dfc00317 	ldw	ra,12(sp)
  110558:	dc400217 	ldw	r17,8(sp)
  11055c:	dc000117 	ldw	r16,4(sp)
  110560:	dec00404 	addi	sp,sp,16
  110564:	01103881 	jmpi	110388 <_fputwc_r>
  110568:	0009883a 	mov	r4,zero
  11056c:	880b883a 	mov	r5,r17
  110570:	dfc00317 	ldw	ra,12(sp)
  110574:	dc400217 	ldw	r17,8(sp)
  110578:	dc000117 	ldw	r16,4(sp)
  11057c:	dec00404 	addi	sp,sp,16
  110580:	01103881 	jmpi	110388 <_fputwc_r>

00110584 <_fstat_r>:
  110584:	defffd04 	addi	sp,sp,-12
  110588:	dc400115 	stw	r17,4(sp)
  11058c:	dc000015 	stw	r16,0(sp)
  110590:	2023883a 	mov	r17,r4
  110594:	040004b4 	movhi	r16,18
  110598:	84290c04 	addi	r16,r16,-23504
  11059c:	2809883a 	mov	r4,r5
  1105a0:	300b883a 	mov	r5,r6
  1105a4:	dfc00215 	stw	ra,8(sp)
  1105a8:	80000015 	stw	zero,0(r16)
  1105ac:	0113e200 	call	113e20 <fstat>
  1105b0:	00ffffc4 	movi	r3,-1
  1105b4:	10c00526 	beq	r2,r3,1105cc <_fstat_r+0x48>
  1105b8:	dfc00217 	ldw	ra,8(sp)
  1105bc:	dc400117 	ldw	r17,4(sp)
  1105c0:	dc000017 	ldw	r16,0(sp)
  1105c4:	dec00304 	addi	sp,sp,12
  1105c8:	f800283a 	ret
  1105cc:	80c00017 	ldw	r3,0(r16)
  1105d0:	183ff926 	beq	r3,zero,1105b8 <black_to_red_frame+0xfe1105b8>
  1105d4:	88c00015 	stw	r3,0(r17)
  1105d8:	dfc00217 	ldw	ra,8(sp)
  1105dc:	dc400117 	ldw	r17,4(sp)
  1105e0:	dc000017 	ldw	r16,0(sp)
  1105e4:	dec00304 	addi	sp,sp,12
  1105e8:	f800283a 	ret

001105ec <_isatty_r>:
  1105ec:	defffd04 	addi	sp,sp,-12
  1105f0:	dc400115 	stw	r17,4(sp)
  1105f4:	dc000015 	stw	r16,0(sp)
  1105f8:	2023883a 	mov	r17,r4
  1105fc:	040004b4 	movhi	r16,18
  110600:	84290c04 	addi	r16,r16,-23504
  110604:	2809883a 	mov	r4,r5
  110608:	dfc00215 	stw	ra,8(sp)
  11060c:	80000015 	stw	zero,0(r16)
  110610:	0113eb40 	call	113eb4 <isatty>
  110614:	00ffffc4 	movi	r3,-1
  110618:	10c00526 	beq	r2,r3,110630 <_isatty_r+0x44>
  11061c:	dfc00217 	ldw	ra,8(sp)
  110620:	dc400117 	ldw	r17,4(sp)
  110624:	dc000017 	ldw	r16,0(sp)
  110628:	dec00304 	addi	sp,sp,12
  11062c:	f800283a 	ret
  110630:	80c00017 	ldw	r3,0(r16)
  110634:	183ff926 	beq	r3,zero,11061c <black_to_red_frame+0xfe11061c>
  110638:	88c00015 	stw	r3,0(r17)
  11063c:	dfc00217 	ldw	ra,8(sp)
  110640:	dc400117 	ldw	r17,4(sp)
  110644:	dc000017 	ldw	r16,0(sp)
  110648:	dec00304 	addi	sp,sp,12
  11064c:	f800283a 	ret

00110650 <_lseek_r>:
  110650:	defffd04 	addi	sp,sp,-12
  110654:	dc400115 	stw	r17,4(sp)
  110658:	dc000015 	stw	r16,0(sp)
  11065c:	2023883a 	mov	r17,r4
  110660:	040004b4 	movhi	r16,18
  110664:	84290c04 	addi	r16,r16,-23504
  110668:	2809883a 	mov	r4,r5
  11066c:	300b883a 	mov	r5,r6
  110670:	380d883a 	mov	r6,r7
  110674:	dfc00215 	stw	ra,8(sp)
  110678:	80000015 	stw	zero,0(r16)
  11067c:	01140700 	call	114070 <lseek>
  110680:	00ffffc4 	movi	r3,-1
  110684:	10c00526 	beq	r2,r3,11069c <_lseek_r+0x4c>
  110688:	dfc00217 	ldw	ra,8(sp)
  11068c:	dc400117 	ldw	r17,4(sp)
  110690:	dc000017 	ldw	r16,0(sp)
  110694:	dec00304 	addi	sp,sp,12
  110698:	f800283a 	ret
  11069c:	80c00017 	ldw	r3,0(r16)
  1106a0:	183ff926 	beq	r3,zero,110688 <black_to_red_frame+0xfe110688>
  1106a4:	88c00015 	stw	r3,0(r17)
  1106a8:	dfc00217 	ldw	ra,8(sp)
  1106ac:	dc400117 	ldw	r17,4(sp)
  1106b0:	dc000017 	ldw	r16,0(sp)
  1106b4:	dec00304 	addi	sp,sp,12
  1106b8:	f800283a 	ret

001106bc <_read_r>:
  1106bc:	defffd04 	addi	sp,sp,-12
  1106c0:	dc400115 	stw	r17,4(sp)
  1106c4:	dc000015 	stw	r16,0(sp)
  1106c8:	2023883a 	mov	r17,r4
  1106cc:	040004b4 	movhi	r16,18
  1106d0:	84290c04 	addi	r16,r16,-23504
  1106d4:	2809883a 	mov	r4,r5
  1106d8:	300b883a 	mov	r5,r6
  1106dc:	380d883a 	mov	r6,r7
  1106e0:	dfc00215 	stw	ra,8(sp)
  1106e4:	80000015 	stw	zero,0(r16)
  1106e8:	01141700 	call	114170 <read>
  1106ec:	00ffffc4 	movi	r3,-1
  1106f0:	10c00526 	beq	r2,r3,110708 <_read_r+0x4c>
  1106f4:	dfc00217 	ldw	ra,8(sp)
  1106f8:	dc400117 	ldw	r17,4(sp)
  1106fc:	dc000017 	ldw	r16,0(sp)
  110700:	dec00304 	addi	sp,sp,12
  110704:	f800283a 	ret
  110708:	80c00017 	ldw	r3,0(r16)
  11070c:	183ff926 	beq	r3,zero,1106f4 <black_to_red_frame+0xfe1106f4>
  110710:	88c00015 	stw	r3,0(r17)
  110714:	dfc00217 	ldw	ra,8(sp)
  110718:	dc400117 	ldw	r17,4(sp)
  11071c:	dc000017 	ldw	r16,0(sp)
  110720:	dec00304 	addi	sp,sp,12
  110724:	f800283a 	ret

00110728 <_wcrtomb_r>:
  110728:	defff604 	addi	sp,sp,-40
  11072c:	dc800815 	stw	r18,32(sp)
  110730:	dc400715 	stw	r17,28(sp)
  110734:	dc000615 	stw	r16,24(sp)
  110738:	008004b4 	movhi	r2,18
  11073c:	10a1f604 	addi	r2,r2,-30760
  110740:	dfc00915 	stw	ra,36(sp)
  110744:	2021883a 	mov	r16,r4
  110748:	3823883a 	mov	r17,r7
  11074c:	14800017 	ldw	r18,0(r2)
  110750:	28001426 	beq	r5,zero,1107a4 <_wcrtomb_r+0x7c>
  110754:	d9400415 	stw	r5,16(sp)
  110758:	d9800515 	stw	r6,20(sp)
  11075c:	010b65c0 	call	10b65c <__locale_charset>
  110760:	d9400417 	ldw	r5,16(sp)
  110764:	d9800517 	ldw	r6,20(sp)
  110768:	8009883a 	mov	r4,r16
  11076c:	dc400015 	stw	r17,0(sp)
  110770:	100f883a 	mov	r7,r2
  110774:	903ee83a 	callr	r18
  110778:	00ffffc4 	movi	r3,-1
  11077c:	10c0031e 	bne	r2,r3,11078c <_wcrtomb_r+0x64>
  110780:	88000015 	stw	zero,0(r17)
  110784:	00c02284 	movi	r3,138
  110788:	80c00015 	stw	r3,0(r16)
  11078c:	dfc00917 	ldw	ra,36(sp)
  110790:	dc800817 	ldw	r18,32(sp)
  110794:	dc400717 	ldw	r17,28(sp)
  110798:	dc000617 	ldw	r16,24(sp)
  11079c:	dec00a04 	addi	sp,sp,40
  1107a0:	f800283a 	ret
  1107a4:	010b65c0 	call	10b65c <__locale_charset>
  1107a8:	8009883a 	mov	r4,r16
  1107ac:	dc400015 	stw	r17,0(sp)
  1107b0:	d9400104 	addi	r5,sp,4
  1107b4:	000d883a 	mov	r6,zero
  1107b8:	100f883a 	mov	r7,r2
  1107bc:	903ee83a 	callr	r18
  1107c0:	003fed06 	br	110778 <black_to_red_frame+0xfe110778>

001107c4 <wcrtomb>:
  1107c4:	defff504 	addi	sp,sp,-44
  1107c8:	dc400515 	stw	r17,20(sp)
  1107cc:	dc000415 	stw	r16,16(sp)
  1107d0:	dfc00a15 	stw	ra,40(sp)
  1107d4:	dd400915 	stw	r21,36(sp)
  1107d8:	dd000815 	stw	r20,32(sp)
  1107dc:	dcc00715 	stw	r19,28(sp)
  1107e0:	dc800615 	stw	r18,24(sp)
  1107e4:	2021883a 	mov	r16,r4
  1107e8:	3023883a 	mov	r17,r6
  1107ec:	20001d26 	beq	r4,zero,110864 <wcrtomb+0xa0>
  1107f0:	048004b4 	movhi	r18,18
  1107f4:	94a1f404 	addi	r18,r18,-30768
  1107f8:	95400017 	ldw	r21,0(r18)
  1107fc:	008004b4 	movhi	r2,18
  110800:	10a1f604 	addi	r2,r2,-30760
  110804:	15000017 	ldw	r20,0(r2)
  110808:	2827883a 	mov	r19,r5
  11080c:	010b65c0 	call	10b65c <__locale_charset>
  110810:	a809883a 	mov	r4,r21
  110814:	dc400015 	stw	r17,0(sp)
  110818:	800b883a 	mov	r5,r16
  11081c:	980d883a 	mov	r6,r19
  110820:	100f883a 	mov	r7,r2
  110824:	a03ee83a 	callr	r20
  110828:	00ffffc4 	movi	r3,-1
  11082c:	10c0041e 	bne	r2,r3,110840 <wcrtomb+0x7c>
  110830:	90c00017 	ldw	r3,0(r18)
  110834:	01002284 	movi	r4,138
  110838:	88000015 	stw	zero,0(r17)
  11083c:	19000015 	stw	r4,0(r3)
  110840:	dfc00a17 	ldw	ra,40(sp)
  110844:	dd400917 	ldw	r21,36(sp)
  110848:	dd000817 	ldw	r20,32(sp)
  11084c:	dcc00717 	ldw	r19,28(sp)
  110850:	dc800617 	ldw	r18,24(sp)
  110854:	dc400517 	ldw	r17,20(sp)
  110858:	dc000417 	ldw	r16,16(sp)
  11085c:	dec00b04 	addi	sp,sp,44
  110860:	f800283a 	ret
  110864:	048004b4 	movhi	r18,18
  110868:	94a1f404 	addi	r18,r18,-30768
  11086c:	94c00017 	ldw	r19,0(r18)
  110870:	008004b4 	movhi	r2,18
  110874:	10a1f604 	addi	r2,r2,-30760
  110878:	14000017 	ldw	r16,0(r2)
  11087c:	010b65c0 	call	10b65c <__locale_charset>
  110880:	9809883a 	mov	r4,r19
  110884:	dc400015 	stw	r17,0(sp)
  110888:	d9400104 	addi	r5,sp,4
  11088c:	000d883a 	mov	r6,zero
  110890:	100f883a 	mov	r7,r2
  110894:	803ee83a 	callr	r16
  110898:	003fe306 	br	110828 <black_to_red_frame+0xfe110828>

0011089c <__ascii_wctomb>:
  11089c:	28000526 	beq	r5,zero,1108b4 <__ascii_wctomb+0x18>
  1108a0:	00803fc4 	movi	r2,255
  1108a4:	11800536 	bltu	r2,r6,1108bc <__ascii_wctomb+0x20>
  1108a8:	29800005 	stb	r6,0(r5)
  1108ac:	00800044 	movi	r2,1
  1108b0:	f800283a 	ret
  1108b4:	0005883a 	mov	r2,zero
  1108b8:	f800283a 	ret
  1108bc:	00802284 	movi	r2,138
  1108c0:	20800015 	stw	r2,0(r4)
  1108c4:	00bfffc4 	movi	r2,-1
  1108c8:	f800283a 	ret

001108cc <_wctomb_r>:
  1108cc:	defff904 	addi	sp,sp,-28
  1108d0:	008004b4 	movhi	r2,18
  1108d4:	10a1f604 	addi	r2,r2,-30760
  1108d8:	dfc00615 	stw	ra,24(sp)
  1108dc:	dc400515 	stw	r17,20(sp)
  1108e0:	dc000415 	stw	r16,16(sp)
  1108e4:	3823883a 	mov	r17,r7
  1108e8:	14000017 	ldw	r16,0(r2)
  1108ec:	d9000115 	stw	r4,4(sp)
  1108f0:	d9400215 	stw	r5,8(sp)
  1108f4:	d9800315 	stw	r6,12(sp)
  1108f8:	010b65c0 	call	10b65c <__locale_charset>
  1108fc:	d9000117 	ldw	r4,4(sp)
  110900:	d9400217 	ldw	r5,8(sp)
  110904:	d9800317 	ldw	r6,12(sp)
  110908:	dc400015 	stw	r17,0(sp)
  11090c:	100f883a 	mov	r7,r2
  110910:	803ee83a 	callr	r16
  110914:	dfc00617 	ldw	ra,24(sp)
  110918:	dc400517 	ldw	r17,20(sp)
  11091c:	dc000417 	ldw	r16,16(sp)
  110920:	dec00704 	addi	sp,sp,28
  110924:	f800283a 	ret

00110928 <__udivdi3>:
  110928:	defff504 	addi	sp,sp,-44
  11092c:	dc800315 	stw	r18,12(sp)
  110930:	dc400215 	stw	r17,8(sp)
  110934:	dfc00a15 	stw	ra,40(sp)
  110938:	df000915 	stw	fp,36(sp)
  11093c:	ddc00815 	stw	r23,32(sp)
  110940:	dd800715 	stw	r22,28(sp)
  110944:	dd400615 	stw	r21,24(sp)
  110948:	dd000515 	stw	r20,20(sp)
  11094c:	dcc00415 	stw	r19,16(sp)
  110950:	dc000115 	stw	r16,4(sp)
  110954:	2025883a 	mov	r18,r4
  110958:	2823883a 	mov	r17,r5
  11095c:	3800481e 	bne	r7,zero,110a80 <__udivdi3+0x158>
  110960:	3021883a 	mov	r16,r6
  110964:	2027883a 	mov	r19,r4
  110968:	29805a2e 	bgeu	r5,r6,110ad4 <__udivdi3+0x1ac>
  11096c:	00bfffd4 	movui	r2,65535
  110970:	2829883a 	mov	r20,r5
  110974:	1180b436 	bltu	r2,r6,110c48 <__udivdi3+0x320>
  110978:	00803fc4 	movi	r2,255
  11097c:	11816736 	bltu	r2,r6,110f1c <__udivdi3+0x5f4>
  110980:	0005883a 	mov	r2,zero
  110984:	0007883a 	mov	r3,zero
  110988:	3084d83a 	srl	r2,r6,r2
  11098c:	01000474 	movhi	r4,17
  110990:	211aac04 	addi	r4,r4,27312
  110994:	2085883a 	add	r2,r4,r2
  110998:	10800003 	ldbu	r2,0(r2)
  11099c:	10c7883a 	add	r3,r2,r3
  1109a0:	00800804 	movi	r2,32
  1109a4:	10c5c83a 	sub	r2,r2,r3
  1109a8:	10000526 	beq	r2,zero,1109c0 <__udivdi3+0x98>
  1109ac:	88a2983a 	sll	r17,r17,r2
  1109b0:	90c6d83a 	srl	r3,r18,r3
  1109b4:	30a0983a 	sll	r16,r6,r2
  1109b8:	90a6983a 	sll	r19,r18,r2
  1109bc:	88e8b03a 	or	r20,r17,r3
  1109c0:	8022d43a 	srli	r17,r16,16
  1109c4:	a009883a 	mov	r4,r20
  1109c8:	857fffcc 	andi	r21,r16,65535
  1109cc:	880b883a 	mov	r5,r17
  1109d0:	0103f140 	call	103f14 <__umodsi3>
  1109d4:	a009883a 	mov	r4,r20
  1109d8:	880b883a 	mov	r5,r17
  1109dc:	102d883a 	mov	r22,r2
  1109e0:	0103f0c0 	call	103f0c <__udivsi3>
  1109e4:	1009883a 	mov	r4,r2
  1109e8:	a80b883a 	mov	r5,r21
  1109ec:	1025883a 	mov	r18,r2
  1109f0:	0103f1c0 	call	103f1c <__mulsi3>
  1109f4:	1009883a 	mov	r4,r2
  1109f8:	b006943a 	slli	r3,r22,16
  1109fc:	9804d43a 	srli	r2,r19,16
  110a00:	1886b03a 	or	r3,r3,r2
  110a04:	1900052e 	bgeu	r3,r4,110a1c <__udivdi3+0xf4>
  110a08:	1c07883a 	add	r3,r3,r16
  110a0c:	90bfffc4 	addi	r2,r18,-1
  110a10:	1c000136 	bltu	r3,r16,110a18 <__udivdi3+0xf0>
  110a14:	19015636 	bltu	r3,r4,110f70 <__udivdi3+0x648>
  110a18:	1025883a 	mov	r18,r2
  110a1c:	1929c83a 	sub	r20,r3,r4
  110a20:	880b883a 	mov	r5,r17
  110a24:	a009883a 	mov	r4,r20
  110a28:	0103f140 	call	103f14 <__umodsi3>
  110a2c:	102d883a 	mov	r22,r2
  110a30:	880b883a 	mov	r5,r17
  110a34:	a009883a 	mov	r4,r20
  110a38:	b02c943a 	slli	r22,r22,16
  110a3c:	0103f0c0 	call	103f0c <__udivsi3>
  110a40:	1009883a 	mov	r4,r2
  110a44:	a80b883a 	mov	r5,r21
  110a48:	9cffffcc 	andi	r19,r19,65535
  110a4c:	1023883a 	mov	r17,r2
  110a50:	b4e6b03a 	or	r19,r22,r19
  110a54:	0103f1c0 	call	103f1c <__mulsi3>
  110a58:	9880052e 	bgeu	r19,r2,110a70 <__udivdi3+0x148>
  110a5c:	9c27883a 	add	r19,r19,r16
  110a60:	88ffffc4 	addi	r3,r17,-1
  110a64:	9c011436 	bltu	r19,r16,110eb8 <__udivdi3+0x590>
  110a68:	9881132e 	bgeu	r19,r2,110eb8 <__udivdi3+0x590>
  110a6c:	8c7fff84 	addi	r17,r17,-2
  110a70:	9024943a 	slli	r18,r18,16
  110a74:	0007883a 	mov	r3,zero
  110a78:	8c84b03a 	or	r2,r17,r18
  110a7c:	00006106 	br	110c04 <__udivdi3+0x2dc>
  110a80:	29c05e36 	bltu	r5,r7,110bfc <__udivdi3+0x2d4>
  110a84:	00bfffd4 	movui	r2,65535
  110a88:	11c06a2e 	bgeu	r2,r7,110c34 <__udivdi3+0x30c>
  110a8c:	00804034 	movhi	r2,256
  110a90:	10bfffc4 	addi	r2,r2,-1
  110a94:	11c11236 	bltu	r2,r7,110ee0 <__udivdi3+0x5b8>
  110a98:	00c00404 	movi	r3,16
  110a9c:	180b883a 	mov	r5,r3
  110aa0:	38c6d83a 	srl	r3,r7,r3
  110aa4:	01000474 	movhi	r4,17
  110aa8:	211aac04 	addi	r4,r4,27312
  110aac:	04000804 	movi	r16,32
  110ab0:	20c7883a 	add	r3,r4,r3
  110ab4:	18800003 	ldbu	r2,0(r3)
  110ab8:	1145883a 	add	r2,r2,r5
  110abc:	80a1c83a 	sub	r16,r16,r2
  110ac0:	80006c1e 	bne	r16,zero,110c74 <__udivdi3+0x34c>
  110ac4:	3c411836 	bltu	r7,r17,110f28 <__udivdi3+0x600>
  110ac8:	9185403a 	cmpgeu	r2,r18,r6
  110acc:	0007883a 	mov	r3,zero
  110ad0:	00004c06 	br	110c04 <__udivdi3+0x2dc>
  110ad4:	3000041e 	bne	r6,zero,110ae8 <__udivdi3+0x1c0>
  110ad8:	01000044 	movi	r4,1
  110adc:	000b883a 	mov	r5,zero
  110ae0:	0103f0c0 	call	103f0c <__udivsi3>
  110ae4:	1021883a 	mov	r16,r2
  110ae8:	00bfffd4 	movui	r2,65535
  110aec:	14005c2e 	bgeu	r2,r16,110c60 <__udivdi3+0x338>
  110af0:	00804034 	movhi	r2,256
  110af4:	10bfffc4 	addi	r2,r2,-1
  110af8:	14010236 	bltu	r2,r16,110f04 <__udivdi3+0x5dc>
  110afc:	00800404 	movi	r2,16
  110b00:	1007883a 	mov	r3,r2
  110b04:	8084d83a 	srl	r2,r16,r2
  110b08:	01000474 	movhi	r4,17
  110b0c:	211aac04 	addi	r4,r4,27312
  110b10:	2085883a 	add	r2,r4,r2
  110b14:	10800003 	ldbu	r2,0(r2)
  110b18:	10c7883a 	add	r3,r2,r3
  110b1c:	00800804 	movi	r2,32
  110b20:	10c5c83a 	sub	r2,r2,r3
  110b24:	1000aa1e 	bne	r2,zero,110dd0 <__udivdi3+0x4a8>
  110b28:	8028d43a 	srli	r20,r16,16
  110b2c:	8c23c83a 	sub	r17,r17,r16
  110b30:	857fffcc 	andi	r21,r16,65535
  110b34:	00c00044 	movi	r3,1
  110b38:	8809883a 	mov	r4,r17
  110b3c:	a00b883a 	mov	r5,r20
  110b40:	d8c00015 	stw	r3,0(sp)
  110b44:	0103f140 	call	103f14 <__umodsi3>
  110b48:	8809883a 	mov	r4,r17
  110b4c:	a00b883a 	mov	r5,r20
  110b50:	102d883a 	mov	r22,r2
  110b54:	0103f0c0 	call	103f0c <__udivsi3>
  110b58:	1009883a 	mov	r4,r2
  110b5c:	a80b883a 	mov	r5,r21
  110b60:	1025883a 	mov	r18,r2
  110b64:	0103f1c0 	call	103f1c <__mulsi3>
  110b68:	1009883a 	mov	r4,r2
  110b6c:	b00e943a 	slli	r7,r22,16
  110b70:	9804d43a 	srli	r2,r19,16
  110b74:	d8c00017 	ldw	r3,0(sp)
  110b78:	388eb03a 	or	r7,r7,r2
  110b7c:	3900052e 	bgeu	r7,r4,110b94 <__udivdi3+0x26c>
  110b80:	3c0f883a 	add	r7,r7,r16
  110b84:	90bfffc4 	addi	r2,r18,-1
  110b88:	3c000136 	bltu	r7,r16,110b90 <__udivdi3+0x268>
  110b8c:	3900f536 	bltu	r7,r4,110f64 <__udivdi3+0x63c>
  110b90:	1025883a 	mov	r18,r2
  110b94:	3923c83a 	sub	r17,r7,r4
  110b98:	8809883a 	mov	r4,r17
  110b9c:	a00b883a 	mov	r5,r20
  110ba0:	d8c00015 	stw	r3,0(sp)
  110ba4:	0103f140 	call	103f14 <__umodsi3>
  110ba8:	102d883a 	mov	r22,r2
  110bac:	8809883a 	mov	r4,r17
  110bb0:	a00b883a 	mov	r5,r20
  110bb4:	b02c943a 	slli	r22,r22,16
  110bb8:	0103f0c0 	call	103f0c <__udivsi3>
  110bbc:	1009883a 	mov	r4,r2
  110bc0:	a80b883a 	mov	r5,r21
  110bc4:	9cffffcc 	andi	r19,r19,65535
  110bc8:	1023883a 	mov	r17,r2
  110bcc:	b4e6b03a 	or	r19,r22,r19
  110bd0:	0103f1c0 	call	103f1c <__mulsi3>
  110bd4:	d8c00017 	ldw	r3,0(sp)
  110bd8:	9880052e 	bgeu	r19,r2,110bf0 <__udivdi3+0x2c8>
  110bdc:	9c27883a 	add	r19,r19,r16
  110be0:	893fffc4 	addi	r4,r17,-1
  110be4:	9c00b236 	bltu	r19,r16,110eb0 <__udivdi3+0x588>
  110be8:	9880b12e 	bgeu	r19,r2,110eb0 <__udivdi3+0x588>
  110bec:	8c7fff84 	addi	r17,r17,-2
  110bf0:	9024943a 	slli	r18,r18,16
  110bf4:	8c84b03a 	or	r2,r17,r18
  110bf8:	00000206 	br	110c04 <__udivdi3+0x2dc>
  110bfc:	0007883a 	mov	r3,zero
  110c00:	0005883a 	mov	r2,zero
  110c04:	dfc00a17 	ldw	ra,40(sp)
  110c08:	df000917 	ldw	fp,36(sp)
  110c0c:	ddc00817 	ldw	r23,32(sp)
  110c10:	dd800717 	ldw	r22,28(sp)
  110c14:	dd400617 	ldw	r21,24(sp)
  110c18:	dd000517 	ldw	r20,20(sp)
  110c1c:	dcc00417 	ldw	r19,16(sp)
  110c20:	dc800317 	ldw	r18,12(sp)
  110c24:	dc400217 	ldw	r17,8(sp)
  110c28:	dc000117 	ldw	r16,4(sp)
  110c2c:	dec00b04 	addi	sp,sp,44
  110c30:	f800283a 	ret
  110c34:	00803fc4 	movi	r2,255
  110c38:	11c0ac36 	bltu	r2,r7,110eec <__udivdi3+0x5c4>
  110c3c:	0007883a 	mov	r3,zero
  110c40:	000b883a 	mov	r5,zero
  110c44:	003f9606 	br	110aa0 <black_to_red_frame+0xfe110aa0>
  110c48:	00804034 	movhi	r2,256
  110c4c:	10bfffc4 	addi	r2,r2,-1
  110c50:	1180a936 	bltu	r2,r6,110ef8 <__udivdi3+0x5d0>
  110c54:	00800404 	movi	r2,16
  110c58:	1007883a 	mov	r3,r2
  110c5c:	003f4a06 	br	110988 <black_to_red_frame+0xfe110988>
  110c60:	00803fc4 	movi	r2,255
  110c64:	1400aa36 	bltu	r2,r16,110f10 <__udivdi3+0x5e8>
  110c68:	0005883a 	mov	r2,zero
  110c6c:	0007883a 	mov	r3,zero
  110c70:	003fa406 	br	110b04 <black_to_red_frame+0xfe110b04>
  110c74:	3c0e983a 	sll	r7,r7,r16
  110c78:	3086d83a 	srl	r3,r6,r2
  110c7c:	88aed83a 	srl	r23,r17,r2
  110c80:	9084d83a 	srl	r2,r18,r2
  110c84:	38e6b03a 	or	r19,r7,r3
  110c88:	9828d43a 	srli	r20,r19,16
  110c8c:	8c22983a 	sll	r17,r17,r16
  110c90:	b809883a 	mov	r4,r23
  110c94:	a00b883a 	mov	r5,r20
  110c98:	342a983a 	sll	r21,r6,r16
  110c9c:	88a2b03a 	or	r17,r17,r2
  110ca0:	0103f140 	call	103f14 <__umodsi3>
  110ca4:	b809883a 	mov	r4,r23
  110ca8:	a00b883a 	mov	r5,r20
  110cac:	1039883a 	mov	fp,r2
  110cb0:	9dbfffcc 	andi	r22,r19,65535
  110cb4:	0103f0c0 	call	103f0c <__udivsi3>
  110cb8:	1009883a 	mov	r4,r2
  110cbc:	b00b883a 	mov	r5,r22
  110cc0:	102f883a 	mov	r23,r2
  110cc4:	0103f1c0 	call	103f1c <__mulsi3>
  110cc8:	1009883a 	mov	r4,r2
  110ccc:	e00e943a 	slli	r7,fp,16
  110cd0:	8804d43a 	srli	r2,r17,16
  110cd4:	388eb03a 	or	r7,r7,r2
  110cd8:	3900042e 	bgeu	r7,r4,110cec <__udivdi3+0x3c4>
  110cdc:	3ccf883a 	add	r7,r7,r19
  110ce0:	b8bfffc4 	addi	r2,r23,-1
  110ce4:	3cc0972e 	bgeu	r7,r19,110f44 <__udivdi3+0x61c>
  110ce8:	102f883a 	mov	r23,r2
  110cec:	3939c83a 	sub	fp,r7,r4
  110cf0:	a00b883a 	mov	r5,r20
  110cf4:	e009883a 	mov	r4,fp
  110cf8:	0103f140 	call	103f14 <__umodsi3>
  110cfc:	a00b883a 	mov	r5,r20
  110d00:	e009883a 	mov	r4,fp
  110d04:	d8800015 	stw	r2,0(sp)
  110d08:	0103f0c0 	call	103f0c <__udivsi3>
  110d0c:	1009883a 	mov	r4,r2
  110d10:	b00b883a 	mov	r5,r22
  110d14:	1029883a 	mov	r20,r2
  110d18:	0103f1c0 	call	103f1c <__mulsi3>
  110d1c:	d8c00017 	ldw	r3,0(sp)
  110d20:	8c7fffcc 	andi	r17,r17,65535
  110d24:	1806943a 	slli	r3,r3,16
  110d28:	1c46b03a 	or	r3,r3,r17
  110d2c:	1880042e 	bgeu	r3,r2,110d40 <__udivdi3+0x418>
  110d30:	1cc7883a 	add	r3,r3,r19
  110d34:	a13fffc4 	addi	r4,r20,-1
  110d38:	1cc07e2e 	bgeu	r3,r19,110f34 <__udivdi3+0x60c>
  110d3c:	2029883a 	mov	r20,r4
  110d40:	b82e943a 	slli	r23,r23,16
  110d44:	a822d43a 	srli	r17,r21,16
  110d48:	ad7fffcc 	andi	r21,r21,65535
  110d4c:	a5e8b03a 	or	r20,r20,r23
  110d50:	a5bfffcc 	andi	r22,r20,65535
  110d54:	b009883a 	mov	r4,r22
  110d58:	a80b883a 	mov	r5,r21
  110d5c:	18afc83a 	sub	r23,r3,r2
  110d60:	a026d43a 	srli	r19,r20,16
  110d64:	0103f1c0 	call	103f1c <__mulsi3>
  110d68:	b009883a 	mov	r4,r22
  110d6c:	880b883a 	mov	r5,r17
  110d70:	1039883a 	mov	fp,r2
  110d74:	0103f1c0 	call	103f1c <__mulsi3>
  110d78:	a80b883a 	mov	r5,r21
  110d7c:	9809883a 	mov	r4,r19
  110d80:	102d883a 	mov	r22,r2
  110d84:	0103f1c0 	call	103f1c <__mulsi3>
  110d88:	9809883a 	mov	r4,r19
  110d8c:	880b883a 	mov	r5,r17
  110d90:	102b883a 	mov	r21,r2
  110d94:	0103f1c0 	call	103f1c <__mulsi3>
  110d98:	100b883a 	mov	r5,r2
  110d9c:	e004d43a 	srli	r2,fp,16
  110da0:	ad89883a 	add	r4,r21,r22
  110da4:	2089883a 	add	r4,r4,r2
  110da8:	2540022e 	bgeu	r4,r21,110db4 <__udivdi3+0x48c>
  110dac:	00800074 	movhi	r2,1
  110db0:	288b883a 	add	r5,r5,r2
  110db4:	2004d43a 	srli	r2,r4,16
  110db8:	288b883a 	add	r5,r5,r2
  110dbc:	b9404536 	bltu	r23,r5,110ed4 <__udivdi3+0x5ac>
  110dc0:	b9403f26 	beq	r23,r5,110ec0 <__udivdi3+0x598>
  110dc4:	a005883a 	mov	r2,r20
  110dc8:	0007883a 	mov	r3,zero
  110dcc:	003f8d06 	br	110c04 <black_to_red_frame+0xfe110c04>
  110dd0:	80a0983a 	sll	r16,r16,r2
  110dd4:	88eed83a 	srl	r23,r17,r3
  110dd8:	90c6d83a 	srl	r3,r18,r3
  110ddc:	8028d43a 	srli	r20,r16,16
  110de0:	88a2983a 	sll	r17,r17,r2
  110de4:	b809883a 	mov	r4,r23
  110de8:	a00b883a 	mov	r5,r20
  110dec:	88ecb03a 	or	r22,r17,r3
  110df0:	90a6983a 	sll	r19,r18,r2
  110df4:	0103f140 	call	103f14 <__umodsi3>
  110df8:	b809883a 	mov	r4,r23
  110dfc:	a00b883a 	mov	r5,r20
  110e00:	1023883a 	mov	r17,r2
  110e04:	857fffcc 	andi	r21,r16,65535
  110e08:	0103f0c0 	call	103f0c <__udivsi3>
  110e0c:	1009883a 	mov	r4,r2
  110e10:	a80b883a 	mov	r5,r21
  110e14:	102f883a 	mov	r23,r2
  110e18:	0103f1c0 	call	103f1c <__mulsi3>
  110e1c:	1009883a 	mov	r4,r2
  110e20:	880c943a 	slli	r6,r17,16
  110e24:	b004d43a 	srli	r2,r22,16
  110e28:	308cb03a 	or	r6,r6,r2
  110e2c:	3100062e 	bgeu	r6,r4,110e48 <__udivdi3+0x520>
  110e30:	340d883a 	add	r6,r6,r16
  110e34:	b8bfffc4 	addi	r2,r23,-1
  110e38:	34004836 	bltu	r6,r16,110f5c <__udivdi3+0x634>
  110e3c:	3100472e 	bgeu	r6,r4,110f5c <__udivdi3+0x634>
  110e40:	bdffff84 	addi	r23,r23,-2
  110e44:	340d883a 	add	r6,r6,r16
  110e48:	3125c83a 	sub	r18,r6,r4
  110e4c:	9009883a 	mov	r4,r18
  110e50:	a00b883a 	mov	r5,r20
  110e54:	0103f140 	call	103f14 <__umodsi3>
  110e58:	1023883a 	mov	r17,r2
  110e5c:	9009883a 	mov	r4,r18
  110e60:	a00b883a 	mov	r5,r20
  110e64:	8822943a 	slli	r17,r17,16
  110e68:	0103f0c0 	call	103f0c <__udivsi3>
  110e6c:	1009883a 	mov	r4,r2
  110e70:	a80b883a 	mov	r5,r21
  110e74:	b5bfffcc 	andi	r22,r22,65535
  110e78:	1025883a 	mov	r18,r2
  110e7c:	8da2b03a 	or	r17,r17,r22
  110e80:	0103f1c0 	call	103f1c <__mulsi3>
  110e84:	8880062e 	bgeu	r17,r2,110ea0 <__udivdi3+0x578>
  110e88:	8c23883a 	add	r17,r17,r16
  110e8c:	90ffffc4 	addi	r3,r18,-1
  110e90:	8c003036 	bltu	r17,r16,110f54 <__udivdi3+0x62c>
  110e94:	88802f2e 	bgeu	r17,r2,110f54 <__udivdi3+0x62c>
  110e98:	94bfff84 	addi	r18,r18,-2
  110e9c:	8c23883a 	add	r17,r17,r16
  110ea0:	b806943a 	slli	r3,r23,16
  110ea4:	88a3c83a 	sub	r17,r17,r2
  110ea8:	90c6b03a 	or	r3,r18,r3
  110eac:	003f2206 	br	110b38 <black_to_red_frame+0xfe110b38>
  110eb0:	2023883a 	mov	r17,r4
  110eb4:	003f4e06 	br	110bf0 <black_to_red_frame+0xfe110bf0>
  110eb8:	1823883a 	mov	r17,r3
  110ebc:	003eec06 	br	110a70 <black_to_red_frame+0xfe110a70>
  110ec0:	2008943a 	slli	r4,r4,16
  110ec4:	9420983a 	sll	r16,r18,r16
  110ec8:	e73fffcc 	andi	fp,fp,65535
  110ecc:	2709883a 	add	r4,r4,fp
  110ed0:	813fbc2e 	bgeu	r16,r4,110dc4 <black_to_red_frame+0xfe110dc4>
  110ed4:	a0bfffc4 	addi	r2,r20,-1
  110ed8:	0007883a 	mov	r3,zero
  110edc:	003f4906 	br	110c04 <black_to_red_frame+0xfe110c04>
  110ee0:	00c00604 	movi	r3,24
  110ee4:	180b883a 	mov	r5,r3
  110ee8:	003eed06 	br	110aa0 <black_to_red_frame+0xfe110aa0>
  110eec:	00c00204 	movi	r3,8
  110ef0:	180b883a 	mov	r5,r3
  110ef4:	003eea06 	br	110aa0 <black_to_red_frame+0xfe110aa0>
  110ef8:	00800604 	movi	r2,24
  110efc:	1007883a 	mov	r3,r2
  110f00:	003ea106 	br	110988 <black_to_red_frame+0xfe110988>
  110f04:	00800604 	movi	r2,24
  110f08:	1007883a 	mov	r3,r2
  110f0c:	003efd06 	br	110b04 <black_to_red_frame+0xfe110b04>
  110f10:	00800204 	movi	r2,8
  110f14:	1007883a 	mov	r3,r2
  110f18:	003efa06 	br	110b04 <black_to_red_frame+0xfe110b04>
  110f1c:	00800204 	movi	r2,8
  110f20:	1007883a 	mov	r3,r2
  110f24:	003e9806 	br	110988 <black_to_red_frame+0xfe110988>
  110f28:	0007883a 	mov	r3,zero
  110f2c:	00800044 	movi	r2,1
  110f30:	003f3406 	br	110c04 <black_to_red_frame+0xfe110c04>
  110f34:	18bf812e 	bgeu	r3,r2,110d3c <black_to_red_frame+0xfe110d3c>
  110f38:	a53fff84 	addi	r20,r20,-2
  110f3c:	1cc7883a 	add	r3,r3,r19
  110f40:	003f7f06 	br	110d40 <black_to_red_frame+0xfe110d40>
  110f44:	393f682e 	bgeu	r7,r4,110ce8 <black_to_red_frame+0xfe110ce8>
  110f48:	bdffff84 	addi	r23,r23,-2
  110f4c:	3ccf883a 	add	r7,r7,r19
  110f50:	003f6606 	br	110cec <black_to_red_frame+0xfe110cec>
  110f54:	1825883a 	mov	r18,r3
  110f58:	003fd106 	br	110ea0 <black_to_red_frame+0xfe110ea0>
  110f5c:	102f883a 	mov	r23,r2
  110f60:	003fb906 	br	110e48 <black_to_red_frame+0xfe110e48>
  110f64:	94bfff84 	addi	r18,r18,-2
  110f68:	3c0f883a 	add	r7,r7,r16
  110f6c:	003f0906 	br	110b94 <black_to_red_frame+0xfe110b94>
  110f70:	94bfff84 	addi	r18,r18,-2
  110f74:	1c07883a 	add	r3,r3,r16
  110f78:	003ea806 	br	110a1c <black_to_red_frame+0xfe110a1c>

00110f7c <__umoddi3>:
  110f7c:	defff304 	addi	sp,sp,-52
  110f80:	dd000715 	stw	r20,28(sp)
  110f84:	dc800515 	stw	r18,20(sp)
  110f88:	dc400415 	stw	r17,16(sp)
  110f8c:	dfc00c15 	stw	ra,48(sp)
  110f90:	df000b15 	stw	fp,44(sp)
  110f94:	ddc00a15 	stw	r23,40(sp)
  110f98:	dd800915 	stw	r22,36(sp)
  110f9c:	dd400815 	stw	r21,32(sp)
  110fa0:	dcc00615 	stw	r19,24(sp)
  110fa4:	dc000315 	stw	r16,12(sp)
  110fa8:	2025883a 	mov	r18,r4
  110fac:	2823883a 	mov	r17,r5
  110fb0:	2829883a 	mov	r20,r5
  110fb4:	38003d1e 	bne	r7,zero,1110ac <__umoddi3+0x130>
  110fb8:	3021883a 	mov	r16,r6
  110fbc:	2027883a 	mov	r19,r4
  110fc0:	2980532e 	bgeu	r5,r6,111110 <__umoddi3+0x194>
  110fc4:	00bfffd4 	movui	r2,65535
  110fc8:	1180a636 	bltu	r2,r6,111264 <__umoddi3+0x2e8>
  110fcc:	00803fc4 	movi	r2,255
  110fd0:	11816336 	bltu	r2,r6,111560 <__umoddi3+0x5e4>
  110fd4:	0005883a 	mov	r2,zero
  110fd8:	0009883a 	mov	r4,zero
  110fdc:	3084d83a 	srl	r2,r6,r2
  110fe0:	00c00474 	movhi	r3,17
  110fe4:	18daac04 	addi	r3,r3,27312
  110fe8:	1885883a 	add	r2,r3,r2
  110fec:	10800003 	ldbu	r2,0(r2)
  110ff0:	1109883a 	add	r4,r2,r4
  110ff4:	00800804 	movi	r2,32
  110ff8:	1105c83a 	sub	r2,r2,r4
  110ffc:	10011026 	beq	r2,zero,111440 <__umoddi3+0x4c4>
  111000:	9108d83a 	srl	r4,r18,r4
  111004:	88a2983a 	sll	r17,r17,r2
  111008:	30a0983a 	sll	r16,r6,r2
  11100c:	90a6983a 	sll	r19,r18,r2
  111010:	8928b03a 	or	r20,r17,r4
  111014:	1025883a 	mov	r18,r2
  111018:	8022d43a 	srli	r17,r16,16
  11101c:	a009883a 	mov	r4,r20
  111020:	857fffcc 	andi	r21,r16,65535
  111024:	880b883a 	mov	r5,r17
  111028:	0103f140 	call	103f14 <__umodsi3>
  11102c:	a009883a 	mov	r4,r20
  111030:	880b883a 	mov	r5,r17
  111034:	102d883a 	mov	r22,r2
  111038:	0103f0c0 	call	103f0c <__udivsi3>
  11103c:	1009883a 	mov	r4,r2
  111040:	a80b883a 	mov	r5,r21
  111044:	0103f1c0 	call	103f1c <__mulsi3>
  111048:	1009883a 	mov	r4,r2
  11104c:	b006943a 	slli	r3,r22,16
  111050:	9804d43a 	srli	r2,r19,16
  111054:	1886b03a 	or	r3,r3,r2
  111058:	1900042e 	bgeu	r3,r4,11106c <__umoddi3+0xf0>
  11105c:	1c07883a 	add	r3,r3,r16
  111060:	1c000236 	bltu	r3,r16,11106c <__umoddi3+0xf0>
  111064:	1900012e 	bgeu	r3,r4,11106c <__umoddi3+0xf0>
  111068:	1c07883a 	add	r3,r3,r16
  11106c:	1929c83a 	sub	r20,r3,r4
  111070:	a009883a 	mov	r4,r20
  111074:	880b883a 	mov	r5,r17
  111078:	0103f140 	call	103f14 <__umodsi3>
  11107c:	102d883a 	mov	r22,r2
  111080:	a009883a 	mov	r4,r20
  111084:	880b883a 	mov	r5,r17
  111088:	b02c943a 	slli	r22,r22,16
  11108c:	0103f0c0 	call	103f0c <__udivsi3>
  111090:	1009883a 	mov	r4,r2
  111094:	a80b883a 	mov	r5,r21
  111098:	9cffffcc 	andi	r19,r19,65535
  11109c:	0103f1c0 	call	103f1c <__mulsi3>
  1110a0:	b4e6b03a 	or	r19,r22,r19
  1110a4:	9880582e 	bgeu	r19,r2,111208 <__umoddi3+0x28c>
  1110a8:	00005306 	br	1111f8 <__umoddi3+0x27c>
  1110ac:	29c05a36 	bltu	r5,r7,111218 <__umoddi3+0x29c>
  1110b0:	00bfffd4 	movui	r2,65535
  1110b4:	11c0662e 	bgeu	r2,r7,111250 <__umoddi3+0x2d4>
  1110b8:	00804034 	movhi	r2,256
  1110bc:	10bfffc4 	addi	r2,r2,-1
  1110c0:	11c11b36 	bltu	r2,r7,111530 <__umoddi3+0x5b4>
  1110c4:	00c00404 	movi	r3,16
  1110c8:	1827883a 	mov	r19,r3
  1110cc:	38c6d83a 	srl	r3,r7,r3
  1110d0:	01000474 	movhi	r4,17
  1110d4:	211aac04 	addi	r4,r4,27312
  1110d8:	04000804 	movi	r16,32
  1110dc:	20c7883a 	add	r3,r4,r3
  1110e0:	18800003 	ldbu	r2,0(r3)
  1110e4:	14e7883a 	add	r19,r2,r19
  1110e8:	84e1c83a 	sub	r16,r16,r19
  1110ec:	8000681e 	bne	r16,zero,111290 <__umoddi3+0x314>
  1110f0:	3c400136 	bltu	r7,r17,1110f8 <__umoddi3+0x17c>
  1110f4:	91812736 	bltu	r18,r6,111594 <__umoddi3+0x618>
  1110f8:	9185c83a 	sub	r2,r18,r6
  1110fc:	89e3c83a 	sub	r17,r17,r7
  111100:	90a5803a 	cmpltu	r18,r18,r2
  111104:	8ca9c83a 	sub	r20,r17,r18
  111108:	a007883a 	mov	r3,r20
  11110c:	00004406 	br	111220 <__umoddi3+0x2a4>
  111110:	3000041e 	bne	r6,zero,111124 <__umoddi3+0x1a8>
  111114:	01000044 	movi	r4,1
  111118:	000b883a 	mov	r5,zero
  11111c:	0103f0c0 	call	103f0c <__udivsi3>
  111120:	1021883a 	mov	r16,r2
  111124:	00bfffd4 	movui	r2,65535
  111128:	1400542e 	bgeu	r2,r16,11127c <__umoddi3+0x300>
  11112c:	00804034 	movhi	r2,256
  111130:	10bfffc4 	addi	r2,r2,-1
  111134:	14010736 	bltu	r2,r16,111554 <__umoddi3+0x5d8>
  111138:	00800404 	movi	r2,16
  11113c:	1007883a 	mov	r3,r2
  111140:	8084d83a 	srl	r2,r16,r2
  111144:	01000474 	movhi	r4,17
  111148:	211aac04 	addi	r4,r4,27312
  11114c:	05400804 	movi	r21,32
  111150:	2085883a 	add	r2,r4,r2
  111154:	10800003 	ldbu	r2,0(r2)
  111158:	10c7883a 	add	r3,r2,r3
  11115c:	a8ebc83a 	sub	r21,r21,r3
  111160:	a800b91e 	bne	r21,zero,111448 <__umoddi3+0x4cc>
  111164:	8028d43a 	srli	r20,r16,16
  111168:	8c23c83a 	sub	r17,r17,r16
  11116c:	85bfffcc 	andi	r22,r16,65535
  111170:	0025883a 	mov	r18,zero
  111174:	8809883a 	mov	r4,r17
  111178:	a00b883a 	mov	r5,r20
  11117c:	0103f140 	call	103f14 <__umodsi3>
  111180:	8809883a 	mov	r4,r17
  111184:	a00b883a 	mov	r5,r20
  111188:	102b883a 	mov	r21,r2
  11118c:	0103f0c0 	call	103f0c <__udivsi3>
  111190:	1009883a 	mov	r4,r2
  111194:	b00b883a 	mov	r5,r22
  111198:	0103f1c0 	call	103f1c <__mulsi3>
  11119c:	1009883a 	mov	r4,r2
  1111a0:	a806943a 	slli	r3,r21,16
  1111a4:	9804d43a 	srli	r2,r19,16
  1111a8:	1886b03a 	or	r3,r3,r2
  1111ac:	1900032e 	bgeu	r3,r4,1111bc <__umoddi3+0x240>
  1111b0:	1c07883a 	add	r3,r3,r16
  1111b4:	1c000136 	bltu	r3,r16,1111bc <__umoddi3+0x240>
  1111b8:	1900f436 	bltu	r3,r4,11158c <__umoddi3+0x610>
  1111bc:	1923c83a 	sub	r17,r3,r4
  1111c0:	8809883a 	mov	r4,r17
  1111c4:	a00b883a 	mov	r5,r20
  1111c8:	0103f140 	call	103f14 <__umodsi3>
  1111cc:	102b883a 	mov	r21,r2
  1111d0:	8809883a 	mov	r4,r17
  1111d4:	a00b883a 	mov	r5,r20
  1111d8:	a82a943a 	slli	r21,r21,16
  1111dc:	0103f0c0 	call	103f0c <__udivsi3>
  1111e0:	1009883a 	mov	r4,r2
  1111e4:	b00b883a 	mov	r5,r22
  1111e8:	9cffffcc 	andi	r19,r19,65535
  1111ec:	0103f1c0 	call	103f1c <__mulsi3>
  1111f0:	ace6b03a 	or	r19,r21,r19
  1111f4:	9880042e 	bgeu	r19,r2,111208 <__umoddi3+0x28c>
  1111f8:	9c27883a 	add	r19,r19,r16
  1111fc:	9c000236 	bltu	r19,r16,111208 <__umoddi3+0x28c>
  111200:	9880012e 	bgeu	r19,r2,111208 <__umoddi3+0x28c>
  111204:	9c27883a 	add	r19,r19,r16
  111208:	9885c83a 	sub	r2,r19,r2
  11120c:	1484d83a 	srl	r2,r2,r18
  111210:	0007883a 	mov	r3,zero
  111214:	00000206 	br	111220 <__umoddi3+0x2a4>
  111218:	2005883a 	mov	r2,r4
  11121c:	2807883a 	mov	r3,r5
  111220:	dfc00c17 	ldw	ra,48(sp)
  111224:	df000b17 	ldw	fp,44(sp)
  111228:	ddc00a17 	ldw	r23,40(sp)
  11122c:	dd800917 	ldw	r22,36(sp)
  111230:	dd400817 	ldw	r21,32(sp)
  111234:	dd000717 	ldw	r20,28(sp)
  111238:	dcc00617 	ldw	r19,24(sp)
  11123c:	dc800517 	ldw	r18,20(sp)
  111240:	dc400417 	ldw	r17,16(sp)
  111244:	dc000317 	ldw	r16,12(sp)
  111248:	dec00d04 	addi	sp,sp,52
  11124c:	f800283a 	ret
  111250:	00803fc4 	movi	r2,255
  111254:	11c0b336 	bltu	r2,r7,111524 <__umoddi3+0x5a8>
  111258:	0007883a 	mov	r3,zero
  11125c:	0027883a 	mov	r19,zero
  111260:	003f9a06 	br	1110cc <black_to_red_frame+0xfe1110cc>
  111264:	00804034 	movhi	r2,256
  111268:	10bfffc4 	addi	r2,r2,-1
  11126c:	1180b336 	bltu	r2,r6,11153c <__umoddi3+0x5c0>
  111270:	00800404 	movi	r2,16
  111274:	1009883a 	mov	r4,r2
  111278:	003f5806 	br	110fdc <black_to_red_frame+0xfe110fdc>
  11127c:	00803fc4 	movi	r2,255
  111280:	1400b136 	bltu	r2,r16,111548 <__umoddi3+0x5cc>
  111284:	0005883a 	mov	r2,zero
  111288:	0007883a 	mov	r3,zero
  11128c:	003fac06 	br	111140 <black_to_red_frame+0xfe111140>
  111290:	34c4d83a 	srl	r2,r6,r19
  111294:	3c0e983a 	sll	r7,r7,r16
  111298:	8cf8d83a 	srl	fp,r17,r19
  11129c:	8c22983a 	sll	r17,r17,r16
  1112a0:	38a8b03a 	or	r20,r7,r2
  1112a4:	a02ad43a 	srli	r21,r20,16
  1112a8:	94c4d83a 	srl	r2,r18,r19
  1112ac:	e009883a 	mov	r4,fp
  1112b0:	a80b883a 	mov	r5,r21
  1112b4:	342c983a 	sll	r22,r6,r16
  1112b8:	88a2b03a 	or	r17,r17,r2
  1112bc:	0103f140 	call	103f14 <__umodsi3>
  1112c0:	e009883a 	mov	r4,fp
  1112c4:	a80b883a 	mov	r5,r21
  1112c8:	a5ffffcc 	andi	r23,r20,65535
  1112cc:	d8800215 	stw	r2,8(sp)
  1112d0:	0103f0c0 	call	103f0c <__udivsi3>
  1112d4:	1009883a 	mov	r4,r2
  1112d8:	b80b883a 	mov	r5,r23
  1112dc:	1039883a 	mov	fp,r2
  1112e0:	0103f1c0 	call	103f1c <__mulsi3>
  1112e4:	d8c00217 	ldw	r3,8(sp)
  1112e8:	1009883a 	mov	r4,r2
  1112ec:	8804d43a 	srli	r2,r17,16
  1112f0:	1806943a 	slli	r3,r3,16
  1112f4:	9424983a 	sll	r18,r18,r16
  1112f8:	1886b03a 	or	r3,r3,r2
  1112fc:	1900042e 	bgeu	r3,r4,111310 <__umoddi3+0x394>
  111300:	1d07883a 	add	r3,r3,r20
  111304:	e0bfffc4 	addi	r2,fp,-1
  111308:	1d009c2e 	bgeu	r3,r20,11157c <__umoddi3+0x600>
  11130c:	1039883a 	mov	fp,r2
  111310:	1907c83a 	sub	r3,r3,r4
  111314:	1809883a 	mov	r4,r3
  111318:	a80b883a 	mov	r5,r21
  11131c:	d8c00215 	stw	r3,8(sp)
  111320:	0103f140 	call	103f14 <__umodsi3>
  111324:	d8c00217 	ldw	r3,8(sp)
  111328:	a80b883a 	mov	r5,r21
  11132c:	d8800015 	stw	r2,0(sp)
  111330:	1809883a 	mov	r4,r3
  111334:	0103f0c0 	call	103f0c <__udivsi3>
  111338:	1009883a 	mov	r4,r2
  11133c:	b80b883a 	mov	r5,r23
  111340:	102b883a 	mov	r21,r2
  111344:	0103f1c0 	call	103f1c <__mulsi3>
  111348:	d9c00017 	ldw	r7,0(sp)
  11134c:	8c7fffcc 	andi	r17,r17,65535
  111350:	380e943a 	slli	r7,r7,16
  111354:	3c4eb03a 	or	r7,r7,r17
  111358:	3880042e 	bgeu	r7,r2,11136c <__umoddi3+0x3f0>
  11135c:	3d0f883a 	add	r7,r7,r20
  111360:	a8ffffc4 	addi	r3,r21,-1
  111364:	3d00812e 	bgeu	r7,r20,11156c <__umoddi3+0x5f0>
  111368:	182b883a 	mov	r21,r3
  11136c:	e038943a 	slli	fp,fp,16
  111370:	b010d43a 	srli	r8,r22,16
  111374:	b1bfffcc 	andi	r6,r22,65535
  111378:	af2ab03a 	or	r21,r21,fp
  11137c:	a82ed43a 	srli	r23,r21,16
  111380:	ad7fffcc 	andi	r21,r21,65535
  111384:	300b883a 	mov	r5,r6
  111388:	a809883a 	mov	r4,r21
  11138c:	38a3c83a 	sub	r17,r7,r2
  111390:	d9800115 	stw	r6,4(sp)
  111394:	da000015 	stw	r8,0(sp)
  111398:	0103f1c0 	call	103f1c <__mulsi3>
  11139c:	da000017 	ldw	r8,0(sp)
  1113a0:	a809883a 	mov	r4,r21
  1113a4:	1039883a 	mov	fp,r2
  1113a8:	400b883a 	mov	r5,r8
  1113ac:	da000215 	stw	r8,8(sp)
  1113b0:	0103f1c0 	call	103f1c <__mulsi3>
  1113b4:	d9800117 	ldw	r6,4(sp)
  1113b8:	b809883a 	mov	r4,r23
  1113bc:	d8800015 	stw	r2,0(sp)
  1113c0:	300b883a 	mov	r5,r6
  1113c4:	0103f1c0 	call	103f1c <__mulsi3>
  1113c8:	d8c00217 	ldw	r3,8(sp)
  1113cc:	b809883a 	mov	r4,r23
  1113d0:	102b883a 	mov	r21,r2
  1113d4:	180b883a 	mov	r5,r3
  1113d8:	0103f1c0 	call	103f1c <__mulsi3>
  1113dc:	d9c00017 	ldw	r7,0(sp)
  1113e0:	1007883a 	mov	r3,r2
  1113e4:	e004d43a 	srli	r2,fp,16
  1113e8:	a9c9883a 	add	r4,r21,r7
  1113ec:	2089883a 	add	r4,r4,r2
  1113f0:	2540022e 	bgeu	r4,r21,1113fc <__umoddi3+0x480>
  1113f4:	00800074 	movhi	r2,1
  1113f8:	1887883a 	add	r3,r3,r2
  1113fc:	2004d43a 	srli	r2,r4,16
  111400:	2008943a 	slli	r4,r4,16
  111404:	e73fffcc 	andi	fp,fp,65535
  111408:	1887883a 	add	r3,r3,r2
  11140c:	2709883a 	add	r4,r4,fp
  111410:	88c03e36 	bltu	r17,r3,11150c <__umoddi3+0x590>
  111414:	88c06226 	beq	r17,r3,1115a0 <__umoddi3+0x624>
  111418:	88c7c83a 	sub	r3,r17,r3
  11141c:	202d883a 	mov	r22,r4
  111420:	95adc83a 	sub	r22,r18,r22
  111424:	95a5803a 	cmpltu	r18,r18,r22
  111428:	1c87c83a 	sub	r3,r3,r18
  11142c:	1cc4983a 	sll	r2,r3,r19
  111430:	b42cd83a 	srl	r22,r22,r16
  111434:	1c06d83a 	srl	r3,r3,r16
  111438:	1584b03a 	or	r2,r2,r22
  11143c:	003f7806 	br	111220 <black_to_red_frame+0xfe111220>
  111440:	0025883a 	mov	r18,zero
  111444:	003ef406 	br	111018 <black_to_red_frame+0xfe111018>
  111448:	8560983a 	sll	r16,r16,r21
  11144c:	88e6d83a 	srl	r19,r17,r3
  111450:	90c6d83a 	srl	r3,r18,r3
  111454:	8028d43a 	srli	r20,r16,16
  111458:	8d62983a 	sll	r17,r17,r21
  11145c:	9809883a 	mov	r4,r19
  111460:	a00b883a 	mov	r5,r20
  111464:	88eeb03a 	or	r23,r17,r3
  111468:	0103f140 	call	103f14 <__umodsi3>
  11146c:	9809883a 	mov	r4,r19
  111470:	a00b883a 	mov	r5,r20
  111474:	1023883a 	mov	r17,r2
  111478:	85bfffcc 	andi	r22,r16,65535
  11147c:	0103f0c0 	call	103f0c <__udivsi3>
  111480:	1009883a 	mov	r4,r2
  111484:	b00b883a 	mov	r5,r22
  111488:	0103f1c0 	call	103f1c <__mulsi3>
  11148c:	1007883a 	mov	r3,r2
  111490:	8808943a 	slli	r4,r17,16
  111494:	b804d43a 	srli	r2,r23,16
  111498:	9566983a 	sll	r19,r18,r21
  11149c:	2088b03a 	or	r4,r4,r2
  1114a0:	20c0042e 	bgeu	r4,r3,1114b4 <__umoddi3+0x538>
  1114a4:	2409883a 	add	r4,r4,r16
  1114a8:	24000236 	bltu	r4,r16,1114b4 <__umoddi3+0x538>
  1114ac:	20c0012e 	bgeu	r4,r3,1114b4 <__umoddi3+0x538>
  1114b0:	2409883a 	add	r4,r4,r16
  1114b4:	20e5c83a 	sub	r18,r4,r3
  1114b8:	9009883a 	mov	r4,r18
  1114bc:	a00b883a 	mov	r5,r20
  1114c0:	0103f140 	call	103f14 <__umodsi3>
  1114c4:	1023883a 	mov	r17,r2
  1114c8:	9009883a 	mov	r4,r18
  1114cc:	a00b883a 	mov	r5,r20
  1114d0:	8822943a 	slli	r17,r17,16
  1114d4:	0103f0c0 	call	103f0c <__udivsi3>
  1114d8:	1009883a 	mov	r4,r2
  1114dc:	b00b883a 	mov	r5,r22
  1114e0:	bdffffcc 	andi	r23,r23,65535
  1114e4:	0103f1c0 	call	103f1c <__mulsi3>
  1114e8:	8de2b03a 	or	r17,r17,r23
  1114ec:	8880042e 	bgeu	r17,r2,111500 <__umoddi3+0x584>
  1114f0:	8c23883a 	add	r17,r17,r16
  1114f4:	8c000236 	bltu	r17,r16,111500 <__umoddi3+0x584>
  1114f8:	8880012e 	bgeu	r17,r2,111500 <__umoddi3+0x584>
  1114fc:	8c23883a 	add	r17,r17,r16
  111500:	88a3c83a 	sub	r17,r17,r2
  111504:	a825883a 	mov	r18,r21
  111508:	003f1a06 	br	111174 <black_to_red_frame+0xfe111174>
  11150c:	25adc83a 	sub	r22,r4,r22
  111510:	1d07c83a 	sub	r3,r3,r20
  111514:	2589803a 	cmpltu	r4,r4,r22
  111518:	1907c83a 	sub	r3,r3,r4
  11151c:	88c7c83a 	sub	r3,r17,r3
  111520:	003fbf06 	br	111420 <black_to_red_frame+0xfe111420>
  111524:	00c00204 	movi	r3,8
  111528:	1827883a 	mov	r19,r3
  11152c:	003ee706 	br	1110cc <black_to_red_frame+0xfe1110cc>
  111530:	00c00604 	movi	r3,24
  111534:	1827883a 	mov	r19,r3
  111538:	003ee406 	br	1110cc <black_to_red_frame+0xfe1110cc>
  11153c:	00800604 	movi	r2,24
  111540:	1009883a 	mov	r4,r2
  111544:	003ea506 	br	110fdc <black_to_red_frame+0xfe110fdc>
  111548:	00800204 	movi	r2,8
  11154c:	1007883a 	mov	r3,r2
  111550:	003efb06 	br	111140 <black_to_red_frame+0xfe111140>
  111554:	00800604 	movi	r2,24
  111558:	1007883a 	mov	r3,r2
  11155c:	003ef806 	br	111140 <black_to_red_frame+0xfe111140>
  111560:	00800204 	movi	r2,8
  111564:	1009883a 	mov	r4,r2
  111568:	003e9c06 	br	110fdc <black_to_red_frame+0xfe110fdc>
  11156c:	38bf7e2e 	bgeu	r7,r2,111368 <black_to_red_frame+0xfe111368>
  111570:	ad7fff84 	addi	r21,r21,-2
  111574:	3d0f883a 	add	r7,r7,r20
  111578:	003f7c06 	br	11136c <black_to_red_frame+0xfe11136c>
  11157c:	193f632e 	bgeu	r3,r4,11130c <black_to_red_frame+0xfe11130c>
  111580:	e73fff84 	addi	fp,fp,-2
  111584:	1d07883a 	add	r3,r3,r20
  111588:	003f6106 	br	111310 <black_to_red_frame+0xfe111310>
  11158c:	1c07883a 	add	r3,r3,r16
  111590:	003f0a06 	br	1111bc <black_to_red_frame+0xfe1111bc>
  111594:	9005883a 	mov	r2,r18
  111598:	a007883a 	mov	r3,r20
  11159c:	003f2006 	br	111220 <black_to_red_frame+0xfe111220>
  1115a0:	913fda36 	bltu	r18,r4,11150c <black_to_red_frame+0xfe11150c>
  1115a4:	202d883a 	mov	r22,r4
  1115a8:	0007883a 	mov	r3,zero
  1115ac:	003f9c06 	br	111420 <black_to_red_frame+0xfe111420>

001115b0 <__adddf3>:
  1115b0:	00800434 	movhi	r2,16
  1115b4:	10bfffc4 	addi	r2,r2,-1
  1115b8:	defffb04 	addi	sp,sp,-20
  1115bc:	2890703a 	and	r8,r5,r2
  1115c0:	2806d7fa 	srli	r3,r5,31
  1115c4:	3884703a 	and	r2,r7,r2
  1115c8:	2014d77a 	srli	r10,r4,29
  1115cc:	3812d53a 	srli	r9,r7,20
  1115d0:	dc400115 	stw	r17,4(sp)
  1115d4:	100490fa 	slli	r2,r2,3
  1115d8:	2822d53a 	srli	r17,r5,20
  1115dc:	380ed7fa 	srli	r7,r7,31
  1115e0:	400a90fa 	slli	r5,r8,3
  1115e4:	3010d77a 	srli	r8,r6,29
  1115e8:	dc800215 	stw	r18,8(sp)
  1115ec:	dc000015 	stw	r16,0(sp)
  1115f0:	dfc00415 	stw	ra,16(sp)
  1115f4:	dcc00315 	stw	r19,12(sp)
  1115f8:	1c803fcc 	andi	r18,r3,255
  1115fc:	202090fa 	slli	r16,r4,3
  111600:	8c41ffcc 	andi	r17,r17,2047
  111604:	2a8ab03a 	or	r5,r5,r10
  111608:	4901ffcc 	andi	r4,r9,2047
  11160c:	1204b03a 	or	r2,r2,r8
  111610:	300c90fa 	slli	r6,r6,3
  111614:	91c07126 	beq	r18,r7,1117dc <__adddf3+0x22c>
  111618:	8907c83a 	sub	r3,r17,r4
  11161c:	00c0a00e 	bge	zero,r3,1118a0 <__adddf3+0x2f0>
  111620:	2000291e 	bne	r4,zero,1116c8 <__adddf3+0x118>
  111624:	1188b03a 	or	r4,r2,r6
  111628:	20008b1e 	bne	r4,zero,111858 <__adddf3+0x2a8>
  11162c:	808001cc 	andi	r2,r16,7
  111630:	10005a26 	beq	r2,zero,11179c <__adddf3+0x1ec>
  111634:	80c003cc 	andi	r3,r16,15
  111638:	00800104 	movi	r2,4
  11163c:	18805726 	beq	r3,r2,11179c <__adddf3+0x1ec>
  111640:	81000104 	addi	r4,r16,4
  111644:	2421803a 	cmpltu	r16,r4,r16
  111648:	2c0b883a 	add	r5,r5,r16
  11164c:	2880202c 	andhi	r2,r5,128
  111650:	9007883a 	mov	r3,r18
  111654:	2021883a 	mov	r16,r4
  111658:	10005326 	beq	r2,zero,1117a8 <__adddf3+0x1f8>
  11165c:	8c400044 	addi	r17,r17,1
  111660:	0081ffc4 	movi	r2,2047
  111664:	8880ae26 	beq	r17,r2,111920 <__adddf3+0x370>
  111668:	00bfe034 	movhi	r2,65408
  11166c:	10bfffc4 	addi	r2,r2,-1
  111670:	288a703a 	and	r5,r5,r2
  111674:	2804977a 	slli	r2,r5,29
  111678:	280a927a 	slli	r5,r5,9
  11167c:	8020d0fa 	srli	r16,r16,3
  111680:	280ad33a 	srli	r5,r5,12
  111684:	1404b03a 	or	r2,r2,r16
  111688:	8c41ffcc 	andi	r17,r17,2047
  11168c:	8822953a 	slli	r17,r17,20
  111690:	18c03fcc 	andi	r3,r3,255
  111694:	180897fa 	slli	r4,r3,31
  111698:	00c00434 	movhi	r3,16
  11169c:	18ffffc4 	addi	r3,r3,-1
  1116a0:	28c6703a 	and	r3,r5,r3
  1116a4:	1c46b03a 	or	r3,r3,r17
  1116a8:	1906b03a 	or	r3,r3,r4
  1116ac:	dfc00417 	ldw	ra,16(sp)
  1116b0:	dcc00317 	ldw	r19,12(sp)
  1116b4:	dc800217 	ldw	r18,8(sp)
  1116b8:	dc400117 	ldw	r17,4(sp)
  1116bc:	dc000017 	ldw	r16,0(sp)
  1116c0:	dec00504 	addi	sp,sp,20
  1116c4:	f800283a 	ret
  1116c8:	0101ffc4 	movi	r4,2047
  1116cc:	893fd726 	beq	r17,r4,11162c <black_to_red_frame+0xfe11162c>
  1116d0:	10802034 	orhi	r2,r2,128
  1116d4:	01000e04 	movi	r4,56
  1116d8:	20c09416 	blt	r4,r3,11192c <__adddf3+0x37c>
  1116dc:	010007c4 	movi	r4,31
  1116e0:	20c0b716 	blt	r4,r3,1119c0 <__adddf3+0x410>
  1116e4:	01000804 	movi	r4,32
  1116e8:	20c9c83a 	sub	r4,r4,r3
  1116ec:	30ced83a 	srl	r7,r6,r3
  1116f0:	1110983a 	sll	r8,r2,r4
  1116f4:	3108983a 	sll	r4,r6,r4
  1116f8:	10c6d83a 	srl	r3,r2,r3
  1116fc:	41c4b03a 	or	r2,r8,r7
  111700:	2008c03a 	cmpne	r4,r4,zero
  111704:	110cb03a 	or	r6,r2,r4
  111708:	818dc83a 	sub	r6,r16,r6
  11170c:	81a1803a 	cmpltu	r16,r16,r6
  111710:	28cbc83a 	sub	r5,r5,r3
  111714:	2c0bc83a 	sub	r5,r5,r16
  111718:	3021883a 	mov	r16,r6
  11171c:	2880202c 	andhi	r2,r5,128
  111720:	103fc226 	beq	r2,zero,11162c <black_to_red_frame+0xfe11162c>
  111724:	04c02034 	movhi	r19,128
  111728:	9cffffc4 	addi	r19,r19,-1
  11172c:	2ce6703a 	and	r19,r5,r19
  111730:	98006c26 	beq	r19,zero,1118e4 <__adddf3+0x334>
  111734:	9809883a 	mov	r4,r19
  111738:	0113c880 	call	113c88 <__clzsi2>
  11173c:	10fffe04 	addi	r3,r2,-8
  111740:	010007c4 	movi	r4,31
  111744:	20c06d16 	blt	r4,r3,1118fc <__adddf3+0x34c>
  111748:	01000a04 	movi	r4,40
  11174c:	2085c83a 	sub	r2,r4,r2
  111750:	8084d83a 	srl	r2,r16,r2
  111754:	98e6983a 	sll	r19,r19,r3
  111758:	80e0983a 	sll	r16,r16,r3
  11175c:	14c4b03a 	or	r2,r2,r19
  111760:	1c406a16 	blt	r3,r17,11190c <__adddf3+0x35c>
  111764:	1c63c83a 	sub	r17,r3,r17
  111768:	89400044 	addi	r5,r17,1
  11176c:	00c007c4 	movi	r3,31
  111770:	19408616 	blt	r3,r5,11198c <__adddf3+0x3dc>
  111774:	1c47c83a 	sub	r3,r3,r17
  111778:	8148d83a 	srl	r4,r16,r5
  11177c:	80e0983a 	sll	r16,r16,r3
  111780:	10c6983a 	sll	r3,r2,r3
  111784:	114ad83a 	srl	r5,r2,r5
  111788:	8004c03a 	cmpne	r2,r16,zero
  11178c:	20e0b03a 	or	r16,r4,r3
  111790:	80a0b03a 	or	r16,r16,r2
  111794:	0023883a 	mov	r17,zero
  111798:	003fa406 	br	11162c <black_to_red_frame+0xfe11162c>
  11179c:	2880202c 	andhi	r2,r5,128
  1117a0:	9007883a 	mov	r3,r18
  1117a4:	103fad1e 	bne	r2,zero,11165c <black_to_red_frame+0xfe11165c>
  1117a8:	2804977a 	slli	r2,r5,29
  1117ac:	8020d0fa 	srli	r16,r16,3
  1117b0:	0101ffc4 	movi	r4,2047
  1117b4:	280ad0fa 	srli	r5,r5,3
  1117b8:	1404b03a 	or	r2,r2,r16
  1117bc:	8900031e 	bne	r17,r4,1117cc <__adddf3+0x21c>
  1117c0:	1148b03a 	or	r4,r2,r5
  1117c4:	20005626 	beq	r4,zero,111920 <__adddf3+0x370>
  1117c8:	29400234 	orhi	r5,r5,8
  1117cc:	01000434 	movhi	r4,16
  1117d0:	213fffc4 	addi	r4,r4,-1
  1117d4:	290a703a 	and	r5,r5,r4
  1117d8:	003fab06 	br	111688 <black_to_red_frame+0xfe111688>
  1117dc:	890fc83a 	sub	r7,r17,r4
  1117e0:	01c0560e 	bge	zero,r7,11193c <__adddf3+0x38c>
  1117e4:	20002426 	beq	r4,zero,111878 <__adddf3+0x2c8>
  1117e8:	0101ffc4 	movi	r4,2047
  1117ec:	893f8f26 	beq	r17,r4,11162c <black_to_red_frame+0xfe11162c>
  1117f0:	10802034 	orhi	r2,r2,128
  1117f4:	01000e04 	movi	r4,56
  1117f8:	21c09d0e 	bge	r4,r7,111a70 <__adddf3+0x4c0>
  1117fc:	118cb03a 	or	r6,r2,r6
  111800:	300cc03a 	cmpne	r6,r6,zero
  111804:	000f883a 	mov	r7,zero
  111808:	340d883a 	add	r6,r6,r16
  11180c:	3421803a 	cmpltu	r16,r6,r16
  111810:	394b883a 	add	r5,r7,r5
  111814:	2c0b883a 	add	r5,r5,r16
  111818:	3021883a 	mov	r16,r6
  11181c:	2880202c 	andhi	r2,r5,128
  111820:	103f8226 	beq	r2,zero,11162c <black_to_red_frame+0xfe11162c>
  111824:	8c400044 	addi	r17,r17,1
  111828:	0081ffc4 	movi	r2,2047
  11182c:	8880cb26 	beq	r17,r2,111b5c <__adddf3+0x5ac>
  111830:	00bfe034 	movhi	r2,65408
  111834:	10bfffc4 	addi	r2,r2,-1
  111838:	288a703a 	and	r5,r5,r2
  11183c:	8006d07a 	srli	r3,r16,1
  111840:	280497fa 	slli	r2,r5,31
  111844:	8400004c 	andi	r16,r16,1
  111848:	80e0b03a 	or	r16,r16,r3
  11184c:	80a0b03a 	or	r16,r16,r2
  111850:	280ad07a 	srli	r5,r5,1
  111854:	003f7506 	br	11162c <black_to_red_frame+0xfe11162c>
  111858:	18ffffc4 	addi	r3,r3,-1
  11185c:	1800481e 	bne	r3,zero,111980 <__adddf3+0x3d0>
  111860:	818dc83a 	sub	r6,r16,r6
  111864:	81a1803a 	cmpltu	r16,r16,r6
  111868:	288bc83a 	sub	r5,r5,r2
  11186c:	2c0bc83a 	sub	r5,r5,r16
  111870:	3021883a 	mov	r16,r6
  111874:	003fa906 	br	11171c <black_to_red_frame+0xfe11171c>
  111878:	1188b03a 	or	r4,r2,r6
  11187c:	203f6b26 	beq	r4,zero,11162c <black_to_red_frame+0xfe11162c>
  111880:	39ffffc4 	addi	r7,r7,-1
  111884:	3800931e 	bne	r7,zero,111ad4 <__adddf3+0x524>
  111888:	340d883a 	add	r6,r6,r16
  11188c:	3421803a 	cmpltu	r16,r6,r16
  111890:	114b883a 	add	r5,r2,r5
  111894:	2c0b883a 	add	r5,r5,r16
  111898:	3021883a 	mov	r16,r6
  11189c:	003fdf06 	br	11181c <black_to_red_frame+0xfe11181c>
  1118a0:	1800531e 	bne	r3,zero,1119f0 <__adddf3+0x440>
  1118a4:	88c00044 	addi	r3,r17,1
  1118a8:	18c1ffcc 	andi	r3,r3,2047
  1118ac:	01000044 	movi	r4,1
  1118b0:	20c0a00e 	bge	r4,r3,111b34 <__adddf3+0x584>
  1118b4:	8187c83a 	sub	r3,r16,r6
  1118b8:	80c9803a 	cmpltu	r4,r16,r3
  1118bc:	28a7c83a 	sub	r19,r5,r2
  1118c0:	9927c83a 	sub	r19,r19,r4
  1118c4:	9900202c 	andhi	r4,r19,128
  1118c8:	20006226 	beq	r4,zero,111a54 <__adddf3+0x4a4>
  1118cc:	3421c83a 	sub	r16,r6,r16
  1118d0:	1145c83a 	sub	r2,r2,r5
  1118d4:	340d803a 	cmpltu	r6,r6,r16
  1118d8:	11a7c83a 	sub	r19,r2,r6
  1118dc:	3825883a 	mov	r18,r7
  1118e0:	983f941e 	bne	r19,zero,111734 <black_to_red_frame+0xfe111734>
  1118e4:	8009883a 	mov	r4,r16
  1118e8:	0113c880 	call	113c88 <__clzsi2>
  1118ec:	10800804 	addi	r2,r2,32
  1118f0:	10fffe04 	addi	r3,r2,-8
  1118f4:	010007c4 	movi	r4,31
  1118f8:	20ff930e 	bge	r4,r3,111748 <black_to_red_frame+0xfe111748>
  1118fc:	10bff604 	addi	r2,r2,-40
  111900:	8084983a 	sll	r2,r16,r2
  111904:	0021883a 	mov	r16,zero
  111908:	1c7f960e 	bge	r3,r17,111764 <black_to_red_frame+0xfe111764>
  11190c:	017fe034 	movhi	r5,65408
  111910:	297fffc4 	addi	r5,r5,-1
  111914:	88e3c83a 	sub	r17,r17,r3
  111918:	114a703a 	and	r5,r2,r5
  11191c:	003f4306 	br	11162c <black_to_red_frame+0xfe11162c>
  111920:	000b883a 	mov	r5,zero
  111924:	0005883a 	mov	r2,zero
  111928:	003f5706 	br	111688 <black_to_red_frame+0xfe111688>
  11192c:	118cb03a 	or	r6,r2,r6
  111930:	300cc03a 	cmpne	r6,r6,zero
  111934:	0007883a 	mov	r3,zero
  111938:	003f7306 	br	111708 <black_to_red_frame+0xfe111708>
  11193c:	3800961e 	bne	r7,zero,111b98 <__adddf3+0x5e8>
  111940:	89000044 	addi	r4,r17,1
  111944:	2201ffcc 	andi	r8,r4,2047
  111948:	01c00044 	movi	r7,1
  11194c:	3a00680e 	bge	r7,r8,111af0 <__adddf3+0x540>
  111950:	01c1ffc4 	movi	r7,2047
  111954:	21c0a726 	beq	r4,r7,111bf4 <__adddf3+0x644>
  111958:	340d883a 	add	r6,r6,r16
  11195c:	3421803a 	cmpltu	r16,r6,r16
  111960:	114b883a 	add	r5,r2,r5
  111964:	2c0b883a 	add	r5,r5,r16
  111968:	282097fa 	slli	r16,r5,31
  11196c:	300cd07a 	srli	r6,r6,1
  111970:	280ad07a 	srli	r5,r5,1
  111974:	2023883a 	mov	r17,r4
  111978:	81a0b03a 	or	r16,r16,r6
  11197c:	003f2b06 	br	11162c <black_to_red_frame+0xfe11162c>
  111980:	0101ffc4 	movi	r4,2047
  111984:	893f531e 	bne	r17,r4,1116d4 <black_to_red_frame+0xfe1116d4>
  111988:	003f2806 	br	11162c <black_to_red_frame+0xfe11162c>
  11198c:	893ff844 	addi	r4,r17,-31
  111990:	00c00804 	movi	r3,32
  111994:	1108d83a 	srl	r4,r2,r4
  111998:	28c05126 	beq	r5,r3,111ae0 <__adddf3+0x530>
  11199c:	00c00fc4 	movi	r3,63
  1119a0:	1c63c83a 	sub	r17,r3,r17
  1119a4:	1444983a 	sll	r2,r2,r17
  1119a8:	1420b03a 	or	r16,r2,r16
  1119ac:	8020c03a 	cmpne	r16,r16,zero
  1119b0:	8120b03a 	or	r16,r16,r4
  1119b4:	000b883a 	mov	r5,zero
  1119b8:	0023883a 	mov	r17,zero
  1119bc:	003f1b06 	br	11162c <black_to_red_frame+0xfe11162c>
  1119c0:	193ff804 	addi	r4,r3,-32
  1119c4:	01c00804 	movi	r7,32
  1119c8:	1108d83a 	srl	r4,r2,r4
  1119cc:	19c04626 	beq	r3,r7,111ae8 <__adddf3+0x538>
  1119d0:	01c01004 	movi	r7,64
  1119d4:	38c7c83a 	sub	r3,r7,r3
  1119d8:	10c4983a 	sll	r2,r2,r3
  1119dc:	118cb03a 	or	r6,r2,r6
  1119e0:	300cc03a 	cmpne	r6,r6,zero
  1119e4:	310cb03a 	or	r6,r6,r4
  1119e8:	0007883a 	mov	r3,zero
  1119ec:	003f4606 	br	111708 <black_to_red_frame+0xfe111708>
  1119f0:	88002b26 	beq	r17,zero,111aa0 <__adddf3+0x4f0>
  1119f4:	0201ffc4 	movi	r8,2047
  1119f8:	22002f26 	beq	r4,r8,111ab8 <__adddf3+0x508>
  1119fc:	00c7c83a 	sub	r3,zero,r3
  111a00:	29402034 	orhi	r5,r5,128
  111a04:	02000e04 	movi	r8,56
  111a08:	40c07616 	blt	r8,r3,111be4 <__adddf3+0x634>
  111a0c:	020007c4 	movi	r8,31
  111a10:	40c0d216 	blt	r8,r3,111d5c <__adddf3+0x7ac>
  111a14:	02000804 	movi	r8,32
  111a18:	40d1c83a 	sub	r8,r8,r3
  111a1c:	2a14983a 	sll	r10,r5,r8
  111a20:	80d2d83a 	srl	r9,r16,r3
  111a24:	8210983a 	sll	r8,r16,r8
  111a28:	28cad83a 	srl	r5,r5,r3
  111a2c:	5252b03a 	or	r9,r10,r9
  111a30:	4006c03a 	cmpne	r3,r8,zero
  111a34:	48e0b03a 	or	r16,r9,r3
  111a38:	3421c83a 	sub	r16,r6,r16
  111a3c:	114bc83a 	sub	r5,r2,r5
  111a40:	340d803a 	cmpltu	r6,r6,r16
  111a44:	298bc83a 	sub	r5,r5,r6
  111a48:	2023883a 	mov	r17,r4
  111a4c:	3825883a 	mov	r18,r7
  111a50:	003f3206 	br	11171c <black_to_red_frame+0xfe11171c>
  111a54:	98c4b03a 	or	r2,r19,r3
  111a58:	10001c1e 	bne	r2,zero,111acc <__adddf3+0x51c>
  111a5c:	0007883a 	mov	r3,zero
  111a60:	000b883a 	mov	r5,zero
  111a64:	0021883a 	mov	r16,zero
  111a68:	0023883a 	mov	r17,zero
  111a6c:	003f4e06 	br	1117a8 <black_to_red_frame+0xfe1117a8>
  111a70:	010007c4 	movi	r4,31
  111a74:	21c03c16 	blt	r4,r7,111b68 <__adddf3+0x5b8>
  111a78:	01000804 	movi	r4,32
  111a7c:	21c9c83a 	sub	r4,r4,r7
  111a80:	31d0d83a 	srl	r8,r6,r7
  111a84:	1112983a 	sll	r9,r2,r4
  111a88:	3108983a 	sll	r4,r6,r4
  111a8c:	11ced83a 	srl	r7,r2,r7
  111a90:	4a04b03a 	or	r2,r9,r8
  111a94:	2008c03a 	cmpne	r4,r4,zero
  111a98:	110cb03a 	or	r6,r2,r4
  111a9c:	003f5a06 	br	111808 <black_to_red_frame+0xfe111808>
  111aa0:	2c10b03a 	or	r8,r5,r16
  111aa4:	40000426 	beq	r8,zero,111ab8 <__adddf3+0x508>
  111aa8:	00c6303a 	nor	r3,zero,r3
  111aac:	183fe226 	beq	r3,zero,111a38 <black_to_red_frame+0xfe111a38>
  111ab0:	0201ffc4 	movi	r8,2047
  111ab4:	223fd31e 	bne	r4,r8,111a04 <black_to_red_frame+0xfe111a04>
  111ab8:	100b883a 	mov	r5,r2
  111abc:	3021883a 	mov	r16,r6
  111ac0:	2023883a 	mov	r17,r4
  111ac4:	3825883a 	mov	r18,r7
  111ac8:	003ed806 	br	11162c <black_to_red_frame+0xfe11162c>
  111acc:	1821883a 	mov	r16,r3
  111ad0:	003f1706 	br	111730 <black_to_red_frame+0xfe111730>
  111ad4:	0101ffc4 	movi	r4,2047
  111ad8:	893f461e 	bne	r17,r4,1117f4 <black_to_red_frame+0xfe1117f4>
  111adc:	003ed306 	br	11162c <black_to_red_frame+0xfe11162c>
  111ae0:	0005883a 	mov	r2,zero
  111ae4:	003fb006 	br	1119a8 <black_to_red_frame+0xfe1119a8>
  111ae8:	0005883a 	mov	r2,zero
  111aec:	003fbb06 	br	1119dc <black_to_red_frame+0xfe1119dc>
  111af0:	2c06b03a 	or	r3,r5,r16
  111af4:	8800841e 	bne	r17,zero,111d08 <__adddf3+0x758>
  111af8:	1800b226 	beq	r3,zero,111dc4 <__adddf3+0x814>
  111afc:	1186b03a 	or	r3,r2,r6
  111b00:	183eca26 	beq	r3,zero,11162c <black_to_red_frame+0xfe11162c>
  111b04:	340d883a 	add	r6,r6,r16
  111b08:	114b883a 	add	r5,r2,r5
  111b0c:	3421803a 	cmpltu	r16,r6,r16
  111b10:	2c0b883a 	add	r5,r5,r16
  111b14:	2880202c 	andhi	r2,r5,128
  111b18:	1000c026 	beq	r2,zero,111e1c <__adddf3+0x86c>
  111b1c:	00bfe034 	movhi	r2,65408
  111b20:	10bfffc4 	addi	r2,r2,-1
  111b24:	288a703a 	and	r5,r5,r2
  111b28:	3021883a 	mov	r16,r6
  111b2c:	3823883a 	mov	r17,r7
  111b30:	003ebe06 	br	11162c <black_to_red_frame+0xfe11162c>
  111b34:	2c06b03a 	or	r3,r5,r16
  111b38:	8800221e 	bne	r17,zero,111bc4 <__adddf3+0x614>
  111b3c:	1800481e 	bne	r3,zero,111c60 <__adddf3+0x6b0>
  111b40:	1186b03a 	or	r3,r2,r6
  111b44:	18000426 	beq	r3,zero,111b58 <__adddf3+0x5a8>
  111b48:	100b883a 	mov	r5,r2
  111b4c:	3021883a 	mov	r16,r6
  111b50:	3825883a 	mov	r18,r7
  111b54:	003eb506 	br	11162c <black_to_red_frame+0xfe11162c>
  111b58:	0007883a 	mov	r3,zero
  111b5c:	000b883a 	mov	r5,zero
  111b60:	0021883a 	mov	r16,zero
  111b64:	003f1006 	br	1117a8 <black_to_red_frame+0xfe1117a8>
  111b68:	393ff804 	addi	r4,r7,-32
  111b6c:	02000804 	movi	r8,32
  111b70:	1108d83a 	srl	r4,r2,r4
  111b74:	3a007726 	beq	r7,r8,111d54 <__adddf3+0x7a4>
  111b78:	02001004 	movi	r8,64
  111b7c:	41cfc83a 	sub	r7,r8,r7
  111b80:	11c4983a 	sll	r2,r2,r7
  111b84:	118cb03a 	or	r6,r2,r6
  111b88:	300cc03a 	cmpne	r6,r6,zero
  111b8c:	310cb03a 	or	r6,r6,r4
  111b90:	000f883a 	mov	r7,zero
  111b94:	003f1c06 	br	111808 <black_to_red_frame+0xfe111808>
  111b98:	88001a1e 	bne	r17,zero,111c04 <__adddf3+0x654>
  111b9c:	2c10b03a 	or	r8,r5,r16
  111ba0:	40005526 	beq	r8,zero,111cf8 <__adddf3+0x748>
  111ba4:	01ce303a 	nor	r7,zero,r7
  111ba8:	3800511e 	bne	r7,zero,111cf0 <__adddf3+0x740>
  111bac:	81a1883a 	add	r16,r16,r6
  111bb0:	114b883a 	add	r5,r2,r5
  111bb4:	818d803a 	cmpltu	r6,r16,r6
  111bb8:	298b883a 	add	r5,r5,r6
  111bbc:	2023883a 	mov	r17,r4
  111bc0:	003f1606 	br	11181c <black_to_red_frame+0xfe11181c>
  111bc4:	1800341e 	bne	r3,zero,111c98 <__adddf3+0x6e8>
  111bc8:	1186b03a 	or	r3,r2,r6
  111bcc:	18006f26 	beq	r3,zero,111d8c <__adddf3+0x7dc>
  111bd0:	100b883a 	mov	r5,r2
  111bd4:	3021883a 	mov	r16,r6
  111bd8:	3825883a 	mov	r18,r7
  111bdc:	0441ffc4 	movi	r17,2047
  111be0:	003e9206 	br	11162c <black_to_red_frame+0xfe11162c>
  111be4:	2c20b03a 	or	r16,r5,r16
  111be8:	8020c03a 	cmpne	r16,r16,zero
  111bec:	000b883a 	mov	r5,zero
  111bf0:	003f9106 	br	111a38 <black_to_red_frame+0xfe111a38>
  111bf4:	2023883a 	mov	r17,r4
  111bf8:	000b883a 	mov	r5,zero
  111bfc:	0021883a 	mov	r16,zero
  111c00:	003ee906 	br	1117a8 <black_to_red_frame+0xfe1117a8>
  111c04:	0201ffc4 	movi	r8,2047
  111c08:	22003b26 	beq	r4,r8,111cf8 <__adddf3+0x748>
  111c0c:	01cfc83a 	sub	r7,zero,r7
  111c10:	29402034 	orhi	r5,r5,128
  111c14:	02000e04 	movi	r8,56
  111c18:	41c06216 	blt	r8,r7,111da4 <__adddf3+0x7f4>
  111c1c:	020007c4 	movi	r8,31
  111c20:	41c07016 	blt	r8,r7,111de4 <__adddf3+0x834>
  111c24:	02000804 	movi	r8,32
  111c28:	41d1c83a 	sub	r8,r8,r7
  111c2c:	2a14983a 	sll	r10,r5,r8
  111c30:	81d2d83a 	srl	r9,r16,r7
  111c34:	8210983a 	sll	r8,r16,r8
  111c38:	29cad83a 	srl	r5,r5,r7
  111c3c:	5252b03a 	or	r9,r10,r9
  111c40:	400ec03a 	cmpne	r7,r8,zero
  111c44:	49e0b03a 	or	r16,r9,r7
  111c48:	81a1883a 	add	r16,r16,r6
  111c4c:	2885883a 	add	r2,r5,r2
  111c50:	818d803a 	cmpltu	r6,r16,r6
  111c54:	118b883a 	add	r5,r2,r6
  111c58:	2023883a 	mov	r17,r4
  111c5c:	003eef06 	br	11181c <black_to_red_frame+0xfe11181c>
  111c60:	1186b03a 	or	r3,r2,r6
  111c64:	183e7126 	beq	r3,zero,11162c <black_to_red_frame+0xfe11162c>
  111c68:	8187c83a 	sub	r3,r16,r6
  111c6c:	80d1803a 	cmpltu	r8,r16,r3
  111c70:	2889c83a 	sub	r4,r5,r2
  111c74:	2209c83a 	sub	r4,r4,r8
  111c78:	2200202c 	andhi	r8,r4,128
  111c7c:	40005426 	beq	r8,zero,111dd0 <__adddf3+0x820>
  111c80:	3421c83a 	sub	r16,r6,r16
  111c84:	114bc83a 	sub	r5,r2,r5
  111c88:	340d803a 	cmpltu	r6,r6,r16
  111c8c:	298bc83a 	sub	r5,r5,r6
  111c90:	3825883a 	mov	r18,r7
  111c94:	003e6506 	br	11162c <black_to_red_frame+0xfe11162c>
  111c98:	1186b03a 	or	r3,r2,r6
  111c9c:	18002b26 	beq	r3,zero,111d4c <__adddf3+0x79c>
  111ca0:	2806d0fa 	srli	r3,r5,3
  111ca4:	8020d0fa 	srli	r16,r16,3
  111ca8:	280a977a 	slli	r5,r5,29
  111cac:	1900022c 	andhi	r4,r3,8
  111cb0:	2c20b03a 	or	r16,r5,r16
  111cb4:	20000826 	beq	r4,zero,111cd8 <__adddf3+0x728>
  111cb8:	1008d0fa 	srli	r4,r2,3
  111cbc:	2140022c 	andhi	r5,r4,8
  111cc0:	2800051e 	bne	r5,zero,111cd8 <__adddf3+0x728>
  111cc4:	300cd0fa 	srli	r6,r6,3
  111cc8:	1004977a 	slli	r2,r2,29
  111ccc:	2007883a 	mov	r3,r4
  111cd0:	3825883a 	mov	r18,r7
  111cd4:	11a0b03a 	or	r16,r2,r6
  111cd8:	800ad77a 	srli	r5,r16,29
  111cdc:	180690fa 	slli	r3,r3,3
  111ce0:	802090fa 	slli	r16,r16,3
  111ce4:	0441ffc4 	movi	r17,2047
  111ce8:	28cab03a 	or	r5,r5,r3
  111cec:	003e4f06 	br	11162c <black_to_red_frame+0xfe11162c>
  111cf0:	0201ffc4 	movi	r8,2047
  111cf4:	223fc71e 	bne	r4,r8,111c14 <black_to_red_frame+0xfe111c14>
  111cf8:	100b883a 	mov	r5,r2
  111cfc:	3021883a 	mov	r16,r6
  111d00:	2023883a 	mov	r17,r4
  111d04:	003e4906 	br	11162c <black_to_red_frame+0xfe11162c>
  111d08:	18002a26 	beq	r3,zero,111db4 <__adddf3+0x804>
  111d0c:	1186b03a 	or	r3,r2,r6
  111d10:	18000e26 	beq	r3,zero,111d4c <__adddf3+0x79c>
  111d14:	2806d0fa 	srli	r3,r5,3
  111d18:	8020d0fa 	srli	r16,r16,3
  111d1c:	280a977a 	slli	r5,r5,29
  111d20:	1900022c 	andhi	r4,r3,8
  111d24:	2c20b03a 	or	r16,r5,r16
  111d28:	203feb26 	beq	r4,zero,111cd8 <black_to_red_frame+0xfe111cd8>
  111d2c:	1008d0fa 	srli	r4,r2,3
  111d30:	2140022c 	andhi	r5,r4,8
  111d34:	283fe81e 	bne	r5,zero,111cd8 <black_to_red_frame+0xfe111cd8>
  111d38:	300cd0fa 	srli	r6,r6,3
  111d3c:	1004977a 	slli	r2,r2,29
  111d40:	2007883a 	mov	r3,r4
  111d44:	11a0b03a 	or	r16,r2,r6
  111d48:	003fe306 	br	111cd8 <black_to_red_frame+0xfe111cd8>
  111d4c:	0441ffc4 	movi	r17,2047
  111d50:	003e3606 	br	11162c <black_to_red_frame+0xfe11162c>
  111d54:	0005883a 	mov	r2,zero
  111d58:	003f8a06 	br	111b84 <black_to_red_frame+0xfe111b84>
  111d5c:	1a3ff804 	addi	r8,r3,-32
  111d60:	02400804 	movi	r9,32
  111d64:	2a10d83a 	srl	r8,r5,r8
  111d68:	1a402a26 	beq	r3,r9,111e14 <__adddf3+0x864>
  111d6c:	02401004 	movi	r9,64
  111d70:	48c7c83a 	sub	r3,r9,r3
  111d74:	28ca983a 	sll	r5,r5,r3
  111d78:	2c20b03a 	or	r16,r5,r16
  111d7c:	8020c03a 	cmpne	r16,r16,zero
  111d80:	8220b03a 	or	r16,r16,r8
  111d84:	000b883a 	mov	r5,zero
  111d88:	003f2b06 	br	111a38 <black_to_red_frame+0xfe111a38>
  111d8c:	0007883a 	mov	r3,zero
  111d90:	01402034 	movhi	r5,128
  111d94:	297fffc4 	addi	r5,r5,-1
  111d98:	043ffe04 	movi	r16,-8
  111d9c:	0441ffc4 	movi	r17,2047
  111da0:	003e8106 	br	1117a8 <black_to_red_frame+0xfe1117a8>
  111da4:	2c20b03a 	or	r16,r5,r16
  111da8:	8020c03a 	cmpne	r16,r16,zero
  111dac:	000b883a 	mov	r5,zero
  111db0:	003fa506 	br	111c48 <black_to_red_frame+0xfe111c48>
  111db4:	100b883a 	mov	r5,r2
  111db8:	3021883a 	mov	r16,r6
  111dbc:	0441ffc4 	movi	r17,2047
  111dc0:	003e1a06 	br	11162c <black_to_red_frame+0xfe11162c>
  111dc4:	100b883a 	mov	r5,r2
  111dc8:	3021883a 	mov	r16,r6
  111dcc:	003e1706 	br	11162c <black_to_red_frame+0xfe11162c>
  111dd0:	20c4b03a 	or	r2,r4,r3
  111dd4:	103f6026 	beq	r2,zero,111b58 <black_to_red_frame+0xfe111b58>
  111dd8:	200b883a 	mov	r5,r4
  111ddc:	1821883a 	mov	r16,r3
  111de0:	003e1206 	br	11162c <black_to_red_frame+0xfe11162c>
  111de4:	3a3ff804 	addi	r8,r7,-32
  111de8:	02400804 	movi	r9,32
  111dec:	2a10d83a 	srl	r8,r5,r8
  111df0:	3a400c26 	beq	r7,r9,111e24 <__adddf3+0x874>
  111df4:	02401004 	movi	r9,64
  111df8:	49cfc83a 	sub	r7,r9,r7
  111dfc:	29ca983a 	sll	r5,r5,r7
  111e00:	2c20b03a 	or	r16,r5,r16
  111e04:	8020c03a 	cmpne	r16,r16,zero
  111e08:	8220b03a 	or	r16,r16,r8
  111e0c:	000b883a 	mov	r5,zero
  111e10:	003f8d06 	br	111c48 <black_to_red_frame+0xfe111c48>
  111e14:	000b883a 	mov	r5,zero
  111e18:	003fd706 	br	111d78 <black_to_red_frame+0xfe111d78>
  111e1c:	3021883a 	mov	r16,r6
  111e20:	003e0206 	br	11162c <black_to_red_frame+0xfe11162c>
  111e24:	000b883a 	mov	r5,zero
  111e28:	003ff506 	br	111e00 <black_to_red_frame+0xfe111e00>

00111e2c <__divdf3>:
  111e2c:	defff004 	addi	sp,sp,-64
  111e30:	dd000a15 	stw	r20,40(sp)
  111e34:	2828d53a 	srli	r20,r5,20
  111e38:	dd800c15 	stw	r22,48(sp)
  111e3c:	282cd7fa 	srli	r22,r5,31
  111e40:	df000e15 	stw	fp,56(sp)
  111e44:	dcc00915 	stw	r19,36(sp)
  111e48:	dc800815 	stw	r18,32(sp)
  111e4c:	04c00434 	movhi	r19,16
  111e50:	9cffffc4 	addi	r19,r19,-1
  111e54:	dfc00f15 	stw	ra,60(sp)
  111e58:	ddc00d15 	stw	r23,52(sp)
  111e5c:	dd400b15 	stw	r21,44(sp)
  111e60:	dc400715 	stw	r17,28(sp)
  111e64:	dc000615 	stw	r16,24(sp)
  111e68:	a501ffcc 	andi	r20,r20,2047
  111e6c:	2025883a 	mov	r18,r4
  111e70:	2ce6703a 	and	r19,r5,r19
  111e74:	b7003fcc 	andi	fp,r22,255
  111e78:	a0006a26 	beq	r20,zero,112024 <__divdf3+0x1f8>
  111e7c:	0081ffc4 	movi	r2,2047
  111e80:	2021883a 	mov	r16,r4
  111e84:	a0803726 	beq	r20,r2,111f64 <__divdf3+0x138>
  111e88:	98800434 	orhi	r2,r19,16
  111e8c:	100490fa 	slli	r2,r2,3
  111e90:	2026d77a 	srli	r19,r4,29
  111e94:	202090fa 	slli	r16,r4,3
  111e98:	a53f0044 	addi	r20,r20,-1023
  111e9c:	14e6b03a 	or	r19,r2,r19
  111ea0:	002b883a 	mov	r21,zero
  111ea4:	0013883a 	mov	r9,zero
  111ea8:	3804d53a 	srli	r2,r7,20
  111eac:	382ed7fa 	srli	r23,r7,31
  111eb0:	04400434 	movhi	r17,16
  111eb4:	8c7fffc4 	addi	r17,r17,-1
  111eb8:	1081ffcc 	andi	r2,r2,2047
  111ebc:	3025883a 	mov	r18,r6
  111ec0:	3c62703a 	and	r17,r7,r17
  111ec4:	ba803fcc 	andi	r10,r23,255
  111ec8:	10007326 	beq	r2,zero,112098 <__divdf3+0x26c>
  111ecc:	0101ffc4 	movi	r4,2047
  111ed0:	11006b26 	beq	r2,r4,112080 <__divdf3+0x254>
  111ed4:	89000434 	orhi	r4,r17,16
  111ed8:	200890fa 	slli	r4,r4,3
  111edc:	3022d77a 	srli	r17,r6,29
  111ee0:	302490fa 	slli	r18,r6,3
  111ee4:	10bf0044 	addi	r2,r2,-1023
  111ee8:	2462b03a 	or	r17,r4,r17
  111eec:	000f883a 	mov	r7,zero
  111ef0:	b5caf03a 	xor	r5,r22,r23
  111ef4:	3d48b03a 	or	r4,r7,r21
  111ef8:	00c003c4 	movi	r3,15
  111efc:	2811883a 	mov	r8,r5
  111f00:	2d403fcc 	andi	r21,r5,255
  111f04:	19009436 	bltu	r3,r4,112158 <__divdf3+0x32c>
  111f08:	2109883a 	add	r4,r4,r4
  111f0c:	00c00474 	movhi	r3,17
  111f10:	18c7c904 	addi	r3,r3,7972
  111f14:	2109883a 	add	r4,r4,r4
  111f18:	20c9883a 	add	r4,r4,r3
  111f1c:	20c00017 	ldw	r3,0(r4)
  111f20:	1800683a 	jmp	r3
  111f24:	00112158 	cmpnei	zero,zero,17541
  111f28:	00111fc0 	call	111fc <black_tx_descriptor+0x108fc>
  111f2c:	00112148 	cmpgei	zero,zero,17541
  111f30:	00111f90 	cmplti	zero,zero,17534
  111f34:	00112148 	cmpgei	zero,zero,17541
  111f38:	00112130 	cmpltui	zero,zero,17540
  111f3c:	00112148 	cmpgei	zero,zero,17541
  111f40:	00111f90 	cmplti	zero,zero,17534
  111f44:	00111fc0 	call	111fc <black_tx_descriptor+0x108fc>
  111f48:	00111fc0 	call	111fc <black_tx_descriptor+0x108fc>
  111f4c:	00112130 	cmpltui	zero,zero,17540
  111f50:	00111f90 	cmplti	zero,zero,17534
  111f54:	00111f80 	call	111f8 <black_tx_descriptor+0x108f8>
  111f58:	00111f80 	call	111f8 <black_tx_descriptor+0x108f8>
  111f5c:	00111f80 	call	111f8 <black_tx_descriptor+0x108f8>
  111f60:	001124e8 	cmpgeui	zero,zero,17555
  111f64:	9904b03a 	or	r2,r19,r4
  111f68:	10006e1e 	bne	r2,zero,112124 <__divdf3+0x2f8>
  111f6c:	05400204 	movi	r21,8
  111f70:	0027883a 	mov	r19,zero
  111f74:	0021883a 	mov	r16,zero
  111f78:	02400084 	movi	r9,2
  111f7c:	003fca06 	br	111ea8 <black_to_red_frame+0xfe111ea8>
  111f80:	9823883a 	mov	r17,r19
  111f84:	8025883a 	mov	r18,r16
  111f88:	e015883a 	mov	r10,fp
  111f8c:	480f883a 	mov	r7,r9
  111f90:	00800084 	movi	r2,2
  111f94:	38800926 	beq	r7,r2,111fbc <__divdf3+0x190>
  111f98:	008000c4 	movi	r2,3
  111f9c:	38820226 	beq	r7,r2,1127a8 <__divdf3+0x97c>
  111fa0:	00800044 	movi	r2,1
  111fa4:	3881b81e 	bne	r7,r2,112688 <__divdf3+0x85c>
  111fa8:	5011883a 	mov	r8,r10
  111fac:	0005883a 	mov	r2,zero
  111fb0:	0027883a 	mov	r19,zero
  111fb4:	0021883a 	mov	r16,zero
  111fb8:	00000506 	br	111fd0 <__divdf3+0x1a4>
  111fbc:	502b883a 	mov	r21,r10
  111fc0:	aa00004c 	andi	r8,r21,1
  111fc4:	0081ffc4 	movi	r2,2047
  111fc8:	0027883a 	mov	r19,zero
  111fcc:	0021883a 	mov	r16,zero
  111fd0:	1004953a 	slli	r2,r2,20
  111fd4:	42003fcc 	andi	r8,r8,255
  111fd8:	401097fa 	slli	r8,r8,31
  111fdc:	00c00434 	movhi	r3,16
  111fe0:	18ffffc4 	addi	r3,r3,-1
  111fe4:	98e6703a 	and	r19,r19,r3
  111fe8:	9886b03a 	or	r3,r19,r2
  111fec:	1a06b03a 	or	r3,r3,r8
  111ff0:	8005883a 	mov	r2,r16
  111ff4:	dfc00f17 	ldw	ra,60(sp)
  111ff8:	df000e17 	ldw	fp,56(sp)
  111ffc:	ddc00d17 	ldw	r23,52(sp)
  112000:	dd800c17 	ldw	r22,48(sp)
  112004:	dd400b17 	ldw	r21,44(sp)
  112008:	dd000a17 	ldw	r20,40(sp)
  11200c:	dcc00917 	ldw	r19,36(sp)
  112010:	dc800817 	ldw	r18,32(sp)
  112014:	dc400717 	ldw	r17,28(sp)
  112018:	dc000617 	ldw	r16,24(sp)
  11201c:	dec01004 	addi	sp,sp,64
  112020:	f800283a 	ret
  112024:	9904b03a 	or	r2,r19,r4
  112028:	10003926 	beq	r2,zero,112110 <__divdf3+0x2e4>
  11202c:	98015326 	beq	r19,zero,11257c <__divdf3+0x750>
  112030:	9809883a 	mov	r4,r19
  112034:	d9800215 	stw	r6,8(sp)
  112038:	d9c00515 	stw	r7,20(sp)
  11203c:	0113c880 	call	113c88 <__clzsi2>
  112040:	d9800217 	ldw	r6,8(sp)
  112044:	d9c00517 	ldw	r7,20(sp)
  112048:	00c009c4 	movi	r3,39
  11204c:	18814716 	blt	r3,r2,11256c <__divdf3+0x740>
  112050:	01400a04 	movi	r5,40
  112054:	143ffe04 	addi	r16,r2,-8
  112058:	288bc83a 	sub	r5,r5,r2
  11205c:	9c26983a 	sll	r19,r19,r16
  112060:	914ad83a 	srl	r5,r18,r5
  112064:	9420983a 	sll	r16,r18,r16
  112068:	2ce6b03a 	or	r19,r5,r19
  11206c:	053f0344 	movi	r20,-1011
  112070:	a0a9c83a 	sub	r20,r20,r2
  112074:	002b883a 	mov	r21,zero
  112078:	0013883a 	mov	r9,zero
  11207c:	003f8a06 	br	111ea8 <black_to_red_frame+0xfe111ea8>
  112080:	8988b03a 	or	r4,r17,r6
  112084:	2000201e 	bne	r4,zero,112108 <__divdf3+0x2dc>
  112088:	0023883a 	mov	r17,zero
  11208c:	0025883a 	mov	r18,zero
  112090:	01c00084 	movi	r7,2
  112094:	003f9606 	br	111ef0 <black_to_red_frame+0xfe111ef0>
  112098:	8988b03a 	or	r4,r17,r6
  11209c:	20001626 	beq	r4,zero,1120f8 <__divdf3+0x2cc>
  1120a0:	88012826 	beq	r17,zero,112544 <__divdf3+0x718>
  1120a4:	8809883a 	mov	r4,r17
  1120a8:	d9800215 	stw	r6,8(sp)
  1120ac:	da400315 	stw	r9,12(sp)
  1120b0:	da800415 	stw	r10,16(sp)
  1120b4:	0113c880 	call	113c88 <__clzsi2>
  1120b8:	d9800217 	ldw	r6,8(sp)
  1120bc:	da400317 	ldw	r9,12(sp)
  1120c0:	da800417 	ldw	r10,16(sp)
  1120c4:	010009c4 	movi	r4,39
  1120c8:	20811a16 	blt	r4,r2,112534 <__divdf3+0x708>
  1120cc:	01000a04 	movi	r4,40
  1120d0:	14bffe04 	addi	r18,r2,-8
  1120d4:	2089c83a 	sub	r4,r4,r2
  1120d8:	8ca2983a 	sll	r17,r17,r18
  1120dc:	3108d83a 	srl	r4,r6,r4
  1120e0:	34a4983a 	sll	r18,r6,r18
  1120e4:	2462b03a 	or	r17,r4,r17
  1120e8:	013f0344 	movi	r4,-1011
  1120ec:	2085c83a 	sub	r2,r4,r2
  1120f0:	000f883a 	mov	r7,zero
  1120f4:	003f7e06 	br	111ef0 <black_to_red_frame+0xfe111ef0>
  1120f8:	0023883a 	mov	r17,zero
  1120fc:	0025883a 	mov	r18,zero
  112100:	01c00044 	movi	r7,1
  112104:	003f7a06 	br	111ef0 <black_to_red_frame+0xfe111ef0>
  112108:	01c000c4 	movi	r7,3
  11210c:	003f7806 	br	111ef0 <black_to_red_frame+0xfe111ef0>
  112110:	05400104 	movi	r21,4
  112114:	0027883a 	mov	r19,zero
  112118:	0021883a 	mov	r16,zero
  11211c:	02400044 	movi	r9,1
  112120:	003f6106 	br	111ea8 <black_to_red_frame+0xfe111ea8>
  112124:	05400304 	movi	r21,12
  112128:	024000c4 	movi	r9,3
  11212c:	003f5e06 	br	111ea8 <black_to_red_frame+0xfe111ea8>
  112130:	0011883a 	mov	r8,zero
  112134:	04c00434 	movhi	r19,16
  112138:	9cffffc4 	addi	r19,r19,-1
  11213c:	043fffc4 	movi	r16,-1
  112140:	0081ffc4 	movi	r2,2047
  112144:	003fa206 	br	111fd0 <black_to_red_frame+0xfe111fd0>
  112148:	0005883a 	mov	r2,zero
  11214c:	0027883a 	mov	r19,zero
  112150:	0021883a 	mov	r16,zero
  112154:	003f9e06 	br	111fd0 <black_to_red_frame+0xfe111fd0>
  112158:	a085c83a 	sub	r2,r20,r2
  11215c:	d8800115 	stw	r2,4(sp)
  112160:	8cc11b36 	bltu	r17,r19,1125d0 <__divdf3+0x7a4>
  112164:	9c411926 	beq	r19,r17,1125cc <__divdf3+0x7a0>
  112168:	d8c00117 	ldw	r3,4(sp)
  11216c:	002d883a 	mov	r22,zero
  112170:	18ffffc4 	addi	r3,r3,-1
  112174:	d8c00115 	stw	r3,4(sp)
  112178:	9006d63a 	srli	r3,r18,24
  11217c:	8822923a 	slli	r17,r17,8
  112180:	9024923a 	slli	r18,r18,8
  112184:	9809883a 	mov	r4,r19
  112188:	1c6eb03a 	or	r23,r3,r17
  11218c:	b828d43a 	srli	r20,r23,16
  112190:	dc800015 	stw	r18,0(sp)
  112194:	bcbfffcc 	andi	r18,r23,65535
  112198:	a00b883a 	mov	r5,r20
  11219c:	0103f0c0 	call	103f0c <__udivsi3>
  1121a0:	1009883a 	mov	r4,r2
  1121a4:	900b883a 	mov	r5,r18
  1121a8:	1039883a 	mov	fp,r2
  1121ac:	0103f1c0 	call	103f1c <__mulsi3>
  1121b0:	9809883a 	mov	r4,r19
  1121b4:	a00b883a 	mov	r5,r20
  1121b8:	1023883a 	mov	r17,r2
  1121bc:	0103f140 	call	103f14 <__umodsi3>
  1121c0:	1004943a 	slli	r2,r2,16
  1121c4:	8008d43a 	srli	r4,r16,16
  1121c8:	110ab03a 	or	r5,r2,r4
  1121cc:	2c40062e 	bgeu	r5,r17,1121e8 <__divdf3+0x3bc>
  1121d0:	2dcb883a 	add	r5,r5,r23
  1121d4:	e0bfffc4 	addi	r2,fp,-1
  1121d8:	2dc11136 	bltu	r5,r23,112620 <__divdf3+0x7f4>
  1121dc:	2c41102e 	bgeu	r5,r17,112620 <__divdf3+0x7f4>
  1121e0:	e73fff84 	addi	fp,fp,-2
  1121e4:	2dcb883a 	add	r5,r5,r23
  1121e8:	2c67c83a 	sub	r19,r5,r17
  1121ec:	9809883a 	mov	r4,r19
  1121f0:	a00b883a 	mov	r5,r20
  1121f4:	0103f0c0 	call	103f0c <__udivsi3>
  1121f8:	1009883a 	mov	r4,r2
  1121fc:	900b883a 	mov	r5,r18
  112200:	1023883a 	mov	r17,r2
  112204:	0103f1c0 	call	103f1c <__mulsi3>
  112208:	9809883a 	mov	r4,r19
  11220c:	a00b883a 	mov	r5,r20
  112210:	d8800215 	stw	r2,8(sp)
  112214:	0103f140 	call	103f14 <__umodsi3>
  112218:	1004943a 	slli	r2,r2,16
  11221c:	da000217 	ldw	r8,8(sp)
  112220:	843fffcc 	andi	r16,r16,65535
  112224:	140eb03a 	or	r7,r2,r16
  112228:	3a00062e 	bgeu	r7,r8,112244 <__divdf3+0x418>
  11222c:	3dcf883a 	add	r7,r7,r23
  112230:	88bfffc4 	addi	r2,r17,-1
  112234:	3dc0f836 	bltu	r7,r23,112618 <__divdf3+0x7ec>
  112238:	3a00f72e 	bgeu	r7,r8,112618 <__divdf3+0x7ec>
  11223c:	8c7fff84 	addi	r17,r17,-2
  112240:	3dcf883a 	add	r7,r7,r23
  112244:	e004943a 	slli	r2,fp,16
  112248:	d8c00017 	ldw	r3,0(sp)
  11224c:	3a0fc83a 	sub	r7,r7,r8
  112250:	88a2b03a 	or	r17,r17,r2
  112254:	1f3fffcc 	andi	fp,r3,65535
  112258:	8a7fffcc 	andi	r9,r17,65535
  11225c:	4809883a 	mov	r4,r9
  112260:	e00b883a 	mov	r5,fp
  112264:	1826d43a 	srli	r19,r3,16
  112268:	d9c00515 	stw	r7,20(sp)
  11226c:	da400315 	stw	r9,12(sp)
  112270:	0103f1c0 	call	103f1c <__mulsi3>
  112274:	da400317 	ldw	r9,12(sp)
  112278:	8820d43a 	srli	r16,r17,16
  11227c:	980b883a 	mov	r5,r19
  112280:	4809883a 	mov	r4,r9
  112284:	d8800215 	stw	r2,8(sp)
  112288:	0103f1c0 	call	103f1c <__mulsi3>
  11228c:	8009883a 	mov	r4,r16
  112290:	e00b883a 	mov	r5,fp
  112294:	d8800415 	stw	r2,16(sp)
  112298:	0103f1c0 	call	103f1c <__mulsi3>
  11229c:	8009883a 	mov	r4,r16
  1122a0:	980b883a 	mov	r5,r19
  1122a4:	d8800315 	stw	r2,12(sp)
  1122a8:	0103f1c0 	call	103f1c <__mulsi3>
  1122ac:	da000217 	ldw	r8,8(sp)
  1122b0:	da400317 	ldw	r9,12(sp)
  1122b4:	da800417 	ldw	r10,16(sp)
  1122b8:	100b883a 	mov	r5,r2
  1122bc:	4004d43a 	srli	r2,r8,16
  1122c0:	4a89883a 	add	r4,r9,r10
  1122c4:	d9c00517 	ldw	r7,20(sp)
  1122c8:	2089883a 	add	r4,r4,r2
  1122cc:	2240022e 	bgeu	r4,r9,1122d8 <__divdf3+0x4ac>
  1122d0:	00800074 	movhi	r2,1
  1122d4:	288b883a 	add	r5,r5,r2
  1122d8:	2004d43a 	srli	r2,r4,16
  1122dc:	2020943a 	slli	r16,r4,16
  1122e0:	423fffcc 	andi	r8,r8,65535
  1122e4:	288b883a 	add	r5,r5,r2
  1122e8:	8221883a 	add	r16,r16,r8
  1122ec:	3940ab36 	bltu	r7,r5,11259c <__divdf3+0x770>
  1122f0:	3940a926 	beq	r7,r5,112598 <__divdf3+0x76c>
  1122f4:	394bc83a 	sub	r5,r7,r5
  1122f8:	b421c83a 	sub	r16,r22,r16
  1122fc:	b42d803a 	cmpltu	r22,r22,r16
  112300:	2dadc83a 	sub	r22,r5,r22
  112304:	b5c0da26 	beq	r22,r23,112670 <__divdf3+0x844>
  112308:	b009883a 	mov	r4,r22
  11230c:	a00b883a 	mov	r5,r20
  112310:	0103f0c0 	call	103f0c <__udivsi3>
  112314:	1009883a 	mov	r4,r2
  112318:	900b883a 	mov	r5,r18
  11231c:	d8800215 	stw	r2,8(sp)
  112320:	0103f1c0 	call	103f1c <__mulsi3>
  112324:	b009883a 	mov	r4,r22
  112328:	a00b883a 	mov	r5,r20
  11232c:	d8800515 	stw	r2,20(sp)
  112330:	0103f140 	call	103f14 <__umodsi3>
  112334:	1004943a 	slli	r2,r2,16
  112338:	8008d43a 	srli	r4,r16,16
  11233c:	d9c00517 	ldw	r7,20(sp)
  112340:	da000217 	ldw	r8,8(sp)
  112344:	110ab03a 	or	r5,r2,r4
  112348:	29c0062e 	bgeu	r5,r7,112364 <__divdf3+0x538>
  11234c:	2dcb883a 	add	r5,r5,r23
  112350:	40bfffc4 	addi	r2,r8,-1
  112354:	2dc0ca36 	bltu	r5,r23,112680 <__divdf3+0x854>
  112358:	29c0c92e 	bgeu	r5,r7,112680 <__divdf3+0x854>
  11235c:	423fff84 	addi	r8,r8,-2
  112360:	2dcb883a 	add	r5,r5,r23
  112364:	29cfc83a 	sub	r7,r5,r7
  112368:	3809883a 	mov	r4,r7
  11236c:	a00b883a 	mov	r5,r20
  112370:	da000215 	stw	r8,8(sp)
  112374:	d9c00515 	stw	r7,20(sp)
  112378:	0103f0c0 	call	103f0c <__udivsi3>
  11237c:	900b883a 	mov	r5,r18
  112380:	1009883a 	mov	r4,r2
  112384:	102d883a 	mov	r22,r2
  112388:	0103f1c0 	call	103f1c <__mulsi3>
  11238c:	d9c00517 	ldw	r7,20(sp)
  112390:	a00b883a 	mov	r5,r20
  112394:	1025883a 	mov	r18,r2
  112398:	3809883a 	mov	r4,r7
  11239c:	0103f140 	call	103f14 <__umodsi3>
  1123a0:	1004943a 	slli	r2,r2,16
  1123a4:	843fffcc 	andi	r16,r16,65535
  1123a8:	da000217 	ldw	r8,8(sp)
  1123ac:	140eb03a 	or	r7,r2,r16
  1123b0:	3c80062e 	bgeu	r7,r18,1123cc <__divdf3+0x5a0>
  1123b4:	3dcf883a 	add	r7,r7,r23
  1123b8:	b0bfffc4 	addi	r2,r22,-1
  1123bc:	3dc0ae36 	bltu	r7,r23,112678 <__divdf3+0x84c>
  1123c0:	3c80ad2e 	bgeu	r7,r18,112678 <__divdf3+0x84c>
  1123c4:	b5bfff84 	addi	r22,r22,-2
  1123c8:	3dcf883a 	add	r7,r7,r23
  1123cc:	4010943a 	slli	r8,r8,16
  1123d0:	3ca9c83a 	sub	r20,r7,r18
  1123d4:	e00b883a 	mov	r5,fp
  1123d8:	b224b03a 	or	r18,r22,r8
  1123dc:	91ffffcc 	andi	r7,r18,65535
  1123e0:	3809883a 	mov	r4,r7
  1123e4:	d9c00515 	stw	r7,20(sp)
  1123e8:	0103f1c0 	call	103f1c <__mulsi3>
  1123ec:	d9c00517 	ldw	r7,20(sp)
  1123f0:	9020d43a 	srli	r16,r18,16
  1123f4:	980b883a 	mov	r5,r19
  1123f8:	3809883a 	mov	r4,r7
  1123fc:	102d883a 	mov	r22,r2
  112400:	0103f1c0 	call	103f1c <__mulsi3>
  112404:	e00b883a 	mov	r5,fp
  112408:	8009883a 	mov	r4,r16
  11240c:	d8800515 	stw	r2,20(sp)
  112410:	0103f1c0 	call	103f1c <__mulsi3>
  112414:	8009883a 	mov	r4,r16
  112418:	980b883a 	mov	r5,r19
  11241c:	1039883a 	mov	fp,r2
  112420:	0103f1c0 	call	103f1c <__mulsi3>
  112424:	d9c00517 	ldw	r7,20(sp)
  112428:	100b883a 	mov	r5,r2
  11242c:	b004d43a 	srli	r2,r22,16
  112430:	e1c9883a 	add	r4,fp,r7
  112434:	2089883a 	add	r4,r4,r2
  112438:	2700022e 	bgeu	r4,fp,112444 <__divdf3+0x618>
  11243c:	00800074 	movhi	r2,1
  112440:	288b883a 	add	r5,r5,r2
  112444:	2004d43a 	srli	r2,r4,16
  112448:	2008943a 	slli	r4,r4,16
  11244c:	b5bfffcc 	andi	r22,r22,65535
  112450:	288b883a 	add	r5,r5,r2
  112454:	25ad883a 	add	r22,r4,r22
  112458:	a140632e 	bgeu	r20,r5,1125e8 <__divdf3+0x7bc>
  11245c:	a5e9883a 	add	r20,r20,r23
  112460:	90bfffc4 	addi	r2,r18,-1
  112464:	a5c0702e 	bgeu	r20,r23,112628 <__divdf3+0x7fc>
  112468:	1025883a 	mov	r18,r2
  11246c:	a1406126 	beq	r20,r5,1125f4 <__divdf3+0x7c8>
  112470:	94800054 	ori	r18,r18,1
  112474:	d8c00117 	ldw	r3,4(sp)
  112478:	1880ffc4 	addi	r2,r3,1023
  11247c:	0080720e 	bge	zero,r2,112648 <__divdf3+0x81c>
  112480:	90c001cc 	andi	r3,r18,7
  112484:	18000726 	beq	r3,zero,1124a4 <__divdf3+0x678>
  112488:	910003cc 	andi	r4,r18,15
  11248c:	00c00104 	movi	r3,4
  112490:	20c00426 	beq	r4,r3,1124a4 <__divdf3+0x678>
  112494:	90c7883a 	add	r3,r18,r3
  112498:	1ca5803a 	cmpltu	r18,r3,r18
  11249c:	8ca3883a 	add	r17,r17,r18
  1124a0:	1825883a 	mov	r18,r3
  1124a4:	88c0402c 	andhi	r3,r17,256
  1124a8:	18000526 	beq	r3,zero,1124c0 <__divdf3+0x694>
  1124ac:	d8c00117 	ldw	r3,4(sp)
  1124b0:	00bfc034 	movhi	r2,65280
  1124b4:	10bfffc4 	addi	r2,r2,-1
  1124b8:	88a2703a 	and	r17,r17,r2
  1124bc:	18810004 	addi	r2,r3,1024
  1124c0:	00c1ff84 	movi	r3,2046
  1124c4:	18bebe16 	blt	r3,r2,111fc0 <black_to_red_frame+0xfe111fc0>
  1124c8:	8820977a 	slli	r16,r17,29
  1124cc:	9024d0fa 	srli	r18,r18,3
  1124d0:	8822927a 	slli	r17,r17,9
  1124d4:	1081ffcc 	andi	r2,r2,2047
  1124d8:	84a0b03a 	or	r16,r16,r18
  1124dc:	8826d33a 	srli	r19,r17,12
  1124e0:	aa00004c 	andi	r8,r21,1
  1124e4:	003eba06 	br	111fd0 <black_to_red_frame+0xfe111fd0>
  1124e8:	9880022c 	andhi	r2,r19,8
  1124ec:	10000a26 	beq	r2,zero,112518 <__divdf3+0x6ec>
  1124f0:	8880022c 	andhi	r2,r17,8
  1124f4:	1000081e 	bne	r2,zero,112518 <__divdf3+0x6ec>
  1124f8:	00800434 	movhi	r2,16
  1124fc:	10bfffc4 	addi	r2,r2,-1
  112500:	8cc00234 	orhi	r19,r17,8
  112504:	98a6703a 	and	r19,r19,r2
  112508:	b811883a 	mov	r8,r23
  11250c:	9021883a 	mov	r16,r18
  112510:	0081ffc4 	movi	r2,2047
  112514:	003eae06 	br	111fd0 <black_to_red_frame+0xfe111fd0>
  112518:	00800434 	movhi	r2,16
  11251c:	10bfffc4 	addi	r2,r2,-1
  112520:	9cc00234 	orhi	r19,r19,8
  112524:	98a6703a 	and	r19,r19,r2
  112528:	b011883a 	mov	r8,r22
  11252c:	0081ffc4 	movi	r2,2047
  112530:	003ea706 	br	111fd0 <black_to_red_frame+0xfe111fd0>
  112534:	147ff604 	addi	r17,r2,-40
  112538:	3462983a 	sll	r17,r6,r17
  11253c:	0025883a 	mov	r18,zero
  112540:	003ee906 	br	1120e8 <black_to_red_frame+0xfe1120e8>
  112544:	3009883a 	mov	r4,r6
  112548:	d9800215 	stw	r6,8(sp)
  11254c:	da400315 	stw	r9,12(sp)
  112550:	da800415 	stw	r10,16(sp)
  112554:	0113c880 	call	113c88 <__clzsi2>
  112558:	10800804 	addi	r2,r2,32
  11255c:	da800417 	ldw	r10,16(sp)
  112560:	da400317 	ldw	r9,12(sp)
  112564:	d9800217 	ldw	r6,8(sp)
  112568:	003ed606 	br	1120c4 <black_to_red_frame+0xfe1120c4>
  11256c:	14fff604 	addi	r19,r2,-40
  112570:	94e6983a 	sll	r19,r18,r19
  112574:	0021883a 	mov	r16,zero
  112578:	003ebc06 	br	11206c <black_to_red_frame+0xfe11206c>
  11257c:	d9800215 	stw	r6,8(sp)
  112580:	d9c00515 	stw	r7,20(sp)
  112584:	0113c880 	call	113c88 <__clzsi2>
  112588:	10800804 	addi	r2,r2,32
  11258c:	d9c00517 	ldw	r7,20(sp)
  112590:	d9800217 	ldw	r6,8(sp)
  112594:	003eac06 	br	112048 <black_to_red_frame+0xfe112048>
  112598:	b400292e 	bgeu	r22,r16,112640 <__divdf3+0x814>
  11259c:	d8c00017 	ldw	r3,0(sp)
  1125a0:	b0ed883a 	add	r22,r22,r3
  1125a4:	b0c5803a 	cmpltu	r2,r22,r3
  1125a8:	15c5883a 	add	r2,r2,r23
  1125ac:	11cf883a 	add	r7,r2,r7
  1125b0:	88bfffc4 	addi	r2,r17,-1
  1125b4:	b9c0122e 	bgeu	r23,r7,112600 <__divdf3+0x7d4>
  1125b8:	39405036 	bltu	r7,r5,1126fc <__divdf3+0x8d0>
  1125bc:	29c01e26 	beq	r5,r7,112638 <__divdf3+0x80c>
  1125c0:	394bc83a 	sub	r5,r7,r5
  1125c4:	1023883a 	mov	r17,r2
  1125c8:	003f4b06 	br	1122f8 <black_to_red_frame+0xfe1122f8>
  1125cc:	943ee62e 	bgeu	r18,r16,112168 <black_to_red_frame+0xfe112168>
  1125d0:	980497fa 	slli	r2,r19,31
  1125d4:	8006d07a 	srli	r3,r16,1
  1125d8:	802c97fa 	slli	r22,r16,31
  1125dc:	9826d07a 	srli	r19,r19,1
  1125e0:	18a0b03a 	or	r16,r3,r2
  1125e4:	003ee406 	br	112178 <black_to_red_frame+0xfe112178>
  1125e8:	a17fa11e 	bne	r20,r5,112470 <black_to_red_frame+0xfe112470>
  1125ec:	b03f9b1e 	bne	r22,zero,11245c <black_to_red_frame+0xfe11245c>
  1125f0:	d8000015 	stw	zero,0(sp)
  1125f4:	d8c00017 	ldw	r3,0(sp)
  1125f8:	1dbf9d1e 	bne	r3,r22,112470 <black_to_red_frame+0xfe112470>
  1125fc:	003f9d06 	br	112474 <black_to_red_frame+0xfe112474>
  112600:	3dffef1e 	bne	r7,r23,1125c0 <black_to_red_frame+0xfe1125c0>
  112604:	d8c00017 	ldw	r3,0(sp)
  112608:	b0ffeb2e 	bgeu	r22,r3,1125b8 <black_to_red_frame+0xfe1125b8>
  11260c:	b94bc83a 	sub	r5,r23,r5
  112610:	1023883a 	mov	r17,r2
  112614:	003f3806 	br	1122f8 <black_to_red_frame+0xfe1122f8>
  112618:	1023883a 	mov	r17,r2
  11261c:	003f0906 	br	112244 <black_to_red_frame+0xfe112244>
  112620:	1039883a 	mov	fp,r2
  112624:	003ef006 	br	1121e8 <black_to_red_frame+0xfe1121e8>
  112628:	a1403b36 	bltu	r20,r5,112718 <__divdf3+0x8ec>
  11262c:	2d005826 	beq	r5,r20,112790 <__divdf3+0x964>
  112630:	1025883a 	mov	r18,r2
  112634:	003f8e06 	br	112470 <black_to_red_frame+0xfe112470>
  112638:	b4003036 	bltu	r22,r16,1126fc <__divdf3+0x8d0>
  11263c:	1023883a 	mov	r17,r2
  112640:	000b883a 	mov	r5,zero
  112644:	003f2c06 	br	1122f8 <black_to_red_frame+0xfe1122f8>
  112648:	d8c00117 	ldw	r3,4(sp)
  11264c:	00bf0084 	movi	r2,-1022
  112650:	10c5c83a 	sub	r2,r2,r3
  112654:	00c00e04 	movi	r3,56
  112658:	18800d0e 	bge	r3,r2,112690 <__divdf3+0x864>
  11265c:	aa00004c 	andi	r8,r21,1
  112660:	0005883a 	mov	r2,zero
  112664:	0027883a 	mov	r19,zero
  112668:	0021883a 	mov	r16,zero
  11266c:	003e5806 	br	111fd0 <black_to_red_frame+0xfe111fd0>
  112670:	04bfffc4 	movi	r18,-1
  112674:	003f7f06 	br	112474 <black_to_red_frame+0xfe112474>
  112678:	102d883a 	mov	r22,r2
  11267c:	003f5306 	br	1123cc <black_to_red_frame+0xfe1123cc>
  112680:	1011883a 	mov	r8,r2
  112684:	003f3706 	br	112364 <black_to_red_frame+0xfe112364>
  112688:	502b883a 	mov	r21,r10
  11268c:	003f7906 	br	112474 <black_to_red_frame+0xfe112474>
  112690:	00c007c4 	movi	r3,31
  112694:	18802816 	blt	r3,r2,112738 <__divdf3+0x90c>
  112698:	d9000117 	ldw	r4,4(sp)
  11269c:	908ad83a 	srl	r5,r18,r2
  1126a0:	8884d83a 	srl	r2,r17,r2
  1126a4:	20c10784 	addi	r3,r4,1054
  1126a8:	88c8983a 	sll	r4,r17,r3
  1126ac:	90c6983a 	sll	r3,r18,r3
  1126b0:	2908b03a 	or	r4,r5,r4
  1126b4:	1806c03a 	cmpne	r3,r3,zero
  1126b8:	20c6b03a 	or	r3,r4,r3
  1126bc:	190001cc 	andi	r4,r3,7
  1126c0:	20000726 	beq	r4,zero,1126e0 <__divdf3+0x8b4>
  1126c4:	194003cc 	andi	r5,r3,15
  1126c8:	01000104 	movi	r4,4
  1126cc:	29000426 	beq	r5,r4,1126e0 <__divdf3+0x8b4>
  1126d0:	1909883a 	add	r4,r3,r4
  1126d4:	20c7803a 	cmpltu	r3,r4,r3
  1126d8:	10c5883a 	add	r2,r2,r3
  1126dc:	2007883a 	mov	r3,r4
  1126e0:	1100202c 	andhi	r4,r2,128
  1126e4:	20002226 	beq	r4,zero,112770 <__divdf3+0x944>
  1126e8:	aa00004c 	andi	r8,r21,1
  1126ec:	00800044 	movi	r2,1
  1126f0:	0027883a 	mov	r19,zero
  1126f4:	0021883a 	mov	r16,zero
  1126f8:	003e3506 	br	111fd0 <black_to_red_frame+0xfe111fd0>
  1126fc:	d8c00017 	ldw	r3,0(sp)
  112700:	8c7fff84 	addi	r17,r17,-2
  112704:	b0ed883a 	add	r22,r22,r3
  112708:	b0c5803a 	cmpltu	r2,r22,r3
  11270c:	15c5883a 	add	r2,r2,r23
  112710:	11cf883a 	add	r7,r2,r7
  112714:	003ef706 	br	1122f4 <black_to_red_frame+0xfe1122f4>
  112718:	d8c00017 	ldw	r3,0(sp)
  11271c:	18c9883a 	add	r4,r3,r3
  112720:	20c5803a 	cmpltu	r2,r4,r3
  112724:	15c7883a 	add	r3,r2,r23
  112728:	a0e9883a 	add	r20,r20,r3
  11272c:	90bfff84 	addi	r2,r18,-2
  112730:	d9000015 	stw	r4,0(sp)
  112734:	003f4c06 	br	112468 <black_to_red_frame+0xfe112468>
  112738:	d9000117 	ldw	r4,4(sp)
  11273c:	00fef884 	movi	r3,-1054
  112740:	1907c83a 	sub	r3,r3,r4
  112744:	01000804 	movi	r4,32
  112748:	88c6d83a 	srl	r3,r17,r3
  11274c:	11001426 	beq	r2,r4,1127a0 <__divdf3+0x974>
  112750:	d9000117 	ldw	r4,4(sp)
  112754:	20810f84 	addi	r2,r4,1086
  112758:	8884983a 	sll	r2,r17,r2
  11275c:	1484b03a 	or	r2,r2,r18
  112760:	1004c03a 	cmpne	r2,r2,zero
  112764:	10c6b03a 	or	r3,r2,r3
  112768:	0005883a 	mov	r2,zero
  11276c:	003fd306 	br	1126bc <black_to_red_frame+0xfe1126bc>
  112770:	1020977a 	slli	r16,r2,29
  112774:	1806d0fa 	srli	r3,r3,3
  112778:	1004927a 	slli	r2,r2,9
  11277c:	aa00004c 	andi	r8,r21,1
  112780:	80e0b03a 	or	r16,r16,r3
  112784:	1026d33a 	srli	r19,r2,12
  112788:	0005883a 	mov	r2,zero
  11278c:	003e1006 	br	111fd0 <black_to_red_frame+0xfe111fd0>
  112790:	d8c00017 	ldw	r3,0(sp)
  112794:	1dbfe036 	bltu	r3,r22,112718 <black_to_red_frame+0xfe112718>
  112798:	1025883a 	mov	r18,r2
  11279c:	003f9506 	br	1125f4 <black_to_red_frame+0xfe1125f4>
  1127a0:	0005883a 	mov	r2,zero
  1127a4:	003fed06 	br	11275c <black_to_red_frame+0xfe11275c>
  1127a8:	00800434 	movhi	r2,16
  1127ac:	10bfffc4 	addi	r2,r2,-1
  1127b0:	8cc00234 	orhi	r19,r17,8
  1127b4:	98a6703a 	and	r19,r19,r2
  1127b8:	5011883a 	mov	r8,r10
  1127bc:	9021883a 	mov	r16,r18
  1127c0:	0081ffc4 	movi	r2,2047
  1127c4:	003e0206 	br	111fd0 <black_to_red_frame+0xfe111fd0>

001127c8 <__eqdf2>:
  1127c8:	2806d53a 	srli	r3,r5,20
  1127cc:	3810d53a 	srli	r8,r7,20
  1127d0:	00800434 	movhi	r2,16
  1127d4:	10bfffc4 	addi	r2,r2,-1
  1127d8:	18c1ffcc 	andi	r3,r3,2047
  1127dc:	0241ffc4 	movi	r9,2047
  1127e0:	2894703a 	and	r10,r5,r2
  1127e4:	4201ffcc 	andi	r8,r8,2047
  1127e8:	3884703a 	and	r2,r7,r2
  1127ec:	280ad7fa 	srli	r5,r5,31
  1127f0:	380ed7fa 	srli	r7,r7,31
  1127f4:	1a400f26 	beq	r3,r9,112834 <__eqdf2+0x6c>
  1127f8:	0241ffc4 	movi	r9,2047
  1127fc:	42400326 	beq	r8,r9,11280c <__eqdf2+0x44>
  112800:	1a000526 	beq	r3,r8,112818 <__eqdf2+0x50>
  112804:	00800044 	movi	r2,1
  112808:	f800283a 	ret
  11280c:	1192b03a 	or	r9,r2,r6
  112810:	483ffc1e 	bne	r9,zero,112804 <black_to_red_frame+0xfe112804>
  112814:	1a3ffb1e 	bne	r3,r8,112804 <black_to_red_frame+0xfe112804>
  112818:	50bffa1e 	bne	r10,r2,112804 <black_to_red_frame+0xfe112804>
  11281c:	21bff91e 	bne	r4,r6,112804 <black_to_red_frame+0xfe112804>
  112820:	29c00826 	beq	r5,r7,112844 <__eqdf2+0x7c>
  112824:	183ff71e 	bne	r3,zero,112804 <black_to_red_frame+0xfe112804>
  112828:	5104b03a 	or	r2,r10,r4
  11282c:	1004c03a 	cmpne	r2,r2,zero
  112830:	f800283a 	ret
  112834:	5112b03a 	or	r9,r10,r4
  112838:	483fef26 	beq	r9,zero,1127f8 <black_to_red_frame+0xfe1127f8>
  11283c:	00800044 	movi	r2,1
  112840:	f800283a 	ret
  112844:	0005883a 	mov	r2,zero
  112848:	f800283a 	ret

0011284c <__gedf2>:
  11284c:	2804d53a 	srli	r2,r5,20
  112850:	3810d53a 	srli	r8,r7,20
  112854:	00c00434 	movhi	r3,16
  112858:	18ffffc4 	addi	r3,r3,-1
  11285c:	1081ffcc 	andi	r2,r2,2047
  112860:	0241ffc4 	movi	r9,2047
  112864:	28d4703a 	and	r10,r5,r3
  112868:	4201ffcc 	andi	r8,r8,2047
  11286c:	38c6703a 	and	r3,r7,r3
  112870:	280ad7fa 	srli	r5,r5,31
  112874:	380ed7fa 	srli	r7,r7,31
  112878:	12401b26 	beq	r2,r9,1128e8 <__gedf2+0x9c>
  11287c:	0241ffc4 	movi	r9,2047
  112880:	42400926 	beq	r8,r9,1128a8 <__gedf2+0x5c>
  112884:	10000c1e 	bne	r2,zero,1128b8 <__gedf2+0x6c>
  112888:	5112b03a 	or	r9,r10,r4
  11288c:	4813003a 	cmpeq	r9,r9,zero
  112890:	4817883a 	mov	r11,r9
  112894:	40000a26 	beq	r8,zero,1128c0 <__gedf2+0x74>
  112898:	48001626 	beq	r9,zero,1128f4 <__gedf2+0xa8>
  11289c:	38000d1e 	bne	r7,zero,1128d4 <__gedf2+0x88>
  1128a0:	00bfffc4 	movi	r2,-1
  1128a4:	f800283a 	ret
  1128a8:	1992b03a 	or	r9,r3,r6
  1128ac:	483ff526 	beq	r9,zero,112884 <black_to_red_frame+0xfe112884>
  1128b0:	00bfff84 	movi	r2,-2
  1128b4:	f800283a 	ret
  1128b8:	40000e1e 	bne	r8,zero,1128f4 <__gedf2+0xa8>
  1128bc:	0017883a 	mov	r11,zero
  1128c0:	1992b03a 	or	r9,r3,r6
  1128c4:	4813003a 	cmpeq	r9,r9,zero
  1128c8:	5800041e 	bne	r11,zero,1128dc <__gedf2+0x90>
  1128cc:	48000926 	beq	r9,zero,1128f4 <__gedf2+0xa8>
  1128d0:	283ff31e 	bne	r5,zero,1128a0 <black_to_red_frame+0xfe1128a0>
  1128d4:	00800044 	movi	r2,1
  1128d8:	f800283a 	ret
  1128dc:	483fef26 	beq	r9,zero,11289c <black_to_red_frame+0xfe11289c>
  1128e0:	0005883a 	mov	r2,zero
  1128e4:	f800283a 	ret
  1128e8:	5112b03a 	or	r9,r10,r4
  1128ec:	483fe326 	beq	r9,zero,11287c <black_to_red_frame+0xfe11287c>
  1128f0:	003fef06 	br	1128b0 <black_to_red_frame+0xfe1128b0>
  1128f4:	29fff61e 	bne	r5,r7,1128d0 <black_to_red_frame+0xfe1128d0>
  1128f8:	40bff516 	blt	r8,r2,1128d0 <black_to_red_frame+0xfe1128d0>
  1128fc:	12000316 	blt	r2,r8,11290c <__gedf2+0xc0>
  112900:	1abff336 	bltu	r3,r10,1128d0 <black_to_red_frame+0xfe1128d0>
  112904:	50c00326 	beq	r10,r3,112914 <__gedf2+0xc8>
  112908:	50fff52e 	bgeu	r10,r3,1128e0 <black_to_red_frame+0xfe1128e0>
  11290c:	283fe426 	beq	r5,zero,1128a0 <black_to_red_frame+0xfe1128a0>
  112910:	003ff006 	br	1128d4 <black_to_red_frame+0xfe1128d4>
  112914:	313fee36 	bltu	r6,r4,1128d0 <black_to_red_frame+0xfe1128d0>
  112918:	21bff12e 	bgeu	r4,r6,1128e0 <black_to_red_frame+0xfe1128e0>
  11291c:	283fe026 	beq	r5,zero,1128a0 <black_to_red_frame+0xfe1128a0>
  112920:	003fec06 	br	1128d4 <black_to_red_frame+0xfe1128d4>

00112924 <__ledf2>:
  112924:	2806d53a 	srli	r3,r5,20
  112928:	3810d53a 	srli	r8,r7,20
  11292c:	00800434 	movhi	r2,16
  112930:	10bfffc4 	addi	r2,r2,-1
  112934:	18c1ffcc 	andi	r3,r3,2047
  112938:	0241ffc4 	movi	r9,2047
  11293c:	2894703a 	and	r10,r5,r2
  112940:	4201ffcc 	andi	r8,r8,2047
  112944:	3884703a 	and	r2,r7,r2
  112948:	280ad7fa 	srli	r5,r5,31
  11294c:	380ed7fa 	srli	r7,r7,31
  112950:	1a402026 	beq	r3,r9,1129d4 <__ledf2+0xb0>
  112954:	0241ffc4 	movi	r9,2047
  112958:	42401726 	beq	r8,r9,1129b8 <__ledf2+0x94>
  11295c:	18000b26 	beq	r3,zero,11298c <__ledf2+0x68>
  112960:	29403fcc 	andi	r5,r5,255
  112964:	39c03fcc 	andi	r7,r7,255
  112968:	40000f1e 	bne	r8,zero,1129a8 <__ledf2+0x84>
  11296c:	0017883a 	mov	r11,zero
  112970:	1192b03a 	or	r9,r2,r6
  112974:	4813003a 	cmpeq	r9,r9,zero
  112978:	58001326 	beq	r11,zero,1129c8 <__ledf2+0xa4>
  11297c:	48001e1e 	bne	r9,zero,1129f8 <__ledf2+0xd4>
  112980:	38000b1e 	bne	r7,zero,1129b0 <__ledf2+0x8c>
  112984:	00bfffc4 	movi	r2,-1
  112988:	f800283a 	ret
  11298c:	5112b03a 	or	r9,r10,r4
  112990:	4813003a 	cmpeq	r9,r9,zero
  112994:	4817883a 	mov	r11,r9
  112998:	29403fcc 	andi	r5,r5,255
  11299c:	39c03fcc 	andi	r7,r7,255
  1129a0:	403ff326 	beq	r8,zero,112970 <black_to_red_frame+0xfe112970>
  1129a4:	483ff61e 	bne	r9,zero,112980 <black_to_red_frame+0xfe112980>
  1129a8:	29c00e26 	beq	r5,r7,1129e4 <__ledf2+0xc0>
  1129ac:	283ff51e 	bne	r5,zero,112984 <black_to_red_frame+0xfe112984>
  1129b0:	00800044 	movi	r2,1
  1129b4:	f800283a 	ret
  1129b8:	1192b03a 	or	r9,r2,r6
  1129bc:	483fe726 	beq	r9,zero,11295c <black_to_red_frame+0xfe11295c>
  1129c0:	00800084 	movi	r2,2
  1129c4:	f800283a 	ret
  1129c8:	483ff726 	beq	r9,zero,1129a8 <black_to_red_frame+0xfe1129a8>
  1129cc:	283ff826 	beq	r5,zero,1129b0 <black_to_red_frame+0xfe1129b0>
  1129d0:	003fec06 	br	112984 <black_to_red_frame+0xfe112984>
  1129d4:	5112b03a 	or	r9,r10,r4
  1129d8:	483fde26 	beq	r9,zero,112954 <black_to_red_frame+0xfe112954>
  1129dc:	00800084 	movi	r2,2
  1129e0:	f800283a 	ret
  1129e4:	40fff116 	blt	r8,r3,1129ac <black_to_red_frame+0xfe1129ac>
  1129e8:	1a000716 	blt	r3,r8,112a08 <__ledf2+0xe4>
  1129ec:	12bfef36 	bltu	r2,r10,1129ac <black_to_red_frame+0xfe1129ac>
  1129f0:	50800326 	beq	r10,r2,112a00 <__ledf2+0xdc>
  1129f4:	50800436 	bltu	r10,r2,112a08 <__ledf2+0xe4>
  1129f8:	0005883a 	mov	r2,zero
  1129fc:	f800283a 	ret
  112a00:	313fea36 	bltu	r6,r4,1129ac <black_to_red_frame+0xfe1129ac>
  112a04:	21bffc2e 	bgeu	r4,r6,1129f8 <black_to_red_frame+0xfe1129f8>
  112a08:	283fde26 	beq	r5,zero,112984 <black_to_red_frame+0xfe112984>
  112a0c:	003fe806 	br	1129b0 <black_to_red_frame+0xfe1129b0>

00112a10 <__muldf3>:
  112a10:	deffee04 	addi	sp,sp,-72
  112a14:	dc400915 	stw	r17,36(sp)
  112a18:	2822d53a 	srli	r17,r5,20
  112a1c:	dc000815 	stw	r16,32(sp)
  112a20:	2820d7fa 	srli	r16,r5,31
  112a24:	df001015 	stw	fp,64(sp)
  112a28:	dd000c15 	stw	r20,48(sp)
  112a2c:	dcc00b15 	stw	r19,44(sp)
  112a30:	dfc01115 	stw	ra,68(sp)
  112a34:	04c00434 	movhi	r19,16
  112a38:	9cffffc4 	addi	r19,r19,-1
  112a3c:	ddc00f15 	stw	r23,60(sp)
  112a40:	dd800e15 	stw	r22,56(sp)
  112a44:	dd400d15 	stw	r21,52(sp)
  112a48:	dc800a15 	stw	r18,40(sp)
  112a4c:	8c41ffcc 	andi	r17,r17,2047
  112a50:	2029883a 	mov	r20,r4
  112a54:	2ce6703a 	and	r19,r5,r19
  112a58:	8039883a 	mov	fp,r16
  112a5c:	82003fcc 	andi	r8,r16,255
  112a60:	88005d26 	beq	r17,zero,112bd8 <__muldf3+0x1c8>
  112a64:	0081ffc4 	movi	r2,2047
  112a68:	202f883a 	mov	r23,r4
  112a6c:	88803326 	beq	r17,r2,112b3c <__muldf3+0x12c>
  112a70:	98800434 	orhi	r2,r19,16
  112a74:	100490fa 	slli	r2,r2,3
  112a78:	2026d77a 	srli	r19,r4,29
  112a7c:	202e90fa 	slli	r23,r4,3
  112a80:	8c7f0044 	addi	r17,r17,-1023
  112a84:	14e6b03a 	or	r19,r2,r19
  112a88:	002d883a 	mov	r22,zero
  112a8c:	000b883a 	mov	r5,zero
  112a90:	3804d53a 	srli	r2,r7,20
  112a94:	3828d7fa 	srli	r20,r7,31
  112a98:	04800434 	movhi	r18,16
  112a9c:	94bfffc4 	addi	r18,r18,-1
  112aa0:	1081ffcc 	andi	r2,r2,2047
  112aa4:	302b883a 	mov	r21,r6
  112aa8:	3ca4703a 	and	r18,r7,r18
  112aac:	a2403fcc 	andi	r9,r20,255
  112ab0:	10006826 	beq	r2,zero,112c54 <__muldf3+0x244>
  112ab4:	00c1ffc4 	movi	r3,2047
  112ab8:	10c06026 	beq	r2,r3,112c3c <__muldf3+0x22c>
  112abc:	90c00434 	orhi	r3,r18,16
  112ac0:	180690fa 	slli	r3,r3,3
  112ac4:	3024d77a 	srli	r18,r6,29
  112ac8:	302a90fa 	slli	r21,r6,3
  112acc:	10bf0044 	addi	r2,r2,-1023
  112ad0:	1ca4b03a 	or	r18,r3,r18
  112ad4:	0007883a 	mov	r3,zero
  112ad8:	1d88b03a 	or	r4,r3,r22
  112adc:	2109883a 	add	r4,r4,r4
  112ae0:	2109883a 	add	r4,r4,r4
  112ae4:	01800474 	movhi	r6,17
  112ae8:	318abf04 	addi	r6,r6,11004
  112aec:	2189883a 	add	r4,r4,r6
  112af0:	21000017 	ldw	r4,0(r4)
  112af4:	852cf03a 	xor	r22,r16,r20
  112af8:	2000683a 	jmp	r4
  112afc:	00112d44 	movi	zero,17589
  112b00:	00112d34 	movhi	zero,17588
  112b04:	00112d34 	movhi	zero,17588
  112b08:	00112d20 	cmpeqi	zero,zero,17588
  112b0c:	00112b5c 	xori	zero,zero,17581
  112b10:	00112b5c 	xori	zero,zero,17581
  112b14:	00112d08 	cmpgei	zero,zero,17588
  112b18:	00112d20 	cmpeqi	zero,zero,17588
  112b1c:	00112b5c 	xori	zero,zero,17581
  112b20:	00112d08 	cmpgei	zero,zero,17588
  112b24:	00112b5c 	xori	zero,zero,17581
  112b28:	00112d20 	cmpeqi	zero,zero,17588
  112b2c:	00112b58 	cmpnei	zero,zero,17581
  112b30:	00112b58 	cmpnei	zero,zero,17581
  112b34:	00112b58 	cmpnei	zero,zero,17581
  112b38:	0011305c 	xori	zero,zero,17601
  112b3c:	9904b03a 	or	r2,r19,r4
  112b40:	10006e1e 	bne	r2,zero,112cfc <__muldf3+0x2ec>
  112b44:	05800204 	movi	r22,8
  112b48:	0027883a 	mov	r19,zero
  112b4c:	002f883a 	mov	r23,zero
  112b50:	01400084 	movi	r5,2
  112b54:	003fce06 	br	112a90 <black_to_red_frame+0xfe112a90>
  112b58:	402d883a 	mov	r22,r8
  112b5c:	00800084 	movi	r2,2
  112b60:	28805626 	beq	r5,r2,112cbc <__muldf3+0x2ac>
  112b64:	008000c4 	movi	r2,3
  112b68:	2881a226 	beq	r5,r2,1131f4 <__muldf3+0x7e4>
  112b6c:	00800044 	movi	r2,1
  112b70:	28811d1e 	bne	r5,r2,112fe8 <__muldf3+0x5d8>
  112b74:	b039883a 	mov	fp,r22
  112b78:	0005883a 	mov	r2,zero
  112b7c:	0027883a 	mov	r19,zero
  112b80:	002f883a 	mov	r23,zero
  112b84:	1004953a 	slli	r2,r2,20
  112b88:	e7003fcc 	andi	fp,fp,255
  112b8c:	e03897fa 	slli	fp,fp,31
  112b90:	00c00434 	movhi	r3,16
  112b94:	18ffffc4 	addi	r3,r3,-1
  112b98:	98e6703a 	and	r19,r19,r3
  112b9c:	9886b03a 	or	r3,r19,r2
  112ba0:	1f06b03a 	or	r3,r3,fp
  112ba4:	b805883a 	mov	r2,r23
  112ba8:	dfc01117 	ldw	ra,68(sp)
  112bac:	df001017 	ldw	fp,64(sp)
  112bb0:	ddc00f17 	ldw	r23,60(sp)
  112bb4:	dd800e17 	ldw	r22,56(sp)
  112bb8:	dd400d17 	ldw	r21,52(sp)
  112bbc:	dd000c17 	ldw	r20,48(sp)
  112bc0:	dcc00b17 	ldw	r19,44(sp)
  112bc4:	dc800a17 	ldw	r18,40(sp)
  112bc8:	dc400917 	ldw	r17,36(sp)
  112bcc:	dc000817 	ldw	r16,32(sp)
  112bd0:	dec01204 	addi	sp,sp,72
  112bd4:	f800283a 	ret
  112bd8:	9904b03a 	or	r2,r19,r4
  112bdc:	10004226 	beq	r2,zero,112ce8 <__muldf3+0x2d8>
  112be0:	98013426 	beq	r19,zero,1130b4 <__muldf3+0x6a4>
  112be4:	9809883a 	mov	r4,r19
  112be8:	d9800515 	stw	r6,20(sp)
  112bec:	d9c00415 	stw	r7,16(sp)
  112bf0:	da000615 	stw	r8,24(sp)
  112bf4:	0113c880 	call	113c88 <__clzsi2>
  112bf8:	d9800517 	ldw	r6,20(sp)
  112bfc:	d9c00417 	ldw	r7,16(sp)
  112c00:	da000617 	ldw	r8,24(sp)
  112c04:	00c009c4 	movi	r3,39
  112c08:	18812616 	blt	r3,r2,1130a4 <__muldf3+0x694>
  112c0c:	00c00a04 	movi	r3,40
  112c10:	15fffe04 	addi	r23,r2,-8
  112c14:	1887c83a 	sub	r3,r3,r2
  112c18:	9de6983a 	sll	r19,r19,r23
  112c1c:	a0c6d83a 	srl	r3,r20,r3
  112c20:	a5ee983a 	sll	r23,r20,r23
  112c24:	1ce6b03a 	or	r19,r3,r19
  112c28:	047f0344 	movi	r17,-1011
  112c2c:	88a3c83a 	sub	r17,r17,r2
  112c30:	002d883a 	mov	r22,zero
  112c34:	000b883a 	mov	r5,zero
  112c38:	003f9506 	br	112a90 <black_to_red_frame+0xfe112a90>
  112c3c:	9186b03a 	or	r3,r18,r6
  112c40:	1800271e 	bne	r3,zero,112ce0 <__muldf3+0x2d0>
  112c44:	0025883a 	mov	r18,zero
  112c48:	002b883a 	mov	r21,zero
  112c4c:	00c00084 	movi	r3,2
  112c50:	003fa106 	br	112ad8 <black_to_red_frame+0xfe112ad8>
  112c54:	9186b03a 	or	r3,r18,r6
  112c58:	18001d26 	beq	r3,zero,112cd0 <__muldf3+0x2c0>
  112c5c:	90012226 	beq	r18,zero,1130e8 <__muldf3+0x6d8>
  112c60:	9009883a 	mov	r4,r18
  112c64:	d9400415 	stw	r5,16(sp)
  112c68:	d9800515 	stw	r6,20(sp)
  112c6c:	da000615 	stw	r8,24(sp)
  112c70:	da400715 	stw	r9,28(sp)
  112c74:	0113c880 	call	113c88 <__clzsi2>
  112c78:	d9400417 	ldw	r5,16(sp)
  112c7c:	d9800517 	ldw	r6,20(sp)
  112c80:	da000617 	ldw	r8,24(sp)
  112c84:	da400717 	ldw	r9,28(sp)
  112c88:	00c009c4 	movi	r3,39
  112c8c:	18811216 	blt	r3,r2,1130d8 <__muldf3+0x6c8>
  112c90:	01c00a04 	movi	r7,40
  112c94:	157ffe04 	addi	r21,r2,-8
  112c98:	388fc83a 	sub	r7,r7,r2
  112c9c:	9564983a 	sll	r18,r18,r21
  112ca0:	31ced83a 	srl	r7,r6,r7
  112ca4:	356a983a 	sll	r21,r6,r21
  112ca8:	3ca4b03a 	or	r18,r7,r18
  112cac:	00ff0344 	movi	r3,-1011
  112cb0:	1885c83a 	sub	r2,r3,r2
  112cb4:	0007883a 	mov	r3,zero
  112cb8:	003f8706 	br	112ad8 <black_to_red_frame+0xfe112ad8>
  112cbc:	b039883a 	mov	fp,r22
  112cc0:	0081ffc4 	movi	r2,2047
  112cc4:	0027883a 	mov	r19,zero
  112cc8:	002f883a 	mov	r23,zero
  112ccc:	003fad06 	br	112b84 <black_to_red_frame+0xfe112b84>
  112cd0:	0025883a 	mov	r18,zero
  112cd4:	002b883a 	mov	r21,zero
  112cd8:	00c00044 	movi	r3,1
  112cdc:	003f7e06 	br	112ad8 <black_to_red_frame+0xfe112ad8>
  112ce0:	00c000c4 	movi	r3,3
  112ce4:	003f7c06 	br	112ad8 <black_to_red_frame+0xfe112ad8>
  112ce8:	05800104 	movi	r22,4
  112cec:	0027883a 	mov	r19,zero
  112cf0:	002f883a 	mov	r23,zero
  112cf4:	01400044 	movi	r5,1
  112cf8:	003f6506 	br	112a90 <black_to_red_frame+0xfe112a90>
  112cfc:	05800304 	movi	r22,12
  112d00:	014000c4 	movi	r5,3
  112d04:	003f6206 	br	112a90 <black_to_red_frame+0xfe112a90>
  112d08:	0039883a 	mov	fp,zero
  112d0c:	04c00434 	movhi	r19,16
  112d10:	9cffffc4 	addi	r19,r19,-1
  112d14:	05ffffc4 	movi	r23,-1
  112d18:	0081ffc4 	movi	r2,2047
  112d1c:	003f9906 	br	112b84 <black_to_red_frame+0xfe112b84>
  112d20:	9027883a 	mov	r19,r18
  112d24:	a82f883a 	mov	r23,r21
  112d28:	482d883a 	mov	r22,r9
  112d2c:	180b883a 	mov	r5,r3
  112d30:	003f8a06 	br	112b5c <black_to_red_frame+0xfe112b5c>
  112d34:	9027883a 	mov	r19,r18
  112d38:	a82f883a 	mov	r23,r21
  112d3c:	180b883a 	mov	r5,r3
  112d40:	003f8606 	br	112b5c <black_to_red_frame+0xfe112b5c>
  112d44:	a828d43a 	srli	r20,r21,16
  112d48:	b820d43a 	srli	r16,r23,16
  112d4c:	ad7fffcc 	andi	r21,r21,65535
  112d50:	bdffffcc 	andi	r23,r23,65535
  112d54:	8885883a 	add	r2,r17,r2
  112d58:	a809883a 	mov	r4,r21
  112d5c:	b80b883a 	mov	r5,r23
  112d60:	d8800015 	stw	r2,0(sp)
  112d64:	0103f1c0 	call	103f1c <__mulsi3>
  112d68:	a009883a 	mov	r4,r20
  112d6c:	b80b883a 	mov	r5,r23
  112d70:	d8800415 	stw	r2,16(sp)
  112d74:	0103f1c0 	call	103f1c <__mulsi3>
  112d78:	a809883a 	mov	r4,r21
  112d7c:	800b883a 	mov	r5,r16
  112d80:	d8800615 	stw	r2,24(sp)
  112d84:	0103f1c0 	call	103f1c <__mulsi3>
  112d88:	a009883a 	mov	r4,r20
  112d8c:	800b883a 	mov	r5,r16
  112d90:	1023883a 	mov	r17,r2
  112d94:	0103f1c0 	call	103f1c <__mulsi3>
  112d98:	d9c00417 	ldw	r7,16(sp)
  112d9c:	da000617 	ldw	r8,24(sp)
  112da0:	1039883a 	mov	fp,r2
  112da4:	3804d43a 	srli	r2,r7,16
  112da8:	8a07883a 	add	r3,r17,r8
  112dac:	1887883a 	add	r3,r3,r2
  112db0:	1c40022e 	bgeu	r3,r17,112dbc <__muldf3+0x3ac>
  112db4:	00800074 	movhi	r2,1
  112db8:	e0b9883a 	add	fp,fp,r2
  112dbc:	1804943a 	slli	r2,r3,16
  112dc0:	1806d43a 	srli	r3,r3,16
  112dc4:	9022d43a 	srli	r17,r18,16
  112dc8:	39ffffcc 	andi	r7,r7,65535
  112dcc:	94bfffcc 	andi	r18,r18,65535
  112dd0:	11cf883a 	add	r7,r2,r7
  112dd4:	b80b883a 	mov	r5,r23
  112dd8:	9009883a 	mov	r4,r18
  112ddc:	d8c00215 	stw	r3,8(sp)
  112de0:	d9c00315 	stw	r7,12(sp)
  112de4:	0103f1c0 	call	103f1c <__mulsi3>
  112de8:	b80b883a 	mov	r5,r23
  112dec:	8809883a 	mov	r4,r17
  112df0:	d8800415 	stw	r2,16(sp)
  112df4:	0103f1c0 	call	103f1c <__mulsi3>
  112df8:	9009883a 	mov	r4,r18
  112dfc:	800b883a 	mov	r5,r16
  112e00:	d8800715 	stw	r2,28(sp)
  112e04:	0103f1c0 	call	103f1c <__mulsi3>
  112e08:	8809883a 	mov	r4,r17
  112e0c:	800b883a 	mov	r5,r16
  112e10:	102f883a 	mov	r23,r2
  112e14:	0103f1c0 	call	103f1c <__mulsi3>
  112e18:	d9c00417 	ldw	r7,16(sp)
  112e1c:	da400717 	ldw	r9,28(sp)
  112e20:	1011883a 	mov	r8,r2
  112e24:	3804d43a 	srli	r2,r7,16
  112e28:	ba47883a 	add	r3,r23,r9
  112e2c:	1887883a 	add	r3,r3,r2
  112e30:	1dc0022e 	bgeu	r3,r23,112e3c <__muldf3+0x42c>
  112e34:	00800074 	movhi	r2,1
  112e38:	4091883a 	add	r8,r8,r2
  112e3c:	1804d43a 	srli	r2,r3,16
  112e40:	182e943a 	slli	r23,r3,16
  112e44:	9820d43a 	srli	r16,r19,16
  112e48:	9cffffcc 	andi	r19,r19,65535
  112e4c:	39ffffcc 	andi	r7,r7,65535
  112e50:	4085883a 	add	r2,r8,r2
  112e54:	a809883a 	mov	r4,r21
  112e58:	980b883a 	mov	r5,r19
  112e5c:	b9ef883a 	add	r23,r23,r7
  112e60:	d8800115 	stw	r2,4(sp)
  112e64:	0103f1c0 	call	103f1c <__mulsi3>
  112e68:	a009883a 	mov	r4,r20
  112e6c:	980b883a 	mov	r5,r19
  112e70:	d8800415 	stw	r2,16(sp)
  112e74:	0103f1c0 	call	103f1c <__mulsi3>
  112e78:	a809883a 	mov	r4,r21
  112e7c:	800b883a 	mov	r5,r16
  112e80:	d8800715 	stw	r2,28(sp)
  112e84:	0103f1c0 	call	103f1c <__mulsi3>
  112e88:	a009883a 	mov	r4,r20
  112e8c:	800b883a 	mov	r5,r16
  112e90:	102b883a 	mov	r21,r2
  112e94:	0103f1c0 	call	103f1c <__mulsi3>
  112e98:	d9c00417 	ldw	r7,16(sp)
  112e9c:	da400717 	ldw	r9,28(sp)
  112ea0:	1011883a 	mov	r8,r2
  112ea4:	3804d43a 	srli	r2,r7,16
  112ea8:	aa47883a 	add	r3,r21,r9
  112eac:	1887883a 	add	r3,r3,r2
  112eb0:	1d40022e 	bgeu	r3,r21,112ebc <__muldf3+0x4ac>
  112eb4:	00800074 	movhi	r2,1
  112eb8:	4091883a 	add	r8,r8,r2
  112ebc:	1828d43a 	srli	r20,r3,16
  112ec0:	1806943a 	slli	r3,r3,16
  112ec4:	39ffffcc 	andi	r7,r7,65535
  112ec8:	9009883a 	mov	r4,r18
  112ecc:	980b883a 	mov	r5,r19
  112ed0:	19eb883a 	add	r21,r3,r7
  112ed4:	4529883a 	add	r20,r8,r20
  112ed8:	0103f1c0 	call	103f1c <__mulsi3>
  112edc:	980b883a 	mov	r5,r19
  112ee0:	8809883a 	mov	r4,r17
  112ee4:	d8800415 	stw	r2,16(sp)
  112ee8:	0103f1c0 	call	103f1c <__mulsi3>
  112eec:	9009883a 	mov	r4,r18
  112ef0:	800b883a 	mov	r5,r16
  112ef4:	1027883a 	mov	r19,r2
  112ef8:	0103f1c0 	call	103f1c <__mulsi3>
  112efc:	8809883a 	mov	r4,r17
  112f00:	800b883a 	mov	r5,r16
  112f04:	1025883a 	mov	r18,r2
  112f08:	0103f1c0 	call	103f1c <__mulsi3>
  112f0c:	d9c00417 	ldw	r7,16(sp)
  112f10:	1011883a 	mov	r8,r2
  112f14:	94c7883a 	add	r3,r18,r19
  112f18:	3804d43a 	srli	r2,r7,16
  112f1c:	1887883a 	add	r3,r3,r2
  112f20:	1c80022e 	bgeu	r3,r18,112f2c <__muldf3+0x51c>
  112f24:	00800074 	movhi	r2,1
  112f28:	4091883a 	add	r8,r8,r2
  112f2c:	1804943a 	slli	r2,r3,16
  112f30:	d9400217 	ldw	r5,8(sp)
  112f34:	39ffffcc 	andi	r7,r7,65535
  112f38:	11cf883a 	add	r7,r2,r7
  112f3c:	d8800117 	ldw	r2,4(sp)
  112f40:	b949883a 	add	r4,r23,r5
  112f44:	2739883a 	add	fp,r4,fp
  112f48:	e5ef803a 	cmpltu	r23,fp,r23
  112f4c:	388f883a 	add	r7,r7,r2
  112f50:	3dcb883a 	add	r5,r7,r23
  112f54:	a149883a 	add	r4,r20,r5
  112f58:	2def803a 	cmpltu	r23,r5,r23
  112f5c:	d9400117 	ldw	r5,4(sp)
  112f60:	e579883a 	add	fp,fp,r21
  112f64:	e56b803a 	cmpltu	r21,fp,r21
  112f68:	1804d43a 	srli	r2,r3,16
  112f6c:	394f803a 	cmpltu	r7,r7,r5
  112f70:	2547883a 	add	r3,r4,r21
  112f74:	b9e6b03a 	or	r19,r23,r7
  112f78:	1d6b803a 	cmpltu	r21,r3,r21
  112f7c:	2529803a 	cmpltu	r20,r4,r20
  112f80:	98a7883a 	add	r19,r19,r2
  112f84:	ad2ab03a 	or	r21,r21,r20
  112f88:	9d67883a 	add	r19,r19,r21
  112f8c:	e02e927a 	slli	r23,fp,9
  112f90:	9a27883a 	add	r19,r19,r8
  112f94:	d9000317 	ldw	r4,12(sp)
  112f98:	1804d5fa 	srli	r2,r3,23
  112f9c:	9826927a 	slli	r19,r19,9
  112fa0:	e038d5fa 	srli	fp,fp,23
  112fa4:	b92eb03a 	or	r23,r23,r4
  112fa8:	1806927a 	slli	r3,r3,9
  112fac:	98a6b03a 	or	r19,r19,r2
  112fb0:	b82ec03a 	cmpne	r23,r23,zero
  112fb4:	bf2eb03a 	or	r23,r23,fp
  112fb8:	9880402c 	andhi	r2,r19,256
  112fbc:	b8eeb03a 	or	r23,r23,r3
  112fc0:	10000926 	beq	r2,zero,112fe8 <__muldf3+0x5d8>
  112fc4:	b806d07a 	srli	r3,r23,1
  112fc8:	bdc0004c 	andi	r23,r23,1
  112fcc:	980497fa 	slli	r2,r19,31
  112fd0:	b8eeb03a 	or	r23,r23,r3
  112fd4:	d8c00017 	ldw	r3,0(sp)
  112fd8:	9826d07a 	srli	r19,r19,1
  112fdc:	b8aeb03a 	or	r23,r23,r2
  112fe0:	18c00044 	addi	r3,r3,1
  112fe4:	d8c00015 	stw	r3,0(sp)
  112fe8:	d8c00017 	ldw	r3,0(sp)
  112fec:	1880ffc4 	addi	r2,r3,1023
  112ff0:	0080490e 	bge	zero,r2,113118 <__muldf3+0x708>
  112ff4:	b8c001cc 	andi	r3,r23,7
  112ff8:	18000726 	beq	r3,zero,113018 <__muldf3+0x608>
  112ffc:	b90003cc 	andi	r4,r23,15
  113000:	00c00104 	movi	r3,4
  113004:	20c00426 	beq	r4,r3,113018 <__muldf3+0x608>
  113008:	b8c7883a 	add	r3,r23,r3
  11300c:	1def803a 	cmpltu	r23,r3,r23
  113010:	9de7883a 	add	r19,r19,r23
  113014:	182f883a 	mov	r23,r3
  113018:	98c0402c 	andhi	r3,r19,256
  11301c:	18000526 	beq	r3,zero,113034 <__muldf3+0x624>
  113020:	d8c00017 	ldw	r3,0(sp)
  113024:	00bfc034 	movhi	r2,65280
  113028:	10bfffc4 	addi	r2,r2,-1
  11302c:	98a6703a 	and	r19,r19,r2
  113030:	18810004 	addi	r2,r3,1024
  113034:	00c1ff84 	movi	r3,2046
  113038:	18bf2016 	blt	r3,r2,112cbc <black_to_red_frame+0xfe112cbc>
  11303c:	9806977a 	slli	r3,r19,29
  113040:	b82ed0fa 	srli	r23,r23,3
  113044:	9826927a 	slli	r19,r19,9
  113048:	1081ffcc 	andi	r2,r2,2047
  11304c:	1deeb03a 	or	r23,r3,r23
  113050:	9826d33a 	srli	r19,r19,12
  113054:	b039883a 	mov	fp,r22
  113058:	003eca06 	br	112b84 <black_to_red_frame+0xfe112b84>
  11305c:	9880022c 	andhi	r2,r19,8
  113060:	10000a26 	beq	r2,zero,11308c <__muldf3+0x67c>
  113064:	9080022c 	andhi	r2,r18,8
  113068:	1000081e 	bne	r2,zero,11308c <__muldf3+0x67c>
  11306c:	00800434 	movhi	r2,16
  113070:	10bfffc4 	addi	r2,r2,-1
  113074:	94c00234 	orhi	r19,r18,8
  113078:	98a6703a 	and	r19,r19,r2
  11307c:	a039883a 	mov	fp,r20
  113080:	a82f883a 	mov	r23,r21
  113084:	0081ffc4 	movi	r2,2047
  113088:	003ebe06 	br	112b84 <black_to_red_frame+0xfe112b84>
  11308c:	00800434 	movhi	r2,16
  113090:	10bfffc4 	addi	r2,r2,-1
  113094:	9cc00234 	orhi	r19,r19,8
  113098:	98a6703a 	and	r19,r19,r2
  11309c:	0081ffc4 	movi	r2,2047
  1130a0:	003eb806 	br	112b84 <black_to_red_frame+0xfe112b84>
  1130a4:	14fff604 	addi	r19,r2,-40
  1130a8:	a4e6983a 	sll	r19,r20,r19
  1130ac:	002f883a 	mov	r23,zero
  1130b0:	003edd06 	br	112c28 <black_to_red_frame+0xfe112c28>
  1130b4:	d9800515 	stw	r6,20(sp)
  1130b8:	d9c00415 	stw	r7,16(sp)
  1130bc:	da000615 	stw	r8,24(sp)
  1130c0:	0113c880 	call	113c88 <__clzsi2>
  1130c4:	10800804 	addi	r2,r2,32
  1130c8:	da000617 	ldw	r8,24(sp)
  1130cc:	d9c00417 	ldw	r7,16(sp)
  1130d0:	d9800517 	ldw	r6,20(sp)
  1130d4:	003ecb06 	br	112c04 <black_to_red_frame+0xfe112c04>
  1130d8:	14bff604 	addi	r18,r2,-40
  1130dc:	34a4983a 	sll	r18,r6,r18
  1130e0:	002b883a 	mov	r21,zero
  1130e4:	003ef106 	br	112cac <black_to_red_frame+0xfe112cac>
  1130e8:	3009883a 	mov	r4,r6
  1130ec:	d9400415 	stw	r5,16(sp)
  1130f0:	d9800515 	stw	r6,20(sp)
  1130f4:	da000615 	stw	r8,24(sp)
  1130f8:	da400715 	stw	r9,28(sp)
  1130fc:	0113c880 	call	113c88 <__clzsi2>
  113100:	10800804 	addi	r2,r2,32
  113104:	da400717 	ldw	r9,28(sp)
  113108:	da000617 	ldw	r8,24(sp)
  11310c:	d9800517 	ldw	r6,20(sp)
  113110:	d9400417 	ldw	r5,16(sp)
  113114:	003edc06 	br	112c88 <black_to_red_frame+0xfe112c88>
  113118:	d8c00017 	ldw	r3,0(sp)
  11311c:	00bf0084 	movi	r2,-1022
  113120:	10c5c83a 	sub	r2,r2,r3
  113124:	00c00e04 	movi	r3,56
  113128:	18be9216 	blt	r3,r2,112b74 <black_to_red_frame+0xfe112b74>
  11312c:	00c007c4 	movi	r3,31
  113130:	18801916 	blt	r3,r2,113198 <__muldf3+0x788>
  113134:	d9000017 	ldw	r4,0(sp)
  113138:	b88ad83a 	srl	r5,r23,r2
  11313c:	9884d83a 	srl	r2,r19,r2
  113140:	20c10784 	addi	r3,r4,1054
  113144:	98c8983a 	sll	r4,r19,r3
  113148:	b8c6983a 	sll	r3,r23,r3
  11314c:	2908b03a 	or	r4,r5,r4
  113150:	1806c03a 	cmpne	r3,r3,zero
  113154:	20c6b03a 	or	r3,r4,r3
  113158:	190001cc 	andi	r4,r3,7
  11315c:	20000726 	beq	r4,zero,11317c <__muldf3+0x76c>
  113160:	194003cc 	andi	r5,r3,15
  113164:	01000104 	movi	r4,4
  113168:	29000426 	beq	r5,r4,11317c <__muldf3+0x76c>
  11316c:	1909883a 	add	r4,r3,r4
  113170:	20c7803a 	cmpltu	r3,r4,r3
  113174:	10c5883a 	add	r2,r2,r3
  113178:	2007883a 	mov	r3,r4
  11317c:	1100202c 	andhi	r4,r2,128
  113180:	20001226 	beq	r4,zero,1131cc <__muldf3+0x7bc>
  113184:	b039883a 	mov	fp,r22
  113188:	00800044 	movi	r2,1
  11318c:	0027883a 	mov	r19,zero
  113190:	002f883a 	mov	r23,zero
  113194:	003e7b06 	br	112b84 <black_to_red_frame+0xfe112b84>
  113198:	d9400017 	ldw	r5,0(sp)
  11319c:	00fef884 	movi	r3,-1054
  1131a0:	01000804 	movi	r4,32
  1131a4:	1947c83a 	sub	r3,r3,r5
  1131a8:	98c6d83a 	srl	r3,r19,r3
  1131ac:	11000f26 	beq	r2,r4,1131ec <__muldf3+0x7dc>
  1131b0:	28810f84 	addi	r2,r5,1086
  1131b4:	9884983a 	sll	r2,r19,r2
  1131b8:	15c4b03a 	or	r2,r2,r23
  1131bc:	1004c03a 	cmpne	r2,r2,zero
  1131c0:	10c6b03a 	or	r3,r2,r3
  1131c4:	0005883a 	mov	r2,zero
  1131c8:	003fe306 	br	113158 <black_to_red_frame+0xfe113158>
  1131cc:	102e977a 	slli	r23,r2,29
  1131d0:	1806d0fa 	srli	r3,r3,3
  1131d4:	1004927a 	slli	r2,r2,9
  1131d8:	b039883a 	mov	fp,r22
  1131dc:	b8eeb03a 	or	r23,r23,r3
  1131e0:	1026d33a 	srli	r19,r2,12
  1131e4:	0005883a 	mov	r2,zero
  1131e8:	003e6606 	br	112b84 <black_to_red_frame+0xfe112b84>
  1131ec:	0005883a 	mov	r2,zero
  1131f0:	003ff106 	br	1131b8 <black_to_red_frame+0xfe1131b8>
  1131f4:	00800434 	movhi	r2,16
  1131f8:	10bfffc4 	addi	r2,r2,-1
  1131fc:	9cc00234 	orhi	r19,r19,8
  113200:	98a6703a 	and	r19,r19,r2
  113204:	b039883a 	mov	fp,r22
  113208:	0081ffc4 	movi	r2,2047
  11320c:	003e5d06 	br	112b84 <black_to_red_frame+0xfe112b84>

00113210 <__subdf3>:
  113210:	02000434 	movhi	r8,16
  113214:	423fffc4 	addi	r8,r8,-1
  113218:	defffb04 	addi	sp,sp,-20
  11321c:	2a06703a 	and	r3,r5,r8
  113220:	3a10703a 	and	r8,r7,r8
  113224:	3804d53a 	srli	r2,r7,20
  113228:	dc800215 	stw	r18,8(sp)
  11322c:	dc400115 	stw	r17,4(sp)
  113230:	2824d7fa 	srli	r18,r5,31
  113234:	2822d53a 	srli	r17,r5,20
  113238:	401090fa 	slli	r8,r8,3
  11323c:	180a90fa 	slli	r5,r3,3
  113240:	3006d77a 	srli	r3,r6,29
  113244:	2014d77a 	srli	r10,r4,29
  113248:	dc000015 	stw	r16,0(sp)
  11324c:	40d0b03a 	or	r8,r8,r3
  113250:	dfc00415 	stw	ra,16(sp)
  113254:	dcc00315 	stw	r19,12(sp)
  113258:	1081ffcc 	andi	r2,r2,2047
  11325c:	00c1ffc4 	movi	r3,2047
  113260:	9013883a 	mov	r9,r18
  113264:	8c41ffcc 	andi	r17,r17,2047
  113268:	94803fcc 	andi	r18,r18,255
  11326c:	2a8ab03a 	or	r5,r5,r10
  113270:	202090fa 	slli	r16,r4,3
  113274:	380ed7fa 	srli	r7,r7,31
  113278:	300c90fa 	slli	r6,r6,3
  11327c:	10c02e26 	beq	r2,r3,113338 <__subdf3+0x128>
  113280:	39c0005c 	xori	r7,r7,1
  113284:	8887c83a 	sub	r3,r17,r2
  113288:	91c03026 	beq	r18,r7,11334c <__subdf3+0x13c>
  11328c:	00c0a40e 	bge	zero,r3,113520 <__subdf3+0x310>
  113290:	10004c1e 	bne	r2,zero,1133c4 <__subdf3+0x1b4>
  113294:	4184b03a 	or	r2,r8,r6
  113298:	10008f1e 	bne	r2,zero,1134d8 <__subdf3+0x2c8>
  11329c:	808001cc 	andi	r2,r16,7
  1132a0:	10007d26 	beq	r2,zero,113498 <__subdf3+0x288>
  1132a4:	80c003cc 	andi	r3,r16,15
  1132a8:	00800104 	movi	r2,4
  1132ac:	18807a26 	beq	r3,r2,113498 <__subdf3+0x288>
  1132b0:	80c00104 	addi	r3,r16,4
  1132b4:	1c21803a 	cmpltu	r16,r3,r16
  1132b8:	2c0b883a 	add	r5,r5,r16
  1132bc:	2880202c 	andhi	r2,r5,128
  1132c0:	9240004c 	andi	r9,r18,1
  1132c4:	1821883a 	mov	r16,r3
  1132c8:	10007626 	beq	r2,zero,1134a4 <__subdf3+0x294>
  1132cc:	8c400044 	addi	r17,r17,1
  1132d0:	0081ffc4 	movi	r2,2047
  1132d4:	8880b226 	beq	r17,r2,1135a0 <__subdf3+0x390>
  1132d8:	00bfe034 	movhi	r2,65408
  1132dc:	10bfffc4 	addi	r2,r2,-1
  1132e0:	288a703a 	and	r5,r5,r2
  1132e4:	2804977a 	slli	r2,r5,29
  1132e8:	280a927a 	slli	r5,r5,9
  1132ec:	8020d0fa 	srli	r16,r16,3
  1132f0:	280ad33a 	srli	r5,r5,12
  1132f4:	1404b03a 	or	r2,r2,r16
  1132f8:	8c41ffcc 	andi	r17,r17,2047
  1132fc:	8822953a 	slli	r17,r17,20
  113300:	4a403fcc 	andi	r9,r9,255
  113304:	481297fa 	slli	r9,r9,31
  113308:	00c00434 	movhi	r3,16
  11330c:	18ffffc4 	addi	r3,r3,-1
  113310:	28c6703a 	and	r3,r5,r3
  113314:	1c46b03a 	or	r3,r3,r17
  113318:	1a46b03a 	or	r3,r3,r9
  11331c:	dfc00417 	ldw	ra,16(sp)
  113320:	dcc00317 	ldw	r19,12(sp)
  113324:	dc800217 	ldw	r18,8(sp)
  113328:	dc400117 	ldw	r17,4(sp)
  11332c:	dc000017 	ldw	r16,0(sp)
  113330:	dec00504 	addi	sp,sp,20
  113334:	f800283a 	ret
  113338:	4186b03a 	or	r3,r8,r6
  11333c:	183fd026 	beq	r3,zero,113280 <black_to_red_frame+0xfe113280>
  113340:	39c03fcc 	andi	r7,r7,255
  113344:	8887c83a 	sub	r3,r17,r2
  113348:	91ffd01e 	bne	r18,r7,11328c <black_to_red_frame+0xfe11328c>
  11334c:	00c09b0e 	bge	zero,r3,1135bc <__subdf3+0x3ac>
  113350:	10006926 	beq	r2,zero,1134f8 <__subdf3+0x2e8>
  113354:	0081ffc4 	movi	r2,2047
  113358:	88bfd026 	beq	r17,r2,11329c <black_to_red_frame+0xfe11329c>
  11335c:	42002034 	orhi	r8,r8,128
  113360:	00800e04 	movi	r2,56
  113364:	10c0e20e 	bge	r2,r3,1136f0 <__subdf3+0x4e0>
  113368:	418cb03a 	or	r6,r8,r6
  11336c:	300cc03a 	cmpne	r6,r6,zero
  113370:	0007883a 	mov	r3,zero
  113374:	340d883a 	add	r6,r6,r16
  113378:	3421803a 	cmpltu	r16,r6,r16
  11337c:	194b883a 	add	r5,r3,r5
  113380:	2c0b883a 	add	r5,r5,r16
  113384:	3021883a 	mov	r16,r6
  113388:	2880202c 	andhi	r2,r5,128
  11338c:	103fc326 	beq	r2,zero,11329c <black_to_red_frame+0xfe11329c>
  113390:	8c400044 	addi	r17,r17,1
  113394:	0081ffc4 	movi	r2,2047
  113398:	88811026 	beq	r17,r2,1137dc <__subdf3+0x5cc>
  11339c:	00bfe034 	movhi	r2,65408
  1133a0:	10bfffc4 	addi	r2,r2,-1
  1133a4:	288a703a 	and	r5,r5,r2
  1133a8:	8006d07a 	srli	r3,r16,1
  1133ac:	280497fa 	slli	r2,r5,31
  1133b0:	8400004c 	andi	r16,r16,1
  1133b4:	80e0b03a 	or	r16,r16,r3
  1133b8:	80a0b03a 	or	r16,r16,r2
  1133bc:	280ad07a 	srli	r5,r5,1
  1133c0:	003fb606 	br	11329c <black_to_red_frame+0xfe11329c>
  1133c4:	0081ffc4 	movi	r2,2047
  1133c8:	88bfb426 	beq	r17,r2,11329c <black_to_red_frame+0xfe11329c>
  1133cc:	42002034 	orhi	r8,r8,128
  1133d0:	00800e04 	movi	r2,56
  1133d4:	10c07516 	blt	r2,r3,1135ac <__subdf3+0x39c>
  1133d8:	008007c4 	movi	r2,31
  1133dc:	10c09816 	blt	r2,r3,113640 <__subdf3+0x430>
  1133e0:	00800804 	movi	r2,32
  1133e4:	10c5c83a 	sub	r2,r2,r3
  1133e8:	30c8d83a 	srl	r4,r6,r3
  1133ec:	408e983a 	sll	r7,r8,r2
  1133f0:	3084983a 	sll	r2,r6,r2
  1133f4:	40c6d83a 	srl	r3,r8,r3
  1133f8:	3908b03a 	or	r4,r7,r4
  1133fc:	1004c03a 	cmpne	r2,r2,zero
  113400:	208cb03a 	or	r6,r4,r2
  113404:	818dc83a 	sub	r6,r16,r6
  113408:	81a1803a 	cmpltu	r16,r16,r6
  11340c:	28cbc83a 	sub	r5,r5,r3
  113410:	2c0bc83a 	sub	r5,r5,r16
  113414:	3021883a 	mov	r16,r6
  113418:	2880202c 	andhi	r2,r5,128
  11341c:	103f9f26 	beq	r2,zero,11329c <black_to_red_frame+0xfe11329c>
  113420:	04c02034 	movhi	r19,128
  113424:	9cffffc4 	addi	r19,r19,-1
  113428:	2ce6703a 	and	r19,r5,r19
  11342c:	98004d26 	beq	r19,zero,113564 <__subdf3+0x354>
  113430:	9809883a 	mov	r4,r19
  113434:	0113c880 	call	113c88 <__clzsi2>
  113438:	10fffe04 	addi	r3,r2,-8
  11343c:	010007c4 	movi	r4,31
  113440:	20c04e16 	blt	r4,r3,11357c <__subdf3+0x36c>
  113444:	01000a04 	movi	r4,40
  113448:	2085c83a 	sub	r2,r4,r2
  11344c:	8084d83a 	srl	r2,r16,r2
  113450:	98e6983a 	sll	r19,r19,r3
  113454:	80e0983a 	sll	r16,r16,r3
  113458:	14c4b03a 	or	r2,r2,r19
  11345c:	1c404b16 	blt	r3,r17,11358c <__subdf3+0x37c>
  113460:	1c63c83a 	sub	r17,r3,r17
  113464:	89400044 	addi	r5,r17,1
  113468:	00c007c4 	movi	r3,31
  11346c:	19406716 	blt	r3,r5,11360c <__subdf3+0x3fc>
  113470:	1c47c83a 	sub	r3,r3,r17
  113474:	8148d83a 	srl	r4,r16,r5
  113478:	80e0983a 	sll	r16,r16,r3
  11347c:	10c6983a 	sll	r3,r2,r3
  113480:	114ad83a 	srl	r5,r2,r5
  113484:	8004c03a 	cmpne	r2,r16,zero
  113488:	20e0b03a 	or	r16,r4,r3
  11348c:	80a0b03a 	or	r16,r16,r2
  113490:	0023883a 	mov	r17,zero
  113494:	003f8106 	br	11329c <black_to_red_frame+0xfe11329c>
  113498:	2880202c 	andhi	r2,r5,128
  11349c:	9240004c 	andi	r9,r18,1
  1134a0:	103f8a1e 	bne	r2,zero,1132cc <black_to_red_frame+0xfe1132cc>
  1134a4:	2804977a 	slli	r2,r5,29
  1134a8:	8020d0fa 	srli	r16,r16,3
  1134ac:	00c1ffc4 	movi	r3,2047
  1134b0:	280ad0fa 	srli	r5,r5,3
  1134b4:	1404b03a 	or	r2,r2,r16
  1134b8:	88c0031e 	bne	r17,r3,1134c8 <__subdf3+0x2b8>
  1134bc:	1146b03a 	or	r3,r2,r5
  1134c0:	18003726 	beq	r3,zero,1135a0 <__subdf3+0x390>
  1134c4:	29400234 	orhi	r5,r5,8
  1134c8:	00c00434 	movhi	r3,16
  1134cc:	18ffffc4 	addi	r3,r3,-1
  1134d0:	28ca703a 	and	r5,r5,r3
  1134d4:	003f8806 	br	1132f8 <black_to_red_frame+0xfe1132f8>
  1134d8:	18ffffc4 	addi	r3,r3,-1
  1134dc:	1800481e 	bne	r3,zero,113600 <__subdf3+0x3f0>
  1134e0:	818dc83a 	sub	r6,r16,r6
  1134e4:	81a1803a 	cmpltu	r16,r16,r6
  1134e8:	2a0bc83a 	sub	r5,r5,r8
  1134ec:	2c0bc83a 	sub	r5,r5,r16
  1134f0:	3021883a 	mov	r16,r6
  1134f4:	003fc806 	br	113418 <black_to_red_frame+0xfe113418>
  1134f8:	4184b03a 	or	r2,r8,r6
  1134fc:	103f6726 	beq	r2,zero,11329c <black_to_red_frame+0xfe11329c>
  113500:	18ffffc4 	addi	r3,r3,-1
  113504:	1800931e 	bne	r3,zero,113754 <__subdf3+0x544>
  113508:	340d883a 	add	r6,r6,r16
  11350c:	3421803a 	cmpltu	r16,r6,r16
  113510:	414b883a 	add	r5,r8,r5
  113514:	2c0b883a 	add	r5,r5,r16
  113518:	3021883a 	mov	r16,r6
  11351c:	003f9a06 	br	113388 <black_to_red_frame+0xfe113388>
  113520:	1800531e 	bne	r3,zero,113670 <__subdf3+0x460>
  113524:	88800044 	addi	r2,r17,1
  113528:	1081ffcc 	andi	r2,r2,2047
  11352c:	00c00044 	movi	r3,1
  113530:	1880a00e 	bge	r3,r2,1137b4 <__subdf3+0x5a4>
  113534:	8185c83a 	sub	r2,r16,r6
  113538:	8087803a 	cmpltu	r3,r16,r2
  11353c:	2a27c83a 	sub	r19,r5,r8
  113540:	98e7c83a 	sub	r19,r19,r3
  113544:	98c0202c 	andhi	r3,r19,128
  113548:	18006226 	beq	r3,zero,1136d4 <__subdf3+0x4c4>
  11354c:	3421c83a 	sub	r16,r6,r16
  113550:	414bc83a 	sub	r5,r8,r5
  113554:	340d803a 	cmpltu	r6,r6,r16
  113558:	29a7c83a 	sub	r19,r5,r6
  11355c:	3825883a 	mov	r18,r7
  113560:	983fb31e 	bne	r19,zero,113430 <black_to_red_frame+0xfe113430>
  113564:	8009883a 	mov	r4,r16
  113568:	0113c880 	call	113c88 <__clzsi2>
  11356c:	10800804 	addi	r2,r2,32
  113570:	10fffe04 	addi	r3,r2,-8
  113574:	010007c4 	movi	r4,31
  113578:	20ffb20e 	bge	r4,r3,113444 <black_to_red_frame+0xfe113444>
  11357c:	10bff604 	addi	r2,r2,-40
  113580:	8084983a 	sll	r2,r16,r2
  113584:	0021883a 	mov	r16,zero
  113588:	1c7fb50e 	bge	r3,r17,113460 <black_to_red_frame+0xfe113460>
  11358c:	017fe034 	movhi	r5,65408
  113590:	297fffc4 	addi	r5,r5,-1
  113594:	88e3c83a 	sub	r17,r17,r3
  113598:	114a703a 	and	r5,r2,r5
  11359c:	003f3f06 	br	11329c <black_to_red_frame+0xfe11329c>
  1135a0:	000b883a 	mov	r5,zero
  1135a4:	0005883a 	mov	r2,zero
  1135a8:	003f5306 	br	1132f8 <black_to_red_frame+0xfe1132f8>
  1135ac:	418cb03a 	or	r6,r8,r6
  1135b0:	300cc03a 	cmpne	r6,r6,zero
  1135b4:	0007883a 	mov	r3,zero
  1135b8:	003f9206 	br	113404 <black_to_red_frame+0xfe113404>
  1135bc:	1800961e 	bne	r3,zero,113818 <__subdf3+0x608>
  1135c0:	88800044 	addi	r2,r17,1
  1135c4:	1101ffcc 	andi	r4,r2,2047
  1135c8:	00c00044 	movi	r3,1
  1135cc:	1900680e 	bge	r3,r4,113770 <__subdf3+0x560>
  1135d0:	00c1ffc4 	movi	r3,2047
  1135d4:	10c0b626 	beq	r2,r3,1138b0 <__subdf3+0x6a0>
  1135d8:	340d883a 	add	r6,r6,r16
  1135dc:	3421803a 	cmpltu	r16,r6,r16
  1135e0:	414b883a 	add	r5,r8,r5
  1135e4:	2c0b883a 	add	r5,r5,r16
  1135e8:	282097fa 	slli	r16,r5,31
  1135ec:	300cd07a 	srli	r6,r6,1
  1135f0:	280ad07a 	srli	r5,r5,1
  1135f4:	1023883a 	mov	r17,r2
  1135f8:	81a0b03a 	or	r16,r16,r6
  1135fc:	003f2706 	br	11329c <black_to_red_frame+0xfe11329c>
  113600:	0081ffc4 	movi	r2,2047
  113604:	88bf721e 	bne	r17,r2,1133d0 <black_to_red_frame+0xfe1133d0>
  113608:	003f2406 	br	11329c <black_to_red_frame+0xfe11329c>
  11360c:	893ff844 	addi	r4,r17,-31
  113610:	00c00804 	movi	r3,32
  113614:	1108d83a 	srl	r4,r2,r4
  113618:	28c05126 	beq	r5,r3,113760 <__subdf3+0x550>
  11361c:	00c00fc4 	movi	r3,63
  113620:	1c63c83a 	sub	r17,r3,r17
  113624:	1444983a 	sll	r2,r2,r17
  113628:	1420b03a 	or	r16,r2,r16
  11362c:	8020c03a 	cmpne	r16,r16,zero
  113630:	8120b03a 	or	r16,r16,r4
  113634:	000b883a 	mov	r5,zero
  113638:	0023883a 	mov	r17,zero
  11363c:	003f1706 	br	11329c <black_to_red_frame+0xfe11329c>
  113640:	18bff804 	addi	r2,r3,-32
  113644:	01000804 	movi	r4,32
  113648:	4084d83a 	srl	r2,r8,r2
  11364c:	19004626 	beq	r3,r4,113768 <__subdf3+0x558>
  113650:	01001004 	movi	r4,64
  113654:	20c7c83a 	sub	r3,r4,r3
  113658:	40d0983a 	sll	r8,r8,r3
  11365c:	418cb03a 	or	r6,r8,r6
  113660:	300cc03a 	cmpne	r6,r6,zero
  113664:	308cb03a 	or	r6,r6,r2
  113668:	0007883a 	mov	r3,zero
  11366c:	003f6506 	br	113404 <black_to_red_frame+0xfe113404>
  113670:	88002b26 	beq	r17,zero,113720 <__subdf3+0x510>
  113674:	0101ffc4 	movi	r4,2047
  113678:	11002f26 	beq	r2,r4,113738 <__subdf3+0x528>
  11367c:	00c7c83a 	sub	r3,zero,r3
  113680:	29402034 	orhi	r5,r5,128
  113684:	01000e04 	movi	r4,56
  113688:	20c08516 	blt	r4,r3,1138a0 <__subdf3+0x690>
  11368c:	010007c4 	movi	r4,31
  113690:	20c0cd16 	blt	r4,r3,1139c8 <__subdf3+0x7b8>
  113694:	01000804 	movi	r4,32
  113698:	20c9c83a 	sub	r4,r4,r3
  11369c:	2914983a 	sll	r10,r5,r4
  1136a0:	80d2d83a 	srl	r9,r16,r3
  1136a4:	8108983a 	sll	r4,r16,r4
  1136a8:	28cad83a 	srl	r5,r5,r3
  1136ac:	5252b03a 	or	r9,r10,r9
  1136b0:	2006c03a 	cmpne	r3,r4,zero
  1136b4:	48e0b03a 	or	r16,r9,r3
  1136b8:	3421c83a 	sub	r16,r6,r16
  1136bc:	414bc83a 	sub	r5,r8,r5
  1136c0:	340d803a 	cmpltu	r6,r6,r16
  1136c4:	298bc83a 	sub	r5,r5,r6
  1136c8:	1023883a 	mov	r17,r2
  1136cc:	3825883a 	mov	r18,r7
  1136d0:	003f5106 	br	113418 <black_to_red_frame+0xfe113418>
  1136d4:	9886b03a 	or	r3,r19,r2
  1136d8:	18001c1e 	bne	r3,zero,11374c <__subdf3+0x53c>
  1136dc:	0013883a 	mov	r9,zero
  1136e0:	000b883a 	mov	r5,zero
  1136e4:	0021883a 	mov	r16,zero
  1136e8:	0023883a 	mov	r17,zero
  1136ec:	003f6d06 	br	1134a4 <black_to_red_frame+0xfe1134a4>
  1136f0:	008007c4 	movi	r2,31
  1136f4:	10c03c16 	blt	r2,r3,1137e8 <__subdf3+0x5d8>
  1136f8:	00800804 	movi	r2,32
  1136fc:	10c5c83a 	sub	r2,r2,r3
  113700:	30c8d83a 	srl	r4,r6,r3
  113704:	408e983a 	sll	r7,r8,r2
  113708:	3084983a 	sll	r2,r6,r2
  11370c:	40c6d83a 	srl	r3,r8,r3
  113710:	3908b03a 	or	r4,r7,r4
  113714:	1004c03a 	cmpne	r2,r2,zero
  113718:	208cb03a 	or	r6,r4,r2
  11371c:	003f1506 	br	113374 <black_to_red_frame+0xfe113374>
  113720:	2c08b03a 	or	r4,r5,r16
  113724:	20000426 	beq	r4,zero,113738 <__subdf3+0x528>
  113728:	00c6303a 	nor	r3,zero,r3
  11372c:	183fe226 	beq	r3,zero,1136b8 <black_to_red_frame+0xfe1136b8>
  113730:	0101ffc4 	movi	r4,2047
  113734:	113fd31e 	bne	r2,r4,113684 <black_to_red_frame+0xfe113684>
  113738:	400b883a 	mov	r5,r8
  11373c:	3021883a 	mov	r16,r6
  113740:	1023883a 	mov	r17,r2
  113744:	3825883a 	mov	r18,r7
  113748:	003ed406 	br	11329c <black_to_red_frame+0xfe11329c>
  11374c:	1021883a 	mov	r16,r2
  113750:	003f3606 	br	11342c <black_to_red_frame+0xfe11342c>
  113754:	0081ffc4 	movi	r2,2047
  113758:	88bf011e 	bne	r17,r2,113360 <black_to_red_frame+0xfe113360>
  11375c:	003ecf06 	br	11329c <black_to_red_frame+0xfe11329c>
  113760:	0005883a 	mov	r2,zero
  113764:	003fb006 	br	113628 <black_to_red_frame+0xfe113628>
  113768:	0011883a 	mov	r8,zero
  11376c:	003fbb06 	br	11365c <black_to_red_frame+0xfe11365c>
  113770:	2c04b03a 	or	r2,r5,r16
  113774:	88007f1e 	bne	r17,zero,113974 <__subdf3+0x764>
  113778:	1000a926 	beq	r2,zero,113a20 <__subdf3+0x810>
  11377c:	4184b03a 	or	r2,r8,r6
  113780:	103ec626 	beq	r2,zero,11329c <black_to_red_frame+0xfe11329c>
  113784:	340d883a 	add	r6,r6,r16
  113788:	414b883a 	add	r5,r8,r5
  11378c:	3421803a 	cmpltu	r16,r6,r16
  113790:	2c0b883a 	add	r5,r5,r16
  113794:	2880202c 	andhi	r2,r5,128
  113798:	1000bb26 	beq	r2,zero,113a88 <__subdf3+0x878>
  11379c:	00bfe034 	movhi	r2,65408
  1137a0:	10bfffc4 	addi	r2,r2,-1
  1137a4:	288a703a 	and	r5,r5,r2
  1137a8:	3021883a 	mov	r16,r6
  1137ac:	1823883a 	mov	r17,r3
  1137b0:	003eba06 	br	11329c <black_to_red_frame+0xfe11329c>
  1137b4:	2c04b03a 	or	r2,r5,r16
  1137b8:	8800311e 	bne	r17,zero,113880 <__subdf3+0x670>
  1137bc:	1000451e 	bne	r2,zero,1138d4 <__subdf3+0x6c4>
  1137c0:	4184b03a 	or	r2,r8,r6
  1137c4:	10000426 	beq	r2,zero,1137d8 <__subdf3+0x5c8>
  1137c8:	400b883a 	mov	r5,r8
  1137cc:	3021883a 	mov	r16,r6
  1137d0:	3825883a 	mov	r18,r7
  1137d4:	003eb106 	br	11329c <black_to_red_frame+0xfe11329c>
  1137d8:	0013883a 	mov	r9,zero
  1137dc:	000b883a 	mov	r5,zero
  1137e0:	0021883a 	mov	r16,zero
  1137e4:	003f2f06 	br	1134a4 <black_to_red_frame+0xfe1134a4>
  1137e8:	18bff804 	addi	r2,r3,-32
  1137ec:	01000804 	movi	r4,32
  1137f0:	4084d83a 	srl	r2,r8,r2
  1137f4:	19007226 	beq	r3,r4,1139c0 <__subdf3+0x7b0>
  1137f8:	01001004 	movi	r4,64
  1137fc:	20c7c83a 	sub	r3,r4,r3
  113800:	40d0983a 	sll	r8,r8,r3
  113804:	418cb03a 	or	r6,r8,r6
  113808:	300cc03a 	cmpne	r6,r6,zero
  11380c:	308cb03a 	or	r6,r6,r2
  113810:	0007883a 	mov	r3,zero
  113814:	003ed706 	br	113374 <black_to_red_frame+0xfe113374>
  113818:	8800291e 	bne	r17,zero,1138c0 <__subdf3+0x6b0>
  11381c:	2c08b03a 	or	r4,r5,r16
  113820:	20005026 	beq	r4,zero,113964 <__subdf3+0x754>
  113824:	00c6303a 	nor	r3,zero,r3
  113828:	18000f26 	beq	r3,zero,113868 <__subdf3+0x658>
  11382c:	0101ffc4 	movi	r4,2047
  113830:	11004c26 	beq	r2,r4,113964 <__subdf3+0x754>
  113834:	01000e04 	movi	r4,56
  113838:	20c07516 	blt	r4,r3,113a10 <__subdf3+0x800>
  11383c:	010007c4 	movi	r4,31
  113840:	20c08316 	blt	r4,r3,113a50 <__subdf3+0x840>
  113844:	01000804 	movi	r4,32
  113848:	20c9c83a 	sub	r4,r4,r3
  11384c:	2914983a 	sll	r10,r5,r4
  113850:	80ced83a 	srl	r7,r16,r3
  113854:	8108983a 	sll	r4,r16,r4
  113858:	28cad83a 	srl	r5,r5,r3
  11385c:	51ceb03a 	or	r7,r10,r7
  113860:	2006c03a 	cmpne	r3,r4,zero
  113864:	38e0b03a 	or	r16,r7,r3
  113868:	81a1883a 	add	r16,r16,r6
  11386c:	2a0b883a 	add	r5,r5,r8
  113870:	818d803a 	cmpltu	r6,r16,r6
  113874:	298b883a 	add	r5,r5,r6
  113878:	1023883a 	mov	r17,r2
  11387c:	003ec206 	br	113388 <black_to_red_frame+0xfe113388>
  113880:	1000221e 	bne	r2,zero,11390c <__subdf3+0x6fc>
  113884:	4184b03a 	or	r2,r8,r6
  113888:	10005b26 	beq	r2,zero,1139f8 <__subdf3+0x7e8>
  11388c:	400b883a 	mov	r5,r8
  113890:	3021883a 	mov	r16,r6
  113894:	3825883a 	mov	r18,r7
  113898:	0441ffc4 	movi	r17,2047
  11389c:	003e7f06 	br	11329c <black_to_red_frame+0xfe11329c>
  1138a0:	2c20b03a 	or	r16,r5,r16
  1138a4:	8020c03a 	cmpne	r16,r16,zero
  1138a8:	000b883a 	mov	r5,zero
  1138ac:	003f8206 	br	1136b8 <black_to_red_frame+0xfe1136b8>
  1138b0:	1023883a 	mov	r17,r2
  1138b4:	000b883a 	mov	r5,zero
  1138b8:	0021883a 	mov	r16,zero
  1138bc:	003ef906 	br	1134a4 <black_to_red_frame+0xfe1134a4>
  1138c0:	0101ffc4 	movi	r4,2047
  1138c4:	11002726 	beq	r2,r4,113964 <__subdf3+0x754>
  1138c8:	00c7c83a 	sub	r3,zero,r3
  1138cc:	29402034 	orhi	r5,r5,128
  1138d0:	003fd806 	br	113834 <black_to_red_frame+0xfe113834>
  1138d4:	4184b03a 	or	r2,r8,r6
  1138d8:	103e7026 	beq	r2,zero,11329c <black_to_red_frame+0xfe11329c>
  1138dc:	8185c83a 	sub	r2,r16,r6
  1138e0:	8089803a 	cmpltu	r4,r16,r2
  1138e4:	2a07c83a 	sub	r3,r5,r8
  1138e8:	1907c83a 	sub	r3,r3,r4
  1138ec:	1900202c 	andhi	r4,r3,128
  1138f0:	20005226 	beq	r4,zero,113a3c <__subdf3+0x82c>
  1138f4:	3421c83a 	sub	r16,r6,r16
  1138f8:	414bc83a 	sub	r5,r8,r5
  1138fc:	340d803a 	cmpltu	r6,r6,r16
  113900:	298bc83a 	sub	r5,r5,r6
  113904:	3825883a 	mov	r18,r7
  113908:	003e6406 	br	11329c <black_to_red_frame+0xfe11329c>
  11390c:	4184b03a 	or	r2,r8,r6
  113910:	10002926 	beq	r2,zero,1139b8 <__subdf3+0x7a8>
  113914:	2804d0fa 	srli	r2,r5,3
  113918:	8020d0fa 	srli	r16,r16,3
  11391c:	280a977a 	slli	r5,r5,29
  113920:	10c0022c 	andhi	r3,r2,8
  113924:	2c20b03a 	or	r16,r5,r16
  113928:	18000826 	beq	r3,zero,11394c <__subdf3+0x73c>
  11392c:	4006d0fa 	srli	r3,r8,3
  113930:	1900022c 	andhi	r4,r3,8
  113934:	2000051e 	bne	r4,zero,11394c <__subdf3+0x73c>
  113938:	300cd0fa 	srli	r6,r6,3
  11393c:	4010977a 	slli	r8,r8,29
  113940:	1805883a 	mov	r2,r3
  113944:	3825883a 	mov	r18,r7
  113948:	41a0b03a 	or	r16,r8,r6
  11394c:	800ad77a 	srli	r5,r16,29
  113950:	100490fa 	slli	r2,r2,3
  113954:	802090fa 	slli	r16,r16,3
  113958:	0441ffc4 	movi	r17,2047
  11395c:	288ab03a 	or	r5,r5,r2
  113960:	003e4e06 	br	11329c <black_to_red_frame+0xfe11329c>
  113964:	400b883a 	mov	r5,r8
  113968:	3021883a 	mov	r16,r6
  11396c:	1023883a 	mov	r17,r2
  113970:	003e4a06 	br	11329c <black_to_red_frame+0xfe11329c>
  113974:	10002d26 	beq	r2,zero,113a2c <__subdf3+0x81c>
  113978:	4184b03a 	or	r2,r8,r6
  11397c:	10000e26 	beq	r2,zero,1139b8 <__subdf3+0x7a8>
  113980:	2804d0fa 	srli	r2,r5,3
  113984:	8020d0fa 	srli	r16,r16,3
  113988:	280a977a 	slli	r5,r5,29
  11398c:	10c0022c 	andhi	r3,r2,8
  113990:	2c20b03a 	or	r16,r5,r16
  113994:	183fed26 	beq	r3,zero,11394c <black_to_red_frame+0xfe11394c>
  113998:	4006d0fa 	srli	r3,r8,3
  11399c:	1900022c 	andhi	r4,r3,8
  1139a0:	203fea1e 	bne	r4,zero,11394c <black_to_red_frame+0xfe11394c>
  1139a4:	300cd0fa 	srli	r6,r6,3
  1139a8:	4010977a 	slli	r8,r8,29
  1139ac:	1805883a 	mov	r2,r3
  1139b0:	41a0b03a 	or	r16,r8,r6
  1139b4:	003fe506 	br	11394c <black_to_red_frame+0xfe11394c>
  1139b8:	0441ffc4 	movi	r17,2047
  1139bc:	003e3706 	br	11329c <black_to_red_frame+0xfe11329c>
  1139c0:	0011883a 	mov	r8,zero
  1139c4:	003f8f06 	br	113804 <black_to_red_frame+0xfe113804>
  1139c8:	193ff804 	addi	r4,r3,-32
  1139cc:	02400804 	movi	r9,32
  1139d0:	2908d83a 	srl	r4,r5,r4
  1139d4:	1a402a26 	beq	r3,r9,113a80 <__subdf3+0x870>
  1139d8:	02401004 	movi	r9,64
  1139dc:	48c7c83a 	sub	r3,r9,r3
  1139e0:	28ca983a 	sll	r5,r5,r3
  1139e4:	2c20b03a 	or	r16,r5,r16
  1139e8:	8020c03a 	cmpne	r16,r16,zero
  1139ec:	8120b03a 	or	r16,r16,r4
  1139f0:	000b883a 	mov	r5,zero
  1139f4:	003f3006 	br	1136b8 <black_to_red_frame+0xfe1136b8>
  1139f8:	0013883a 	mov	r9,zero
  1139fc:	01402034 	movhi	r5,128
  113a00:	297fffc4 	addi	r5,r5,-1
  113a04:	043ffe04 	movi	r16,-8
  113a08:	0441ffc4 	movi	r17,2047
  113a0c:	003ea506 	br	1134a4 <black_to_red_frame+0xfe1134a4>
  113a10:	2c20b03a 	or	r16,r5,r16
  113a14:	8020c03a 	cmpne	r16,r16,zero
  113a18:	000b883a 	mov	r5,zero
  113a1c:	003f9206 	br	113868 <black_to_red_frame+0xfe113868>
  113a20:	400b883a 	mov	r5,r8
  113a24:	3021883a 	mov	r16,r6
  113a28:	003e1c06 	br	11329c <black_to_red_frame+0xfe11329c>
  113a2c:	400b883a 	mov	r5,r8
  113a30:	3021883a 	mov	r16,r6
  113a34:	0441ffc4 	movi	r17,2047
  113a38:	003e1806 	br	11329c <black_to_red_frame+0xfe11329c>
  113a3c:	1888b03a 	or	r4,r3,r2
  113a40:	203f6526 	beq	r4,zero,1137d8 <black_to_red_frame+0xfe1137d8>
  113a44:	180b883a 	mov	r5,r3
  113a48:	1021883a 	mov	r16,r2
  113a4c:	003e1306 	br	11329c <black_to_red_frame+0xfe11329c>
  113a50:	193ff804 	addi	r4,r3,-32
  113a54:	01c00804 	movi	r7,32
  113a58:	2908d83a 	srl	r4,r5,r4
  113a5c:	19c00c26 	beq	r3,r7,113a90 <__subdf3+0x880>
  113a60:	01c01004 	movi	r7,64
  113a64:	38c7c83a 	sub	r3,r7,r3
  113a68:	28ca983a 	sll	r5,r5,r3
  113a6c:	2c20b03a 	or	r16,r5,r16
  113a70:	8020c03a 	cmpne	r16,r16,zero
  113a74:	8120b03a 	or	r16,r16,r4
  113a78:	000b883a 	mov	r5,zero
  113a7c:	003f7a06 	br	113868 <black_to_red_frame+0xfe113868>
  113a80:	000b883a 	mov	r5,zero
  113a84:	003fd706 	br	1139e4 <black_to_red_frame+0xfe1139e4>
  113a88:	3021883a 	mov	r16,r6
  113a8c:	003e0306 	br	11329c <black_to_red_frame+0xfe11329c>
  113a90:	000b883a 	mov	r5,zero
  113a94:	003ff506 	br	113a6c <black_to_red_frame+0xfe113a6c>

00113a98 <__fixdfsi>:
  113a98:	2806d53a 	srli	r3,r5,20
  113a9c:	00800434 	movhi	r2,16
  113aa0:	10bfffc4 	addi	r2,r2,-1
  113aa4:	0180ff84 	movi	r6,1022
  113aa8:	18c1ffcc 	andi	r3,r3,2047
  113aac:	2884703a 	and	r2,r5,r2
  113ab0:	280ad7fa 	srli	r5,r5,31
  113ab4:	30c0120e 	bge	r6,r3,113b00 <__fixdfsi+0x68>
  113ab8:	01810744 	movi	r6,1053
  113abc:	30c00c16 	blt	r6,r3,113af0 <__fixdfsi+0x58>
  113ac0:	01810cc4 	movi	r6,1075
  113ac4:	30cdc83a 	sub	r6,r6,r3
  113ac8:	01c007c4 	movi	r7,31
  113acc:	10800434 	orhi	r2,r2,16
  113ad0:	39800d16 	blt	r7,r6,113b08 <__fixdfsi+0x70>
  113ad4:	18fefb44 	addi	r3,r3,-1043
  113ad8:	2188d83a 	srl	r4,r4,r6
  113adc:	10c4983a 	sll	r2,r2,r3
  113ae0:	2084b03a 	or	r2,r4,r2
  113ae4:	28000726 	beq	r5,zero,113b04 <__fixdfsi+0x6c>
  113ae8:	0085c83a 	sub	r2,zero,r2
  113aec:	f800283a 	ret
  113af0:	00a00034 	movhi	r2,32768
  113af4:	10bfffc4 	addi	r2,r2,-1
  113af8:	2885883a 	add	r2,r5,r2
  113afc:	f800283a 	ret
  113b00:	0005883a 	mov	r2,zero
  113b04:	f800283a 	ret
  113b08:	010104c4 	movi	r4,1043
  113b0c:	20c7c83a 	sub	r3,r4,r3
  113b10:	10c4d83a 	srl	r2,r2,r3
  113b14:	003ff306 	br	113ae4 <black_to_red_frame+0xfe113ae4>

00113b18 <__floatsidf>:
  113b18:	defffd04 	addi	sp,sp,-12
  113b1c:	dc000015 	stw	r16,0(sp)
  113b20:	dfc00215 	stw	ra,8(sp)
  113b24:	dc400115 	stw	r17,4(sp)
  113b28:	2021883a 	mov	r16,r4
  113b2c:	20002926 	beq	r4,zero,113bd4 <__floatsidf+0xbc>
  113b30:	2022d7fa 	srli	r17,r4,31
  113b34:	88000126 	beq	r17,zero,113b3c <__floatsidf+0x24>
  113b38:	0121c83a 	sub	r16,zero,r4
  113b3c:	8009883a 	mov	r4,r16
  113b40:	0113c880 	call	113c88 <__clzsi2>
  113b44:	01810784 	movi	r6,1054
  113b48:	00c00284 	movi	r3,10
  113b4c:	308dc83a 	sub	r6,r6,r2
  113b50:	1880150e 	bge	r3,r2,113ba8 <__floatsidf+0x90>
  113b54:	113ffd44 	addi	r4,r2,-11
  113b58:	8108983a 	sll	r4,r16,r4
  113b5c:	00800434 	movhi	r2,16
  113b60:	10bfffc4 	addi	r2,r2,-1
  113b64:	3181ffcc 	andi	r6,r6,2047
  113b68:	2088703a 	and	r4,r4,r2
  113b6c:	880b883a 	mov	r5,r17
  113b70:	0005883a 	mov	r2,zero
  113b74:	300c953a 	slli	r6,r6,20
  113b78:	29403fcc 	andi	r5,r5,255
  113b7c:	280a97fa 	slli	r5,r5,31
  113b80:	00c00434 	movhi	r3,16
  113b84:	18ffffc4 	addi	r3,r3,-1
  113b88:	20c8703a 	and	r4,r4,r3
  113b8c:	2186b03a 	or	r3,r4,r6
  113b90:	1946b03a 	or	r3,r3,r5
  113b94:	dfc00217 	ldw	ra,8(sp)
  113b98:	dc400117 	ldw	r17,4(sp)
  113b9c:	dc000017 	ldw	r16,0(sp)
  113ba0:	dec00304 	addi	sp,sp,12
  113ba4:	f800283a 	ret
  113ba8:	010002c4 	movi	r4,11
  113bac:	2089c83a 	sub	r4,r4,r2
  113bb0:	8108d83a 	srl	r4,r16,r4
  113bb4:	10800544 	addi	r2,r2,21
  113bb8:	00c00434 	movhi	r3,16
  113bbc:	18ffffc4 	addi	r3,r3,-1
  113bc0:	8084983a 	sll	r2,r16,r2
  113bc4:	20c8703a 	and	r4,r4,r3
  113bc8:	3181ffcc 	andi	r6,r6,2047
  113bcc:	880b883a 	mov	r5,r17
  113bd0:	003fe806 	br	113b74 <black_to_red_frame+0xfe113b74>
  113bd4:	000b883a 	mov	r5,zero
  113bd8:	000d883a 	mov	r6,zero
  113bdc:	0009883a 	mov	r4,zero
  113be0:	0005883a 	mov	r2,zero
  113be4:	003fe306 	br	113b74 <black_to_red_frame+0xfe113b74>

00113be8 <__floatunsidf>:
  113be8:	defffe04 	addi	sp,sp,-8
  113bec:	dc000015 	stw	r16,0(sp)
  113bf0:	dfc00115 	stw	ra,4(sp)
  113bf4:	2021883a 	mov	r16,r4
  113bf8:	20001f26 	beq	r4,zero,113c78 <__floatunsidf+0x90>
  113bfc:	0113c880 	call	113c88 <__clzsi2>
  113c00:	01010784 	movi	r4,1054
  113c04:	00c00284 	movi	r3,10
  113c08:	2089c83a 	sub	r4,r4,r2
  113c0c:	1880100e 	bge	r3,r2,113c50 <__floatunsidf+0x68>
  113c10:	117ffd44 	addi	r5,r2,-11
  113c14:	814a983a 	sll	r5,r16,r5
  113c18:	00800434 	movhi	r2,16
  113c1c:	10bfffc4 	addi	r2,r2,-1
  113c20:	2101ffcc 	andi	r4,r4,2047
  113c24:	288a703a 	and	r5,r5,r2
  113c28:	0005883a 	mov	r2,zero
  113c2c:	2008953a 	slli	r4,r4,20
  113c30:	00c00434 	movhi	r3,16
  113c34:	18ffffc4 	addi	r3,r3,-1
  113c38:	28c6703a 	and	r3,r5,r3
  113c3c:	1906b03a 	or	r3,r3,r4
  113c40:	dfc00117 	ldw	ra,4(sp)
  113c44:	dc000017 	ldw	r16,0(sp)
  113c48:	dec00204 	addi	sp,sp,8
  113c4c:	f800283a 	ret
  113c50:	014002c4 	movi	r5,11
  113c54:	288bc83a 	sub	r5,r5,r2
  113c58:	814ad83a 	srl	r5,r16,r5
  113c5c:	10800544 	addi	r2,r2,21
  113c60:	00c00434 	movhi	r3,16
  113c64:	18ffffc4 	addi	r3,r3,-1
  113c68:	8084983a 	sll	r2,r16,r2
  113c6c:	28ca703a 	and	r5,r5,r3
  113c70:	2101ffcc 	andi	r4,r4,2047
  113c74:	003fed06 	br	113c2c <black_to_red_frame+0xfe113c2c>
  113c78:	0009883a 	mov	r4,zero
  113c7c:	000b883a 	mov	r5,zero
  113c80:	0005883a 	mov	r2,zero
  113c84:	003fe906 	br	113c2c <black_to_red_frame+0xfe113c2c>

00113c88 <__clzsi2>:
  113c88:	00bfffd4 	movui	r2,65535
  113c8c:	11000b36 	bltu	r2,r4,113cbc <__clzsi2+0x34>
  113c90:	00803fc4 	movi	r2,255
  113c94:	11001e2e 	bgeu	r2,r4,113d10 <__clzsi2+0x88>
  113c98:	00c00204 	movi	r3,8
  113c9c:	20c8d83a 	srl	r4,r4,r3
  113ca0:	00c00474 	movhi	r3,17
  113ca4:	18daac04 	addi	r3,r3,27312
  113ca8:	00800604 	movi	r2,24
  113cac:	1909883a 	add	r4,r3,r4
  113cb0:	20c00003 	ldbu	r3,0(r4)
  113cb4:	10c5c83a 	sub	r2,r2,r3
  113cb8:	f800283a 	ret
  113cbc:	00804034 	movhi	r2,256
  113cc0:	10bfffc4 	addi	r2,r2,-1
  113cc4:	11000936 	bltu	r2,r4,113cec <__clzsi2+0x64>
  113cc8:	00800404 	movi	r2,16
  113ccc:	1007883a 	mov	r3,r2
  113cd0:	20c8d83a 	srl	r4,r4,r3
  113cd4:	00c00474 	movhi	r3,17
  113cd8:	18daac04 	addi	r3,r3,27312
  113cdc:	1909883a 	add	r4,r3,r4
  113ce0:	20c00003 	ldbu	r3,0(r4)
  113ce4:	10c5c83a 	sub	r2,r2,r3
  113ce8:	f800283a 	ret
  113cec:	00c00604 	movi	r3,24
  113cf0:	20c8d83a 	srl	r4,r4,r3
  113cf4:	00c00474 	movhi	r3,17
  113cf8:	18daac04 	addi	r3,r3,27312
  113cfc:	00800204 	movi	r2,8
  113d00:	1909883a 	add	r4,r3,r4
  113d04:	20c00003 	ldbu	r3,0(r4)
  113d08:	10c5c83a 	sub	r2,r2,r3
  113d0c:	f800283a 	ret
  113d10:	0007883a 	mov	r3,zero
  113d14:	20c8d83a 	srl	r4,r4,r3
  113d18:	00c00474 	movhi	r3,17
  113d1c:	18daac04 	addi	r3,r3,27312
  113d20:	00800804 	movi	r2,32
  113d24:	1909883a 	add	r4,r3,r4
  113d28:	20c00003 	ldbu	r3,0(r4)
  113d2c:	10c5c83a 	sub	r2,r2,r3
  113d30:	f800283a 	ret

00113d34 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  113d34:	defffd04 	addi	sp,sp,-12
  113d38:	dc000015 	stw	r16,0(sp)
  113d3c:	dfc00215 	stw	ra,8(sp)
  113d40:	dc400115 	stw	r17,4(sp)
  113d44:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  113d48:	20001b16 	blt	r4,zero,113db8 <close+0x84>
  113d4c:	01400304 	movi	r5,12
  113d50:	0103f1c0 	call	103f1c <__mulsi3>
  113d54:	01000474 	movhi	r4,17
  113d58:	211d2d04 	addi	r4,r4,29876
  113d5c:	2089883a 	add	r4,r4,r2
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  113d60:	20800017 	ldw	r2,0(r4)
  113d64:	10c00417 	ldw	r3,16(r2)
  113d68:	18000b26 	beq	r3,zero,113d98 <close+0x64>
  113d6c:	183ee83a 	callr	r3

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  113d70:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  113d74:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  113d78:	011426c0 	call	11426c <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
  113d7c:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
  113d80:	88001916 	blt	r17,zero,113de8 <close+0xb4>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  113d84:	dfc00217 	ldw	ra,8(sp)
  113d88:	dc400117 	ldw	r17,4(sp)
  113d8c:	dc000017 	ldw	r16,0(sp)
  113d90:	dec00304 	addi	sp,sp,12
  113d94:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  113d98:	8009883a 	mov	r4,r16
  113d9c:	011426c0 	call	11426c <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
  113da0:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  113da4:	dfc00217 	ldw	ra,8(sp)
  113da8:	dc400117 	ldw	r17,4(sp)
  113dac:	dc000017 	ldw	r16,0(sp)
  113db0:	dec00304 	addi	sp,sp,12
  113db4:	f800283a 	ret

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
  113db8:	008004b4 	movhi	r2,18
  113dbc:	10a1fc04 	addi	r2,r2,-30736
  113dc0:	10800017 	ldw	r2,0(r2)
  113dc4:	10000226 	beq	r2,zero,113dd0 <close+0x9c>
  113dc8:	103ee83a 	callr	r2
  113dcc:	00000206 	br	113dd8 <close+0xa4>
  113dd0:	008004b4 	movhi	r2,18
  113dd4:	10a90c04 	addi	r2,r2,-23504
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
  113dd8:	00c01444 	movi	r3,81
  113ddc:	10c00015 	stw	r3,0(r2)
    return -1;
  113de0:	00bfffc4 	movi	r2,-1
  113de4:	003fe706 	br	113d84 <black_to_red_frame+0xfe113d84>
  113de8:	008004b4 	movhi	r2,18
  113dec:	10a1fc04 	addi	r2,r2,-30736
  113df0:	10800017 	ldw	r2,0(r2)
  113df4:	10000526 	beq	r2,zero,113e0c <close+0xd8>
  113df8:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
  113dfc:	0463c83a 	sub	r17,zero,r17
  113e00:	14400015 	stw	r17,0(r2)
      return -1;
  113e04:	00bfffc4 	movi	r2,-1
  113e08:	003fde06 	br	113d84 <black_to_red_frame+0xfe113d84>
  113e0c:	008004b4 	movhi	r2,18
  113e10:	10a90c04 	addi	r2,r2,-23504
  113e14:	003ff906 	br	113dfc <black_to_red_frame+0xfe113dfc>

00113e18 <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
  113e18:	3005883a 	mov	r2,r6
  113e1c:	f800283a 	ret

00113e20 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  113e20:	defffe04 	addi	sp,sp,-8
  113e24:	dfc00115 	stw	ra,4(sp)
  113e28:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  113e2c:	20001516 	blt	r4,zero,113e84 <fstat+0x64>
  113e30:	2821883a 	mov	r16,r5
  113e34:	01400304 	movi	r5,12
  113e38:	0103f1c0 	call	103f1c <__mulsi3>
  113e3c:	01000474 	movhi	r4,17
  113e40:	211d2d04 	addi	r4,r4,29876
  113e44:	2089883a 	add	r4,r4,r2
  
  if (fd)
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  113e48:	20800017 	ldw	r2,0(r4)
  113e4c:	10c00817 	ldw	r3,32(r2)
  113e50:	18000526 	beq	r3,zero,113e68 <fstat+0x48>
    {
      return fd->dev->fstat(fd, st);
  113e54:	800b883a 	mov	r5,r16
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  113e58:	dfc00117 	ldw	ra,4(sp)
  113e5c:	dc000017 	ldw	r16,0(sp)
  113e60:	dec00204 	addi	sp,sp,8
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    {
      return fd->dev->fstat(fd, st);
  113e64:	1800683a 	jmp	r3
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  113e68:	00880004 	movi	r2,8192
  113e6c:	80800115 	stw	r2,4(r16)
      return 0;
  113e70:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
  113e74:	dfc00117 	ldw	ra,4(sp)
  113e78:	dc000017 	ldw	r16,0(sp)
  113e7c:	dec00204 	addi	sp,sp,8
  113e80:	f800283a 	ret
  113e84:	008004b4 	movhi	r2,18
  113e88:	10a1fc04 	addi	r2,r2,-30736
  113e8c:	10800017 	ldw	r2,0(r2)
  113e90:	10000226 	beq	r2,zero,113e9c <fstat+0x7c>
  113e94:	103ee83a 	callr	r2
  113e98:	00000206 	br	113ea4 <fstat+0x84>
  113e9c:	008004b4 	movhi	r2,18
  113ea0:	10a90c04 	addi	r2,r2,-23504
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  113ea4:	00c01444 	movi	r3,81
  113ea8:	10c00015 	stw	r3,0(r2)
    return -1;
  113eac:	00bfffc4 	movi	r2,-1
  113eb0:	003ff006 	br	113e74 <black_to_red_frame+0xfe113e74>

00113eb4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  113eb4:	deffef04 	addi	sp,sp,-68
  113eb8:	dc000f15 	stw	r16,60(sp)
  113ebc:	dfc01015 	stw	ra,64(sp)
  113ec0:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  113ec4:	20001116 	blt	r4,zero,113f0c <isatty+0x58>
  113ec8:	01400304 	movi	r5,12
  113ecc:	0103f1c0 	call	103f1c <__mulsi3>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  113ed0:	00c00474 	movhi	r3,17
  113ed4:	18dd2d04 	addi	r3,r3,29876
  113ed8:	1885883a 	add	r2,r3,r2
  113edc:	10800017 	ldw	r2,0(r2)
  113ee0:	10800817 	ldw	r2,32(r2)
  113ee4:	10001526 	beq	r2,zero,113f3c <isatty+0x88>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  113ee8:	8009883a 	mov	r4,r16
  113eec:	d80b883a 	mov	r5,sp
  113ef0:	0113e200 	call	113e20 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  113ef4:	d8800117 	ldw	r2,4(sp)
  113ef8:	10880020 	cmpeqi	r2,r2,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
  113efc:	dfc01017 	ldw	ra,64(sp)
  113f00:	dc000f17 	ldw	r16,60(sp)
  113f04:	dec01104 	addi	sp,sp,68
  113f08:	f800283a 	ret
  113f0c:	008004b4 	movhi	r2,18
  113f10:	10a1fc04 	addi	r2,r2,-30736
  113f14:	10800017 	ldw	r2,0(r2)
  113f18:	10000d26 	beq	r2,zero,113f50 <isatty+0x9c>
  113f1c:	103ee83a 	callr	r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  113f20:	00c01444 	movi	r3,81
  113f24:	10c00015 	stw	r3,0(r2)
    return 0;
  113f28:	0005883a 	mov	r2,zero
  }
}
  113f2c:	dfc01017 	ldw	ra,64(sp)
  113f30:	dc000f17 	ldw	r16,60(sp)
  113f34:	dec01104 	addi	sp,sp,68
  113f38:	f800283a 	ret
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    {
      return 1;
  113f3c:	00800044 	movi	r2,1
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
  113f40:	dfc01017 	ldw	ra,64(sp)
  113f44:	dc000f17 	ldw	r16,60(sp)
  113f48:	dec01104 	addi	sp,sp,68
  113f4c:	f800283a 	ret
  113f50:	008004b4 	movhi	r2,18
  113f54:	10a90c04 	addi	r2,r2,-23504
  113f58:	003ff106 	br	113f20 <black_to_red_frame+0xfe113f20>

00113f5c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
  113f5c:	deffff04 	addi	sp,sp,-4
  113f60:	dfc00015 	stw	ra,0(sp)

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  113f64:	01400474 	movhi	r5,17
  113f68:	295b0404 	addi	r5,r5,27664
  113f6c:	018004b4 	movhi	r6,18
  113f70:	31a20304 	addi	r6,r6,-30708
  113f74:	29801026 	beq	r5,r6,113fb8 <alt_load+0x5c>
  {
    while( to != end )
  113f78:	008004b4 	movhi	r2,18
  113f7c:	10a20304 	addi	r2,r2,-30708
  113f80:	28800d26 	beq	r5,r2,113fb8 <alt_load+0x5c>
  113f84:	29c00104 	addi	r7,r5,4
  113f88:	11cfc83a 	sub	r7,r2,r7
  113f8c:	380ed0ba 	srli	r7,r7,2
  113f90:	0005883a 	mov	r2,zero
  113f94:	39c00044 	addi	r7,r7,1
  113f98:	39cf883a 	add	r7,r7,r7
  113f9c:	39cf883a 	add	r7,r7,r7
  113fa0:	3087883a 	add	r3,r6,r2
    {
      *to++ = *from++;
  113fa4:	19000017 	ldw	r4,0(r3)
  113fa8:	2887883a 	add	r3,r5,r2
  113fac:	10800104 	addi	r2,r2,4
  113fb0:	19000015 	stw	r4,0(r3)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  113fb4:	11fffa1e 	bne	r2,r7,113fa0 <black_to_red_frame+0xfe113fa0>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  113fb8:	01400434 	movhi	r5,16
  113fbc:	29400804 	addi	r5,r5,32
  113fc0:	01800434 	movhi	r6,16
  113fc4:	31800804 	addi	r6,r6,32
  113fc8:	29801026 	beq	r5,r6,11400c <alt_load+0xb0>
  {
    while( to != end )
  113fcc:	00800434 	movhi	r2,16
  113fd0:	1080c704 	addi	r2,r2,796
  113fd4:	28800d26 	beq	r5,r2,11400c <alt_load+0xb0>
  113fd8:	29c00104 	addi	r7,r5,4
  113fdc:	11cfc83a 	sub	r7,r2,r7
  113fe0:	380ed0ba 	srli	r7,r7,2
  113fe4:	0005883a 	mov	r2,zero
  113fe8:	39c00044 	addi	r7,r7,1
  113fec:	39cf883a 	add	r7,r7,r7
  113ff0:	39cf883a 	add	r7,r7,r7
  113ff4:	3087883a 	add	r3,r6,r2
    {
      *to++ = *from++;
  113ff8:	19000017 	ldw	r4,0(r3)
  113ffc:	2887883a 	add	r3,r5,r2
  114000:	10800104 	addi	r2,r2,4
  114004:	19000015 	stw	r4,0(r3)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  114008:	11fffa1e 	bne	r2,r7,113ff4 <black_to_red_frame+0xfe113ff4>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  11400c:	01400474 	movhi	r5,17
  114010:	2957f104 	addi	r5,r5,24516
  114014:	01800474 	movhi	r6,17
  114018:	3197f104 	addi	r6,r6,24516
  11401c:	29801026 	beq	r5,r6,114060 <alt_load+0x104>
  {
    while( to != end )
  114020:	00800474 	movhi	r2,17
  114024:	109b0404 	addi	r2,r2,27664
  114028:	28800d26 	beq	r5,r2,114060 <alt_load+0x104>
  11402c:	29c00104 	addi	r7,r5,4
  114030:	11cfc83a 	sub	r7,r2,r7
  114034:	380ed0ba 	srli	r7,r7,2
  114038:	0005883a 	mov	r2,zero
  11403c:	39c00044 	addi	r7,r7,1
  114040:	39cf883a 	add	r7,r7,r7
  114044:	39cf883a 	add	r7,r7,r7
  114048:	3087883a 	add	r3,r6,r2
    {
      *to++ = *from++;
  11404c:	19000017 	ldw	r4,0(r3)
  114050:	2887883a 	add	r3,r5,r2
  114054:	10800104 	addi	r2,r2,4
  114058:	19000015 	stw	r4,0(r3)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
  11405c:	11fffa1e 	bne	r2,r7,114048 <black_to_red_frame+0xfe114048>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  114060:	01154140 	call	115414 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
  114064:	dfc00017 	ldw	ra,0(sp)
  114068:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
  11406c:	01155e81 	jmpi	1155e8 <alt_icache_flush_all>

00114070 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  114070:	defffd04 	addi	sp,sp,-12
  114074:	dfc00215 	stw	ra,8(sp)
  114078:	dc000115 	stw	r16,4(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  11407c:	20001216 	blt	r4,zero,1140c8 <lseek+0x58>
  114080:	2821883a 	mov	r16,r5
  114084:	01400304 	movi	r5,12
  114088:	d9800015 	stw	r6,0(sp)
  11408c:	0103f1c0 	call	103f1c <__mulsi3>
  114090:	01000474 	movhi	r4,17
  114094:	211d2d04 	addi	r4,r4,29876
  114098:	2089883a 	add	r4,r4,r2
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  11409c:	20800017 	ldw	r2,0(r4)
  1140a0:	d9800017 	ldw	r6,0(sp)
  1140a4:	10c00717 	ldw	r3,28(r2)
  1140a8:	18001026 	beq	r3,zero,1140ec <lseek+0x7c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  1140ac:	800b883a 	mov	r5,r16
  1140b0:	183ee83a 	callr	r3
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
  1140b4:	10001216 	blt	r2,zero,114100 <lseek+0x90>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
  1140b8:	dfc00217 	ldw	ra,8(sp)
  1140bc:	dc000117 	ldw	r16,4(sp)
  1140c0:	dec00304 	addi	sp,sp,12
  1140c4:	f800283a 	ret
  1140c8:	04001444 	movi	r16,81
  1140cc:	008004b4 	movhi	r2,18
  1140d0:	10a1fc04 	addi	r2,r2,-30736
  1140d4:	10800017 	ldw	r2,0(r2)
  1140d8:	10000626 	beq	r2,zero,1140f4 <lseek+0x84>
  1140dc:	103ee83a 	callr	r2
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
  1140e0:	14000015 	stw	r16,0(r2)
    rc = -1;
  1140e4:	00bfffc4 	movi	r2,-1
  1140e8:	003ff306 	br	1140b8 <black_to_red_frame+0xfe1140b8>
  1140ec:	04002184 	movi	r16,134
  1140f0:	003ff606 	br	1140cc <black_to_red_frame+0xfe1140cc>
  1140f4:	008004b4 	movhi	r2,18
  1140f8:	10a90c04 	addi	r2,r2,-23504
  1140fc:	003ff806 	br	1140e0 <black_to_red_frame+0xfe1140e0>
  114100:	00a1c83a 	sub	r16,zero,r2
  114104:	003ff106 	br	1140cc <black_to_red_frame+0xfe1140cc>

00114108 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  114108:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  11410c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  114110:	dfc00115 	stw	ra,4(sp)
  114114:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  114118:	011440c0 	call	11440c <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  11411c:	011442c0 	call	11442c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  114120:	01000474 	movhi	r4,17
  114124:	211aef04 	addi	r4,r4,27580
  114128:	200b883a 	mov	r5,r4
  11412c:	200d883a 	mov	r6,r4
  114130:	01157880 	call	115788 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  114134:	01154900 	call	115490 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  114138:	01000474 	movhi	r4,17
  11413c:	21153d04 	addi	r4,r4,21748
  114140:	0115c280 	call	115c28 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  114144:	d1272817 	ldw	r4,-25440(gp)
  114148:	d1672717 	ldw	r5,-25444(gp)
  11414c:	d1a72617 	ldw	r6,-25448(gp)
  114150:	01024c80 	call	1024c8 <main>
  close(STDOUT_FILENO);
  114154:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  114158:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
  11415c:	0113d340 	call	113d34 <close>
  exit (result);
  114160:	8009883a 	mov	r4,r16
  114164:	0115c3c0 	call	115c3c <exit>

00114168 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  114168:	f800283a 	ret

0011416c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  11416c:	f800283a 	ret

00114170 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  114170:	defffd04 	addi	sp,sp,-12
  114174:	dfc00215 	stw	ra,8(sp)
  114178:	dc000115 	stw	r16,4(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  11417c:	20001716 	blt	r4,zero,1141dc <read+0x6c>
  114180:	2821883a 	mov	r16,r5
  114184:	01400304 	movi	r5,12
  114188:	d9800015 	stw	r6,0(sp)
  11418c:	0103f1c0 	call	103f1c <__mulsi3>
  114190:	01000474 	movhi	r4,17
  114194:	211d2d04 	addi	r4,r4,29876
  114198:	2089883a 	add	r4,r4,r2
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  11419c:	20c00217 	ldw	r3,8(r4)
  1141a0:	00800044 	movi	r2,1
  1141a4:	d9800017 	ldw	r6,0(sp)
  1141a8:	18c000cc 	andi	r3,r3,3
  1141ac:	18801726 	beq	r3,r2,11420c <read+0x9c>
        (fd->dev->read))
  1141b0:	20800017 	ldw	r2,0(r4)
  1141b4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  1141b8:	10001426 	beq	r2,zero,11420c <read+0x9c>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  1141bc:	800b883a 	mov	r5,r16
  1141c0:	103ee83a 	callr	r2
  1141c4:	1021883a 	mov	r16,r2
  1141c8:	80001916 	blt	r16,zero,114230 <read+0xc0>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  1141cc:	dfc00217 	ldw	ra,8(sp)
  1141d0:	dc000117 	ldw	r16,4(sp)
  1141d4:	dec00304 	addi	sp,sp,12
  1141d8:	f800283a 	ret
  1141dc:	008004b4 	movhi	r2,18
  1141e0:	10a1fc04 	addi	r2,r2,-30736
  1141e4:	10800017 	ldw	r2,0(r2)
  1141e8:	10000226 	beq	r2,zero,1141f4 <read+0x84>
  1141ec:	103ee83a 	callr	r2
  1141f0:	00000206 	br	1141fc <read+0x8c>
  1141f4:	008004b4 	movhi	r2,18
  1141f8:	10a90c04 	addi	r2,r2,-23504
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  1141fc:	00c01444 	movi	r3,81
  114200:	10c00015 	stw	r3,0(r2)
  }
  return -1;
  114204:	00bfffc4 	movi	r2,-1
  114208:	003ff006 	br	1141cc <black_to_red_frame+0xfe1141cc>
  11420c:	008004b4 	movhi	r2,18
  114210:	10a1fc04 	addi	r2,r2,-30736
  114214:	10800017 	ldw	r2,0(r2)
  114218:	10000e26 	beq	r2,zero,114254 <read+0xe4>
  11421c:	103ee83a 	callr	r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
  114220:	00c00344 	movi	r3,13
  114224:	10c00015 	stw	r3,0(r2)
    }
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
  114228:	00bfffc4 	movi	r2,-1
  11422c:	003fe706 	br	1141cc <black_to_red_frame+0xfe1141cc>
  114230:	008004b4 	movhi	r2,18
  114234:	10a1fc04 	addi	r2,r2,-30736
  114238:	10800017 	ldw	r2,0(r2)
  11423c:	10000826 	beq	r2,zero,114260 <read+0xf0>
  114240:	103ee83a 	callr	r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
  114244:	0421c83a 	sub	r16,zero,r16
  114248:	14000015 	stw	r16,0(r2)
          return -1;
  11424c:	00bfffc4 	movi	r2,-1
  114250:	003fde06 	br	1141cc <black_to_red_frame+0xfe1141cc>
  114254:	008004b4 	movhi	r2,18
  114258:	10a90c04 	addi	r2,r2,-23504
  11425c:	003ff006 	br	114220 <black_to_red_frame+0xfe114220>
  114260:	008004b4 	movhi	r2,18
  114264:	10a90c04 	addi	r2,r2,-23504
  114268:	003ff606 	br	114244 <black_to_red_frame+0xfe114244>

0011426c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  11426c:	defffd04 	addi	sp,sp,-12
  114270:	dc000015 	stw	r16,0(sp)
  114274:	dfc00215 	stw	ra,8(sp)
  114278:	dc400115 	stw	r17,4(sp)
  if (fd > 2)
  11427c:	00800084 	movi	r2,2
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  114280:	2021883a 	mov	r16,r4
  if (fd > 2)
  114284:	11000b0e 	bge	r2,r4,1142b4 <alt_release_fd+0x48>
  {
    alt_fd_list[fd].fd_flags = 0;
  114288:	01400304 	movi	r5,12
  11428c:	0103f1c0 	call	103f1c <__mulsi3>
  114290:	04400474 	movhi	r17,17
  114294:	8c5d2d04 	addi	r17,r17,29876
  114298:	8885883a 	add	r2,r17,r2
    alt_fd_list[fd].dev      = 0;
  11429c:	8009883a 	mov	r4,r16
  1142a0:	01400304 	movi	r5,12

void alt_release_fd (int fd)
{
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
  1142a4:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
  1142a8:	0103f1c0 	call	103f1c <__mulsi3>
  1142ac:	8885883a 	add	r2,r17,r2
  1142b0:	10000015 	stw	zero,0(r2)
  }
}
  1142b4:	dfc00217 	ldw	ra,8(sp)
  1142b8:	dc400117 	ldw	r17,4(sp)
  1142bc:	dc000017 	ldw	r16,0(sp)
  1142c0:	dec00304 	addi	sp,sp,12
  1142c4:	f800283a 	ret

001142c8 <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  1142c8:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1142cc:	00bfff84 	movi	r2,-2
  1142d0:	1884703a 	and	r2,r3,r2
  1142d4:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  1142d8:	d0a01317 	ldw	r2,-32692(gp)
  1142dc:	017fff04 	movi	r5,-4
  1142e0:	108000c4 	addi	r2,r2,3
  1142e4:	1144703a 	and	r2,r2,r5
  1142e8:	d0a01315 	stw	r2,-32692(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  1142ec:	1109883a 	add	r4,r2,r4
  1142f0:	014000f4 	movhi	r5,3
  1142f4:	29786a04 	addi	r5,r5,-7768
  1142f8:	29000336 	bltu	r5,r4,114308 <sbrk+0x40>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
  1142fc:	d1201315 	stw	r4,-32692(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  114300:	1801703a 	wrctl	status,r3
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
  114304:	f800283a 	ret
  114308:	1801703a 	wrctl	status,r3
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  11430c:	00bfffc4 	movi	r2,-1
  114310:	f800283a 	ret

00114314 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  114314:	defffd04 	addi	sp,sp,-12
  114318:	dfc00215 	stw	ra,8(sp)
  11431c:	dc000115 	stw	r16,4(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  114320:	20001616 	blt	r4,zero,11437c <write+0x68>
  114324:	2821883a 	mov	r16,r5
  114328:	01400304 	movi	r5,12
  11432c:	d9800015 	stw	r6,0(sp)
  114330:	0103f1c0 	call	103f1c <__mulsi3>
  114334:	01000474 	movhi	r4,17
  114338:	211d2d04 	addi	r4,r4,29876
  11433c:	2089883a 	add	r4,r4,r2
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  114340:	20800217 	ldw	r2,8(r4)
  114344:	d9800017 	ldw	r6,0(sp)
  114348:	108000cc 	andi	r2,r2,3
  11434c:	10001726 	beq	r2,zero,1143ac <write+0x98>
  114350:	20800017 	ldw	r2,0(r4)
  114354:	10800617 	ldw	r2,24(r2)
  114358:	10001426 	beq	r2,zero,1143ac <write+0x98>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  11435c:	800b883a 	mov	r5,r16
  114360:	103ee83a 	callr	r2
  114364:	1021883a 	mov	r16,r2
  114368:	80001c16 	blt	r16,zero,1143dc <write+0xc8>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
  11436c:	dfc00217 	ldw	ra,8(sp)
  114370:	dc000117 	ldw	r16,4(sp)
  114374:	dec00304 	addi	sp,sp,12
  114378:	f800283a 	ret
  11437c:	008004b4 	movhi	r2,18
  114380:	10a1fc04 	addi	r2,r2,-30736
  114384:	10800017 	ldw	r2,0(r2)
  114388:	10000226 	beq	r2,zero,114394 <write+0x80>
  11438c:	103ee83a 	callr	r2
  114390:	00000206 	br	11439c <write+0x88>
  114394:	008004b4 	movhi	r2,18
  114398:	10a90c04 	addi	r2,r2,-23504
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  11439c:	00c01444 	movi	r3,81
  1143a0:	10c00015 	stw	r3,0(r2)
  }
  return -1;
  1143a4:	00bfffc4 	movi	r2,-1
  1143a8:	003ff006 	br	11436c <black_to_red_frame+0xfe11436c>
  1143ac:	008004b4 	movhi	r2,18
  1143b0:	10a1fc04 	addi	r2,r2,-30736
  1143b4:	10800017 	ldw	r2,0(r2)
  1143b8:	10000526 	beq	r2,zero,1143d0 <write+0xbc>
  1143bc:	103ee83a 	callr	r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
  1143c0:	00c00344 	movi	r3,13
  1143c4:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
  1143c8:	00bfffc4 	movi	r2,-1
  1143cc:	003fe706 	br	11436c <black_to_red_frame+0xfe11436c>
  1143d0:	008004b4 	movhi	r2,18
  1143d4:	10a90c04 	addi	r2,r2,-23504
  1143d8:	003ff906 	br	1143c0 <black_to_red_frame+0xfe1143c0>
  1143dc:	008004b4 	movhi	r2,18
  1143e0:	10a1fc04 	addi	r2,r2,-30736
  1143e4:	10800017 	ldw	r2,0(r2)
  1143e8:	10000526 	beq	r2,zero,114400 <write+0xec>
  1143ec:	103ee83a 	callr	r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
  1143f0:	0421c83a 	sub	r16,zero,r16
  1143f4:	14000015 	stw	r16,0(r2)
        return -1;
  1143f8:	00bfffc4 	movi	r2,-1
  1143fc:	003fdb06 	br	11436c <black_to_red_frame+0xfe11436c>
  114400:	008004b4 	movhi	r2,18
  114404:	10a90c04 	addi	r2,r2,-23504
  114408:	003ff906 	br	1143f0 <black_to_red_frame+0xfe1143f0>

0011440c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  11440c:	deffff04 	addi	sp,sp,-4
  114410:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
  114414:	0115aa80 	call	115aa8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  114418:	00800044 	movi	r2,1
  11441c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  114420:	dfc00017 	ldw	ra,0(sp)
  114424:	dec00104 	addi	sp,sp,4
  114428:	f800283a 	ret

0011442c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  11442c:	defffd04 	addi	sp,sp,-12
    ALTERA_AVALON_TIMER_INIT ( SYSTEM_TIMER, system_timer);
  114430:	01c0fa04 	movi	r7,1000
  114434:	010000f4 	movhi	r4,3
  114438:	21061004 	addi	r4,r4,6208
  11443c:	000b883a 	mov	r5,zero
  114440:	01800144 	movi	r6,5
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  114444:	dfc00215 	stw	ra,8(sp)
  114448:	dc400115 	stw	r17,4(sp)
  11444c:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( SYSTEM_TIMER, system_timer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  114450:	04400474 	movhi	r17,17
  114454:	8c5ddc04 	addi	r17,r17,30576
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( SYSTEM_TIMER, system_timer);
  114458:	011513c0 	call	11513c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
  11445c:	000d883a 	mov	r6,zero
  114460:	8809883a 	mov	r4,r17
  114464:	000b883a 	mov	r5,zero
  114468:	01146940 	call	114694 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  11446c:	040004b4 	movhi	r16,18
  114470:	8421f804 	addi	r16,r16,-30752
  114474:	893ff604 	addi	r4,r17,-40
  114478:	800b883a 	mov	r5,r16
  11447c:	01154180 	call	115418 <alt_dev_llist_insert>
    ALTERA_AVALON_SGDMA_INIT ( BLACK_RX, black_rx);
  114480:	01000474 	movhi	r4,17
  114484:	211dc604 	addi	r4,r4,30488
  114488:	000b883a 	mov	r5,zero
  11448c:	01800084 	movi	r6,2
  114490:	011507c0 	call	11507c <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( BLACK_TX, black_tx);
  114494:	01000474 	movhi	r4,17
  114498:	211dba04 	addi	r4,r4,30440
  11449c:	000b883a 	mov	r5,zero
  1144a0:	01800104 	movi	r6,4
  1144a4:	011507c0 	call	11507c <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( RED_RX, red_rx);
  1144a8:	01000474 	movhi	r4,17
  1144ac:	211dae04 	addi	r4,r4,30392
  1144b0:	000b883a 	mov	r5,zero
  1144b4:	01800044 	movi	r6,1
  1144b8:	011507c0 	call	11507c <alt_avalon_sgdma_init>
    ALTERA_AVALON_SGDMA_INIT ( RED_TX, red_tx);
  1144bc:	000b883a 	mov	r5,zero
  1144c0:	018000c4 	movi	r6,3
  1144c4:	01000474 	movhi	r4,17
  1144c8:	211da204 	addi	r4,r4,30344
  1144cc:	011507c0 	call	11507c <alt_avalon_sgdma_init>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSTEM_ID, system_id);
    ALTERA_ETH_TSE_INIT ( BLACK_INTERFACE, black_interface);
    ALTERA_ETH_TSE_INIT ( RED_INTERFACE, red_interface);
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( LCD, lcd);
  1144d0:	04400474 	movhi	r17,17
  1144d4:	8c5d9704 	addi	r17,r17,30300
  1144d8:	8809883a 	mov	r4,r17
  1144dc:	01151ac0 	call	1151ac <alt_up_character_lcd_init>
  1144e0:	8809883a 	mov	r4,r17
  1144e4:	800b883a 	mov	r5,r16
}
  1144e8:	dfc00217 	ldw	ra,8(sp)
  1144ec:	dc400117 	ldw	r17,4(sp)
  1144f0:	dc000017 	ldw	r16,0(sp)
  1144f4:	dec00304 	addi	sp,sp,12
  1144f8:	01154181 	jmpi	115418 <alt_dev_llist_insert>

001144fc <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  1144fc:	20800017 	ldw	r2,0(r4)
  114500:	21c00217 	ldw	r7,8(r4)
  114504:	11000a04 	addi	r4,r2,40
  114508:	01147bc1 	jmpi	1147bc <altera_avalon_jtag_uart_read>

0011450c <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  11450c:	20800017 	ldw	r2,0(r4)
  114510:	21c00217 	ldw	r7,8(r4)
  114514:	11000a04 	addi	r4,r2,40
  114518:	01148f81 	jmpi	1148f8 <altera_avalon_jtag_uart_write>

0011451c <altera_avalon_jtag_uart_close_fd>:
int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  11451c:	20800017 	ldw	r2,0(r4)
  114520:	21400217 	ldw	r5,8(r4)
  114524:	11000a04 	addi	r4,r2,40
  114528:	01147141 	jmpi	114714 <altera_avalon_jtag_uart_close>

0011452c <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  11452c:	21000017 	ldw	r4,0(r4)
  114530:	21000a04 	addi	r4,r4,40
  114534:	01147481 	jmpi	114748 <altera_avalon_jtag_uart_ioctl>

00114538 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  114538:	20800017 	ldw	r2,0(r4)
  11453c:	10c00137 	ldwio	r3,4(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  114540:	18c1000c 	andi	r3,r3,1024
  114544:	18000a1e 	bne	r3,zero,114570 <altera_avalon_jtag_uart_timeout+0x38>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  114548:	20800917 	ldw	r2,36(r4)
  11454c:	00e00034 	movhi	r3,32768
  114550:	18ffff04 	addi	r3,r3,-4
  114554:	18800236 	bltu	r3,r2,114560 <altera_avalon_jtag_uart_timeout+0x28>
    sp->host_inactive++;
  114558:	10800044 	addi	r2,r2,1
  11455c:	20800915 	stw	r2,36(r4)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  114560:	008004b4 	movhi	r2,18
  114564:	10a91504 	addi	r2,r2,-23468
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  114568:	10800017 	ldw	r2,0(r2)
  11456c:	f800283a 	ret

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  114570:	20c00817 	ldw	r3,32(r4)
  114574:	18c10014 	ori	r3,r3,1024
  114578:	10c00135 	stwio	r3,4(r2)
  11457c:	008004b4 	movhi	r2,18
  114580:	10a91504 	addi	r2,r2,-23468
    sp->host_inactive = 0;
  114584:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  114588:	10800017 	ldw	r2,0(r2)
  11458c:	f800283a 	ret

00114590 <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
  114590:	21c00017 	ldw	r7,0(r4)
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  114594:	02bfff84 	movi	r10,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  114598:	02ffff44 	movi	r11,-3
  11459c:	3a400104 	addi	r9,r7,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  1145a0:	4a000037 	ldwio	r8,0(r9)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  1145a4:	4080c00c 	andi	r2,r8,768
  1145a8:	10003326 	beq	r2,zero,114678 <altera_avalon_jtag_uart_irq+0xe8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  1145ac:	4080400c 	andi	r2,r8,256
  1145b0:	10001626 	beq	r2,zero,11460c <altera_avalon_jtag_uart_irq+0x7c>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  1145b4:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
  1145b8:	21800b17 	ldw	r6,44(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  1145bc:	10800044 	addi	r2,r2,1
  1145c0:	1081ffcc 	andi	r2,r2,2047
        if (next == sp->rx_out)
  1145c4:	30800c1e 	bne	r6,r2,1145f8 <altera_avalon_jtag_uart_irq+0x68>
  1145c8:	00002c06 	br	11467c <altera_avalon_jtag_uart_irq+0xec>
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  1145cc:	21400a17 	ldw	r5,40(r4)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  1145d0:	20c00a17 	ldw	r3,40(r4)
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  1145d4:	214b883a 	add	r5,r4,r5
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  1145d8:	18c00044 	addi	r3,r3,1
  1145dc:	18c1ffcc 	andi	r3,r3,2047
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  1145e0:	28800e05 	stb	r2,56(r5)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  1145e4:	20c00a15 	stw	r3,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  1145e8:	20c00a17 	ldw	r3,40(r4)
  1145ec:	18c00044 	addi	r3,r3,1
  1145f0:	18c1ffcc 	andi	r3,r3,2047
        if (next == sp->rx_out)
  1145f4:	30c00326 	beq	r6,r3,114604 <altera_avalon_jtag_uart_irq+0x74>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  1145f8:	38800037 	ldwio	r2,0(r7)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  1145fc:	10e0000c 	andi	r3,r2,32768
  114600:	183ff21e 	bne	r3,zero,1145cc <black_to_red_frame+0xfe1145cc>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  114604:	10bfffec 	andhi	r2,r2,65535
  114608:	10001c1e 	bne	r2,zero,11467c <altera_avalon_jtag_uart_irq+0xec>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  11460c:	4080800c 	andi	r2,r8,512
  114610:	103fe326 	beq	r2,zero,1145a0 <black_to_red_frame+0xfe1145a0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  114614:	4010d43a 	srli	r8,r8,16

      while (space > 0 && sp->tx_out != sp->tx_in)
  114618:	40000b1e 	bne	r8,zero,114648 <altera_avalon_jtag_uart_irq+0xb8>
  11461c:	003fe006 	br	1145a0 <black_to_red_frame+0xfe1145a0>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  114620:	20800d17 	ldw	r2,52(r4)
  114624:	2085883a 	add	r2,r4,r2
  114628:	10820e07 	ldb	r2,2104(r2)
  11462c:	38800035 	stwio	r2,0(r7)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  114630:	20800d17 	ldw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  114634:	423fffc4 	addi	r8,r8,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  114638:	10800044 	addi	r2,r2,1
  11463c:	1081ffcc 	andi	r2,r2,2047
  114640:	20800d15 	stw	r2,52(r4)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  114644:	403fd626 	beq	r8,zero,1145a0 <black_to_red_frame+0xfe1145a0>
  114648:	20c00d17 	ldw	r3,52(r4)
  11464c:	20800c17 	ldw	r2,48(r4)
  114650:	18bff31e 	bne	r3,r2,114620 <black_to_red_frame+0xfe114620>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  114654:	20800817 	ldw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  114658:	20c00017 	ldw	r3,0(r4)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  11465c:	12c4703a 	and	r2,r2,r11
  114660:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  114664:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  114668:	48800037 	ldwio	r2,0(r9)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  11466c:	4a000037 	ldwio	r8,0(r9)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  114670:	4080c00c 	andi	r2,r8,768
  114674:	103fcd1e 	bne	r2,zero,1145ac <black_to_red_frame+0xfe1145ac>
  114678:	f800283a 	ret
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  11467c:	20800817 	ldw	r2,32(r4)
  114680:	1284703a 	and	r2,r2,r10
  114684:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  114688:	48800035 	stwio	r2,0(r9)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  11468c:	48800037 	ldwio	r2,0(r9)
  114690:	003fde06 	br	11460c <black_to_red_frame+0xfe11460c>

00114694 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  114694:	defffd04 	addi	sp,sp,-12
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  114698:	20c00017 	ldw	r3,0(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  11469c:	dc000115 	stw	r16,4(sp)
  1146a0:	dfc00215 	stw	ra,8(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  1146a4:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  1146a8:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  1146ac:	20800815 	stw	r2,32(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  1146b0:	2809883a 	mov	r4,r5
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  1146b4:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  1146b8:	300b883a 	mov	r5,r6
  1146bc:	800f883a 	mov	r7,r16
  1146c0:	01800474 	movhi	r6,17
  1146c4:	31916404 	addi	r6,r6,17808
  1146c8:	d8000015 	stw	zero,0(sp)
  1146cc:	01155ec0 	call	1155ec <alt_ic_isr_register>
  1146d0:	008004b4 	movhi	r2,18
  1146d4:	10a91504 	addi	r2,r2,-23468
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  1146d8:	11400017 	ldw	r5,0(r2)
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  1146dc:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  1146e0:	81000204 	addi	r4,r16,8
  1146e4:	01800474 	movhi	r6,17
  1146e8:	31914e04 	addi	r6,r6,17720
  1146ec:	800f883a 	mov	r7,r16
  1146f0:	011537c0 	call	11537c <alt_alarm_start>
  1146f4:	1000030e 	bge	r2,zero,114704 <altera_avalon_jtag_uart_init+0x70>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  1146f8:	00a00034 	movhi	r2,32768
  1146fc:	10bfffc4 	addi	r2,r2,-1
  114700:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  114704:	dfc00217 	ldw	ra,8(sp)
  114708:	dc000117 	ldw	r16,4(sp)
  11470c:	dec00304 	addi	sp,sp,12
  114710:	f800283a 	ret

00114714 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  114714:	21800c17 	ldw	r6,48(r4)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    if (flags & O_NONBLOCK) {
  114718:	2950000c 	andi	r5,r5,16384
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  11471c:	00000406 	br	114730 <altera_avalon_jtag_uart_close+0x1c>
  114720:	20c00917 	ldw	r3,36(r4)
  114724:	20800117 	ldw	r2,4(r4)
  114728:	1880032e 	bgeu	r3,r2,114738 <altera_avalon_jtag_uart_close+0x24>
    if (flags & O_NONBLOCK) {
  11472c:	2800041e 	bne	r5,zero,114740 <altera_avalon_jtag_uart_close+0x2c>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  114730:	20800d17 	ldw	r2,52(r4)
  114734:	11bffa1e 	bne	r2,r6,114720 <black_to_red_frame+0xfe114720>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  114738:	0005883a 	mov	r2,zero
}
  11473c:	f800283a 	ret
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
  114740:	00bffd44 	movi	r2,-11
  114744:	f800283a 	ret

00114748 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
  114748:	009a8044 	movi	r2,27137
  11474c:	28800d26 	beq	r5,r2,114784 <altera_avalon_jtag_uart_ioctl+0x3c>
  114750:	009a8084 	movi	r2,27138
  114754:	2880091e 	bne	r5,r2,11477c <altera_avalon_jtag_uart_ioctl+0x34>
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  114758:	20c00117 	ldw	r3,4(r4)
  11475c:	00a00034 	movhi	r2,32768
  114760:	10bfffc4 	addi	r2,r2,-1
  114764:	18800526 	beq	r3,r2,11477c <altera_avalon_jtag_uart_ioctl+0x34>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  114768:	21000917 	ldw	r4,36(r4)
      rc = 0;
  11476c:	0005883a 	mov	r2,zero

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  114770:	20c7803a 	cmpltu	r3,r4,r3
  114774:	30c00015 	stw	r3,0(r6)
  114778:	f800283a 	ret

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;
  11477c:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
  114780:	f800283a 	ret

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  114784:	20c00117 	ldw	r3,4(r4)
  114788:	00a00034 	movhi	r2,32768
  11478c:	10bfffc4 	addi	r2,r2,-1
  114790:	18bffa26 	beq	r3,r2,11477c <black_to_red_frame+0xfe11477c>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  114794:	30800017 	ldw	r2,0(r6)
  114798:	01600034 	movhi	r5,32768
  11479c:	297fff04 	addi	r5,r5,-4
  1147a0:	10ffff84 	addi	r3,r2,-2
  1147a4:	28c0022e 	bgeu	r5,r3,1147b0 <altera_avalon_jtag_uart_ioctl+0x68>
  1147a8:	00a00034 	movhi	r2,32768
  1147ac:	10bfff84 	addi	r2,r2,-2
  1147b0:	20800115 	stw	r2,4(r4)
      rc = 0;
  1147b4:	0005883a 	mov	r2,zero
  1147b8:	f800283a 	ret

001147bc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  1147bc:	defff604 	addi	sp,sp,-40
  1147c0:	dcc00315 	stw	r19,12(sp)
  1147c4:	dfc00915 	stw	ra,36(sp)
  1147c8:	df000815 	stw	fp,32(sp)
  1147cc:	ddc00715 	stw	r23,28(sp)
  1147d0:	dd800615 	stw	r22,24(sp)
  1147d4:	dd400515 	stw	r21,20(sp)
  1147d8:	dd000415 	stw	r20,16(sp)
  1147dc:	dc800215 	stw	r18,8(sp)
  1147e0:	dc400115 	stw	r17,4(sp)
  1147e4:	dc000015 	stw	r16,0(sp)
  1147e8:	3027883a 	mov	r19,r6
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  1147ec:	0180270e 	bge	zero,r6,11488c <altera_avalon_jtag_uart_read+0xd0>
  1147f0:	2025883a 	mov	r18,r4
  1147f4:	282d883a 	mov	r22,r5
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  1147f8:	05420004 	movi	r21,2048
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  1147fc:	3dd0000c 	andi	r23,r7,16384
  114800:	94000b17 	ldw	r16,44(r18)
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  114804:	b039883a 	mov	fp,r22
  114808:	00000a06 	br	114834 <altera_avalon_jtag_uart_read+0x78>
  11480c:	9880012e 	bgeu	r19,r2,114814 <altera_avalon_jtag_uart_read+0x58>
  114810:	9823883a 	mov	r17,r19

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  114814:	8c21883a 	add	r16,r17,r16
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  114818:	880d883a 	mov	r6,r17
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  11481c:	8401ffcc 	andi	r16,r16,2047
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  114820:	010b95c0 	call	10b95c <memcpy>
      ptr   += n;
      space -= n;
  114824:	9c67c83a 	sub	r19,r19,r17

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  114828:	94000b15 	stw	r16,44(r18)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
  11482c:	e479883a 	add	fp,fp,r17
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
  114830:	04c0090e 	bge	zero,r19,114858 <altera_avalon_jtag_uart_read+0x9c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  114834:	95000a17 	ldw	r20,40(r18)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  114838:	ac05c83a 	sub	r2,r21,r16
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
  11483c:	a4000136 	bltu	r20,r16,114844 <altera_avalon_jtag_uart_read+0x88>
        n = in - out;
  114840:	a405c83a 	sub	r2,r20,r16
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
  114844:	81400e04 	addi	r5,r16,56
  114848:	e009883a 	mov	r4,fp
  11484c:	914b883a 	add	r5,r18,r5
  114850:	1023883a 	mov	r17,r2
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
  114854:	103fed1e 	bne	r2,zero,11480c <black_to_red_frame+0xfe11480c>
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  114858:	e5801b1e 	bne	fp,r22,1148c8 <altera_avalon_jtag_uart_read+0x10c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  11485c:	b8000426 	beq	r23,zero,114870 <altera_avalon_jtag_uart_read+0xb4>
  114860:	00000c06 	br	114894 <altera_avalon_jtag_uart_read+0xd8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  114864:	90c00917 	ldw	r3,36(r18)
  114868:	90800117 	ldw	r2,4(r18)
  11486c:	1880022e 	bgeu	r3,r2,114878 <altera_avalon_jtag_uart_read+0xbc>
  114870:	90800a17 	ldw	r2,40(r18)
  114874:	a0bffb26 	beq	r20,r2,114864 <black_to_red_frame+0xfe114864>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  114878:	90800a17 	ldw	r2,40(r18)
  11487c:	a0800126 	beq	r20,r2,114884 <altera_avalon_jtag_uart_read+0xc8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  114880:	04ffdf16 	blt	zero,r19,114800 <black_to_red_frame+0xfe114800>
  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
  114884:	00bffec4 	movi	r2,-5
  114888:	00000306 	br	114898 <altera_avalon_jtag_uart_read+0xdc>
  11488c:	39d0000c 	andi	r7,r7,16384
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
  114890:	383ffc26 	beq	r7,zero,114884 <black_to_red_frame+0xfe114884>
    return -EWOULDBLOCK;
  114894:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
  114898:	dfc00917 	ldw	ra,36(sp)
  11489c:	df000817 	ldw	fp,32(sp)
  1148a0:	ddc00717 	ldw	r23,28(sp)
  1148a4:	dd800617 	ldw	r22,24(sp)
  1148a8:	dd400517 	ldw	r21,20(sp)
  1148ac:	dd000417 	ldw	r20,16(sp)
  1148b0:	dcc00317 	ldw	r19,12(sp)
  1148b4:	dc800217 	ldw	r18,8(sp)
  1148b8:	dc400117 	ldw	r17,4(sp)
  1148bc:	dc000017 	ldw	r16,0(sp)
  1148c0:	dec00a04 	addi	sp,sp,40
  1148c4:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  1148c8:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1148cc:	00ffff84 	movi	r3,-2
  1148d0:	10c6703a 	and	r3,r2,r3
  1148d4:	1801703a 	wrctl	status,r3

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  1148d8:	90c00817 	ldw	r3,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  1148dc:	91000017 	ldw	r4,0(r18)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  1148e0:	18c00054 	ori	r3,r3,1
  1148e4:	90c00815 	stw	r3,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  1148e8:	20c00135 	stwio	r3,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1148ec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  1148f0:	e585c83a 	sub	r2,fp,r22
  1148f4:	003fe806 	br	114898 <black_to_red_frame+0xfe114898>

001148f8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  1148f8:	defff404 	addi	sp,sp,-48
  1148fc:	dd400715 	stw	r21,28(sp)
  114900:	dc000215 	stw	r16,8(sp)
  114904:	dfc00b15 	stw	ra,44(sp)
  114908:	df000a15 	stw	fp,40(sp)
  11490c:	ddc00915 	stw	r23,36(sp)
  114910:	dd800815 	stw	r22,32(sp)
  114914:	dd000615 	stw	r20,24(sp)
  114918:	dcc00515 	stw	r19,20(sp)
  11491c:	dc800415 	stw	r18,16(sp)
  114920:	dc400315 	stw	r17,12(sp)
  114924:	d9400015 	stw	r5,0(sp)
  114928:	d9c00115 	stw	r7,4(sp)
  11492c:	302b883a 	mov	r21,r6
  114930:	2021883a 	mov	r16,r4
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  114934:	01804e0e 	bge	zero,r6,114a70 <altera_avalon_jtag_uart_write+0x178>
  114938:	282d883a 	mov	r22,r5
      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  11493c:	0501ffc4 	movi	r20,2047
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  114940:	04c20004 	movi	r19,2048
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  114944:	04bfff84 	movi	r18,-2
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
  114948:	3c50000c 	andi	r17,r7,16384
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  11494c:	85c00c17 	ldw	r23,48(r16)
      out = sp->tx_out;
  114950:	80c00d17 	ldw	r3,52(r16)

      if (in < out)
  114954:	b8c0412e 	bgeu	r23,r3,114a5c <altera_avalon_jtag_uart_write+0x164>
        n = out - 1 - in;
  114958:	1f3fffc4 	addi	fp,r3,-1
  11495c:	e5f9c83a 	sub	fp,fp,r23
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
  114960:	e0002626 	beq	fp,zero,1149fc <altera_avalon_jtag_uart_write+0x104>
  114964:	af00012e 	bgeu	r21,fp,11496c <altera_avalon_jtag_uart_write+0x74>
  114968:	a839883a 	mov	fp,r21
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
  11496c:	b9020e04 	addi	r4,r23,2104
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  114970:	e5ef883a 	add	r23,fp,r23
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
  114974:	b00b883a 	mov	r5,r22
  114978:	8109883a 	add	r4,r16,r4
  11497c:	e00d883a 	mov	r6,fp
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  114980:	bdc1ffcc 	andi	r23,r23,2047
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
  114984:	010b95c0 	call	10b95c <memcpy>
      ptr   += n;
      count -= n;
  114988:	af2bc83a 	sub	r21,r21,fp

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  11498c:	85c00c15 	stw	r23,48(r16)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
  114990:	b72d883a 	add	r22,r22,fp
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  114994:	057fed16 	blt	zero,r21,11494c <black_to_red_frame+0xfe11494c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  114998:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11499c:	00ffff84 	movi	r3,-2
  1149a0:	10c6703a 	and	r3,r2,r3
  1149a4:	1801703a 	wrctl	status,r3
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  1149a8:	80c00817 	ldw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  1149ac:	81000017 	ldw	r4,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  1149b0:	18c00094 	ori	r3,r3,2
  1149b4:	80c00815 	stw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  1149b8:	20c00135 	stwio	r3,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1149bc:	1001703a 	wrctl	status,r2
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  1149c0:	d8c00017 	ldw	r3,0(sp)
  1149c4:	b0c02026 	beq	r22,r3,114a48 <altera_avalon_jtag_uart_write+0x150>
    return ptr - start;
  1149c8:	b0c5c83a 	sub	r2,r22,r3
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
  1149cc:	dfc00b17 	ldw	ra,44(sp)
  1149d0:	df000a17 	ldw	fp,40(sp)
  1149d4:	ddc00917 	ldw	r23,36(sp)
  1149d8:	dd800817 	ldw	r22,32(sp)
  1149dc:	dd400717 	ldw	r21,28(sp)
  1149e0:	dd000617 	ldw	r20,24(sp)
  1149e4:	dcc00517 	ldw	r19,20(sp)
  1149e8:	dc800417 	ldw	r18,16(sp)
  1149ec:	dc400317 	ldw	r17,12(sp)
  1149f0:	dc000217 	ldw	r16,8(sp)
  1149f4:	dec00c04 	addi	sp,sp,48
  1149f8:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  1149fc:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  114a00:	1488703a 	and	r4,r2,r18
  114a04:	2001703a 	wrctl	status,r4
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  114a08:	81000817 	ldw	r4,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  114a0c:	81400017 	ldw	r5,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  114a10:	21000094 	ori	r4,r4,2
  114a14:	81000815 	stw	r4,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  114a18:	29000135 	stwio	r4,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  114a1c:	1001703a 	wrctl	status,r2
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
  114a20:	883fe71e 	bne	r17,zero,1149c0 <black_to_red_frame+0xfe1149c0>
  114a24:	81000917 	ldw	r4,36(r16)
  114a28:	00000206 	br	114a34 <altera_avalon_jtag_uart_write+0x13c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  114a2c:	80800117 	ldw	r2,4(r16)
  114a30:	2080022e 	bgeu	r4,r2,114a3c <altera_avalon_jtag_uart_write+0x144>
  114a34:	80800d17 	ldw	r2,52(r16)
  114a38:	18bffc26 	beq	r3,r2,114a2c <black_to_red_frame+0xfe114a2c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  114a3c:	203fe01e 	bne	r4,zero,1149c0 <black_to_red_frame+0xfe1149c0>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  114a40:	057fc216 	blt	zero,r21,11494c <black_to_red_frame+0xfe11494c>
  114a44:	003fd406 	br	114998 <black_to_red_frame+0xfe114998>
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
  114a48:	d8c00117 	ldw	r3,4(sp)
  114a4c:	1d90000c 	andi	r22,r3,16384
  114a50:	b0000926 	beq	r22,zero,114a78 <altera_avalon_jtag_uart_write+0x180>
    return -EWOULDBLOCK;
  114a54:	00bffd44 	movi	r2,-11
  114a58:	003fdc06 	br	1149cc <black_to_red_frame+0xfe1149cc>
      in  = sp->tx_in;
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
  114a5c:	18000226 	beq	r3,zero,114a68 <altera_avalon_jtag_uart_write+0x170>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  114a60:	9df9c83a 	sub	fp,r19,r23
  114a64:	003fbe06 	br	114960 <black_to_red_frame+0xfe114960>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  114a68:	a5f9c83a 	sub	fp,r20,r23
  114a6c:	003fbc06 	br	114960 <black_to_red_frame+0xfe114960>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  114a70:	dd800017 	ldw	r22,0(sp)
  114a74:	003fc806 	br	114998 <black_to_red_frame+0xfe114998>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  114a78:	00bffec4 	movi	r2,-5
  114a7c:	003fd306 	br	1149cc <black_to_red_frame+0xfe1149cc>

00114a80 <alt_avalon_sgdma_irq>:
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
  114a80:	20800317 	ldw	r2,12(r4)
  114a84:	10800404 	addi	r2,r2,16
  114a88:	10c00037 	ldwio	r3,0(r2)
  114a8c:	18e00034 	orhi	r3,r3,32768
  114a90:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  114a94:	20800317 	ldw	r2,12(r4)
  114a98:	10800437 	ldwio	r2,16(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
  114a9c:	20800917 	ldw	r2,36(r4)
  114aa0:	10000d26 	beq	r2,zero,114ad8 <alt_avalon_sgdma_irq+0x58>
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
  114aa4:	defffe04 	addi	sp,sp,-8
  114aa8:	dfc00115 	stw	ra,4(sp)
  114aac:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  114ab0:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  114ab4:	00ffff84 	movi	r3,-2
  114ab8:	80c6703a 	and	r3,r16,r3
  114abc:	1801703a 	wrctl	status,r3
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
    cpu_sr = alt_irq_disable_all();
    (dev->callback)(dev->callback_context);
  114ac0:	21000a17 	ldw	r4,40(r4)
  114ac4:	103ee83a 	callr	r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  114ac8:	8001703a 	wrctl	status,r16
    alt_irq_enable_all(cpu_sr);
  }
}
  114acc:	dfc00117 	ldw	ra,4(sp)
  114ad0:	dc000017 	ldw	r16,0(sp)
  114ad4:	dec00204 	addi	sp,sp,8
  114ad8:	f800283a 	ret

00114adc <alt_avalon_sgdma_do_async_transfer>:
  alt_sgdma_descriptor *desc)
{
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
  114adc:	20c00317 	ldw	r3,12(r4)
  114ae0:	18800037 	ldwio	r2,0(r3)
  114ae4:	1080040c 	andi	r2,r2,16
  114ae8:	10001c1e 	bne	r2,zero,114b5c <alt_avalon_sgdma_do_async_transfer+0x80>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
  114aec:	18c00404 	addi	r3,r3,16
  114af0:	19c00037 	ldwio	r7,0(r3)
  114af4:	01bff7c4 	movi	r6,-33
  114af8:	398c703a 	and	r6,r7,r6
  114afc:	19800035 	stwio	r6,0(r3)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
  114b00:	20c00317 	ldw	r3,12(r4)
  114b04:	01803fc4 	movi	r6,255
  114b08:	19800035 	stwio	r6,0(r3)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
  114b0c:	20c00317 	ldw	r3,12(r4)
  114b10:	19400835 	stwio	r5,32(r3)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
  114b14:	20c00917 	ldw	r3,36(r4)
  114b18:	18000826 	beq	r3,zero,114b3c <alt_avalon_sgdma_do_async_transfer+0x60>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  114b1c:	20c00317 	ldw	r3,12(r4)
  114b20:	19400437 	ldwio	r5,16(r3)

    control |= (dev->chain_control                          |
  114b24:	21800b17 	ldw	r6,44(r4)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
  114b28:	20c00317 	ldw	r3,12(r4)
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);

    control |= (dev->chain_control                          |
  114b2c:	31001814 	ori	r4,r6,96
  114b30:	2148b03a 	or	r4,r4,r5
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
  114b34:	19000435 	stwio	r4,16(r3)
  114b38:	f800283a 	ret
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  114b3c:	20c00317 	ldw	r3,12(r4)
  114b40:	19400437 	ldwio	r5,16(r3)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
  114b44:	20c00317 	ldw	r3,12(r4)
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
  114b48:	013ffbc4 	movi	r4,-17
  114b4c:	2908703a 	and	r4,r5,r4
  114b50:	21001814 	ori	r4,r4,96

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
  114b54:	19000435 	stwio	r4,16(r3)
  114b58:	f800283a 	ret
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
  114b5c:	00bffc04 	movi	r2,-16
  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
}
  114b60:	f800283a 	ret

00114b64 <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
  114b64:	20800317 	ldw	r2,12(r4)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
  114b68:	10c00037 	ldwio	r3,0(r2)
  114b6c:	18c0040c 	andi	r3,r3,16
  114b70:	183ffd1e 	bne	r3,zero,114b68 <black_to_red_frame+0xfe114b68>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
  114b74:	10800404 	addi	r2,r2,16
  114b78:	11800037 	ldwio	r6,0(r2)
  114b7c:	00fff7c4 	movi	r3,-33
  114b80:	30c6703a 	and	r3,r6,r3
  114b84:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
  114b88:	20800317 	ldw	r2,12(r4)
  114b8c:	00c03fc4 	movi	r3,255
  114b90:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
  114b94:	20800317 	ldw	r2,12(r4)
  114b98:	11400835 	stwio	r5,32(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
  114b9c:	20800317 	ldw	r2,12(r4)
  114ba0:	10800404 	addi	r2,r2,16
  114ba4:	10c00037 	ldwio	r3,0(r2)
  114ba8:	18c01814 	ori	r3,r3,96
  114bac:	10c00035 	stwio	r3,0(r2)
  114bb0:	20800317 	ldw	r2,12(r4)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
  114bb4:	10c00037 	ldwio	r3,0(r2)
  114bb8:	18c0040c 	andi	r3,r3,16
  114bbc:	183ffd1e 	bne	r3,zero,114bb4 <black_to_red_frame+0xfe114bb4>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
  114bc0:	10800404 	addi	r2,r2,16
  114bc4:	11400037 	ldwio	r5,0(r2)
  114bc8:	00fff7c4 	movi	r3,-33
  114bcc:	28c6703a 	and	r3,r5,r3
  114bd0:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
  114bd4:	20800317 	ldw	r2,12(r4)
  114bd8:	10800037 	ldwio	r2,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
  114bdc:	20c00317 	ldw	r3,12(r4)
  114be0:	01003fc4 	movi	r4,255
  114be4:	19000035 	stwio	r4,0(r3)

  return status;
}
  114be8:	f800283a 	ret

00114bec <alt_avalon_sgdma_register_callback>:
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
  dev->callback         = callback;
  114bec:	21400915 	stw	r5,36(r4)
  dev->callback_context = context;
  114bf0:	21c00a15 	stw	r7,40(r4)
  dev->chain_control    = chain_control;
  114bf4:	21800b15 	stw	r6,44(r4)
  114bf8:	f800283a 	ret

00114bfc <alt_avalon_sgdma_start>:
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  114bfc:	20800317 	ldw	r2,12(r4)
  114c00:	10c00437 	ldwio	r3,16(r2)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
  114c04:	20800317 	ldw	r2,12(r4)
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
  114c08:	18c00814 	ori	r3,r3,32
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
  114c0c:	10c00435 	stwio	r3,16(r2)
  114c10:	f800283a 	ret

00114c14 <alt_avalon_sgdma_stop>:
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  114c14:	20800317 	ldw	r2,12(r4)
  114c18:	11400437 	ldwio	r5,16(r2)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
  114c1c:	00fff7c4 	movi	r3,-33
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
  114c20:	20800317 	ldw	r2,12(r4)
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
  114c24:	28c6703a 	and	r3,r5,r3
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
  114c28:	10c00435 	stwio	r3,16(r2)
  114c2c:	f800283a 	ret

00114c30 <alt_avalon_sgdma_check_descriptor_status>:
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
  114c30:	208007a3 	ldbuio	r2,30(r4)
  114c34:	10801fcc 	andi	r2,r2,127
  114c38:	1000041e 	bne	r2,zero,114c4c <alt_avalon_sgdma_check_descriptor_status+0x1c>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
  }

  if( IORD_8DIRECT(&desc->control, 0) &
  114c3c:	20c007e3 	ldbuio	r3,31(r4)
  114c40:	18c0200c 	andi	r3,r3,128
  114c44:	1800031e 	bne	r3,zero,114c54 <alt_avalon_sgdma_check_descriptor_status+0x24>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
  }

    return 0;
}
  114c48:	f800283a 	ret
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
  114c4c:	00bffec4 	movi	r2,-5
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
  }

    return 0;
}
  114c50:	f800283a 	ret
    return -EIO;
  }

  if( IORD_8DIRECT(&desc->control, 0) &
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
  114c54:	00bfe244 	movi	r2,-119
  114c58:	f800283a 	ret

00114c5c <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
  114c5c:	defffe04 	addi	sp,sp,-8
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
  114c60:	d1601404 	addi	r5,gp,-32688
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
  114c64:	dc000015 	stw	r16,0(sp)
  114c68:	dfc00115 	stw	ra,4(sp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
  114c6c:	01155580 	call	115558 <alt_find_dev>
  114c70:	1021883a 	mov	r16,r2

  if (NULL == dev) {
  114c74:	10000526 	beq	r2,zero,114c8c <alt_avalon_sgdma_open+0x30>
    ALT_ERRNO = ENODEV;
  }

  return dev;
}
  114c78:	8005883a 	mov	r2,r16
  114c7c:	dfc00117 	ldw	ra,4(sp)
  114c80:	dc000017 	ldw	r16,0(sp)
  114c84:	dec00204 	addi	sp,sp,8
  114c88:	f800283a 	ret
  114c8c:	008004b4 	movhi	r2,18
  114c90:	10a1fc04 	addi	r2,r2,-30736
  114c94:	10800017 	ldw	r2,0(r2)
  114c98:	10000826 	beq	r2,zero,114cbc <alt_avalon_sgdma_open+0x60>
  114c9c:	103ee83a 	callr	r2
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);

  if (NULL == dev) {
    ALT_ERRNO = ENODEV;
  114ca0:	00c004c4 	movi	r3,19
  114ca4:	10c00015 	stw	r3,0(r2)
  }

  return dev;
}
  114ca8:	8005883a 	mov	r2,r16
  114cac:	dfc00117 	ldw	ra,4(sp)
  114cb0:	dc000017 	ldw	r16,0(sp)
  114cb4:	dec00204 	addi	sp,sp,8
  114cb8:	f800283a 	ret
  114cbc:	008004b4 	movhi	r2,18
  114cc0:	10a90c04 	addi	r2,r2,-23504
  114cc4:	003ff606 	br	114ca0 <black_to_red_frame+0xfe114ca0>

00114cc8 <alt_avalon_sgdma_enable_desc_poll>:
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  114cc8:	20800317 	ldw	r2,12(r4)
  114ccc:	11800437 	ldwio	r6,16(r2)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
  114cd0:	2806953a 	slli	r3,r5,20
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
  114cd4:	20800317 	ldw	r2,12(r4)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  114cd8:	01200434 	movhi	r4,32784
  114cdc:	213fffc4 	addi	r4,r4,-1
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
  114ce0:	18dffc2c 	andhi	r3,r3,32752
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  114ce4:	3108703a 	and	r4,r6,r4
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
  114ce8:	18c00134 	orhi	r3,r3,4
  114cec:	1906b03a 	or	r3,r3,r4
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
  114cf0:	10c00435 	stwio	r3,16(r2)
  114cf4:	f800283a 	ret

00114cf8 <alt_avalon_sgdma_disable_desc_poll>:
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  114cf8:	20800317 	ldw	r2,12(r4)
  114cfc:	11400437 	ldwio	r5,16(r2)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
  114d00:	00ffff34 	movhi	r3,65532
  114d04:	18ffffc4 	addi	r3,r3,-1

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
  114d08:	20800317 	ldw	r2,12(r4)
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
  114d0c:	28c6703a 	and	r3,r5,r3

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
  114d10:	10c00435 	stwio	r3,16(r2)
  114d14:	f800283a 	ret

00114d18 <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
  114d18:	defff804 	addi	sp,sp,-32
  114d1c:	dfc00715 	stw	ra,28(sp)
  114d20:	dd800615 	stw	r22,24(sp)
  114d24:	dd400515 	stw	r21,20(sp)
  114d28:	dd000415 	stw	r20,16(sp)
  114d2c:	dcc00315 	stw	r19,12(sp)
  114d30:	dc800215 	stw	r18,8(sp)
  114d34:	dc400115 	stw	r17,4(sp)
  114d38:	dc000015 	stw	r16,0(sp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
  114d3c:	2b4007c3 	ldbu	r13,31(r5)
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
  114d40:	d8800817 	ldw	r2,32(sp)
  114d44:	da800917 	ldw	r10,36(sp)
  114d48:	db000a17 	ldw	r12,40(sp)
  114d4c:	dac00b17 	ldw	r11,44(sp)
  114d50:	da400c17 	ldw	r9,48(sp)
  114d54:	da000d17 	ldw	r8,52(sp)
  114d58:	d8c00e17 	ldw	r3,56(sp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
  114d5c:	6b401fcc 	andi	r13,r13,127
  114d60:	2b4007e5 	stbio	r13,31(r5)
  desc->write_addr               = write_addr;
  desc->next                     = (alt_u32 *) next;
  desc->read_addr_pad            = 0x0;
  desc->write_addr_pad           = 0x0;
  desc->next_pad                 = 0x0;
  desc->bytes_to_transfer        = length_or_eop;
  114d64:	10bfffcc 	andi	r2,r2,65535
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
  114d68:	6018c03a 	cmpne	r12,r12,zero
  desc->write_addr               = write_addr;
  desc->next                     = (alt_u32 *) next;
  desc->read_addr_pad            = 0x0;
  desc->write_addr_pad           = 0x0;
  desc->next_pad                 = 0x0;
  desc->bytes_to_transfer        = length_or_eop;
  114d6c:	101cd23a 	srli	r14,r2,8
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
  114d70:	5816c03a 	cmpne	r11,r11,zero
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
  114d74:	302cd23a 	srli	r22,r6,8
  114d78:	302ad43a 	srli	r21,r6,16
  114d7c:	3028d63a 	srli	r20,r6,24
  desc->write_addr               = write_addr;
  114d80:	3826d23a 	srli	r19,r7,8
  114d84:	3824d43a 	srli	r18,r7,16
  114d88:	3822d63a 	srli	r17,r7,24
  desc->next                     = (alt_u32 *) next;
  114d8c:	2820d23a 	srli	r16,r5,8
  114d90:	283ed43a 	srli	ra,r5,16
  114d94:	281ed63a 	srli	r15,r5,24
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
  114d98:	6018907a 	slli	r12,r12,1
  114d9c:	581a90ba 	slli	r13,r11,2
  114da0:	5015003a 	cmpeq	r10,r10,zero
  114da4:	02ffe044 	movi	r11,-127
  114da8:	5a95c83a 	sub	r10,r11,r10
  114dac:	6296b03a 	or	r11,r12,r10
  desc->write_addr               = write_addr;
  desc->next                     = (alt_u32 *) next;
  desc->read_addr_pad            = 0x0;
  desc->write_addr_pad           = 0x0;
  desc->next_pad                 = 0x0;
  desc->bytes_to_transfer        = length_or_eop;
  114db0:	20800605 	stb	r2,24(r4)
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
  114db4:	21800005 	stb	r6,0(r4)
  114db8:	25800045 	stb	r22,1(r4)
  114dbc:	25400085 	stb	r21,2(r4)
  114dc0:	250000c5 	stb	r20,3(r4)
  desc->write_addr               = write_addr;
  114dc4:	21c00205 	stb	r7,8(r4)
  114dc8:	24c00245 	stb	r19,9(r4)
  114dcc:	24800285 	stb	r18,10(r4)
  114dd0:	244002c5 	stb	r17,11(r4)
  desc->next                     = (alt_u32 *) next;
  114dd4:	21400405 	stb	r5,16(r4)
  114dd8:	24000445 	stb	r16,17(r4)
  114ddc:	27c00485 	stb	ra,18(r4)
  114de0:	23c004c5 	stb	r15,19(r4)
  desc->read_addr_pad            = 0x0;
  114de4:	20000105 	stb	zero,4(r4)
  114de8:	20000145 	stb	zero,5(r4)
  114dec:	20000185 	stb	zero,6(r4)
  114df0:	200001c5 	stb	zero,7(r4)
  desc->write_addr_pad           = 0x0;
  114df4:	20000305 	stb	zero,12(r4)
  114df8:	20000345 	stb	zero,13(r4)
  114dfc:	20000385 	stb	zero,14(r4)
  114e00:	200003c5 	stb	zero,15(r4)
  desc->next_pad                 = 0x0;
  114e04:	20000505 	stb	zero,20(r4)
  114e08:	20000545 	stb	zero,21(r4)
  114e0c:	20000585 	stb	zero,22(r4)
  114e10:	200005c5 	stb	zero,23(r4)
  desc->bytes_to_transfer        = length_or_eop;
  114e14:	23800645 	stb	r14,25(r4)
  desc->actual_bytes_transferred = 0;
  114e18:	20000705 	stb	zero,28(r4)
  114e1c:	20000745 	stb	zero,29(r4)
  desc->status                   = 0x0;
  114e20:	20000785 	stb	zero,30(r4)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
  114e24:	22400685 	stb	r9,26(r4)
  desc->write_burst              = write_burst;
  114e28:	220006c5 	stb	r8,27(r4)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
  114e2c:	18803fcc 	andi	r2,r3,255
  114e30:	5b56b03a 	or	r11,r11,r13
  114e34:	10000f26 	beq	r2,zero,114e74 <alt_avalon_sgdma_construct_descriptor_burst+0x15c>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
  114e38:	18c003cc 	andi	r3,r3,15
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
  114e3c:	180690fa 	slli	r3,r3,3
  114e40:	58c6b03a 	or	r3,r11,r3
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
  114e44:	01400804 	movi	r5,32
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
  114e48:	20c007c5 	stb	r3,31(r4)
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
}
  114e4c:	dfc00717 	ldw	ra,28(sp)
  114e50:	dd800617 	ldw	r22,24(sp)
  114e54:	dd400517 	ldw	r21,20(sp)
  114e58:	dd000417 	ldw	r20,16(sp)
  114e5c:	dcc00317 	ldw	r19,12(sp)
  114e60:	dc800217 	ldw	r18,8(sp)
  114e64:	dc400117 	ldw	r17,4(sp)
  114e68:	dc000017 	ldw	r16,0(sp)
  114e6c:	dec00804 	addi	sp,sp,32
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
  114e70:	01154101 	jmpi	115410 <alt_dcache_flush>
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
  114e74:	0007883a 	mov	r3,zero
  114e78:	003ff106 	br	114e40 <black_to_red_frame+0xfe114e40>

00114e7c <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
  114e7c:	defff804 	addi	sp,sp,-32
  alt_avalon_sgdma_construct_descriptor_burst(
  114e80:	d880080b 	ldhu	r2,32(sp)
  114e84:	d8c00917 	ldw	r3,36(sp)
  114e88:	d8000115 	stw	zero,4(sp)
  114e8c:	d8800015 	stw	r2,0(sp)
  114e90:	d8800a17 	ldw	r2,40(sp)
  114e94:	d8c00215 	stw	r3,8(sp)
  114e98:	d8000615 	stw	zero,24(sp)
  114e9c:	d8800315 	stw	r2,12(sp)
  114ea0:	d8800b17 	ldw	r2,44(sp)
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
  114ea4:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
  114ea8:	d8800415 	stw	r2,16(sp)
  114eac:	d8800c17 	ldw	r2,48(sp)
  114eb0:	d8800515 	stw	r2,20(sp)
  114eb4:	0114d180 	call	114d18 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
  114eb8:	dfc00717 	ldw	ra,28(sp)
  114ebc:	dec00804 	addi	sp,sp,32
  114ec0:	f800283a 	ret

00114ec4 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
  114ec4:	defff804 	addi	sp,sp,-32
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
  alt_avalon_sgdma_construct_descriptor_burst(
  114ec8:	d880080b 	ldhu	r2,32(sp)
  114ecc:	d8c00917 	ldw	r3,36(sp)
  114ed0:	d8000115 	stw	zero,4(sp)
  114ed4:	d8800015 	stw	r2,0(sp)
  114ed8:	d8800a17 	ldw	r2,40(sp)
  114edc:	d8c00215 	stw	r3,8(sp)
  114ee0:	d8000415 	stw	zero,16(sp)
  114ee4:	d8800315 	stw	r2,12(sp)
  114ee8:	d8000515 	stw	zero,20(sp)
  114eec:	d8000615 	stw	zero,24(sp)
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
  114ef0:	dfc00715 	stw	ra,28(sp)
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
  alt_avalon_sgdma_construct_descriptor_burst(
  114ef4:	0114d180 	call	114d18 <alt_avalon_sgdma_construct_descriptor_burst>
  int                   read_fixed,
  int                   write_fixed)
{
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
  114ef8:	dfc00717 	ldw	ra,28(sp)
  114efc:	dec00804 	addi	sp,sp,32
  114f00:	f800283a 	ret

00114f04 <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
  114f04:	defff804 	addi	sp,sp,-32
  alt_avalon_sgdma_construct_descriptor_burst(
  114f08:	d8c00817 	ldw	r3,32(sp)
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
  114f0c:	3005883a 	mov	r2,r6
  alt_avalon_sgdma_construct_descriptor_burst(
  114f10:	39ffffcc 	andi	r7,r7,65535
  114f14:	d8c00315 	stw	r3,12(sp)
  114f18:	d8c00917 	ldw	r3,36(sp)
  114f1c:	d9c00015 	stw	r7,0(sp)
  114f20:	d8000115 	stw	zero,4(sp)
  114f24:	d8000215 	stw	zero,8(sp)
  114f28:	d8000415 	stw	zero,16(sp)
  114f2c:	d8c00515 	stw	r3,20(sp)
  114f30:	d8000615 	stw	zero,24(sp)
  114f34:	000d883a 	mov	r6,zero
  114f38:	100f883a 	mov	r7,r2
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
  114f3c:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
  114f40:	0114d180 	call	114d18 <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
  114f44:	dfc00717 	ldw	ra,28(sp)
  114f48:	dec00804 	addi	sp,sp,32
  114f4c:	f800283a 	ret

00114f50 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
  114f50:	defff804 	addi	sp,sp,-32
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
  alt_avalon_sgdma_construct_descriptor_burst(
  114f54:	d8c00817 	ldw	r3,32(sp)
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
  114f58:	3005883a 	mov	r2,r6
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
  alt_avalon_sgdma_construct_descriptor_burst(
  114f5c:	39ffffcc 	andi	r7,r7,65535
  114f60:	d9c00015 	stw	r7,0(sp)
  114f64:	d8000115 	stw	zero,4(sp)
  114f68:	d8000215 	stw	zero,8(sp)
  114f6c:	d8c00315 	stw	r3,12(sp)
  114f70:	d8000415 	stw	zero,16(sp)
  114f74:	d8000515 	stw	zero,20(sp)
  114f78:	d8000615 	stw	zero,24(sp)
  114f7c:	000d883a 	mov	r6,zero
  114f80:	100f883a 	mov	r7,r2
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
  114f84:	dfc00715 	stw	ra,28(sp)
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
  alt_avalon_sgdma_construct_descriptor_burst(
  114f88:	0114d180 	call	114d18 <alt_avalon_sgdma_construct_descriptor_burst>
  alt_u16               length_or_eop,
  int                   write_fixed)
{
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
    length_or_eop, write_fixed, 0);
}
  114f8c:	dfc00717 	ldw	ra,28(sp)
  114f90:	dec00804 	addi	sp,sp,32
  114f94:	f800283a 	ret

00114f98 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
  114f98:	defff804 	addi	sp,sp,-32
  alt_avalon_sgdma_construct_descriptor_burst(
  114f9c:	d8c00a17 	ldw	r3,40(sp)
  114fa0:	d8800c03 	ldbu	r2,48(sp)
  114fa4:	39ffffcc 	andi	r7,r7,65535
  114fa8:	d8c00115 	stw	r3,4(sp)
  114fac:	d8c00817 	ldw	r3,32(sp)
  114fb0:	d9c00015 	stw	r7,0(sp)
  114fb4:	d8000515 	stw	zero,20(sp)
  114fb8:	d8c00215 	stw	r3,8(sp)
  114fbc:	d8c00917 	ldw	r3,36(sp)
  114fc0:	d8800615 	stw	r2,24(sp)
  114fc4:	000f883a 	mov	r7,zero
  114fc8:	d8c00315 	stw	r3,12(sp)
  114fcc:	d8c00b17 	ldw	r3,44(sp)
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
  114fd0:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(
  114fd4:	d8c00415 	stw	r3,16(sp)
  114fd8:	0114d180 	call	114d18 <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
  114fdc:	dfc00717 	ldw	ra,28(sp)
  114fe0:	dec00804 	addi	sp,sp,32
  114fe4:	f800283a 	ret

00114fe8 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
  114fe8:	defff804 	addi	sp,sp,-32
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
  alt_avalon_sgdma_construct_descriptor_burst(
  114fec:	d8c00a17 	ldw	r3,40(sp)
  114ff0:	d8800b03 	ldbu	r2,44(sp)
  114ff4:	39ffffcc 	andi	r7,r7,65535
  114ff8:	d8c00115 	stw	r3,4(sp)
  114ffc:	d8c00817 	ldw	r3,32(sp)
  115000:	d9c00015 	stw	r7,0(sp)
  115004:	d8000415 	stw	zero,16(sp)
  115008:	d8c00215 	stw	r3,8(sp)
  11500c:	d8c00917 	ldw	r3,36(sp)
  115010:	d8000515 	stw	zero,20(sp)
  115014:	d8800615 	stw	r2,24(sp)
  115018:	d8c00315 	stw	r3,12(sp)
  11501c:	000f883a 	mov	r7,zero
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
  115020:	dfc00715 	stw	ra,28(sp)
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
  alt_avalon_sgdma_construct_descriptor_burst(
  115024:	0114d180 	call	114d18 <alt_avalon_sgdma_construct_descriptor_burst>
  alt_u8                atlantic_channel)
{
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
  115028:	dfc00717 	ldw	ra,28(sp)
  11502c:	dec00804 	addi	sp,sp,32
  115030:	f800283a 	ret

00115034 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
  115034:	defff804 	addi	sp,sp,-32
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
  115038:	d8c0080b 	ldhu	r3,32(sp)
  11503c:	d8800c03 	ldbu	r2,48(sp)
  115040:	da000917 	ldw	r8,36(sp)
  115044:	d8c00015 	stw	r3,0(sp)
  115048:	d8c00a17 	ldw	r3,40(sp)
  11504c:	da000115 	stw	r8,4(sp)
  115050:	d8000415 	stw	zero,16(sp)
  115054:	d8c00215 	stw	r3,8(sp)
  115058:	d8c00b17 	ldw	r3,44(sp)
  11505c:	d8000515 	stw	zero,20(sp)
  115060:	d8800615 	stw	r2,24(sp)
  115064:	d8c00315 	stw	r3,12(sp)
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
  115068:	dfc00715 	stw	ra,28(sp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
  11506c:	0114d180 	call	114d18 <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
  115070:	dfc00717 	ldw	ra,28(sp)
  115074:	dec00804 	addi	sp,sp,32
  115078:	f800283a 	ret

0011507c <alt_avalon_sgdma_init>:

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
  11507c:	20800317 	ldw	r2,12(r4)
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
  115080:	defffb04 	addi	sp,sp,-20
  115084:	dc800315 	stw	r18,12(sp)
  115088:	dc400215 	stw	r17,8(sp)
  11508c:	dc000115 	stw	r16,4(sp)
  115090:	dfc00415 	stw	ra,16(sp)
  115094:	2021883a 	mov	r16,r4
  115098:	2823883a 	mov	r17,r5
  11509c:	3025883a 	mov	r18,r6

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
  1150a0:	00c00074 	movhi	r3,1
  1150a4:	10c00435 	stwio	r3,16(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
  1150a8:	20800317 	ldw	r2,12(r4)
  1150ac:	10c00435 	stwio	r3,16(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
  1150b0:	20800317 	ldw	r2,12(r4)
  1150b4:	10000435 	stwio	zero,16(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
  1150b8:	20800317 	ldw	r2,12(r4)
  1150bc:	00c03fc4 	movi	r3,255
  1150c0:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
  1150c4:	d1601404 	addi	r5,gp,-32688
  1150c8:	01154180 	call	115418 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
  1150cc:	8809883a 	mov	r4,r17
  1150d0:	d8000015 	stw	zero,0(sp)
  1150d4:	900b883a 	mov	r5,r18
  1150d8:	01800474 	movhi	r6,17
  1150dc:	3192a004 	addi	r6,r6,19072
  1150e0:	800f883a 	mov	r7,r16
  1150e4:	01155ec0 	call	1155ec <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
  1150e8:	dfc00417 	ldw	ra,16(sp)
  1150ec:	dc800317 	ldw	r18,12(sp)
  1150f0:	dc400217 	ldw	r17,8(sp)
  1150f4:	dc000117 	ldw	r16,4(sp)
  1150f8:	dec00504 	addi	sp,sp,20
  1150fc:	f800283a 	ret

00115100 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  115100:	defffe04 	addi	sp,sp,-8
  115104:	dfc00115 	stw	ra,4(sp)
  115108:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  11510c:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  115110:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  115114:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  115118:	00bfff84 	movi	r2,-2
  11511c:	8084703a 	and	r2,r16,r2
  115120:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
  115124:	01159b80 	call	1159b8 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  115128:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
  11512c:	dfc00117 	ldw	ra,4(sp)
  115130:	dc000017 	ldw	r16,0(sp)
  115134:	dec00204 	addi	sp,sp,8
  115138:	f800283a 	ret

0011513c <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  11513c:	00c004b4 	movhi	r3,18
  115140:	18e91504 	addi	r3,r3,-23468
  115144:	1a000017 	ldw	r8,0(r3)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  115148:	defffe04 	addi	sp,sp,-8
  11514c:	dfc00115 	stw	ra,4(sp)
  115150:	2005883a 	mov	r2,r4
  115154:	2809883a 	mov	r4,r5
  115158:	4000011e 	bne	r8,zero,115160 <alt_avalon_timer_sc_init+0x24>
  {
    _alt_tick_rate = nticks;
  11515c:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  115160:	00c001c4 	movi	r3,7
  115164:	10c00135 	stwio	r3,4(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  115168:	300b883a 	mov	r5,r6
  11516c:	d8000015 	stw	zero,0(sp)
  115170:	01800474 	movhi	r6,17
  115174:	31944004 	addi	r6,r6,20736
  115178:	100f883a 	mov	r7,r2
  11517c:	01155ec0 	call	1155ec <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  115180:	dfc00117 	ldw	ra,4(sp)
  115184:	dec00204 	addi	sp,sp,8
  115188:	f800283a 	ret

0011518c <get_DDRAM_addr>:
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
  11518c:	28000126 	beq	r5,zero,115194 <get_DDRAM_addr+0x8>
		addr |= x_pos;
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
  115190:	21001014 	ori	r4,r4,64
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  115194:	00bfe004 	movi	r2,-128
}
  115198:	1104b03a 	or	r2,r2,r4
  11519c:	f800283a 	ret

001151a0 <alt_up_character_lcd_send_cmd>:
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  1151a0:	20800a17 	ldw	r2,40(r4)
  1151a4:	11400025 	stbio	r5,0(r2)
  1151a8:	f800283a 	ret

001151ac <alt_up_character_lcd_init>:
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
  1151ac:	20800a17 	ldw	r2,40(r4)
  1151b0:	00c00044 	movi	r3,1
  1151b4:	10c00025 	stbio	r3,0(r2)
  1151b8:	f800283a 	ret

001151bc <alt_up_character_lcd_open_dev>:
{
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
  1151bc:	014004b4 	movhi	r5,18
  1151c0:	2961f804 	addi	r5,r5,-30752
  1151c4:	01155581 	jmpi	115558 <alt_find_dev>

001151c8 <alt_up_character_lcd_write>:
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  1151c8:	30000626 	beq	r6,zero,1151e4 <alt_up_character_lcd_write+0x1c>
  1151cc:	298d883a 	add	r6,r5,r6
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  1151d0:	20800a17 	ldw	r2,40(r4)
  1151d4:	28c00007 	ldb	r3,0(r5)
  1151d8:	10c00065 	stbio	r3,1(r2)
  1151dc:	29400044 	addi	r5,r5,1
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  1151e0:	29bffb1e 	bne	r5,r6,1151d0 <black_to_red_frame+0xfe1151d0>
  1151e4:	f800283a 	ret

001151e8 <alt_up_character_lcd_string>:
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
  1151e8:	28800003 	ldbu	r2,0(r5)
  1151ec:	10c03fcc 	andi	r3,r2,255
  1151f0:	18c0201c 	xori	r3,r3,128
  1151f4:	18ffe004 	addi	r3,r3,-128
  1151f8:	18000426 	beq	r3,zero,11520c <alt_up_character_lcd_string+0x24>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
  1151fc:	20c00a17 	ldw	r3,40(r4)
  115200:	18800065 	stbio	r2,1(r3)
		++ptr;
  115204:	29400044 	addi	r5,r5,1
  115208:	003ff706 	br	1151e8 <black_to_red_frame+0xfe1151e8>
  11520c:	f800283a 	ret

00115210 <alt_up_character_lcd_write_fd>:
}

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
  115210:	21c00017 	ldw	r7,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  115214:	0005883a 	mov	r2,zero
  115218:	30000626 	beq	r6,zero,115234 <alt_up_character_lcd_write_fd+0x24>
  11521c:	2889883a 	add	r4,r5,r2
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
  115220:	38c00a17 	ldw	r3,40(r7)
  115224:	21000007 	ldb	r4,0(r4)
  115228:	19000065 	stbio	r4,1(r3)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
  11522c:	10800044 	addi	r2,r2,1
  115230:	30bffa1e 	bne	r6,r2,11521c <black_to_red_frame+0xfe11521c>
// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
	return 0;
}
  115234:	0005883a 	mov	r2,zero
  115238:	f800283a 	ret

0011523c <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
  11523c:	008009c4 	movi	r2,39
  115240:	11401036 	bltu	r2,r5,115284 <alt_up_character_lcd_set_cursor_pos+0x48>
  115244:	00800044 	movi	r2,1
  115248:	11800e36 	bltu	r2,r6,115284 <alt_up_character_lcd_set_cursor_pos+0x48>
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
  11524c:	3000061e 	bne	r6,zero,115268 <alt_up_character_lcd_set_cursor_pos+0x2c>
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  115250:	20800a17 	ldw	r2,40(r4)
	{
		addr |= x_pos;
		addr |= 0x00000040;
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  115254:	00ffe004 	movi	r3,-128
  115258:	28cab03a 	or	r5,r5,r3
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  11525c:	11400025 	stbio	r5,0(r2)
		return -1;
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
  115260:	0005883a 	mov	r2,zero
  115264:	f800283a 	ret
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  115268:	20800a17 	ldw	r2,40(r4)
	{
		addr |= x_pos;
		addr |= 0x00000040;
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  11526c:	00ffe004 	movi	r3,-128
		addr |= x_pos;
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
  115270:	29401014 	ori	r5,r5,64
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  115274:	28cab03a 	or	r5,r5,r3
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  115278:	11400025 	stbio	r5,0(r2)
		return -1;
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
  11527c:	0005883a 	mov	r2,zero
  115280:	f800283a 	ret
	 unsigned y_pos)
{
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
		// invalid argument
		return -1;
  115284:	00bfffc4 	movi	r2,-1
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
	return 0;
}
  115288:	f800283a 	ret

0011528c <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
  11528c:	28000b26 	beq	r5,zero,1152bc <alt_up_character_lcd_shift_cursor+0x30>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
  115290:	01400b0e 	bge	zero,r5,1152c0 <alt_up_character_lcd_shift_cursor+0x34>
  115294:	00c00504 	movi	r3,20
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
  115298:	28000b16 	blt	r5,zero,1152c8 <alt_up_character_lcd_shift_cursor+0x3c>
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  11529c:	28803fcc 	andi	r2,r5,255
  1152a0:	10000626 	beq	r2,zero,1152bc <alt_up_character_lcd_shift_cursor+0x30>
  1152a4:	18c03fcc 	andi	r3,r3,255
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  1152a8:	20800a17 	ldw	r2,40(r4)
  1152ac:	10c00025 	stbio	r3,0(r2)
  1152b0:	297fffc4 	addi	r5,r5,-1
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  1152b4:	28803fcc 	andi	r2,r5,255
  1152b8:	103ffb1e 	bne	r2,zero,1152a8 <black_to_red_frame+0xfe1152a8>
  1152bc:	f800283a 	ret
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
  1152c0:	00c00404 	movi	r3,16
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
  1152c4:	283ff50e 	bge	r5,zero,11529c <black_to_red_frame+0xfe11529c>
  1152c8:	014bc83a 	sub	r5,zero,r5
  1152cc:	003ff306 	br	11529c <black_to_red_frame+0xfe11529c>

001152d0 <alt_up_character_lcd_shift_display>:
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
	if (x_right_shift_offset == 0) 
  1152d0:	28000b26 	beq	r5,zero,115300 <alt_up_character_lcd_shift_display+0x30>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
  1152d4:	01400b0e 	bge	zero,r5,115304 <alt_up_character_lcd_shift_display+0x34>
  1152d8:	00c00704 	movi	r3,28
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
  1152dc:	28000b16 	blt	r5,zero,11530c <alt_up_character_lcd_shift_display+0x3c>
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  1152e0:	28803fcc 	andi	r2,r5,255
  1152e4:	10000626 	beq	r2,zero,115300 <alt_up_character_lcd_shift_display+0x30>
  1152e8:	18c03fcc 	andi	r3,r3,255
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  1152ec:	20800a17 	ldw	r2,40(r4)
  1152f0:	10c00025 	stbio	r3,0(r2)
  1152f4:	297fffc4 	addi	r5,r5,-1
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
  1152f8:	28803fcc 	andi	r2,r5,255
  1152fc:	103ffb1e 	bne	r2,zero,1152ec <black_to_red_frame+0xfe1152ec>
  115300:	f800283a 	ret
	if (x_right_shift_offset == 0) 
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
  115304:	00c00604 	movi	r3,24
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
  115308:	283ff50e 	bge	r5,zero,1152e0 <black_to_red_frame+0xfe1152e0>
  11530c:	014bc83a 	sub	r5,zero,r5
  115310:	003ff306 	br	1152e0 <black_to_red_frame+0xfe1152e0>

00115314 <alt_up_character_lcd_erase_pos>:
}

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
  115314:	008009c4 	movi	r2,39
  115318:	11400e36 	bltu	r2,r5,115354 <alt_up_character_lcd_erase_pos+0x40>
  11531c:	00800044 	movi	r2,1
  115320:	11800c36 	bltu	r2,r6,115354 <alt_up_character_lcd_erase_pos+0x40>
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
	//assume valid inputs
	unsigned char addr = 0x00000000;
	if (y_pos == 0)
  115324:	3000091e 	bne	r6,zero,11534c <alt_up_character_lcd_erase_pos+0x38>
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  115328:	20800a17 	ldw	r2,40(r4)
	{
		addr |= x_pos;
		addr |= 0x00000040;
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
  11532c:	00ffe004 	movi	r3,-128
  115330:	28cab03a 	or	r5,r5,r3
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  115334:	11400025 	stbio	r5,0(r2)
	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
  115338:	20800a17 	ldw	r2,40(r4)
  11533c:	00c00084 	movi	r3,2
  115340:	10c00065 	stbio	r3,1(r2)
	return 0;
  115344:	0005883a 	mov	r2,zero
  115348:	f800283a 	ret
		addr |= x_pos;
	}
	else
	{
		addr |= x_pos;
		addr |= 0x00000040;
  11534c:	29401014 	ori	r5,r5,64
  115350:	003ff506 	br	115328 <black_to_red_frame+0xfe115328>

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
		return -1;
  115354:	00bfffc4 	movi	r2,-1
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
	return 0;
}
  115358:	f800283a 	ret

0011535c <alt_up_character_lcd_cursor_off>:
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
  11535c:	20800a17 	ldw	r2,40(r4)
  115360:	00c00304 	movi	r3,12
  115364:	10c00025 	stbio	r3,0(r2)
  115368:	f800283a 	ret

0011536c <alt_up_character_lcd_cursor_blink_on>:
  11536c:	20800a17 	ldw	r2,40(r4)
  115370:	00c003c4 	movi	r3,15
  115374:	10c00025 	stbio	r3,0(r2)
  115378:	f800283a 	ret

0011537c <alt_alarm_start>:
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  11537c:	008004b4 	movhi	r2,18
  115380:	10a91504 	addi	r2,r2,-23468
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
  115384:	10800017 	ldw	r2,0(r2)
  115388:	10001d26 	beq	r2,zero,115400 <alt_alarm_start+0x84>
  {
    if (alarm)
  11538c:	20001e26 	beq	r4,zero,115408 <alt_alarm_start+0x8c>
    {
      alarm->callback = callback;
  115390:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
  115394:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  115398:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  11539c:	00bfff84 	movi	r2,-2
  1153a0:	1884703a 	and	r2,r3,r2
  1153a4:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  1153a8:	008004b4 	movhi	r2,18
  1153ac:	10a91404 	addi	r2,r2,-23472
  1153b0:	10800017 	ldw	r2,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
  1153b4:	11800044 	addi	r6,r2,1
  1153b8:	314b883a 	add	r5,r6,r5
  1153bc:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  1153c0:	28800c36 	bltu	r5,r2,1153f4 <alt_alarm_start+0x78>
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
  1153c4:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  1153c8:	008004b4 	movhi	r2,18
  1153cc:	10a20104 	addi	r2,r2,-30716
  entry->next     = list->next;
  1153d0:	11400017 	ldw	r5,0(r2)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  1153d4:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
  1153d8:	21400015 	stw	r5,0(r4)

  list->next->previous = entry;
  1153dc:	11400017 	ldw	r5,0(r2)
  list->next           = entry;
  1153e0:	11000015 	stw	r4,0(r2)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
  1153e4:	29000115 	stw	r4,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1153e8:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
  1153ec:	0005883a 	mov	r2,zero
  1153f0:	f800283a 	ret
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
      {
        alarm->rollover = 1;
  1153f4:	00800044 	movi	r2,1
  1153f8:	20800405 	stb	r2,16(r4)
  1153fc:	003ff206 	br	1153c8 <black_to_red_frame+0xfe1153c8>
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
  115400:	00bfde84 	movi	r2,-134
  115404:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
  115408:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
  11540c:	f800283a 	ret

00115410 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
  115410:	f800283a 	ret

00115414 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
  115414:	f800283a 	ret

00115418 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  115418:	20000a26 	beq	r4,zero,115444 <alt_dev_llist_insert+0x2c>
  11541c:	20800217 	ldw	r2,8(r4)
  115420:	10000826 	beq	r2,zero,115444 <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
  115424:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  115428:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
  11542c:	0005883a 	mov	r2,zero
  entry->next     = list->next;
  115430:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
  115434:	28c00017 	ldw	r3,0(r5)
  115438:	19000115 	stw	r4,4(r3)
  list->next           = entry;
  11543c:	29000015 	stw	r4,0(r5)
  115440:	f800283a 	ret
  115444:	008004b4 	movhi	r2,18
  115448:	10a1fc04 	addi	r2,r2,-30736
  11544c:	10800017 	ldw	r2,0(r2)
  115450:	10000926 	beq	r2,zero,115478 <alt_dev_llist_insert+0x60>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  115454:	deffff04 	addi	sp,sp,-4
  115458:	dfc00015 	stw	ra,0(sp)
  11545c:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  115460:	00c00584 	movi	r3,22
  115464:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  115468:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  11546c:	dfc00017 	ldw	ra,0(sp)
  115470:	dec00104 	addi	sp,sp,4
  115474:	f800283a 	ret
  115478:	008004b4 	movhi	r2,18
  11547c:	10a90c04 	addi	r2,r2,-23504
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
  115480:	00c00584 	movi	r3,22
  115484:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
  115488:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
  11548c:	f800283a 	ret

00115490 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  115490:	defffc04 	addi	sp,sp,-16
  115494:	dc800215 	stw	r18,8(sp)
  115498:	dc000015 	stw	r16,0(sp)
  11549c:	dfc00315 	stw	ra,12(sp)
  1154a0:	dc400115 	stw	r17,4(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  1154a4:	04000474 	movhi	r16,17
  1154a8:	8417f004 	addi	r16,r16,24512
  1154ac:	04800474 	movhi	r18,17
  1154b0:	9497f104 	addi	r18,r18,24516
  1154b4:	84800936 	bltu	r16,r18,1154dc <_do_ctors+0x4c>
  1154b8:	84a5c83a 	sub	r18,r16,r18
  1154bc:	9024d0ba 	srli	r18,r18,2
  1154c0:	0023883a 	mov	r17,zero
  1154c4:	94800044 	addi	r18,r18,1
        (*ctor) (); 
  1154c8:	80800017 	ldw	r2,0(r16)
  1154cc:	8c400044 	addi	r17,r17,1

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  1154d0:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
  1154d4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  1154d8:	8cbffb1e 	bne	r17,r18,1154c8 <black_to_red_frame+0xfe1154c8>
        (*ctor) (); 
}
  1154dc:	dfc00317 	ldw	ra,12(sp)
  1154e0:	dc800217 	ldw	r18,8(sp)
  1154e4:	dc400117 	ldw	r17,4(sp)
  1154e8:	dc000017 	ldw	r16,0(sp)
  1154ec:	dec00404 	addi	sp,sp,16
  1154f0:	f800283a 	ret

001154f4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  1154f4:	defffc04 	addi	sp,sp,-16
  1154f8:	dc800215 	stw	r18,8(sp)
  1154fc:	dc000015 	stw	r16,0(sp)
  115500:	dfc00315 	stw	ra,12(sp)
  115504:	dc400115 	stw	r17,4(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  115508:	04000474 	movhi	r16,17
  11550c:	8417f004 	addi	r16,r16,24512
  115510:	04800474 	movhi	r18,17
  115514:	9497f104 	addi	r18,r18,24516
  115518:	84800936 	bltu	r16,r18,115540 <_do_dtors+0x4c>
  11551c:	84a5c83a 	sub	r18,r16,r18
  115520:	9024d0ba 	srli	r18,r18,2
  115524:	0023883a 	mov	r17,zero
  115528:	94800044 	addi	r18,r18,1
        (*dtor) (); 
  11552c:	80800017 	ldw	r2,0(r16)
  115530:	8c400044 	addi	r17,r17,1

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  115534:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
  115538:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  11553c:	8cbffb1e 	bne	r17,r18,11552c <black_to_red_frame+0xfe11552c>
        (*dtor) (); 
}
  115540:	dfc00317 	ldw	ra,12(sp)
  115544:	dc800217 	ldw	r18,8(sp)
  115548:	dc400117 	ldw	r17,4(sp)
  11554c:	dc000017 	ldw	r16,0(sp)
  115550:	dec00404 	addi	sp,sp,16
  115554:	f800283a 	ret

00115558 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  115558:	defffb04 	addi	sp,sp,-20
  11555c:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
  115560:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  115564:	dcc00315 	stw	r19,12(sp)
  115568:	dc800215 	stw	r18,8(sp)
  11556c:	dc400115 	stw	r17,4(sp)
  115570:	dfc00415 	stw	ra,16(sp)
  115574:	2823883a 	mov	r17,r5
  115578:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
  11557c:	01049b00 	call	1049b0 <strlen>
  115580:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  115584:	8c00031e 	bne	r17,r16,115594 <alt_find_dev+0x3c>
  115588:	00000f06 	br	1155c8 <alt_find_dev+0x70>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  11558c:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  115590:	8c000d26 	beq	r17,r16,1155c8 <alt_find_dev+0x70>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  115594:	81000217 	ldw	r4,8(r16)
  115598:	980b883a 	mov	r5,r19
  11559c:	900d883a 	mov	r6,r18
  1155a0:	0115c740 	call	115c74 <memcmp>
  1155a4:	103ff91e 	bne	r2,zero,11558c <black_to_red_frame+0xfe11558c>
  1155a8:	8005883a 	mov	r2,r16
  }
  
  /* No match found */
  
  return NULL;
}
  1155ac:	dfc00417 	ldw	ra,16(sp)
  1155b0:	dcc00317 	ldw	r19,12(sp)
  1155b4:	dc800217 	ldw	r18,8(sp)
  1155b8:	dc400117 	ldw	r17,4(sp)
  1155bc:	dc000017 	ldw	r16,0(sp)
  1155c0:	dec00504 	addi	sp,sp,20
  1155c4:	f800283a 	ret
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  1155c8:	0005883a 	mov	r2,zero
}
  1155cc:	dfc00417 	ldw	ra,16(sp)
  1155d0:	dcc00317 	ldw	r19,12(sp)
  1155d4:	dc800217 	ldw	r18,8(sp)
  1155d8:	dc400117 	ldw	r17,4(sp)
  1155dc:	dc000017 	ldw	r16,0(sp)
  1155e0:	dec00504 	addi	sp,sp,20
  1155e4:	f800283a 	ret

001155e8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
  1155e8:	f800283a 	ret

001155ec <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  1155ec:	01156881 	jmpi	115688 <alt_iic_isr_register>

001155f0 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  1155f0:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1155f4:	00bfff84 	movi	r2,-2
  1155f8:	1884703a 	and	r2,r3,r2
  1155fc:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
  115600:	008004b4 	movhi	r2,18
  115604:	10a91304 	addi	r2,r2,-23476
  115608:	01800044 	movi	r6,1
  11560c:	11000017 	ldw	r4,0(r2)
  115610:	314a983a 	sll	r5,r6,r5
  115614:	290ab03a 	or	r5,r5,r4
  115618:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  11561c:	10800017 	ldw	r2,0(r2)
  115620:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  115624:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
  115628:	0005883a 	mov	r2,zero
  11562c:	f800283a 	ret

00115630 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  115630:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  115634:	00bfff84 	movi	r2,-2
  115638:	1884703a 	and	r2,r3,r2
  11563c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
  115640:	008004b4 	movhi	r2,18
  115644:	10a91304 	addi	r2,r2,-23476
  115648:	01bfff84 	movi	r6,-2
  11564c:	11000017 	ldw	r4,0(r2)
  115650:	314a183a 	rol	r5,r6,r5
  115654:	290a703a 	and	r5,r5,r4
  115658:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  11565c:	10800017 	ldw	r2,0(r2)
  115660:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  115664:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
  115668:	0005883a 	mov	r2,zero
  11566c:	f800283a 	ret

00115670 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  115670:	000530fa 	rdctl	r2,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
  115674:	00c00044 	movi	r3,1
  115678:	194a983a 	sll	r5,r3,r5
  11567c:	1144703a 	and	r2,r2,r5
}
  115680:	1004c03a 	cmpne	r2,r2,zero
  115684:	f800283a 	ret

00115688 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
  115688:	008007c4 	movi	r2,31
  11568c:	11401a16 	blt	r2,r5,1156f8 <alt_iic_isr_register+0x70>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  115690:	defffe04 	addi	sp,sp,-8
  115694:	dfc00115 	stw	ra,4(sp)
  115698:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  11569c:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1156a0:	00bfff84 	movi	r2,-2
  1156a4:	8084703a 	and	r2,r16,r2
  1156a8:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
  1156ac:	280490fa 	slli	r2,r5,3
  1156b0:	00c004b4 	movhi	r3,18
  1156b4:	18e92004 	addi	r3,r3,-23424
  1156b8:	1885883a 	add	r2,r3,r2
  1156bc:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
  1156c0:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  1156c4:	30000626 	beq	r6,zero,1156e0 <alt_iic_isr_register+0x58>
  1156c8:	01155f00 	call	1155f0 <alt_ic_irq_enable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1156cc:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
  1156d0:	dfc00117 	ldw	ra,4(sp)
  1156d4:	dc000017 	ldw	r16,0(sp)
  1156d8:	dec00204 	addi	sp,sp,8
  1156dc:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  1156e0:	01156300 	call	115630 <alt_ic_irq_disable>
  1156e4:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
  1156e8:	dfc00117 	ldw	ra,4(sp)
  1156ec:	dc000017 	ldw	r16,0(sp)
  1156f0:	dec00204 	addi	sp,sp,8
  1156f4:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
  1156f8:	00bffa84 	movi	r2,-22
  1156fc:	f800283a 	ret

00115700 <alt_open_fd.constprop.0>:
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
  115700:	defffd04 	addi	sp,sp,-12
  115704:	dc400115 	stw	r17,4(sp)
  115708:	2023883a 	mov	r17,r4
{
  int old;

  old = open (name, flags, mode);
  11570c:	2809883a 	mov	r4,r5
  115710:	300b883a 	mov	r5,r6
  115714:	01807fc4 	movi	r6,511
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
  115718:	dc000015 	stw	r16,0(sp)
  11571c:	dfc00215 	stw	ra,8(sp)
{
  int old;

  old = open (name, flags, mode);
  115720:	01158000 	call	115800 <open>
  115724:	1021883a 	mov	r16,r2

  if (old >= 0)
  115728:	10001216 	blt	r2,zero,115774 <alt_open_fd.constprop.0+0x74>
  {
    fd->dev      = alt_fd_list[old].dev;
  11572c:	1009883a 	mov	r4,r2
  115730:	01400304 	movi	r5,12
  115734:	0103f1c0 	call	103f1c <__mulsi3>
  115738:	00c00474 	movhi	r3,17
  11573c:	18dd2d04 	addi	r3,r3,29876
  115740:	1885883a 	add	r2,r3,r2
  115744:	11000017 	ldw	r4,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  115748:	10c00117 	ldw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  11574c:	10800217 	ldw	r2,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
  115750:	89000015 	stw	r4,0(r17)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  115754:	8009883a 	mov	r4,r16
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
  115758:	88c00115 	stw	r3,4(r17)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  11575c:	88800215 	stw	r2,8(r17)

    alt_release_fd (old);
  }
} 
  115760:	dfc00217 	ldw	ra,8(sp)
  115764:	dc400117 	ldw	r17,4(sp)
  115768:	dc000017 	ldw	r16,0(sp)
  11576c:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
  115770:	011426c1 	jmpi	11426c <alt_release_fd>
  }
} 
  115774:	dfc00217 	ldw	ra,8(sp)
  115778:	dc400117 	ldw	r17,4(sp)
  11577c:	dc000017 	ldw	r16,0(sp)
  115780:	dec00304 	addi	sp,sp,12
  115784:	f800283a 	ret

00115788 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  115788:	defffb04 	addi	sp,sp,-20
  11578c:	2005883a 	mov	r2,r4
  115790:	dc400115 	stw	r17,4(sp)
  115794:	dc000015 	stw	r16,0(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  115798:	04400044 	movi	r17,1
  11579c:	04000474 	movhi	r16,17
  1157a0:	841d3004 	addi	r16,r16,29888
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  1157a4:	dcc00315 	stw	r19,12(sp)
  1157a8:	dc800215 	stw	r18,8(sp)
  1157ac:	2827883a 	mov	r19,r5
  1157b0:	3025883a 	mov	r18,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  1157b4:	100b883a 	mov	r5,r2
  1157b8:	8009883a 	mov	r4,r16
  1157bc:	880d883a 	mov	r6,r17
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  1157c0:	dfc00415 	stw	ra,16(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  1157c4:	01157000 	call	115700 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  1157c8:	813ffd04 	addi	r4,r16,-12
  1157cc:	980b883a 	mov	r5,r19
  1157d0:	000d883a 	mov	r6,zero
  1157d4:	01157000 	call	115700 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  1157d8:	81000304 	addi	r4,r16,12
  1157dc:	900b883a 	mov	r5,r18
  1157e0:	880d883a 	mov	r6,r17
}  
  1157e4:	dfc00417 	ldw	ra,16(sp)
  1157e8:	dcc00317 	ldw	r19,12(sp)
  1157ec:	dc800217 	ldw	r18,8(sp)
  1157f0:	dc400117 	ldw	r17,4(sp)
  1157f4:	dc000017 	ldw	r16,0(sp)
  1157f8:	dec00504 	addi	sp,sp,20
{
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  1157fc:	01157001 	jmpi	115700 <alt_open_fd.constprop.0>

00115800 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  115800:	defff904 	addi	sp,sp,-28
  115804:	dc400115 	stw	r17,4(sp)
  115808:	2823883a 	mov	r17,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  11580c:	014004b4 	movhi	r5,18
  115810:	2961f804 	addi	r5,r5,-30752
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  115814:	dd400515 	stw	r21,20(sp)
  115818:	dcc00315 	stw	r19,12(sp)
  11581c:	dc800215 	stw	r18,8(sp)
  115820:	dc000015 	stw	r16,0(sp)
  115824:	dfc00615 	stw	ra,24(sp)
  115828:	dd000415 	stw	r20,16(sp)
  11582c:	2025883a 	mov	r18,r4
  115830:	3027883a 	mov	r19,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  115834:	01155580 	call	115558 <alt_find_dev>
  115838:	1021883a 	mov	r16,r2
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  int status = -ENODEV;
  int isafs = 0;
  11583c:	002b883a 	mov	r21,zero
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  115840:	10004226 	beq	r2,zero,11594c <open+0x14c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
  115844:	8009883a 	mov	r4,r16
  115848:	0115b7c0 	call	115b7c <alt_get_fd>
  11584c:	1029883a 	mov	r20,r2
  115850:	10003116 	blt	r2,zero,115918 <open+0x118>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
  115854:	1009883a 	mov	r4,r2
  115858:	01400304 	movi	r5,12
  11585c:	0103f1c0 	call	103f1c <__mulsi3>
  115860:	00c00474 	movhi	r3,17
  115864:	18dd2d04 	addi	r3,r3,29876
  115868:	1889883a 	add	r4,r3,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  11586c:	00900034 	movhi	r2,16384
  115870:	10bfffc4 	addi	r2,r2,-1
  115874:	8884703a 	and	r2,r17,r2
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  115878:	a8001326 	beq	r21,zero,1158c8 <open+0xc8>
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  11587c:	20800215 	stw	r2,8(r4)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  115880:	80800317 	ldw	r2,12(r16)
  115884:	10002f26 	beq	r2,zero,115944 <open+0x144>
  115888:	900b883a 	mov	r5,r18
  11588c:	880d883a 	mov	r6,r17
  115890:	980f883a 	mov	r7,r19
  115894:	103ee83a 	callr	r2
  115898:	1007883a 	mov	r3,r2
  11589c:	a005883a 	mov	r2,r20
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  1158a0:	18003416 	blt	r3,zero,115974 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
}
  1158a4:	dfc00617 	ldw	ra,24(sp)
  1158a8:	dd400517 	ldw	r21,20(sp)
  1158ac:	dd000417 	ldw	r20,16(sp)
  1158b0:	dcc00317 	ldw	r19,12(sp)
  1158b4:	dc800217 	ldw	r18,8(sp)
  1158b8:	dc400117 	ldw	r17,4(sp)
  1158bc:	dc000017 	ldw	r16,0(sp)
  1158c0:	dec00704 	addi	sp,sp,28
  1158c4:	f800283a 	ret
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  1158c8:	014004b4 	movhi	r5,18
  1158cc:	2961f704 	addi	r5,r5,-30756

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  1158d0:	10900034 	orhi	r2,r2,16384
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  1158d4:	29400017 	ldw	r5,0(r5)
  1158d8:	22c00017 	ldw	r11,0(r4)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  1158dc:	20800215 	stw	r2,8(r4)
  1158e0:	1a400204 	addi	r9,r3,8
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  1158e4:	0011883a 	mov	r8,zero
  1158e8:	00000306 	br	1158f8 <open+0xf8>
  1158ec:	18c00304 	addi	r3,r3,12
  1158f0:	4a400304 	addi	r9,r9,12
  1158f4:	2a3fe236 	bltu	r5,r8,115880 <black_to_red_frame+0xfe115880>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  1158f8:	1a800017 	ldw	r10,0(r3)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  1158fc:	42000044 	addi	r8,r8,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  115900:	5abffa1e 	bne	r11,r10,1158ec <black_to_red_frame+0xfe1158ec>
  115904:	48800017 	ldw	r2,0(r9)
  115908:	103ff80e 	bge	r2,zero,1158ec <black_to_red_frame+0xfe1158ec>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  11590c:	193ff726 	beq	r3,r4,1158ec <black_to_red_frame+0xfe1158ec>
  115910:	04000344 	movi	r16,13
  115914:	00000106 	br	11591c <open+0x11c>
  115918:	00a1c83a 	sub	r16,zero,r2

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
  11591c:	a009883a 	mov	r4,r20
  115920:	011426c0 	call	11426c <alt_release_fd>
  115924:	008004b4 	movhi	r2,18
  115928:	10a1fc04 	addi	r2,r2,-30736
  11592c:	10800017 	ldw	r2,0(r2)
  115930:	10000d26 	beq	r2,zero,115968 <open+0x168>
  115934:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
  115938:	14000015 	stw	r16,0(r2)
    return -1;
  11593c:	00bfffc4 	movi	r2,-1
  115940:	003fd806 	br	1158a4 <black_to_red_frame+0xfe1158a4>
  115944:	a005883a 	mov	r2,r20
  115948:	003fd606 	br	1158a4 <black_to_red_frame+0xfe1158a4>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  11594c:	9009883a 	mov	r4,r18
  115950:	0115ab00 	call	115ab0 <alt_find_file>
  115954:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  115958:	1000081e 	bne	r2,zero,11597c <open+0x17c>
  11595c:	040004c4 	movi	r16,19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  115960:	053fffc4 	movi	r20,-1
  115964:	003fed06 	br	11591c <black_to_red_frame+0xfe11591c>
  115968:	008004b4 	movhi	r2,18
  11596c:	10a90c04 	addi	r2,r2,-23504
  115970:	003ff106 	br	115938 <black_to_red_frame+0xfe115938>
  115974:	00e1c83a 	sub	r16,zero,r3
  115978:	003fe806 	br	11591c <black_to_red_frame+0xfe11591c>
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    isafs = 1;
  11597c:	05400044 	movi	r21,1
  115980:	003fb006 	br	115844 <black_to_red_frame+0xfe115844>

00115984 <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  115984:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  115988:	00ffff84 	movi	r3,-2
  11598c:	10c6703a 	and	r3,r2,r3
  115990:	1801703a 	wrctl	status,r3
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  115994:	21400117 	ldw	r5,4(r4)
  115998:	20c00017 	ldw	r3,0(r4)
  11599c:	19400115 	stw	r5,4(r3)
  entry->previous->next = entry->next;
  1159a0:	21400117 	ldw	r5,4(r4)
  1159a4:	28c00015 	stw	r3,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  1159a8:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
  1159ac:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  1159b0:	1001703a 	wrctl	status,r2
  1159b4:	f800283a 	ret

001159b8 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  1159b8:	d0a72a17 	ldw	r2,-25432(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  1159bc:	defffa04 	addi	sp,sp,-24
  1159c0:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  1159c4:	d4201717 	ldw	r16,-32676(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  1159c8:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  1159cc:	dc800215 	stw	r18,8(sp)
  1159d0:	dfc00515 	stw	ra,20(sp)
  1159d4:	dd000415 	stw	r20,16(sp)
  1159d8:	dcc00315 	stw	r19,12(sp)
  1159dc:	dc400115 	stw	r17,4(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  1159e0:	d4a01704 	addi	r18,gp,-32676

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  1159e4:	d0a72a15 	stw	r2,-25432(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  1159e8:	84801b26 	beq	r16,r18,115a58 <alt_tick+0xa0>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
  1159ec:	04c00044 	movi	r19,1
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  1159f0:	053fff84 	movi	r20,-2
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  1159f4:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
  1159f8:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  1159fc:	10000326 	beq	r2,zero,115a0c <alt_tick+0x54>
  115a00:	d0a72a17 	ldw	r2,-25432(gp)
  115a04:	1000011e 	bne	r2,zero,115a0c <alt_tick+0x54>
    {
      alarm->rollover = 0;
  115a08:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  115a0c:	d0e72a17 	ldw	r3,-25432(gp)
  115a10:	80800217 	ldw	r2,8(r16)
  115a14:	18800236 	bltu	r3,r2,115a20 <alt_tick+0x68>
  115a18:	80800403 	ldbu	r2,16(r16)
  115a1c:	10000326 	beq	r2,zero,115a2c <alt_tick+0x74>

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  115a20:	8c800d26 	beq	r17,r18,115a58 <alt_tick+0xa0>
  115a24:	8821883a 	mov	r16,r17
  115a28:	003ff206 	br	1159f4 <black_to_red_frame+0xfe1159f4>
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
  115a2c:	80800317 	ldw	r2,12(r16)
  115a30:	81000517 	ldw	r4,20(r16)
  115a34:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  115a38:	10000f26 	beq	r2,zero,115a78 <alt_tick+0xc0>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
  115a3c:	81000217 	ldw	r4,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  115a40:	d0e72a17 	ldw	r3,-25432(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
  115a44:	1105883a 	add	r2,r2,r4
  115a48:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  115a4c:	10fff42e 	bgeu	r2,r3,115a20 <black_to_red_frame+0xfe115a20>
        {
          alarm->rollover = 1;
  115a50:	84c00405 	stb	r19,16(r16)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  115a54:	8cbff31e 	bne	r17,r18,115a24 <black_to_red_frame+0xfe115a24>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
  115a58:	dfc00517 	ldw	ra,20(sp)
  115a5c:	dd000417 	ldw	r20,16(sp)
  115a60:	dcc00317 	ldw	r19,12(sp)
  115a64:	dc800217 	ldw	r18,8(sp)
  115a68:	dc400117 	ldw	r17,4(sp)
  115a6c:	dc000017 	ldw	r16,0(sp)
  115a70:	dec00604 	addi	sp,sp,24
  115a74:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  115a78:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  115a7c:	1506703a 	and	r3,r2,r20
  115a80:	1801703a 	wrctl	status,r3
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  115a84:	81000117 	ldw	r4,4(r16)
  115a88:	80c00017 	ldw	r3,0(r16)
  115a8c:	19000115 	stw	r4,4(r3)
  entry->previous->next = entry->next;
  115a90:	81000117 	ldw	r4,4(r16)
  115a94:	20c00015 	stw	r3,0(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  115a98:	84000115 	stw	r16,4(r16)
  entry->next     = entry;
  115a9c:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  115aa0:	1001703a 	wrctl	status,r2
  115aa4:	003fde06 	br	115a20 <black_to_red_frame+0xfe115a20>

00115aa8 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
  115aa8:	000170fa 	wrctl	ienable,zero
  115aac:	f800283a 	ret

00115ab0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  115ab0:	defffa04 	addi	sp,sp,-24
  115ab4:	dd000415 	stw	r20,16(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  115ab8:	050004b4 	movhi	r20,18
  115abc:	a521fa04 	addi	r20,r20,-30744
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  115ac0:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  115ac4:	a4000017 	ldw	r16,0(r20)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  115ac8:	dfc00515 	stw	ra,20(sp)
  115acc:	dcc00315 	stw	r19,12(sp)
  115ad0:	dc800215 	stw	r18,8(sp)
  115ad4:	dc400115 	stw	r17,4(sp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  115ad8:	85001626 	beq	r16,r20,115b34 <alt_find_file+0x84>
  115adc:	2025883a 	mov	r18,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
  115ae0:	04c00bc4 	movi	r19,47
  115ae4:	00000806 	br	115b08 <alt_find_file+0x58>
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  115ae8:	9185883a 	add	r2,r18,r6
  115aec:	10800007 	ldb	r2,0(r2)
  115af0:	14c00126 	beq	r2,r19,115af8 <alt_find_file+0x48>
  115af4:	1000021e 	bne	r2,zero,115b00 <alt_find_file+0x50>
        !memcmp (next->name, name, len))
  115af8:	0115c740 	call	115c74 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  115afc:	10001626 	beq	r2,zero,115b58 <alt_find_file+0xa8>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
  115b00:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  115b04:	85000b26 	beq	r16,r20,115b34 <alt_find_file+0x84>
  {
    len = strlen(next->name);
  115b08:	84400217 	ldw	r17,8(r16)
  115b0c:	8809883a 	mov	r4,r17
  115b10:	01049b00 	call	1049b0 <strlen>
  115b14:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
  115b18:	8885883a 	add	r2,r17,r2
  115b1c:	10bfffc7 	ldb	r2,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
  115b20:	8809883a 	mov	r4,r17
  115b24:	900b883a 	mov	r5,r18
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
  115b28:	14ffef1e 	bne	r2,r19,115ae8 <black_to_red_frame+0xfe115ae8>
    {
      len -= 1;
  115b2c:	31bfffc4 	addi	r6,r6,-1
  115b30:	003fed06 	br	115ae8 <black_to_red_frame+0xfe115ae8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  115b34:	0005883a 	mov	r2,zero
}
  115b38:	dfc00517 	ldw	ra,20(sp)
  115b3c:	dd000417 	ldw	r20,16(sp)
  115b40:	dcc00317 	ldw	r19,12(sp)
  115b44:	dc800217 	ldw	r18,8(sp)
  115b48:	dc400117 	ldw	r17,4(sp)
  115b4c:	dc000017 	ldw	r16,0(sp)
  115b50:	dec00604 	addi	sp,sp,24
  115b54:	f800283a 	ret
  115b58:	8005883a 	mov	r2,r16
  115b5c:	dfc00517 	ldw	ra,20(sp)
  115b60:	dd000417 	ldw	r20,16(sp)
  115b64:	dcc00317 	ldw	r19,12(sp)
  115b68:	dc800217 	ldw	r18,8(sp)
  115b6c:	dc400117 	ldw	r17,4(sp)
  115b70:	dc000017 	ldw	r16,0(sp)
  115b74:	dec00604 	addi	sp,sp,24
  115b78:	f800283a 	ret

00115b7c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  115b7c:	defffb04 	addi	sp,sp,-20
  115b80:	dcc00315 	stw	r19,12(sp)
  115b84:	dc800215 	stw	r18,8(sp)
  115b88:	dc400115 	stw	r17,4(sp)
  115b8c:	dc000015 	stw	r16,0(sp)
  115b90:	dfc00415 	stw	ra,16(sp)
  115b94:	2027883a 	mov	r19,r4
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  115b98:	0021883a 	mov	r16,zero
  115b9c:	04400474 	movhi	r17,17
  115ba0:	8c5d2d04 	addi	r17,r17,29876
  115ba4:	04800804 	movi	r18,32
  115ba8:	00000206 	br	115bb4 <alt_get_fd+0x38>
  115bac:	84000044 	addi	r16,r16,1
  115bb0:	84801426 	beq	r16,r18,115c04 <alt_get_fd+0x88>
  115bb4:	8009883a 	mov	r4,r16
  115bb8:	01400304 	movi	r5,12
  115bbc:	0103f1c0 	call	103f1c <__mulsi3>
  115bc0:	8885883a 	add	r2,r17,r2
  {
    if (!alt_fd_list[i].dev)
  115bc4:	10c00017 	ldw	r3,0(r2)
  115bc8:	183ff81e 	bne	r3,zero,115bac <black_to_red_frame+0xfe115bac>
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
  115bcc:	00c004b4 	movhi	r3,18
  115bd0:	18e1f704 	addi	r3,r3,-30756
  115bd4:	19000017 	ldw	r4,0(r3)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
  115bd8:	14c00015 	stw	r19,0(r2)
      if (i > alt_max_fd)
  115bdc:	2400010e 	bge	r4,r16,115be4 <alt_get_fd+0x68>
      {
        alt_max_fd = i;
  115be0:	1c000015 	stw	r16,0(r3)
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
  115be4:	8005883a 	mov	r2,r16
  115be8:	dfc00417 	ldw	ra,16(sp)
  115bec:	dcc00317 	ldw	r19,12(sp)
  115bf0:	dc800217 	ldw	r18,8(sp)
  115bf4:	dc400117 	ldw	r17,4(sp)
  115bf8:	dc000017 	ldw	r16,0(sp)
  115bfc:	dec00504 	addi	sp,sp,20
  115c00:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
  115c04:	043ffa04 	movi	r16,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
  115c08:	8005883a 	mov	r2,r16
  115c0c:	dfc00417 	ldw	ra,16(sp)
  115c10:	dcc00317 	ldw	r19,12(sp)
  115c14:	dc800217 	ldw	r18,8(sp)
  115c18:	dc400117 	ldw	r17,4(sp)
  115c1c:	dc000017 	ldw	r16,0(sp)
  115c20:	dec00504 	addi	sp,sp,20
  115c24:	f800283a 	ret

00115c28 <atexit>:
  115c28:	200b883a 	mov	r5,r4
  115c2c:	000d883a 	mov	r6,zero
  115c30:	0009883a 	mov	r4,zero
  115c34:	000f883a 	mov	r7,zero
  115c38:	0115cf01 	jmpi	115cf0 <__register_exitproc>

00115c3c <exit>:
  115c3c:	defffe04 	addi	sp,sp,-8
  115c40:	000b883a 	mov	r5,zero
  115c44:	dc000015 	stw	r16,0(sp)
  115c48:	dfc00115 	stw	ra,4(sp)
  115c4c:	2021883a 	mov	r16,r4
  115c50:	0115e0c0 	call	115e0c <__call_exitprocs>
  115c54:	008004b4 	movhi	r2,18
  115c58:	10a1f304 	addi	r2,r2,-30772
  115c5c:	11000017 	ldw	r4,0(r2)
  115c60:	20800f17 	ldw	r2,60(r4)
  115c64:	10000126 	beq	r2,zero,115c6c <exit+0x30>
  115c68:	103ee83a 	callr	r2
  115c6c:	8009883a 	mov	r4,r16
  115c70:	0115fb00 	call	115fb0 <_exit>

00115c74 <memcmp>:
  115c74:	01c000c4 	movi	r7,3
  115c78:	3980192e 	bgeu	r7,r6,115ce0 <memcmp+0x6c>
  115c7c:	2144b03a 	or	r2,r4,r5
  115c80:	11c4703a 	and	r2,r2,r7
  115c84:	10000f26 	beq	r2,zero,115cc4 <memcmp+0x50>
  115c88:	21c00003 	ldbu	r7,0(r4)
  115c8c:	28800003 	ldbu	r2,0(r5)
  115c90:	3880151e 	bne	r7,r2,115ce8 <memcmp+0x74>
  115c94:	30ffff84 	addi	r3,r6,-2
  115c98:	01bfffc4 	movi	r6,-1
  115c9c:	00000406 	br	115cb0 <memcmp+0x3c>
  115ca0:	21c00003 	ldbu	r7,0(r4)
  115ca4:	28800003 	ldbu	r2,0(r5)
  115ca8:	18ffffc4 	addi	r3,r3,-1
  115cac:	38800e1e 	bne	r7,r2,115ce8 <memcmp+0x74>
  115cb0:	21000044 	addi	r4,r4,1
  115cb4:	29400044 	addi	r5,r5,1
  115cb8:	19bff91e 	bne	r3,r6,115ca0 <black_to_red_frame+0xfe115ca0>
  115cbc:	0005883a 	mov	r2,zero
  115cc0:	f800283a 	ret
  115cc4:	20c00017 	ldw	r3,0(r4)
  115cc8:	28800017 	ldw	r2,0(r5)
  115ccc:	1880041e 	bne	r3,r2,115ce0 <memcmp+0x6c>
  115cd0:	31bfff04 	addi	r6,r6,-4
  115cd4:	21000104 	addi	r4,r4,4
  115cd8:	29400104 	addi	r5,r5,4
  115cdc:	39bff936 	bltu	r7,r6,115cc4 <black_to_red_frame+0xfe115cc4>
  115ce0:	303fe91e 	bne	r6,zero,115c88 <black_to_red_frame+0xfe115c88>
  115ce4:	003ff506 	br	115cbc <black_to_red_frame+0xfe115cbc>
  115ce8:	3885c83a 	sub	r2,r7,r2
  115cec:	f800283a 	ret

00115cf0 <__register_exitproc>:
  115cf0:	defffa04 	addi	sp,sp,-24
  115cf4:	008004b4 	movhi	r2,18
  115cf8:	10a1f304 	addi	r2,r2,-30772
  115cfc:	dc000315 	stw	r16,12(sp)
  115d00:	14000017 	ldw	r16,0(r2)
  115d04:	dc400415 	stw	r17,16(sp)
  115d08:	dfc00515 	stw	ra,20(sp)
  115d0c:	80805217 	ldw	r2,328(r16)
  115d10:	2023883a 	mov	r17,r4
  115d14:	10003a26 	beq	r2,zero,115e00 <__register_exitproc+0x110>
  115d18:	10c00117 	ldw	r3,4(r2)
  115d1c:	020007c4 	movi	r8,31
  115d20:	40c0190e 	bge	r8,r3,115d88 <__register_exitproc+0x98>
  115d24:	00800434 	movhi	r2,16
  115d28:	108fd104 	addi	r2,r2,16196
  115d2c:	1000061e 	bne	r2,zero,115d48 <__register_exitproc+0x58>
  115d30:	00bfffc4 	movi	r2,-1
  115d34:	dfc00517 	ldw	ra,20(sp)
  115d38:	dc400417 	ldw	r17,16(sp)
  115d3c:	dc000317 	ldw	r16,12(sp)
  115d40:	dec00604 	addi	sp,sp,24
  115d44:	f800283a 	ret
  115d48:	01006404 	movi	r4,400
  115d4c:	d9400015 	stw	r5,0(sp)
  115d50:	d9800115 	stw	r6,4(sp)
  115d54:	d9c00215 	stw	r7,8(sp)
  115d58:	0103f440 	call	103f44 <malloc>
  115d5c:	d9400017 	ldw	r5,0(sp)
  115d60:	d9800117 	ldw	r6,4(sp)
  115d64:	d9c00217 	ldw	r7,8(sp)
  115d68:	103ff126 	beq	r2,zero,115d30 <black_to_red_frame+0xfe115d30>
  115d6c:	81005217 	ldw	r4,328(r16)
  115d70:	10000115 	stw	zero,4(r2)
  115d74:	0007883a 	mov	r3,zero
  115d78:	11000015 	stw	r4,0(r2)
  115d7c:	80805215 	stw	r2,328(r16)
  115d80:	10006215 	stw	zero,392(r2)
  115d84:	10006315 	stw	zero,396(r2)
  115d88:	88000d1e 	bne	r17,zero,115dc0 <__register_exitproc+0xd0>
  115d8c:	19000084 	addi	r4,r3,2
  115d90:	2109883a 	add	r4,r4,r4
  115d94:	18c00044 	addi	r3,r3,1
  115d98:	2109883a 	add	r4,r4,r4
  115d9c:	10c00115 	stw	r3,4(r2)
  115da0:	1105883a 	add	r2,r2,r4
  115da4:	11400015 	stw	r5,0(r2)
  115da8:	0005883a 	mov	r2,zero
  115dac:	dfc00517 	ldw	ra,20(sp)
  115db0:	dc400417 	ldw	r17,16(sp)
  115db4:	dc000317 	ldw	r16,12(sp)
  115db8:	dec00604 	addi	sp,sp,24
  115dbc:	f800283a 	ret
  115dc0:	18c9883a 	add	r4,r3,r3
  115dc4:	2109883a 	add	r4,r4,r4
  115dc8:	1109883a 	add	r4,r2,r4
  115dcc:	21802215 	stw	r6,136(r4)
  115dd0:	01800044 	movi	r6,1
  115dd4:	12006217 	ldw	r8,392(r2)
  115dd8:	30cc983a 	sll	r6,r6,r3
  115ddc:	4190b03a 	or	r8,r8,r6
  115de0:	12006215 	stw	r8,392(r2)
  115de4:	21c04215 	stw	r7,264(r4)
  115de8:	01000084 	movi	r4,2
  115dec:	893fe71e 	bne	r17,r4,115d8c <black_to_red_frame+0xfe115d8c>
  115df0:	11006317 	ldw	r4,396(r2)
  115df4:	218cb03a 	or	r6,r4,r6
  115df8:	11806315 	stw	r6,396(r2)
  115dfc:	003fe306 	br	115d8c <black_to_red_frame+0xfe115d8c>
  115e00:	80805304 	addi	r2,r16,332
  115e04:	80805215 	stw	r2,328(r16)
  115e08:	003fc306 	br	115d18 <black_to_red_frame+0xfe115d18>

00115e0c <__call_exitprocs>:
  115e0c:	008004b4 	movhi	r2,18
  115e10:	10a1f304 	addi	r2,r2,-30772
  115e14:	10800017 	ldw	r2,0(r2)
  115e18:	defff304 	addi	sp,sp,-52
  115e1c:	df000b15 	stw	fp,44(sp)
  115e20:	d8800015 	stw	r2,0(sp)
  115e24:	10805204 	addi	r2,r2,328
  115e28:	dd400815 	stw	r21,32(sp)
  115e2c:	dfc00c15 	stw	ra,48(sp)
  115e30:	ddc00a15 	stw	r23,40(sp)
  115e34:	dd800915 	stw	r22,36(sp)
  115e38:	dd000715 	stw	r20,28(sp)
  115e3c:	dcc00615 	stw	r19,24(sp)
  115e40:	dc800515 	stw	r18,20(sp)
  115e44:	dc400415 	stw	r17,16(sp)
  115e48:	dc000315 	stw	r16,12(sp)
  115e4c:	d9000115 	stw	r4,4(sp)
  115e50:	2839883a 	mov	fp,r5
  115e54:	d8800215 	stw	r2,8(sp)
  115e58:	057fffc4 	movi	r21,-1
  115e5c:	d8800017 	ldw	r2,0(sp)
  115e60:	14805217 	ldw	r18,328(r2)
  115e64:	90001826 	beq	r18,zero,115ec8 <__call_exitprocs+0xbc>
  115e68:	ddc00217 	ldw	r23,8(sp)
  115e6c:	90c00117 	ldw	r3,4(r18)
  115e70:	1c3fffc4 	addi	r16,r3,-1
  115e74:	80001116 	blt	r16,zero,115ebc <__call_exitprocs+0xb0>
  115e78:	18c00044 	addi	r3,r3,1
  115e7c:	8427883a 	add	r19,r16,r16
  115e80:	18c7883a 	add	r3,r3,r3
  115e84:	95802204 	addi	r22,r18,136
  115e88:	9ce7883a 	add	r19,r19,r19
  115e8c:	18c7883a 	add	r3,r3,r3
  115e90:	b4e7883a 	add	r19,r22,r19
  115e94:	90e3883a 	add	r17,r18,r3
  115e98:	e0001726 	beq	fp,zero,115ef8 <__call_exitprocs+0xec>
  115e9c:	8c87c83a 	sub	r3,r17,r18
  115ea0:	b0c7883a 	add	r3,r22,r3
  115ea4:	18c01e17 	ldw	r3,120(r3)
  115ea8:	1f001326 	beq	r3,fp,115ef8 <__call_exitprocs+0xec>
  115eac:	843fffc4 	addi	r16,r16,-1
  115eb0:	9cffff04 	addi	r19,r19,-4
  115eb4:	8c7fff04 	addi	r17,r17,-4
  115eb8:	857ff71e 	bne	r16,r21,115e98 <black_to_red_frame+0xfe115e98>
  115ebc:	00800434 	movhi	r2,16
  115ec0:	108fd604 	addi	r2,r2,16216
  115ec4:	10002a1e 	bne	r2,zero,115f70 <__call_exitprocs+0x164>
  115ec8:	dfc00c17 	ldw	ra,48(sp)
  115ecc:	df000b17 	ldw	fp,44(sp)
  115ed0:	ddc00a17 	ldw	r23,40(sp)
  115ed4:	dd800917 	ldw	r22,36(sp)
  115ed8:	dd400817 	ldw	r21,32(sp)
  115edc:	dd000717 	ldw	r20,28(sp)
  115ee0:	dcc00617 	ldw	r19,24(sp)
  115ee4:	dc800517 	ldw	r18,20(sp)
  115ee8:	dc400417 	ldw	r17,16(sp)
  115eec:	dc000317 	ldw	r16,12(sp)
  115ef0:	dec00d04 	addi	sp,sp,52
  115ef4:	f800283a 	ret
  115ef8:	91000117 	ldw	r4,4(r18)
  115efc:	88c00017 	ldw	r3,0(r17)
  115f00:	213fffc4 	addi	r4,r4,-1
  115f04:	24001526 	beq	r4,r16,115f5c <__call_exitprocs+0x150>
  115f08:	88000015 	stw	zero,0(r17)
  115f0c:	183fe726 	beq	r3,zero,115eac <black_to_red_frame+0xfe115eac>
  115f10:	00800044 	movi	r2,1
  115f14:	1408983a 	sll	r4,r2,r16
  115f18:	91406217 	ldw	r5,392(r18)
  115f1c:	95000117 	ldw	r20,4(r18)
  115f20:	214a703a 	and	r5,r4,r5
  115f24:	28000b26 	beq	r5,zero,115f54 <__call_exitprocs+0x148>
  115f28:	91406317 	ldw	r5,396(r18)
  115f2c:	2148703a 	and	r4,r4,r5
  115f30:	20000c1e 	bne	r4,zero,115f64 <__call_exitprocs+0x158>
  115f34:	99400017 	ldw	r5,0(r19)
  115f38:	d9000117 	ldw	r4,4(sp)
  115f3c:	183ee83a 	callr	r3
  115f40:	90c00117 	ldw	r3,4(r18)
  115f44:	1d3fc51e 	bne	r3,r20,115e5c <black_to_red_frame+0xfe115e5c>
  115f48:	b8c00017 	ldw	r3,0(r23)
  115f4c:	1cbfd726 	beq	r3,r18,115eac <black_to_red_frame+0xfe115eac>
  115f50:	003fc206 	br	115e5c <black_to_red_frame+0xfe115e5c>
  115f54:	183ee83a 	callr	r3
  115f58:	003ff906 	br	115f40 <black_to_red_frame+0xfe115f40>
  115f5c:	94000115 	stw	r16,4(r18)
  115f60:	003fea06 	br	115f0c <black_to_red_frame+0xfe115f0c>
  115f64:	99000017 	ldw	r4,0(r19)
  115f68:	183ee83a 	callr	r3
  115f6c:	003ff406 	br	115f40 <black_to_red_frame+0xfe115f40>
  115f70:	90c00117 	ldw	r3,4(r18)
  115f74:	1800081e 	bne	r3,zero,115f98 <__call_exitprocs+0x18c>
  115f78:	90c00017 	ldw	r3,0(r18)
  115f7c:	18000a26 	beq	r3,zero,115fa8 <__call_exitprocs+0x19c>
  115f80:	9009883a 	mov	r4,r18
  115f84:	b8c00015 	stw	r3,0(r23)
  115f88:	0103f580 	call	103f58 <free>
  115f8c:	bc800017 	ldw	r18,0(r23)
  115f90:	903fb61e 	bne	r18,zero,115e6c <black_to_red_frame+0xfe115e6c>
  115f94:	003fcc06 	br	115ec8 <black_to_red_frame+0xfe115ec8>
  115f98:	90c00017 	ldw	r3,0(r18)
  115f9c:	902f883a 	mov	r23,r18
  115fa0:	1825883a 	mov	r18,r3
  115fa4:	003ffa06 	br	115f90 <black_to_red_frame+0xfe115f90>
  115fa8:	0007883a 	mov	r3,zero
  115fac:	003ffb06 	br	115f9c <black_to_red_frame+0xfe115f9c>

00115fb0 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  115fb0:	20000226 	beq	r4,zero,115fbc <_exit+0xc>
    ALT_SIM_FAIL();
  115fb4:	002af070 	cmpltui	zero,zero,43969
  115fb8:	003fff06 	br	115fb8 <black_to_red_frame+0xfe115fb8>
  } else {
    ALT_SIM_PASS();
  115fbc:	002af0b0 	cmpltui	zero,zero,43970
  115fc0:	003ffd06 	br	115fb8 <black_to_red_frame+0xfe115fb8>
