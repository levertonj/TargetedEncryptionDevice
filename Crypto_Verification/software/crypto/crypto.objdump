
crypto.elf:     file format elf32-littlenios2
crypto.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x0008031c

Program Header:
    LOAD off    0x00001000 vaddr 0x00080000 paddr 0x00080000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00080020 paddr 0x00080020 align 2**12
         filesz 0x00010928 memsz 0x00010928 flags r-x
    LOAD off    0x00011948 vaddr 0x00090948 paddr 0x00092438 align 2**12
         filesz 0x00001af0 memsz 0x00001af0 flags rw-
    LOAD off    0x00013f28 vaddr 0x00093f28 paddr 0x00093f28 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-
    LOAD off    0x00014000 vaddr 0x00004000 paddr 0x0009408c align 2**12
         filesz 0x00001000 memsz 0x00001000 flags rw-
    LOAD off    0x00015000 vaddr 0x00008000 paddr 0x0009508c align 2**12
         filesz 0x00002000 memsz 0x00002000 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00080000  00080000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   000002fc  00080020  00080020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fa60  0008031c  0008031c  0000131c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000bcc  0008fd7c  0008fd7c  00010d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af0  00090948  00092438  00011948  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  00093f28  00093f28  00013f28  2**2
                  ALLOC, SMALL_DATA
  6 .stack_heap   00000000  00000000  00000000  00017000  2**0
                  CONTENTS
  7 .outgoing_memory 00001000  00004000  0009408c  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .incoming_memory 00002000  00008000  0009508c  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .instruction_memory 00000000  0009708c  0009708c  00017000  2**0
                  CONTENTS
 10 .comment      00000039  00000000  00000000  00017000  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000d60  00000000  00000000  00017040  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_info   00025659  00000000  00000000  00017da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00009a88  00000000  00000000  0003d3f9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000b868  00000000  00000000  00046e81  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  00001df4  00000000  00000000  000526ec  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003616  00000000  00000000  000544e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_loc    000191c4  00000000  00000000  00057af6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_alt_sim_info 00000010  00000000  00000000  00070cbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_ranges 00001548  00000000  00000000  00070cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .thread_model 00000003  00000000  00000000  000755ca  2**0
                  CONTENTS, READONLY
 21 .cpu          0000000c  00000000  00000000  000755cd  2**0
                  CONTENTS, READONLY
 22 .qsys         00000001  00000000  00000000  000755d9  2**0
                  CONTENTS, READONLY
 23 .simulation_enabled 00000001  00000000  00000000  000755da  2**0
                  CONTENTS, READONLY
 24 .sysid_hash   00000004  00000000  00000000  000755db  2**0
                  CONTENTS, READONLY
 25 .sysid_base   00000004  00000000  00000000  000755df  2**0
                  CONTENTS, READONLY
 26 .sysid_time   00000004  00000000  00000000  000755e3  2**0
                  CONTENTS, READONLY
 27 .stderr_dev   0000000b  00000000  00000000  000755e7  2**0
                  CONTENTS, READONLY
 28 .stdin_dev    0000000b  00000000  00000000  000755f2  2**0
                  CONTENTS, READONLY
 29 .stdout_dev   0000000b  00000000  00000000  000755fd  2**0
                  CONTENTS, READONLY
 30 .sopc_system_name 0000000b  00000000  00000000  00075608  2**0
                  CONTENTS, READONLY
 31 .quartus_project_dir 0000003f  00000000  00000000  00075613  2**0
                  CONTENTS, READONLY
 32 .jdi          000040e5  00000000  00000000  00075652  2**0
                  CONTENTS, READONLY
 33 .sopcinfo     0005ca86  00000000  00000000  00079737  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00080000 l    d  .entry	00000000 .entry
00080020 l    d  .exceptions	00000000 .exceptions
0008031c l    d  .text	00000000 .text
0008fd7c l    d  .rodata	00000000 .rodata
00090948 l    d  .rwdata	00000000 .rwdata
00093f28 l    d  .bss	00000000 .bss
00000000 l    d  .stack_heap	00000000 .stack_heap
00004000 l    d  .outgoing_memory	00000000 .outgoing_memory
00008000 l    d  .incoming_memory	00000000 .incoming_memory
0009708c l    d  .instruction_memory	00000000 .instruction_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../crypto_bsp//obj/HAL/src/crt0.o
00080354 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
00080260 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0008246c l     F .text	00000070 udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000907a2 l     O .rodata	00000010 zeroes.4155
000907b2 l     O .rodata	00000010 blanks.4154
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00084b48 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00086620 l     F .text	00000008 __fp_lock
00086628 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00090948 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00090d8c l     O .rwdata	00000020 lc_ctype_charset
00090d6c l     O .rwdata	00000020 lc_message_charset
00090dac l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000907e4 l     O .rodata	0000000c p05.2652
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00089b04 l     F .text	000000fc __sprint_r.part.0
00090918 l     O .rodata	00000010 blanks.4099
00090908 l     O .rodata	00000010 zeroes.4100
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 alt_close.c
00000000 l    df *ABS*	00000000 alt_dev.c
0008e3dc l     F .text	00000008 alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
00000000 l    df *ABS*	00000000 alt_isatty.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_lseek.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00092428 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00091394 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0008eaa4 l     F .text	00000058 altera_avalon_jtag_uart_timeout
0008eafc l     F .text	00000104 altera_avalon_jtag_uart_irq
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0008efec l     F .text	0000003c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_ts.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_vars.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0008f428 l     F .text	00000088 alt_open_fd.constprop.0
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00082724 g     F .text	0000001c putchar
00000000 g       *ABS*	00000000 __alt_mem_stack_heap
00089014 g     F .text	00000074 _mprec_log10
00089100 g     F .text	00000088 __any_on
0008b768 g     F .text	00000064 _isatty_r
000907f0 g     O .rodata	00000028 __mprec_tinytens
0008e6cc g     F .text	00000060 alt_main
00082740 g     F .text	000000b8 _puts_r
00093f8c g     O .bss	00000100 alt_irq
0008b7cc g     F .text	0000006c _lseek_r
00092438 g       *ABS*	00000000 __flash_rwdata_start
0008cfa8 g     F .text	00000084 .hidden __eqdf2
00000000 g       *ABS*	00000000 __alt_heap_start
000826e0 g     F .text	0000003c printf
0008b8a4 g     F .text	0000009c _wcrtomb_r
000899fc g     F .text	0000005c __sseek
000866cc g     F .text	0000019c __sinit
0008b084 g     F .text	00000180 __swbuf_r
000873dc g     F .text	00000070 _setlocale_r
0008663c g     F .text	00000078 __sfmoreglue
0008e730 g     F .text	00000004 __malloc_unlock
00093f50 g     O .bss	00000004 altera_avalon_timer_ts_freq
00087f10 g     F .text	0000013c memmove
000866b4 g     F .text	00000018 _cleanup
00088160 g     F .text	000000a8 _Balloc
0008d02c g     F .text	000000d8 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
00080000 g     F .entry	0000000c __reset
00080020 g       *ABS*	00000000 __flash_exceptions_start
0008b700 g     F .text	00000068 _fstat_r
00093f40 g     O .bss	00000004 errno
00089978 g     F .text	00000008 __seofread
00093f48 g     O .bss	00000004 alt_argv
0009a3f4 g       *ABS*	00000000 _gp
000911ec g     O .rwdata	00000180 alt_fd_list
0008271c g     F .text	00000008 _putchar_r
0008f7d8 g     F .text	00000090 alt_find_dev
000825a8 g     F .text	0000010c memcpy
00086630 g     F .text	0000000c _cleanup_r
00082250 g     F .text	000000d0 .hidden __floatsidf
0008f4b0 g     F .text	00000078 alt_io_redirect
0008d104 g     F .text	000000ec .hidden __ltdf2
0008fd7c g       *ABS*	00000000 __DTOR_END__
000827f8 g     F .text	00000014 puts
00089858 g     F .text	00000068 __fpclassifyd
00088f74 g     F .text	000000a0 __ratio
0008b060 g     F .text	00000024 __vfiprintf_internal
0008ed28 g     F .text	0000013c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
000826b4 g     F .text	0000002c _printf_r
00082570 g     F .text	00000008 .hidden __udivsi3
0008e478 g     F .text	000000a8 isatty
00090840 g     O .rodata	000000c8 __mprec_tens
0008744c g     F .text	0000000c __locale_charset
00093f3c g     O .bss	00000004 __malloc_top_pad
00080af0 g     F .text	00000dc4 CryptoProcedure
00092400 g     O .rwdata	00000004 __mb_cur_max
0008747c g     F .text	0000000c _localeconv_r
00088590 g     F .text	0000003c __i2b
00086dd0 g     F .text	000004ac __sfvwrite_r
000898c0 g     F .text	00000064 _sbrk_r
0008b838 g     F .text	0000006c _read_r
00092410 g     O .rwdata	00000004 alt_max_fd
0008b3c8 g     F .text	00000128 _fclose_r
000865f0 g     F .text	00000030 fflush
00093f38 g     O .bss	00000004 __malloc_max_sbrked_mem
0008c72c g     F .text	0000087c .hidden __adddf3
00009800 g     O .incoming_memory	00000800 decrypted_B
00088d40 g     F .text	000000f0 __b2d
0008c0f8 g     F .text	00000634 .hidden __umoddi3
0008e634 g     F .text	00000098 lseek
000923f8 g     O .rwdata	00000004 _global_impure_ptr
000892f4 g     F .text	00000564 _realloc_r
0009408c g       *ABS*	00000000 __bss_end
0008f3b0 g     F .text	00000078 alt_iic_isr_register
0008f6e0 g     F .text	000000f0 alt_tick
0008baa4 g     F .text	00000654 .hidden __udivdi3
0008b504 g     F .text	00000184 _fputwc_r
00090818 g     O .rodata	00000028 __mprec_bigtens
00088374 g     F .text	00000104 __s2b
00082320 g     F .text	000000a0 .hidden __floatunsidf
000923f4 g     O .rwdata	00000004 Crypto
00088ad0 g     F .text	00000060 __mcmp
00086994 g     F .text	00000018 __fp_lock_all
0008f398 g     F .text	00000018 alt_ic_irq_enabled
0008f6ac g     F .text	00000034 alt_alarm_stop
00093f58 g     O .bss	00000004 alt_irq_active
000802b8 g     F .exceptions	00000064 alt_irq_handler
0009136c g     O .rwdata	00000028 alt_dev_null
00000000 g       .debug_aranges	00000000 alt_exception_muldiv
00080000 g       *ABS*	00000000 __alt_mem_instruction_memory
0008f1cc g     F .text	00000004 alt_dcache_flush_all
00088478 g     F .text	00000068 __hi0bits
0008e278 g     F .text	00000080 .hidden __fixdfsi
00092438 g       *ABS*	00000000 __ram_rwdata_end
00092414 g     O .rwdata	00000008 alt_dev_list
0008e8d8 g     F .text	000000f8 write
00089188 g     F .text	000000a0 _putc_r
0008f128 g     F .text	00000010 alt_timestamp_freq
00090948 g       *ABS*	00000000 __ram_rodata_end
0008e3e4 g     F .text	00000094 fstat
0008d104 g     F .text	000000ec .hidden __ledf2
00008000 g       *ABS*	00000000 __alt_mem_incoming_memory
00088838 g     F .text	00000148 __pow5mult
00089c18 g     F .text	00001448 ___vfiprintf_internal_r
00093f30 g     O .bss	00000004 __nlocale_changed
00082578 g     F .text	00000008 .hidden __umodsi3
00000000 g       *ABS*	00000000 end
0008ec00 g     F .text	00000080 altera_avalon_jtag_uart_init
0008fd7c g       *ABS*	00000000 __CTOR_LIST__
00004000 g       *ABS*	00000000 __alt_stack_pointer
0008f028 g     F .text	00000050 alt_avalon_timer_sc_init
000823c0 g     F .text	000000ac .hidden __clzsi2
0008ee64 g     F .text	00000188 altera_avalon_jtag_uart_write
00086984 g     F .text	00000004 __sfp_lock_acquire
00087e28 g     F .text	000000e8 memchr
00082898 g     F .text	00002154 ___vfprintf_internal_r
00086b00 g     F .text	000002d0 _free_r
00087458 g     F .text	00000010 __locale_mb_cur_max
0008fbc4 g     F .text	000001a4 __call_exitprocs
00093f2c g     O .bss	00000004 __mlocale_changed
00092404 g     O .rwdata	00000004 __malloc_sbrk_base
0008031c g     F .text	0000003c _start
00093f60 g     O .bss	00000004 _alt_tick_rate
00088980 g     F .text	00000150 __lshift
00008000 g     O .incoming_memory	00000800 plaintext_A
00093f5c g     O .bss	00000004 _alt_nticks
0008e734 g     F .text	000000fc read
0008e9f0 g     F .text	00000078 alt_sys_init
0008faa8 g     F .text	0000011c __register_exitproc
000885cc g     F .text	0000026c __multiply
0008ec80 g     F .text	00000034 altera_avalon_jtag_uart_close
00082580 g     F .text	00000028 .hidden __mulsi3
00090948 g       *ABS*	00000000 __ram_rwdata_start
0008fd7c g       *ABS*	00000000 __ram_rodata_start
00093f64 g     O .bss	00000028 __malloc_current_mallinfo
00088e30 g     F .text	00000144 __d2b
00004800 g     O .outgoing_memory	00000800 encrypted_B
0008ea68 g     F .text	00000010 altera_avalon_jtag_uart_read_fd
0008f934 g     F .text	000000ac alt_get_fd
0008b28c g     F .text	00000064 _close_r
0008fa2c g     F .text	0000007c memcmp
0008ea88 g     F .text	00000010 altera_avalon_jtag_uart_close_fd
00000000 g       *ABS*	00000000 __alt_stack_base
0008ea98 g     F .text	0000000c altera_avalon_jtag_uart_ioctl_fd
00084a10 g     F .text	00000138 __swsetup_r
000818b4 g     F .text	0000099c .hidden __divdf3
00086868 g     F .text	0000011c __sfp
00089088 g     F .text	00000078 __copybits
00090de4 g     O .rwdata	00000408 __malloc_av_
00086990 g     F .text	00000004 __sinit_lock_release
0008d1f0 g     F .text	00000800 .hidden __muldf3
00089924 g     F .text	00000054 __sread
0008f868 g     F .text	000000cc alt_find_file
0008f1d0 g     F .text	00000078 alt_dev_llist_insert
0008e72c g     F .text	00000004 __malloc_lock
0008e88c g     F .text	0000004c sbrk
000863ac g     F .text	00000244 _fflush_r
0008b2f0 g     F .text	000000d8 _calloc_r
00093f28 g       *ABS*	00000000 __bss_start
0008804c g     F .text	00000114 memset
00080358 g     F .text	00000798 main
00093f44 g     O .bss	00000004 alt_envp
00093f34 g     O .bss	00000004 __malloc_max_total_mem
0008ea78 g     F .text	00000010 altera_avalon_jtag_uart_write_fd
0008b204 g     F .text	0000001c __swbuf
00089a58 g     F .text	00000008 __sclose
00004000 g       *ABS*	00000000 __alt_heap_limit
0008b4f0 g     F .text	00000014 fclose
0008f078 g     F .text	00000054 alt_timestamp_start
00084d70 g     F .text	0000163c _dtoa_r
00087664 g     F .text	000007c4 _malloc_r
0008ba18 g     F .text	00000030 __ascii_wctomb
00092424 g     O .rwdata	00000004 alt_errno
0008727c g     F .text	000000a8 _fwalk
00089228 g     F .text	000000cc putc
000824dc g     F .text	00000048 .hidden __divsi3
000869c4 g     F .text	0000013c _malloc_trim_r
0008fd7c g       *ABS*	00000000 __CTOR_END__
00089a60 g     F .text	000000a4 strcmp
0008fd7c g       *ABS*	00000000 __flash_rodata_start
0008fd7c g       *ABS*	00000000 __DTOR_LIST__
0008cfa8 g     F .text	00000084 .hidden __nedf2
0008e9d0 g     F .text	00000020 alt_irq_init
0008e830 g     F .text	0000005c alt_release_fd
0009065c g     O .rodata	00000100 .hidden __clz_tab
00093f28 g     O .bss	00000004 _PathLocale
0008f9e0 g     F .text	00000014 atexit
0008b220 g     F .text	0000006c _write_r
00087488 g     F .text	0000001c setlocale
000923fc g     O .rwdata	00000004 _impure_ptr
00093f4c g     O .bss	00000004 alt_argc
00093f54 g     O .bss	00000004 altera_avalon_timer_ts_base
0008f2ac g     F .text	00000064 _do_dtors
00087474 g     F .text	00000008 __locale_cjk_lang
00008800 g     O .incoming_memory	00000800 decrypted_A
00004000 g     O .outgoing_memory	00000800 encrypted_A
00080020 g       .exceptions	00000000 alt_irq_entry
00088ce0 g     F .text	00000060 __ulp
000869ac g     F .text	00000018 __fp_unlock_all
0009241c g     O .rwdata	00000008 alt_fs_list
00080020 g       *ABS*	00000000 __ram_exceptions_start
000874a4 g     F .text	0000000c localeconv
0008f0cc g     F .text	0000005c alt_timestamp
0008f314 g     F .text	00000004 alt_ic_isr_register
00092438 g       *ABS*	00000000 _edata
00000000 g       *ABS*	00000000 _end
0008031c g       *ABS*	00000000 __ram_exceptions_end
0008ecb4 g     F .text	00000074 altera_avalon_jtag_uart_ioctl
0008f358 g     F .text	00000040 alt_ic_irq_disable
00089980 g     F .text	0000007c __swrite
00092408 g     O .rwdata	00000004 __malloc_trim_threshold
0008f7d0 g     F .text	00000008 altera_nios2_qsys_irq_init
00087468 g     F .text	0000000c __locale_msgcharset
0008f9f4 g     F .text	00000038 exit
00087324 g     F .text	000000b8 _fwalk_reent
00088b30 g     F .text	000001b0 __mdiff
00082524 g     F .text	0000004c .hidden __modsi3
00004000 g       *ABS*	00000000 __alt_data_end
00080020 g     F .exceptions	00000000 alt_exception
00086988 g     F .text	00000004 __sfp_lock_release
0008fd68 g     F .text	00000014 _exit
0008f138 g     F .text	00000094 alt_alarm_start
000874b0 g     F .text	000001b4 __smakebuf_r
0008280c g     F .text	0000008c strlen
0008f528 g     F .text	00000184 open
0008d02c g     F .text	000000d8 .hidden __gedf2
0009240c g     O .rwdata	00000004 __wctomb
00089c00 g     F .text	00000018 __sprint_r
0008f310 g     F .text	00000004 alt_icache_flush_all
0009242c g     O .rwdata	00000004 alt_priority_mask
0008f318 g     F .text	00000040 alt_ic_irq_enable
000849ec g     F .text	00000024 __vfprintf_internal
0008ba48 g     F .text	0000005c _wctomb_r
0008d9f0 g     F .text	00000888 .hidden __subdf3
000884e0 g     F .text	000000b0 __lo0bits
00092430 g     O .rwdata	00000008 alt_alarm_list
0008f248 g     F .text	00000064 _do_ctors
0008b940 g     F .text	000000d8 wcrtomb
0008e2f8 g     F .text	000000e4 close
00004000 g       *ABS*	00000000 __alt_mem_outgoing_memory
00009000 g     O .incoming_memory	00000800 plaintext_B
0008e520 g     F .text	00000114 alt_load
0008b688 g     F .text	00000078 fputwc
00000000  w      *UND*	00000000 free
0008698c g     F .text	00000004 __sinit_lock_acquire
00088230 g     F .text	00000144 __multadd
00088208 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00080000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   80000:	00400234 	movhi	at,8
    ori r1, r1, %lo(_start)
   80004:	0840c714 	ori	at,at,796
    jmp r1
   80008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00080020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   80020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   80024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   80028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   8002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   80030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   80034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   80038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   8003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   80040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   80044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   80048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   8004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   80050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   80054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   80058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   8005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   80060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   80064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   80068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   8006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   80070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   80074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   80078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   8007c:	10000326 	beq	r2,zero,8008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   80080:	20000226 	beq	r4,zero,8008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   80084:	00802b80 	call	802b8 <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   80088:	00007606 	br	80264 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   8008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   80090:	e8bfff17 	ldw	r2,-4(ea)
        /*
         * Split the instruction into its fields.  We need 4*A, 4*B, and 4*C as
         * offsets to the stack pointer for access to the stored register values.
         */
                             /* r2 = AAAAA,BBBBB,IIIIIIIIIIIIIIII,PPPPPP    */
        roli  r3, r2, 7      /* r3 = BBB,IIIIIIIIIIIIIIII,PPPPPP,AAAAA,BB   */
   80094:	100611fa 	roli	r3,r2,7
        roli  r4, r3, 3      /* r4 = IIIIIIIIIIIIIIII,PPPPPP,AAAAA,BBBBB    */
   80098:	180810fa 	roli	r4,r3,3
        roli  r6, r4, 2      /* r6 = IIIIIIIIIIIIII,PPPPPP,AAAAA,BBBBB,II   */
   8009c:	200c10ba 	roli	r6,r4,2
        srai  r4, r4, 16     /* r4 = (sign-extended) IMM16                  */
   800a0:	2009d43a 	srai	r4,r4,16
        xori  r6, r6, 0x42   /* r6 = CCC,XXXXXX,NNNNN,PPPPPP,AAAAA,bBBBB,cC */
   800a4:	3180109c 	xori	r6,r6,66
        roli  r7, r6, 5      /* r7 = XXXX,NNNNN,PPPPPP,AAAAA,bBBBB,cCCCC,XX */
   800a8:	300e117a 	roli	r7,r6,5
        andi  r5, r2, 0x3f   /* r5 = 00000000000000000000000000,PPPPPP      */
   800ac:	11400fcc 	andi	r5,r2,63
        xori  r3, r3, 0x40
   800b0:	18c0101c 	xori	r3,r3,64
        andi  r3, r3, 0x7c   /* r3 = 0000000000000000000000000,aAAAA,00     */
   800b4:	18c01f0c 	andi	r3,r3,124
        andi  r6, r6, 0x7c   /* r6 = 0000000000000000000000000,bBBBB,00     */
   800b8:	31801f0c 	andi	r6,r6,124
        andi  r7, r7, 0x7c   /* r7 = 0000000000000000000000000,cCCCC,00     */
   800bc:	39c01f0c 	andi	r7,r7,124
         * Save everything on the stack to make it easy for the emulation routines
         * to retrieve the source register operands.  The exception entry code has
         * already saved some of this so we don't need to do it all again.
         */

        addi  sp, sp, -60
   800c0:	defff104 	addi	sp,sp,-60
        stw   zero, 64(sp)   /* Save zero on stack to avoid special case for r0. */
   800c4:	d8001015 	stw	zero,64(sp)
                             /* Register at and r2-r15 have already been saved.  */

        stw   r16,  0(sp)
   800c8:	dc000015 	stw	r16,0(sp)
        stw   r17,  4(sp)
   800cc:	dc400115 	stw	r17,4(sp)
        stw   r18,  8(sp)
   800d0:	dc800215 	stw	r18,8(sp)
        stw   r19, 12(sp)
   800d4:	dcc00315 	stw	r19,12(sp)
        stw   r20, 16(sp)
   800d8:	dd000415 	stw	r20,16(sp)
        stw   r21, 20(sp)
   800dc:	dd400515 	stw	r21,20(sp)
        stw   r22, 24(sp)
   800e0:	dd800615 	stw	r22,24(sp)
        stw   r23, 28(sp)
   800e4:	ddc00715 	stw	r23,28(sp)
                            /* et @ 32 - Has already been changed.*/
                            /* bt @ 36 - Usually isn't an operand.   */
        stw   gp,  40(sp)
   800e8:	de800a15 	stw	gp,40(sp)
        stw   sp,  44(sp)
   800ec:	dec00b15 	stw	sp,44(sp)
        stw   fp,  48(sp)
   800f0:	df000c15 	stw	fp,48(sp)

        /*
         *  Prepare for either multiplication or division loop.
         *  They both loop 32 times.
         */
        movi   r14, 32
   800f4:	03800804 	movi	r14,32
         * Get the operands.
         *
         * It is necessary to check for muli because it uses an I-type instruction
         * format, while the other instructions are have an R-type format.
         */
        add    r3, r3, sp     /* r3 = address of A-operand. */
   800f8:	1ec7883a 	add	r3,r3,sp
        ldw    r3, 0(r3)      /* r3 = A-operand. */
   800fc:	18c00017 	ldw	r3,0(r3)
        movi   r15, 0x24      /* muli opcode (I-type instruction format) */
   80100:	03c00904 	movi	r15,36
        beq    r5, r15, .Lmul_immed /* muli doesn't use the B register as a source */
   80104:	2bc02726 	beq	r5,r15,801a4 <alt_exception+0x184>

        add    r6, r6, sp     /* r6 = address of B-operand.               */
   80108:	36cd883a 	add	r6,r6,sp
        ldw    r6, 0(r6)      /* r6 = B-operand.                          */
   8010c:	31800017 	ldw	r6,0(r6)
                              /* r4 = SSSSSSSSSSSSSSSS,-----IMM16------   */
                              /* IMM16 not needed, align OPX portion      */
                              /* r4 = SSSSSSSSSSSSSSSS,CCCCC,-OPX--,00000 */
        srli   r4, r4, 5      /* r4 = 00000,SSSSSSSSSSSSSSSS,CCCCC,-OPX-- */
   80110:	2008d17a 	srli	r4,r4,5
        andi   r4, r4, 0x3f   /* r4 = 00000000000000000000000000,-OPX--   */
   80114:	21000fcc 	andi	r4,r4,63
         *
         *  This code assumes that OP is not muli (because muli was tested above).
         *  All other multiplies and divides are legal.  Anything else is illegal.
         */

        movi  r8, 0x3a                        /* OP for R-type mul* and div* */
   80118:	02000e84 	movi	r8,58
        bne   r5, r8, .Lnot_muldiv
   8011c:	2a004f1e 	bne	r5,r8,8025c <alt_exception+0x23c>

        /* r15 already is 0x24 */            /* OPX of divu */
        beq   r4, r15, .Ldivide
   80120:	23c00a26 	beq	r4,r15,8014c <alt_exception+0x12c>

        movi  r15,0x27                        /* OPX of mul */
   80124:	03c009c4 	movi	r15,39
        beq   r4, r15, .Lmultiply
   80128:	23c02126 	beq	r4,r15,801b0 <alt_exception+0x190>

        movi  r15,0x07                        /* OPX of mulxuu */
   8012c:	03c001c4 	movi	r15,7
        beq   r4, r15, .Lmultiply
   80130:	23c01f26 	beq	r4,r15,801b0 <alt_exception+0x190>

        movi  r15,0x17                        /* OPX of mulxsu */
   80134:	03c005c4 	movi	r15,23
        beq   r4, r15, .Lmultiply
   80138:	23c01d26 	beq	r4,r15,801b0 <alt_exception+0x190>

        movi  r15,0x1f                        /* OPX of mulxss */
   8013c:	03c007c4 	movi	r15,31
        beq   r4, r15, .Lmultiply
   80140:	23c01b26 	beq	r4,r15,801b0 <alt_exception+0x190>

        movi  r15,0x25                        /* OPX of div */
   80144:	03c00944 	movi	r15,37
        bne   r4, r15, .Lnot_muldiv
   80148:	23c0441e 	bne	r4,r15,8025c <alt_exception+0x23c>
.Ldivide:
        /*
         *  Prepare for division by assuming the result
         *  is unsigned, and storing its "sign" as 0.
         */
        movi   r17, 0
   8014c:	04400004 	movi	r17,0


        /* Which division opcode? */
        xori   r15, r4, 0x25         /* OPX of div */
   80150:	23c0095c 	xori	r15,r4,37
        bne    r15, zero, .Lunsigned_division
   80154:	7800051e 	bne	r15,zero,8016c <alt_exception+0x14c>

        /*
         *  OPX is div.  Determine and store the sign of the quotient.
         *  Then take the absolute value of both operands.
         */
        xor   r17, r3, r6      /* MSB contains sign of quotient */
   80158:	19a2f03a 	xor	r17,r3,r6
        bge   r3, zero, 0f
   8015c:	1800010e 	bge	r3,zero,80164 <alt_exception+0x144>
        sub   r3, zero, r3     /* -r3 */
   80160:	00c7c83a 	sub	r3,zero,r3
0:
        bge   r6, zero, 0f
   80164:	3000010e 	bge	r6,zero,8016c <alt_exception+0x14c>
        sub   r6, zero, r6     /* -r6 */
   80168:	018dc83a 	sub	r6,zero,r6
0:


.Lunsigned_division:
        /* Initialize the unsigned-division loop. */
        movi  r13, 0          /* remainder = 0 */
   8016c:	03400004 	movi	r13,0
        /*
        *       Division:
        *
        *       (remainder:dividend:quotient) <<= 1;
        */
        slli  r13, r13, 1
   80170:	681a907a 	slli	r13,r13,1
        cmplt r15, r3, zero        /* r15 = MSB of r3 */
   80174:	181e803a 	cmplt	r15,r3,zero
        or    r13, r13, r15
   80178:	6bdab03a 	or	r13,r13,r15
        slli  r3, r3, 1
   8017c:	1806907a 	slli	r3,r3,1
        *       {
        *           set LSB of quotient
        *           remainder -= divisor;
        *       }
        */
        bltu  r13, r6, .Ldiv_skip
   80180:	69800236 	bltu	r13,r6,8018c <alt_exception+0x16c>
        ori   r3, r3, 1
   80184:	18c00054 	ori	r3,r3,1
        sub   r13, r13, r6
   80188:	699bc83a 	sub	r13,r13,r6
.Ldiv_skip:

        /*
        *   }
        */
        subi  r14, r14, 1
   8018c:	73bfffc4 	addi	r14,r14,-1
        bne   r14, zero, .Ldivide_loop
   80190:	703ff71e 	bne	r14,zero,80170 <_gp+0xfffe5d7c>

        mov   r9, r3
   80194:	1813883a 	mov	r9,r3
    
        /*
        *  Conditionally negate signed quotient.  If quotient is unsigned,
        *  the sign already is initialized to 0.
        */
        bge   r17, zero, .Lstore_result
   80198:	8800230e 	bge	r17,zero,80228 <alt_exception+0x208>
        sub   r9, zero, r9     /* -r9 */
   8019c:	0253c83a 	sub	r9,zero,r9

        br    .Lstore_result
   801a0:	00002106 	br	80228 <alt_exception+0x208>
        *
        */

.Lmul_immed:
        /* Opcode is muli.  Change it into mul for remainder of algorithm. */
        mov   r7, r6         /* Field B is dest register, not field C. */
   801a4:	300f883a 	mov	r7,r6
        mov   r6, r4         /* Field IMM16 is src2, not field B. */
   801a8:	200d883a 	mov	r6,r4
        movi  r4, 0x27       /* OPX of mul is 0x27 */
   801ac:	010009c4 	movi	r4,39

.Lmultiply:
        /* Initialize the multiplication loop. */
        movi  r9, 0          /* mul_product    = 0 */
   801b0:	02400004 	movi	r9,0
        movi  r10, 0         /* mulxuu_product = 0 */
   801b4:	02800004 	movi	r10,0
        mov   r11, r6        /* save original multiplier for mulxsu and mulxss */
   801b8:	3017883a 	mov	r11,r6
        mov   r12, r6        /* mulxuu_multiplier (will be shifted) */
   801bc:	3019883a 	mov	r12,r6
        movi  r16, 1         /* used to create "rori B,A,1" from "ror B,A,r16" */
   801c0:	04000044 	movi	r16,1

        /*
        *       mul_product <<= 1;
        *       lsb = multiplier & 1;
        */
        slli   r9, r9, 1
   801c4:	4812907a 	slli	r9,r9,1
        andi   r15, r12, 1
   801c8:	63c0004c 	andi	r15,r12,1
        *       if (lsb == 1)
        *       {
        *           mulxuu_product += multiplicand;
        *       }
        */
        beq   r15, zero, .Lmulx_skip
   801cc:	78000326 	beq	r15,zero,801dc <alt_exception+0x1bc>
        add   r10, r10, r3
   801d0:	50d5883a 	add	r10,r10,r3
        cmpltu r15, r10, r3  /* Save the carry from the MSB of mulxuu_product. */
   801d4:	50df803a 	cmpltu	r15,r10,r3
        ror   r15, r15, r16  /* r15 = 0x80000000 on carry, or else 0x00000000 */
   801d8:	7c1e583a 	ror	r15,r15,r16
        *       if (MSB of mul_multiplier == 1)
        *       {
        *           mul_product += multiplicand;
        *       }
        */
        bge   r6, zero, .Lmul_skip
   801dc:	3000010e 	bge	r6,zero,801e4 <alt_exception+0x1c4>
        add   r9, r9, r3
   801e0:	48d3883a 	add	r9,r9,r3
        /*
        *       mulxuu_product >>= 1;           logical shift
        *       mul_multiplier <<= 1;           done with MSB
        *       mulx_multiplier >>= 1;          done with LSB
        */
        srli   r10, r10, 1
   801e4:	5014d07a 	srli	r10,r10,1
        or     r10, r10, r15           /* OR in the saved carry bit. */
   801e8:	53d4b03a 	or	r10,r10,r15
        slli   r6, r6, 1
   801ec:	300c907a 	slli	r6,r6,1
        srli   r12, r12, 1
   801f0:	6018d07a 	srli	r12,r12,1


        /*
        *   }
        */
        subi   r14, r14, 1
   801f4:	73bfffc4 	addi	r14,r14,-1
        bne    r14, zero, .Lmultiply_loop
   801f8:	703ff21e 	bne	r14,zero,801c4 <_gp+0xfffe5dd0>
        *  Select/compute the result based on OPX.
        */


        /* OPX == mul?  Then store. */
        xori  r15, r4, 0x27
   801fc:	23c009dc 	xori	r15,r4,39
        beq   r15, zero, .Lstore_result
   80200:	78000926 	beq	r15,zero,80228 <alt_exception+0x208>

        /* It's one of the mulx.. opcodes.  Move over the result. */
        mov   r9, r10
   80204:	5013883a 	mov	r9,r10

        /* OPX == mulxuu?  Then store. */
        xori  r15, r4, 0x07
   80208:	23c001dc 	xori	r15,r4,7
        beq   r15, zero, .Lstore_result
   8020c:	78000626 	beq	r15,zero,80228 <alt_exception+0x208>

        /* Compute mulxsu
         *
         * mulxsu = mulxuu - ((rA < 0) ? rB : 0);
         */
        bge   r3, zero, .Lmulxsu_skip
   80210:	1800010e 	bge	r3,zero,80218 <alt_exception+0x1f8>
        sub   r9, r9, r11
   80214:	4ad3c83a 	sub	r9,r9,r11
.Lmulxsu_skip:

        /* OPX == mulxsu?  Then store. */
        xori  r15, r4, 0x17
   80218:	23c005dc 	xori	r15,r4,23
        beq   r15, zero, .Lstore_result
   8021c:	78000226 	beq	r15,zero,80228 <alt_exception+0x208>

        /* Compute mulxss
         *
         * mulxss = mulxsu - ((rB < 0) ? rA : 0);
         */
        bge   r11, zero, .Lmulxss_skip
   80220:	5800010e 	bge	r11,zero,80228 <alt_exception+0x208>
        sub   r9, r9, r3
   80224:	48d3c83a 	sub	r9,r9,r3
.Lmulxss_skip:
        /* At this point, assume that OPX is mulxss, so store */


.Lstore_result:
        add   r7, r7, sp
   80228:	3ecf883a 	add	r7,r7,sp
        stw   r9, 0(r7)
   8022c:	3a400015 	stw	r9,0(r7)

        ldw   r16,  0(sp)
   80230:	dc000017 	ldw	r16,0(sp)
        ldw   r17,  4(sp)
   80234:	dc400117 	ldw	r17,4(sp)
        ldw   r18,  8(sp)
   80238:	dc800217 	ldw	r18,8(sp)
        ldw   r19, 12(sp)
   8023c:	dcc00317 	ldw	r19,12(sp)
        ldw   r20, 16(sp)
   80240:	dd000417 	ldw	r20,16(sp)
        ldw   r21, 20(sp)
   80244:	dd400517 	ldw	r21,20(sp)
        ldw   r22, 24(sp)
   80248:	dd800617 	ldw	r22,24(sp)
        ldw   r23, 28(sp)
   8024c:	ddc00717 	ldw	r23,28(sp)

                            /* bt @ 32 - Breakpoint register usually isn't an operand. */
                            /* et @ 36 - Don't corrupt et. */
                            /* gp @ 40 - Don't corrupt gp. */
                            /* sp @ 44 - Don't corrupt sp. */
        ldw   fp,  48(sp)
   80250:	df000c17 	ldw	fp,48(sp)
                            /* ea @ 52 - Don't corrupt ea. */
                            /* ba @ 56 - Breakpoint register usually isn't an operand. */

        addi  sp, sp, 60
   80254:	dec00f04 	addi	sp,sp,60

        br    .Lexception_exit
   80258:	00000206 	br	80264 <alt_exception_unknown+0x4>


.Lnot_muldiv:

        addi  sp, sp, 60
   8025c:	dec00f04 	addi	sp,sp,60

00080260 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
   80260:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   80264:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   80268:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   8026c:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   80270:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   80274:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   80278:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   8027c:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   80280:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   80284:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   80288:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   8028c:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   80290:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   80294:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   80298:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   8029c:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   802a0:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   802a4:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   802a8:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   802ac:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   802b0:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   802b4:	ef80083a 	eret

000802b8 <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   802b8:	defffe04 	addi	sp,sp,-8
   802bc:	dfc00115 	stw	ra,4(sp)
   802c0:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   802c4:	000b313a 	rdctl	r5,ipending
   802c8:	04000274 	movhi	r16,9
   802cc:	840fe304 	addi	r16,r16,16268
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   802d0:	2880004c 	andi	r2,r5,1

  active = alt_irq_pending ();

  do
  {
    i = 0;
   802d4:	0007883a 	mov	r3,zero
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   802d8:	1000051e 	bne	r2,zero,802f0 <alt_irq_handler+0x38>
  active = alt_irq_pending ();

  do
  {
    i = 0;
    mask = 1;
   802dc:	00800044 	movi	r2,1
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
   802e0:	1085883a 	add	r2,r2,r2
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   802e4:	2888703a 	and	r4,r5,r2
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
      i++;
   802e8:	18c00044 	addi	r3,r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   802ec:	203ffc26 	beq	r4,zero,802e0 <_gp+0xfffe5eec>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   802f0:	180690fa 	slli	r3,r3,3
   802f4:	80c7883a 	add	r3,r16,r3
   802f8:	18800017 	ldw	r2,0(r3)
   802fc:	19000117 	ldw	r4,4(r3)
   80300:	103ee83a 	callr	r2
   80304:	000b313a 	rdctl	r5,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
   80308:	283ff11e 	bne	r5,zero,802d0 <_gp+0xfffe5edc>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
   8030c:	dfc00117 	ldw	ra,4(sp)
   80310:	dc000017 	ldw	r16,0(sp)
   80314:	dec00204 	addi	sp,sp,8
   80318:	f800283a 	ret

Disassembly of section .text:

0008031c <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   8031c:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
   80320:	ded00014 	ori	sp,sp,16384
    movhi gp, %hi(_gp)
   80324:	06800274 	movhi	gp,9
    ori gp, gp, %lo(_gp)
   80328:	d6a8fd14 	ori	gp,gp,41972
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   8032c:	00800274 	movhi	r2,9
    ori r2, r2, %lo(__bss_start)
   80330:	108fca14 	ori	r2,r2,16168

    movhi r3, %hi(__bss_end)
   80334:	00c00274 	movhi	r3,9
    ori r3, r3, %lo(__bss_end)
   80338:	18d02314 	ori	r3,r3,16524

    beq r2, r3, 1f
   8033c:	10c00326 	beq	r2,r3,8034c <_start+0x30>

0:
    stw zero, (r2)
   80340:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   80344:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   80348:	10fffd36 	bltu	r2,r3,80340 <_gp+0xfffe5f4c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   8034c:	008e5200 	call	8e520 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   80350:	008e6cc0 	call	8e6cc <alt_main>

00080354 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   80354:	003fff06 	br	80354 <_gp+0xfffe5f60>

00080358 <main>:

//Declare the global pointer to the memory mapped crypto
struct crypto_t * Crypto = (struct crypto_t *) CRYPTO_MODULE_BASE;


int main() {
   80358:	defe7104 	addi	sp,sp,-1596
   8035c:	dfc18e15 	stw	ra,1592(sp)
   80360:	df018d15 	stw	fp,1588(sp)
   80364:	dcc18c15 	stw	r19,1584(sp)
   80368:	dc818b15 	stw	r18,1580(sp)
   8036c:	dc418a15 	stw	r17,1576(sp)
   80370:	dc018915 	stw	r16,1572(sp)
   80374:	df018d04 	addi	fp,sp,1588

	//Declare an ordinary count
	int count;

	//Byte transfer length, injection vector, and keys.
	int transferLength = 1500;
   80378:	00817704 	movi	r2,1500
   8037c:	e0be7815 	stw	r2,-1568(fp)
	unsigned int injectionvector = 0xdeadbeef;
   80380:	00b7abb4 	movhi	r2,57006
   80384:	10afbbc4 	addi	r2,r2,-16657
   80388:	e0be7915 	stw	r2,-1564(fp)
	unsigned char key8 = 0xa6;
   8038c:	00bfe984 	movi	r2,-90
   80390:	e0be7a05 	stb	r2,-1560(fp)
	unsigned short key16 = 0xbeef;
   80394:	00afbbc4 	movi	r2,-16657
   80398:	e0be7a8d 	sth	r2,-1558(fp)
	unsigned int key32 = 0x1245678;
   8039c:	00804934 	movhi	r2,292
   803a0:	10959e04 	addi	r2,r2,22136
   803a4:	e0be7b15 	stw	r2,-1556(fp)
			hardwareDecryptStartTime, hardwareDecryptStopTime;
	unsigned int softwareEncryptStartTime, softwareEncryptStopTime,
			softwareDecryptStartTime, softwareDecryptStopTime;

	//2048 bytes to possibly transfer
	char largest_payload[] =
   803a8:	00800274 	movhi	r2,9
   803ac:	10801f04 	addi	r2,r2,124
   803b0:	e13e8404 	addi	r4,fp,-1520
   803b4:	1007883a 	mov	r3,r2
   803b8:	00817744 	movi	r2,1501
   803bc:	180b883a 	mov	r5,r3
   803c0:	100d883a 	mov	r6,r2
   803c4:	00825a80 	call	825a8 <memcpy>
ut fringilla orci, consectetur convallis urna. Nullam vestibulum sodales odio porttitor mollis. Proin viverra arcu mauris, vel congue ante semper non. \
Donec nec maris bibendum, suscipit mi vel, congue nisl. Suspendisse sit amet porta ipsum, vel dignissim magna. In aliquam arcu at mi dictum consectetur. \
Donec massa nunc.";

	//Initialize the p/aintext memories
	memcpy(plaintext_A, largest_payload, transferLength);
   803c8:	e0be7817 	ldw	r2,-1568(fp)
   803cc:	e0fe8404 	addi	r3,fp,-1520
   803d0:	01000074 	movhi	r4,1
   803d4:	21200004 	addi	r4,r4,-32768
   803d8:	180b883a 	mov	r5,r3
   803dc:	100d883a 	mov	r6,r2
   803e0:	00825a80 	call	825a8 <memcpy>
	memcpy(plaintext_B, largest_payload, transferLength);
   803e4:	e0be7817 	ldw	r2,-1568(fp)
   803e8:	e0fe8404 	addi	r3,fp,-1520
   803ec:	01000074 	movhi	r4,1
   803f0:	21240004 	addi	r4,r4,-28672
   803f4:	180b883a 	mov	r5,r3
   803f8:	100d883a 	mov	r6,r2
   803fc:	00825a80 	call	825a8 <memcpy>

	//Initialize the timer
	alt_timestamp_start();
   80400:	008f0780 	call	8f078 <alt_timestamp_start>

	//Program the hardware crypto module
	Crypto->readStart = &plaintext_A[0];
   80404:	d0a00017 	ldw	r2,-32768(gp)
   80408:	00c00074 	movhi	r3,1
   8040c:	18e00004 	addi	r3,r3,-32768
   80410:	10c00215 	stw	r3,8(r2)
	Crypto->writeStart = &encrypted_A[0];
   80414:	d0a00017 	ldw	r2,-32768(gp)
   80418:	00c00034 	movhi	r3,0
   8041c:	18d00004 	addi	r3,r3,16384
   80420:	10c00315 	stw	r3,12(r2)
	Crypto->transferLength = transferLength;
   80424:	d0a00017 	ldw	r2,-32768(gp)
   80428:	e0fe7817 	ldw	r3,-1568(fp)
   8042c:	10c00415 	stw	r3,16(r2)
	Crypto->injectionVector = injectionvector;
   80430:	d0a00017 	ldw	r2,-32768(gp)
   80434:	e0fe7917 	ldw	r3,-1564(fp)
   80438:	10c00515 	stw	r3,20(r2)
	Crypto->key8key16 = key8 << 16 | key16;
   8043c:	d0a00017 	ldw	r2,-32768(gp)
   80440:	e0fe7a03 	ldbu	r3,-1560(fp)
   80444:	1808943a 	slli	r4,r3,16
   80448:	e0fe7a8b 	ldhu	r3,-1558(fp)
   8044c:	20c6b03a 	or	r3,r4,r3
   80450:	10c00615 	stw	r3,24(r2)
	Crypto->key32 = key32;
   80454:	d0a00017 	ldw	r2,-32768(gp)
   80458:	e0fe7b17 	ldw	r3,-1556(fp)
   8045c:	10c00715 	stw	r3,28(r2)
//		printf("%c", *(((char*) &plaintext_A[0]) + count));
//	}
//	printf("\n");

	//Start the timer, and start the encryption function
	hardwareEncryptStartTime = alt_timestamp();
   80460:	008f0cc0 	call	8f0cc <alt_timestamp>
   80464:	e0be7c15 	stw	r2,-1552(fp)
	Crypto->control = ENCRYPT;
   80468:	d0a00017 	ldw	r2,-32768(gp)
   8046c:	00c00044 	movi	r3,1
   80470:	10c00015 	stw	r3,0(r2)

	//Spin until crypto indicates done, then stamp the stop time
	while ((Crypto->status & 0x1) == 1) {
   80474:	0001883a 	nop
   80478:	d0a00017 	ldw	r2,-32768(gp)
   8047c:	10800117 	ldw	r2,4(r2)
   80480:	1080004c 	andi	r2,r2,1
   80484:	103ffc1e 	bne	r2,zero,80478 <_gp+0xfffe6084>
	}
	hardwareEncryptStopTime = alt_timestamp();
   80488:	008f0cc0 	call	8f0cc <alt_timestamp>
   8048c:	e0be7d15 	stw	r2,-1548(fp)
//	printf("\n\nEncryption done! Hardware encryption time was %.12fs!\n\n",
//			((double) (hardwareEncryptStopTime - hardwareEncryptStartTime)
//					/ (double) alt_timestamp_freq()));

	//Prepare the decryption of the encrypted string to another lcoation
	Crypto->readStart 	= &encrypted_A[0];
   80490:	d0a00017 	ldw	r2,-32768(gp)
   80494:	00c00034 	movhi	r3,0
   80498:	18d00004 	addi	r3,r3,16384
   8049c:	10c00215 	stw	r3,8(r2)
	Crypto->writeStart 	= &decrypted_A[0];
   804a0:	d0a00017 	ldw	r2,-32768(gp)
   804a4:	00c00074 	movhi	r3,1
   804a8:	18e20004 	addi	r3,r3,-30720
   804ac:	10c00315 	stw	r3,12(r2)

	//Start the timer, and the decryption
	hardwareDecryptStartTime = alt_timestamp();
   804b0:	008f0cc0 	call	8f0cc <alt_timestamp>
   804b4:	e0be7e15 	stw	r2,-1544(fp)
	Crypto->control = DECRYPT;
   804b8:	d0a00017 	ldw	r2,-32768(gp)
   804bc:	00c000c4 	movi	r3,3
   804c0:	10c00015 	stw	r3,0(r2)

	//Spin until crypto indicates done, then stamp the stop time
	while ((Crypto->status & 0x1) == 1) {
   804c4:	0001883a 	nop
   804c8:	d0a00017 	ldw	r2,-32768(gp)
   804cc:	10800117 	ldw	r2,4(r2)
   804d0:	1080004c 	andi	r2,r2,1
   804d4:	103ffc1e 	bne	r2,zero,804c8 <_gp+0xfffe60d4>
	}

	//Print the decrypted string and time delta
	hardwareDecryptStopTime = alt_timestamp();
   804d8:	008f0cc0 	call	8f0cc <alt_timestamp>
   804dc:	e0be7f15 	stw	r2,-1540(fp)
	printf("Decrypted: ");
   804e0:	01000274 	movhi	r4,9
   804e4:	213f5f04 	addi	r4,r4,-644
   804e8:	00826e00 	call	826e0 <printf>
	for (count = 0; count < transferLength; count++) {
   804ec:	e03e7715 	stw	zero,-1572(fp)
   804f0:	00000d06 	br	80528 <main+0x1d0>
		printf("%c", *(((char*) &decrypted_A[0]) + count));
   804f4:	e0fe7717 	ldw	r3,-1572(fp)
   804f8:	00800074 	movhi	r2,1
   804fc:	10a20004 	addi	r2,r2,-30720
   80500:	1885883a 	add	r2,r3,r2
   80504:	10800003 	ldbu	r2,0(r2)
   80508:	10803fcc 	andi	r2,r2,255
   8050c:	1080201c 	xori	r2,r2,128
   80510:	10bfe004 	addi	r2,r2,-128
   80514:	1009883a 	mov	r4,r2
   80518:	00827240 	call	82724 <putchar>
	}

	//Print the decrypted string and time delta
	hardwareDecryptStopTime = alt_timestamp();
	printf("Decrypted: ");
	for (count = 0; count < transferLength; count++) {
   8051c:	e0be7717 	ldw	r2,-1572(fp)
   80520:	10800044 	addi	r2,r2,1
   80524:	e0be7715 	stw	r2,-1572(fp)
   80528:	e0fe7717 	ldw	r3,-1572(fp)
   8052c:	e0be7817 	ldw	r2,-1568(fp)
   80530:	18bff016 	blt	r3,r2,804f4 <_gp+0xfffe6100>
		printf("%c", *(((char*) &decrypted_A[0]) + count));
	}
	printf("\n\nDecryption done! Hardware decryption time was %.12fs!\n",
			((double) (hardwareDecryptStopTime - hardwareDecryptStartTime)
   80534:	e0fe7f17 	ldw	r3,-1540(fp)
   80538:	e0be7e17 	ldw	r2,-1544(fp)
   8053c:	1885c83a 	sub	r2,r3,r2
   80540:	1009883a 	mov	r4,r2
   80544:	00823200 	call	82320 <__floatunsidf>
   80548:	1021883a 	mov	r16,r2
   8054c:	1823883a 	mov	r17,r3
					/ (double) alt_timestamp_freq()));
   80550:	008f1280 	call	8f128 <alt_timestamp_freq>
   80554:	1009883a 	mov	r4,r2
   80558:	00822500 	call	82250 <__floatsidf>
   8055c:	100f883a 	mov	r7,r2
   80560:	1811883a 	mov	r8,r3
	hardwareDecryptStopTime = alt_timestamp();
	printf("Decrypted: ");
	for (count = 0; count < transferLength; count++) {
		printf("%c", *(((char*) &decrypted_A[0]) + count));
	}
	printf("\n\nDecryption done! Hardware decryption time was %.12fs!\n",
   80564:	8009883a 	mov	r4,r16
   80568:	880b883a 	mov	r5,r17
   8056c:	380d883a 	mov	r6,r7
   80570:	400f883a 	mov	r7,r8
   80574:	00818b40 	call	818b4 <__divdf3>
   80578:	1009883a 	mov	r4,r2
   8057c:	180b883a 	mov	r5,r3
   80580:	2005883a 	mov	r2,r4
   80584:	2807883a 	mov	r3,r5
   80588:	01000274 	movhi	r4,9
   8058c:	213f6204 	addi	r4,r4,-632
   80590:	100b883a 	mov	r5,r2
   80594:	180d883a 	mov	r6,r3
   80598:	00826e00 	call	826e0 <printf>
			((double) (hardwareDecryptStopTime - hardwareDecryptStartTime)
					/ (double) alt_timestamp_freq()));
	printf("Done hardware crypto!\n\n");
   8059c:	01000274 	movhi	r4,9
   805a0:	213f7104 	addi	r4,r4,-572
   805a4:	00827f80 	call	827f8 <puts>

	//Print out the original memory location
	printf("Beginning software crypto!\n");
   805a8:	01000274 	movhi	r4,9
   805ac:	213f7704 	addi	r4,r4,-548
   805b0:	00827f80 	call	827f8 <puts>
	printf("Plaintext: ");
   805b4:	01000274 	movhi	r4,9
   805b8:	213f7e04 	addi	r4,r4,-520
   805bc:	00826e00 	call	826e0 <printf>
	for (count = 0; count < transferLength; count++) {
   805c0:	e03e7715 	stw	zero,-1572(fp)
   805c4:	00000d06 	br	805fc <main+0x2a4>
		printf("%c", *(((char*) &plaintext_B[0]) + count));
   805c8:	e0fe7717 	ldw	r3,-1572(fp)
   805cc:	00800074 	movhi	r2,1
   805d0:	10a40004 	addi	r2,r2,-28672
   805d4:	1885883a 	add	r2,r3,r2
   805d8:	10800003 	ldbu	r2,0(r2)
   805dc:	10803fcc 	andi	r2,r2,255
   805e0:	1080201c 	xori	r2,r2,128
   805e4:	10bfe004 	addi	r2,r2,-128
   805e8:	1009883a 	mov	r4,r2
   805ec:	00827240 	call	82724 <putchar>
	printf("Done hardware crypto!\n\n");

	//Print out the original memory location
	printf("Beginning software crypto!\n");
	printf("Plaintext: ");
	for (count = 0; count < transferLength; count++) {
   805f0:	e0be7717 	ldw	r2,-1572(fp)
   805f4:	10800044 	addi	r2,r2,1
   805f8:	e0be7715 	stw	r2,-1572(fp)
   805fc:	e0fe7717 	ldw	r3,-1572(fp)
   80600:	e0be7817 	ldw	r2,-1568(fp)
   80604:	18bff016 	blt	r3,r2,805c8 <_gp+0xfffe61d4>
		printf("%c", *(((char*) &plaintext_B[0]) + count));
	}
	printf("\n");
   80608:	01000284 	movi	r4,10
   8060c:	00827240 	call	82724 <putchar>

	//Start the timer, and the software encryption
	softwareEncryptStartTime = alt_timestamp();
   80610:	008f0cc0 	call	8f0cc <alt_timestamp>
   80614:	e0be8015 	stw	r2,-1536(fp)
	CryptoProcedure(0, &plaintext_B[0], &encrypted_B[0], transferLength, 0xdeadbeef,
   80618:	00b7abb4 	movhi	r2,57006
   8061c:	10afbbc4 	addi	r2,r2,-16657
   80620:	d8800015 	stw	r2,0(sp)
   80624:	00802984 	movi	r2,166
   80628:	d8800115 	stw	r2,4(sp)
   8062c:	00afbbd4 	movui	r2,48879
   80630:	d8800215 	stw	r2,8(sp)
   80634:	00804934 	movhi	r2,292
   80638:	10959e04 	addi	r2,r2,22136
   8063c:	d8800315 	stw	r2,12(sp)
   80640:	0009883a 	mov	r4,zero
   80644:	01400074 	movhi	r5,1
   80648:	29640004 	addi	r5,r5,-28672
   8064c:	01800034 	movhi	r6,0
   80650:	31920004 	addi	r6,r6,18432
   80654:	e1fe7817 	ldw	r7,-1568(fp)
   80658:	0080af00 	call	80af0 <CryptoProcedure>
			0xa6, 0xbeef, 0x1245678);

	//Print the encrypted string and time delta
	softwareEncryptStopTime = alt_timestamp();
   8065c:	008f0cc0 	call	8f0cc <alt_timestamp>
   80660:	e0be8115 	stw	r2,-1532(fp)
	printf("\nEncrypted: ");
   80664:	01000274 	movhi	r4,9
   80668:	213f8104 	addi	r4,r4,-508
   8066c:	00826e00 	call	826e0 <printf>
	for (count = 0; count < transferLength; count++) {
   80670:	e03e7715 	stw	zero,-1572(fp)
   80674:	00000d06 	br	806ac <main+0x354>
		printf("%c", *(((char*) &encrypted_B[0]) + count));
   80678:	e0fe7717 	ldw	r3,-1572(fp)
   8067c:	00800034 	movhi	r2,0
   80680:	10920004 	addi	r2,r2,18432
   80684:	1885883a 	add	r2,r3,r2
   80688:	10800003 	ldbu	r2,0(r2)
   8068c:	10803fcc 	andi	r2,r2,255
   80690:	1080201c 	xori	r2,r2,128
   80694:	10bfe004 	addi	r2,r2,-128
   80698:	1009883a 	mov	r4,r2
   8069c:	00827240 	call	82724 <putchar>
			0xa6, 0xbeef, 0x1245678);

	//Print the encrypted string and time delta
	softwareEncryptStopTime = alt_timestamp();
	printf("\nEncrypted: ");
	for (count = 0; count < transferLength; count++) {
   806a0:	e0be7717 	ldw	r2,-1572(fp)
   806a4:	10800044 	addi	r2,r2,1
   806a8:	e0be7715 	stw	r2,-1572(fp)
   806ac:	e0fe7717 	ldw	r3,-1572(fp)
   806b0:	e0be7817 	ldw	r2,-1568(fp)
   806b4:	18bff016 	blt	r3,r2,80678 <_gp+0xfffe6284>
		printf("%c", *(((char*) &encrypted_B[0]) + count));
	}
	printf(
			"\n\nSoftware encryption done! Processor encryption time was %.12fs!\n\n",
			((double) (softwareEncryptStopTime - softwareEncryptStartTime)
   806b8:	e0fe8117 	ldw	r3,-1532(fp)
   806bc:	e0be8017 	ldw	r2,-1536(fp)
   806c0:	1885c83a 	sub	r2,r3,r2
   806c4:	1009883a 	mov	r4,r2
   806c8:	00823200 	call	82320 <__floatunsidf>
   806cc:	1021883a 	mov	r16,r2
   806d0:	1823883a 	mov	r17,r3
					/ (double) alt_timestamp_freq()));
   806d4:	008f1280 	call	8f128 <alt_timestamp_freq>
   806d8:	1009883a 	mov	r4,r2
   806dc:	00822500 	call	82250 <__floatsidf>
   806e0:	100f883a 	mov	r7,r2
   806e4:	1811883a 	mov	r8,r3
	softwareEncryptStopTime = alt_timestamp();
	printf("\nEncrypted: ");
	for (count = 0; count < transferLength; count++) {
		printf("%c", *(((char*) &encrypted_B[0]) + count));
	}
	printf(
   806e8:	8009883a 	mov	r4,r16
   806ec:	880b883a 	mov	r5,r17
   806f0:	380d883a 	mov	r6,r7
   806f4:	400f883a 	mov	r7,r8
   806f8:	00818b40 	call	818b4 <__divdf3>
   806fc:	1009883a 	mov	r4,r2
   80700:	180b883a 	mov	r5,r3
   80704:	2005883a 	mov	r2,r4
   80708:	2807883a 	mov	r3,r5
   8070c:	01000274 	movhi	r4,9
   80710:	213f8504 	addi	r4,r4,-492
   80714:	100b883a 	mov	r5,r2
   80718:	180d883a 	mov	r6,r3
   8071c:	00826e00 	call	826e0 <printf>
			"\n\nSoftware encryption done! Processor encryption time was %.12fs!\n\n",
			((double) (softwareEncryptStopTime - softwareEncryptStartTime)
					/ (double) alt_timestamp_freq()));

	//Start the timer, and the decryption
	softwareDecryptStartTime = alt_timestamp();
   80720:	008f0cc0 	call	8f0cc <alt_timestamp>
   80724:	e0be8215 	stw	r2,-1528(fp)
	CryptoProcedure(1, &encrypted_B[0], &decrypted_B[0], transferLength, 0xdeadbeef,
   80728:	00b7abb4 	movhi	r2,57006
   8072c:	10afbbc4 	addi	r2,r2,-16657
   80730:	d8800015 	stw	r2,0(sp)
   80734:	00802984 	movi	r2,166
   80738:	d8800115 	stw	r2,4(sp)
   8073c:	00afbbd4 	movui	r2,48879
   80740:	d8800215 	stw	r2,8(sp)
   80744:	00804934 	movhi	r2,292
   80748:	10959e04 	addi	r2,r2,22136
   8074c:	d8800315 	stw	r2,12(sp)
   80750:	01000044 	movi	r4,1
   80754:	01400034 	movhi	r5,0
   80758:	29520004 	addi	r5,r5,18432
   8075c:	01800074 	movhi	r6,1
   80760:	31a60004 	addi	r6,r6,-26624
   80764:	e1fe7817 	ldw	r7,-1568(fp)
   80768:	0080af00 	call	80af0 <CryptoProcedure>
			0xa6, 0xbeef, 0x1245678);

	//Print the decrypted string and time delta
	softwareDecryptStopTime = alt_timestamp();
   8076c:	008f0cc0 	call	8f0cc <alt_timestamp>
   80770:	e0be8315 	stw	r2,-1524(fp)
	printf("Decrypted: ");
   80774:	01000274 	movhi	r4,9
   80778:	213f5f04 	addi	r4,r4,-644
   8077c:	00826e00 	call	826e0 <printf>
	for (count = 0; count < transferLength; count++) {
   80780:	e03e7715 	stw	zero,-1572(fp)
   80784:	00000d06 	br	807bc <main+0x464>
		printf("%c", *(((char*) &decrypted_B[0]) + count));
   80788:	e0fe7717 	ldw	r3,-1572(fp)
   8078c:	00800074 	movhi	r2,1
   80790:	10a60004 	addi	r2,r2,-26624
   80794:	1885883a 	add	r2,r3,r2
   80798:	10800003 	ldbu	r2,0(r2)
   8079c:	10803fcc 	andi	r2,r2,255
   807a0:	1080201c 	xori	r2,r2,128
   807a4:	10bfe004 	addi	r2,r2,-128
   807a8:	1009883a 	mov	r4,r2
   807ac:	00827240 	call	82724 <putchar>
			0xa6, 0xbeef, 0x1245678);

	//Print the decrypted string and time delta
	softwareDecryptStopTime = alt_timestamp();
	printf("Decrypted: ");
	for (count = 0; count < transferLength; count++) {
   807b0:	e0be7717 	ldw	r2,-1572(fp)
   807b4:	10800044 	addi	r2,r2,1
   807b8:	e0be7715 	stw	r2,-1572(fp)
   807bc:	e0fe7717 	ldw	r3,-1572(fp)
   807c0:	e0be7817 	ldw	r2,-1568(fp)
   807c4:	18bff016 	blt	r3,r2,80788 <_gp+0xfffe6394>
		printf("%c", *(((char*) &decrypted_B[0]) + count));
	}
	printf(
			"\n\nSoftware decryption done! Software decryption time was %.12fs!\n",
			((double) (softwareDecryptStopTime - softwareDecryptStartTime)
   807c8:	e0fe8317 	ldw	r3,-1524(fp)
   807cc:	e0be8217 	ldw	r2,-1528(fp)
   807d0:	1885c83a 	sub	r2,r3,r2
   807d4:	1009883a 	mov	r4,r2
   807d8:	00823200 	call	82320 <__floatunsidf>
   807dc:	1021883a 	mov	r16,r2
   807e0:	1823883a 	mov	r17,r3
					/ (double) alt_timestamp_freq()));
   807e4:	008f1280 	call	8f128 <alt_timestamp_freq>
   807e8:	1009883a 	mov	r4,r2
   807ec:	00822500 	call	82250 <__floatsidf>
   807f0:	100f883a 	mov	r7,r2
   807f4:	1811883a 	mov	r8,r3
	softwareDecryptStopTime = alt_timestamp();
	printf("Decrypted: ");
	for (count = 0; count < transferLength; count++) {
		printf("%c", *(((char*) &decrypted_B[0]) + count));
	}
	printf(
   807f8:	8009883a 	mov	r4,r16
   807fc:	880b883a 	mov	r5,r17
   80800:	380d883a 	mov	r6,r7
   80804:	400f883a 	mov	r7,r8
   80808:	00818b40 	call	818b4 <__divdf3>
   8080c:	1009883a 	mov	r4,r2
   80810:	180b883a 	mov	r5,r3
   80814:	2005883a 	mov	r2,r4
   80818:	2807883a 	mov	r3,r5
   8081c:	01000274 	movhi	r4,9
   80820:	213f9604 	addi	r4,r4,-424
   80824:	100b883a 	mov	r5,r2
   80828:	180d883a 	mov	r6,r3
   8082c:	00826e00 	call	826e0 <printf>
			"\n\nSoftware decryption done! Software decryption time was %.12fs!\n",
			((double) (softwareDecryptStopTime - softwareDecryptStartTime)
					/ (double) alt_timestamp_freq()));
	printf("Done software crypto!\n\n");
   80830:	01000274 	movhi	r4,9
   80834:	213fa704 	addi	r4,r4,-356
   80838:	00827f80 	call	827f8 <puts>

	//Print the summary
	printf(
   8083c:	01000274 	movhi	r4,9
   80840:	213fad04 	addi	r4,r4,-332
   80844:	00827f80 	call	827f8 <puts>
			"******************************************************************************************************************\n");
	printf(
   80848:	01000274 	movhi	r4,9
   8084c:	213fca04 	addi	r4,r4,-216
   80850:	00827f80 	call	827f8 <puts>
			"*                                                     Summary                                                    *\n");
	printf(
   80854:	01000274 	movhi	r4,9
   80858:	213fad04 	addi	r4,r4,-332
   8085c:	00827f80 	call	827f8 <puts>
			"******************************************************************************************************************\n");
	printf(
			"* Software encryption time: %.12fs\t\tSoftware decryption time: %.12fs\t\t*\n",
			((double) (softwareEncryptStopTime - softwareEncryptStartTime)
   80860:	e0fe8117 	ldw	r3,-1532(fp)
   80864:	e0be8017 	ldw	r2,-1536(fp)
   80868:	1885c83a 	sub	r2,r3,r2
   8086c:	1009883a 	mov	r4,r2
   80870:	00823200 	call	82320 <__floatunsidf>
   80874:	1021883a 	mov	r16,r2
   80878:	1823883a 	mov	r17,r3
					/ (double) alt_timestamp_freq()),
   8087c:	008f1280 	call	8f128 <alt_timestamp_freq>
   80880:	1009883a 	mov	r4,r2
   80884:	00822500 	call	82250 <__floatsidf>
   80888:	100f883a 	mov	r7,r2
   8088c:	1811883a 	mov	r8,r3
			"******************************************************************************************************************\n");
	printf(
			"*                                                     Summary                                                    *\n");
	printf(
			"******************************************************************************************************************\n");
	printf(
   80890:	8009883a 	mov	r4,r16
   80894:	880b883a 	mov	r5,r17
   80898:	380d883a 	mov	r6,r7
   8089c:	400f883a 	mov	r7,r8
   808a0:	00818b40 	call	818b4 <__divdf3>
   808a4:	1009883a 	mov	r4,r2
   808a8:	180b883a 	mov	r5,r3
   808ac:	2021883a 	mov	r16,r4
   808b0:	2823883a 	mov	r17,r5
			"* Software encryption time: %.12fs\t\tSoftware decryption time: %.12fs\t\t*\n",
			((double) (softwareEncryptStopTime - softwareEncryptStartTime)
					/ (double) alt_timestamp_freq()),
			((double) (softwareDecryptStopTime - softwareDecryptStartTime)
   808b4:	e0fe8317 	ldw	r3,-1524(fp)
   808b8:	e0be8217 	ldw	r2,-1528(fp)
   808bc:	1885c83a 	sub	r2,r3,r2
   808c0:	1009883a 	mov	r4,r2
   808c4:	00823200 	call	82320 <__floatunsidf>
   808c8:	1025883a 	mov	r18,r2
   808cc:	1827883a 	mov	r19,r3
					/ (double) alt_timestamp_freq()));
   808d0:	008f1280 	call	8f128 <alt_timestamp_freq>
   808d4:	1009883a 	mov	r4,r2
   808d8:	00822500 	call	82250 <__floatsidf>
   808dc:	100f883a 	mov	r7,r2
   808e0:	1811883a 	mov	r8,r3
			"******************************************************************************************************************\n");
	printf(
			"*                                                     Summary                                                    *\n");
	printf(
			"******************************************************************************************************************\n");
	printf(
   808e4:	9009883a 	mov	r4,r18
   808e8:	980b883a 	mov	r5,r19
   808ec:	380d883a 	mov	r6,r7
   808f0:	400f883a 	mov	r7,r8
   808f4:	00818b40 	call	818b4 <__divdf3>
   808f8:	1009883a 	mov	r4,r2
   808fc:	180b883a 	mov	r5,r3
   80900:	2005883a 	mov	r2,r4
   80904:	2807883a 	mov	r3,r5
   80908:	d8c00015 	stw	r3,0(sp)
   8090c:	100f883a 	mov	r7,r2
   80910:	01000274 	movhi	r4,9
   80914:	213fe704 	addi	r4,r4,-100
   80918:	800b883a 	mov	r5,r16
   8091c:	880d883a 	mov	r6,r17
   80920:	00826e00 	call	826e0 <printf>
					/ (double) alt_timestamp_freq()),
			((double) (softwareDecryptStopTime - softwareDecryptStartTime)
					/ (double) alt_timestamp_freq()));
	printf(
			"* Hardware encryption time: %.12fs\t\tHardware decryption time: %.12fs\t\t*\n",
			((double) (hardwareEncryptStopTime - hardwareEncryptStartTime)
   80924:	e0fe7d17 	ldw	r3,-1548(fp)
   80928:	e0be7c17 	ldw	r2,-1552(fp)
   8092c:	1885c83a 	sub	r2,r3,r2
   80930:	1009883a 	mov	r4,r2
   80934:	00823200 	call	82320 <__floatunsidf>
   80938:	1021883a 	mov	r16,r2
   8093c:	1823883a 	mov	r17,r3
					/ (double) alt_timestamp_freq()),
   80940:	008f1280 	call	8f128 <alt_timestamp_freq>
   80944:	1009883a 	mov	r4,r2
   80948:	00822500 	call	82250 <__floatsidf>
   8094c:	100f883a 	mov	r7,r2
   80950:	1811883a 	mov	r8,r3
			"* Software encryption time: %.12fs\t\tSoftware decryption time: %.12fs\t\t*\n",
			((double) (softwareEncryptStopTime - softwareEncryptStartTime)
					/ (double) alt_timestamp_freq()),
			((double) (softwareDecryptStopTime - softwareDecryptStartTime)
					/ (double) alt_timestamp_freq()));
	printf(
   80954:	8009883a 	mov	r4,r16
   80958:	880b883a 	mov	r5,r17
   8095c:	380d883a 	mov	r6,r7
   80960:	400f883a 	mov	r7,r8
   80964:	00818b40 	call	818b4 <__divdf3>
   80968:	1009883a 	mov	r4,r2
   8096c:	180b883a 	mov	r5,r3
   80970:	2021883a 	mov	r16,r4
   80974:	2823883a 	mov	r17,r5
			"* Hardware encryption time: %.12fs\t\tHardware decryption time: %.12fs\t\t*\n",
			((double) (hardwareEncryptStopTime - hardwareEncryptStartTime)
					/ (double) alt_timestamp_freq()),
			((double) (hardwareDecryptStopTime - hardwareDecryptStartTime)
   80978:	e0fe7f17 	ldw	r3,-1540(fp)
   8097c:	e0be7e17 	ldw	r2,-1544(fp)
   80980:	1885c83a 	sub	r2,r3,r2
   80984:	1009883a 	mov	r4,r2
   80988:	00823200 	call	82320 <__floatunsidf>
   8098c:	1025883a 	mov	r18,r2
   80990:	1827883a 	mov	r19,r3
					/ (double) alt_timestamp_freq()));
   80994:	008f1280 	call	8f128 <alt_timestamp_freq>
   80998:	1009883a 	mov	r4,r2
   8099c:	00822500 	call	82250 <__floatsidf>
   809a0:	100f883a 	mov	r7,r2
   809a4:	1811883a 	mov	r8,r3
			"* Software encryption time: %.12fs\t\tSoftware decryption time: %.12fs\t\t*\n",
			((double) (softwareEncryptStopTime - softwareEncryptStartTime)
					/ (double) alt_timestamp_freq()),
			((double) (softwareDecryptStopTime - softwareDecryptStartTime)
					/ (double) alt_timestamp_freq()));
	printf(
   809a8:	9009883a 	mov	r4,r18
   809ac:	980b883a 	mov	r5,r19
   809b0:	380d883a 	mov	r6,r7
   809b4:	400f883a 	mov	r7,r8
   809b8:	00818b40 	call	818b4 <__divdf3>
   809bc:	1009883a 	mov	r4,r2
   809c0:	180b883a 	mov	r5,r3
   809c4:	2005883a 	mov	r2,r4
   809c8:	2807883a 	mov	r3,r5
   809cc:	d8c00015 	stw	r3,0(sp)
   809d0:	100f883a 	mov	r7,r2
   809d4:	01000274 	movhi	r4,9
   809d8:	213ffa04 	addi	r4,r4,-24
   809dc:	800b883a 	mov	r5,r16
   809e0:	880d883a 	mov	r6,r17
   809e4:	00826e00 	call	826e0 <printf>
					/ (double) alt_timestamp_freq()),
			((double) (hardwareDecryptStopTime - hardwareDecryptStartTime)
					/ (double) alt_timestamp_freq()));
	printf(
			"* Encryption speedup      : %3.6f\t\t\tDecryption speedup      : %3.6f\t\t*\n",
			(double) (softwareEncryptStopTime - softwareEncryptStartTime)
   809e8:	e0fe8117 	ldw	r3,-1532(fp)
   809ec:	e0be8017 	ldw	r2,-1536(fp)
   809f0:	1885c83a 	sub	r2,r3,r2
   809f4:	1009883a 	mov	r4,r2
   809f8:	00823200 	call	82320 <__floatunsidf>
   809fc:	1021883a 	mov	r16,r2
   80a00:	1823883a 	mov	r17,r3
					/ (double) (hardwareEncryptStopTime
							- hardwareEncryptStartTime),
   80a04:	e0fe7d17 	ldw	r3,-1548(fp)
   80a08:	e0be7c17 	ldw	r2,-1552(fp)
   80a0c:	1885c83a 	sub	r2,r3,r2
			((double) (hardwareDecryptStopTime - hardwareDecryptStartTime)
					/ (double) alt_timestamp_freq()));
	printf(
			"* Encryption speedup      : %3.6f\t\t\tDecryption speedup      : %3.6f\t\t*\n",
			(double) (softwareEncryptStopTime - softwareEncryptStartTime)
					/ (double) (hardwareEncryptStopTime
   80a10:	1009883a 	mov	r4,r2
   80a14:	00823200 	call	82320 <__floatunsidf>
   80a18:	100f883a 	mov	r7,r2
   80a1c:	1811883a 	mov	r8,r3
			"* Hardware encryption time: %.12fs\t\tHardware decryption time: %.12fs\t\t*\n",
			((double) (hardwareEncryptStopTime - hardwareEncryptStartTime)
					/ (double) alt_timestamp_freq()),
			((double) (hardwareDecryptStopTime - hardwareDecryptStartTime)
					/ (double) alt_timestamp_freq()));
	printf(
   80a20:	8009883a 	mov	r4,r16
   80a24:	880b883a 	mov	r5,r17
   80a28:	380d883a 	mov	r6,r7
   80a2c:	400f883a 	mov	r7,r8
   80a30:	00818b40 	call	818b4 <__divdf3>
   80a34:	1009883a 	mov	r4,r2
   80a38:	180b883a 	mov	r5,r3
   80a3c:	2021883a 	mov	r16,r4
   80a40:	2823883a 	mov	r17,r5
			"* Encryption speedup      : %3.6f\t\t\tDecryption speedup      : %3.6f\t\t*\n",
			(double) (softwareEncryptStopTime - softwareEncryptStartTime)
					/ (double) (hardwareEncryptStopTime
							- hardwareEncryptStartTime),
			(double) (softwareDecryptStopTime - softwareDecryptStartTime)
   80a44:	e0fe8317 	ldw	r3,-1524(fp)
   80a48:	e0be8217 	ldw	r2,-1528(fp)
   80a4c:	1885c83a 	sub	r2,r3,r2
   80a50:	1009883a 	mov	r4,r2
   80a54:	00823200 	call	82320 <__floatunsidf>
   80a58:	1025883a 	mov	r18,r2
   80a5c:	1827883a 	mov	r19,r3
					/ (double) (hardwareDecryptStopTime
							- hardwareDecryptStartTime));
   80a60:	e0fe7f17 	ldw	r3,-1540(fp)
   80a64:	e0be7e17 	ldw	r2,-1544(fp)
   80a68:	1885c83a 	sub	r2,r3,r2
			"* Encryption speedup      : %3.6f\t\t\tDecryption speedup      : %3.6f\t\t*\n",
			(double) (softwareEncryptStopTime - softwareEncryptStartTime)
					/ (double) (hardwareEncryptStopTime
							- hardwareEncryptStartTime),
			(double) (softwareDecryptStopTime - softwareDecryptStartTime)
					/ (double) (hardwareDecryptStopTime
   80a6c:	1009883a 	mov	r4,r2
   80a70:	00823200 	call	82320 <__floatunsidf>
   80a74:	100f883a 	mov	r7,r2
   80a78:	1811883a 	mov	r8,r3
			"* Hardware encryption time: %.12fs\t\tHardware decryption time: %.12fs\t\t*\n",
			((double) (hardwareEncryptStopTime - hardwareEncryptStartTime)
					/ (double) alt_timestamp_freq()),
			((double) (hardwareDecryptStopTime - hardwareDecryptStartTime)
					/ (double) alt_timestamp_freq()));
	printf(
   80a7c:	9009883a 	mov	r4,r18
   80a80:	980b883a 	mov	r5,r19
   80a84:	380d883a 	mov	r6,r7
   80a88:	400f883a 	mov	r7,r8
   80a8c:	00818b40 	call	818b4 <__divdf3>
   80a90:	1009883a 	mov	r4,r2
   80a94:	180b883a 	mov	r5,r3
   80a98:	2005883a 	mov	r2,r4
   80a9c:	2807883a 	mov	r3,r5
   80aa0:	d8c00015 	stw	r3,0(sp)
   80aa4:	100f883a 	mov	r7,r2
   80aa8:	01000274 	movhi	r4,9
   80aac:	21000d04 	addi	r4,r4,52
   80ab0:	800b883a 	mov	r5,r16
   80ab4:	880d883a 	mov	r6,r17
   80ab8:	00826e00 	call	826e0 <printf>
					/ (double) (hardwareEncryptStopTime
							- hardwareEncryptStartTime),
			(double) (softwareDecryptStopTime - softwareDecryptStartTime)
					/ (double) (hardwareDecryptStopTime
							- hardwareDecryptStartTime));
	printf(
   80abc:	01000274 	movhi	r4,9
   80ac0:	213fad04 	addi	r4,r4,-332
   80ac4:	00827f80 	call	827f8 <puts>
			"******************************************************************************************************************\n");
	return 0;
   80ac8:	0005883a 	mov	r2,zero
}
   80acc:	e6fffc04 	addi	sp,fp,-16
   80ad0:	dfc00517 	ldw	ra,20(sp)
   80ad4:	df000417 	ldw	fp,16(sp)
   80ad8:	dcc00317 	ldw	r19,12(sp)
   80adc:	dc800217 	ldw	r18,8(sp)
   80ae0:	dc400117 	ldw	r17,4(sp)
   80ae4:	dc000017 	ldw	r16,0(sp)
   80ae8:	dec00604 	addi	sp,sp,24
   80aec:	f800283a 	ret

00080af0 <CryptoProcedure>:
//	Output:	An encrypted or decrypted byte array at the specified memory location
//////////////////////////////////////////////////////////////////////////////////////////////
void CryptoProcedure(unsigned char control, unsigned char * readstart,
						unsigned char * writestart, unsigned int transferlength,
						unsigned int injectionvector, unsigned char key8, unsigned short key16,
						unsigned int key32) {
   80af0:	defff104 	addi	sp,sp,-60
   80af4:	df000e15 	stw	fp,56(sp)
   80af8:	df000e04 	addi	fp,sp,56
   80afc:	e17ffb15 	stw	r5,-20(fp)
   80b00:	e1bffc15 	stw	r6,-16(fp)
   80b04:	e1fffd15 	stw	r7,-12(fp)
   80b08:	e0c00217 	ldw	r3,8(fp)
   80b0c:	e0800317 	ldw	r2,12(fp)
   80b10:	e13ffa05 	stb	r4,-24(fp)
   80b14:	e0fffe05 	stb	r3,-8(fp)
   80b18:	e0bfff0d 	sth	r2,-4(fp)

	unsigned int key8_32 	= (key8 << 24) | (key8 << 16) | (key8 << 8) | (key8);
   80b1c:	e0bffe03 	ldbu	r2,-8(fp)
   80b20:	1006963a 	slli	r3,r2,24
   80b24:	e0bffe03 	ldbu	r2,-8(fp)
   80b28:	1004943a 	slli	r2,r2,16
   80b2c:	1886b03a 	or	r3,r3,r2
   80b30:	e0bffe03 	ldbu	r2,-8(fp)
   80b34:	1004923a 	slli	r2,r2,8
   80b38:	1886b03a 	or	r3,r3,r2
   80b3c:	e0bffe03 	ldbu	r2,-8(fp)
   80b40:	1884b03a 	or	r2,r3,r2
   80b44:	e0bff215 	stw	r2,-56(fp)
	unsigned int key16_32 	= (key16 << 16) | (key16);
   80b48:	e0bfff0b 	ldhu	r2,-4(fp)
   80b4c:	1006943a 	slli	r3,r2,16
   80b50:	e0bfff0b 	ldhu	r2,-4(fp)
   80b54:	1884b03a 	or	r2,r3,r2
   80b58:	e0bff315 	stw	r2,-52(fp)
	unsigned int key32_32 	= (key32);
   80b5c:	e0800417 	ldw	r2,16(fp)
   80b60:	e0bff415 	stw	r2,-48(fp)
	unsigned int injectionvector_32 = injectionvector;
   80b64:	e0800117 	ldw	r2,4(fp)
   80b68:	e0bff515 	stw	r2,-44(fp)
	unsigned int * writeaddress = (unsigned int*)((unsigned int)writestart & (unsigned int)0xfffffffc);
   80b6c:	e0fffc17 	ldw	r3,-16(fp)
   80b70:	00bfff04 	movi	r2,-4
   80b74:	1884703a 	and	r2,r3,r2
   80b78:	e0bff615 	stw	r2,-40(fp)
	unsigned int * readaddress = (unsigned int*)((unsigned int)readstart & (unsigned int)0xfffffffc);
   80b7c:	e0fffb17 	ldw	r3,-20(fp)
   80b80:	00bfff04 	movi	r2,-4
   80b84:	1884703a 	and	r2,r3,r2
   80b88:	e0bff715 	stw	r2,-36(fp)
	unsigned int rotationcounter = 0;
   80b8c:	e03ff815 	stw	zero,-32(fp)
	unsigned int byteswritten = 0;
   80b90:	e03ff915 	stw	zero,-28(fp)

	if (control == 0) {
   80b94:	e0bffa03 	ldbu	r2,-24(fp)
   80b98:	1001991e 	bne	r2,zero,81200 <CryptoProcedure+0x710>
		switch ((unsigned int)readstart & (unsigned int)0x3) {
   80b9c:	e0bffb17 	ldw	r2,-20(fp)
   80ba0:	108000cc 	andi	r2,r2,3
   80ba4:	10c00060 	cmpeqi	r3,r2,1
   80ba8:	18006a1e 	bne	r3,zero,80d54 <CryptoProcedure+0x264>
   80bac:	0080052e 	bgeu	zero,r2,80bc4 <CryptoProcedure+0xd4>
   80bb0:	10c000a0 	cmpeqi	r3,r2,2
   80bb4:	1800ba1e 	bne	r3,zero,80ea0 <CryptoProcedure+0x3b0>
   80bb8:	108000e0 	cmpeqi	r2,r2,3
   80bbc:	1000eb1e 	bne	r2,zero,80f6c <CryptoProcedure+0x47c>
   80bc0:	00010306 	br	80fd0 <CryptoProcedure+0x4e0>
		case (0x0):
			if (transferlength == 3) {
   80bc4:	e0bffd17 	ldw	r2,-12(fp)
   80bc8:	108000d8 	cmpnei	r2,r2,3
   80bcc:	1000191e 	bne	r2,zero,80c34 <CryptoProcedure+0x144>
				injectionvector_32 = (*readaddress & 0xff000000)
   80bd0:	e0bff717 	ldw	r2,-36(fp)
   80bd4:	10800017 	ldw	r2,0(r2)
   80bd8:	10ffc02c 	andhi	r3,r2,65280
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   80bdc:	e0bff717 	ldw	r2,-36(fp)
   80be0:	11000017 	ldw	r4,0(r2)
   80be4:	e0bff517 	ldw	r2,-44(fp)
   80be8:	2088f03a 	xor	r4,r4,r2
   80bec:	e0bff217 	ldw	r2,-56(fp)
   80bf0:	2088f03a 	xor	r4,r4,r2
								^ key16_32 ^ key32_32) & 0x00ffffff);
   80bf4:	e0bff317 	ldw	r2,-52(fp)
   80bf8:	2088f03a 	xor	r4,r4,r2
   80bfc:	e0bff417 	ldw	r2,-48(fp)
   80c00:	2088f03a 	xor	r4,r4,r2
   80c04:	00804034 	movhi	r2,256
   80c08:	10bfffc4 	addi	r2,r2,-1
   80c0c:	2084703a 	and	r2,r4,r2

	if (control == 0) {
		switch ((unsigned int)readstart & (unsigned int)0x3) {
		case (0x0):
			if (transferlength == 3) {
				injectionvector_32 = (*readaddress & 0xff000000)
   80c10:	1884b03a 	or	r2,r3,r2
   80c14:	e0bff515 	stw	r2,-44(fp)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x00ffffff);
				*writeaddress = injectionvector_32;
   80c18:	e0bff617 	ldw	r2,-40(fp)
   80c1c:	e0fff517 	ldw	r3,-44(fp)
   80c20:	10c00015 	stw	r3,0(r2)
				byteswritten += 3;
   80c24:	e0bff917 	ldw	r2,-28(fp)
   80c28:	108000c4 	addi	r2,r2,3
   80c2c:	e0bff915 	stw	r2,-28(fp)
   80c30:	00004706 	br	80d50 <CryptoProcedure+0x260>
			} else if (transferlength == 2) {
   80c34:	e0bffd17 	ldw	r2,-12(fp)
   80c38:	10800098 	cmpnei	r2,r2,2
   80c3c:	1000171e 	bne	r2,zero,80c9c <CryptoProcedure+0x1ac>
				injectionvector_32 = (*readaddress & 0xffff0000)
   80c40:	e0bff717 	ldw	r2,-36(fp)
   80c44:	10800017 	ldw	r2,0(r2)
   80c48:	10ffffec 	andhi	r3,r2,65535
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   80c4c:	e0bff717 	ldw	r2,-36(fp)
   80c50:	11000017 	ldw	r4,0(r2)
   80c54:	e0bff517 	ldw	r2,-44(fp)
   80c58:	2088f03a 	xor	r4,r4,r2
   80c5c:	e0bff217 	ldw	r2,-56(fp)
   80c60:	2088f03a 	xor	r4,r4,r2
								^ key16_32 ^ key32_32) & 0x0000ffff);
   80c64:	e0bff317 	ldw	r2,-52(fp)
   80c68:	2088f03a 	xor	r4,r4,r2
   80c6c:	e0bff417 	ldw	r2,-48(fp)
   80c70:	2084f03a 	xor	r2,r4,r2
   80c74:	10bfffcc 	andi	r2,r2,65535
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x00ffffff);
				*writeaddress = injectionvector_32;
				byteswritten += 3;
			} else if (transferlength == 2) {
				injectionvector_32 = (*readaddress & 0xffff0000)
   80c78:	1884b03a 	or	r2,r3,r2
   80c7c:	e0bff515 	stw	r2,-44(fp)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x0000ffff);
				*writeaddress = injectionvector_32;
   80c80:	e0bff617 	ldw	r2,-40(fp)
   80c84:	e0fff517 	ldw	r3,-44(fp)
   80c88:	10c00015 	stw	r3,0(r2)
				byteswritten += 2;
   80c8c:	e0bff917 	ldw	r2,-28(fp)
   80c90:	10800084 	addi	r2,r2,2
   80c94:	e0bff915 	stw	r2,-28(fp)
   80c98:	00002d06 	br	80d50 <CryptoProcedure+0x260>
			} else if (transferlength == 1) {
   80c9c:	e0bffd17 	ldw	r2,-12(fp)
   80ca0:	10800058 	cmpnei	r2,r2,1
   80ca4:	1000181e 	bne	r2,zero,80d08 <CryptoProcedure+0x218>
				injectionvector_32 = (*readaddress & 0xffffff00)
   80ca8:	e0bff717 	ldw	r2,-36(fp)
   80cac:	10c00017 	ldw	r3,0(r2)
   80cb0:	00bfc004 	movi	r2,-256
   80cb4:	1886703a 	and	r3,r3,r2
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   80cb8:	e0bff717 	ldw	r2,-36(fp)
   80cbc:	11000017 	ldw	r4,0(r2)
   80cc0:	e0bff517 	ldw	r2,-44(fp)
   80cc4:	2088f03a 	xor	r4,r4,r2
   80cc8:	e0bff217 	ldw	r2,-56(fp)
   80ccc:	2088f03a 	xor	r4,r4,r2
								^ key16_32 ^ key32_32) & 0x000000ff);
   80cd0:	e0bff317 	ldw	r2,-52(fp)
   80cd4:	2088f03a 	xor	r4,r4,r2
   80cd8:	e0bff417 	ldw	r2,-48(fp)
   80cdc:	2084f03a 	xor	r2,r4,r2
   80ce0:	10803fcc 	andi	r2,r2,255
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x0000ffff);
				*writeaddress = injectionvector_32;
				byteswritten += 2;
			} else if (transferlength == 1) {
				injectionvector_32 = (*readaddress & 0xffffff00)
   80ce4:	1884b03a 	or	r2,r3,r2
   80ce8:	e0bff515 	stw	r2,-44(fp)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x000000ff);
				*writeaddress = injectionvector_32;
   80cec:	e0bff617 	ldw	r2,-40(fp)
   80cf0:	e0fff517 	ldw	r3,-44(fp)
   80cf4:	10c00015 	stw	r3,0(r2)
				byteswritten += 1;
   80cf8:	e0bff917 	ldw	r2,-28(fp)
   80cfc:	10800044 	addi	r2,r2,1
   80d00:	e0bff915 	stw	r2,-28(fp)
   80d04:	00001206 	br	80d50 <CryptoProcedure+0x260>
			} else {
				injectionvector_32 = (*readaddress ^ injectionvector_32
   80d08:	e0bff717 	ldw	r2,-36(fp)
   80d0c:	10c00017 	ldw	r3,0(r2)
   80d10:	e0bff517 	ldw	r2,-44(fp)
   80d14:	1886f03a 	xor	r3,r3,r2
						^ key8_32 ^ key16_32 ^ key32_32);
   80d18:	e0bff217 	ldw	r2,-56(fp)
   80d1c:	1886f03a 	xor	r3,r3,r2
   80d20:	e0bff317 	ldw	r2,-52(fp)
   80d24:	1886f03a 	xor	r3,r3,r2
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x000000ff);
				*writeaddress = injectionvector_32;
				byteswritten += 1;
			} else {
				injectionvector_32 = (*readaddress ^ injectionvector_32
   80d28:	e0bff417 	ldw	r2,-48(fp)
   80d2c:	1884f03a 	xor	r2,r3,r2
   80d30:	e0bff515 	stw	r2,-44(fp)
						^ key8_32 ^ key16_32 ^ key32_32);
				*writeaddress = injectionvector_32;
   80d34:	e0bff617 	ldw	r2,-40(fp)
   80d38:	e0fff517 	ldw	r3,-44(fp)
   80d3c:	10c00015 	stw	r3,0(r2)
				byteswritten += 4;
   80d40:	e0bff917 	ldw	r2,-28(fp)
   80d44:	10800104 	addi	r2,r2,4
   80d48:	e0bff915 	stw	r2,-28(fp)
			}
			break;
   80d4c:	0000a006 	br	80fd0 <CryptoProcedure+0x4e0>
   80d50:	00009f06 	br	80fd0 <CryptoProcedure+0x4e0>
		case (0x1):
			if (transferlength == 2) {
   80d54:	e0bffd17 	ldw	r2,-12(fp)
   80d58:	10800098 	cmpnei	r2,r2,2
   80d5c:	10001b1e 	bne	r2,zero,80dcc <CryptoProcedure+0x2dc>
				injectionvector_32 = (*readaddress & 0xff0000ff)
   80d60:	e0bff717 	ldw	r2,-36(fp)
   80d64:	10c00017 	ldw	r3,0(r2)
   80d68:	00bfc034 	movhi	r2,65280
   80d6c:	10803fc4 	addi	r2,r2,255
   80d70:	1886703a 	and	r3,r3,r2
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   80d74:	e0bff717 	ldw	r2,-36(fp)
   80d78:	11000017 	ldw	r4,0(r2)
   80d7c:	e0bff517 	ldw	r2,-44(fp)
   80d80:	2088f03a 	xor	r4,r4,r2
   80d84:	e0bff217 	ldw	r2,-56(fp)
   80d88:	2088f03a 	xor	r4,r4,r2
								^ key16_32 ^ key32_32) & 0x00ffff00);
   80d8c:	e0bff317 	ldw	r2,-52(fp)
   80d90:	2088f03a 	xor	r4,r4,r2
   80d94:	e0bff417 	ldw	r2,-48(fp)
   80d98:	2088f03a 	xor	r4,r4,r2
   80d9c:	00804034 	movhi	r2,256
   80da0:	10bfc004 	addi	r2,r2,-256
   80da4:	2084703a 	and	r2,r4,r2
				byteswritten += 4;
			}
			break;
		case (0x1):
			if (transferlength == 2) {
				injectionvector_32 = (*readaddress & 0xff0000ff)
   80da8:	1884b03a 	or	r2,r3,r2
   80dac:	e0bff515 	stw	r2,-44(fp)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x00ffff00);
				*writeaddress = injectionvector_32;
   80db0:	e0bff617 	ldw	r2,-40(fp)
   80db4:	e0fff517 	ldw	r3,-44(fp)
   80db8:	10c00015 	stw	r3,0(r2)
				byteswritten += 2;
   80dbc:	e0bff917 	ldw	r2,-28(fp)
   80dc0:	10800084 	addi	r2,r2,2
   80dc4:	e0bff915 	stw	r2,-28(fp)
   80dc8:	00003406 	br	80e9c <CryptoProcedure+0x3ac>
			} else if (transferlength == 1) {
   80dcc:	e0bffd17 	ldw	r2,-12(fp)
   80dd0:	10800058 	cmpnei	r2,r2,1
   80dd4:	1000191e 	bne	r2,zero,80e3c <CryptoProcedure+0x34c>
				injectionvector_32 = (*readaddress & 0xffff00ff)
   80dd8:	e0bff717 	ldw	r2,-36(fp)
   80ddc:	10c00017 	ldw	r3,0(r2)
   80de0:	00bffff4 	movhi	r2,65535
   80de4:	10803fc4 	addi	r2,r2,255
   80de8:	1886703a 	and	r3,r3,r2
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   80dec:	e0bff717 	ldw	r2,-36(fp)
   80df0:	11000017 	ldw	r4,0(r2)
   80df4:	e0bff517 	ldw	r2,-44(fp)
   80df8:	2088f03a 	xor	r4,r4,r2
   80dfc:	e0bff217 	ldw	r2,-56(fp)
   80e00:	2088f03a 	xor	r4,r4,r2
								^ key16_32 ^ key32_32) & 0x0000ff00);
   80e04:	e0bff317 	ldw	r2,-52(fp)
   80e08:	2088f03a 	xor	r4,r4,r2
   80e0c:	e0bff417 	ldw	r2,-48(fp)
   80e10:	2084f03a 	xor	r2,r4,r2
   80e14:	10bfc00c 	andi	r2,r2,65280
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x00ffff00);
				*writeaddress = injectionvector_32;
				byteswritten += 2;
			} else if (transferlength == 1) {
				injectionvector_32 = (*readaddress & 0xffff00ff)
   80e18:	1884b03a 	or	r2,r3,r2
   80e1c:	e0bff515 	stw	r2,-44(fp)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x0000ff00);
				*writeaddress = injectionvector_32;
   80e20:	e0bff617 	ldw	r2,-40(fp)
   80e24:	e0fff517 	ldw	r3,-44(fp)
   80e28:	10c00015 	stw	r3,0(r2)
				byteswritten += 1;
   80e2c:	e0bff917 	ldw	r2,-28(fp)
   80e30:	10800044 	addi	r2,r2,1
   80e34:	e0bff915 	stw	r2,-28(fp)
   80e38:	00001806 	br	80e9c <CryptoProcedure+0x3ac>
			} else {
				injectionvector_32 = (*readaddress & 0x000000ff)
   80e3c:	e0bff717 	ldw	r2,-36(fp)
   80e40:	10800017 	ldw	r2,0(r2)
   80e44:	10c03fcc 	andi	r3,r2,255
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   80e48:	e0bff717 	ldw	r2,-36(fp)
   80e4c:	11000017 	ldw	r4,0(r2)
   80e50:	e0bff517 	ldw	r2,-44(fp)
   80e54:	2088f03a 	xor	r4,r4,r2
   80e58:	e0bff217 	ldw	r2,-56(fp)
   80e5c:	2088f03a 	xor	r4,r4,r2
								^ key16_32 ^ key32_32) & 0xffffff00);
   80e60:	e0bff317 	ldw	r2,-52(fp)
   80e64:	2088f03a 	xor	r4,r4,r2
   80e68:	e0bff417 	ldw	r2,-48(fp)
   80e6c:	2088f03a 	xor	r4,r4,r2
   80e70:	00bfc004 	movi	r2,-256
   80e74:	2084703a 	and	r2,r4,r2
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x0000ff00);
				*writeaddress = injectionvector_32;
				byteswritten += 1;
			} else {
				injectionvector_32 = (*readaddress & 0x000000ff)
   80e78:	1884b03a 	or	r2,r3,r2
   80e7c:	e0bff515 	stw	r2,-44(fp)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0xffffff00);
				*writeaddress = injectionvector_32;
   80e80:	e0bff617 	ldw	r2,-40(fp)
   80e84:	e0fff517 	ldw	r3,-44(fp)
   80e88:	10c00015 	stw	r3,0(r2)
				byteswritten += 3;
   80e8c:	e0bff917 	ldw	r2,-28(fp)
   80e90:	108000c4 	addi	r2,r2,3
   80e94:	e0bff915 	stw	r2,-28(fp)
				;
			}
			break;
   80e98:	00004d06 	br	80fd0 <CryptoProcedure+0x4e0>
   80e9c:	00004c06 	br	80fd0 <CryptoProcedure+0x4e0>
		case (0x2):
			if (transferlength == 1) {
   80ea0:	e0bffd17 	ldw	r2,-12(fp)
   80ea4:	10800058 	cmpnei	r2,r2,1
   80ea8:	1000191e 	bne	r2,zero,80f10 <CryptoProcedure+0x420>
				injectionvector_32 = (*readaddress & 0xff00ffff)
   80eac:	e0bff717 	ldw	r2,-36(fp)
   80eb0:	10c00017 	ldw	r3,0(r2)
   80eb4:	00bfc074 	movhi	r2,65281
   80eb8:	10bfffc4 	addi	r2,r2,-1
   80ebc:	1886703a 	and	r3,r3,r2
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   80ec0:	e0bff717 	ldw	r2,-36(fp)
   80ec4:	11000017 	ldw	r4,0(r2)
   80ec8:	e0bff517 	ldw	r2,-44(fp)
   80ecc:	2088f03a 	xor	r4,r4,r2
   80ed0:	e0bff217 	ldw	r2,-56(fp)
   80ed4:	2088f03a 	xor	r4,r4,r2
								^ key16_32 ^ key32_32) & 0x00ff0000);
   80ed8:	e0bff317 	ldw	r2,-52(fp)
   80edc:	2088f03a 	xor	r4,r4,r2
   80ee0:	e0bff417 	ldw	r2,-48(fp)
   80ee4:	2084f03a 	xor	r2,r4,r2
   80ee8:	10803fec 	andhi	r2,r2,255
				;
			}
			break;
		case (0x2):
			if (transferlength == 1) {
				injectionvector_32 = (*readaddress & 0xff00ffff)
   80eec:	1884b03a 	or	r2,r3,r2
   80ef0:	e0bff515 	stw	r2,-44(fp)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x00ff0000);
				*writeaddress = injectionvector_32;
   80ef4:	e0bff617 	ldw	r2,-40(fp)
   80ef8:	e0fff517 	ldw	r3,-44(fp)
   80efc:	10c00015 	stw	r3,0(r2)
				byteswritten += 1;
   80f00:	e0bff917 	ldw	r2,-28(fp)
   80f04:	10800044 	addi	r2,r2,1
   80f08:	e0bff915 	stw	r2,-28(fp)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0xffff0000);
				*writeaddress = injectionvector_32;
				byteswritten += 2;
			}
			break;
   80f0c:	00003006 	br	80fd0 <CryptoProcedure+0x4e0>
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x00ff0000);
				*writeaddress = injectionvector_32;
				byteswritten += 1;
			} else {
				injectionvector_32 = (*readaddress & 0x0000ffff)
   80f10:	e0bff717 	ldw	r2,-36(fp)
   80f14:	10800017 	ldw	r2,0(r2)
   80f18:	10ffffcc 	andi	r3,r2,65535
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   80f1c:	e0bff717 	ldw	r2,-36(fp)
   80f20:	11000017 	ldw	r4,0(r2)
   80f24:	e0bff517 	ldw	r2,-44(fp)
   80f28:	2088f03a 	xor	r4,r4,r2
   80f2c:	e0bff217 	ldw	r2,-56(fp)
   80f30:	2088f03a 	xor	r4,r4,r2
								^ key16_32 ^ key32_32) & 0xffff0000);
   80f34:	e0bff317 	ldw	r2,-52(fp)
   80f38:	2088f03a 	xor	r4,r4,r2
   80f3c:	e0bff417 	ldw	r2,-48(fp)
   80f40:	2084f03a 	xor	r2,r4,r2
   80f44:	10bfffec 	andhi	r2,r2,65535
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x00ff0000);
				*writeaddress = injectionvector_32;
				byteswritten += 1;
			} else {
				injectionvector_32 = (*readaddress & 0x0000ffff)
   80f48:	1884b03a 	or	r2,r3,r2
   80f4c:	e0bff515 	stw	r2,-44(fp)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0xffff0000);
				*writeaddress = injectionvector_32;
   80f50:	e0bff617 	ldw	r2,-40(fp)
   80f54:	e0fff517 	ldw	r3,-44(fp)
   80f58:	10c00015 	stw	r3,0(r2)
				byteswritten += 2;
   80f5c:	e0bff917 	ldw	r2,-28(fp)
   80f60:	10800084 	addi	r2,r2,2
   80f64:	e0bff915 	stw	r2,-28(fp)
			}
			break;
   80f68:	00001906 	br	80fd0 <CryptoProcedure+0x4e0>
		case (0x3):
			injectionvector_32 = (*readaddress & 0x00ffffff)
   80f6c:	e0bff717 	ldw	r2,-36(fp)
   80f70:	10c00017 	ldw	r3,0(r2)
   80f74:	00804034 	movhi	r2,256
   80f78:	10bfffc4 	addi	r2,r2,-1
   80f7c:	1886703a 	and	r3,r3,r2
					| ((*readaddress ^ injectionvector_32 ^ key8_32 ^ key16_32
   80f80:	e0bff717 	ldw	r2,-36(fp)
   80f84:	11000017 	ldw	r4,0(r2)
   80f88:	e0bff517 	ldw	r2,-44(fp)
   80f8c:	2088f03a 	xor	r4,r4,r2
   80f90:	e0bff217 	ldw	r2,-56(fp)
   80f94:	2088f03a 	xor	r4,r4,r2
   80f98:	e0bff317 	ldw	r2,-52(fp)
   80f9c:	2088f03a 	xor	r4,r4,r2
							^ key32_32) & 0xff000000);
   80fa0:	e0bff417 	ldw	r2,-48(fp)
   80fa4:	2084f03a 	xor	r2,r4,r2
   80fa8:	10bfc02c 	andhi	r2,r2,65280
				*writeaddress = injectionvector_32;
				byteswritten += 2;
			}
			break;
		case (0x3):
			injectionvector_32 = (*readaddress & 0x00ffffff)
   80fac:	1884b03a 	or	r2,r3,r2
   80fb0:	e0bff515 	stw	r2,-44(fp)
					| ((*readaddress ^ injectionvector_32 ^ key8_32 ^ key16_32
							^ key32_32) & 0xff000000);
			*writeaddress = injectionvector_32;
   80fb4:	e0bff617 	ldw	r2,-40(fp)
   80fb8:	e0fff517 	ldw	r3,-44(fp)
   80fbc:	10c00015 	stw	r3,0(r2)
			byteswritten += 1;
   80fc0:	e0bff917 	ldw	r2,-28(fp)
   80fc4:	10800044 	addi	r2,r2,1
   80fc8:	e0bff915 	stw	r2,-28(fp)
			break;
   80fcc:	0001883a 	nop
		}

		readaddress += 0x1;
   80fd0:	e0bff717 	ldw	r2,-36(fp)
   80fd4:	10800104 	addi	r2,r2,4
   80fd8:	e0bff715 	stw	r2,-36(fp)
		writeaddress += 0x1;
   80fdc:	e0bff617 	ldw	r2,-40(fp)
   80fe0:	10800104 	addi	r2,r2,4
   80fe4:	e0bff615 	stw	r2,-40(fp)

		while (byteswritten < transferlength) {
   80fe8:	00008106 	br	811f0 <CryptoProcedure+0x700>
			rotationcounter += 1;
   80fec:	e0bff817 	ldw	r2,-32(fp)
   80ff0:	10800044 	addi	r2,r2,1
   80ff4:	e0bff815 	stw	r2,-32(fp)
			key32_32 = (key32_32 >> 1) | (key32_32 << 31);
   80ff8:	e0fff417 	ldw	r3,-48(fp)
   80ffc:	00800044 	movi	r2,1
   81000:	1884583a 	ror	r2,r3,r2
   81004:	e0bff415 	stw	r2,-48(fp)
			if ((rotationcounter & 0x1f) == 0x1) {
   81008:	e0bff817 	ldw	r2,-32(fp)
   8100c:	108007cc 	andi	r2,r2,31
   81010:	10800058 	cmpnei	r2,r2,1
   81014:	1000041e 	bne	r2,zero,81028 <CryptoProcedure+0x538>
				key16_32 = (key16_32 >> 1) | (key16_32 << 31);
   81018:	e0fff317 	ldw	r3,-52(fp)
   8101c:	00800044 	movi	r2,1
   81020:	1884583a 	ror	r2,r3,r2
   81024:	e0bff315 	stw	r2,-52(fp)
			}
			if ((rotationcounter & 0x7f) == 0x1) {
   81028:	e0bff817 	ldw	r2,-32(fp)
   8102c:	10801fcc 	andi	r2,r2,127
   81030:	10800058 	cmpnei	r2,r2,1
   81034:	1000041e 	bne	r2,zero,81048 <CryptoProcedure+0x558>
				key8_32 = (key8_32 >> 1) | (key8_32 << 31);
   81038:	e0fff217 	ldw	r3,-56(fp)
   8103c:	00800044 	movi	r2,1
   81040:	1884583a 	ror	r2,r3,r2
   81044:	e0bff215 	stw	r2,-56(fp)
			}
			switch (transferlength - byteswritten) {
   81048:	e0fffd17 	ldw	r3,-12(fp)
   8104c:	e0bff917 	ldw	r2,-28(fp)
   81050:	1885c83a 	sub	r2,r3,r2
   81054:	10c000a0 	cmpeqi	r3,r2,2
   81058:	18001e1e 	bne	r3,zero,810d4 <CryptoProcedure+0x5e4>
   8105c:	10c000e0 	cmpeqi	r3,r2,3
   81060:	1800031e 	bne	r3,zero,81070 <CryptoProcedure+0x580>
   81064:	10800060 	cmpeqi	r2,r2,1
   81068:	1000311e 	bne	r2,zero,81130 <CryptoProcedure+0x640>
   8106c:	00004806 	br	81190 <CryptoProcedure+0x6a0>
			case (3):
				injectionvector_32 = (*readaddress & 0xff000000)
   81070:	e0bff717 	ldw	r2,-36(fp)
   81074:	10800017 	ldw	r2,0(r2)
   81078:	10ffc02c 	andhi	r3,r2,65280
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   8107c:	e0bff717 	ldw	r2,-36(fp)
   81080:	11000017 	ldw	r4,0(r2)
   81084:	e0bff517 	ldw	r2,-44(fp)
   81088:	2088f03a 	xor	r4,r4,r2
   8108c:	e0bff217 	ldw	r2,-56(fp)
   81090:	2088f03a 	xor	r4,r4,r2
								^ key16_32 ^ key32_32) & 0x00ffffff);
   81094:	e0bff317 	ldw	r2,-52(fp)
   81098:	2088f03a 	xor	r4,r4,r2
   8109c:	e0bff417 	ldw	r2,-48(fp)
   810a0:	2088f03a 	xor	r4,r4,r2
   810a4:	00804034 	movhi	r2,256
   810a8:	10bfffc4 	addi	r2,r2,-1
   810ac:	2084703a 	and	r2,r4,r2
			if ((rotationcounter & 0x7f) == 0x1) {
				key8_32 = (key8_32 >> 1) | (key8_32 << 31);
			}
			switch (transferlength - byteswritten) {
			case (3):
				injectionvector_32 = (*readaddress & 0xff000000)
   810b0:	1884b03a 	or	r2,r3,r2
   810b4:	e0bff515 	stw	r2,-44(fp)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x00ffffff);
				*writeaddress = injectionvector_32;
   810b8:	e0bff617 	ldw	r2,-40(fp)
   810bc:	e0fff517 	ldw	r3,-44(fp)
   810c0:	10c00015 	stw	r3,0(r2)
				byteswritten += 3;
   810c4:	e0bff917 	ldw	r2,-28(fp)
   810c8:	108000c4 	addi	r2,r2,3
   810cc:	e0bff915 	stw	r2,-28(fp)
				break;
   810d0:	00004106 	br	811d8 <CryptoProcedure+0x6e8>
			case (2):
				injectionvector_32 = (*readaddress & 0xffff0000)
   810d4:	e0bff717 	ldw	r2,-36(fp)
   810d8:	10800017 	ldw	r2,0(r2)
   810dc:	10ffffec 	andhi	r3,r2,65535
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   810e0:	e0bff717 	ldw	r2,-36(fp)
   810e4:	11000017 	ldw	r4,0(r2)
   810e8:	e0bff517 	ldw	r2,-44(fp)
   810ec:	2088f03a 	xor	r4,r4,r2
   810f0:	e0bff217 	ldw	r2,-56(fp)
   810f4:	2088f03a 	xor	r4,r4,r2
								^ key16_32 ^ key32_32) & 0x0000ffff);
   810f8:	e0bff317 	ldw	r2,-52(fp)
   810fc:	2088f03a 	xor	r4,r4,r2
   81100:	e0bff417 	ldw	r2,-48(fp)
   81104:	2084f03a 	xor	r2,r4,r2
   81108:	10bfffcc 	andi	r2,r2,65535
								^ key16_32 ^ key32_32) & 0x00ffffff);
				*writeaddress = injectionvector_32;
				byteswritten += 3;
				break;
			case (2):
				injectionvector_32 = (*readaddress & 0xffff0000)
   8110c:	1884b03a 	or	r2,r3,r2
   81110:	e0bff515 	stw	r2,-44(fp)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x0000ffff);
				*writeaddress = injectionvector_32;
   81114:	e0bff617 	ldw	r2,-40(fp)
   81118:	e0fff517 	ldw	r3,-44(fp)
   8111c:	10c00015 	stw	r3,0(r2)
				byteswritten += 2;
   81120:	e0bff917 	ldw	r2,-28(fp)
   81124:	10800084 	addi	r2,r2,2
   81128:	e0bff915 	stw	r2,-28(fp)
				break;
   8112c:	00002a06 	br	811d8 <CryptoProcedure+0x6e8>
			case (1):
				injectionvector_32 = (*readaddress & 0xffffff00)
   81130:	e0bff717 	ldw	r2,-36(fp)
   81134:	10c00017 	ldw	r3,0(r2)
   81138:	00bfc004 	movi	r2,-256
   8113c:	1886703a 	and	r3,r3,r2
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   81140:	e0bff717 	ldw	r2,-36(fp)
   81144:	11000017 	ldw	r4,0(r2)
   81148:	e0bff517 	ldw	r2,-44(fp)
   8114c:	2088f03a 	xor	r4,r4,r2
   81150:	e0bff217 	ldw	r2,-56(fp)
   81154:	2088f03a 	xor	r4,r4,r2
								^ key16_32 ^ key32_32) & 0x000000ff);
   81158:	e0bff317 	ldw	r2,-52(fp)
   8115c:	2088f03a 	xor	r4,r4,r2
   81160:	e0bff417 	ldw	r2,-48(fp)
   81164:	2084f03a 	xor	r2,r4,r2
   81168:	10803fcc 	andi	r2,r2,255
								^ key16_32 ^ key32_32) & 0x0000ffff);
				*writeaddress = injectionvector_32;
				byteswritten += 2;
				break;
			case (1):
				injectionvector_32 = (*readaddress & 0xffffff00)
   8116c:	1884b03a 	or	r2,r3,r2
   81170:	e0bff515 	stw	r2,-44(fp)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x000000ff);
				*writeaddress = injectionvector_32;
   81174:	e0bff617 	ldw	r2,-40(fp)
   81178:	e0fff517 	ldw	r3,-44(fp)
   8117c:	10c00015 	stw	r3,0(r2)
				byteswritten += 1;
   81180:	e0bff917 	ldw	r2,-28(fp)
   81184:	10800044 	addi	r2,r2,1
   81188:	e0bff915 	stw	r2,-28(fp)
				break;
   8118c:	00001206 	br	811d8 <CryptoProcedure+0x6e8>
			default:
				injectionvector_32 = (*readaddress ^ injectionvector_32
   81190:	e0bff717 	ldw	r2,-36(fp)
   81194:	10c00017 	ldw	r3,0(r2)
   81198:	e0bff517 	ldw	r2,-44(fp)
   8119c:	1886f03a 	xor	r3,r3,r2
						^ key8_32 ^ key16_32 ^ key32_32);
   811a0:	e0bff217 	ldw	r2,-56(fp)
   811a4:	1886f03a 	xor	r3,r3,r2
   811a8:	e0bff317 	ldw	r2,-52(fp)
   811ac:	1886f03a 	xor	r3,r3,r2
								^ key16_32 ^ key32_32) & 0x000000ff);
				*writeaddress = injectionvector_32;
				byteswritten += 1;
				break;
			default:
				injectionvector_32 = (*readaddress ^ injectionvector_32
   811b0:	e0bff417 	ldw	r2,-48(fp)
   811b4:	1884f03a 	xor	r2,r3,r2
   811b8:	e0bff515 	stw	r2,-44(fp)
						^ key8_32 ^ key16_32 ^ key32_32);
				*writeaddress = injectionvector_32;
   811bc:	e0bff617 	ldw	r2,-40(fp)
   811c0:	e0fff517 	ldw	r3,-44(fp)
   811c4:	10c00015 	stw	r3,0(r2)
				byteswritten += 4;
   811c8:	e0bff917 	ldw	r2,-28(fp)
   811cc:	10800104 	addi	r2,r2,4
   811d0:	e0bff915 	stw	r2,-28(fp)
				break;
   811d4:	0001883a 	nop
			}
			readaddress += 0x1;
   811d8:	e0bff717 	ldw	r2,-36(fp)
   811dc:	10800104 	addi	r2,r2,4
   811e0:	e0bff715 	stw	r2,-36(fp)
			writeaddress += 0x1;
   811e4:	e0bff617 	ldw	r2,-40(fp)
   811e8:	10800104 	addi	r2,r2,4
   811ec:	e0bff615 	stw	r2,-40(fp)
		}

		readaddress += 0x1;
		writeaddress += 0x1;

		while (byteswritten < transferlength) {
   811f0:	e0fff917 	ldw	r3,-28(fp)
   811f4:	e0bffd17 	ldw	r2,-12(fp)
   811f8:	18bf7c36 	bltu	r3,r2,80fec <_gp+0xfffe6bf8>
   811fc:	0001a906 	br	818a4 <CryptoProcedure+0xdb4>
				break;
			}
			readaddress += 0x1;
			writeaddress += 0x1;
		}
	} else if (control == 1) {
   81200:	e0bffa03 	ldbu	r2,-24(fp)
   81204:	10800058 	cmpnei	r2,r2,1
   81208:	1001a61e 	bne	r2,zero,818a4 <CryptoProcedure+0xdb4>
		switch ((unsigned int) readstart & 0x3) {
   8120c:	e0bffb17 	ldw	r2,-20(fp)
   81210:	108000cc 	andi	r2,r2,3
   81214:	10c00060 	cmpeqi	r3,r2,1
   81218:	18006e1e 	bne	r3,zero,813d4 <CryptoProcedure+0x8e4>
   8121c:	0080052e 	bgeu	zero,r2,81234 <CryptoProcedure+0x744>
   81220:	10c000a0 	cmpeqi	r3,r2,2
   81224:	1800c11e 	bne	r3,zero,8152c <CryptoProcedure+0xa3c>
   81228:	108000e0 	cmpeqi	r2,r2,3
   8122c:	1000f41e 	bne	r2,zero,81600 <CryptoProcedure+0xb10>
   81230:	00010d06 	br	81668 <CryptoProcedure+0xb78>
		case (0x0):
			if (transferlength == 3) {
   81234:	e0bffd17 	ldw	r2,-12(fp)
   81238:	108000d8 	cmpnei	r2,r2,3
   8123c:	10001a1e 	bne	r2,zero,812a8 <CryptoProcedure+0x7b8>
				*writeaddress = (*readaddress & 0xff000000)
   81240:	e0bff717 	ldw	r2,-36(fp)
   81244:	10800017 	ldw	r2,0(r2)
   81248:	10ffc02c 	andhi	r3,r2,65280
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   8124c:	e0bff717 	ldw	r2,-36(fp)
   81250:	11000017 	ldw	r4,0(r2)
   81254:	e0bff517 	ldw	r2,-44(fp)
   81258:	2088f03a 	xor	r4,r4,r2
   8125c:	e0bff217 	ldw	r2,-56(fp)
   81260:	2088f03a 	xor	r4,r4,r2
								^ key16_32 ^ key32_32) & 0x00ffffff);
   81264:	e0bff317 	ldw	r2,-52(fp)
   81268:	2088f03a 	xor	r4,r4,r2
   8126c:	e0bff417 	ldw	r2,-48(fp)
   81270:	2088f03a 	xor	r4,r4,r2
   81274:	00804034 	movhi	r2,256
   81278:	10bfffc4 	addi	r2,r2,-1
   8127c:	2084703a 	and	r2,r4,r2
	} else if (control == 1) {
		switch ((unsigned int) readstart & 0x3) {
		case (0x0):
			if (transferlength == 3) {
				*writeaddress = (*readaddress & 0xff000000)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   81280:	1886b03a 	or	r3,r3,r2
		}
	} else if (control == 1) {
		switch ((unsigned int) readstart & 0x3) {
		case (0x0):
			if (transferlength == 3) {
				*writeaddress = (*readaddress & 0xff000000)
   81284:	e0bff617 	ldw	r2,-40(fp)
   81288:	10c00015 	stw	r3,0(r2)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x00ffffff);
				injectionvector_32 = *readaddress;
   8128c:	e0bff717 	ldw	r2,-36(fp)
   81290:	10800017 	ldw	r2,0(r2)
   81294:	e0bff515 	stw	r2,-44(fp)
				byteswritten += 3;
   81298:	e0bff917 	ldw	r2,-28(fp)
   8129c:	108000c4 	addi	r2,r2,3
   812a0:	e0bff915 	stw	r2,-28(fp)
   812a4:	00004a06 	br	813d0 <CryptoProcedure+0x8e0>
			} else if (transferlength == 2) {
   812a8:	e0bffd17 	ldw	r2,-12(fp)
   812ac:	10800098 	cmpnei	r2,r2,2
   812b0:	1000181e 	bne	r2,zero,81314 <CryptoProcedure+0x824>
				*writeaddress = (*readaddress & 0xffff0000)
   812b4:	e0bff717 	ldw	r2,-36(fp)
   812b8:	10800017 	ldw	r2,0(r2)
   812bc:	10ffffec 	andhi	r3,r2,65535
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   812c0:	e0bff717 	ldw	r2,-36(fp)
   812c4:	11000017 	ldw	r4,0(r2)
   812c8:	e0bff517 	ldw	r2,-44(fp)
   812cc:	2088f03a 	xor	r4,r4,r2
   812d0:	e0bff217 	ldw	r2,-56(fp)
   812d4:	2088f03a 	xor	r4,r4,r2
								^ key16_32 ^ key32_32) & 0x0000ffff);
   812d8:	e0bff317 	ldw	r2,-52(fp)
   812dc:	2088f03a 	xor	r4,r4,r2
   812e0:	e0bff417 	ldw	r2,-48(fp)
   812e4:	2084f03a 	xor	r2,r4,r2
   812e8:	10bfffcc 	andi	r2,r2,65535
								^ key16_32 ^ key32_32) & 0x00ffffff);
				injectionvector_32 = *readaddress;
				byteswritten += 3;
			} else if (transferlength == 2) {
				*writeaddress = (*readaddress & 0xffff0000)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   812ec:	1886b03a 	or	r3,r3,r2
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x00ffffff);
				injectionvector_32 = *readaddress;
				byteswritten += 3;
			} else if (transferlength == 2) {
				*writeaddress = (*readaddress & 0xffff0000)
   812f0:	e0bff617 	ldw	r2,-40(fp)
   812f4:	10c00015 	stw	r3,0(r2)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x0000ffff);
				injectionvector_32 = *readaddress;
   812f8:	e0bff717 	ldw	r2,-36(fp)
   812fc:	10800017 	ldw	r2,0(r2)
   81300:	e0bff515 	stw	r2,-44(fp)
				byteswritten += 2;
   81304:	e0bff917 	ldw	r2,-28(fp)
   81308:	10800084 	addi	r2,r2,2
   8130c:	e0bff915 	stw	r2,-28(fp)
   81310:	00002f06 	br	813d0 <CryptoProcedure+0x8e0>
			} else if (transferlength == 1) {
   81314:	e0bffd17 	ldw	r2,-12(fp)
   81318:	10800058 	cmpnei	r2,r2,1
   8131c:	1000191e 	bne	r2,zero,81384 <CryptoProcedure+0x894>
				*writeaddress = (*readaddress & 0xffffff00)
   81320:	e0bff717 	ldw	r2,-36(fp)
   81324:	10c00017 	ldw	r3,0(r2)
   81328:	00bfc004 	movi	r2,-256
   8132c:	1886703a 	and	r3,r3,r2
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   81330:	e0bff717 	ldw	r2,-36(fp)
   81334:	11000017 	ldw	r4,0(r2)
   81338:	e0bff517 	ldw	r2,-44(fp)
   8133c:	2088f03a 	xor	r4,r4,r2
   81340:	e0bff217 	ldw	r2,-56(fp)
   81344:	2088f03a 	xor	r4,r4,r2
								^ key16_32 ^ key32_32) & 0x000000ff);
   81348:	e0bff317 	ldw	r2,-52(fp)
   8134c:	2088f03a 	xor	r4,r4,r2
   81350:	e0bff417 	ldw	r2,-48(fp)
   81354:	2084f03a 	xor	r2,r4,r2
   81358:	10803fcc 	andi	r2,r2,255
								^ key16_32 ^ key32_32) & 0x0000ffff);
				injectionvector_32 = *readaddress;
				byteswritten += 2;
			} else if (transferlength == 1) {
				*writeaddress = (*readaddress & 0xffffff00)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   8135c:	1886b03a 	or	r3,r3,r2
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x0000ffff);
				injectionvector_32 = *readaddress;
				byteswritten += 2;
			} else if (transferlength == 1) {
				*writeaddress = (*readaddress & 0xffffff00)
   81360:	e0bff617 	ldw	r2,-40(fp)
   81364:	10c00015 	stw	r3,0(r2)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x000000ff);
				injectionvector_32 = *readaddress;
   81368:	e0bff717 	ldw	r2,-36(fp)
   8136c:	10800017 	ldw	r2,0(r2)
   81370:	e0bff515 	stw	r2,-44(fp)
				byteswritten += 1;
   81374:	e0bff917 	ldw	r2,-28(fp)
   81378:	10800044 	addi	r2,r2,1
   8137c:	e0bff915 	stw	r2,-28(fp)
   81380:	00001306 	br	813d0 <CryptoProcedure+0x8e0>
			} else {
				*writeaddress = (*readaddress ^ injectionvector_32 ^ key8_32
   81384:	e0bff717 	ldw	r2,-36(fp)
   81388:	10c00017 	ldw	r3,0(r2)
   8138c:	e0bff517 	ldw	r2,-44(fp)
   81390:	1886f03a 	xor	r3,r3,r2
   81394:	e0bff217 	ldw	r2,-56(fp)
   81398:	1886f03a 	xor	r3,r3,r2
						^ key16_32 ^ key32_32);
   8139c:	e0bff317 	ldw	r2,-52(fp)
   813a0:	1886f03a 	xor	r3,r3,r2
   813a4:	e0bff417 	ldw	r2,-48(fp)
   813a8:	1886f03a 	xor	r3,r3,r2
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x000000ff);
				injectionvector_32 = *readaddress;
				byteswritten += 1;
			} else {
				*writeaddress = (*readaddress ^ injectionvector_32 ^ key8_32
   813ac:	e0bff617 	ldw	r2,-40(fp)
   813b0:	10c00015 	stw	r3,0(r2)
						^ key16_32 ^ key32_32);
				injectionvector_32 = *readaddress;
   813b4:	e0bff717 	ldw	r2,-36(fp)
   813b8:	10800017 	ldw	r2,0(r2)
   813bc:	e0bff515 	stw	r2,-44(fp)
				byteswritten += 4;
   813c0:	e0bff917 	ldw	r2,-28(fp)
   813c4:	10800104 	addi	r2,r2,4
   813c8:	e0bff915 	stw	r2,-28(fp)
			}
			break;
   813cc:	0000a606 	br	81668 <CryptoProcedure+0xb78>
   813d0:	0000a506 	br	81668 <CryptoProcedure+0xb78>
		case (0x1):
			if (transferlength == 2) {
   813d4:	e0bffd17 	ldw	r2,-12(fp)
   813d8:	10800098 	cmpnei	r2,r2,2
   813dc:	10001c1e 	bne	r2,zero,81450 <CryptoProcedure+0x960>
				*writeaddress = (*readaddress & 0xff0000ff)
   813e0:	e0bff717 	ldw	r2,-36(fp)
   813e4:	10c00017 	ldw	r3,0(r2)
   813e8:	00bfc034 	movhi	r2,65280
   813ec:	10803fc4 	addi	r2,r2,255
   813f0:	1886703a 	and	r3,r3,r2
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   813f4:	e0bff717 	ldw	r2,-36(fp)
   813f8:	11000017 	ldw	r4,0(r2)
   813fc:	e0bff517 	ldw	r2,-44(fp)
   81400:	2088f03a 	xor	r4,r4,r2
   81404:	e0bff217 	ldw	r2,-56(fp)
   81408:	2088f03a 	xor	r4,r4,r2
								^ key16_32 ^ key32_32) & 0x00ffff00);
   8140c:	e0bff317 	ldw	r2,-52(fp)
   81410:	2088f03a 	xor	r4,r4,r2
   81414:	e0bff417 	ldw	r2,-48(fp)
   81418:	2088f03a 	xor	r4,r4,r2
   8141c:	00804034 	movhi	r2,256
   81420:	10bfc004 	addi	r2,r2,-256
   81424:	2084703a 	and	r2,r4,r2
			}
			break;
		case (0x1):
			if (transferlength == 2) {
				*writeaddress = (*readaddress & 0xff0000ff)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   81428:	1886b03a 	or	r3,r3,r2
				byteswritten += 4;
			}
			break;
		case (0x1):
			if (transferlength == 2) {
				*writeaddress = (*readaddress & 0xff0000ff)
   8142c:	e0bff617 	ldw	r2,-40(fp)
   81430:	10c00015 	stw	r3,0(r2)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x00ffff00);
				injectionvector_32 = *readaddress;
   81434:	e0bff717 	ldw	r2,-36(fp)
   81438:	10800017 	ldw	r2,0(r2)
   8143c:	e0bff515 	stw	r2,-44(fp)
				byteswritten += 2;
   81440:	e0bff917 	ldw	r2,-28(fp)
   81444:	10800084 	addi	r2,r2,2
   81448:	e0bff915 	stw	r2,-28(fp)
   8144c:	00003606 	br	81528 <CryptoProcedure+0xa38>
			} else if (transferlength == 1) {
   81450:	e0bffd17 	ldw	r2,-12(fp)
   81454:	10800058 	cmpnei	r2,r2,1
   81458:	10001a1e 	bne	r2,zero,814c4 <CryptoProcedure+0x9d4>
				*writeaddress = (*readaddress & 0xffff00ff)
   8145c:	e0bff717 	ldw	r2,-36(fp)
   81460:	10c00017 	ldw	r3,0(r2)
   81464:	00bffff4 	movhi	r2,65535
   81468:	10803fc4 	addi	r2,r2,255
   8146c:	1886703a 	and	r3,r3,r2
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   81470:	e0bff717 	ldw	r2,-36(fp)
   81474:	11000017 	ldw	r4,0(r2)
   81478:	e0bff517 	ldw	r2,-44(fp)
   8147c:	2088f03a 	xor	r4,r4,r2
   81480:	e0bff217 	ldw	r2,-56(fp)
   81484:	2088f03a 	xor	r4,r4,r2
								^ key16_32 ^ key32_32) & 0x0000ff00);
   81488:	e0bff317 	ldw	r2,-52(fp)
   8148c:	2088f03a 	xor	r4,r4,r2
   81490:	e0bff417 	ldw	r2,-48(fp)
   81494:	2084f03a 	xor	r2,r4,r2
   81498:	10bfc00c 	andi	r2,r2,65280
								^ key16_32 ^ key32_32) & 0x00ffff00);
				injectionvector_32 = *readaddress;
				byteswritten += 2;
			} else if (transferlength == 1) {
				*writeaddress = (*readaddress & 0xffff00ff)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   8149c:	1886b03a 	or	r3,r3,r2
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x00ffff00);
				injectionvector_32 = *readaddress;
				byteswritten += 2;
			} else if (transferlength == 1) {
				*writeaddress = (*readaddress & 0xffff00ff)
   814a0:	e0bff617 	ldw	r2,-40(fp)
   814a4:	10c00015 	stw	r3,0(r2)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x0000ff00);
				injectionvector_32 = *readaddress;
   814a8:	e0bff717 	ldw	r2,-36(fp)
   814ac:	10800017 	ldw	r2,0(r2)
   814b0:	e0bff515 	stw	r2,-44(fp)
				byteswritten += 1;
   814b4:	e0bff917 	ldw	r2,-28(fp)
   814b8:	10800044 	addi	r2,r2,1
   814bc:	e0bff915 	stw	r2,-28(fp)
   814c0:	00001906 	br	81528 <CryptoProcedure+0xa38>
			} else {
				*writeaddress = (*readaddress & 0x000000ff)
   814c4:	e0bff717 	ldw	r2,-36(fp)
   814c8:	10800017 	ldw	r2,0(r2)
   814cc:	10c03fcc 	andi	r3,r2,255
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   814d0:	e0bff717 	ldw	r2,-36(fp)
   814d4:	11000017 	ldw	r4,0(r2)
   814d8:	e0bff517 	ldw	r2,-44(fp)
   814dc:	2088f03a 	xor	r4,r4,r2
   814e0:	e0bff217 	ldw	r2,-56(fp)
   814e4:	2088f03a 	xor	r4,r4,r2
								^ key16_32 ^ key32_32) & 0xffffff00);
   814e8:	e0bff317 	ldw	r2,-52(fp)
   814ec:	2088f03a 	xor	r4,r4,r2
   814f0:	e0bff417 	ldw	r2,-48(fp)
   814f4:	2088f03a 	xor	r4,r4,r2
   814f8:	00bfc004 	movi	r2,-256
   814fc:	2084703a 	and	r2,r4,r2
								^ key16_32 ^ key32_32) & 0x0000ff00);
				injectionvector_32 = *readaddress;
				byteswritten += 1;
			} else {
				*writeaddress = (*readaddress & 0x000000ff)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   81500:	1886b03a 	or	r3,r3,r2
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x0000ff00);
				injectionvector_32 = *readaddress;
				byteswritten += 1;
			} else {
				*writeaddress = (*readaddress & 0x000000ff)
   81504:	e0bff617 	ldw	r2,-40(fp)
   81508:	10c00015 	stw	r3,0(r2)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0xffffff00);
				injectionvector_32 = *readaddress;
   8150c:	e0bff717 	ldw	r2,-36(fp)
   81510:	10800017 	ldw	r2,0(r2)
   81514:	e0bff515 	stw	r2,-44(fp)
				byteswritten += 3;
   81518:	e0bff917 	ldw	r2,-28(fp)
   8151c:	108000c4 	addi	r2,r2,3
   81520:	e0bff915 	stw	r2,-28(fp)
				;
			}
			break;
   81524:	00005006 	br	81668 <CryptoProcedure+0xb78>
   81528:	00004f06 	br	81668 <CryptoProcedure+0xb78>
		case (0x2):
			if (transferlength == 1) {
   8152c:	e0bffd17 	ldw	r2,-12(fp)
   81530:	10800058 	cmpnei	r2,r2,1
   81534:	10001a1e 	bne	r2,zero,815a0 <CryptoProcedure+0xab0>
				*writeaddress = (*readaddress & 0xff00ffff)
   81538:	e0bff717 	ldw	r2,-36(fp)
   8153c:	10c00017 	ldw	r3,0(r2)
   81540:	00bfc074 	movhi	r2,65281
   81544:	10bfffc4 	addi	r2,r2,-1
   81548:	1886703a 	and	r3,r3,r2
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   8154c:	e0bff717 	ldw	r2,-36(fp)
   81550:	11000017 	ldw	r4,0(r2)
   81554:	e0bff517 	ldw	r2,-44(fp)
   81558:	2088f03a 	xor	r4,r4,r2
   8155c:	e0bff217 	ldw	r2,-56(fp)
   81560:	2088f03a 	xor	r4,r4,r2
								^ key16_32 ^ key32_32) & 0x00ff0000);
   81564:	e0bff317 	ldw	r2,-52(fp)
   81568:	2088f03a 	xor	r4,r4,r2
   8156c:	e0bff417 	ldw	r2,-48(fp)
   81570:	2084f03a 	xor	r2,r4,r2
   81574:	10803fec 	andhi	r2,r2,255
			}
			break;
		case (0x2):
			if (transferlength == 1) {
				*writeaddress = (*readaddress & 0xff00ffff)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   81578:	1886b03a 	or	r3,r3,r2
				;
			}
			break;
		case (0x2):
			if (transferlength == 1) {
				*writeaddress = (*readaddress & 0xff00ffff)
   8157c:	e0bff617 	ldw	r2,-40(fp)
   81580:	10c00015 	stw	r3,0(r2)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x00ff0000);
				injectionvector_32 = *readaddress;
   81584:	e0bff717 	ldw	r2,-36(fp)
   81588:	10800017 	ldw	r2,0(r2)
   8158c:	e0bff515 	stw	r2,-44(fp)
				byteswritten += 1;
   81590:	e0bff917 	ldw	r2,-28(fp)
   81594:	10800044 	addi	r2,r2,1
   81598:	e0bff915 	stw	r2,-28(fp)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0xffff0000);
				injectionvector_32 = *readaddress;
				byteswritten += 2;
			}
			break;
   8159c:	00003206 	br	81668 <CryptoProcedure+0xb78>
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x00ff0000);
				injectionvector_32 = *readaddress;
				byteswritten += 1;
			} else {
				*writeaddress = (*readaddress & 0x0000ffff)
   815a0:	e0bff717 	ldw	r2,-36(fp)
   815a4:	10800017 	ldw	r2,0(r2)
   815a8:	10ffffcc 	andi	r3,r2,65535
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   815ac:	e0bff717 	ldw	r2,-36(fp)
   815b0:	11000017 	ldw	r4,0(r2)
   815b4:	e0bff517 	ldw	r2,-44(fp)
   815b8:	2088f03a 	xor	r4,r4,r2
   815bc:	e0bff217 	ldw	r2,-56(fp)
   815c0:	2088f03a 	xor	r4,r4,r2
								^ key16_32 ^ key32_32) & 0xffff0000);
   815c4:	e0bff317 	ldw	r2,-52(fp)
   815c8:	2088f03a 	xor	r4,r4,r2
   815cc:	e0bff417 	ldw	r2,-48(fp)
   815d0:	2084f03a 	xor	r2,r4,r2
   815d4:	10bfffec 	andhi	r2,r2,65535
								^ key16_32 ^ key32_32) & 0x00ff0000);
				injectionvector_32 = *readaddress;
				byteswritten += 1;
			} else {
				*writeaddress = (*readaddress & 0x0000ffff)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   815d8:	1886b03a 	or	r3,r3,r2
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x00ff0000);
				injectionvector_32 = *readaddress;
				byteswritten += 1;
			} else {
				*writeaddress = (*readaddress & 0x0000ffff)
   815dc:	e0bff617 	ldw	r2,-40(fp)
   815e0:	10c00015 	stw	r3,0(r2)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0xffff0000);
				injectionvector_32 = *readaddress;
   815e4:	e0bff717 	ldw	r2,-36(fp)
   815e8:	10800017 	ldw	r2,0(r2)
   815ec:	e0bff515 	stw	r2,-44(fp)
				byteswritten += 2;
   815f0:	e0bff917 	ldw	r2,-28(fp)
   815f4:	10800084 	addi	r2,r2,2
   815f8:	e0bff915 	stw	r2,-28(fp)
			}
			break;
   815fc:	00001a06 	br	81668 <CryptoProcedure+0xb78>
		case (0x3):
			*writeaddress = (*readaddress & 0x00ffffff)
   81600:	e0bff717 	ldw	r2,-36(fp)
   81604:	10c00017 	ldw	r3,0(r2)
   81608:	00804034 	movhi	r2,256
   8160c:	10bfffc4 	addi	r2,r2,-1
   81610:	1886703a 	and	r3,r3,r2
					| ((*readaddress ^ injectionvector_32 ^ key8_32 ^ key16_32
   81614:	e0bff717 	ldw	r2,-36(fp)
   81618:	11000017 	ldw	r4,0(r2)
   8161c:	e0bff517 	ldw	r2,-44(fp)
   81620:	2088f03a 	xor	r4,r4,r2
   81624:	e0bff217 	ldw	r2,-56(fp)
   81628:	2088f03a 	xor	r4,r4,r2
   8162c:	e0bff317 	ldw	r2,-52(fp)
   81630:	2088f03a 	xor	r4,r4,r2
							^ key32_32) & 0xff000000);
   81634:	e0bff417 	ldw	r2,-48(fp)
   81638:	2084f03a 	xor	r2,r4,r2
   8163c:	10bfc02c 	andhi	r2,r2,65280
				byteswritten += 2;
			}
			break;
		case (0x3):
			*writeaddress = (*readaddress & 0x00ffffff)
					| ((*readaddress ^ injectionvector_32 ^ key8_32 ^ key16_32
   81640:	1886b03a 	or	r3,r3,r2
				injectionvector_32 = *readaddress;
				byteswritten += 2;
			}
			break;
		case (0x3):
			*writeaddress = (*readaddress & 0x00ffffff)
   81644:	e0bff617 	ldw	r2,-40(fp)
   81648:	10c00015 	stw	r3,0(r2)
					| ((*readaddress ^ injectionvector_32 ^ key8_32 ^ key16_32
							^ key32_32) & 0xff000000);
			injectionvector_32 = *readaddress;
   8164c:	e0bff717 	ldw	r2,-36(fp)
   81650:	10800017 	ldw	r2,0(r2)
   81654:	e0bff515 	stw	r2,-44(fp)
			byteswritten += 1;
   81658:	e0bff917 	ldw	r2,-28(fp)
   8165c:	10800044 	addi	r2,r2,1
   81660:	e0bff915 	stw	r2,-28(fp)
			break;
   81664:	0001883a 	nop
		}

		readaddress += 0x1;
   81668:	e0bff717 	ldw	r2,-36(fp)
   8166c:	10800104 	addi	r2,r2,4
   81670:	e0bff715 	stw	r2,-36(fp)
		writeaddress += 0x1;
   81674:	e0bff617 	ldw	r2,-40(fp)
   81678:	10800104 	addi	r2,r2,4
   8167c:	e0bff615 	stw	r2,-40(fp)

		while (byteswritten < transferlength) {
   81680:	00008506 	br	81898 <CryptoProcedure+0xda8>
			rotationcounter += 1;
   81684:	e0bff817 	ldw	r2,-32(fp)
   81688:	10800044 	addi	r2,r2,1
   8168c:	e0bff815 	stw	r2,-32(fp)
			key32_32 = (key32_32 >> 1) | (key32_32 << 31);
   81690:	e0fff417 	ldw	r3,-48(fp)
   81694:	00800044 	movi	r2,1
   81698:	1884583a 	ror	r2,r3,r2
   8169c:	e0bff415 	stw	r2,-48(fp)
			if ((rotationcounter & 0x1f) == 0x1) {
   816a0:	e0bff817 	ldw	r2,-32(fp)
   816a4:	108007cc 	andi	r2,r2,31
   816a8:	10800058 	cmpnei	r2,r2,1
   816ac:	1000041e 	bne	r2,zero,816c0 <CryptoProcedure+0xbd0>
				key16_32 = (key16_32 >> 1) | (key16_32 << 31);
   816b0:	e0fff317 	ldw	r3,-52(fp)
   816b4:	00800044 	movi	r2,1
   816b8:	1884583a 	ror	r2,r3,r2
   816bc:	e0bff315 	stw	r2,-52(fp)
			}
			if ((rotationcounter & 0x7f) == 0x1) {
   816c0:	e0bff817 	ldw	r2,-32(fp)
   816c4:	10801fcc 	andi	r2,r2,127
   816c8:	10800058 	cmpnei	r2,r2,1
   816cc:	1000041e 	bne	r2,zero,816e0 <CryptoProcedure+0xbf0>
				key8_32 = (key8_32 >> 1) | (key8_32 << 31);
   816d0:	e0fff217 	ldw	r3,-56(fp)
   816d4:	00800044 	movi	r2,1
   816d8:	1884583a 	ror	r2,r3,r2
   816dc:	e0bff215 	stw	r2,-56(fp)
			}
			switch (transferlength - byteswritten) {
   816e0:	e0fffd17 	ldw	r3,-12(fp)
   816e4:	e0bff917 	ldw	r2,-28(fp)
   816e8:	1885c83a 	sub	r2,r3,r2
   816ec:	10c000a0 	cmpeqi	r3,r2,2
   816f0:	18001f1e 	bne	r3,zero,81770 <CryptoProcedure+0xc80>
   816f4:	10c000e0 	cmpeqi	r3,r2,3
   816f8:	1800031e 	bne	r3,zero,81708 <CryptoProcedure+0xc18>
   816fc:	10800060 	cmpeqi	r2,r2,1
   81700:	1000331e 	bne	r2,zero,817d0 <CryptoProcedure+0xce0>
   81704:	00004b06 	br	81834 <CryptoProcedure+0xd44>
			case (3):
				*writeaddress = (*readaddress & 0xff000000)
   81708:	e0bff717 	ldw	r2,-36(fp)
   8170c:	10800017 	ldw	r2,0(r2)
   81710:	10ffc02c 	andhi	r3,r2,65280
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   81714:	e0bff717 	ldw	r2,-36(fp)
   81718:	11000017 	ldw	r4,0(r2)
   8171c:	e0bff517 	ldw	r2,-44(fp)
   81720:	2088f03a 	xor	r4,r4,r2
   81724:	e0bff217 	ldw	r2,-56(fp)
   81728:	2088f03a 	xor	r4,r4,r2
								^ key16_32 ^ key32_32) & 0x00ffffff);
   8172c:	e0bff317 	ldw	r2,-52(fp)
   81730:	2088f03a 	xor	r4,r4,r2
   81734:	e0bff417 	ldw	r2,-48(fp)
   81738:	2088f03a 	xor	r4,r4,r2
   8173c:	00804034 	movhi	r2,256
   81740:	10bfffc4 	addi	r2,r2,-1
   81744:	2084703a 	and	r2,r4,r2
				key8_32 = (key8_32 >> 1) | (key8_32 << 31);
			}
			switch (transferlength - byteswritten) {
			case (3):
				*writeaddress = (*readaddress & 0xff000000)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   81748:	1886b03a 	or	r3,r3,r2
			if ((rotationcounter & 0x7f) == 0x1) {
				key8_32 = (key8_32 >> 1) | (key8_32 << 31);
			}
			switch (transferlength - byteswritten) {
			case (3):
				*writeaddress = (*readaddress & 0xff000000)
   8174c:	e0bff617 	ldw	r2,-40(fp)
   81750:	10c00015 	stw	r3,0(r2)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x00ffffff);
				injectionvector_32 = *readaddress;
   81754:	e0bff717 	ldw	r2,-36(fp)
   81758:	10800017 	ldw	r2,0(r2)
   8175c:	e0bff515 	stw	r2,-44(fp)
				byteswritten += 3;
   81760:	e0bff917 	ldw	r2,-28(fp)
   81764:	108000c4 	addi	r2,r2,3
   81768:	e0bff915 	stw	r2,-28(fp)
				break;
   8176c:	00004406 	br	81880 <CryptoProcedure+0xd90>
			case (2):
				*writeaddress = (*readaddress & 0xffff0000)
   81770:	e0bff717 	ldw	r2,-36(fp)
   81774:	10800017 	ldw	r2,0(r2)
   81778:	10ffffec 	andhi	r3,r2,65535
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   8177c:	e0bff717 	ldw	r2,-36(fp)
   81780:	11000017 	ldw	r4,0(r2)
   81784:	e0bff517 	ldw	r2,-44(fp)
   81788:	2088f03a 	xor	r4,r4,r2
   8178c:	e0bff217 	ldw	r2,-56(fp)
   81790:	2088f03a 	xor	r4,r4,r2
								^ key16_32 ^ key32_32) & 0x0000ffff);
   81794:	e0bff317 	ldw	r2,-52(fp)
   81798:	2088f03a 	xor	r4,r4,r2
   8179c:	e0bff417 	ldw	r2,-48(fp)
   817a0:	2084f03a 	xor	r2,r4,r2
   817a4:	10bfffcc 	andi	r2,r2,65535
				injectionvector_32 = *readaddress;
				byteswritten += 3;
				break;
			case (2):
				*writeaddress = (*readaddress & 0xffff0000)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   817a8:	1886b03a 	or	r3,r3,r2
								^ key16_32 ^ key32_32) & 0x00ffffff);
				injectionvector_32 = *readaddress;
				byteswritten += 3;
				break;
			case (2):
				*writeaddress = (*readaddress & 0xffff0000)
   817ac:	e0bff617 	ldw	r2,-40(fp)
   817b0:	10c00015 	stw	r3,0(r2)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x0000ffff);
				injectionvector_32 = *readaddress;
   817b4:	e0bff717 	ldw	r2,-36(fp)
   817b8:	10800017 	ldw	r2,0(r2)
   817bc:	e0bff515 	stw	r2,-44(fp)
				byteswritten += 2;
   817c0:	e0bff917 	ldw	r2,-28(fp)
   817c4:	10800084 	addi	r2,r2,2
   817c8:	e0bff915 	stw	r2,-28(fp)
				break;
   817cc:	00002c06 	br	81880 <CryptoProcedure+0xd90>
			case (1):
				*(unsigned int*) writeaddress = (*readaddress & 0xffffff00)
   817d0:	e0bff717 	ldw	r2,-36(fp)
   817d4:	10c00017 	ldw	r3,0(r2)
   817d8:	00bfc004 	movi	r2,-256
   817dc:	1886703a 	and	r3,r3,r2
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   817e0:	e0bff717 	ldw	r2,-36(fp)
   817e4:	11000017 	ldw	r4,0(r2)
   817e8:	e0bff517 	ldw	r2,-44(fp)
   817ec:	2088f03a 	xor	r4,r4,r2
   817f0:	e0bff217 	ldw	r2,-56(fp)
   817f4:	2088f03a 	xor	r4,r4,r2
								^ key16_32 ^ key32_32) & 0x000000ff);
   817f8:	e0bff317 	ldw	r2,-52(fp)
   817fc:	2088f03a 	xor	r4,r4,r2
   81800:	e0bff417 	ldw	r2,-48(fp)
   81804:	2084f03a 	xor	r2,r4,r2
   81808:	10803fcc 	andi	r2,r2,255
				injectionvector_32 = *readaddress;
				byteswritten += 2;
				break;
			case (1):
				*(unsigned int*) writeaddress = (*readaddress & 0xffffff00)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
   8180c:	1886b03a 	or	r3,r3,r2
								^ key16_32 ^ key32_32) & 0x0000ffff);
				injectionvector_32 = *readaddress;
				byteswritten += 2;
				break;
			case (1):
				*(unsigned int*) writeaddress = (*readaddress & 0xffffff00)
   81810:	e0bff617 	ldw	r2,-40(fp)
   81814:	10c00015 	stw	r3,0(r2)
						| ((*readaddress ^ injectionvector_32 ^ key8_32
								^ key16_32 ^ key32_32) & 0x000000ff);
				injectionvector_32 = *readaddress;
   81818:	e0bff717 	ldw	r2,-36(fp)
   8181c:	10800017 	ldw	r2,0(r2)
   81820:	e0bff515 	stw	r2,-44(fp)
				byteswritten += 1;
   81824:	e0bff917 	ldw	r2,-28(fp)
   81828:	10800044 	addi	r2,r2,1
   8182c:	e0bff915 	stw	r2,-28(fp)
				break;
   81830:	00001306 	br	81880 <CryptoProcedure+0xd90>
			default:
				*(unsigned int*) writeaddress = (*readaddress
   81834:	e0bff717 	ldw	r2,-36(fp)
   81838:	10c00017 	ldw	r3,0(r2)
						^ injectionvector_32 ^ key8_32 ^ key16_32 ^ key32_32);
   8183c:	e0bff517 	ldw	r2,-44(fp)
   81840:	1886f03a 	xor	r3,r3,r2
   81844:	e0bff217 	ldw	r2,-56(fp)
   81848:	1886f03a 	xor	r3,r3,r2
   8184c:	e0bff317 	ldw	r2,-52(fp)
   81850:	1886f03a 	xor	r3,r3,r2
   81854:	e0bff417 	ldw	r2,-48(fp)
   81858:	1886f03a 	xor	r3,r3,r2
								^ key16_32 ^ key32_32) & 0x000000ff);
				injectionvector_32 = *readaddress;
				byteswritten += 1;
				break;
			default:
				*(unsigned int*) writeaddress = (*readaddress
   8185c:	e0bff617 	ldw	r2,-40(fp)
   81860:	10c00015 	stw	r3,0(r2)
						^ injectionvector_32 ^ key8_32 ^ key16_32 ^ key32_32);
				injectionvector_32 = *readaddress;
   81864:	e0bff717 	ldw	r2,-36(fp)
   81868:	10800017 	ldw	r2,0(r2)
   8186c:	e0bff515 	stw	r2,-44(fp)
				byteswritten += 4;
   81870:	e0bff917 	ldw	r2,-28(fp)
   81874:	10800104 	addi	r2,r2,4
   81878:	e0bff915 	stw	r2,-28(fp)
				break;
   8187c:	0001883a 	nop
			}
			readaddress += 0x1;
   81880:	e0bff717 	ldw	r2,-36(fp)
   81884:	10800104 	addi	r2,r2,4
   81888:	e0bff715 	stw	r2,-36(fp)
			writeaddress += 0x1;
   8188c:	e0bff617 	ldw	r2,-40(fp)
   81890:	10800104 	addi	r2,r2,4
   81894:	e0bff615 	stw	r2,-40(fp)
		}

		readaddress += 0x1;
		writeaddress += 0x1;

		while (byteswritten < transferlength) {
   81898:	e0fff917 	ldw	r3,-28(fp)
   8189c:	e0bffd17 	ldw	r2,-12(fp)
   818a0:	18bf7836 	bltu	r3,r2,81684 <_gp+0xfffe7290>
			}
			readaddress += 0x1;
			writeaddress += 0x1;
		}
	}
}
   818a4:	e037883a 	mov	sp,fp
   818a8:	df000017 	ldw	fp,0(sp)
   818ac:	dec00104 	addi	sp,sp,4
   818b0:	f800283a 	ret

000818b4 <__divdf3>:
   818b4:	defff004 	addi	sp,sp,-64
   818b8:	dd000a15 	stw	r20,40(sp)
   818bc:	2828d53a 	srli	r20,r5,20
   818c0:	dd800c15 	stw	r22,48(sp)
   818c4:	282cd7fa 	srli	r22,r5,31
   818c8:	df000e15 	stw	fp,56(sp)
   818cc:	dcc00915 	stw	r19,36(sp)
   818d0:	dc800815 	stw	r18,32(sp)
   818d4:	04c00434 	movhi	r19,16
   818d8:	9cffffc4 	addi	r19,r19,-1
   818dc:	dfc00f15 	stw	ra,60(sp)
   818e0:	ddc00d15 	stw	r23,52(sp)
   818e4:	dd400b15 	stw	r21,44(sp)
   818e8:	dc400715 	stw	r17,28(sp)
   818ec:	dc000615 	stw	r16,24(sp)
   818f0:	a501ffcc 	andi	r20,r20,2047
   818f4:	2025883a 	mov	r18,r4
   818f8:	2ce6703a 	and	r19,r5,r19
   818fc:	b7003fcc 	andi	fp,r22,255
   81900:	a0006a26 	beq	r20,zero,81aac <__divdf3+0x1f8>
   81904:	0081ffc4 	movi	r2,2047
   81908:	2021883a 	mov	r16,r4
   8190c:	a0803726 	beq	r20,r2,819ec <__divdf3+0x138>
   81910:	98800434 	orhi	r2,r19,16
   81914:	100490fa 	slli	r2,r2,3
   81918:	2026d77a 	srli	r19,r4,29
   8191c:	202090fa 	slli	r16,r4,3
   81920:	a53f0044 	addi	r20,r20,-1023
   81924:	14e6b03a 	or	r19,r2,r19
   81928:	002b883a 	mov	r21,zero
   8192c:	0013883a 	mov	r9,zero
   81930:	3804d53a 	srli	r2,r7,20
   81934:	382ed7fa 	srli	r23,r7,31
   81938:	04400434 	movhi	r17,16
   8193c:	8c7fffc4 	addi	r17,r17,-1
   81940:	1081ffcc 	andi	r2,r2,2047
   81944:	3025883a 	mov	r18,r6
   81948:	3c62703a 	and	r17,r7,r17
   8194c:	ba803fcc 	andi	r10,r23,255
   81950:	10007326 	beq	r2,zero,81b20 <__divdf3+0x26c>
   81954:	0101ffc4 	movi	r4,2047
   81958:	11006b26 	beq	r2,r4,81b08 <__divdf3+0x254>
   8195c:	89000434 	orhi	r4,r17,16
   81960:	200890fa 	slli	r4,r4,3
   81964:	3022d77a 	srli	r17,r6,29
   81968:	302490fa 	slli	r18,r6,3
   8196c:	10bf0044 	addi	r2,r2,-1023
   81970:	2462b03a 	or	r17,r4,r17
   81974:	000f883a 	mov	r7,zero
   81978:	b5caf03a 	xor	r5,r22,r23
   8197c:	3d48b03a 	or	r4,r7,r21
   81980:	00c003c4 	movi	r3,15
   81984:	2811883a 	mov	r8,r5
   81988:	2d403fcc 	andi	r21,r5,255
   8198c:	19009436 	bltu	r3,r4,81be0 <__divdf3+0x32c>
   81990:	2109883a 	add	r4,r4,r4
   81994:	00c00234 	movhi	r3,8
   81998:	18c66b04 	addi	r3,r3,6572
   8199c:	2109883a 	add	r4,r4,r4
   819a0:	20c9883a 	add	r4,r4,r3
   819a4:	20c00017 	ldw	r3,0(r4)
   819a8:	1800683a 	jmp	r3
   819ac:	00081be0 	cmpeqi	zero,zero,8303
   819b0:	00081a48 	cmpgei	zero,zero,8297
   819b4:	00081bd0 	cmplti	zero,zero,8303
   819b8:	00081a18 	cmpnei	zero,zero,8296
   819bc:	00081bd0 	cmplti	zero,zero,8303
   819c0:	00081bb8 	rdprs	zero,zero,8302
   819c4:	00081bd0 	cmplti	zero,zero,8303
   819c8:	00081a18 	cmpnei	zero,zero,8296
   819cc:	00081a48 	cmpgei	zero,zero,8297
   819d0:	00081a48 	cmpgei	zero,zero,8297
   819d4:	00081bb8 	rdprs	zero,zero,8302
   819d8:	00081a18 	cmpnei	zero,zero,8296
   819dc:	00081a08 	cmpgei	zero,zero,8296
   819e0:	00081a08 	cmpgei	zero,zero,8296
   819e4:	00081a08 	cmpgei	zero,zero,8296
   819e8:	00081f70 	cmpltui	zero,zero,8317
   819ec:	9904b03a 	or	r2,r19,r4
   819f0:	10006e1e 	bne	r2,zero,81bac <__divdf3+0x2f8>
   819f4:	05400204 	movi	r21,8
   819f8:	0027883a 	mov	r19,zero
   819fc:	0021883a 	mov	r16,zero
   81a00:	02400084 	movi	r9,2
   81a04:	003fca06 	br	81930 <_gp+0xfffe753c>
   81a08:	9823883a 	mov	r17,r19
   81a0c:	8025883a 	mov	r18,r16
   81a10:	e015883a 	mov	r10,fp
   81a14:	480f883a 	mov	r7,r9
   81a18:	00800084 	movi	r2,2
   81a1c:	38800926 	beq	r7,r2,81a44 <__divdf3+0x190>
   81a20:	008000c4 	movi	r2,3
   81a24:	38820226 	beq	r7,r2,82230 <__divdf3+0x97c>
   81a28:	00800044 	movi	r2,1
   81a2c:	3881b81e 	bne	r7,r2,82110 <__divdf3+0x85c>
   81a30:	5011883a 	mov	r8,r10
   81a34:	0005883a 	mov	r2,zero
   81a38:	0027883a 	mov	r19,zero
   81a3c:	0021883a 	mov	r16,zero
   81a40:	00000506 	br	81a58 <__divdf3+0x1a4>
   81a44:	502b883a 	mov	r21,r10
   81a48:	aa00004c 	andi	r8,r21,1
   81a4c:	0081ffc4 	movi	r2,2047
   81a50:	0027883a 	mov	r19,zero
   81a54:	0021883a 	mov	r16,zero
   81a58:	1004953a 	slli	r2,r2,20
   81a5c:	42003fcc 	andi	r8,r8,255
   81a60:	401097fa 	slli	r8,r8,31
   81a64:	00c00434 	movhi	r3,16
   81a68:	18ffffc4 	addi	r3,r3,-1
   81a6c:	98e6703a 	and	r19,r19,r3
   81a70:	9886b03a 	or	r3,r19,r2
   81a74:	1a06b03a 	or	r3,r3,r8
   81a78:	8005883a 	mov	r2,r16
   81a7c:	dfc00f17 	ldw	ra,60(sp)
   81a80:	df000e17 	ldw	fp,56(sp)
   81a84:	ddc00d17 	ldw	r23,52(sp)
   81a88:	dd800c17 	ldw	r22,48(sp)
   81a8c:	dd400b17 	ldw	r21,44(sp)
   81a90:	dd000a17 	ldw	r20,40(sp)
   81a94:	dcc00917 	ldw	r19,36(sp)
   81a98:	dc800817 	ldw	r18,32(sp)
   81a9c:	dc400717 	ldw	r17,28(sp)
   81aa0:	dc000617 	ldw	r16,24(sp)
   81aa4:	dec01004 	addi	sp,sp,64
   81aa8:	f800283a 	ret
   81aac:	9904b03a 	or	r2,r19,r4
   81ab0:	10003926 	beq	r2,zero,81b98 <__divdf3+0x2e4>
   81ab4:	98015326 	beq	r19,zero,82004 <__divdf3+0x750>
   81ab8:	9809883a 	mov	r4,r19
   81abc:	d9800215 	stw	r6,8(sp)
   81ac0:	d9c00515 	stw	r7,20(sp)
   81ac4:	00823c00 	call	823c0 <__clzsi2>
   81ac8:	d9800217 	ldw	r6,8(sp)
   81acc:	d9c00517 	ldw	r7,20(sp)
   81ad0:	00c009c4 	movi	r3,39
   81ad4:	18814716 	blt	r3,r2,81ff4 <__divdf3+0x740>
   81ad8:	01400a04 	movi	r5,40
   81adc:	143ffe04 	addi	r16,r2,-8
   81ae0:	288bc83a 	sub	r5,r5,r2
   81ae4:	9c26983a 	sll	r19,r19,r16
   81ae8:	914ad83a 	srl	r5,r18,r5
   81aec:	9420983a 	sll	r16,r18,r16
   81af0:	2ce6b03a 	or	r19,r5,r19
   81af4:	053f0344 	movi	r20,-1011
   81af8:	a0a9c83a 	sub	r20,r20,r2
   81afc:	002b883a 	mov	r21,zero
   81b00:	0013883a 	mov	r9,zero
   81b04:	003f8a06 	br	81930 <_gp+0xfffe753c>
   81b08:	8988b03a 	or	r4,r17,r6
   81b0c:	2000201e 	bne	r4,zero,81b90 <__divdf3+0x2dc>
   81b10:	0023883a 	mov	r17,zero
   81b14:	0025883a 	mov	r18,zero
   81b18:	01c00084 	movi	r7,2
   81b1c:	003f9606 	br	81978 <_gp+0xfffe7584>
   81b20:	8988b03a 	or	r4,r17,r6
   81b24:	20001626 	beq	r4,zero,81b80 <__divdf3+0x2cc>
   81b28:	88012826 	beq	r17,zero,81fcc <__divdf3+0x718>
   81b2c:	8809883a 	mov	r4,r17
   81b30:	d9800215 	stw	r6,8(sp)
   81b34:	da400315 	stw	r9,12(sp)
   81b38:	da800415 	stw	r10,16(sp)
   81b3c:	00823c00 	call	823c0 <__clzsi2>
   81b40:	d9800217 	ldw	r6,8(sp)
   81b44:	da400317 	ldw	r9,12(sp)
   81b48:	da800417 	ldw	r10,16(sp)
   81b4c:	010009c4 	movi	r4,39
   81b50:	20811a16 	blt	r4,r2,81fbc <__divdf3+0x708>
   81b54:	01000a04 	movi	r4,40
   81b58:	14bffe04 	addi	r18,r2,-8
   81b5c:	2089c83a 	sub	r4,r4,r2
   81b60:	8ca2983a 	sll	r17,r17,r18
   81b64:	3108d83a 	srl	r4,r6,r4
   81b68:	34a4983a 	sll	r18,r6,r18
   81b6c:	2462b03a 	or	r17,r4,r17
   81b70:	013f0344 	movi	r4,-1011
   81b74:	2085c83a 	sub	r2,r4,r2
   81b78:	000f883a 	mov	r7,zero
   81b7c:	003f7e06 	br	81978 <_gp+0xfffe7584>
   81b80:	0023883a 	mov	r17,zero
   81b84:	0025883a 	mov	r18,zero
   81b88:	01c00044 	movi	r7,1
   81b8c:	003f7a06 	br	81978 <_gp+0xfffe7584>
   81b90:	01c000c4 	movi	r7,3
   81b94:	003f7806 	br	81978 <_gp+0xfffe7584>
   81b98:	05400104 	movi	r21,4
   81b9c:	0027883a 	mov	r19,zero
   81ba0:	0021883a 	mov	r16,zero
   81ba4:	02400044 	movi	r9,1
   81ba8:	003f6106 	br	81930 <_gp+0xfffe753c>
   81bac:	05400304 	movi	r21,12
   81bb0:	024000c4 	movi	r9,3
   81bb4:	003f5e06 	br	81930 <_gp+0xfffe753c>
   81bb8:	0011883a 	mov	r8,zero
   81bbc:	04c00434 	movhi	r19,16
   81bc0:	9cffffc4 	addi	r19,r19,-1
   81bc4:	043fffc4 	movi	r16,-1
   81bc8:	0081ffc4 	movi	r2,2047
   81bcc:	003fa206 	br	81a58 <_gp+0xfffe7664>
   81bd0:	0005883a 	mov	r2,zero
   81bd4:	0027883a 	mov	r19,zero
   81bd8:	0021883a 	mov	r16,zero
   81bdc:	003f9e06 	br	81a58 <_gp+0xfffe7664>
   81be0:	a085c83a 	sub	r2,r20,r2
   81be4:	d8800115 	stw	r2,4(sp)
   81be8:	8cc11b36 	bltu	r17,r19,82058 <__divdf3+0x7a4>
   81bec:	9c411926 	beq	r19,r17,82054 <__divdf3+0x7a0>
   81bf0:	d8c00117 	ldw	r3,4(sp)
   81bf4:	002d883a 	mov	r22,zero
   81bf8:	18ffffc4 	addi	r3,r3,-1
   81bfc:	d8c00115 	stw	r3,4(sp)
   81c00:	9006d63a 	srli	r3,r18,24
   81c04:	8822923a 	slli	r17,r17,8
   81c08:	9024923a 	slli	r18,r18,8
   81c0c:	9809883a 	mov	r4,r19
   81c10:	1c6eb03a 	or	r23,r3,r17
   81c14:	b828d43a 	srli	r20,r23,16
   81c18:	dc800015 	stw	r18,0(sp)
   81c1c:	bcbfffcc 	andi	r18,r23,65535
   81c20:	a00b883a 	mov	r5,r20
   81c24:	00825700 	call	82570 <__udivsi3>
   81c28:	1009883a 	mov	r4,r2
   81c2c:	900b883a 	mov	r5,r18
   81c30:	1039883a 	mov	fp,r2
   81c34:	00825800 	call	82580 <__mulsi3>
   81c38:	9809883a 	mov	r4,r19
   81c3c:	a00b883a 	mov	r5,r20
   81c40:	1023883a 	mov	r17,r2
   81c44:	00825780 	call	82578 <__umodsi3>
   81c48:	1004943a 	slli	r2,r2,16
   81c4c:	8008d43a 	srli	r4,r16,16
   81c50:	110ab03a 	or	r5,r2,r4
   81c54:	2c40062e 	bgeu	r5,r17,81c70 <__divdf3+0x3bc>
   81c58:	2dcb883a 	add	r5,r5,r23
   81c5c:	e0bfffc4 	addi	r2,fp,-1
   81c60:	2dc11136 	bltu	r5,r23,820a8 <__divdf3+0x7f4>
   81c64:	2c41102e 	bgeu	r5,r17,820a8 <__divdf3+0x7f4>
   81c68:	e73fff84 	addi	fp,fp,-2
   81c6c:	2dcb883a 	add	r5,r5,r23
   81c70:	2c67c83a 	sub	r19,r5,r17
   81c74:	9809883a 	mov	r4,r19
   81c78:	a00b883a 	mov	r5,r20
   81c7c:	00825700 	call	82570 <__udivsi3>
   81c80:	1009883a 	mov	r4,r2
   81c84:	900b883a 	mov	r5,r18
   81c88:	1023883a 	mov	r17,r2
   81c8c:	00825800 	call	82580 <__mulsi3>
   81c90:	9809883a 	mov	r4,r19
   81c94:	a00b883a 	mov	r5,r20
   81c98:	d8800215 	stw	r2,8(sp)
   81c9c:	00825780 	call	82578 <__umodsi3>
   81ca0:	1004943a 	slli	r2,r2,16
   81ca4:	da000217 	ldw	r8,8(sp)
   81ca8:	843fffcc 	andi	r16,r16,65535
   81cac:	140eb03a 	or	r7,r2,r16
   81cb0:	3a00062e 	bgeu	r7,r8,81ccc <__divdf3+0x418>
   81cb4:	3dcf883a 	add	r7,r7,r23
   81cb8:	88bfffc4 	addi	r2,r17,-1
   81cbc:	3dc0f836 	bltu	r7,r23,820a0 <__divdf3+0x7ec>
   81cc0:	3a00f72e 	bgeu	r7,r8,820a0 <__divdf3+0x7ec>
   81cc4:	8c7fff84 	addi	r17,r17,-2
   81cc8:	3dcf883a 	add	r7,r7,r23
   81ccc:	e004943a 	slli	r2,fp,16
   81cd0:	d8c00017 	ldw	r3,0(sp)
   81cd4:	3a0fc83a 	sub	r7,r7,r8
   81cd8:	88a2b03a 	or	r17,r17,r2
   81cdc:	1f3fffcc 	andi	fp,r3,65535
   81ce0:	8a7fffcc 	andi	r9,r17,65535
   81ce4:	4809883a 	mov	r4,r9
   81ce8:	e00b883a 	mov	r5,fp
   81cec:	1826d43a 	srli	r19,r3,16
   81cf0:	d9c00515 	stw	r7,20(sp)
   81cf4:	da400315 	stw	r9,12(sp)
   81cf8:	00825800 	call	82580 <__mulsi3>
   81cfc:	da400317 	ldw	r9,12(sp)
   81d00:	8820d43a 	srli	r16,r17,16
   81d04:	980b883a 	mov	r5,r19
   81d08:	4809883a 	mov	r4,r9
   81d0c:	d8800215 	stw	r2,8(sp)
   81d10:	00825800 	call	82580 <__mulsi3>
   81d14:	8009883a 	mov	r4,r16
   81d18:	e00b883a 	mov	r5,fp
   81d1c:	d8800415 	stw	r2,16(sp)
   81d20:	00825800 	call	82580 <__mulsi3>
   81d24:	8009883a 	mov	r4,r16
   81d28:	980b883a 	mov	r5,r19
   81d2c:	d8800315 	stw	r2,12(sp)
   81d30:	00825800 	call	82580 <__mulsi3>
   81d34:	da000217 	ldw	r8,8(sp)
   81d38:	da400317 	ldw	r9,12(sp)
   81d3c:	da800417 	ldw	r10,16(sp)
   81d40:	100b883a 	mov	r5,r2
   81d44:	4004d43a 	srli	r2,r8,16
   81d48:	4a89883a 	add	r4,r9,r10
   81d4c:	d9c00517 	ldw	r7,20(sp)
   81d50:	2089883a 	add	r4,r4,r2
   81d54:	2240022e 	bgeu	r4,r9,81d60 <__divdf3+0x4ac>
   81d58:	00800074 	movhi	r2,1
   81d5c:	288b883a 	add	r5,r5,r2
   81d60:	2004d43a 	srli	r2,r4,16
   81d64:	2020943a 	slli	r16,r4,16
   81d68:	423fffcc 	andi	r8,r8,65535
   81d6c:	288b883a 	add	r5,r5,r2
   81d70:	8221883a 	add	r16,r16,r8
   81d74:	3940ab36 	bltu	r7,r5,82024 <__divdf3+0x770>
   81d78:	3940a926 	beq	r7,r5,82020 <__divdf3+0x76c>
   81d7c:	394bc83a 	sub	r5,r7,r5
   81d80:	b421c83a 	sub	r16,r22,r16
   81d84:	b42d803a 	cmpltu	r22,r22,r16
   81d88:	2dadc83a 	sub	r22,r5,r22
   81d8c:	b5c0da26 	beq	r22,r23,820f8 <__divdf3+0x844>
   81d90:	b009883a 	mov	r4,r22
   81d94:	a00b883a 	mov	r5,r20
   81d98:	00825700 	call	82570 <__udivsi3>
   81d9c:	1009883a 	mov	r4,r2
   81da0:	900b883a 	mov	r5,r18
   81da4:	d8800215 	stw	r2,8(sp)
   81da8:	00825800 	call	82580 <__mulsi3>
   81dac:	b009883a 	mov	r4,r22
   81db0:	a00b883a 	mov	r5,r20
   81db4:	d8800515 	stw	r2,20(sp)
   81db8:	00825780 	call	82578 <__umodsi3>
   81dbc:	1004943a 	slli	r2,r2,16
   81dc0:	8008d43a 	srli	r4,r16,16
   81dc4:	d9c00517 	ldw	r7,20(sp)
   81dc8:	da000217 	ldw	r8,8(sp)
   81dcc:	110ab03a 	or	r5,r2,r4
   81dd0:	29c0062e 	bgeu	r5,r7,81dec <__divdf3+0x538>
   81dd4:	2dcb883a 	add	r5,r5,r23
   81dd8:	40bfffc4 	addi	r2,r8,-1
   81ddc:	2dc0ca36 	bltu	r5,r23,82108 <__divdf3+0x854>
   81de0:	29c0c92e 	bgeu	r5,r7,82108 <__divdf3+0x854>
   81de4:	423fff84 	addi	r8,r8,-2
   81de8:	2dcb883a 	add	r5,r5,r23
   81dec:	29cfc83a 	sub	r7,r5,r7
   81df0:	3809883a 	mov	r4,r7
   81df4:	a00b883a 	mov	r5,r20
   81df8:	da000215 	stw	r8,8(sp)
   81dfc:	d9c00515 	stw	r7,20(sp)
   81e00:	00825700 	call	82570 <__udivsi3>
   81e04:	900b883a 	mov	r5,r18
   81e08:	1009883a 	mov	r4,r2
   81e0c:	102d883a 	mov	r22,r2
   81e10:	00825800 	call	82580 <__mulsi3>
   81e14:	d9c00517 	ldw	r7,20(sp)
   81e18:	a00b883a 	mov	r5,r20
   81e1c:	1025883a 	mov	r18,r2
   81e20:	3809883a 	mov	r4,r7
   81e24:	00825780 	call	82578 <__umodsi3>
   81e28:	1004943a 	slli	r2,r2,16
   81e2c:	843fffcc 	andi	r16,r16,65535
   81e30:	da000217 	ldw	r8,8(sp)
   81e34:	140eb03a 	or	r7,r2,r16
   81e38:	3c80062e 	bgeu	r7,r18,81e54 <__divdf3+0x5a0>
   81e3c:	3dcf883a 	add	r7,r7,r23
   81e40:	b0bfffc4 	addi	r2,r22,-1
   81e44:	3dc0ae36 	bltu	r7,r23,82100 <__divdf3+0x84c>
   81e48:	3c80ad2e 	bgeu	r7,r18,82100 <__divdf3+0x84c>
   81e4c:	b5bfff84 	addi	r22,r22,-2
   81e50:	3dcf883a 	add	r7,r7,r23
   81e54:	4010943a 	slli	r8,r8,16
   81e58:	3ca9c83a 	sub	r20,r7,r18
   81e5c:	e00b883a 	mov	r5,fp
   81e60:	b224b03a 	or	r18,r22,r8
   81e64:	91ffffcc 	andi	r7,r18,65535
   81e68:	3809883a 	mov	r4,r7
   81e6c:	d9c00515 	stw	r7,20(sp)
   81e70:	00825800 	call	82580 <__mulsi3>
   81e74:	d9c00517 	ldw	r7,20(sp)
   81e78:	9020d43a 	srli	r16,r18,16
   81e7c:	980b883a 	mov	r5,r19
   81e80:	3809883a 	mov	r4,r7
   81e84:	102d883a 	mov	r22,r2
   81e88:	00825800 	call	82580 <__mulsi3>
   81e8c:	e00b883a 	mov	r5,fp
   81e90:	8009883a 	mov	r4,r16
   81e94:	d8800515 	stw	r2,20(sp)
   81e98:	00825800 	call	82580 <__mulsi3>
   81e9c:	8009883a 	mov	r4,r16
   81ea0:	980b883a 	mov	r5,r19
   81ea4:	1039883a 	mov	fp,r2
   81ea8:	00825800 	call	82580 <__mulsi3>
   81eac:	d9c00517 	ldw	r7,20(sp)
   81eb0:	100b883a 	mov	r5,r2
   81eb4:	b004d43a 	srli	r2,r22,16
   81eb8:	e1c9883a 	add	r4,fp,r7
   81ebc:	2089883a 	add	r4,r4,r2
   81ec0:	2700022e 	bgeu	r4,fp,81ecc <__divdf3+0x618>
   81ec4:	00800074 	movhi	r2,1
   81ec8:	288b883a 	add	r5,r5,r2
   81ecc:	2004d43a 	srli	r2,r4,16
   81ed0:	2008943a 	slli	r4,r4,16
   81ed4:	b5bfffcc 	andi	r22,r22,65535
   81ed8:	288b883a 	add	r5,r5,r2
   81edc:	25ad883a 	add	r22,r4,r22
   81ee0:	a140632e 	bgeu	r20,r5,82070 <__divdf3+0x7bc>
   81ee4:	a5e9883a 	add	r20,r20,r23
   81ee8:	90bfffc4 	addi	r2,r18,-1
   81eec:	a5c0702e 	bgeu	r20,r23,820b0 <__divdf3+0x7fc>
   81ef0:	1025883a 	mov	r18,r2
   81ef4:	a1406126 	beq	r20,r5,8207c <__divdf3+0x7c8>
   81ef8:	94800054 	ori	r18,r18,1
   81efc:	d8c00117 	ldw	r3,4(sp)
   81f00:	1880ffc4 	addi	r2,r3,1023
   81f04:	0080720e 	bge	zero,r2,820d0 <__divdf3+0x81c>
   81f08:	90c001cc 	andi	r3,r18,7
   81f0c:	18000726 	beq	r3,zero,81f2c <__divdf3+0x678>
   81f10:	910003cc 	andi	r4,r18,15
   81f14:	00c00104 	movi	r3,4
   81f18:	20c00426 	beq	r4,r3,81f2c <__divdf3+0x678>
   81f1c:	90c7883a 	add	r3,r18,r3
   81f20:	1ca5803a 	cmpltu	r18,r3,r18
   81f24:	8ca3883a 	add	r17,r17,r18
   81f28:	1825883a 	mov	r18,r3
   81f2c:	88c0402c 	andhi	r3,r17,256
   81f30:	18000526 	beq	r3,zero,81f48 <__divdf3+0x694>
   81f34:	d8c00117 	ldw	r3,4(sp)
   81f38:	00bfc034 	movhi	r2,65280
   81f3c:	10bfffc4 	addi	r2,r2,-1
   81f40:	88a2703a 	and	r17,r17,r2
   81f44:	18810004 	addi	r2,r3,1024
   81f48:	00c1ff84 	movi	r3,2046
   81f4c:	18bebe16 	blt	r3,r2,81a48 <_gp+0xfffe7654>
   81f50:	8820977a 	slli	r16,r17,29
   81f54:	9024d0fa 	srli	r18,r18,3
   81f58:	8822927a 	slli	r17,r17,9
   81f5c:	1081ffcc 	andi	r2,r2,2047
   81f60:	84a0b03a 	or	r16,r16,r18
   81f64:	8826d33a 	srli	r19,r17,12
   81f68:	aa00004c 	andi	r8,r21,1
   81f6c:	003eba06 	br	81a58 <_gp+0xfffe7664>
   81f70:	9880022c 	andhi	r2,r19,8
   81f74:	10000a26 	beq	r2,zero,81fa0 <__divdf3+0x6ec>
   81f78:	8880022c 	andhi	r2,r17,8
   81f7c:	1000081e 	bne	r2,zero,81fa0 <__divdf3+0x6ec>
   81f80:	00800434 	movhi	r2,16
   81f84:	10bfffc4 	addi	r2,r2,-1
   81f88:	8cc00234 	orhi	r19,r17,8
   81f8c:	98a6703a 	and	r19,r19,r2
   81f90:	b811883a 	mov	r8,r23
   81f94:	9021883a 	mov	r16,r18
   81f98:	0081ffc4 	movi	r2,2047
   81f9c:	003eae06 	br	81a58 <_gp+0xfffe7664>
   81fa0:	00800434 	movhi	r2,16
   81fa4:	10bfffc4 	addi	r2,r2,-1
   81fa8:	9cc00234 	orhi	r19,r19,8
   81fac:	98a6703a 	and	r19,r19,r2
   81fb0:	b011883a 	mov	r8,r22
   81fb4:	0081ffc4 	movi	r2,2047
   81fb8:	003ea706 	br	81a58 <_gp+0xfffe7664>
   81fbc:	147ff604 	addi	r17,r2,-40
   81fc0:	3462983a 	sll	r17,r6,r17
   81fc4:	0025883a 	mov	r18,zero
   81fc8:	003ee906 	br	81b70 <_gp+0xfffe777c>
   81fcc:	3009883a 	mov	r4,r6
   81fd0:	d9800215 	stw	r6,8(sp)
   81fd4:	da400315 	stw	r9,12(sp)
   81fd8:	da800415 	stw	r10,16(sp)
   81fdc:	00823c00 	call	823c0 <__clzsi2>
   81fe0:	10800804 	addi	r2,r2,32
   81fe4:	da800417 	ldw	r10,16(sp)
   81fe8:	da400317 	ldw	r9,12(sp)
   81fec:	d9800217 	ldw	r6,8(sp)
   81ff0:	003ed606 	br	81b4c <_gp+0xfffe7758>
   81ff4:	14fff604 	addi	r19,r2,-40
   81ff8:	94e6983a 	sll	r19,r18,r19
   81ffc:	0021883a 	mov	r16,zero
   82000:	003ebc06 	br	81af4 <_gp+0xfffe7700>
   82004:	d9800215 	stw	r6,8(sp)
   82008:	d9c00515 	stw	r7,20(sp)
   8200c:	00823c00 	call	823c0 <__clzsi2>
   82010:	10800804 	addi	r2,r2,32
   82014:	d9c00517 	ldw	r7,20(sp)
   82018:	d9800217 	ldw	r6,8(sp)
   8201c:	003eac06 	br	81ad0 <_gp+0xfffe76dc>
   82020:	b400292e 	bgeu	r22,r16,820c8 <__divdf3+0x814>
   82024:	d8c00017 	ldw	r3,0(sp)
   82028:	b0ed883a 	add	r22,r22,r3
   8202c:	b0c5803a 	cmpltu	r2,r22,r3
   82030:	15c5883a 	add	r2,r2,r23
   82034:	11cf883a 	add	r7,r2,r7
   82038:	88bfffc4 	addi	r2,r17,-1
   8203c:	b9c0122e 	bgeu	r23,r7,82088 <__divdf3+0x7d4>
   82040:	39405036 	bltu	r7,r5,82184 <__divdf3+0x8d0>
   82044:	29c01e26 	beq	r5,r7,820c0 <__divdf3+0x80c>
   82048:	394bc83a 	sub	r5,r7,r5
   8204c:	1023883a 	mov	r17,r2
   82050:	003f4b06 	br	81d80 <_gp+0xfffe798c>
   82054:	943ee62e 	bgeu	r18,r16,81bf0 <_gp+0xfffe77fc>
   82058:	980497fa 	slli	r2,r19,31
   8205c:	8006d07a 	srli	r3,r16,1
   82060:	802c97fa 	slli	r22,r16,31
   82064:	9826d07a 	srli	r19,r19,1
   82068:	18a0b03a 	or	r16,r3,r2
   8206c:	003ee406 	br	81c00 <_gp+0xfffe780c>
   82070:	a17fa11e 	bne	r20,r5,81ef8 <_gp+0xfffe7b04>
   82074:	b03f9b1e 	bne	r22,zero,81ee4 <_gp+0xfffe7af0>
   82078:	d8000015 	stw	zero,0(sp)
   8207c:	d8c00017 	ldw	r3,0(sp)
   82080:	1dbf9d1e 	bne	r3,r22,81ef8 <_gp+0xfffe7b04>
   82084:	003f9d06 	br	81efc <_gp+0xfffe7b08>
   82088:	3dffef1e 	bne	r7,r23,82048 <_gp+0xfffe7c54>
   8208c:	d8c00017 	ldw	r3,0(sp)
   82090:	b0ffeb2e 	bgeu	r22,r3,82040 <_gp+0xfffe7c4c>
   82094:	b94bc83a 	sub	r5,r23,r5
   82098:	1023883a 	mov	r17,r2
   8209c:	003f3806 	br	81d80 <_gp+0xfffe798c>
   820a0:	1023883a 	mov	r17,r2
   820a4:	003f0906 	br	81ccc <_gp+0xfffe78d8>
   820a8:	1039883a 	mov	fp,r2
   820ac:	003ef006 	br	81c70 <_gp+0xfffe787c>
   820b0:	a1403b36 	bltu	r20,r5,821a0 <__divdf3+0x8ec>
   820b4:	2d005826 	beq	r5,r20,82218 <__divdf3+0x964>
   820b8:	1025883a 	mov	r18,r2
   820bc:	003f8e06 	br	81ef8 <_gp+0xfffe7b04>
   820c0:	b4003036 	bltu	r22,r16,82184 <__divdf3+0x8d0>
   820c4:	1023883a 	mov	r17,r2
   820c8:	000b883a 	mov	r5,zero
   820cc:	003f2c06 	br	81d80 <_gp+0xfffe798c>
   820d0:	d8c00117 	ldw	r3,4(sp)
   820d4:	00bf0084 	movi	r2,-1022
   820d8:	10c5c83a 	sub	r2,r2,r3
   820dc:	00c00e04 	movi	r3,56
   820e0:	18800d0e 	bge	r3,r2,82118 <__divdf3+0x864>
   820e4:	aa00004c 	andi	r8,r21,1
   820e8:	0005883a 	mov	r2,zero
   820ec:	0027883a 	mov	r19,zero
   820f0:	0021883a 	mov	r16,zero
   820f4:	003e5806 	br	81a58 <_gp+0xfffe7664>
   820f8:	04bfffc4 	movi	r18,-1
   820fc:	003f7f06 	br	81efc <_gp+0xfffe7b08>
   82100:	102d883a 	mov	r22,r2
   82104:	003f5306 	br	81e54 <_gp+0xfffe7a60>
   82108:	1011883a 	mov	r8,r2
   8210c:	003f3706 	br	81dec <_gp+0xfffe79f8>
   82110:	502b883a 	mov	r21,r10
   82114:	003f7906 	br	81efc <_gp+0xfffe7b08>
   82118:	00c007c4 	movi	r3,31
   8211c:	18802816 	blt	r3,r2,821c0 <__divdf3+0x90c>
   82120:	d9000117 	ldw	r4,4(sp)
   82124:	908ad83a 	srl	r5,r18,r2
   82128:	8884d83a 	srl	r2,r17,r2
   8212c:	20c10784 	addi	r3,r4,1054
   82130:	88c8983a 	sll	r4,r17,r3
   82134:	90c6983a 	sll	r3,r18,r3
   82138:	2908b03a 	or	r4,r5,r4
   8213c:	1806c03a 	cmpne	r3,r3,zero
   82140:	20c6b03a 	or	r3,r4,r3
   82144:	190001cc 	andi	r4,r3,7
   82148:	20000726 	beq	r4,zero,82168 <__divdf3+0x8b4>
   8214c:	194003cc 	andi	r5,r3,15
   82150:	01000104 	movi	r4,4
   82154:	29000426 	beq	r5,r4,82168 <__divdf3+0x8b4>
   82158:	1909883a 	add	r4,r3,r4
   8215c:	20c7803a 	cmpltu	r3,r4,r3
   82160:	10c5883a 	add	r2,r2,r3
   82164:	2007883a 	mov	r3,r4
   82168:	1100202c 	andhi	r4,r2,128
   8216c:	20002226 	beq	r4,zero,821f8 <__divdf3+0x944>
   82170:	aa00004c 	andi	r8,r21,1
   82174:	00800044 	movi	r2,1
   82178:	0027883a 	mov	r19,zero
   8217c:	0021883a 	mov	r16,zero
   82180:	003e3506 	br	81a58 <_gp+0xfffe7664>
   82184:	d8c00017 	ldw	r3,0(sp)
   82188:	8c7fff84 	addi	r17,r17,-2
   8218c:	b0ed883a 	add	r22,r22,r3
   82190:	b0c5803a 	cmpltu	r2,r22,r3
   82194:	15c5883a 	add	r2,r2,r23
   82198:	11cf883a 	add	r7,r2,r7
   8219c:	003ef706 	br	81d7c <_gp+0xfffe7988>
   821a0:	d8c00017 	ldw	r3,0(sp)
   821a4:	18c9883a 	add	r4,r3,r3
   821a8:	20c5803a 	cmpltu	r2,r4,r3
   821ac:	15c7883a 	add	r3,r2,r23
   821b0:	a0e9883a 	add	r20,r20,r3
   821b4:	90bfff84 	addi	r2,r18,-2
   821b8:	d9000015 	stw	r4,0(sp)
   821bc:	003f4c06 	br	81ef0 <_gp+0xfffe7afc>
   821c0:	d9000117 	ldw	r4,4(sp)
   821c4:	00fef884 	movi	r3,-1054
   821c8:	1907c83a 	sub	r3,r3,r4
   821cc:	01000804 	movi	r4,32
   821d0:	88c6d83a 	srl	r3,r17,r3
   821d4:	11001426 	beq	r2,r4,82228 <__divdf3+0x974>
   821d8:	d9000117 	ldw	r4,4(sp)
   821dc:	20810f84 	addi	r2,r4,1086
   821e0:	8884983a 	sll	r2,r17,r2
   821e4:	1484b03a 	or	r2,r2,r18
   821e8:	1004c03a 	cmpne	r2,r2,zero
   821ec:	10c6b03a 	or	r3,r2,r3
   821f0:	0005883a 	mov	r2,zero
   821f4:	003fd306 	br	82144 <_gp+0xfffe7d50>
   821f8:	1020977a 	slli	r16,r2,29
   821fc:	1806d0fa 	srli	r3,r3,3
   82200:	1004927a 	slli	r2,r2,9
   82204:	aa00004c 	andi	r8,r21,1
   82208:	80e0b03a 	or	r16,r16,r3
   8220c:	1026d33a 	srli	r19,r2,12
   82210:	0005883a 	mov	r2,zero
   82214:	003e1006 	br	81a58 <_gp+0xfffe7664>
   82218:	d8c00017 	ldw	r3,0(sp)
   8221c:	1dbfe036 	bltu	r3,r22,821a0 <_gp+0xfffe7dac>
   82220:	1025883a 	mov	r18,r2
   82224:	003f9506 	br	8207c <_gp+0xfffe7c88>
   82228:	0005883a 	mov	r2,zero
   8222c:	003fed06 	br	821e4 <_gp+0xfffe7df0>
   82230:	00800434 	movhi	r2,16
   82234:	10bfffc4 	addi	r2,r2,-1
   82238:	8cc00234 	orhi	r19,r17,8
   8223c:	98a6703a 	and	r19,r19,r2
   82240:	5011883a 	mov	r8,r10
   82244:	9021883a 	mov	r16,r18
   82248:	0081ffc4 	movi	r2,2047
   8224c:	003e0206 	br	81a58 <_gp+0xfffe7664>

00082250 <__floatsidf>:
   82250:	defffd04 	addi	sp,sp,-12
   82254:	dc000015 	stw	r16,0(sp)
   82258:	dfc00215 	stw	ra,8(sp)
   8225c:	dc400115 	stw	r17,4(sp)
   82260:	2021883a 	mov	r16,r4
   82264:	20002926 	beq	r4,zero,8230c <__floatsidf+0xbc>
   82268:	2022d7fa 	srli	r17,r4,31
   8226c:	88000126 	beq	r17,zero,82274 <__floatsidf+0x24>
   82270:	0121c83a 	sub	r16,zero,r4
   82274:	8009883a 	mov	r4,r16
   82278:	00823c00 	call	823c0 <__clzsi2>
   8227c:	01810784 	movi	r6,1054
   82280:	00c00284 	movi	r3,10
   82284:	308dc83a 	sub	r6,r6,r2
   82288:	1880150e 	bge	r3,r2,822e0 <__floatsidf+0x90>
   8228c:	113ffd44 	addi	r4,r2,-11
   82290:	8108983a 	sll	r4,r16,r4
   82294:	00800434 	movhi	r2,16
   82298:	10bfffc4 	addi	r2,r2,-1
   8229c:	3181ffcc 	andi	r6,r6,2047
   822a0:	2088703a 	and	r4,r4,r2
   822a4:	880b883a 	mov	r5,r17
   822a8:	0005883a 	mov	r2,zero
   822ac:	300c953a 	slli	r6,r6,20
   822b0:	29403fcc 	andi	r5,r5,255
   822b4:	280a97fa 	slli	r5,r5,31
   822b8:	00c00434 	movhi	r3,16
   822bc:	18ffffc4 	addi	r3,r3,-1
   822c0:	20c8703a 	and	r4,r4,r3
   822c4:	2186b03a 	or	r3,r4,r6
   822c8:	1946b03a 	or	r3,r3,r5
   822cc:	dfc00217 	ldw	ra,8(sp)
   822d0:	dc400117 	ldw	r17,4(sp)
   822d4:	dc000017 	ldw	r16,0(sp)
   822d8:	dec00304 	addi	sp,sp,12
   822dc:	f800283a 	ret
   822e0:	010002c4 	movi	r4,11
   822e4:	2089c83a 	sub	r4,r4,r2
   822e8:	8108d83a 	srl	r4,r16,r4
   822ec:	10800544 	addi	r2,r2,21
   822f0:	00c00434 	movhi	r3,16
   822f4:	18ffffc4 	addi	r3,r3,-1
   822f8:	8084983a 	sll	r2,r16,r2
   822fc:	20c8703a 	and	r4,r4,r3
   82300:	3181ffcc 	andi	r6,r6,2047
   82304:	880b883a 	mov	r5,r17
   82308:	003fe806 	br	822ac <_gp+0xfffe7eb8>
   8230c:	000b883a 	mov	r5,zero
   82310:	000d883a 	mov	r6,zero
   82314:	0009883a 	mov	r4,zero
   82318:	0005883a 	mov	r2,zero
   8231c:	003fe306 	br	822ac <_gp+0xfffe7eb8>

00082320 <__floatunsidf>:
   82320:	defffe04 	addi	sp,sp,-8
   82324:	dc000015 	stw	r16,0(sp)
   82328:	dfc00115 	stw	ra,4(sp)
   8232c:	2021883a 	mov	r16,r4
   82330:	20001f26 	beq	r4,zero,823b0 <__floatunsidf+0x90>
   82334:	00823c00 	call	823c0 <__clzsi2>
   82338:	01010784 	movi	r4,1054
   8233c:	00c00284 	movi	r3,10
   82340:	2089c83a 	sub	r4,r4,r2
   82344:	1880100e 	bge	r3,r2,82388 <__floatunsidf+0x68>
   82348:	117ffd44 	addi	r5,r2,-11
   8234c:	814a983a 	sll	r5,r16,r5
   82350:	00800434 	movhi	r2,16
   82354:	10bfffc4 	addi	r2,r2,-1
   82358:	2101ffcc 	andi	r4,r4,2047
   8235c:	288a703a 	and	r5,r5,r2
   82360:	0005883a 	mov	r2,zero
   82364:	2008953a 	slli	r4,r4,20
   82368:	00c00434 	movhi	r3,16
   8236c:	18ffffc4 	addi	r3,r3,-1
   82370:	28c6703a 	and	r3,r5,r3
   82374:	1906b03a 	or	r3,r3,r4
   82378:	dfc00117 	ldw	ra,4(sp)
   8237c:	dc000017 	ldw	r16,0(sp)
   82380:	dec00204 	addi	sp,sp,8
   82384:	f800283a 	ret
   82388:	014002c4 	movi	r5,11
   8238c:	288bc83a 	sub	r5,r5,r2
   82390:	814ad83a 	srl	r5,r16,r5
   82394:	10800544 	addi	r2,r2,21
   82398:	00c00434 	movhi	r3,16
   8239c:	18ffffc4 	addi	r3,r3,-1
   823a0:	8084983a 	sll	r2,r16,r2
   823a4:	28ca703a 	and	r5,r5,r3
   823a8:	2101ffcc 	andi	r4,r4,2047
   823ac:	003fed06 	br	82364 <_gp+0xfffe7f70>
   823b0:	0009883a 	mov	r4,zero
   823b4:	000b883a 	mov	r5,zero
   823b8:	0005883a 	mov	r2,zero
   823bc:	003fe906 	br	82364 <_gp+0xfffe7f70>

000823c0 <__clzsi2>:
   823c0:	00bfffd4 	movui	r2,65535
   823c4:	11000b36 	bltu	r2,r4,823f4 <__clzsi2+0x34>
   823c8:	00803fc4 	movi	r2,255
   823cc:	11001e2e 	bgeu	r2,r4,82448 <__clzsi2+0x88>
   823d0:	00c00204 	movi	r3,8
   823d4:	20c8d83a 	srl	r4,r4,r3
   823d8:	00c00274 	movhi	r3,9
   823dc:	18c19704 	addi	r3,r3,1628
   823e0:	00800604 	movi	r2,24
   823e4:	1909883a 	add	r4,r3,r4
   823e8:	20c00003 	ldbu	r3,0(r4)
   823ec:	10c5c83a 	sub	r2,r2,r3
   823f0:	f800283a 	ret
   823f4:	00804034 	movhi	r2,256
   823f8:	10bfffc4 	addi	r2,r2,-1
   823fc:	11000936 	bltu	r2,r4,82424 <__clzsi2+0x64>
   82400:	00800404 	movi	r2,16
   82404:	1007883a 	mov	r3,r2
   82408:	20c8d83a 	srl	r4,r4,r3
   8240c:	00c00274 	movhi	r3,9
   82410:	18c19704 	addi	r3,r3,1628
   82414:	1909883a 	add	r4,r3,r4
   82418:	20c00003 	ldbu	r3,0(r4)
   8241c:	10c5c83a 	sub	r2,r2,r3
   82420:	f800283a 	ret
   82424:	00c00604 	movi	r3,24
   82428:	20c8d83a 	srl	r4,r4,r3
   8242c:	00c00274 	movhi	r3,9
   82430:	18c19704 	addi	r3,r3,1628
   82434:	00800204 	movi	r2,8
   82438:	1909883a 	add	r4,r3,r4
   8243c:	20c00003 	ldbu	r3,0(r4)
   82440:	10c5c83a 	sub	r2,r2,r3
   82444:	f800283a 	ret
   82448:	0007883a 	mov	r3,zero
   8244c:	20c8d83a 	srl	r4,r4,r3
   82450:	00c00274 	movhi	r3,9
   82454:	18c19704 	addi	r3,r3,1628
   82458:	00800804 	movi	r2,32
   8245c:	1909883a 	add	r4,r3,r4
   82460:	20c00003 	ldbu	r3,0(r4)
   82464:	10c5c83a 	sub	r2,r2,r3
   82468:	f800283a 	ret

0008246c <udivmodsi4>:
   8246c:	2900182e 	bgeu	r5,r4,824d0 <udivmodsi4+0x64>
   82470:	28001716 	blt	r5,zero,824d0 <udivmodsi4+0x64>
   82474:	00800804 	movi	r2,32
   82478:	00c00044 	movi	r3,1
   8247c:	00000206 	br	82488 <udivmodsi4+0x1c>
   82480:	10001126 	beq	r2,zero,824c8 <udivmodsi4+0x5c>
   82484:	28000516 	blt	r5,zero,8249c <udivmodsi4+0x30>
   82488:	294b883a 	add	r5,r5,r5
   8248c:	10bfffc4 	addi	r2,r2,-1
   82490:	18c7883a 	add	r3,r3,r3
   82494:	293ffa36 	bltu	r5,r4,82480 <_gp+0xfffe808c>
   82498:	18000b26 	beq	r3,zero,824c8 <udivmodsi4+0x5c>
   8249c:	0005883a 	mov	r2,zero
   824a0:	21400236 	bltu	r4,r5,824ac <udivmodsi4+0x40>
   824a4:	2149c83a 	sub	r4,r4,r5
   824a8:	10c4b03a 	or	r2,r2,r3
   824ac:	1806d07a 	srli	r3,r3,1
   824b0:	280ad07a 	srli	r5,r5,1
   824b4:	183ffa1e 	bne	r3,zero,824a0 <_gp+0xfffe80ac>
   824b8:	3000011e 	bne	r6,zero,824c0 <udivmodsi4+0x54>
   824bc:	f800283a 	ret
   824c0:	2005883a 	mov	r2,r4
   824c4:	f800283a 	ret
   824c8:	0005883a 	mov	r2,zero
   824cc:	003ffa06 	br	824b8 <_gp+0xfffe80c4>
   824d0:	00c00044 	movi	r3,1
   824d4:	0005883a 	mov	r2,zero
   824d8:	003ff106 	br	824a0 <_gp+0xfffe80ac>

000824dc <__divsi3>:
   824dc:	deffff04 	addi	sp,sp,-4
   824e0:	dfc00015 	stw	ra,0(sp)
   824e4:	20000916 	blt	r4,zero,8250c <__divsi3+0x30>
   824e8:	000f883a 	mov	r7,zero
   824ec:	28000a16 	blt	r5,zero,82518 <__divsi3+0x3c>
   824f0:	000d883a 	mov	r6,zero
   824f4:	008246c0 	call	8246c <udivmodsi4>
   824f8:	38000126 	beq	r7,zero,82500 <__divsi3+0x24>
   824fc:	0085c83a 	sub	r2,zero,r2
   82500:	dfc00017 	ldw	ra,0(sp)
   82504:	dec00104 	addi	sp,sp,4
   82508:	f800283a 	ret
   8250c:	0109c83a 	sub	r4,zero,r4
   82510:	01c00044 	movi	r7,1
   82514:	283ff60e 	bge	r5,zero,824f0 <_gp+0xfffe80fc>
   82518:	014bc83a 	sub	r5,zero,r5
   8251c:	39c0005c 	xori	r7,r7,1
   82520:	003ff306 	br	824f0 <_gp+0xfffe80fc>

00082524 <__modsi3>:
   82524:	20000316 	blt	r4,zero,82534 <__modsi3+0x10>
   82528:	28000c16 	blt	r5,zero,8255c <__modsi3+0x38>
   8252c:	01800044 	movi	r6,1
   82530:	008246c1 	jmpi	8246c <udivmodsi4>
   82534:	deffff04 	addi	sp,sp,-4
   82538:	dfc00015 	stw	ra,0(sp)
   8253c:	0109c83a 	sub	r4,zero,r4
   82540:	28000916 	blt	r5,zero,82568 <__modsi3+0x44>
   82544:	01800044 	movi	r6,1
   82548:	008246c0 	call	8246c <udivmodsi4>
   8254c:	0085c83a 	sub	r2,zero,r2
   82550:	dfc00017 	ldw	ra,0(sp)
   82554:	dec00104 	addi	sp,sp,4
   82558:	f800283a 	ret
   8255c:	014bc83a 	sub	r5,zero,r5
   82560:	01800044 	movi	r6,1
   82564:	008246c1 	jmpi	8246c <udivmodsi4>
   82568:	014bc83a 	sub	r5,zero,r5
   8256c:	003ff506 	br	82544 <_gp+0xfffe8150>

00082570 <__udivsi3>:
   82570:	000d883a 	mov	r6,zero
   82574:	008246c1 	jmpi	8246c <udivmodsi4>

00082578 <__umodsi3>:
   82578:	01800044 	movi	r6,1
   8257c:	008246c1 	jmpi	8246c <udivmodsi4>

00082580 <__mulsi3>:
   82580:	0005883a 	mov	r2,zero
   82584:	20000726 	beq	r4,zero,825a4 <__mulsi3+0x24>
   82588:	20c0004c 	andi	r3,r4,1
   8258c:	2008d07a 	srli	r4,r4,1
   82590:	18000126 	beq	r3,zero,82598 <__mulsi3+0x18>
   82594:	1145883a 	add	r2,r2,r5
   82598:	294b883a 	add	r5,r5,r5
   8259c:	203ffa1e 	bne	r4,zero,82588 <_gp+0xfffe8194>
   825a0:	f800283a 	ret
   825a4:	f800283a 	ret

000825a8 <memcpy>:
   825a8:	00c003c4 	movi	r3,15
   825ac:	2005883a 	mov	r2,r4
   825b0:	1980372e 	bgeu	r3,r6,82690 <memcpy+0xe8>
   825b4:	2146b03a 	or	r3,r4,r5
   825b8:	18c000cc 	andi	r3,r3,3
   825bc:	1800371e 	bne	r3,zero,8269c <memcpy+0xf4>
   825c0:	327ffc04 	addi	r9,r6,-16
   825c4:	4812d13a 	srli	r9,r9,4
   825c8:	2007883a 	mov	r3,r4
   825cc:	280f883a 	mov	r7,r5
   825d0:	4808913a 	slli	r4,r9,4
   825d4:	1109883a 	add	r4,r2,r4
   825d8:	21000404 	addi	r4,r4,16
   825dc:	3a000017 	ldw	r8,0(r7)
   825e0:	18c00404 	addi	r3,r3,16
   825e4:	39c00404 	addi	r7,r7,16
   825e8:	1a3ffc15 	stw	r8,-16(r3)
   825ec:	3a3ffd17 	ldw	r8,-12(r7)
   825f0:	1a3ffd15 	stw	r8,-12(r3)
   825f4:	3a3ffe17 	ldw	r8,-8(r7)
   825f8:	1a3ffe15 	stw	r8,-8(r3)
   825fc:	3a3fff17 	ldw	r8,-4(r7)
   82600:	1a3fff15 	stw	r8,-4(r3)
   82604:	193ff51e 	bne	r3,r4,825dc <_gp+0xfffe81e8>
   82608:	49000044 	addi	r4,r9,1
   8260c:	2008913a 	slli	r4,r4,4
   82610:	328003cc 	andi	r10,r6,15
   82614:	1107883a 	add	r3,r2,r4
   82618:	290b883a 	add	r5,r5,r4
   8261c:	010000c4 	movi	r4,3
   82620:	2280212e 	bgeu	r4,r10,826a8 <memcpy+0x100>
   82624:	52bfff04 	addi	r10,r10,-4
   82628:	5014d0ba 	srli	r10,r10,2
   8262c:	180f883a 	mov	r7,r3
   82630:	2811883a 	mov	r8,r5
   82634:	5289883a 	add	r4,r10,r10
   82638:	2109883a 	add	r4,r4,r4
   8263c:	21000104 	addi	r4,r4,4
   82640:	1909883a 	add	r4,r3,r4
   82644:	42400017 	ldw	r9,0(r8)
   82648:	39c00104 	addi	r7,r7,4
   8264c:	42000104 	addi	r8,r8,4
   82650:	3a7fff15 	stw	r9,-4(r7)
   82654:	393ffb1e 	bne	r7,r4,82644 <_gp+0xfffe8250>
   82658:	51000044 	addi	r4,r10,1
   8265c:	2109883a 	add	r4,r4,r4
   82660:	2109883a 	add	r4,r4,r4
   82664:	318000cc 	andi	r6,r6,3
   82668:	1907883a 	add	r3,r3,r4
   8266c:	290b883a 	add	r5,r5,r4
   82670:	30000c26 	beq	r6,zero,826a4 <memcpy+0xfc>
   82674:	298d883a 	add	r6,r5,r6
   82678:	29c00003 	ldbu	r7,0(r5)
   8267c:	18c00044 	addi	r3,r3,1
   82680:	29400044 	addi	r5,r5,1
   82684:	19ffffc5 	stb	r7,-1(r3)
   82688:	29bffb1e 	bne	r5,r6,82678 <_gp+0xfffe8284>
   8268c:	f800283a 	ret
   82690:	2007883a 	mov	r3,r4
   82694:	303ff71e 	bne	r6,zero,82674 <_gp+0xfffe8280>
   82698:	00000206 	br	826a4 <memcpy+0xfc>
   8269c:	2007883a 	mov	r3,r4
   826a0:	003ff406 	br	82674 <_gp+0xfffe8280>
   826a4:	f800283a 	ret
   826a8:	500d883a 	mov	r6,r10
   826ac:	303ff11e 	bne	r6,zero,82674 <_gp+0xfffe8280>
   826b0:	003ffc06 	br	826a4 <_gp+0xfffe82b0>

000826b4 <_printf_r>:
   826b4:	defffd04 	addi	sp,sp,-12
   826b8:	dfc00015 	stw	ra,0(sp)
   826bc:	d9800115 	stw	r6,4(sp)
   826c0:	d9c00215 	stw	r7,8(sp)
   826c4:	280d883a 	mov	r6,r5
   826c8:	21400217 	ldw	r5,8(r4)
   826cc:	d9c00104 	addi	r7,sp,4
   826d0:	00828980 	call	82898 <___vfprintf_internal_r>
   826d4:	dfc00017 	ldw	ra,0(sp)
   826d8:	dec00304 	addi	sp,sp,12
   826dc:	f800283a 	ret

000826e0 <printf>:
   826e0:	defffc04 	addi	sp,sp,-16
   826e4:	dfc00015 	stw	ra,0(sp)
   826e8:	d9400115 	stw	r5,4(sp)
   826ec:	d9800215 	stw	r6,8(sp)
   826f0:	d9c00315 	stw	r7,12(sp)
   826f4:	00800274 	movhi	r2,9
   826f8:	1088ff04 	addi	r2,r2,9212
   826fc:	10800017 	ldw	r2,0(r2)
   82700:	200b883a 	mov	r5,r4
   82704:	d9800104 	addi	r6,sp,4
   82708:	11000217 	ldw	r4,8(r2)
   8270c:	00849ec0 	call	849ec <__vfprintf_internal>
   82710:	dfc00017 	ldw	ra,0(sp)
   82714:	dec00404 	addi	sp,sp,16
   82718:	f800283a 	ret

0008271c <_putchar_r>:
   8271c:	21800217 	ldw	r6,8(r4)
   82720:	00891881 	jmpi	89188 <_putc_r>

00082724 <putchar>:
   82724:	00800274 	movhi	r2,9
   82728:	1088ff04 	addi	r2,r2,9212
   8272c:	10800017 	ldw	r2,0(r2)
   82730:	200b883a 	mov	r5,r4
   82734:	11800217 	ldw	r6,8(r2)
   82738:	1009883a 	mov	r4,r2
   8273c:	00891881 	jmpi	89188 <_putc_r>

00082740 <_puts_r>:
   82740:	defff604 	addi	sp,sp,-40
   82744:	dc400815 	stw	r17,32(sp)
   82748:	2023883a 	mov	r17,r4
   8274c:	2809883a 	mov	r4,r5
   82750:	dc000715 	stw	r16,28(sp)
   82754:	dfc00915 	stw	ra,36(sp)
   82758:	2821883a 	mov	r16,r5
   8275c:	008280c0 	call	8280c <strlen>
   82760:	00c00274 	movhi	r3,9
   82764:	18c8ff04 	addi	r3,r3,9212
   82768:	18c00017 	ldw	r3,0(r3)
   8276c:	11000044 	addi	r4,r2,1
   82770:	d8800115 	stw	r2,4(sp)
   82774:	18c00217 	ldw	r3,8(r3)
   82778:	00800274 	movhi	r2,9
   8277c:	1081d704 	addi	r2,r2,1884
   82780:	d8800215 	stw	r2,8(sp)
   82784:	1940030b 	ldhu	r5,12(r3)
   82788:	00800044 	movi	r2,1
   8278c:	d8800315 	stw	r2,12(sp)
   82790:	00800084 	movi	r2,2
   82794:	d8800515 	stw	r2,20(sp)
   82798:	dc000015 	stw	r16,0(sp)
   8279c:	d9000615 	stw	r4,24(sp)
   827a0:	dec00415 	stw	sp,16(sp)
   827a4:	2888000c 	andi	r2,r5,8192
   827a8:	1000061e 	bne	r2,zero,827c4 <_puts_r+0x84>
   827ac:	19001917 	ldw	r4,100(r3)
   827b0:	00b7ffc4 	movi	r2,-8193
   827b4:	29480014 	ori	r5,r5,8192
   827b8:	2084703a 	and	r2,r4,r2
   827bc:	1940030d 	sth	r5,12(r3)
   827c0:	18801915 	stw	r2,100(r3)
   827c4:	89400217 	ldw	r5,8(r17)
   827c8:	8809883a 	mov	r4,r17
   827cc:	d9800404 	addi	r6,sp,16
   827d0:	0086dd00 	call	86dd0 <__sfvwrite_r>
   827d4:	1000061e 	bne	r2,zero,827f0 <_puts_r+0xb0>
   827d8:	00800284 	movi	r2,10
   827dc:	dfc00917 	ldw	ra,36(sp)
   827e0:	dc400817 	ldw	r17,32(sp)
   827e4:	dc000717 	ldw	r16,28(sp)
   827e8:	dec00a04 	addi	sp,sp,40
   827ec:	f800283a 	ret
   827f0:	00bfffc4 	movi	r2,-1
   827f4:	003ff906 	br	827dc <_gp+0xfffe83e8>

000827f8 <puts>:
   827f8:	00800274 	movhi	r2,9
   827fc:	1088ff04 	addi	r2,r2,9212
   82800:	200b883a 	mov	r5,r4
   82804:	11000017 	ldw	r4,0(r2)
   82808:	00827401 	jmpi	82740 <_puts_r>

0008280c <strlen>:
   8280c:	208000cc 	andi	r2,r4,3
   82810:	10001d26 	beq	r2,zero,82888 <strlen+0x7c>
   82814:	20800007 	ldb	r2,0(r4)
   82818:	10001d26 	beq	r2,zero,82890 <strlen+0x84>
   8281c:	2005883a 	mov	r2,r4
   82820:	00000206 	br	8282c <strlen+0x20>
   82824:	10c00007 	ldb	r3,0(r2)
   82828:	18001526 	beq	r3,zero,82880 <strlen+0x74>
   8282c:	10800044 	addi	r2,r2,1
   82830:	10c000cc 	andi	r3,r2,3
   82834:	183ffb1e 	bne	r3,zero,82824 <_gp+0xfffe8430>
   82838:	10c00017 	ldw	r3,0(r2)
   8283c:	01ffbff4 	movhi	r7,65279
   82840:	39ffbfc4 	addi	r7,r7,-257
   82844:	01a02074 	movhi	r6,32897
   82848:	31a02004 	addi	r6,r6,-32640
   8284c:	00000206 	br	82858 <strlen+0x4c>
   82850:	10800104 	addi	r2,r2,4
   82854:	10c00017 	ldw	r3,0(r2)
   82858:	19cb883a 	add	r5,r3,r7
   8285c:	00c6303a 	nor	r3,zero,r3
   82860:	28c6703a 	and	r3,r5,r3
   82864:	1986703a 	and	r3,r3,r6
   82868:	183ff926 	beq	r3,zero,82850 <_gp+0xfffe845c>
   8286c:	10c00007 	ldb	r3,0(r2)
   82870:	18000326 	beq	r3,zero,82880 <strlen+0x74>
   82874:	10800044 	addi	r2,r2,1
   82878:	10c00007 	ldb	r3,0(r2)
   8287c:	183ffd1e 	bne	r3,zero,82874 <_gp+0xfffe8480>
   82880:	1105c83a 	sub	r2,r2,r4
   82884:	f800283a 	ret
   82888:	2005883a 	mov	r2,r4
   8288c:	003fea06 	br	82838 <_gp+0xfffe8444>
   82890:	0005883a 	mov	r2,zero
   82894:	f800283a 	ret

00082898 <___vfprintf_internal_r>:
   82898:	defeb604 	addi	sp,sp,-1320
   8289c:	dfc14915 	stw	ra,1316(sp)
   828a0:	dcc14315 	stw	r19,1292(sp)
   828a4:	dc414115 	stw	r17,1284(sp)
   828a8:	d9012c15 	stw	r4,1200(sp)
   828ac:	2827883a 	mov	r19,r5
   828b0:	3023883a 	mov	r17,r6
   828b4:	d9c12f15 	stw	r7,1212(sp)
   828b8:	df014815 	stw	fp,1312(sp)
   828bc:	ddc14715 	stw	r23,1308(sp)
   828c0:	dd814615 	stw	r22,1304(sp)
   828c4:	dd414515 	stw	r21,1300(sp)
   828c8:	dd014415 	stw	r20,1296(sp)
   828cc:	dc814215 	stw	r18,1288(sp)
   828d0:	dc014015 	stw	r16,1280(sp)
   828d4:	008747c0 	call	8747c <_localeconv_r>
   828d8:	10800017 	ldw	r2,0(r2)
   828dc:	1009883a 	mov	r4,r2
   828e0:	d8813415 	stw	r2,1232(sp)
   828e4:	008280c0 	call	8280c <strlen>
   828e8:	d8813815 	stw	r2,1248(sp)
   828ec:	d8812c17 	ldw	r2,1200(sp)
   828f0:	10000226 	beq	r2,zero,828fc <___vfprintf_internal_r+0x64>
   828f4:	10800e17 	ldw	r2,56(r2)
   828f8:	10010826 	beq	r2,zero,82d1c <___vfprintf_internal_r+0x484>
   828fc:	9880030b 	ldhu	r2,12(r19)
   82900:	1108000c 	andi	r4,r2,8192
   82904:	1007883a 	mov	r3,r2
   82908:	2000071e 	bne	r4,zero,82928 <___vfprintf_internal_r+0x90>
   8290c:	99001917 	ldw	r4,100(r19)
   82910:	10c80014 	ori	r3,r2,8192
   82914:	00b7ffc4 	movi	r2,-8193
   82918:	2088703a 	and	r4,r4,r2
   8291c:	98c0030d 	sth	r3,12(r19)
   82920:	1805883a 	mov	r2,r3
   82924:	99001915 	stw	r4,100(r19)
   82928:	1900020c 	andi	r4,r3,8
   8292c:	2000ab26 	beq	r4,zero,82bdc <___vfprintf_internal_r+0x344>
   82930:	99000417 	ldw	r4,16(r19)
   82934:	2000a926 	beq	r4,zero,82bdc <___vfprintf_internal_r+0x344>
   82938:	18c0068c 	andi	r3,r3,26
   8293c:	01000284 	movi	r4,10
   82940:	1900af26 	beq	r3,r4,82c00 <___vfprintf_internal_r+0x368>
   82944:	d9010dc4 	addi	r4,sp,1079
   82948:	d9410e04 	addi	r5,sp,1080
   8294c:	d8800404 	addi	r2,sp,16
   82950:	2907c83a 	sub	r3,r5,r4
   82954:	d9012815 	stw	r4,1184(sp)
   82958:	d9412915 	stw	r5,1188(sp)
   8295c:	d8811e15 	stw	r2,1144(sp)
   82960:	d8012015 	stw	zero,1152(sp)
   82964:	d8011f15 	stw	zero,1148(sp)
   82968:	d8013515 	stw	zero,1236(sp)
   8296c:	d8013715 	stw	zero,1244(sp)
   82970:	d8013915 	stw	zero,1252(sp)
   82974:	d8013b15 	stw	zero,1260(sp)
   82978:	d8013a15 	stw	zero,1256(sp)
   8297c:	d8013115 	stw	zero,1220(sp)
   82980:	1011883a 	mov	r8,r2
   82984:	05c00274 	movhi	r23,9
   82988:	bdc1e884 	addi	r23,r23,1954
   8298c:	d8c13d15 	stw	r3,1268(sp)
   82990:	88800007 	ldb	r2,0(r17)
   82994:	10021126 	beq	r2,zero,831dc <___vfprintf_internal_r+0x944>
   82998:	00c00944 	movi	r3,37
   8299c:	8821883a 	mov	r16,r17
   829a0:	10c0021e 	bne	r2,r3,829ac <___vfprintf_internal_r+0x114>
   829a4:	00001406 	br	829f8 <___vfprintf_internal_r+0x160>
   829a8:	10c00326 	beq	r2,r3,829b8 <___vfprintf_internal_r+0x120>
   829ac:	84000044 	addi	r16,r16,1
   829b0:	80800007 	ldb	r2,0(r16)
   829b4:	103ffc1e 	bne	r2,zero,829a8 <_gp+0xfffe85b4>
   829b8:	8465c83a 	sub	r18,r16,r17
   829bc:	90000e26 	beq	r18,zero,829f8 <___vfprintf_internal_r+0x160>
   829c0:	d8c12017 	ldw	r3,1152(sp)
   829c4:	d8811f17 	ldw	r2,1148(sp)
   829c8:	44400015 	stw	r17,0(r8)
   829cc:	1c87883a 	add	r3,r3,r18
   829d0:	10800044 	addi	r2,r2,1
   829d4:	d8c12015 	stw	r3,1152(sp)
   829d8:	44800115 	stw	r18,4(r8)
   829dc:	d8811f15 	stw	r2,1148(sp)
   829e0:	00c001c4 	movi	r3,7
   829e4:	1880bb16 	blt	r3,r2,82cd4 <___vfprintf_internal_r+0x43c>
   829e8:	42000204 	addi	r8,r8,8
   829ec:	d9013117 	ldw	r4,1220(sp)
   829f0:	2489883a 	add	r4,r4,r18
   829f4:	d9013115 	stw	r4,1220(sp)
   829f8:	80800007 	ldb	r2,0(r16)
   829fc:	1000bc26 	beq	r2,zero,82cf0 <___vfprintf_internal_r+0x458>
   82a00:	053fffc4 	movi	r20,-1
   82a04:	84400044 	addi	r17,r16,1
   82a08:	84800047 	ldb	r18,1(r16)
   82a0c:	d8012785 	stb	zero,1182(sp)
   82a10:	002d883a 	mov	r22,zero
   82a14:	d8013015 	stw	zero,1216(sp)
   82a18:	d8012a15 	stw	zero,1192(sp)
   82a1c:	04001604 	movi	r16,88
   82a20:	05400244 	movi	r21,9
   82a24:	4039883a 	mov	fp,r8
   82a28:	a007883a 	mov	r3,r20
   82a2c:	8c400044 	addi	r17,r17,1
   82a30:	90bff804 	addi	r2,r18,-32
   82a34:	80832036 	bltu	r16,r2,836b8 <___vfprintf_internal_r+0xe20>
   82a38:	1085883a 	add	r2,r2,r2
   82a3c:	1085883a 	add	r2,r2,r2
   82a40:	01400234 	movhi	r5,8
   82a44:	294a9504 	addi	r5,r5,10836
   82a48:	1145883a 	add	r2,r2,r5
   82a4c:	10800017 	ldw	r2,0(r2)
   82a50:	1000683a 	jmp	r2
   82a54:	00083458 	cmpnei	zero,zero,8401
   82a58:	000836b8 	rdprs	zero,zero,8410
   82a5c:	000836b8 	rdprs	zero,zero,8410
   82a60:	00083474 	movhi	zero,8401
   82a64:	000836b8 	rdprs	zero,zero,8410
   82a68:	000836b8 	rdprs	zero,zero,8410
   82a6c:	000836b8 	rdprs	zero,zero,8410
   82a70:	000836b8 	rdprs	zero,zero,8410
   82a74:	000836b8 	rdprs	zero,zero,8410
   82a78:	000836b8 	rdprs	zero,zero,8410
   82a7c:	00083488 	cmpgei	zero,zero,8402
   82a80:	00082d28 	cmpgeui	zero,zero,8372
   82a84:	000836b8 	rdprs	zero,zero,8410
   82a88:	00082bc8 	cmpgei	zero,zero,8367
   82a8c:	00082d34 	movhi	zero,8372
   82a90:	000836b8 	rdprs	zero,zero,8410
   82a94:	00082d84 	movi	zero,8374
   82a98:	00083294 	movui	zero,8394
   82a9c:	00083294 	movui	zero,8394
   82aa0:	00083294 	movui	zero,8394
   82aa4:	00083294 	movui	zero,8394
   82aa8:	00083294 	movui	zero,8394
   82aac:	00083294 	movui	zero,8394
   82ab0:	00083294 	movui	zero,8394
   82ab4:	00083294 	movui	zero,8394
   82ab8:	00083294 	movui	zero,8394
   82abc:	000836b8 	rdprs	zero,zero,8410
   82ac0:	000836b8 	rdprs	zero,zero,8410
   82ac4:	000836b8 	rdprs	zero,zero,8410
   82ac8:	000836b8 	rdprs	zero,zero,8410
   82acc:	000836b8 	rdprs	zero,zero,8410
   82ad0:	000836b8 	rdprs	zero,zero,8410
   82ad4:	000836b8 	rdprs	zero,zero,8410
   82ad8:	000836b8 	rdprs	zero,zero,8410
   82adc:	000836b8 	rdprs	zero,zero,8410
   82ae0:	000836b8 	rdprs	zero,zero,8410
   82ae4:	00082d98 	cmpnei	zero,zero,8374
   82ae8:	000831e4 	muli	zero,zero,8391
   82aec:	000836b8 	rdprs	zero,zero,8410
   82af0:	000831e4 	muli	zero,zero,8391
   82af4:	000836b8 	rdprs	zero,zero,8410
   82af8:	000836b8 	rdprs	zero,zero,8410
   82afc:	000836b8 	rdprs	zero,zero,8410
   82b00:	000836b8 	rdprs	zero,zero,8410
   82b04:	000832dc 	xori	zero,zero,8395
   82b08:	000836b8 	rdprs	zero,zero,8410
   82b0c:	000836b8 	rdprs	zero,zero,8410
   82b10:	000832f0 	cmpltui	zero,zero,8395
   82b14:	000836b8 	rdprs	zero,zero,8410
   82b18:	000836b8 	rdprs	zero,zero,8410
   82b1c:	000836b8 	rdprs	zero,zero,8410
   82b20:	000836b8 	rdprs	zero,zero,8410
   82b24:	000836b8 	rdprs	zero,zero,8410
   82b28:	00083338 	rdprs	zero,zero,8396
   82b2c:	000836b8 	rdprs	zero,zero,8410
   82b30:	000836b8 	rdprs	zero,zero,8410
   82b34:	000834ac 	andhi	zero,zero,8402
   82b38:	000836b8 	rdprs	zero,zero,8410
   82b3c:	000836b8 	rdprs	zero,zero,8410
   82b40:	000836b8 	rdprs	zero,zero,8410
   82b44:	000836b8 	rdprs	zero,zero,8410
   82b48:	000836b8 	rdprs	zero,zero,8410
   82b4c:	000836b8 	rdprs	zero,zero,8410
   82b50:	000836b8 	rdprs	zero,zero,8410
   82b54:	000836b8 	rdprs	zero,zero,8410
   82b58:	000836b8 	rdprs	zero,zero,8410
   82b5c:	000836b8 	rdprs	zero,zero,8410
   82b60:	000833b0 	cmpltui	zero,zero,8398
   82b64:	00083528 	cmpgeui	zero,zero,8404
   82b68:	000831e4 	muli	zero,zero,8391
   82b6c:	000831e4 	muli	zero,zero,8391
   82b70:	000831e4 	muli	zero,zero,8391
   82b74:	000834f4 	movhi	zero,8403
   82b78:	00083528 	cmpgeui	zero,zero,8404
   82b7c:	000836b8 	rdprs	zero,zero,8410
   82b80:	000836b8 	rdprs	zero,zero,8410
   82b84:	00083508 	cmpgei	zero,zero,8404
   82b88:	000836b8 	rdprs	zero,zero,8410
   82b8c:	00083378 	rdprs	zero,zero,8397
   82b90:	00083638 	rdprs	zero,zero,8408
   82b94:	000835e4 	muli	zero,zero,8407
   82b98:	00083568 	cmpgeui	zero,zero,8405
   82b9c:	000836b8 	rdprs	zero,zero,8410
   82ba0:	0008357c 	xorhi	zero,zero,8405
   82ba4:	000836b8 	rdprs	zero,zero,8410
   82ba8:	00083678 	rdprs	zero,zero,8409
   82bac:	000836b8 	rdprs	zero,zero,8410
   82bb0:	000836b8 	rdprs	zero,zero,8410
   82bb4:	000833f0 	cmpltui	zero,zero,8399
   82bb8:	d9413017 	ldw	r5,1216(sp)
   82bbc:	d8812f15 	stw	r2,1212(sp)
   82bc0:	014bc83a 	sub	r5,zero,r5
   82bc4:	d9413015 	stw	r5,1216(sp)
   82bc8:	d8812a17 	ldw	r2,1192(sp)
   82bcc:	10800114 	ori	r2,r2,4
   82bd0:	d8812a15 	stw	r2,1192(sp)
   82bd4:	8c800007 	ldb	r18,0(r17)
   82bd8:	003f9406 	br	82a2c <_gp+0xfffe8638>
   82bdc:	d9012c17 	ldw	r4,1200(sp)
   82be0:	980b883a 	mov	r5,r19
   82be4:	0084a100 	call	84a10 <__swsetup_r>
   82be8:	10002d1e 	bne	r2,zero,82ca0 <___vfprintf_internal_r+0x408>
   82bec:	9880030b 	ldhu	r2,12(r19)
   82bf0:	01000284 	movi	r4,10
   82bf4:	1007883a 	mov	r3,r2
   82bf8:	18c0068c 	andi	r3,r3,26
   82bfc:	193f511e 	bne	r3,r4,82944 <_gp+0xfffe8550>
   82c00:	98c0038b 	ldhu	r3,14(r19)
   82c04:	193fffcc 	andi	r4,r3,65535
   82c08:	2120001c 	xori	r4,r4,32768
   82c0c:	21200004 	addi	r4,r4,-32768
   82c10:	203f4c16 	blt	r4,zero,82944 <_gp+0xfffe8550>
   82c14:	9ac01917 	ldw	r11,100(r19)
   82c18:	9a800717 	ldw	r10,28(r19)
   82c1c:	9a400917 	ldw	r9,36(r19)
   82c20:	d9012c17 	ldw	r4,1200(sp)
   82c24:	d9c12f17 	ldw	r7,1212(sp)
   82c28:	02010004 	movi	r8,1024
   82c2c:	10bfff4c 	andi	r2,r2,65533
   82c30:	d8c1078d 	sth	r3,1054(sp)
   82c34:	d9410404 	addi	r5,sp,1040
   82c38:	d8c00404 	addi	r3,sp,16
   82c3c:	880d883a 	mov	r6,r17
   82c40:	d881070d 	sth	r2,1052(sp)
   82c44:	dac11d15 	stw	r11,1140(sp)
   82c48:	da810b15 	stw	r10,1068(sp)
   82c4c:	da410d15 	stw	r9,1076(sp)
   82c50:	d8c10415 	stw	r3,1040(sp)
   82c54:	d8c10815 	stw	r3,1056(sp)
   82c58:	da010615 	stw	r8,1048(sp)
   82c5c:	da010915 	stw	r8,1060(sp)
   82c60:	d8010a15 	stw	zero,1064(sp)
   82c64:	00828980 	call	82898 <___vfprintf_internal_r>
   82c68:	1021883a 	mov	r16,r2
   82c6c:	10000416 	blt	r2,zero,82c80 <___vfprintf_internal_r+0x3e8>
   82c70:	d9012c17 	ldw	r4,1200(sp)
   82c74:	d9410404 	addi	r5,sp,1040
   82c78:	00863ac0 	call	863ac <_fflush_r>
   82c7c:	10072a1e 	bne	r2,zero,84928 <___vfprintf_internal_r+0x2090>
   82c80:	d881070b 	ldhu	r2,1052(sp)
   82c84:	1080100c 	andi	r2,r2,64
   82c88:	10000326 	beq	r2,zero,82c98 <___vfprintf_internal_r+0x400>
   82c8c:	9880030b 	ldhu	r2,12(r19)
   82c90:	10801014 	ori	r2,r2,64
   82c94:	9880030d 	sth	r2,12(r19)
   82c98:	8005883a 	mov	r2,r16
   82c9c:	00000106 	br	82ca4 <___vfprintf_internal_r+0x40c>
   82ca0:	00bfffc4 	movi	r2,-1
   82ca4:	dfc14917 	ldw	ra,1316(sp)
   82ca8:	df014817 	ldw	fp,1312(sp)
   82cac:	ddc14717 	ldw	r23,1308(sp)
   82cb0:	dd814617 	ldw	r22,1304(sp)
   82cb4:	dd414517 	ldw	r21,1300(sp)
   82cb8:	dd014417 	ldw	r20,1296(sp)
   82cbc:	dcc14317 	ldw	r19,1292(sp)
   82cc0:	dc814217 	ldw	r18,1288(sp)
   82cc4:	dc414117 	ldw	r17,1284(sp)
   82cc8:	dc014017 	ldw	r16,1280(sp)
   82ccc:	dec14a04 	addi	sp,sp,1320
   82cd0:	f800283a 	ret
   82cd4:	d9012c17 	ldw	r4,1200(sp)
   82cd8:	980b883a 	mov	r5,r19
   82cdc:	d9811e04 	addi	r6,sp,1144
   82ce0:	0089c000 	call	89c00 <__sprint_r>
   82ce4:	1000081e 	bne	r2,zero,82d08 <___vfprintf_internal_r+0x470>
   82ce8:	da000404 	addi	r8,sp,16
   82cec:	003f3f06 	br	829ec <_gp+0xfffe85f8>
   82cf0:	d8812017 	ldw	r2,1152(sp)
   82cf4:	10000426 	beq	r2,zero,82d08 <___vfprintf_internal_r+0x470>
   82cf8:	d9012c17 	ldw	r4,1200(sp)
   82cfc:	980b883a 	mov	r5,r19
   82d00:	d9811e04 	addi	r6,sp,1144
   82d04:	0089c000 	call	89c00 <__sprint_r>
   82d08:	9880030b 	ldhu	r2,12(r19)
   82d0c:	1080100c 	andi	r2,r2,64
   82d10:	103fe31e 	bne	r2,zero,82ca0 <_gp+0xfffe88ac>
   82d14:	d8813117 	ldw	r2,1220(sp)
   82d18:	003fe206 	br	82ca4 <_gp+0xfffe88b0>
   82d1c:	d9012c17 	ldw	r4,1200(sp)
   82d20:	00866cc0 	call	866cc <__sinit>
   82d24:	003ef506 	br	828fc <_gp+0xfffe8508>
   82d28:	05800ac4 	movi	r22,43
   82d2c:	8c800007 	ldb	r18,0(r17)
   82d30:	003f3e06 	br	82a2c <_gp+0xfffe8638>
   82d34:	8c800007 	ldb	r18,0(r17)
   82d38:	00c00a84 	movi	r3,42
   82d3c:	88800044 	addi	r2,r17,1
   82d40:	90c6fb26 	beq	r18,r3,84930 <___vfprintf_internal_r+0x2098>
   82d44:	953ff404 	addi	r20,r18,-48
   82d48:	1023883a 	mov	r17,r2
   82d4c:	0007883a 	mov	r3,zero
   82d50:	ad3f3736 	bltu	r21,r20,82a30 <_gp+0xfffe863c>
   82d54:	0009883a 	mov	r4,zero
   82d58:	01400284 	movi	r5,10
   82d5c:	00825800 	call	82580 <__mulsi3>
   82d60:	8c800007 	ldb	r18,0(r17)
   82d64:	a089883a 	add	r4,r20,r2
   82d68:	8c400044 	addi	r17,r17,1
   82d6c:	953ff404 	addi	r20,r18,-48
   82d70:	ad3ff92e 	bgeu	r21,r20,82d58 <_gp+0xfffe8964>
   82d74:	2007883a 	mov	r3,r4
   82d78:	203f2d0e 	bge	r4,zero,82a30 <_gp+0xfffe863c>
   82d7c:	00ffffc4 	movi	r3,-1
   82d80:	003f2b06 	br	82a30 <_gp+0xfffe863c>
   82d84:	d9412a17 	ldw	r5,1192(sp)
   82d88:	29402014 	ori	r5,r5,128
   82d8c:	d9412a15 	stw	r5,1192(sp)
   82d90:	8c800007 	ldb	r18,0(r17)
   82d94:	003f2506 	br	82a2c <_gp+0xfffe8638>
   82d98:	d9412a17 	ldw	r5,1192(sp)
   82d9c:	1829883a 	mov	r20,r3
   82da0:	dd812785 	stb	r22,1182(sp)
   82da4:	29400414 	ori	r5,r5,16
   82da8:	d9412a15 	stw	r5,1192(sp)
   82dac:	d8c12a17 	ldw	r3,1192(sp)
   82db0:	e011883a 	mov	r8,fp
   82db4:	1880080c 	andi	r2,r3,32
   82db8:	1001e126 	beq	r2,zero,83540 <___vfprintf_internal_r+0xca8>
   82dbc:	d9012f17 	ldw	r4,1212(sp)
   82dc0:	20800117 	ldw	r2,4(r4)
   82dc4:	25400017 	ldw	r21,0(r4)
   82dc8:	21000204 	addi	r4,r4,8
   82dcc:	d9012f15 	stw	r4,1212(sp)
   82dd0:	102d883a 	mov	r22,r2
   82dd4:	10046916 	blt	r2,zero,83f7c <___vfprintf_internal_r+0x16e4>
   82dd8:	df012783 	ldbu	fp,1182(sp)
   82ddc:	00c00044 	movi	r3,1
   82de0:	ad84b03a 	or	r2,r21,r22
   82de4:	a0000416 	blt	r20,zero,82df8 <___vfprintf_internal_r+0x560>
   82de8:	d9412a17 	ldw	r5,1192(sp)
   82dec:	013fdfc4 	movi	r4,-129
   82df0:	290a703a 	and	r5,r5,r4
   82df4:	d9412a15 	stw	r5,1192(sp)
   82df8:	1002491e 	bne	r2,zero,83720 <___vfprintf_internal_r+0xe88>
   82dfc:	a002481e 	bne	r20,zero,83720 <___vfprintf_internal_r+0xe88>
   82e00:	18c03fcc 	andi	r3,r3,255
   82e04:	1803871e 	bne	r3,zero,83c24 <___vfprintf_internal_r+0x138c>
   82e08:	d9012a17 	ldw	r4,1192(sp)
   82e0c:	2080004c 	andi	r2,r4,1
   82e10:	10038426 	beq	r2,zero,83c24 <___vfprintf_internal_r+0x138c>
   82e14:	d9413d17 	ldw	r5,1268(sp)
   82e18:	00800c04 	movi	r2,48
   82e1c:	d8810dc5 	stb	r2,1079(sp)
   82e20:	d9412e15 	stw	r5,1208(sp)
   82e24:	dc010dc4 	addi	r16,sp,1079
   82e28:	d8812e17 	ldw	r2,1208(sp)
   82e2c:	1500010e 	bge	r2,r20,82e34 <___vfprintf_internal_r+0x59c>
   82e30:	a005883a 	mov	r2,r20
   82e34:	d8812b15 	stw	r2,1196(sp)
   82e38:	d8013315 	stw	zero,1228(sp)
   82e3c:	e0803fcc 	andi	r2,fp,255
   82e40:	1080201c 	xori	r2,r2,128
   82e44:	10bfe004 	addi	r2,r2,-128
   82e48:	10000326 	beq	r2,zero,82e58 <___vfprintf_internal_r+0x5c0>
   82e4c:	d8c12b17 	ldw	r3,1196(sp)
   82e50:	18c00044 	addi	r3,r3,1
   82e54:	d8c12b15 	stw	r3,1196(sp)
   82e58:	d8c12a17 	ldw	r3,1192(sp)
   82e5c:	18c0008c 	andi	r3,r3,2
   82e60:	d8c12d15 	stw	r3,1204(sp)
   82e64:	18000326 	beq	r3,zero,82e74 <___vfprintf_internal_r+0x5dc>
   82e68:	d8c12b17 	ldw	r3,1196(sp)
   82e6c:	18c00084 	addi	r3,r3,2
   82e70:	d8c12b15 	stw	r3,1196(sp)
   82e74:	d8c12a17 	ldw	r3,1192(sp)
   82e78:	18c0210c 	andi	r3,r3,132
   82e7c:	d8c13215 	stw	r3,1224(sp)
   82e80:	1802151e 	bne	r3,zero,836d8 <___vfprintf_internal_r+0xe40>
   82e84:	d9013017 	ldw	r4,1216(sp)
   82e88:	d8c12b17 	ldw	r3,1196(sp)
   82e8c:	20f9c83a 	sub	fp,r4,r3
   82e90:	0702110e 	bge	zero,fp,836d8 <___vfprintf_internal_r+0xe40>
   82e94:	02400404 	movi	r9,16
   82e98:	d8c12017 	ldw	r3,1152(sp)
   82e9c:	d8811f17 	ldw	r2,1148(sp)
   82ea0:	4f059a0e 	bge	r9,fp,8450c <___vfprintf_internal_r+0x1c74>
   82ea4:	8809883a 	mov	r4,r17
   82ea8:	01400274 	movhi	r5,9
   82eac:	2941ec84 	addi	r5,r5,1970
   82eb0:	dc013c15 	stw	r16,1264(sp)
   82eb4:	e023883a 	mov	r17,fp
   82eb8:	d9413615 	stw	r5,1240(sp)
   82ebc:	482d883a 	mov	r22,r9
   82ec0:	054001c4 	movi	r21,7
   82ec4:	dc012c17 	ldw	r16,1200(sp)
   82ec8:	2039883a 	mov	fp,r4
   82ecc:	00000306 	br	82edc <___vfprintf_internal_r+0x644>
   82ed0:	8c7ffc04 	addi	r17,r17,-16
   82ed4:	42000204 	addi	r8,r8,8
   82ed8:	b440130e 	bge	r22,r17,82f28 <___vfprintf_internal_r+0x690>
   82edc:	18c00404 	addi	r3,r3,16
   82ee0:	10800044 	addi	r2,r2,1
   82ee4:	01000274 	movhi	r4,9
   82ee8:	2101ec84 	addi	r4,r4,1970
   82eec:	41000015 	stw	r4,0(r8)
   82ef0:	45800115 	stw	r22,4(r8)
   82ef4:	d8c12015 	stw	r3,1152(sp)
   82ef8:	d8811f15 	stw	r2,1148(sp)
   82efc:	a8bff40e 	bge	r21,r2,82ed0 <_gp+0xfffe8adc>
   82f00:	8009883a 	mov	r4,r16
   82f04:	980b883a 	mov	r5,r19
   82f08:	d9811e04 	addi	r6,sp,1144
   82f0c:	0089c000 	call	89c00 <__sprint_r>
   82f10:	103f7d1e 	bne	r2,zero,82d08 <_gp+0xfffe8914>
   82f14:	8c7ffc04 	addi	r17,r17,-16
   82f18:	d8c12017 	ldw	r3,1152(sp)
   82f1c:	d8811f17 	ldw	r2,1148(sp)
   82f20:	da000404 	addi	r8,sp,16
   82f24:	b47fed16 	blt	r22,r17,82edc <_gp+0xfffe8ae8>
   82f28:	dc013c17 	ldw	r16,1264(sp)
   82f2c:	e009883a 	mov	r4,fp
   82f30:	8839883a 	mov	fp,r17
   82f34:	2023883a 	mov	r17,r4
   82f38:	d9413617 	ldw	r5,1240(sp)
   82f3c:	e0c7883a 	add	r3,fp,r3
   82f40:	10800044 	addi	r2,r2,1
   82f44:	41400015 	stw	r5,0(r8)
   82f48:	47000115 	stw	fp,4(r8)
   82f4c:	d8c12015 	stw	r3,1152(sp)
   82f50:	d8811f15 	stw	r2,1148(sp)
   82f54:	010001c4 	movi	r4,7
   82f58:	20836b16 	blt	r4,r2,83d08 <___vfprintf_internal_r+0x1470>
   82f5c:	d8812787 	ldb	r2,1182(sp)
   82f60:	42000204 	addi	r8,r8,8
   82f64:	10000c26 	beq	r2,zero,82f98 <___vfprintf_internal_r+0x700>
   82f68:	d8811f17 	ldw	r2,1148(sp)
   82f6c:	d9012784 	addi	r4,sp,1182
   82f70:	18c00044 	addi	r3,r3,1
   82f74:	10800044 	addi	r2,r2,1
   82f78:	41000015 	stw	r4,0(r8)
   82f7c:	01000044 	movi	r4,1
   82f80:	41000115 	stw	r4,4(r8)
   82f84:	d8c12015 	stw	r3,1152(sp)
   82f88:	d8811f15 	stw	r2,1148(sp)
   82f8c:	010001c4 	movi	r4,7
   82f90:	2082ef16 	blt	r4,r2,83b50 <___vfprintf_internal_r+0x12b8>
   82f94:	42000204 	addi	r8,r8,8
   82f98:	d8812d17 	ldw	r2,1204(sp)
   82f9c:	10000c26 	beq	r2,zero,82fd0 <___vfprintf_internal_r+0x738>
   82fa0:	d8811f17 	ldw	r2,1148(sp)
   82fa4:	d9012704 	addi	r4,sp,1180
   82fa8:	18c00084 	addi	r3,r3,2
   82fac:	10800044 	addi	r2,r2,1
   82fb0:	41000015 	stw	r4,0(r8)
   82fb4:	01000084 	movi	r4,2
   82fb8:	41000115 	stw	r4,4(r8)
   82fbc:	d8c12015 	stw	r3,1152(sp)
   82fc0:	d8811f15 	stw	r2,1148(sp)
   82fc4:	010001c4 	movi	r4,7
   82fc8:	2082e916 	blt	r4,r2,83b70 <___vfprintf_internal_r+0x12d8>
   82fcc:	42000204 	addi	r8,r8,8
   82fd0:	d9013217 	ldw	r4,1224(sp)
   82fd4:	00802004 	movi	r2,128
   82fd8:	20823226 	beq	r4,r2,838a4 <___vfprintf_internal_r+0x100c>
   82fdc:	d9012e17 	ldw	r4,1208(sp)
   82fe0:	a129c83a 	sub	r20,r20,r4
   82fe4:	05002d0e 	bge	zero,r20,8309c <___vfprintf_internal_r+0x804>
   82fe8:	05800404 	movi	r22,16
   82fec:	d8811f17 	ldw	r2,1148(sp)
   82ff0:	05400274 	movhi	r21,9
   82ff4:	ad41e884 	addi	r21,r21,1954
   82ff8:	b5001f0e 	bge	r22,r20,83078 <___vfprintf_internal_r+0x7e0>
   82ffc:	8809883a 	mov	r4,r17
   83000:	dc012d15 	stw	r16,1204(sp)
   83004:	a023883a 	mov	r17,r20
   83008:	070001c4 	movi	fp,7
   8300c:	dc012c17 	ldw	r16,1200(sp)
   83010:	2029883a 	mov	r20,r4
   83014:	00000306 	br	83024 <___vfprintf_internal_r+0x78c>
   83018:	8c7ffc04 	addi	r17,r17,-16
   8301c:	42000204 	addi	r8,r8,8
   83020:	b440110e 	bge	r22,r17,83068 <___vfprintf_internal_r+0x7d0>
   83024:	18c00404 	addi	r3,r3,16
   83028:	10800044 	addi	r2,r2,1
   8302c:	45c00015 	stw	r23,0(r8)
   83030:	45800115 	stw	r22,4(r8)
   83034:	d8c12015 	stw	r3,1152(sp)
   83038:	d8811f15 	stw	r2,1148(sp)
   8303c:	e0bff60e 	bge	fp,r2,83018 <_gp+0xfffe8c24>
   83040:	8009883a 	mov	r4,r16
   83044:	980b883a 	mov	r5,r19
   83048:	d9811e04 	addi	r6,sp,1144
   8304c:	0089c000 	call	89c00 <__sprint_r>
   83050:	103f2d1e 	bne	r2,zero,82d08 <_gp+0xfffe8914>
   83054:	8c7ffc04 	addi	r17,r17,-16
   83058:	d8c12017 	ldw	r3,1152(sp)
   8305c:	d8811f17 	ldw	r2,1148(sp)
   83060:	da000404 	addi	r8,sp,16
   83064:	b47fef16 	blt	r22,r17,83024 <_gp+0xfffe8c30>
   83068:	dc012d17 	ldw	r16,1204(sp)
   8306c:	a009883a 	mov	r4,r20
   83070:	8829883a 	mov	r20,r17
   83074:	2023883a 	mov	r17,r4
   83078:	1d07883a 	add	r3,r3,r20
   8307c:	10800044 	addi	r2,r2,1
   83080:	45400015 	stw	r21,0(r8)
   83084:	45000115 	stw	r20,4(r8)
   83088:	d8c12015 	stw	r3,1152(sp)
   8308c:	d8811f15 	stw	r2,1148(sp)
   83090:	010001c4 	movi	r4,7
   83094:	2082a616 	blt	r4,r2,83b30 <___vfprintf_internal_r+0x1298>
   83098:	42000204 	addi	r8,r8,8
   8309c:	d9412a17 	ldw	r5,1192(sp)
   830a0:	2880400c 	andi	r2,r5,256
   830a4:	1001b51e 	bne	r2,zero,8377c <___vfprintf_internal_r+0xee4>
   830a8:	d8812e17 	ldw	r2,1208(sp)
   830ac:	d9012e17 	ldw	r4,1208(sp)
   830b0:	44000015 	stw	r16,0(r8)
   830b4:	1887883a 	add	r3,r3,r2
   830b8:	d8811f17 	ldw	r2,1148(sp)
   830bc:	10800044 	addi	r2,r2,1
   830c0:	41000115 	stw	r4,4(r8)
   830c4:	d8c12015 	stw	r3,1152(sp)
   830c8:	d8811f15 	stw	r2,1148(sp)
   830cc:	010001c4 	movi	r4,7
   830d0:	20818b16 	blt	r4,r2,83700 <___vfprintf_internal_r+0xe68>
   830d4:	42000204 	addi	r8,r8,8
   830d8:	d9412a17 	ldw	r5,1192(sp)
   830dc:	2880010c 	andi	r2,r5,4
   830e0:	10003226 	beq	r2,zero,831ac <___vfprintf_internal_r+0x914>
   830e4:	d8813017 	ldw	r2,1216(sp)
   830e8:	d9012b17 	ldw	r4,1196(sp)
   830ec:	1121c83a 	sub	r16,r2,r4
   830f0:	04002e0e 	bge	zero,r16,831ac <___vfprintf_internal_r+0x914>
   830f4:	04800404 	movi	r18,16
   830f8:	d8811f17 	ldw	r2,1148(sp)
   830fc:	9405240e 	bge	r18,r16,84590 <___vfprintf_internal_r+0x1cf8>
   83100:	01000274 	movhi	r4,9
   83104:	2101ec84 	addi	r4,r4,1970
   83108:	d9013615 	stw	r4,1240(sp)
   8310c:	050001c4 	movi	r20,7
   83110:	dd412c17 	ldw	r21,1200(sp)
   83114:	00000306 	br	83124 <___vfprintf_internal_r+0x88c>
   83118:	843ffc04 	addi	r16,r16,-16
   8311c:	42000204 	addi	r8,r8,8
   83120:	9400130e 	bge	r18,r16,83170 <___vfprintf_internal_r+0x8d8>
   83124:	18c00404 	addi	r3,r3,16
   83128:	10800044 	addi	r2,r2,1
   8312c:	01400274 	movhi	r5,9
   83130:	2941ec84 	addi	r5,r5,1970
   83134:	41400015 	stw	r5,0(r8)
   83138:	44800115 	stw	r18,4(r8)
   8313c:	d8c12015 	stw	r3,1152(sp)
   83140:	d8811f15 	stw	r2,1148(sp)
   83144:	a0bff40e 	bge	r20,r2,83118 <_gp+0xfffe8d24>
   83148:	a809883a 	mov	r4,r21
   8314c:	980b883a 	mov	r5,r19
   83150:	d9811e04 	addi	r6,sp,1144
   83154:	0089c000 	call	89c00 <__sprint_r>
   83158:	103eeb1e 	bne	r2,zero,82d08 <_gp+0xfffe8914>
   8315c:	843ffc04 	addi	r16,r16,-16
   83160:	d8c12017 	ldw	r3,1152(sp)
   83164:	d8811f17 	ldw	r2,1148(sp)
   83168:	da000404 	addi	r8,sp,16
   8316c:	943fed16 	blt	r18,r16,83124 <_gp+0xfffe8d30>
   83170:	d9013617 	ldw	r4,1240(sp)
   83174:	1c07883a 	add	r3,r3,r16
   83178:	10800044 	addi	r2,r2,1
   8317c:	41000015 	stw	r4,0(r8)
   83180:	44000115 	stw	r16,4(r8)
   83184:	d8c12015 	stw	r3,1152(sp)
   83188:	d8811f15 	stw	r2,1148(sp)
   8318c:	010001c4 	movi	r4,7
   83190:	2080060e 	bge	r4,r2,831ac <___vfprintf_internal_r+0x914>
   83194:	d9012c17 	ldw	r4,1200(sp)
   83198:	980b883a 	mov	r5,r19
   8319c:	d9811e04 	addi	r6,sp,1144
   831a0:	0089c000 	call	89c00 <__sprint_r>
   831a4:	103ed81e 	bne	r2,zero,82d08 <_gp+0xfffe8914>
   831a8:	d8c12017 	ldw	r3,1152(sp)
   831ac:	d8812b17 	ldw	r2,1196(sp)
   831b0:	d9413017 	ldw	r5,1216(sp)
   831b4:	1140010e 	bge	r2,r5,831bc <___vfprintf_internal_r+0x924>
   831b8:	2805883a 	mov	r2,r5
   831bc:	d9013117 	ldw	r4,1220(sp)
   831c0:	2089883a 	add	r4,r4,r2
   831c4:	d9013115 	stw	r4,1220(sp)
   831c8:	1802381e 	bne	r3,zero,83aac <___vfprintf_internal_r+0x1214>
   831cc:	88800007 	ldb	r2,0(r17)
   831d0:	d8011f15 	stw	zero,1148(sp)
   831d4:	da000404 	addi	r8,sp,16
   831d8:	103def1e 	bne	r2,zero,82998 <_gp+0xfffe85a4>
   831dc:	8821883a 	mov	r16,r17
   831e0:	003e0506 	br	829f8 <_gp+0xfffe8604>
   831e4:	1829883a 	mov	r20,r3
   831e8:	d8c12a17 	ldw	r3,1192(sp)
   831ec:	dd812785 	stb	r22,1182(sp)
   831f0:	e011883a 	mov	r8,fp
   831f4:	1880020c 	andi	r2,r3,8
   831f8:	1003c926 	beq	r2,zero,84120 <___vfprintf_internal_r+0x1888>
   831fc:	d9012f17 	ldw	r4,1212(sp)
   83200:	d9412f17 	ldw	r5,1212(sp)
   83204:	d8812f17 	ldw	r2,1212(sp)
   83208:	21000017 	ldw	r4,0(r4)
   8320c:	29400117 	ldw	r5,4(r5)
   83210:	10800204 	addi	r2,r2,8
   83214:	d9013715 	stw	r4,1244(sp)
   83218:	d9413915 	stw	r5,1252(sp)
   8321c:	d8812f15 	stw	r2,1212(sp)
   83220:	d9013717 	ldw	r4,1244(sp)
   83224:	d9413917 	ldw	r5,1252(sp)
   83228:	da013f15 	stw	r8,1276(sp)
   8322c:	04000044 	movi	r16,1
   83230:	00898580 	call	89858 <__fpclassifyd>
   83234:	da013f17 	ldw	r8,1276(sp)
   83238:	d9013717 	ldw	r4,1244(sp)
   8323c:	d9413917 	ldw	r5,1252(sp)
   83240:	1403571e 	bne	r2,r16,83fa0 <___vfprintf_internal_r+0x1708>
   83244:	000d883a 	mov	r6,zero
   83248:	000f883a 	mov	r7,zero
   8324c:	008d1040 	call	8d104 <__ledf2>
   83250:	da013f17 	ldw	r8,1276(sp)
   83254:	1004f416 	blt	r2,zero,84628 <___vfprintf_internal_r+0x1d90>
   83258:	df012783 	ldbu	fp,1182(sp)
   8325c:	008011c4 	movi	r2,71
   83260:	14847a0e 	bge	r2,r18,8444c <___vfprintf_internal_r+0x1bb4>
   83264:	04000274 	movhi	r16,9
   83268:	8401d904 	addi	r16,r16,1892
   8326c:	d9012a17 	ldw	r4,1192(sp)
   83270:	00bfdfc4 	movi	r2,-129
   83274:	00c000c4 	movi	r3,3
   83278:	2088703a 	and	r4,r4,r2
   8327c:	d8c12b15 	stw	r3,1196(sp)
   83280:	d9012a15 	stw	r4,1192(sp)
   83284:	d8c12e15 	stw	r3,1208(sp)
   83288:	0029883a 	mov	r20,zero
   8328c:	d8013315 	stw	zero,1228(sp)
   83290:	003eea06 	br	82e3c <_gp+0xfffe8a48>
   83294:	953ff404 	addi	r20,r18,-48
   83298:	d8013015 	stw	zero,1216(sp)
   8329c:	0009883a 	mov	r4,zero
   832a0:	1825883a 	mov	r18,r3
   832a4:	01400284 	movi	r5,10
   832a8:	00825800 	call	82580 <__mulsi3>
   832ac:	88c00007 	ldb	r3,0(r17)
   832b0:	1509883a 	add	r4,r2,r20
   832b4:	8c400044 	addi	r17,r17,1
   832b8:	1d3ff404 	addi	r20,r3,-48
   832bc:	8805883a 	mov	r2,r17
   832c0:	ad3ff82e 	bgeu	r21,r20,832a4 <_gp+0xfffe8eb0>
   832c4:	d9013015 	stw	r4,1216(sp)
   832c8:	9009883a 	mov	r4,r18
   832cc:	1023883a 	mov	r17,r2
   832d0:	1825883a 	mov	r18,r3
   832d4:	2007883a 	mov	r3,r4
   832d8:	003dd506 	br	82a30 <_gp+0xfffe863c>
   832dc:	d8812a17 	ldw	r2,1192(sp)
   832e0:	10800214 	ori	r2,r2,8
   832e4:	d8812a15 	stw	r2,1192(sp)
   832e8:	8c800007 	ldb	r18,0(r17)
   832ec:	003dcf06 	br	82a2c <_gp+0xfffe8638>
   832f0:	d9012a17 	ldw	r4,1192(sp)
   832f4:	e011883a 	mov	r8,fp
   832f8:	1829883a 	mov	r20,r3
   832fc:	21000414 	ori	r4,r4,16
   83300:	d9012a15 	stw	r4,1192(sp)
   83304:	d9412a17 	ldw	r5,1192(sp)
   83308:	2880080c 	andi	r2,r5,32
   8330c:	1000cf26 	beq	r2,zero,8364c <___vfprintf_internal_r+0xdb4>
   83310:	d8812f17 	ldw	r2,1212(sp)
   83314:	0007883a 	mov	r3,zero
   83318:	15400017 	ldw	r21,0(r2)
   8331c:	15800117 	ldw	r22,4(r2)
   83320:	10800204 	addi	r2,r2,8
   83324:	d8812f15 	stw	r2,1212(sp)
   83328:	ad84b03a 	or	r2,r21,r22
   8332c:	d8012785 	stb	zero,1182(sp)
   83330:	0039883a 	mov	fp,zero
   83334:	003eab06 	br	82de4 <_gp+0xfffe89f0>
   83338:	d9012a17 	ldw	r4,1192(sp)
   8333c:	e011883a 	mov	r8,fp
   83340:	1829883a 	mov	r20,r3
   83344:	21000414 	ori	r4,r4,16
   83348:	d9012a15 	stw	r4,1192(sp)
   8334c:	d9412a17 	ldw	r5,1192(sp)
   83350:	2880080c 	andi	r2,r5,32
   83354:	1000cd26 	beq	r2,zero,8368c <___vfprintf_internal_r+0xdf4>
   83358:	d8812f17 	ldw	r2,1212(sp)
   8335c:	00c00044 	movi	r3,1
   83360:	15400017 	ldw	r21,0(r2)
   83364:	15800117 	ldw	r22,4(r2)
   83368:	10800204 	addi	r2,r2,8
   8336c:	d8812f15 	stw	r2,1212(sp)
   83370:	ad84b03a 	or	r2,r21,r22
   83374:	003fed06 	br	8332c <_gp+0xfffe8f38>
   83378:	d9012a17 	ldw	r4,1192(sp)
   8337c:	dd812785 	stb	r22,1182(sp)
   83380:	e011883a 	mov	r8,fp
   83384:	2080080c 	andi	r2,r4,32
   83388:	10039226 	beq	r2,zero,841d4 <___vfprintf_internal_r+0x193c>
   8338c:	d9412f17 	ldw	r5,1212(sp)
   83390:	d9013117 	ldw	r4,1220(sp)
   83394:	28800017 	ldw	r2,0(r5)
   83398:	2007d7fa 	srai	r3,r4,31
   8339c:	29400104 	addi	r5,r5,4
   833a0:	d9412f15 	stw	r5,1212(sp)
   833a4:	11000015 	stw	r4,0(r2)
   833a8:	10c00115 	stw	r3,4(r2)
   833ac:	003d7806 	br	82990 <_gp+0xfffe859c>
   833b0:	d8c12f17 	ldw	r3,1212(sp)
   833b4:	d9012f17 	ldw	r4,1212(sp)
   833b8:	e011883a 	mov	r8,fp
   833bc:	18800017 	ldw	r2,0(r3)
   833c0:	21000104 	addi	r4,r4,4
   833c4:	00c00044 	movi	r3,1
   833c8:	d8c12b15 	stw	r3,1196(sp)
   833cc:	d8012785 	stb	zero,1182(sp)
   833d0:	d8810405 	stb	r2,1040(sp)
   833d4:	d9012f15 	stw	r4,1212(sp)
   833d8:	d8c12e15 	stw	r3,1208(sp)
   833dc:	0029883a 	mov	r20,zero
   833e0:	d8013315 	stw	zero,1228(sp)
   833e4:	dc010404 	addi	r16,sp,1040
   833e8:	0005883a 	mov	r2,zero
   833ec:	003e9a06 	br	82e58 <_gp+0xfffe8a64>
   833f0:	d9412a17 	ldw	r5,1192(sp)
   833f4:	01000274 	movhi	r4,9
   833f8:	2101e104 	addi	r4,r4,1924
   833fc:	dd812785 	stb	r22,1182(sp)
   83400:	d9013b15 	stw	r4,1260(sp)
   83404:	2880080c 	andi	r2,r5,32
   83408:	e011883a 	mov	r8,fp
   8340c:	1829883a 	mov	r20,r3
   83410:	10002f26 	beq	r2,zero,834d0 <___vfprintf_internal_r+0xc38>
   83414:	d8812f17 	ldw	r2,1212(sp)
   83418:	15400017 	ldw	r21,0(r2)
   8341c:	15800117 	ldw	r22,4(r2)
   83420:	10800204 	addi	r2,r2,8
   83424:	d8812f15 	stw	r2,1212(sp)
   83428:	d9012a17 	ldw	r4,1192(sp)
   8342c:	2080004c 	andi	r2,r4,1
   83430:	10025f26 	beq	r2,zero,83db0 <___vfprintf_internal_r+0x1518>
   83434:	ad84b03a 	or	r2,r21,r22
   83438:	10034e26 	beq	r2,zero,84174 <___vfprintf_internal_r+0x18dc>
   8343c:	00c00c04 	movi	r3,48
   83440:	21000094 	ori	r4,r4,2
   83444:	d8c12705 	stb	r3,1180(sp)
   83448:	dc812745 	stb	r18,1181(sp)
   8344c:	d9012a15 	stw	r4,1192(sp)
   83450:	00c00084 	movi	r3,2
   83454:	003fb506 	br	8332c <_gp+0xfffe8f38>
   83458:	b0803fcc 	andi	r2,r22,255
   8345c:	1080201c 	xori	r2,r2,128
   83460:	10bfe004 	addi	r2,r2,-128
   83464:	1003501e 	bne	r2,zero,841a8 <___vfprintf_internal_r+0x1910>
   83468:	05800804 	movi	r22,32
   8346c:	8c800007 	ldb	r18,0(r17)
   83470:	003d6e06 	br	82a2c <_gp+0xfffe8638>
   83474:	d9012a17 	ldw	r4,1192(sp)
   83478:	21000054 	ori	r4,r4,1
   8347c:	d9012a15 	stw	r4,1192(sp)
   83480:	8c800007 	ldb	r18,0(r17)
   83484:	003d6906 	br	82a2c <_gp+0xfffe8638>
   83488:	d9412f17 	ldw	r5,1212(sp)
   8348c:	d9012f17 	ldw	r4,1212(sp)
   83490:	29400017 	ldw	r5,0(r5)
   83494:	20800104 	addi	r2,r4,4
   83498:	d9413015 	stw	r5,1216(sp)
   8349c:	283dc616 	blt	r5,zero,82bb8 <_gp+0xfffe87c4>
   834a0:	d8812f15 	stw	r2,1212(sp)
   834a4:	8c800007 	ldb	r18,0(r17)
   834a8:	003d6006 	br	82a2c <_gp+0xfffe8638>
   834ac:	d9412a17 	ldw	r5,1192(sp)
   834b0:	00800274 	movhi	r2,9
   834b4:	1081dc04 	addi	r2,r2,1904
   834b8:	d8813b15 	stw	r2,1260(sp)
   834bc:	dd812785 	stb	r22,1182(sp)
   834c0:	2880080c 	andi	r2,r5,32
   834c4:	e011883a 	mov	r8,fp
   834c8:	1829883a 	mov	r20,r3
   834cc:	103fd11e 	bne	r2,zero,83414 <_gp+0xfffe9020>
   834d0:	d8c12a17 	ldw	r3,1192(sp)
   834d4:	1880040c 	andi	r2,r3,16
   834d8:	10033526 	beq	r2,zero,841b0 <___vfprintf_internal_r+0x1918>
   834dc:	d9012f17 	ldw	r4,1212(sp)
   834e0:	002d883a 	mov	r22,zero
   834e4:	25400017 	ldw	r21,0(r4)
   834e8:	21000104 	addi	r4,r4,4
   834ec:	d9012f15 	stw	r4,1212(sp)
   834f0:	003fcd06 	br	83428 <_gp+0xfffe9034>
   834f4:	d9012a17 	ldw	r4,1192(sp)
   834f8:	21001014 	ori	r4,r4,64
   834fc:	d9012a15 	stw	r4,1192(sp)
   83500:	8c800007 	ldb	r18,0(r17)
   83504:	003d4906 	br	82a2c <_gp+0xfffe8638>
   83508:	8c800007 	ldb	r18,0(r17)
   8350c:	01401b04 	movi	r5,108
   83510:	8805883a 	mov	r2,r17
   83514:	9143db26 	beq	r18,r5,84484 <___vfprintf_internal_r+0x1bec>
   83518:	d9412a17 	ldw	r5,1192(sp)
   8351c:	29400414 	ori	r5,r5,16
   83520:	d9412a15 	stw	r5,1192(sp)
   83524:	003d4106 	br	82a2c <_gp+0xfffe8638>
   83528:	1829883a 	mov	r20,r3
   8352c:	d8c12a17 	ldw	r3,1192(sp)
   83530:	dd812785 	stb	r22,1182(sp)
   83534:	e011883a 	mov	r8,fp
   83538:	1880080c 	andi	r2,r3,32
   8353c:	103e1f1e 	bne	r2,zero,82dbc <_gp+0xfffe89c8>
   83540:	d9412a17 	ldw	r5,1192(sp)
   83544:	2880040c 	andi	r2,r5,16
   83548:	10032f26 	beq	r2,zero,84208 <___vfprintf_internal_r+0x1970>
   8354c:	d8812f17 	ldw	r2,1212(sp)
   83550:	15400017 	ldw	r21,0(r2)
   83554:	10800104 	addi	r2,r2,4
   83558:	d8812f15 	stw	r2,1212(sp)
   8355c:	a82dd7fa 	srai	r22,r21,31
   83560:	b005883a 	mov	r2,r22
   83564:	003e1b06 	br	82dd4 <_gp+0xfffe89e0>
   83568:	d8812a17 	ldw	r2,1192(sp)
   8356c:	10800814 	ori	r2,r2,32
   83570:	d8812a15 	stw	r2,1192(sp)
   83574:	8c800007 	ldb	r18,0(r17)
   83578:	003d2c06 	br	82a2c <_gp+0xfffe8638>
   8357c:	1829883a 	mov	r20,r3
   83580:	d8c12f17 	ldw	r3,1212(sp)
   83584:	d8012785 	stb	zero,1182(sp)
   83588:	e011883a 	mov	r8,fp
   8358c:	1c000017 	ldw	r16,0(r3)
   83590:	1d400104 	addi	r21,r3,4
   83594:	80040226 	beq	r16,zero,845a0 <___vfprintf_internal_r+0x1d08>
   83598:	8009883a 	mov	r4,r16
   8359c:	a003c716 	blt	r20,zero,844bc <___vfprintf_internal_r+0x1c24>
   835a0:	000b883a 	mov	r5,zero
   835a4:	a00d883a 	mov	r6,r20
   835a8:	df013f15 	stw	fp,1276(sp)
   835ac:	0087e280 	call	87e28 <memchr>
   835b0:	da013f17 	ldw	r8,1276(sp)
   835b4:	10044326 	beq	r2,zero,846c4 <___vfprintf_internal_r+0x1e2c>
   835b8:	1405c83a 	sub	r2,r2,r16
   835bc:	d8812e15 	stw	r2,1208(sp)
   835c0:	a0837c16 	blt	r20,r2,843b4 <___vfprintf_internal_r+0x1b1c>
   835c4:	d8812e17 	ldw	r2,1208(sp)
   835c8:	1003c116 	blt	r2,zero,844d0 <___vfprintf_internal_r+0x1c38>
   835cc:	df012783 	ldbu	fp,1182(sp)
   835d0:	d8812b15 	stw	r2,1196(sp)
   835d4:	dd412f15 	stw	r21,1212(sp)
   835d8:	0029883a 	mov	r20,zero
   835dc:	d8013315 	stw	zero,1228(sp)
   835e0:	003e1606 	br	82e3c <_gp+0xfffe8a48>
   835e4:	d9012f17 	ldw	r4,1212(sp)
   835e8:	d9412a17 	ldw	r5,1192(sp)
   835ec:	00800c04 	movi	r2,48
   835f0:	25400017 	ldw	r21,0(r4)
   835f4:	d8812705 	stb	r2,1180(sp)
   835f8:	00801e04 	movi	r2,120
   835fc:	29400094 	ori	r5,r5,2
   83600:	d8812745 	stb	r2,1181(sp)
   83604:	21000104 	addi	r4,r4,4
   83608:	00800274 	movhi	r2,9
   8360c:	1081e104 	addi	r2,r2,1924
   83610:	1829883a 	mov	r20,r3
   83614:	d8813b15 	stw	r2,1260(sp)
   83618:	e011883a 	mov	r8,fp
   8361c:	002d883a 	mov	r22,zero
   83620:	d9412a15 	stw	r5,1192(sp)
   83624:	d9012f15 	stw	r4,1212(sp)
   83628:	00c00084 	movi	r3,2
   8362c:	04801e04 	movi	r18,120
   83630:	a805883a 	mov	r2,r21
   83634:	003f3d06 	br	8332c <_gp+0xfffe8f38>
   83638:	d9412a17 	ldw	r5,1192(sp)
   8363c:	e011883a 	mov	r8,fp
   83640:	1829883a 	mov	r20,r3
   83644:	2880080c 	andi	r2,r5,32
   83648:	103f311e 	bne	r2,zero,83310 <_gp+0xfffe8f1c>
   8364c:	d8c12a17 	ldw	r3,1192(sp)
   83650:	1880040c 	andi	r2,r3,16
   83654:	1002c926 	beq	r2,zero,8417c <___vfprintf_internal_r+0x18e4>
   83658:	d9012f17 	ldw	r4,1212(sp)
   8365c:	002d883a 	mov	r22,zero
   83660:	0007883a 	mov	r3,zero
   83664:	25400017 	ldw	r21,0(r4)
   83668:	21000104 	addi	r4,r4,4
   8366c:	d9012f15 	stw	r4,1212(sp)
   83670:	a805883a 	mov	r2,r21
   83674:	003f2d06 	br	8332c <_gp+0xfffe8f38>
   83678:	d9412a17 	ldw	r5,1192(sp)
   8367c:	e011883a 	mov	r8,fp
   83680:	1829883a 	mov	r20,r3
   83684:	2880080c 	andi	r2,r5,32
   83688:	103f331e 	bne	r2,zero,83358 <_gp+0xfffe8f64>
   8368c:	d8c12a17 	ldw	r3,1192(sp)
   83690:	1880040c 	andi	r2,r3,16
   83694:	1002ac26 	beq	r2,zero,84148 <___vfprintf_internal_r+0x18b0>
   83698:	d9012f17 	ldw	r4,1212(sp)
   8369c:	002d883a 	mov	r22,zero
   836a0:	00c00044 	movi	r3,1
   836a4:	25400017 	ldw	r21,0(r4)
   836a8:	21000104 	addi	r4,r4,4
   836ac:	d9012f15 	stw	r4,1212(sp)
   836b0:	a805883a 	mov	r2,r21
   836b4:	003f1d06 	br	8332c <_gp+0xfffe8f38>
   836b8:	dd812785 	stb	r22,1182(sp)
   836bc:	e011883a 	mov	r8,fp
   836c0:	903d8b26 	beq	r18,zero,82cf0 <_gp+0xfffe88fc>
   836c4:	00c00044 	movi	r3,1
   836c8:	d8c12b15 	stw	r3,1196(sp)
   836cc:	dc810405 	stb	r18,1040(sp)
   836d0:	d8012785 	stb	zero,1182(sp)
   836d4:	003f4006 	br	833d8 <_gp+0xfffe8fe4>
   836d8:	d8c12017 	ldw	r3,1152(sp)
   836dc:	003e2106 	br	82f64 <_gp+0xfffe8b70>
   836e0:	45400015 	stw	r21,0(r8)
   836e4:	44000115 	stw	r16,4(r8)
   836e8:	1c07883a 	add	r3,r3,r16
   836ec:	10800044 	addi	r2,r2,1
   836f0:	d8c12015 	stw	r3,1152(sp)
   836f4:	d8811f15 	stw	r2,1148(sp)
   836f8:	010001c4 	movi	r4,7
   836fc:	20be750e 	bge	r4,r2,830d4 <_gp+0xfffe8ce0>
   83700:	d9012c17 	ldw	r4,1200(sp)
   83704:	980b883a 	mov	r5,r19
   83708:	d9811e04 	addi	r6,sp,1144
   8370c:	0089c000 	call	89c00 <__sprint_r>
   83710:	103d7d1e 	bne	r2,zero,82d08 <_gp+0xfffe8914>
   83714:	d8c12017 	ldw	r3,1152(sp)
   83718:	da000404 	addi	r8,sp,16
   8371c:	003e6e06 	br	830d8 <_gp+0xfffe8ce4>
   83720:	18803fcc 	andi	r2,r3,255
   83724:	00c00044 	movi	r3,1
   83728:	10c11926 	beq	r2,r3,83b90 <___vfprintf_internal_r+0x12f8>
   8372c:	00c00084 	movi	r3,2
   83730:	10c0e41e 	bne	r2,r3,83ac4 <___vfprintf_internal_r+0x122c>
   83734:	d9413b17 	ldw	r5,1260(sp)
   83738:	d8c10dc4 	addi	r3,sp,1079
   8373c:	a88003cc 	andi	r2,r21,15
   83740:	b008973a 	slli	r4,r22,28
   83744:	2885883a 	add	r2,r5,r2
   83748:	a82ad13a 	srli	r21,r21,4
   8374c:	10800003 	ldbu	r2,0(r2)
   83750:	b02cd13a 	srli	r22,r22,4
   83754:	256ab03a 	or	r21,r4,r21
   83758:	18800005 	stb	r2,0(r3)
   8375c:	ad84b03a 	or	r2,r21,r22
   83760:	1821883a 	mov	r16,r3
   83764:	18ffffc4 	addi	r3,r3,-1
   83768:	103ff41e 	bne	r2,zero,8373c <_gp+0xfffe9348>
   8376c:	d8c12917 	ldw	r3,1188(sp)
   83770:	1c07c83a 	sub	r3,r3,r16
   83774:	d8c12e15 	stw	r3,1208(sp)
   83778:	003dab06 	br	82e28 <_gp+0xfffe8a34>
   8377c:	00801944 	movi	r2,101
   83780:	14807e0e 	bge	r2,r18,8397c <___vfprintf_internal_r+0x10e4>
   83784:	d9013717 	ldw	r4,1244(sp)
   83788:	d9413917 	ldw	r5,1252(sp)
   8378c:	000d883a 	mov	r6,zero
   83790:	000f883a 	mov	r7,zero
   83794:	d8c13e15 	stw	r3,1272(sp)
   83798:	da013f15 	stw	r8,1276(sp)
   8379c:	008cfa80 	call	8cfa8 <__eqdf2>
   837a0:	d8c13e17 	ldw	r3,1272(sp)
   837a4:	da013f17 	ldw	r8,1276(sp)
   837a8:	1001211e 	bne	r2,zero,83c30 <___vfprintf_internal_r+0x1398>
   837ac:	d8811f17 	ldw	r2,1148(sp)
   837b0:	01000044 	movi	r4,1
   837b4:	18c00044 	addi	r3,r3,1
   837b8:	10800044 	addi	r2,r2,1
   837bc:	01400274 	movhi	r5,9
   837c0:	2941e804 	addi	r5,r5,1952
   837c4:	41000115 	stw	r4,4(r8)
   837c8:	41400015 	stw	r5,0(r8)
   837cc:	d8c12015 	stw	r3,1152(sp)
   837d0:	d8811f15 	stw	r2,1148(sp)
   837d4:	010001c4 	movi	r4,7
   837d8:	2082a316 	blt	r4,r2,84268 <___vfprintf_internal_r+0x19d0>
   837dc:	42000204 	addi	r8,r8,8
   837e0:	d8812617 	ldw	r2,1176(sp)
   837e4:	d9013517 	ldw	r4,1236(sp)
   837e8:	11000316 	blt	r2,r4,837f8 <___vfprintf_internal_r+0xf60>
   837ec:	d9412a17 	ldw	r5,1192(sp)
   837f0:	2880004c 	andi	r2,r5,1
   837f4:	103e3826 	beq	r2,zero,830d8 <_gp+0xfffe8ce4>
   837f8:	d8813817 	ldw	r2,1248(sp)
   837fc:	d9013417 	ldw	r4,1232(sp)
   83800:	d9413817 	ldw	r5,1248(sp)
   83804:	1887883a 	add	r3,r3,r2
   83808:	d8811f17 	ldw	r2,1148(sp)
   8380c:	41000015 	stw	r4,0(r8)
   83810:	41400115 	stw	r5,4(r8)
   83814:	10800044 	addi	r2,r2,1
   83818:	d8c12015 	stw	r3,1152(sp)
   8381c:	d8811f15 	stw	r2,1148(sp)
   83820:	010001c4 	movi	r4,7
   83824:	20831d16 	blt	r4,r2,8449c <___vfprintf_internal_r+0x1c04>
   83828:	42000204 	addi	r8,r8,8
   8382c:	d8813517 	ldw	r2,1236(sp)
   83830:	143fffc4 	addi	r16,r2,-1
   83834:	043e280e 	bge	zero,r16,830d8 <_gp+0xfffe8ce4>
   83838:	04800404 	movi	r18,16
   8383c:	d8811f17 	ldw	r2,1148(sp)
   83840:	05400274 	movhi	r21,9
   83844:	ad41e884 	addi	r21,r21,1954
   83848:	943fa50e 	bge	r18,r16,836e0 <_gp+0xfffe92ec>
   8384c:	050001c4 	movi	r20,7
   83850:	dd812c17 	ldw	r22,1200(sp)
   83854:	00000306 	br	83864 <___vfprintf_internal_r+0xfcc>
   83858:	42000204 	addi	r8,r8,8
   8385c:	843ffc04 	addi	r16,r16,-16
   83860:	943f9f0e 	bge	r18,r16,836e0 <_gp+0xfffe92ec>
   83864:	18c00404 	addi	r3,r3,16
   83868:	10800044 	addi	r2,r2,1
   8386c:	45c00015 	stw	r23,0(r8)
   83870:	44800115 	stw	r18,4(r8)
   83874:	d8c12015 	stw	r3,1152(sp)
   83878:	d8811f15 	stw	r2,1148(sp)
   8387c:	a0bff60e 	bge	r20,r2,83858 <_gp+0xfffe9464>
   83880:	b009883a 	mov	r4,r22
   83884:	980b883a 	mov	r5,r19
   83888:	d9811e04 	addi	r6,sp,1144
   8388c:	0089c000 	call	89c00 <__sprint_r>
   83890:	103d1d1e 	bne	r2,zero,82d08 <_gp+0xfffe8914>
   83894:	d8c12017 	ldw	r3,1152(sp)
   83898:	d8811f17 	ldw	r2,1148(sp)
   8389c:	da000404 	addi	r8,sp,16
   838a0:	003fee06 	br	8385c <_gp+0xfffe9468>
   838a4:	d9413017 	ldw	r5,1216(sp)
   838a8:	d8812b17 	ldw	r2,1196(sp)
   838ac:	28adc83a 	sub	r22,r5,r2
   838b0:	05bdca0e 	bge	zero,r22,82fdc <_gp+0xfffe8be8>
   838b4:	07000404 	movi	fp,16
   838b8:	d8811f17 	ldw	r2,1148(sp)
   838bc:	05400274 	movhi	r21,9
   838c0:	ad41e884 	addi	r21,r21,1954
   838c4:	e580230e 	bge	fp,r22,83954 <___vfprintf_internal_r+0x10bc>
   838c8:	a809883a 	mov	r4,r21
   838cc:	dc012d15 	stw	r16,1204(sp)
   838d0:	882b883a 	mov	r21,r17
   838d4:	01c001c4 	movi	r7,7
   838d8:	b023883a 	mov	r17,r22
   838dc:	dc012c17 	ldw	r16,1200(sp)
   838e0:	202d883a 	mov	r22,r4
   838e4:	00000306 	br	838f4 <___vfprintf_internal_r+0x105c>
   838e8:	8c7ffc04 	addi	r17,r17,-16
   838ec:	42000204 	addi	r8,r8,8
   838f0:	e440130e 	bge	fp,r17,83940 <___vfprintf_internal_r+0x10a8>
   838f4:	18c00404 	addi	r3,r3,16
   838f8:	10800044 	addi	r2,r2,1
   838fc:	45c00015 	stw	r23,0(r8)
   83900:	47000115 	stw	fp,4(r8)
   83904:	d8c12015 	stw	r3,1152(sp)
   83908:	d8811f15 	stw	r2,1148(sp)
   8390c:	38bff60e 	bge	r7,r2,838e8 <_gp+0xfffe94f4>
   83910:	8009883a 	mov	r4,r16
   83914:	980b883a 	mov	r5,r19
   83918:	d9811e04 	addi	r6,sp,1144
   8391c:	d9c13e15 	stw	r7,1272(sp)
   83920:	0089c000 	call	89c00 <__sprint_r>
   83924:	d9c13e17 	ldw	r7,1272(sp)
   83928:	103cf71e 	bne	r2,zero,82d08 <_gp+0xfffe8914>
   8392c:	8c7ffc04 	addi	r17,r17,-16
   83930:	d8c12017 	ldw	r3,1152(sp)
   83934:	d8811f17 	ldw	r2,1148(sp)
   83938:	da000404 	addi	r8,sp,16
   8393c:	e47fed16 	blt	fp,r17,838f4 <_gp+0xfffe9500>
   83940:	dc012d17 	ldw	r16,1204(sp)
   83944:	b009883a 	mov	r4,r22
   83948:	882d883a 	mov	r22,r17
   8394c:	a823883a 	mov	r17,r21
   83950:	202b883a 	mov	r21,r4
   83954:	1d87883a 	add	r3,r3,r22
   83958:	10800044 	addi	r2,r2,1
   8395c:	45400015 	stw	r21,0(r8)
   83960:	45800115 	stw	r22,4(r8)
   83964:	d8c12015 	stw	r3,1152(sp)
   83968:	d8811f15 	stw	r2,1148(sp)
   8396c:	010001c4 	movi	r4,7
   83970:	20817a16 	blt	r4,r2,83f5c <___vfprintf_internal_r+0x16c4>
   83974:	42000204 	addi	r8,r8,8
   83978:	003d9806 	br	82fdc <_gp+0xfffe8be8>
   8397c:	d9013517 	ldw	r4,1236(sp)
   83980:	00800044 	movi	r2,1
   83984:	1100340e 	bge	r2,r4,83a58 <___vfprintf_internal_r+0x11c0>
   83988:	dc811f17 	ldw	r18,1148(sp)
   8398c:	00800044 	movi	r2,1
   83990:	18c00044 	addi	r3,r3,1
   83994:	94800044 	addi	r18,r18,1
   83998:	40800115 	stw	r2,4(r8)
   8399c:	44000015 	stw	r16,0(r8)
   839a0:	d8c12015 	stw	r3,1152(sp)
   839a4:	dc811f15 	stw	r18,1148(sp)
   839a8:	008001c4 	movi	r2,7
   839ac:	14814e16 	blt	r2,r18,83ee8 <___vfprintf_internal_r+0x1650>
   839b0:	42000204 	addi	r8,r8,8
   839b4:	d8813817 	ldw	r2,1248(sp)
   839b8:	94800044 	addi	r18,r18,1
   839bc:	dc811f15 	stw	r18,1148(sp)
   839c0:	18ad883a 	add	r22,r3,r2
   839c4:	d8c13417 	ldw	r3,1232(sp)
   839c8:	40800115 	stw	r2,4(r8)
   839cc:	dd812015 	stw	r22,1152(sp)
   839d0:	40c00015 	stw	r3,0(r8)
   839d4:	008001c4 	movi	r2,7
   839d8:	14814c16 	blt	r2,r18,83f0c <___vfprintf_internal_r+0x1674>
   839dc:	45000204 	addi	r20,r8,8
   839e0:	d9013717 	ldw	r4,1244(sp)
   839e4:	d9413917 	ldw	r5,1252(sp)
   839e8:	000d883a 	mov	r6,zero
   839ec:	000f883a 	mov	r7,zero
   839f0:	008cfa80 	call	8cfa8 <__eqdf2>
   839f4:	1000cd26 	beq	r2,zero,83d2c <___vfprintf_internal_r+0x1494>
   839f8:	d9013517 	ldw	r4,1236(sp)
   839fc:	84000044 	addi	r16,r16,1
   83a00:	94800044 	addi	r18,r18,1
   83a04:	20bfffc4 	addi	r2,r4,-1
   83a08:	b0ad883a 	add	r22,r22,r2
   83a0c:	a0800115 	stw	r2,4(r20)
   83a10:	a4000015 	stw	r16,0(r20)
   83a14:	dd812015 	stw	r22,1152(sp)
   83a18:	dc811f15 	stw	r18,1148(sp)
   83a1c:	008001c4 	movi	r2,7
   83a20:	14801916 	blt	r2,r18,83a88 <___vfprintf_internal_r+0x11f0>
   83a24:	a5000204 	addi	r20,r20,8
   83a28:	d9013a17 	ldw	r4,1256(sp)
   83a2c:	d88122c4 	addi	r2,sp,1163
   83a30:	94800044 	addi	r18,r18,1
   83a34:	2587883a 	add	r3,r4,r22
   83a38:	a0800015 	stw	r2,0(r20)
   83a3c:	a1000115 	stw	r4,4(r20)
   83a40:	d8c12015 	stw	r3,1152(sp)
   83a44:	dc811f15 	stw	r18,1148(sp)
   83a48:	008001c4 	movi	r2,7
   83a4c:	14bf2c16 	blt	r2,r18,83700 <_gp+0xfffe930c>
   83a50:	a2000204 	addi	r8,r20,8
   83a54:	003da006 	br	830d8 <_gp+0xfffe8ce4>
   83a58:	d9412a17 	ldw	r5,1192(sp)
   83a5c:	2888703a 	and	r4,r5,r2
   83a60:	203fc91e 	bne	r4,zero,83988 <_gp+0xfffe9594>
   83a64:	dc811f17 	ldw	r18,1148(sp)
   83a68:	1d800044 	addi	r22,r3,1
   83a6c:	40800115 	stw	r2,4(r8)
   83a70:	94800044 	addi	r18,r18,1
   83a74:	44000015 	stw	r16,0(r8)
   83a78:	dd812015 	stw	r22,1152(sp)
   83a7c:	dc811f15 	stw	r18,1148(sp)
   83a80:	008001c4 	movi	r2,7
   83a84:	1482740e 	bge	r2,r18,84458 <___vfprintf_internal_r+0x1bc0>
   83a88:	d9012c17 	ldw	r4,1200(sp)
   83a8c:	980b883a 	mov	r5,r19
   83a90:	d9811e04 	addi	r6,sp,1144
   83a94:	0089c000 	call	89c00 <__sprint_r>
   83a98:	103c9b1e 	bne	r2,zero,82d08 <_gp+0xfffe8914>
   83a9c:	dd812017 	ldw	r22,1152(sp)
   83aa0:	dc811f17 	ldw	r18,1148(sp)
   83aa4:	dd000404 	addi	r20,sp,16
   83aa8:	003fdf06 	br	83a28 <_gp+0xfffe9634>
   83aac:	d9012c17 	ldw	r4,1200(sp)
   83ab0:	980b883a 	mov	r5,r19
   83ab4:	d9811e04 	addi	r6,sp,1144
   83ab8:	0089c000 	call	89c00 <__sprint_r>
   83abc:	103dc326 	beq	r2,zero,831cc <_gp+0xfffe8dd8>
   83ac0:	003c9106 	br	82d08 <_gp+0xfffe8914>
   83ac4:	d8c10dc4 	addi	r3,sp,1079
   83ac8:	a808d0fa 	srli	r4,r21,3
   83acc:	b00a977a 	slli	r5,r22,29
   83ad0:	b02cd0fa 	srli	r22,r22,3
   83ad4:	ad4001cc 	andi	r21,r21,7
   83ad8:	a8800c04 	addi	r2,r21,48
   83adc:	292ab03a 	or	r21,r5,r4
   83ae0:	18800005 	stb	r2,0(r3)
   83ae4:	ad88b03a 	or	r4,r21,r22
   83ae8:	1821883a 	mov	r16,r3
   83aec:	18ffffc4 	addi	r3,r3,-1
   83af0:	203ff51e 	bne	r4,zero,83ac8 <_gp+0xfffe96d4>
   83af4:	d9412a17 	ldw	r5,1192(sp)
   83af8:	2900004c 	andi	r4,r5,1
   83afc:	800b883a 	mov	r5,r16
   83b00:	203f1a26 	beq	r4,zero,8376c <_gp+0xfffe9378>
   83b04:	10803fcc 	andi	r2,r2,255
   83b08:	1080201c 	xori	r2,r2,128
   83b0c:	10bfe004 	addi	r2,r2,-128
   83b10:	01000c04 	movi	r4,48
   83b14:	113f1526 	beq	r2,r4,8376c <_gp+0xfffe9378>
   83b18:	1821883a 	mov	r16,r3
   83b1c:	d8c12917 	ldw	r3,1188(sp)
   83b20:	293fffc5 	stb	r4,-1(r5)
   83b24:	1c07c83a 	sub	r3,r3,r16
   83b28:	d8c12e15 	stw	r3,1208(sp)
   83b2c:	003cbe06 	br	82e28 <_gp+0xfffe8a34>
   83b30:	d9012c17 	ldw	r4,1200(sp)
   83b34:	980b883a 	mov	r5,r19
   83b38:	d9811e04 	addi	r6,sp,1144
   83b3c:	0089c000 	call	89c00 <__sprint_r>
   83b40:	103c711e 	bne	r2,zero,82d08 <_gp+0xfffe8914>
   83b44:	d8c12017 	ldw	r3,1152(sp)
   83b48:	da000404 	addi	r8,sp,16
   83b4c:	003d5306 	br	8309c <_gp+0xfffe8ca8>
   83b50:	d9012c17 	ldw	r4,1200(sp)
   83b54:	980b883a 	mov	r5,r19
   83b58:	d9811e04 	addi	r6,sp,1144
   83b5c:	0089c000 	call	89c00 <__sprint_r>
   83b60:	103c691e 	bne	r2,zero,82d08 <_gp+0xfffe8914>
   83b64:	d8c12017 	ldw	r3,1152(sp)
   83b68:	da000404 	addi	r8,sp,16
   83b6c:	003d0a06 	br	82f98 <_gp+0xfffe8ba4>
   83b70:	d9012c17 	ldw	r4,1200(sp)
   83b74:	980b883a 	mov	r5,r19
   83b78:	d9811e04 	addi	r6,sp,1144
   83b7c:	0089c000 	call	89c00 <__sprint_r>
   83b80:	103c611e 	bne	r2,zero,82d08 <_gp+0xfffe8914>
   83b84:	d8c12017 	ldw	r3,1152(sp)
   83b88:	da000404 	addi	r8,sp,16
   83b8c:	003d1006 	br	82fd0 <_gp+0xfffe8bdc>
   83b90:	b000021e 	bne	r22,zero,83b9c <___vfprintf_internal_r+0x1304>
   83b94:	00800244 	movi	r2,9
   83b98:	15401c2e 	bgeu	r2,r21,83c0c <___vfprintf_internal_r+0x1374>
   83b9c:	dc412b15 	stw	r17,1196(sp)
   83ba0:	d8810dc4 	addi	r2,sp,1079
   83ba4:	b023883a 	mov	r17,r22
   83ba8:	402d883a 	mov	r22,r8
   83bac:	a809883a 	mov	r4,r21
   83bb0:	880b883a 	mov	r5,r17
   83bb4:	01800284 	movi	r6,10
   83bb8:	000f883a 	mov	r7,zero
   83bbc:	1021883a 	mov	r16,r2
   83bc0:	008c0f80 	call	8c0f8 <__umoddi3>
   83bc4:	10800c04 	addi	r2,r2,48
   83bc8:	a809883a 	mov	r4,r21
   83bcc:	880b883a 	mov	r5,r17
   83bd0:	80800005 	stb	r2,0(r16)
   83bd4:	01800284 	movi	r6,10
   83bd8:	000f883a 	mov	r7,zero
   83bdc:	008baa40 	call	8baa4 <__udivdi3>
   83be0:	1823883a 	mov	r17,r3
   83be4:	10c6b03a 	or	r3,r2,r3
   83be8:	102b883a 	mov	r21,r2
   83bec:	80bfffc4 	addi	r2,r16,-1
   83bf0:	183fee1e 	bne	r3,zero,83bac <_gp+0xfffe97b8>
   83bf4:	d8c12917 	ldw	r3,1188(sp)
   83bf8:	b011883a 	mov	r8,r22
   83bfc:	dc412b17 	ldw	r17,1196(sp)
   83c00:	1c07c83a 	sub	r3,r3,r16
   83c04:	d8c12e15 	stw	r3,1208(sp)
   83c08:	003c8706 	br	82e28 <_gp+0xfffe8a34>
   83c0c:	d9013d17 	ldw	r4,1268(sp)
   83c10:	ad400c04 	addi	r21,r21,48
   83c14:	dd410dc5 	stb	r21,1079(sp)
   83c18:	d9012e15 	stw	r4,1208(sp)
   83c1c:	dc010dc4 	addi	r16,sp,1079
   83c20:	003c8106 	br	82e28 <_gp+0xfffe8a34>
   83c24:	d8012e15 	stw	zero,1208(sp)
   83c28:	dc010e04 	addi	r16,sp,1080
   83c2c:	003c7e06 	br	82e28 <_gp+0xfffe8a34>
   83c30:	d8812617 	ldw	r2,1176(sp)
   83c34:	0081940e 	bge	zero,r2,84288 <___vfprintf_internal_r+0x19f0>
   83c38:	d9413517 	ldw	r5,1236(sp)
   83c3c:	d8813317 	ldw	r2,1228(sp)
   83c40:	8165883a 	add	r18,r16,r5
   83c44:	9429c83a 	sub	r20,r18,r16
   83c48:	1500010e 	bge	r2,r20,83c50 <___vfprintf_internal_r+0x13b8>
   83c4c:	1029883a 	mov	r20,r2
   83c50:	05000a0e 	bge	zero,r20,83c7c <___vfprintf_internal_r+0x13e4>
   83c54:	d8811f17 	ldw	r2,1148(sp)
   83c58:	1d07883a 	add	r3,r3,r20
   83c5c:	44000015 	stw	r16,0(r8)
   83c60:	10800044 	addi	r2,r2,1
   83c64:	45000115 	stw	r20,4(r8)
   83c68:	d8c12015 	stw	r3,1152(sp)
   83c6c:	d8811f15 	stw	r2,1148(sp)
   83c70:	010001c4 	movi	r4,7
   83c74:	20822b16 	blt	r4,r2,84524 <___vfprintf_internal_r+0x1c8c>
   83c78:	42000204 	addi	r8,r8,8
   83c7c:	a0022716 	blt	r20,zero,8451c <___vfprintf_internal_r+0x1c84>
   83c80:	d9013317 	ldw	r4,1228(sp)
   83c84:	2529c83a 	sub	r20,r4,r20
   83c88:	0500530e 	bge	zero,r20,83dd8 <___vfprintf_internal_r+0x1540>
   83c8c:	05800404 	movi	r22,16
   83c90:	d8811f17 	ldw	r2,1148(sp)
   83c94:	05400274 	movhi	r21,9
   83c98:	ad41e884 	addi	r21,r21,1954
   83c9c:	b501680e 	bge	r22,r20,84240 <___vfprintf_internal_r+0x19a8>
   83ca0:	8809883a 	mov	r4,r17
   83ca4:	dc012e15 	stw	r16,1208(sp)
   83ca8:	a023883a 	mov	r17,r20
   83cac:	070001c4 	movi	fp,7
   83cb0:	dc012c17 	ldw	r16,1200(sp)
   83cb4:	2029883a 	mov	r20,r4
   83cb8:	00000306 	br	83cc8 <___vfprintf_internal_r+0x1430>
   83cbc:	42000204 	addi	r8,r8,8
   83cc0:	8c7ffc04 	addi	r17,r17,-16
   83cc4:	b4415a0e 	bge	r22,r17,84230 <___vfprintf_internal_r+0x1998>
   83cc8:	18c00404 	addi	r3,r3,16
   83ccc:	10800044 	addi	r2,r2,1
   83cd0:	45c00015 	stw	r23,0(r8)
   83cd4:	45800115 	stw	r22,4(r8)
   83cd8:	d8c12015 	stw	r3,1152(sp)
   83cdc:	d8811f15 	stw	r2,1148(sp)
   83ce0:	e0bff60e 	bge	fp,r2,83cbc <_gp+0xfffe98c8>
   83ce4:	8009883a 	mov	r4,r16
   83ce8:	980b883a 	mov	r5,r19
   83cec:	d9811e04 	addi	r6,sp,1144
   83cf0:	0089c000 	call	89c00 <__sprint_r>
   83cf4:	103c041e 	bne	r2,zero,82d08 <_gp+0xfffe8914>
   83cf8:	d8c12017 	ldw	r3,1152(sp)
   83cfc:	d8811f17 	ldw	r2,1148(sp)
   83d00:	da000404 	addi	r8,sp,16
   83d04:	003fee06 	br	83cc0 <_gp+0xfffe98cc>
   83d08:	d9012c17 	ldw	r4,1200(sp)
   83d0c:	980b883a 	mov	r5,r19
   83d10:	d9811e04 	addi	r6,sp,1144
   83d14:	0089c000 	call	89c00 <__sprint_r>
   83d18:	103bfb1e 	bne	r2,zero,82d08 <_gp+0xfffe8914>
   83d1c:	d8c12017 	ldw	r3,1152(sp)
   83d20:	d8812787 	ldb	r2,1182(sp)
   83d24:	da000404 	addi	r8,sp,16
   83d28:	003c8e06 	br	82f64 <_gp+0xfffe8b70>
   83d2c:	d9413517 	ldw	r5,1236(sp)
   83d30:	2c3fffc4 	addi	r16,r5,-1
   83d34:	043f3c0e 	bge	zero,r16,83a28 <_gp+0xfffe9634>
   83d38:	07000404 	movi	fp,16
   83d3c:	05400274 	movhi	r21,9
   83d40:	ad41e884 	addi	r21,r21,1954
   83d44:	e4007c0e 	bge	fp,r16,83f38 <___vfprintf_internal_r+0x16a0>
   83d48:	dc412e15 	stw	r17,1208(sp)
   83d4c:	00c001c4 	movi	r3,7
   83d50:	8023883a 	mov	r17,r16
   83d54:	dc012c17 	ldw	r16,1200(sp)
   83d58:	00000306 	br	83d68 <___vfprintf_internal_r+0x14d0>
   83d5c:	a5000204 	addi	r20,r20,8
   83d60:	8c7ffc04 	addi	r17,r17,-16
   83d64:	e440720e 	bge	fp,r17,83f30 <___vfprintf_internal_r+0x1698>
   83d68:	b5800404 	addi	r22,r22,16
   83d6c:	94800044 	addi	r18,r18,1
   83d70:	a5c00015 	stw	r23,0(r20)
   83d74:	a7000115 	stw	fp,4(r20)
   83d78:	dd812015 	stw	r22,1152(sp)
   83d7c:	dc811f15 	stw	r18,1148(sp)
   83d80:	1cbff60e 	bge	r3,r18,83d5c <_gp+0xfffe9968>
   83d84:	8009883a 	mov	r4,r16
   83d88:	980b883a 	mov	r5,r19
   83d8c:	d9811e04 	addi	r6,sp,1144
   83d90:	d8c13e15 	stw	r3,1272(sp)
   83d94:	0089c000 	call	89c00 <__sprint_r>
   83d98:	d8c13e17 	ldw	r3,1272(sp)
   83d9c:	103bda1e 	bne	r2,zero,82d08 <_gp+0xfffe8914>
   83da0:	dd812017 	ldw	r22,1152(sp)
   83da4:	dc811f17 	ldw	r18,1148(sp)
   83da8:	dd000404 	addi	r20,sp,16
   83dac:	003fec06 	br	83d60 <_gp+0xfffe996c>
   83db0:	00c00084 	movi	r3,2
   83db4:	ad84b03a 	or	r2,r21,r22
   83db8:	003d5c06 	br	8332c <_gp+0xfffe8f38>
   83dbc:	d9012c17 	ldw	r4,1200(sp)
   83dc0:	980b883a 	mov	r5,r19
   83dc4:	d9811e04 	addi	r6,sp,1144
   83dc8:	0089c000 	call	89c00 <__sprint_r>
   83dcc:	103bce1e 	bne	r2,zero,82d08 <_gp+0xfffe8914>
   83dd0:	d8c12017 	ldw	r3,1152(sp)
   83dd4:	da000404 	addi	r8,sp,16
   83dd8:	d9413317 	ldw	r5,1228(sp)
   83ddc:	d8812617 	ldw	r2,1176(sp)
   83de0:	d9013517 	ldw	r4,1236(sp)
   83de4:	8161883a 	add	r16,r16,r5
   83de8:	11000316 	blt	r2,r4,83df8 <___vfprintf_internal_r+0x1560>
   83dec:	d9412a17 	ldw	r5,1192(sp)
   83df0:	2900004c 	andi	r4,r5,1
   83df4:	20000d26 	beq	r4,zero,83e2c <___vfprintf_internal_r+0x1594>
   83df8:	d9013817 	ldw	r4,1248(sp)
   83dfc:	d9413417 	ldw	r5,1232(sp)
   83e00:	1907883a 	add	r3,r3,r4
   83e04:	d9011f17 	ldw	r4,1148(sp)
   83e08:	41400015 	stw	r5,0(r8)
   83e0c:	d9413817 	ldw	r5,1248(sp)
   83e10:	21000044 	addi	r4,r4,1
   83e14:	d8c12015 	stw	r3,1152(sp)
   83e18:	41400115 	stw	r5,4(r8)
   83e1c:	d9011f15 	stw	r4,1148(sp)
   83e20:	014001c4 	movi	r5,7
   83e24:	2901c716 	blt	r5,r4,84544 <___vfprintf_internal_r+0x1cac>
   83e28:	42000204 	addi	r8,r8,8
   83e2c:	d9013517 	ldw	r4,1236(sp)
   83e30:	9425c83a 	sub	r18,r18,r16
   83e34:	2085c83a 	sub	r2,r4,r2
   83e38:	1029883a 	mov	r20,r2
   83e3c:	9080010e 	bge	r18,r2,83e44 <___vfprintf_internal_r+0x15ac>
   83e40:	9029883a 	mov	r20,r18
   83e44:	05000a0e 	bge	zero,r20,83e70 <___vfprintf_internal_r+0x15d8>
   83e48:	d9011f17 	ldw	r4,1148(sp)
   83e4c:	1d07883a 	add	r3,r3,r20
   83e50:	44000015 	stw	r16,0(r8)
   83e54:	21000044 	addi	r4,r4,1
   83e58:	45000115 	stw	r20,4(r8)
   83e5c:	d8c12015 	stw	r3,1152(sp)
   83e60:	d9011f15 	stw	r4,1148(sp)
   83e64:	014001c4 	movi	r5,7
   83e68:	2901dd16 	blt	r5,r4,845e0 <___vfprintf_internal_r+0x1d48>
   83e6c:	42000204 	addi	r8,r8,8
   83e70:	a001d916 	blt	r20,zero,845d8 <___vfprintf_internal_r+0x1d40>
   83e74:	1521c83a 	sub	r16,r2,r20
   83e78:	043c970e 	bge	zero,r16,830d8 <_gp+0xfffe8ce4>
   83e7c:	04800404 	movi	r18,16
   83e80:	d8811f17 	ldw	r2,1148(sp)
   83e84:	05400274 	movhi	r21,9
   83e88:	ad41e884 	addi	r21,r21,1954
   83e8c:	943e140e 	bge	r18,r16,836e0 <_gp+0xfffe92ec>
   83e90:	050001c4 	movi	r20,7
   83e94:	dd812c17 	ldw	r22,1200(sp)
   83e98:	00000306 	br	83ea8 <___vfprintf_internal_r+0x1610>
   83e9c:	42000204 	addi	r8,r8,8
   83ea0:	843ffc04 	addi	r16,r16,-16
   83ea4:	943e0e0e 	bge	r18,r16,836e0 <_gp+0xfffe92ec>
   83ea8:	18c00404 	addi	r3,r3,16
   83eac:	10800044 	addi	r2,r2,1
   83eb0:	45c00015 	stw	r23,0(r8)
   83eb4:	44800115 	stw	r18,4(r8)
   83eb8:	d8c12015 	stw	r3,1152(sp)
   83ebc:	d8811f15 	stw	r2,1148(sp)
   83ec0:	a0bff60e 	bge	r20,r2,83e9c <_gp+0xfffe9aa8>
   83ec4:	b009883a 	mov	r4,r22
   83ec8:	980b883a 	mov	r5,r19
   83ecc:	d9811e04 	addi	r6,sp,1144
   83ed0:	0089c000 	call	89c00 <__sprint_r>
   83ed4:	103b8c1e 	bne	r2,zero,82d08 <_gp+0xfffe8914>
   83ed8:	d8c12017 	ldw	r3,1152(sp)
   83edc:	d8811f17 	ldw	r2,1148(sp)
   83ee0:	da000404 	addi	r8,sp,16
   83ee4:	003fee06 	br	83ea0 <_gp+0xfffe9aac>
   83ee8:	d9012c17 	ldw	r4,1200(sp)
   83eec:	980b883a 	mov	r5,r19
   83ef0:	d9811e04 	addi	r6,sp,1144
   83ef4:	0089c000 	call	89c00 <__sprint_r>
   83ef8:	103b831e 	bne	r2,zero,82d08 <_gp+0xfffe8914>
   83efc:	d8c12017 	ldw	r3,1152(sp)
   83f00:	dc811f17 	ldw	r18,1148(sp)
   83f04:	da000404 	addi	r8,sp,16
   83f08:	003eaa06 	br	839b4 <_gp+0xfffe95c0>
   83f0c:	d9012c17 	ldw	r4,1200(sp)
   83f10:	980b883a 	mov	r5,r19
   83f14:	d9811e04 	addi	r6,sp,1144
   83f18:	0089c000 	call	89c00 <__sprint_r>
   83f1c:	103b7a1e 	bne	r2,zero,82d08 <_gp+0xfffe8914>
   83f20:	dd812017 	ldw	r22,1152(sp)
   83f24:	dc811f17 	ldw	r18,1148(sp)
   83f28:	dd000404 	addi	r20,sp,16
   83f2c:	003eac06 	br	839e0 <_gp+0xfffe95ec>
   83f30:	8821883a 	mov	r16,r17
   83f34:	dc412e17 	ldw	r17,1208(sp)
   83f38:	b42d883a 	add	r22,r22,r16
   83f3c:	94800044 	addi	r18,r18,1
   83f40:	a5400015 	stw	r21,0(r20)
   83f44:	a4000115 	stw	r16,4(r20)
   83f48:	dd812015 	stw	r22,1152(sp)
   83f4c:	dc811f15 	stw	r18,1148(sp)
   83f50:	008001c4 	movi	r2,7
   83f54:	14beb30e 	bge	r2,r18,83a24 <_gp+0xfffe9630>
   83f58:	003ecb06 	br	83a88 <_gp+0xfffe9694>
   83f5c:	d9012c17 	ldw	r4,1200(sp)
   83f60:	980b883a 	mov	r5,r19
   83f64:	d9811e04 	addi	r6,sp,1144
   83f68:	0089c000 	call	89c00 <__sprint_r>
   83f6c:	103b661e 	bne	r2,zero,82d08 <_gp+0xfffe8914>
   83f70:	d8c12017 	ldw	r3,1152(sp)
   83f74:	da000404 	addi	r8,sp,16
   83f78:	003c1806 	br	82fdc <_gp+0xfffe8be8>
   83f7c:	056bc83a 	sub	r21,zero,r21
   83f80:	a804c03a 	cmpne	r2,r21,zero
   83f84:	05adc83a 	sub	r22,zero,r22
   83f88:	07000b44 	movi	fp,45
   83f8c:	b0adc83a 	sub	r22,r22,r2
   83f90:	df012785 	stb	fp,1182(sp)
   83f94:	00c00044 	movi	r3,1
   83f98:	ad84b03a 	or	r2,r21,r22
   83f9c:	003b9106 	br	82de4 <_gp+0xfffe89f0>
   83fa0:	da013f15 	stw	r8,1276(sp)
   83fa4:	00898580 	call	89858 <__fpclassifyd>
   83fa8:	da013f17 	ldw	r8,1276(sp)
   83fac:	1000f226 	beq	r2,zero,84378 <___vfprintf_internal_r+0x1ae0>
   83fb0:	05bff7c4 	movi	r22,-33
   83fb4:	00bfffc4 	movi	r2,-1
   83fb8:	95ac703a 	and	r22,r18,r22
   83fbc:	a0820b26 	beq	r20,r2,847ec <___vfprintf_internal_r+0x1f54>
   83fc0:	008011c4 	movi	r2,71
   83fc4:	b081fc26 	beq	r22,r2,847b8 <___vfprintf_internal_r+0x1f20>
   83fc8:	d8c12a17 	ldw	r3,1192(sp)
   83fcc:	d9013917 	ldw	r4,1252(sp)
   83fd0:	18c04014 	ori	r3,r3,256
   83fd4:	d8c12d15 	stw	r3,1204(sp)
   83fd8:	20020616 	blt	r4,zero,847f4 <___vfprintf_internal_r+0x1f5c>
   83fdc:	dd413917 	ldw	r21,1252(sp)
   83fe0:	d8012b05 	stb	zero,1196(sp)
   83fe4:	00801984 	movi	r2,102
   83fe8:	9081a526 	beq	r18,r2,84680 <___vfprintf_internal_r+0x1de8>
   83fec:	00801184 	movi	r2,70
   83ff0:	9081a326 	beq	r18,r2,84680 <___vfprintf_internal_r+0x1de8>
   83ff4:	00801144 	movi	r2,69
   83ff8:	b0820226 	beq	r22,r2,84804 <___vfprintf_internal_r+0x1f6c>
   83ffc:	a039883a 	mov	fp,r20
   84000:	d8812604 	addi	r2,sp,1176
   84004:	d8800115 	stw	r2,4(sp)
   84008:	d9012c17 	ldw	r4,1200(sp)
   8400c:	d8812504 	addi	r2,sp,1172
   84010:	d9413717 	ldw	r5,1244(sp)
   84014:	d8800215 	stw	r2,8(sp)
   84018:	d8812104 	addi	r2,sp,1156
   8401c:	df000015 	stw	fp,0(sp)
   84020:	d8800315 	stw	r2,12(sp)
   84024:	a80d883a 	mov	r6,r21
   84028:	01c00084 	movi	r7,2
   8402c:	da013f15 	stw	r8,1276(sp)
   84030:	0084d700 	call	84d70 <_dtoa_r>
   84034:	1021883a 	mov	r16,r2
   84038:	008019c4 	movi	r2,103
   8403c:	da013f17 	ldw	r8,1276(sp)
   84040:	90800226 	beq	r18,r2,8404c <___vfprintf_internal_r+0x17b4>
   84044:	008011c4 	movi	r2,71
   84048:	9080031e 	bne	r18,r2,84058 <___vfprintf_internal_r+0x17c0>
   8404c:	d9012a17 	ldw	r4,1192(sp)
   84050:	2080004c 	andi	r2,r4,1
   84054:	1001fe26 	beq	r2,zero,84850 <___vfprintf_internal_r+0x1fb8>
   84058:	00801184 	movi	r2,70
   8405c:	8713883a 	add	r9,r16,fp
   84060:	b0819f26 	beq	r22,r2,846e0 <___vfprintf_internal_r+0x1e48>
   84064:	d9013717 	ldw	r4,1244(sp)
   84068:	a80b883a 	mov	r5,r21
   8406c:	000d883a 	mov	r6,zero
   84070:	000f883a 	mov	r7,zero
   84074:	da013f15 	stw	r8,1276(sp)
   84078:	da413e15 	stw	r9,1272(sp)
   8407c:	008cfa80 	call	8cfa8 <__eqdf2>
   84080:	da013f17 	ldw	r8,1276(sp)
   84084:	da413e17 	ldw	r9,1272(sp)
   84088:	10017b26 	beq	r2,zero,84678 <___vfprintf_internal_r+0x1de0>
   8408c:	d8812117 	ldw	r2,1156(sp)
   84090:	1240062e 	bgeu	r2,r9,840ac <___vfprintf_internal_r+0x1814>
   84094:	01000c04 	movi	r4,48
   84098:	10c00044 	addi	r3,r2,1
   8409c:	d8c12115 	stw	r3,1156(sp)
   840a0:	11000005 	stb	r4,0(r2)
   840a4:	d8812117 	ldw	r2,1156(sp)
   840a8:	127ffb36 	bltu	r2,r9,84098 <_gp+0xfffe9ca4>
   840ac:	1405c83a 	sub	r2,r2,r16
   840b0:	d8813515 	stw	r2,1236(sp)
   840b4:	008011c4 	movi	r2,71
   840b8:	b0816926 	beq	r22,r2,84660 <___vfprintf_internal_r+0x1dc8>
   840bc:	00801944 	movi	r2,101
   840c0:	14823f0e 	bge	r2,r18,849c0 <___vfprintf_internal_r+0x2128>
   840c4:	d8c12617 	ldw	r3,1176(sp)
   840c8:	00801984 	movi	r2,102
   840cc:	d8c13315 	stw	r3,1228(sp)
   840d0:	9081e126 	beq	r18,r2,84858 <___vfprintf_internal_r+0x1fc0>
   840d4:	d8c13317 	ldw	r3,1228(sp)
   840d8:	d9013517 	ldw	r4,1236(sp)
   840dc:	1901cb16 	blt	r3,r4,8480c <___vfprintf_internal_r+0x1f74>
   840e0:	d9412a17 	ldw	r5,1192(sp)
   840e4:	2880004c 	andi	r2,r5,1
   840e8:	1001d11e 	bne	r2,zero,84830 <___vfprintf_internal_r+0x1f98>
   840ec:	1805883a 	mov	r2,r3
   840f0:	18023116 	blt	r3,zero,849b8 <___vfprintf_internal_r+0x2120>
   840f4:	d8c13317 	ldw	r3,1228(sp)
   840f8:	048019c4 	movi	r18,103
   840fc:	d8c12e15 	stw	r3,1208(sp)
   84100:	df012b07 	ldb	fp,1196(sp)
   84104:	e0014e1e 	bne	fp,zero,84640 <___vfprintf_internal_r+0x1da8>
   84108:	d8c12d17 	ldw	r3,1204(sp)
   8410c:	df012783 	ldbu	fp,1182(sp)
   84110:	d8812b15 	stw	r2,1196(sp)
   84114:	d8c12a15 	stw	r3,1192(sp)
   84118:	0029883a 	mov	r20,zero
   8411c:	003b4706 	br	82e3c <_gp+0xfffe8a48>
   84120:	d8c12f17 	ldw	r3,1212(sp)
   84124:	d9012f17 	ldw	r4,1212(sp)
   84128:	d9412f17 	ldw	r5,1212(sp)
   8412c:	18c00017 	ldw	r3,0(r3)
   84130:	21000117 	ldw	r4,4(r4)
   84134:	29400204 	addi	r5,r5,8
   84138:	d8c13715 	stw	r3,1244(sp)
   8413c:	d9013915 	stw	r4,1252(sp)
   84140:	d9412f15 	stw	r5,1212(sp)
   84144:	003c3606 	br	83220 <_gp+0xfffe8e2c>
   84148:	d9412a17 	ldw	r5,1192(sp)
   8414c:	2880100c 	andi	r2,r5,64
   84150:	1000b026 	beq	r2,zero,84414 <___vfprintf_internal_r+0x1b7c>
   84154:	d8812f17 	ldw	r2,1212(sp)
   84158:	002d883a 	mov	r22,zero
   8415c:	00c00044 	movi	r3,1
   84160:	1540000b 	ldhu	r21,0(r2)
   84164:	10800104 	addi	r2,r2,4
   84168:	d8812f15 	stw	r2,1212(sp)
   8416c:	a805883a 	mov	r2,r21
   84170:	003c6e06 	br	8332c <_gp+0xfffe8f38>
   84174:	00c00084 	movi	r3,2
   84178:	003c6c06 	br	8332c <_gp+0xfffe8f38>
   8417c:	d9412a17 	ldw	r5,1192(sp)
   84180:	2880100c 	andi	r2,r5,64
   84184:	10009b26 	beq	r2,zero,843f4 <___vfprintf_internal_r+0x1b5c>
   84188:	d8812f17 	ldw	r2,1212(sp)
   8418c:	002d883a 	mov	r22,zero
   84190:	0007883a 	mov	r3,zero
   84194:	1540000b 	ldhu	r21,0(r2)
   84198:	10800104 	addi	r2,r2,4
   8419c:	d8812f15 	stw	r2,1212(sp)
   841a0:	a805883a 	mov	r2,r21
   841a4:	003c6106 	br	8332c <_gp+0xfffe8f38>
   841a8:	8c800007 	ldb	r18,0(r17)
   841ac:	003a1f06 	br	82a2c <_gp+0xfffe8638>
   841b0:	d9412a17 	ldw	r5,1192(sp)
   841b4:	2880100c 	andi	r2,r5,64
   841b8:	10009e26 	beq	r2,zero,84434 <___vfprintf_internal_r+0x1b9c>
   841bc:	d8812f17 	ldw	r2,1212(sp)
   841c0:	002d883a 	mov	r22,zero
   841c4:	1540000b 	ldhu	r21,0(r2)
   841c8:	10800104 	addi	r2,r2,4
   841cc:	d8812f15 	stw	r2,1212(sp)
   841d0:	003c9506 	br	83428 <_gp+0xfffe9034>
   841d4:	d9412a17 	ldw	r5,1192(sp)
   841d8:	2880040c 	andi	r2,r5,16
   841dc:	10007e1e 	bne	r2,zero,843d8 <___vfprintf_internal_r+0x1b40>
   841e0:	d9412a17 	ldw	r5,1192(sp)
   841e4:	2880100c 	andi	r2,r5,64
   841e8:	10010826 	beq	r2,zero,8460c <___vfprintf_internal_r+0x1d74>
   841ec:	d8c12f17 	ldw	r3,1212(sp)
   841f0:	d9013117 	ldw	r4,1220(sp)
   841f4:	18800017 	ldw	r2,0(r3)
   841f8:	18c00104 	addi	r3,r3,4
   841fc:	d8c12f15 	stw	r3,1212(sp)
   84200:	1100000d 	sth	r4,0(r2)
   84204:	0039e206 	br	82990 <_gp+0xfffe859c>
   84208:	d8c12a17 	ldw	r3,1192(sp)
   8420c:	1880100c 	andi	r2,r3,64
   84210:	10006a26 	beq	r2,zero,843bc <___vfprintf_internal_r+0x1b24>
   84214:	d9012f17 	ldw	r4,1212(sp)
   84218:	2540000f 	ldh	r21,0(r4)
   8421c:	21000104 	addi	r4,r4,4
   84220:	d9012f15 	stw	r4,1212(sp)
   84224:	a82dd7fa 	srai	r22,r21,31
   84228:	b005883a 	mov	r2,r22
   8422c:	003ae906 	br	82dd4 <_gp+0xfffe89e0>
   84230:	dc012e17 	ldw	r16,1208(sp)
   84234:	a009883a 	mov	r4,r20
   84238:	8829883a 	mov	r20,r17
   8423c:	2023883a 	mov	r17,r4
   84240:	1d07883a 	add	r3,r3,r20
   84244:	10800044 	addi	r2,r2,1
   84248:	45400015 	stw	r21,0(r8)
   8424c:	45000115 	stw	r20,4(r8)
   84250:	d8c12015 	stw	r3,1152(sp)
   84254:	d8811f15 	stw	r2,1148(sp)
   84258:	010001c4 	movi	r4,7
   8425c:	20bed716 	blt	r4,r2,83dbc <_gp+0xfffe99c8>
   84260:	42000204 	addi	r8,r8,8
   84264:	003edc06 	br	83dd8 <_gp+0xfffe99e4>
   84268:	d9012c17 	ldw	r4,1200(sp)
   8426c:	980b883a 	mov	r5,r19
   84270:	d9811e04 	addi	r6,sp,1144
   84274:	0089c000 	call	89c00 <__sprint_r>
   84278:	103aa31e 	bne	r2,zero,82d08 <_gp+0xfffe8914>
   8427c:	d8c12017 	ldw	r3,1152(sp)
   84280:	da000404 	addi	r8,sp,16
   84284:	003d5606 	br	837e0 <_gp+0xfffe93ec>
   84288:	d9011f17 	ldw	r4,1148(sp)
   8428c:	01400274 	movhi	r5,9
   84290:	2941e804 	addi	r5,r5,1952
   84294:	18c00044 	addi	r3,r3,1
   84298:	21000044 	addi	r4,r4,1
   8429c:	41400015 	stw	r5,0(r8)
   842a0:	01400044 	movi	r5,1
   842a4:	41400115 	stw	r5,4(r8)
   842a8:	d8c12015 	stw	r3,1152(sp)
   842ac:	d9011f15 	stw	r4,1148(sp)
   842b0:	014001c4 	movi	r5,7
   842b4:	29006a16 	blt	r5,r4,84460 <___vfprintf_internal_r+0x1bc8>
   842b8:	42000204 	addi	r8,r8,8
   842bc:	1025883a 	mov	r18,r2
   842c0:	9000051e 	bne	r18,zero,842d8 <___vfprintf_internal_r+0x1a40>
   842c4:	d8813517 	ldw	r2,1236(sp)
   842c8:	1000031e 	bne	r2,zero,842d8 <___vfprintf_internal_r+0x1a40>
   842cc:	d9012a17 	ldw	r4,1192(sp)
   842d0:	2080004c 	andi	r2,r4,1
   842d4:	103b8026 	beq	r2,zero,830d8 <_gp+0xfffe8ce4>
   842d8:	d8813417 	ldw	r2,1232(sp)
   842dc:	d9413817 	ldw	r5,1248(sp)
   842e0:	010001c4 	movi	r4,7
   842e4:	40800015 	stw	r2,0(r8)
   842e8:	d8811f17 	ldw	r2,1148(sp)
   842ec:	1947883a 	add	r3,r3,r5
   842f0:	41400115 	stw	r5,4(r8)
   842f4:	10800044 	addi	r2,r2,1
   842f8:	d8c12015 	stw	r3,1152(sp)
   842fc:	d8811f15 	stw	r2,1148(sp)
   84300:	20813016 	blt	r4,r2,847c4 <___vfprintf_internal_r+0x1f2c>
   84304:	42000204 	addi	r8,r8,8
   84308:	04a5c83a 	sub	r18,zero,r18
   8430c:	04807a0e 	bge	zero,r18,844f8 <___vfprintf_internal_r+0x1c60>
   84310:	05000404 	movi	r20,16
   84314:	05400274 	movhi	r21,9
   84318:	ad41e884 	addi	r21,r21,1954
   8431c:	a480920e 	bge	r20,r18,84568 <___vfprintf_internal_r+0x1cd0>
   84320:	058001c4 	movi	r22,7
   84324:	df012c17 	ldw	fp,1200(sp)
   84328:	00000306 	br	84338 <___vfprintf_internal_r+0x1aa0>
   8432c:	42000204 	addi	r8,r8,8
   84330:	94bffc04 	addi	r18,r18,-16
   84334:	a4808c0e 	bge	r20,r18,84568 <___vfprintf_internal_r+0x1cd0>
   84338:	18c00404 	addi	r3,r3,16
   8433c:	10800044 	addi	r2,r2,1
   84340:	45c00015 	stw	r23,0(r8)
   84344:	45000115 	stw	r20,4(r8)
   84348:	d8c12015 	stw	r3,1152(sp)
   8434c:	d8811f15 	stw	r2,1148(sp)
   84350:	b0bff60e 	bge	r22,r2,8432c <_gp+0xfffe9f38>
   84354:	e009883a 	mov	r4,fp
   84358:	980b883a 	mov	r5,r19
   8435c:	d9811e04 	addi	r6,sp,1144
   84360:	0089c000 	call	89c00 <__sprint_r>
   84364:	103a681e 	bne	r2,zero,82d08 <_gp+0xfffe8914>
   84368:	d8c12017 	ldw	r3,1152(sp)
   8436c:	d8811f17 	ldw	r2,1148(sp)
   84370:	da000404 	addi	r8,sp,16
   84374:	003fee06 	br	84330 <_gp+0xfffe9f3c>
   84378:	008011c4 	movi	r2,71
   8437c:	1480ad16 	blt	r2,r18,84634 <___vfprintf_internal_r+0x1d9c>
   84380:	04000274 	movhi	r16,9
   84384:	8401da04 	addi	r16,r16,1896
   84388:	d9012a17 	ldw	r4,1192(sp)
   8438c:	00bfdfc4 	movi	r2,-129
   84390:	00c000c4 	movi	r3,3
   84394:	2088703a 	and	r4,r4,r2
   84398:	d8c12b15 	stw	r3,1196(sp)
   8439c:	d9012a15 	stw	r4,1192(sp)
   843a0:	df012783 	ldbu	fp,1182(sp)
   843a4:	d8c12e15 	stw	r3,1208(sp)
   843a8:	0029883a 	mov	r20,zero
   843ac:	d8013315 	stw	zero,1228(sp)
   843b0:	003aa206 	br	82e3c <_gp+0xfffe8a48>
   843b4:	dd012e15 	stw	r20,1208(sp)
   843b8:	003c8206 	br	835c4 <_gp+0xfffe91d0>
   843bc:	d9412f17 	ldw	r5,1212(sp)
   843c0:	2d400017 	ldw	r21,0(r5)
   843c4:	29400104 	addi	r5,r5,4
   843c8:	d9412f15 	stw	r5,1212(sp)
   843cc:	a82dd7fa 	srai	r22,r21,31
   843d0:	b005883a 	mov	r2,r22
   843d4:	003a7f06 	br	82dd4 <_gp+0xfffe89e0>
   843d8:	d8c12f17 	ldw	r3,1212(sp)
   843dc:	d9013117 	ldw	r4,1220(sp)
   843e0:	18800017 	ldw	r2,0(r3)
   843e4:	18c00104 	addi	r3,r3,4
   843e8:	d8c12f15 	stw	r3,1212(sp)
   843ec:	11000015 	stw	r4,0(r2)
   843f0:	00396706 	br	82990 <_gp+0xfffe859c>
   843f4:	d8c12f17 	ldw	r3,1212(sp)
   843f8:	002d883a 	mov	r22,zero
   843fc:	1d400017 	ldw	r21,0(r3)
   84400:	18c00104 	addi	r3,r3,4
   84404:	d8c12f15 	stw	r3,1212(sp)
   84408:	a805883a 	mov	r2,r21
   8440c:	0007883a 	mov	r3,zero
   84410:	003bc606 	br	8332c <_gp+0xfffe8f38>
   84414:	d8c12f17 	ldw	r3,1212(sp)
   84418:	002d883a 	mov	r22,zero
   8441c:	1d400017 	ldw	r21,0(r3)
   84420:	18c00104 	addi	r3,r3,4
   84424:	d8c12f15 	stw	r3,1212(sp)
   84428:	a805883a 	mov	r2,r21
   8442c:	00c00044 	movi	r3,1
   84430:	003bbe06 	br	8332c <_gp+0xfffe8f38>
   84434:	d8c12f17 	ldw	r3,1212(sp)
   84438:	002d883a 	mov	r22,zero
   8443c:	1d400017 	ldw	r21,0(r3)
   84440:	18c00104 	addi	r3,r3,4
   84444:	d8c12f15 	stw	r3,1212(sp)
   84448:	003bf706 	br	83428 <_gp+0xfffe9034>
   8444c:	04000274 	movhi	r16,9
   84450:	8401d804 	addi	r16,r16,1888
   84454:	003b8506 	br	8326c <_gp+0xfffe8e78>
   84458:	45000204 	addi	r20,r8,8
   8445c:	003d7206 	br	83a28 <_gp+0xfffe9634>
   84460:	d9012c17 	ldw	r4,1200(sp)
   84464:	980b883a 	mov	r5,r19
   84468:	d9811e04 	addi	r6,sp,1144
   8446c:	0089c000 	call	89c00 <__sprint_r>
   84470:	103a251e 	bne	r2,zero,82d08 <_gp+0xfffe8914>
   84474:	dc812617 	ldw	r18,1176(sp)
   84478:	d8c12017 	ldw	r3,1152(sp)
   8447c:	da000404 	addi	r8,sp,16
   84480:	003f8f06 	br	842c0 <_gp+0xfffe9ecc>
   84484:	d9012a17 	ldw	r4,1192(sp)
   84488:	8c400044 	addi	r17,r17,1
   8448c:	14800047 	ldb	r18,1(r2)
   84490:	21000814 	ori	r4,r4,32
   84494:	d9012a15 	stw	r4,1192(sp)
   84498:	00396406 	br	82a2c <_gp+0xfffe8638>
   8449c:	d9012c17 	ldw	r4,1200(sp)
   844a0:	980b883a 	mov	r5,r19
   844a4:	d9811e04 	addi	r6,sp,1144
   844a8:	0089c000 	call	89c00 <__sprint_r>
   844ac:	103a161e 	bne	r2,zero,82d08 <_gp+0xfffe8914>
   844b0:	d8c12017 	ldw	r3,1152(sp)
   844b4:	da000404 	addi	r8,sp,16
   844b8:	003cdc06 	br	8382c <_gp+0xfffe9438>
   844bc:	df013f15 	stw	fp,1276(sp)
   844c0:	008280c0 	call	8280c <strlen>
   844c4:	d8812e15 	stw	r2,1208(sp)
   844c8:	da013f17 	ldw	r8,1276(sp)
   844cc:	103c3f0e 	bge	r2,zero,835cc <_gp+0xfffe91d8>
   844d0:	0005883a 	mov	r2,zero
   844d4:	003c3d06 	br	835cc <_gp+0xfffe91d8>
   844d8:	d9012c17 	ldw	r4,1200(sp)
   844dc:	980b883a 	mov	r5,r19
   844e0:	d9811e04 	addi	r6,sp,1144
   844e4:	0089c000 	call	89c00 <__sprint_r>
   844e8:	103a071e 	bne	r2,zero,82d08 <_gp+0xfffe8914>
   844ec:	d8c12017 	ldw	r3,1152(sp)
   844f0:	d8811f17 	ldw	r2,1148(sp)
   844f4:	da000404 	addi	r8,sp,16
   844f8:	d9013517 	ldw	r4,1236(sp)
   844fc:	10800044 	addi	r2,r2,1
   84500:	44000015 	stw	r16,0(r8)
   84504:	20c7883a 	add	r3,r4,r3
   84508:	003aed06 	br	830c0 <_gp+0xfffe8ccc>
   8450c:	01000274 	movhi	r4,9
   84510:	2101ec84 	addi	r4,r4,1970
   84514:	d9013615 	stw	r4,1240(sp)
   84518:	003a8706 	br	82f38 <_gp+0xfffe8b44>
   8451c:	0029883a 	mov	r20,zero
   84520:	003dd706 	br	83c80 <_gp+0xfffe988c>
   84524:	d9012c17 	ldw	r4,1200(sp)
   84528:	980b883a 	mov	r5,r19
   8452c:	d9811e04 	addi	r6,sp,1144
   84530:	0089c000 	call	89c00 <__sprint_r>
   84534:	1039f41e 	bne	r2,zero,82d08 <_gp+0xfffe8914>
   84538:	d8c12017 	ldw	r3,1152(sp)
   8453c:	da000404 	addi	r8,sp,16
   84540:	003dce06 	br	83c7c <_gp+0xfffe9888>
   84544:	d9012c17 	ldw	r4,1200(sp)
   84548:	980b883a 	mov	r5,r19
   8454c:	d9811e04 	addi	r6,sp,1144
   84550:	0089c000 	call	89c00 <__sprint_r>
   84554:	1039ec1e 	bne	r2,zero,82d08 <_gp+0xfffe8914>
   84558:	d8812617 	ldw	r2,1176(sp)
   8455c:	d8c12017 	ldw	r3,1152(sp)
   84560:	da000404 	addi	r8,sp,16
   84564:	003e3106 	br	83e2c <_gp+0xfffe9a38>
   84568:	1c87883a 	add	r3,r3,r18
   8456c:	10800044 	addi	r2,r2,1
   84570:	45400015 	stw	r21,0(r8)
   84574:	44800115 	stw	r18,4(r8)
   84578:	d8c12015 	stw	r3,1152(sp)
   8457c:	d8811f15 	stw	r2,1148(sp)
   84580:	010001c4 	movi	r4,7
   84584:	20bfd416 	blt	r4,r2,844d8 <_gp+0xfffea0e4>
   84588:	42000204 	addi	r8,r8,8
   8458c:	003fda06 	br	844f8 <_gp+0xfffea104>
   84590:	01400274 	movhi	r5,9
   84594:	2941ec84 	addi	r5,r5,1970
   84598:	d9413615 	stw	r5,1240(sp)
   8459c:	003af406 	br	83170 <_gp+0xfffe8d7c>
   845a0:	00800184 	movi	r2,6
   845a4:	1500012e 	bgeu	r2,r20,845ac <___vfprintf_internal_r+0x1d14>
   845a8:	1029883a 	mov	r20,r2
   845ac:	dd012e15 	stw	r20,1208(sp)
   845b0:	a005883a 	mov	r2,r20
   845b4:	a000d216 	blt	r20,zero,84900 <___vfprintf_internal_r+0x2068>
   845b8:	d8812b15 	stw	r2,1196(sp)
   845bc:	dd412f15 	stw	r21,1212(sp)
   845c0:	0029883a 	mov	r20,zero
   845c4:	d8013315 	stw	zero,1228(sp)
   845c8:	04000274 	movhi	r16,9
   845cc:	8401e604 	addi	r16,r16,1944
   845d0:	0005883a 	mov	r2,zero
   845d4:	003a2006 	br	82e58 <_gp+0xfffe8a64>
   845d8:	0029883a 	mov	r20,zero
   845dc:	003e2506 	br	83e74 <_gp+0xfffe9a80>
   845e0:	d9012c17 	ldw	r4,1200(sp)
   845e4:	980b883a 	mov	r5,r19
   845e8:	d9811e04 	addi	r6,sp,1144
   845ec:	0089c000 	call	89c00 <__sprint_r>
   845f0:	1039c51e 	bne	r2,zero,82d08 <_gp+0xfffe8914>
   845f4:	d8812617 	ldw	r2,1176(sp)
   845f8:	d9413517 	ldw	r5,1236(sp)
   845fc:	d8c12017 	ldw	r3,1152(sp)
   84600:	da000404 	addi	r8,sp,16
   84604:	2885c83a 	sub	r2,r5,r2
   84608:	003e1906 	br	83e70 <_gp+0xfffe9a7c>
   8460c:	d9412f17 	ldw	r5,1212(sp)
   84610:	d8c13117 	ldw	r3,1220(sp)
   84614:	28800017 	ldw	r2,0(r5)
   84618:	29400104 	addi	r5,r5,4
   8461c:	d9412f15 	stw	r5,1212(sp)
   84620:	10c00015 	stw	r3,0(r2)
   84624:	0038da06 	br	82990 <_gp+0xfffe859c>
   84628:	07000b44 	movi	fp,45
   8462c:	df012785 	stb	fp,1182(sp)
   84630:	003b0a06 	br	8325c <_gp+0xfffe8e68>
   84634:	04000274 	movhi	r16,9
   84638:	8401db04 	addi	r16,r16,1900
   8463c:	003f5206 	br	84388 <_gp+0xfffe9f94>
   84640:	00c00b44 	movi	r3,45
   84644:	d8c12785 	stb	r3,1182(sp)
   84648:	d8c12d17 	ldw	r3,1204(sp)
   8464c:	d8812b15 	stw	r2,1196(sp)
   84650:	0029883a 	mov	r20,zero
   84654:	d8c12a15 	stw	r3,1192(sp)
   84658:	00800b44 	movi	r2,45
   8465c:	0039fb06 	br	82e4c <_gp+0xfffe8a58>
   84660:	d8812617 	ldw	r2,1176(sp)
   84664:	00ffff44 	movi	r3,-3
   84668:	10c03216 	blt	r2,r3,84734 <___vfprintf_internal_r+0x1e9c>
   8466c:	a0803116 	blt	r20,r2,84734 <___vfprintf_internal_r+0x1e9c>
   84670:	d8813315 	stw	r2,1228(sp)
   84674:	003e9706 	br	840d4 <_gp+0xfffe9ce0>
   84678:	4805883a 	mov	r2,r9
   8467c:	003e8b06 	br	840ac <_gp+0xfffe9cb8>
   84680:	d8812604 	addi	r2,sp,1176
   84684:	d8800115 	stw	r2,4(sp)
   84688:	d9012c17 	ldw	r4,1200(sp)
   8468c:	d8812504 	addi	r2,sp,1172
   84690:	d9413717 	ldw	r5,1244(sp)
   84694:	d8800215 	stw	r2,8(sp)
   84698:	d8812104 	addi	r2,sp,1156
   8469c:	dd000015 	stw	r20,0(sp)
   846a0:	d8800315 	stw	r2,12(sp)
   846a4:	a80d883a 	mov	r6,r21
   846a8:	01c000c4 	movi	r7,3
   846ac:	da013f15 	stw	r8,1276(sp)
   846b0:	0084d700 	call	84d70 <_dtoa_r>
   846b4:	1021883a 	mov	r16,r2
   846b8:	a039883a 	mov	fp,r20
   846bc:	da013f17 	ldw	r8,1276(sp)
   846c0:	003e6506 	br	84058 <_gp+0xfffe9c64>
   846c4:	dd012b15 	stw	r20,1196(sp)
   846c8:	dd012e15 	stw	r20,1208(sp)
   846cc:	df012783 	ldbu	fp,1182(sp)
   846d0:	dd412f15 	stw	r21,1212(sp)
   846d4:	0029883a 	mov	r20,zero
   846d8:	d8013315 	stw	zero,1228(sp)
   846dc:	0039d706 	br	82e3c <_gp+0xfffe8a48>
   846e0:	81000007 	ldb	r4,0(r16)
   846e4:	00800c04 	movi	r2,48
   846e8:	20800326 	beq	r4,r2,846f8 <___vfprintf_internal_r+0x1e60>
   846ec:	d8c12617 	ldw	r3,1176(sp)
   846f0:	48d3883a 	add	r9,r9,r3
   846f4:	003e5b06 	br	84064 <_gp+0xfffe9c70>
   846f8:	d9013717 	ldw	r4,1244(sp)
   846fc:	a80b883a 	mov	r5,r21
   84700:	000d883a 	mov	r6,zero
   84704:	000f883a 	mov	r7,zero
   84708:	da013f15 	stw	r8,1276(sp)
   8470c:	da413e15 	stw	r9,1272(sp)
   84710:	008cfa80 	call	8cfa8 <__eqdf2>
   84714:	da013f17 	ldw	r8,1276(sp)
   84718:	da413e17 	ldw	r9,1272(sp)
   8471c:	103ff326 	beq	r2,zero,846ec <_gp+0xfffea2f8>
   84720:	00800044 	movi	r2,1
   84724:	1707c83a 	sub	r3,r2,fp
   84728:	d8c12615 	stw	r3,1176(sp)
   8472c:	48d3883a 	add	r9,r9,r3
   84730:	003e4c06 	br	84064 <_gp+0xfffe9c70>
   84734:	94bfff84 	addi	r18,r18,-2
   84738:	157fffc4 	addi	r21,r2,-1
   8473c:	dd412615 	stw	r21,1176(sp)
   84740:	dc8122c5 	stb	r18,1163(sp)
   84744:	a8009016 	blt	r21,zero,84988 <___vfprintf_internal_r+0x20f0>
   84748:	00800ac4 	movi	r2,43
   8474c:	d8812305 	stb	r2,1164(sp)
   84750:	05000244 	movi	r20,9
   84754:	a5404a16 	blt	r20,r21,84880 <___vfprintf_internal_r+0x1fe8>
   84758:	00800c04 	movi	r2,48
   8475c:	ad400c04 	addi	r21,r21,48
   84760:	d8812345 	stb	r2,1165(sp)
   84764:	dd412385 	stb	r21,1166(sp)
   84768:	d8c123c4 	addi	r3,sp,1167
   8476c:	d88122c4 	addi	r2,sp,1163
   84770:	1885c83a 	sub	r2,r3,r2
   84774:	d8c13517 	ldw	r3,1236(sp)
   84778:	d9013517 	ldw	r4,1236(sp)
   8477c:	d8813a15 	stw	r2,1256(sp)
   84780:	1887883a 	add	r3,r3,r2
   84784:	d8c12e15 	stw	r3,1208(sp)
   84788:	00800044 	movi	r2,1
   8478c:	11007a0e 	bge	r2,r4,84978 <___vfprintf_internal_r+0x20e0>
   84790:	d8c12e17 	ldw	r3,1208(sp)
   84794:	18c00044 	addi	r3,r3,1
   84798:	d8c12e15 	stw	r3,1208(sp)
   8479c:	1805883a 	mov	r2,r3
   847a0:	18000216 	blt	r3,zero,847ac <___vfprintf_internal_r+0x1f14>
   847a4:	d8013315 	stw	zero,1228(sp)
   847a8:	003e5506 	br	84100 <_gp+0xfffe9d0c>
   847ac:	0005883a 	mov	r2,zero
   847b0:	d8013315 	stw	zero,1228(sp)
   847b4:	003e5206 	br	84100 <_gp+0xfffe9d0c>
   847b8:	a03e031e 	bne	r20,zero,83fc8 <_gp+0xfffe9bd4>
   847bc:	8029883a 	mov	r20,r16
   847c0:	003e0106 	br	83fc8 <_gp+0xfffe9bd4>
   847c4:	d9012c17 	ldw	r4,1200(sp)
   847c8:	980b883a 	mov	r5,r19
   847cc:	d9811e04 	addi	r6,sp,1144
   847d0:	0089c000 	call	89c00 <__sprint_r>
   847d4:	10394c1e 	bne	r2,zero,82d08 <_gp+0xfffe8914>
   847d8:	dc812617 	ldw	r18,1176(sp)
   847dc:	d8c12017 	ldw	r3,1152(sp)
   847e0:	d8811f17 	ldw	r2,1148(sp)
   847e4:	da000404 	addi	r8,sp,16
   847e8:	003ec706 	br	84308 <_gp+0xfffe9f14>
   847ec:	05000184 	movi	r20,6
   847f0:	003df506 	br	83fc8 <_gp+0xfffe9bd4>
   847f4:	00c00b44 	movi	r3,45
   847f8:	2560003c 	xorhi	r21,r4,32768
   847fc:	d8c12b05 	stb	r3,1196(sp)
   84800:	003df806 	br	83fe4 <_gp+0xfffe9bf0>
   84804:	a7000044 	addi	fp,r20,1
   84808:	003dfd06 	br	84000 <_gp+0xfffe9c0c>
   8480c:	d8c13317 	ldw	r3,1228(sp)
   84810:	00c0610e 	bge	zero,r3,84998 <___vfprintf_internal_r+0x2100>
   84814:	00800044 	movi	r2,1
   84818:	d9013517 	ldw	r4,1236(sp)
   8481c:	1105883a 	add	r2,r2,r4
   84820:	d8812e15 	stw	r2,1208(sp)
   84824:	10000716 	blt	r2,zero,84844 <___vfprintf_internal_r+0x1fac>
   84828:	048019c4 	movi	r18,103
   8482c:	003e3406 	br	84100 <_gp+0xfffe9d0c>
   84830:	d8c13317 	ldw	r3,1228(sp)
   84834:	18c00044 	addi	r3,r3,1
   84838:	d8c12e15 	stw	r3,1208(sp)
   8483c:	1805883a 	mov	r2,r3
   84840:	183ff90e 	bge	r3,zero,84828 <_gp+0xfffea434>
   84844:	0005883a 	mov	r2,zero
   84848:	048019c4 	movi	r18,103
   8484c:	003e2c06 	br	84100 <_gp+0xfffe9d0c>
   84850:	d8812117 	ldw	r2,1156(sp)
   84854:	003e1506 	br	840ac <_gp+0xfffe9cb8>
   84858:	00c0400e 	bge	zero,r3,8495c <___vfprintf_internal_r+0x20c4>
   8485c:	a0002a1e 	bne	r20,zero,84908 <___vfprintf_internal_r+0x2070>
   84860:	d9012a17 	ldw	r4,1192(sp)
   84864:	2080004c 	andi	r2,r4,1
   84868:	1000271e 	bne	r2,zero,84908 <___vfprintf_internal_r+0x2070>
   8486c:	1805883a 	mov	r2,r3
   84870:	18005a16 	blt	r3,zero,849dc <___vfprintf_internal_r+0x2144>
   84874:	d8c13317 	ldw	r3,1228(sp)
   84878:	d8c12e15 	stw	r3,1208(sp)
   8487c:	003e2006 	br	84100 <_gp+0xfffe9d0c>
   84880:	d8c12284 	addi	r3,sp,1162
   84884:	4039883a 	mov	fp,r8
   84888:	a809883a 	mov	r4,r21
   8488c:	01400284 	movi	r5,10
   84890:	182d883a 	mov	r22,r3
   84894:	00825240 	call	82524 <__modsi3>
   84898:	10800c04 	addi	r2,r2,48
   8489c:	a809883a 	mov	r4,r21
   848a0:	b0800005 	stb	r2,0(r22)
   848a4:	01400284 	movi	r5,10
   848a8:	00824dc0 	call	824dc <__divsi3>
   848ac:	102b883a 	mov	r21,r2
   848b0:	b0ffffc4 	addi	r3,r22,-1
   848b4:	a0bff416 	blt	r20,r2,84888 <_gp+0xfffea494>
   848b8:	11400c04 	addi	r5,r2,48
   848bc:	b17fffc5 	stb	r5,-1(r22)
   848c0:	d88122c4 	addi	r2,sp,1163
   848c4:	e011883a 	mov	r8,fp
   848c8:	1880462e 	bgeu	r3,r2,849e4 <___vfprintf_internal_r+0x214c>
   848cc:	d9012344 	addi	r4,sp,1165
   848d0:	b007883a 	mov	r3,r22
   848d4:	00000206 	br	848e0 <___vfprintf_internal_r+0x2048>
   848d8:	19400003 	ldbu	r5,0(r3)
   848dc:	18c00044 	addi	r3,r3,1
   848e0:	21400005 	stb	r5,0(r4)
   848e4:	21000044 	addi	r4,r4,1
   848e8:	10fffb1e 	bne	r2,r3,848d8 <_gp+0xfffea4e4>
   848ec:	d8c12304 	addi	r3,sp,1164
   848f0:	1d87c83a 	sub	r3,r3,r22
   848f4:	d9412344 	addi	r5,sp,1165
   848f8:	28c7883a 	add	r3,r5,r3
   848fc:	003f9c06 	br	84770 <_gp+0xfffea37c>
   84900:	0005883a 	mov	r2,zero
   84904:	003f2c06 	br	845b8 <_gp+0xfffea1c4>
   84908:	d8c13317 	ldw	r3,1228(sp)
   8490c:	a5000044 	addi	r20,r20,1
   84910:	1d29883a 	add	r20,r3,r20
   84914:	dd012e15 	stw	r20,1208(sp)
   84918:	a005883a 	mov	r2,r20
   8491c:	a03df80e 	bge	r20,zero,84100 <_gp+0xfffe9d0c>
   84920:	0005883a 	mov	r2,zero
   84924:	003df606 	br	84100 <_gp+0xfffe9d0c>
   84928:	043fffc4 	movi	r16,-1
   8492c:	0038d406 	br	82c80 <_gp+0xfffe888c>
   84930:	d9012f17 	ldw	r4,1212(sp)
   84934:	8c800043 	ldbu	r18,1(r17)
   84938:	1023883a 	mov	r17,r2
   8493c:	20c00017 	ldw	r3,0(r4)
   84940:	21000104 	addi	r4,r4,4
   84944:	d9012f15 	stw	r4,1212(sp)
   84948:	18001f16 	blt	r3,zero,849c8 <___vfprintf_internal_r+0x2130>
   8494c:	94803fcc 	andi	r18,r18,255
   84950:	9480201c 	xori	r18,r18,128
   84954:	94bfe004 	addi	r18,r18,-128
   84958:	00383406 	br	82a2c <_gp+0xfffe8638>
   8495c:	a000111e 	bne	r20,zero,849a4 <___vfprintf_internal_r+0x210c>
   84960:	d9012a17 	ldw	r4,1192(sp)
   84964:	2080004c 	andi	r2,r4,1
   84968:	10000e1e 	bne	r2,zero,849a4 <___vfprintf_internal_r+0x210c>
   8496c:	00800044 	movi	r2,1
   84970:	d8812e15 	stw	r2,1208(sp)
   84974:	003de206 	br	84100 <_gp+0xfffe9d0c>
   84978:	d9412a17 	ldw	r5,1192(sp)
   8497c:	2884703a 	and	r2,r5,r2
   84980:	103f831e 	bne	r2,zero,84790 <_gp+0xfffea39c>
   84984:	003f8506 	br	8479c <_gp+0xfffea3a8>
   84988:	00800b44 	movi	r2,45
   8498c:	056bc83a 	sub	r21,zero,r21
   84990:	d8812305 	stb	r2,1164(sp)
   84994:	003f6e06 	br	84750 <_gp+0xfffea35c>
   84998:	00800084 	movi	r2,2
   8499c:	10c5c83a 	sub	r2,r2,r3
   849a0:	003f9d06 	br	84818 <_gp+0xfffea424>
   849a4:	a5000084 	addi	r20,r20,2
   849a8:	dd012e15 	stw	r20,1208(sp)
   849ac:	a005883a 	mov	r2,r20
   849b0:	a03dd30e 	bge	r20,zero,84100 <_gp+0xfffe9d0c>
   849b4:	003fda06 	br	84920 <_gp+0xfffea52c>
   849b8:	0005883a 	mov	r2,zero
   849bc:	003dcd06 	br	840f4 <_gp+0xfffe9d00>
   849c0:	d8812617 	ldw	r2,1176(sp)
   849c4:	003f5c06 	br	84738 <_gp+0xfffea344>
   849c8:	94803fcc 	andi	r18,r18,255
   849cc:	9480201c 	xori	r18,r18,128
   849d0:	00ffffc4 	movi	r3,-1
   849d4:	94bfe004 	addi	r18,r18,-128
   849d8:	00381406 	br	82a2c <_gp+0xfffe8638>
   849dc:	0005883a 	mov	r2,zero
   849e0:	003fa406 	br	84874 <_gp+0xfffea480>
   849e4:	d8c12344 	addi	r3,sp,1165
   849e8:	003f6106 	br	84770 <_gp+0xfffea37c>

000849ec <__vfprintf_internal>:
   849ec:	00800274 	movhi	r2,9
   849f0:	1088ff04 	addi	r2,r2,9212
   849f4:	2007883a 	mov	r3,r4
   849f8:	11000017 	ldw	r4,0(r2)
   849fc:	2805883a 	mov	r2,r5
   84a00:	300f883a 	mov	r7,r6
   84a04:	180b883a 	mov	r5,r3
   84a08:	100d883a 	mov	r6,r2
   84a0c:	00828981 	jmpi	82898 <___vfprintf_internal_r>

00084a10 <__swsetup_r>:
   84a10:	00800274 	movhi	r2,9
   84a14:	1088ff04 	addi	r2,r2,9212
   84a18:	10800017 	ldw	r2,0(r2)
   84a1c:	defffd04 	addi	sp,sp,-12
   84a20:	dc400115 	stw	r17,4(sp)
   84a24:	dc000015 	stw	r16,0(sp)
   84a28:	dfc00215 	stw	ra,8(sp)
   84a2c:	2023883a 	mov	r17,r4
   84a30:	2821883a 	mov	r16,r5
   84a34:	10000226 	beq	r2,zero,84a40 <__swsetup_r+0x30>
   84a38:	10c00e17 	ldw	r3,56(r2)
   84a3c:	18002e26 	beq	r3,zero,84af8 <__swsetup_r+0xe8>
   84a40:	8080030b 	ldhu	r2,12(r16)
   84a44:	10c0020c 	andi	r3,r2,8
   84a48:	100d883a 	mov	r6,r2
   84a4c:	18000f26 	beq	r3,zero,84a8c <__swsetup_r+0x7c>
   84a50:	80c00417 	ldw	r3,16(r16)
   84a54:	18001526 	beq	r3,zero,84aac <__swsetup_r+0x9c>
   84a58:	1100004c 	andi	r4,r2,1
   84a5c:	20001c1e 	bne	r4,zero,84ad0 <__swsetup_r+0xc0>
   84a60:	1080008c 	andi	r2,r2,2
   84a64:	1000271e 	bne	r2,zero,84b04 <__swsetup_r+0xf4>
   84a68:	80800517 	ldw	r2,20(r16)
   84a6c:	80800215 	stw	r2,8(r16)
   84a70:	18001c26 	beq	r3,zero,84ae4 <__swsetup_r+0xd4>
   84a74:	0005883a 	mov	r2,zero
   84a78:	dfc00217 	ldw	ra,8(sp)
   84a7c:	dc400117 	ldw	r17,4(sp)
   84a80:	dc000017 	ldw	r16,0(sp)
   84a84:	dec00304 	addi	sp,sp,12
   84a88:	f800283a 	ret
   84a8c:	3080040c 	andi	r2,r6,16
   84a90:	10001726 	beq	r2,zero,84af0 <__swsetup_r+0xe0>
   84a94:	3080010c 	andi	r2,r6,4
   84a98:	10001d1e 	bne	r2,zero,84b10 <__swsetup_r+0x100>
   84a9c:	80c00417 	ldw	r3,16(r16)
   84aa0:	30800214 	ori	r2,r6,8
   84aa4:	8080030d 	sth	r2,12(r16)
   84aa8:	183feb1e 	bne	r3,zero,84a58 <_gp+0xfffea664>
   84aac:	1140a00c 	andi	r5,r2,640
   84ab0:	01008004 	movi	r4,512
   84ab4:	293fe826 	beq	r5,r4,84a58 <_gp+0xfffea664>
   84ab8:	8809883a 	mov	r4,r17
   84abc:	800b883a 	mov	r5,r16
   84ac0:	00874b00 	call	874b0 <__smakebuf_r>
   84ac4:	8080030b 	ldhu	r2,12(r16)
   84ac8:	80c00417 	ldw	r3,16(r16)
   84acc:	003fe206 	br	84a58 <_gp+0xfffea664>
   84ad0:	80800517 	ldw	r2,20(r16)
   84ad4:	80000215 	stw	zero,8(r16)
   84ad8:	0085c83a 	sub	r2,zero,r2
   84adc:	80800615 	stw	r2,24(r16)
   84ae0:	183fe41e 	bne	r3,zero,84a74 <_gp+0xfffea680>
   84ae4:	8080030b 	ldhu	r2,12(r16)
   84ae8:	1080200c 	andi	r2,r2,128
   84aec:	103fe226 	beq	r2,zero,84a78 <_gp+0xfffea684>
   84af0:	00bfffc4 	movi	r2,-1
   84af4:	003fe006 	br	84a78 <_gp+0xfffea684>
   84af8:	1009883a 	mov	r4,r2
   84afc:	00866cc0 	call	866cc <__sinit>
   84b00:	003fcf06 	br	84a40 <_gp+0xfffea64c>
   84b04:	0005883a 	mov	r2,zero
   84b08:	80800215 	stw	r2,8(r16)
   84b0c:	003fd806 	br	84a70 <_gp+0xfffea67c>
   84b10:	81400c17 	ldw	r5,48(r16)
   84b14:	28000626 	beq	r5,zero,84b30 <__swsetup_r+0x120>
   84b18:	80801004 	addi	r2,r16,64
   84b1c:	28800326 	beq	r5,r2,84b2c <__swsetup_r+0x11c>
   84b20:	8809883a 	mov	r4,r17
   84b24:	0086b000 	call	86b00 <_free_r>
   84b28:	8180030b 	ldhu	r6,12(r16)
   84b2c:	80000c15 	stw	zero,48(r16)
   84b30:	80c00417 	ldw	r3,16(r16)
   84b34:	00bff6c4 	movi	r2,-37
   84b38:	118c703a 	and	r6,r2,r6
   84b3c:	80000115 	stw	zero,4(r16)
   84b40:	80c00015 	stw	r3,0(r16)
   84b44:	003fd606 	br	84aa0 <_gp+0xfffea6ac>

00084b48 <quorem>:
   84b48:	defff204 	addi	sp,sp,-56
   84b4c:	dd400915 	stw	r21,36(sp)
   84b50:	20800417 	ldw	r2,16(r4)
   84b54:	2d400417 	ldw	r21,16(r5)
   84b58:	dfc00d15 	stw	ra,52(sp)
   84b5c:	df000c15 	stw	fp,48(sp)
   84b60:	ddc00b15 	stw	r23,44(sp)
   84b64:	dd800a15 	stw	r22,40(sp)
   84b68:	dd000815 	stw	r20,32(sp)
   84b6c:	dcc00715 	stw	r19,28(sp)
   84b70:	dc800615 	stw	r18,24(sp)
   84b74:	dc400515 	stw	r17,20(sp)
   84b78:	dc000415 	stw	r16,16(sp)
   84b7c:	d9000015 	stw	r4,0(sp)
   84b80:	d9400115 	stw	r5,4(sp)
   84b84:	15407816 	blt	r2,r21,84d68 <quorem+0x220>
   84b88:	ad7fffc4 	addi	r21,r21,-1
   84b8c:	ad79883a 	add	fp,r21,r21
   84b90:	28c00504 	addi	r3,r5,20
   84b94:	e739883a 	add	fp,fp,fp
   84b98:	1f2f883a 	add	r23,r3,fp
   84b9c:	24400504 	addi	r17,r4,20
   84ba0:	8f39883a 	add	fp,r17,fp
   84ba4:	b9400017 	ldw	r5,0(r23)
   84ba8:	e1000017 	ldw	r4,0(fp)
   84bac:	d8c00215 	stw	r3,8(sp)
   84bb0:	29400044 	addi	r5,r5,1
   84bb4:	df000315 	stw	fp,12(sp)
   84bb8:	00825700 	call	82570 <__udivsi3>
   84bbc:	1021883a 	mov	r16,r2
   84bc0:	10003026 	beq	r2,zero,84c84 <quorem+0x13c>
   84bc4:	dcc00217 	ldw	r19,8(sp)
   84bc8:	8829883a 	mov	r20,r17
   84bcc:	002d883a 	mov	r22,zero
   84bd0:	0039883a 	mov	fp,zero
   84bd4:	9c800017 	ldw	r18,0(r19)
   84bd8:	800b883a 	mov	r5,r16
   84bdc:	9cc00104 	addi	r19,r19,4
   84be0:	913fffcc 	andi	r4,r18,65535
   84be4:	00825800 	call	82580 <__mulsi3>
   84be8:	9008d43a 	srli	r4,r18,16
   84bec:	800b883a 	mov	r5,r16
   84bf0:	b0ad883a 	add	r22,r22,r2
   84bf4:	00825800 	call	82580 <__mulsi3>
   84bf8:	a1400017 	ldw	r5,0(r20)
   84bfc:	b010d43a 	srli	r8,r22,16
   84c00:	b0ffffcc 	andi	r3,r22,65535
   84c04:	293fffcc 	andi	r4,r5,65535
   84c08:	2709883a 	add	r4,r4,fp
   84c0c:	280cd43a 	srli	r6,r5,16
   84c10:	20c9c83a 	sub	r4,r4,r3
   84c14:	4085883a 	add	r2,r8,r2
   84c18:	2007d43a 	srai	r3,r4,16
   84c1c:	117fffcc 	andi	r5,r2,65535
   84c20:	314bc83a 	sub	r5,r6,r5
   84c24:	28cb883a 	add	r5,r5,r3
   84c28:	280c943a 	slli	r6,r5,16
   84c2c:	213fffcc 	andi	r4,r4,65535
   84c30:	102cd43a 	srli	r22,r2,16
   84c34:	3108b03a 	or	r4,r6,r4
   84c38:	a1000015 	stw	r4,0(r20)
   84c3c:	2839d43a 	srai	fp,r5,16
   84c40:	a5000104 	addi	r20,r20,4
   84c44:	bcffe32e 	bgeu	r23,r19,84bd4 <_gp+0xfffea7e0>
   84c48:	d8c00317 	ldw	r3,12(sp)
   84c4c:	18800017 	ldw	r2,0(r3)
   84c50:	10000c1e 	bne	r2,zero,84c84 <quorem+0x13c>
   84c54:	18bfff04 	addi	r2,r3,-4
   84c58:	8880082e 	bgeu	r17,r2,84c7c <quorem+0x134>
   84c5c:	18ffff17 	ldw	r3,-4(r3)
   84c60:	18000326 	beq	r3,zero,84c70 <quorem+0x128>
   84c64:	00000506 	br	84c7c <quorem+0x134>
   84c68:	10c00017 	ldw	r3,0(r2)
   84c6c:	1800031e 	bne	r3,zero,84c7c <quorem+0x134>
   84c70:	10bfff04 	addi	r2,r2,-4
   84c74:	ad7fffc4 	addi	r21,r21,-1
   84c78:	88bffb36 	bltu	r17,r2,84c68 <_gp+0xfffea874>
   84c7c:	d8c00017 	ldw	r3,0(sp)
   84c80:	1d400415 	stw	r21,16(r3)
   84c84:	d9000017 	ldw	r4,0(sp)
   84c88:	d9400117 	ldw	r5,4(sp)
   84c8c:	0088ad00 	call	88ad0 <__mcmp>
   84c90:	10002816 	blt	r2,zero,84d34 <quorem+0x1ec>
   84c94:	d8c00217 	ldw	r3,8(sp)
   84c98:	84000044 	addi	r16,r16,1
   84c9c:	880d883a 	mov	r6,r17
   84ca0:	000f883a 	mov	r7,zero
   84ca4:	32800017 	ldw	r10,0(r6)
   84ca8:	1a400017 	ldw	r9,0(r3)
   84cac:	31800104 	addi	r6,r6,4
   84cb0:	523fffcc 	andi	r8,r10,65535
   84cb4:	48bfffcc 	andi	r2,r9,65535
   84cb8:	41cf883a 	add	r7,r8,r7
   84cbc:	3891c83a 	sub	r8,r7,r2
   84cc0:	4812d43a 	srli	r9,r9,16
   84cc4:	500ed43a 	srli	r7,r10,16
   84cc8:	4005d43a 	srai	r2,r8,16
   84ccc:	423fffcc 	andi	r8,r8,65535
   84cd0:	3a4fc83a 	sub	r7,r7,r9
   84cd4:	388f883a 	add	r7,r7,r2
   84cd8:	3804943a 	slli	r2,r7,16
   84cdc:	18c00104 	addi	r3,r3,4
   84ce0:	380fd43a 	srai	r7,r7,16
   84ce4:	1210b03a 	or	r8,r2,r8
   84ce8:	323fff15 	stw	r8,-4(r6)
   84cec:	b8ffed2e 	bgeu	r23,r3,84ca4 <_gp+0xfffea8b0>
   84cf0:	ad45883a 	add	r2,r21,r21
   84cf4:	1085883a 	add	r2,r2,r2
   84cf8:	8887883a 	add	r3,r17,r2
   84cfc:	18800017 	ldw	r2,0(r3)
   84d00:	10000c1e 	bne	r2,zero,84d34 <quorem+0x1ec>
   84d04:	18bfff04 	addi	r2,r3,-4
   84d08:	8880082e 	bgeu	r17,r2,84d2c <quorem+0x1e4>
   84d0c:	18ffff17 	ldw	r3,-4(r3)
   84d10:	18000326 	beq	r3,zero,84d20 <quorem+0x1d8>
   84d14:	00000506 	br	84d2c <quorem+0x1e4>
   84d18:	10c00017 	ldw	r3,0(r2)
   84d1c:	1800031e 	bne	r3,zero,84d2c <quorem+0x1e4>
   84d20:	10bfff04 	addi	r2,r2,-4
   84d24:	ad7fffc4 	addi	r21,r21,-1
   84d28:	88bffb36 	bltu	r17,r2,84d18 <_gp+0xfffea924>
   84d2c:	d8c00017 	ldw	r3,0(sp)
   84d30:	1d400415 	stw	r21,16(r3)
   84d34:	8005883a 	mov	r2,r16
   84d38:	dfc00d17 	ldw	ra,52(sp)
   84d3c:	df000c17 	ldw	fp,48(sp)
   84d40:	ddc00b17 	ldw	r23,44(sp)
   84d44:	dd800a17 	ldw	r22,40(sp)
   84d48:	dd400917 	ldw	r21,36(sp)
   84d4c:	dd000817 	ldw	r20,32(sp)
   84d50:	dcc00717 	ldw	r19,28(sp)
   84d54:	dc800617 	ldw	r18,24(sp)
   84d58:	dc400517 	ldw	r17,20(sp)
   84d5c:	dc000417 	ldw	r16,16(sp)
   84d60:	dec00e04 	addi	sp,sp,56
   84d64:	f800283a 	ret
   84d68:	0005883a 	mov	r2,zero
   84d6c:	003ff206 	br	84d38 <_gp+0xfffea944>

00084d70 <_dtoa_r>:
   84d70:	20801017 	ldw	r2,64(r4)
   84d74:	deffdf04 	addi	sp,sp,-132
   84d78:	dcc01a15 	stw	r19,104(sp)
   84d7c:	dc801915 	stw	r18,100(sp)
   84d80:	dc401815 	stw	r17,96(sp)
   84d84:	dc001715 	stw	r16,92(sp)
   84d88:	dfc02015 	stw	ra,128(sp)
   84d8c:	df001f15 	stw	fp,124(sp)
   84d90:	ddc01e15 	stw	r23,120(sp)
   84d94:	dd801d15 	stw	r22,116(sp)
   84d98:	dd401c15 	stw	r21,112(sp)
   84d9c:	dd001b15 	stw	r20,108(sp)
   84da0:	d9400315 	stw	r5,12(sp)
   84da4:	d9c00415 	stw	r7,16(sp)
   84da8:	2021883a 	mov	r16,r4
   84dac:	3023883a 	mov	r17,r6
   84db0:	dcc02317 	ldw	r19,140(sp)
   84db4:	3025883a 	mov	r18,r6
   84db8:	10000826 	beq	r2,zero,84ddc <_dtoa_r+0x6c>
   84dbc:	20c01117 	ldw	r3,68(r4)
   84dc0:	01800044 	movi	r6,1
   84dc4:	100b883a 	mov	r5,r2
   84dc8:	30cc983a 	sll	r6,r6,r3
   84dcc:	10c00115 	stw	r3,4(r2)
   84dd0:	11800215 	stw	r6,8(r2)
   84dd4:	00882080 	call	88208 <_Bfree>
   84dd8:	80001015 	stw	zero,64(r16)
   84ddc:	88002e16 	blt	r17,zero,84e98 <_dtoa_r+0x128>
   84de0:	98000015 	stw	zero,0(r19)
   84de4:	88dffc2c 	andhi	r3,r17,32752
   84de8:	009ffc34 	movhi	r2,32752
   84dec:	18801b26 	beq	r3,r2,84e5c <_dtoa_r+0xec>
   84df0:	d9000317 	ldw	r4,12(sp)
   84df4:	900b883a 	mov	r5,r18
   84df8:	000d883a 	mov	r6,zero
   84dfc:	000f883a 	mov	r7,zero
   84e00:	008cfa80 	call	8cfa8 <__eqdf2>
   84e04:	10002b1e 	bne	r2,zero,84eb4 <_dtoa_r+0x144>
   84e08:	d8c02217 	ldw	r3,136(sp)
   84e0c:	d9002417 	ldw	r4,144(sp)
   84e10:	00800044 	movi	r2,1
   84e14:	18800015 	stw	r2,0(r3)
   84e18:	2001a026 	beq	r4,zero,8549c <_dtoa_r+0x72c>
   84e1c:	00800274 	movhi	r2,9
   84e20:	1081e844 	addi	r2,r2,1953
   84e24:	20800015 	stw	r2,0(r4)
   84e28:	10bfffc4 	addi	r2,r2,-1
   84e2c:	dfc02017 	ldw	ra,128(sp)
   84e30:	df001f17 	ldw	fp,124(sp)
   84e34:	ddc01e17 	ldw	r23,120(sp)
   84e38:	dd801d17 	ldw	r22,116(sp)
   84e3c:	dd401c17 	ldw	r21,112(sp)
   84e40:	dd001b17 	ldw	r20,108(sp)
   84e44:	dcc01a17 	ldw	r19,104(sp)
   84e48:	dc801917 	ldw	r18,100(sp)
   84e4c:	dc401817 	ldw	r17,96(sp)
   84e50:	dc001717 	ldw	r16,92(sp)
   84e54:	dec02104 	addi	sp,sp,132
   84e58:	f800283a 	ret
   84e5c:	d8c02217 	ldw	r3,136(sp)
   84e60:	d9000317 	ldw	r4,12(sp)
   84e64:	0089c3c4 	movi	r2,9999
   84e68:	18800015 	stw	r2,0(r3)
   84e6c:	20017926 	beq	r4,zero,85454 <_dtoa_r+0x6e4>
   84e70:	00800274 	movhi	r2,9
   84e74:	1081f404 	addi	r2,r2,2000
   84e78:	d9802417 	ldw	r6,144(sp)
   84e7c:	303feb26 	beq	r6,zero,84e2c <_gp+0xfffeaa38>
   84e80:	10c000c7 	ldb	r3,3(r2)
   84e84:	18017a1e 	bne	r3,zero,85470 <_dtoa_r+0x700>
   84e88:	10c000c4 	addi	r3,r2,3
   84e8c:	d9c02417 	ldw	r7,144(sp)
   84e90:	38c00015 	stw	r3,0(r7)
   84e94:	003fe506 	br	84e2c <_gp+0xfffeaa38>
   84e98:	04a00034 	movhi	r18,32768
   84e9c:	94bfffc4 	addi	r18,r18,-1
   84ea0:	8ca4703a 	and	r18,r17,r18
   84ea4:	00800044 	movi	r2,1
   84ea8:	98800015 	stw	r2,0(r19)
   84eac:	9023883a 	mov	r17,r18
   84eb0:	003fcc06 	br	84de4 <_gp+0xfffea9f0>
   84eb4:	d9400317 	ldw	r5,12(sp)
   84eb8:	d8800204 	addi	r2,sp,8
   84ebc:	8828d53a 	srli	r20,r17,20
   84ec0:	d8800015 	stw	r2,0(sp)
   84ec4:	8009883a 	mov	r4,r16
   84ec8:	900d883a 	mov	r6,r18
   84ecc:	d9c00104 	addi	r7,sp,4
   84ed0:	0088e300 	call	88e30 <__d2b>
   84ed4:	1039883a 	mov	fp,r2
   84ed8:	a001671e 	bne	r20,zero,85478 <_dtoa_r+0x708>
   84edc:	dd400217 	ldw	r21,8(sp)
   84ee0:	dd000117 	ldw	r20,4(sp)
   84ee4:	00befbc4 	movi	r2,-1041
   84ee8:	ad29883a 	add	r20,r21,r20
   84eec:	a082d616 	blt	r20,r2,85a48 <_dtoa_r+0xcd8>
   84ef0:	d9800317 	ldw	r6,12(sp)
   84ef4:	013f0384 	movi	r4,-1010
   84ef8:	2509c83a 	sub	r4,r4,r20
   84efc:	a0810484 	addi	r2,r20,1042
   84f00:	8922983a 	sll	r17,r17,r4
   84f04:	3084d83a 	srl	r2,r6,r2
   84f08:	8888b03a 	or	r4,r17,r2
   84f0c:	00823200 	call	82320 <__floatunsidf>
   84f10:	1009883a 	mov	r4,r2
   84f14:	017f8434 	movhi	r5,65040
   84f18:	00800044 	movi	r2,1
   84f1c:	194b883a 	add	r5,r3,r5
   84f20:	a53fffc4 	addi	r20,r20,-1
   84f24:	d8800f15 	stw	r2,60(sp)
   84f28:	000d883a 	mov	r6,zero
   84f2c:	01cffe34 	movhi	r7,16376
   84f30:	008d9f00 	call	8d9f0 <__subdf3>
   84f34:	1009883a 	mov	r4,r2
   84f38:	180b883a 	mov	r5,r3
   84f3c:	0198dbf4 	movhi	r6,25455
   84f40:	3190d844 	addi	r6,r6,17249
   84f44:	01cff4f4 	movhi	r7,16339
   84f48:	39e1e9c4 	addi	r7,r7,-30809
   84f4c:	008d1f00 	call	8d1f0 <__muldf3>
   84f50:	180b883a 	mov	r5,r3
   84f54:	01a2d874 	movhi	r6,35681
   84f58:	31b22cc4 	addi	r6,r6,-14157
   84f5c:	01cff1f4 	movhi	r7,16327
   84f60:	39e28a04 	addi	r7,r7,-30168
   84f64:	1009883a 	mov	r4,r2
   84f68:	008c72c0 	call	8c72c <__adddf3>
   84f6c:	a009883a 	mov	r4,r20
   84f70:	1027883a 	mov	r19,r2
   84f74:	1823883a 	mov	r17,r3
   84f78:	00822500 	call	82250 <__floatsidf>
   84f7c:	1009883a 	mov	r4,r2
   84f80:	180b883a 	mov	r5,r3
   84f84:	019427f4 	movhi	r6,20639
   84f88:	319e7ec4 	addi	r6,r6,31227
   84f8c:	01cff4f4 	movhi	r7,16339
   84f90:	39d104c4 	addi	r7,r7,17427
   84f94:	008d1f00 	call	8d1f0 <__muldf3>
   84f98:	9809883a 	mov	r4,r19
   84f9c:	880b883a 	mov	r5,r17
   84fa0:	100d883a 	mov	r6,r2
   84fa4:	180f883a 	mov	r7,r3
   84fa8:	008c72c0 	call	8c72c <__adddf3>
   84fac:	1009883a 	mov	r4,r2
   84fb0:	180b883a 	mov	r5,r3
   84fb4:	1027883a 	mov	r19,r2
   84fb8:	1823883a 	mov	r17,r3
   84fbc:	008e2780 	call	8e278 <__fixdfsi>
   84fc0:	9809883a 	mov	r4,r19
   84fc4:	880b883a 	mov	r5,r17
   84fc8:	000d883a 	mov	r6,zero
   84fcc:	000f883a 	mov	r7,zero
   84fd0:	d8800615 	stw	r2,24(sp)
   84fd4:	008d1040 	call	8d104 <__ledf2>
   84fd8:	10028416 	blt	r2,zero,859ec <_dtoa_r+0xc7c>
   84fdc:	d9000617 	ldw	r4,24(sp)
   84fe0:	00800584 	movi	r2,22
   84fe4:	11027236 	bltu	r2,r4,859b0 <_dtoa_r+0xc40>
   84fe8:	200490fa 	slli	r2,r4,3
   84fec:	00c00274 	movhi	r3,9
   84ff0:	18c21004 	addi	r3,r3,2112
   84ff4:	d9800317 	ldw	r6,12(sp)
   84ff8:	1885883a 	add	r2,r3,r2
   84ffc:	11000017 	ldw	r4,0(r2)
   85000:	11400117 	ldw	r5,4(r2)
   85004:	900f883a 	mov	r7,r18
   85008:	008d02c0 	call	8d02c <__gedf2>
   8500c:	0082930e 	bge	zero,r2,85a5c <_dtoa_r+0xcec>
   85010:	d9800617 	ldw	r6,24(sp)
   85014:	d8000e15 	stw	zero,56(sp)
   85018:	31bfffc4 	addi	r6,r6,-1
   8501c:	d9800615 	stw	r6,24(sp)
   85020:	ad2bc83a 	sub	r21,r21,r20
   85024:	ad7fffc4 	addi	r21,r21,-1
   85028:	a8026c16 	blt	r21,zero,859dc <_dtoa_r+0xc6c>
   8502c:	d8000815 	stw	zero,32(sp)
   85030:	d8800617 	ldw	r2,24(sp)
   85034:	10026116 	blt	r2,zero,859bc <_dtoa_r+0xc4c>
   85038:	a8ab883a 	add	r21,r21,r2
   8503c:	d8800b15 	stw	r2,44(sp)
   85040:	d8000a15 	stw	zero,40(sp)
   85044:	d9c00417 	ldw	r7,16(sp)
   85048:	00800244 	movi	r2,9
   8504c:	11c11636 	bltu	r2,r7,854a8 <_dtoa_r+0x738>
   85050:	00800144 	movi	r2,5
   85054:	11c4cc0e 	bge	r2,r7,86388 <_dtoa_r+0x1618>
   85058:	39ffff04 	addi	r7,r7,-4
   8505c:	d9c00415 	stw	r7,16(sp)
   85060:	0027883a 	mov	r19,zero
   85064:	d8c00417 	ldw	r3,16(sp)
   85068:	008000c4 	movi	r2,3
   8506c:	1883aa26 	beq	r3,r2,85f18 <_dtoa_r+0x11a8>
   85070:	10c35b0e 	bge	r2,r3,85de0 <_dtoa_r+0x1070>
   85074:	d9000417 	ldw	r4,16(sp)
   85078:	00800104 	movi	r2,4
   8507c:	2082da26 	beq	r4,r2,85be8 <_dtoa_r+0xe78>
   85080:	00800144 	movi	r2,5
   85084:	2081091e 	bne	r4,r2,854ac <_dtoa_r+0x73c>
   85088:	01c00044 	movi	r7,1
   8508c:	d9c00c15 	stw	r7,48(sp)
   85090:	d8c02117 	ldw	r3,132(sp)
   85094:	d9000617 	ldw	r4,24(sp)
   85098:	1907883a 	add	r3,r3,r4
   8509c:	19800044 	addi	r6,r3,1
   850a0:	d8c00d15 	stw	r3,52(sp)
   850a4:	d9800915 	stw	r6,36(sp)
   850a8:	0183a90e 	bge	zero,r6,85f50 <_dtoa_r+0x11e0>
   850ac:	d9800917 	ldw	r6,36(sp)
   850b0:	80001115 	stw	zero,68(r16)
   850b4:	008005c4 	movi	r2,23
   850b8:	1184b52e 	bgeu	r2,r6,86390 <_dtoa_r+0x1620>
   850bc:	00c00044 	movi	r3,1
   850c0:	00800104 	movi	r2,4
   850c4:	1085883a 	add	r2,r2,r2
   850c8:	11000504 	addi	r4,r2,20
   850cc:	180b883a 	mov	r5,r3
   850d0:	18c00044 	addi	r3,r3,1
   850d4:	313ffb2e 	bgeu	r6,r4,850c4 <_gp+0xfffeacd0>
   850d8:	81401115 	stw	r5,68(r16)
   850dc:	3023883a 	mov	r17,r6
   850e0:	8009883a 	mov	r4,r16
   850e4:	00881600 	call	88160 <_Balloc>
   850e8:	d8800715 	stw	r2,28(sp)
   850ec:	80801015 	stw	r2,64(r16)
   850f0:	00800384 	movi	r2,14
   850f4:	1440f936 	bltu	r2,r17,854dc <_dtoa_r+0x76c>
   850f8:	9800f826 	beq	r19,zero,854dc <_dtoa_r+0x76c>
   850fc:	d9c00617 	ldw	r7,24(sp)
   85100:	01c39c0e 	bge	zero,r7,85f74 <_dtoa_r+0x1204>
   85104:	388003cc 	andi	r2,r7,15
   85108:	100490fa 	slli	r2,r2,3
   8510c:	382dd13a 	srai	r22,r7,4
   85110:	00c00274 	movhi	r3,9
   85114:	18c21004 	addi	r3,r3,2112
   85118:	1885883a 	add	r2,r3,r2
   8511c:	b0c0040c 	andi	r3,r22,16
   85120:	12800017 	ldw	r10,0(r2)
   85124:	12400117 	ldw	r9,4(r2)
   85128:	18038526 	beq	r3,zero,85f40 <_dtoa_r+0x11d0>
   8512c:	00800274 	movhi	r2,9
   85130:	10820604 	addi	r2,r2,2072
   85134:	11800817 	ldw	r6,32(r2)
   85138:	11c00917 	ldw	r7,36(r2)
   8513c:	d9000317 	ldw	r4,12(sp)
   85140:	900b883a 	mov	r5,r18
   85144:	da401515 	stw	r9,84(sp)
   85148:	da801615 	stw	r10,88(sp)
   8514c:	00818b40 	call	818b4 <__divdf3>
   85150:	da401517 	ldw	r9,84(sp)
   85154:	da801617 	ldw	r10,88(sp)
   85158:	1027883a 	mov	r19,r2
   8515c:	1829883a 	mov	r20,r3
   85160:	b58003cc 	andi	r22,r22,15
   85164:	044000c4 	movi	r17,3
   85168:	b0001126 	beq	r22,zero,851b0 <_dtoa_r+0x440>
   8516c:	05c00274 	movhi	r23,9
   85170:	bdc20604 	addi	r23,r23,2072
   85174:	5005883a 	mov	r2,r10
   85178:	4807883a 	mov	r3,r9
   8517c:	b180004c 	andi	r6,r22,1
   85180:	1009883a 	mov	r4,r2
   85184:	b02dd07a 	srai	r22,r22,1
   85188:	180b883a 	mov	r5,r3
   8518c:	30000426 	beq	r6,zero,851a0 <_dtoa_r+0x430>
   85190:	b9800017 	ldw	r6,0(r23)
   85194:	b9c00117 	ldw	r7,4(r23)
   85198:	8c400044 	addi	r17,r17,1
   8519c:	008d1f00 	call	8d1f0 <__muldf3>
   851a0:	bdc00204 	addi	r23,r23,8
   851a4:	b03ff51e 	bne	r22,zero,8517c <_gp+0xfffead88>
   851a8:	1015883a 	mov	r10,r2
   851ac:	1813883a 	mov	r9,r3
   851b0:	9809883a 	mov	r4,r19
   851b4:	a00b883a 	mov	r5,r20
   851b8:	500d883a 	mov	r6,r10
   851bc:	480f883a 	mov	r7,r9
   851c0:	00818b40 	call	818b4 <__divdf3>
   851c4:	1027883a 	mov	r19,r2
   851c8:	1829883a 	mov	r20,r3
   851cc:	d8c00e17 	ldw	r3,56(sp)
   851d0:	18000626 	beq	r3,zero,851ec <_dtoa_r+0x47c>
   851d4:	9809883a 	mov	r4,r19
   851d8:	a00b883a 	mov	r5,r20
   851dc:	000d883a 	mov	r6,zero
   851e0:	01cffc34 	movhi	r7,16368
   851e4:	008d1040 	call	8d104 <__ledf2>
   851e8:	10041516 	blt	r2,zero,86240 <_dtoa_r+0x14d0>
   851ec:	8809883a 	mov	r4,r17
   851f0:	00822500 	call	82250 <__floatsidf>
   851f4:	1009883a 	mov	r4,r2
   851f8:	180b883a 	mov	r5,r3
   851fc:	980d883a 	mov	r6,r19
   85200:	a00f883a 	mov	r7,r20
   85204:	008d1f00 	call	8d1f0 <__muldf3>
   85208:	1009883a 	mov	r4,r2
   8520c:	180b883a 	mov	r5,r3
   85210:	000d883a 	mov	r6,zero
   85214:	01d00734 	movhi	r7,16412
   85218:	008c72c0 	call	8c72c <__adddf3>
   8521c:	1023883a 	mov	r17,r2
   85220:	d8800917 	ldw	r2,36(sp)
   85224:	05bf3034 	movhi	r22,64704
   85228:	1daf883a 	add	r23,r3,r22
   8522c:	10031e26 	beq	r2,zero,85ea8 <_dtoa_r+0x1138>
   85230:	d8c00617 	ldw	r3,24(sp)
   85234:	dac00917 	ldw	r11,36(sp)
   85238:	d8c01315 	stw	r3,76(sp)
   8523c:	d9000c17 	ldw	r4,48(sp)
   85240:	20039626 	beq	r4,zero,8609c <_dtoa_r+0x132c>
   85244:	58bfffc4 	addi	r2,r11,-1
   85248:	100490fa 	slli	r2,r2,3
   8524c:	00c00274 	movhi	r3,9
   85250:	18c21004 	addi	r3,r3,2112
   85254:	0009883a 	mov	r4,zero
   85258:	1885883a 	add	r2,r3,r2
   8525c:	11800017 	ldw	r6,0(r2)
   85260:	11c00117 	ldw	r7,4(r2)
   85264:	d8800717 	ldw	r2,28(sp)
   85268:	014ff834 	movhi	r5,16352
   8526c:	dac01615 	stw	r11,88(sp)
   85270:	15800044 	addi	r22,r2,1
   85274:	00818b40 	call	818b4 <__divdf3>
   85278:	880d883a 	mov	r6,r17
   8527c:	b80f883a 	mov	r7,r23
   85280:	1009883a 	mov	r4,r2
   85284:	180b883a 	mov	r5,r3
   85288:	008d9f00 	call	8d9f0 <__subdf3>
   8528c:	a00b883a 	mov	r5,r20
   85290:	9809883a 	mov	r4,r19
   85294:	102f883a 	mov	r23,r2
   85298:	d8c01015 	stw	r3,64(sp)
   8529c:	008e2780 	call	8e278 <__fixdfsi>
   852a0:	1009883a 	mov	r4,r2
   852a4:	d8801515 	stw	r2,84(sp)
   852a8:	00822500 	call	82250 <__floatsidf>
   852ac:	9809883a 	mov	r4,r19
   852b0:	a00b883a 	mov	r5,r20
   852b4:	100d883a 	mov	r6,r2
   852b8:	180f883a 	mov	r7,r3
   852bc:	008d9f00 	call	8d9f0 <__subdf3>
   852c0:	da401517 	ldw	r9,84(sp)
   852c4:	1827883a 	mov	r19,r3
   852c8:	d8c00717 	ldw	r3,28(sp)
   852cc:	d9401017 	ldw	r5,64(sp)
   852d0:	4a400c04 	addi	r9,r9,48
   852d4:	1023883a 	mov	r17,r2
   852d8:	1a400005 	stb	r9,0(r3)
   852dc:	b809883a 	mov	r4,r23
   852e0:	880d883a 	mov	r6,r17
   852e4:	980f883a 	mov	r7,r19
   852e8:	4829883a 	mov	r20,r9
   852ec:	008d02c0 	call	8d02c <__gedf2>
   852f0:	00842216 	blt	zero,r2,8637c <_dtoa_r+0x160c>
   852f4:	0009883a 	mov	r4,zero
   852f8:	014ffc34 	movhi	r5,16368
   852fc:	880d883a 	mov	r6,r17
   85300:	980f883a 	mov	r7,r19
   85304:	008d9f00 	call	8d9f0 <__subdf3>
   85308:	d9401017 	ldw	r5,64(sp)
   8530c:	b809883a 	mov	r4,r23
   85310:	100d883a 	mov	r6,r2
   85314:	180f883a 	mov	r7,r3
   85318:	008d02c0 	call	8d02c <__gedf2>
   8531c:	dac01617 	ldw	r11,88(sp)
   85320:	00841316 	blt	zero,r2,86370 <_dtoa_r+0x1600>
   85324:	00800044 	movi	r2,1
   85328:	12c06c0e 	bge	r2,r11,854dc <_dtoa_r+0x76c>
   8532c:	d9000717 	ldw	r4,28(sp)
   85330:	dd401215 	stw	r21,72(sp)
   85334:	dc001115 	stw	r16,68(sp)
   85338:	22d7883a 	add	r11,r4,r11
   8533c:	dc801415 	stw	r18,80(sp)
   85340:	582b883a 	mov	r21,r11
   85344:	b021883a 	mov	r16,r22
   85348:	dc801017 	ldw	r18,64(sp)
   8534c:	00000906 	br	85374 <_dtoa_r+0x604>
   85350:	008d9f00 	call	8d9f0 <__subdf3>
   85354:	1009883a 	mov	r4,r2
   85358:	180b883a 	mov	r5,r3
   8535c:	b80d883a 	mov	r6,r23
   85360:	900f883a 	mov	r7,r18
   85364:	008d1040 	call	8d104 <__ledf2>
   85368:	1003ea16 	blt	r2,zero,86314 <_dtoa_r+0x15a4>
   8536c:	b543ed26 	beq	r22,r21,86324 <_dtoa_r+0x15b4>
   85370:	b021883a 	mov	r16,r22
   85374:	b809883a 	mov	r4,r23
   85378:	900b883a 	mov	r5,r18
   8537c:	000d883a 	mov	r6,zero
   85380:	01d00934 	movhi	r7,16420
   85384:	008d1f00 	call	8d1f0 <__muldf3>
   85388:	000d883a 	mov	r6,zero
   8538c:	01d00934 	movhi	r7,16420
   85390:	8809883a 	mov	r4,r17
   85394:	980b883a 	mov	r5,r19
   85398:	102f883a 	mov	r23,r2
   8539c:	1825883a 	mov	r18,r3
   853a0:	008d1f00 	call	8d1f0 <__muldf3>
   853a4:	180b883a 	mov	r5,r3
   853a8:	1009883a 	mov	r4,r2
   853ac:	1823883a 	mov	r17,r3
   853b0:	1027883a 	mov	r19,r2
   853b4:	008e2780 	call	8e278 <__fixdfsi>
   853b8:	1009883a 	mov	r4,r2
   853bc:	1029883a 	mov	r20,r2
   853c0:	00822500 	call	82250 <__floatsidf>
   853c4:	9809883a 	mov	r4,r19
   853c8:	880b883a 	mov	r5,r17
   853cc:	100d883a 	mov	r6,r2
   853d0:	180f883a 	mov	r7,r3
   853d4:	008d9f00 	call	8d9f0 <__subdf3>
   853d8:	a5000c04 	addi	r20,r20,48
   853dc:	1009883a 	mov	r4,r2
   853e0:	180b883a 	mov	r5,r3
   853e4:	b80d883a 	mov	r6,r23
   853e8:	900f883a 	mov	r7,r18
   853ec:	85000005 	stb	r20,0(r16)
   853f0:	1023883a 	mov	r17,r2
   853f4:	1827883a 	mov	r19,r3
   853f8:	008d1040 	call	8d104 <__ledf2>
   853fc:	b5800044 	addi	r22,r22,1
   85400:	0009883a 	mov	r4,zero
   85404:	014ffc34 	movhi	r5,16368
   85408:	880d883a 	mov	r6,r17
   8540c:	980f883a 	mov	r7,r19
   85410:	103fcf0e 	bge	r2,zero,85350 <_gp+0xfffeaf5c>
   85414:	d8c01317 	ldw	r3,76(sp)
   85418:	dc001117 	ldw	r16,68(sp)
   8541c:	d8c00615 	stw	r3,24(sp)
   85420:	8009883a 	mov	r4,r16
   85424:	e00b883a 	mov	r5,fp
   85428:	00882080 	call	88208 <_Bfree>
   8542c:	d9800617 	ldw	r6,24(sp)
   85430:	d9c02217 	ldw	r7,136(sp)
   85434:	b0000005 	stb	zero,0(r22)
   85438:	30800044 	addi	r2,r6,1
   8543c:	38800015 	stw	r2,0(r7)
   85440:	d8802417 	ldw	r2,144(sp)
   85444:	10026426 	beq	r2,zero,85dd8 <_dtoa_r+0x1068>
   85448:	15800015 	stw	r22,0(r2)
   8544c:	d8800717 	ldw	r2,28(sp)
   85450:	003e7606 	br	84e2c <_gp+0xfffeaa38>
   85454:	00800434 	movhi	r2,16
   85458:	10bfffc4 	addi	r2,r2,-1
   8545c:	88a2703a 	and	r17,r17,r2
   85460:	883e831e 	bne	r17,zero,84e70 <_gp+0xfffeaa7c>
   85464:	00800274 	movhi	r2,9
   85468:	1081f104 	addi	r2,r2,1988
   8546c:	003e8206 	br	84e78 <_gp+0xfffeaa84>
   85470:	10c00204 	addi	r3,r2,8
   85474:	003e8506 	br	84e8c <_gp+0xfffeaa98>
   85478:	01400434 	movhi	r5,16
   8547c:	297fffc4 	addi	r5,r5,-1
   85480:	914a703a 	and	r5,r18,r5
   85484:	d9000317 	ldw	r4,12(sp)
   85488:	294ffc34 	orhi	r5,r5,16368
   8548c:	a53f0044 	addi	r20,r20,-1023
   85490:	dd400217 	ldw	r21,8(sp)
   85494:	d8000f15 	stw	zero,60(sp)
   85498:	003ea306 	br	84f28 <_gp+0xfffeab34>
   8549c:	00800274 	movhi	r2,9
   854a0:	1081e804 	addi	r2,r2,1952
   854a4:	003e6106 	br	84e2c <_gp+0xfffeaa38>
   854a8:	d8000415 	stw	zero,16(sp)
   854ac:	8009883a 	mov	r4,r16
   854b0:	80001115 	stw	zero,68(r16)
   854b4:	000b883a 	mov	r5,zero
   854b8:	00881600 	call	88160 <_Balloc>
   854bc:	00ffffc4 	movi	r3,-1
   854c0:	01000044 	movi	r4,1
   854c4:	d8800715 	stw	r2,28(sp)
   854c8:	d8c00d15 	stw	r3,52(sp)
   854cc:	80801015 	stw	r2,64(r16)
   854d0:	d8002115 	stw	zero,132(sp)
   854d4:	d8c00915 	stw	r3,36(sp)
   854d8:	d9000c15 	stw	r4,48(sp)
   854dc:	d8800117 	ldw	r2,4(sp)
   854e0:	10008e16 	blt	r2,zero,8571c <_dtoa_r+0x9ac>
   854e4:	d9000617 	ldw	r4,24(sp)
   854e8:	00c00384 	movi	r3,14
   854ec:	19008b16 	blt	r3,r4,8571c <_dtoa_r+0x9ac>
   854f0:	200490fa 	slli	r2,r4,3
   854f4:	d9802117 	ldw	r6,132(sp)
   854f8:	00c00274 	movhi	r3,9
   854fc:	18c21004 	addi	r3,r3,2112
   85500:	1885883a 	add	r2,r3,r2
   85504:	14400017 	ldw	r17,0(r2)
   85508:	14c00117 	ldw	r19,4(r2)
   8550c:	3001be16 	blt	r6,zero,85c08 <_dtoa_r+0xe98>
   85510:	d9000317 	ldw	r4,12(sp)
   85514:	880d883a 	mov	r6,r17
   85518:	980f883a 	mov	r7,r19
   8551c:	900b883a 	mov	r5,r18
   85520:	00818b40 	call	818b4 <__divdf3>
   85524:	180b883a 	mov	r5,r3
   85528:	1009883a 	mov	r4,r2
   8552c:	008e2780 	call	8e278 <__fixdfsi>
   85530:	1009883a 	mov	r4,r2
   85534:	102f883a 	mov	r23,r2
   85538:	00822500 	call	82250 <__floatsidf>
   8553c:	1009883a 	mov	r4,r2
   85540:	180b883a 	mov	r5,r3
   85544:	880d883a 	mov	r6,r17
   85548:	980f883a 	mov	r7,r19
   8554c:	008d1f00 	call	8d1f0 <__muldf3>
   85550:	d9000317 	ldw	r4,12(sp)
   85554:	900b883a 	mov	r5,r18
   85558:	100d883a 	mov	r6,r2
   8555c:	180f883a 	mov	r7,r3
   85560:	008d9f00 	call	8d9f0 <__subdf3>
   85564:	d9c00717 	ldw	r7,28(sp)
   85568:	1009883a 	mov	r4,r2
   8556c:	b8800c04 	addi	r2,r23,48
   85570:	38800005 	stb	r2,0(r7)
   85574:	3d800044 	addi	r22,r7,1
   85578:	d9c00917 	ldw	r7,36(sp)
   8557c:	01800044 	movi	r6,1
   85580:	180b883a 	mov	r5,r3
   85584:	2005883a 	mov	r2,r4
   85588:	39803e26 	beq	r7,r6,85684 <_dtoa_r+0x914>
   8558c:	000d883a 	mov	r6,zero
   85590:	01d00934 	movhi	r7,16420
   85594:	008d1f00 	call	8d1f0 <__muldf3>
   85598:	1009883a 	mov	r4,r2
   8559c:	180b883a 	mov	r5,r3
   855a0:	000d883a 	mov	r6,zero
   855a4:	000f883a 	mov	r7,zero
   855a8:	1029883a 	mov	r20,r2
   855ac:	182b883a 	mov	r21,r3
   855b0:	008cfa80 	call	8cfa8 <__eqdf2>
   855b4:	103f9a26 	beq	r2,zero,85420 <_gp+0xfffeb02c>
   855b8:	d8c00717 	ldw	r3,28(sp)
   855bc:	d9000917 	ldw	r4,36(sp)
   855c0:	b025883a 	mov	r18,r22
   855c4:	df000415 	stw	fp,16(sp)
   855c8:	1905883a 	add	r2,r3,r4
   855cc:	15ffffc4 	addi	r23,r2,-1
   855d0:	dc000315 	stw	r16,12(sp)
   855d4:	00000a06 	br	85600 <_dtoa_r+0x890>
   855d8:	008d1f00 	call	8d1f0 <__muldf3>
   855dc:	1009883a 	mov	r4,r2
   855e0:	180b883a 	mov	r5,r3
   855e4:	000d883a 	mov	r6,zero
   855e8:	000f883a 	mov	r7,zero
   855ec:	1029883a 	mov	r20,r2
   855f0:	182b883a 	mov	r21,r3
   855f4:	008cfa80 	call	8cfa8 <__eqdf2>
   855f8:	10021926 	beq	r2,zero,85e60 <_dtoa_r+0x10f0>
   855fc:	e025883a 	mov	r18,fp
   85600:	880d883a 	mov	r6,r17
   85604:	980f883a 	mov	r7,r19
   85608:	a009883a 	mov	r4,r20
   8560c:	a80b883a 	mov	r5,r21
   85610:	00818b40 	call	818b4 <__divdf3>
   85614:	180b883a 	mov	r5,r3
   85618:	1009883a 	mov	r4,r2
   8561c:	008e2780 	call	8e278 <__fixdfsi>
   85620:	1009883a 	mov	r4,r2
   85624:	1021883a 	mov	r16,r2
   85628:	00822500 	call	82250 <__floatsidf>
   8562c:	1009883a 	mov	r4,r2
   85630:	180b883a 	mov	r5,r3
   85634:	880d883a 	mov	r6,r17
   85638:	980f883a 	mov	r7,r19
   8563c:	008d1f00 	call	8d1f0 <__muldf3>
   85640:	a009883a 	mov	r4,r20
   85644:	a80b883a 	mov	r5,r21
   85648:	100d883a 	mov	r6,r2
   8564c:	180f883a 	mov	r7,r3
   85650:	008d9f00 	call	8d9f0 <__subdf3>
   85654:	82800c04 	addi	r10,r16,48
   85658:	97000044 	addi	fp,r18,1
   8565c:	92800005 	stb	r10,0(r18)
   85660:	000d883a 	mov	r6,zero
   85664:	01d00934 	movhi	r7,16420
   85668:	1009883a 	mov	r4,r2
   8566c:	180b883a 	mov	r5,r3
   85670:	e02d883a 	mov	r22,fp
   85674:	95ffd81e 	bne	r18,r23,855d8 <_gp+0xfffeb1e4>
   85678:	802f883a 	mov	r23,r16
   8567c:	df000417 	ldw	fp,16(sp)
   85680:	dc000317 	ldw	r16,12(sp)
   85684:	1009883a 	mov	r4,r2
   85688:	180b883a 	mov	r5,r3
   8568c:	100d883a 	mov	r6,r2
   85690:	180f883a 	mov	r7,r3
   85694:	008c72c0 	call	8c72c <__adddf3>
   85698:	8809883a 	mov	r4,r17
   8569c:	980b883a 	mov	r5,r19
   856a0:	100d883a 	mov	r6,r2
   856a4:	180f883a 	mov	r7,r3
   856a8:	1025883a 	mov	r18,r2
   856ac:	1829883a 	mov	r20,r3
   856b0:	008d1040 	call	8d104 <__ledf2>
   856b4:	10000816 	blt	r2,zero,856d8 <_dtoa_r+0x968>
   856b8:	8809883a 	mov	r4,r17
   856bc:	980b883a 	mov	r5,r19
   856c0:	900d883a 	mov	r6,r18
   856c4:	a00f883a 	mov	r7,r20
   856c8:	008cfa80 	call	8cfa8 <__eqdf2>
   856cc:	103f541e 	bne	r2,zero,85420 <_gp+0xfffeb02c>
   856d0:	bdc0004c 	andi	r23,r23,1
   856d4:	b83f5226 	beq	r23,zero,85420 <_gp+0xfffeb02c>
   856d8:	b53fffc3 	ldbu	r20,-1(r22)
   856dc:	b0ffff84 	addi	r3,r22,-2
   856e0:	01400e44 	movi	r5,57
   856e4:	d9800717 	ldw	r6,28(sp)
   856e8:	00000406 	br	856fc <_dtoa_r+0x98c>
   856ec:	30824326 	beq	r6,r2,85ffc <_dtoa_r+0x128c>
   856f0:	1d000003 	ldbu	r20,0(r3)
   856f4:	102d883a 	mov	r22,r2
   856f8:	18ffffc4 	addi	r3,r3,-1
   856fc:	a1003fcc 	andi	r4,r20,255
   85700:	2100201c 	xori	r4,r4,128
   85704:	213fe004 	addi	r4,r4,-128
   85708:	b0bfffc4 	addi	r2,r22,-1
   8570c:	217ff726 	beq	r4,r5,856ec <_gp+0xfffeb2f8>
   85710:	a2400044 	addi	r9,r20,1
   85714:	12400005 	stb	r9,0(r2)
   85718:	003f4106 	br	85420 <_gp+0xfffeb02c>
   8571c:	d9000c17 	ldw	r4,48(sp)
   85720:	2000be26 	beq	r4,zero,85a1c <_dtoa_r+0xcac>
   85724:	d9800417 	ldw	r6,16(sp)
   85728:	00c00044 	movi	r3,1
   8572c:	19815e0e 	bge	r3,r6,85ca8 <_dtoa_r+0xf38>
   85730:	d8800917 	ldw	r2,36(sp)
   85734:	d8c00a17 	ldw	r3,40(sp)
   85738:	153fffc4 	addi	r20,r2,-1
   8573c:	1d01f816 	blt	r3,r20,85f20 <_dtoa_r+0x11b0>
   85740:	1d29c83a 	sub	r20,r3,r20
   85744:	d9c00917 	ldw	r7,36(sp)
   85748:	3802ad16 	blt	r7,zero,86200 <_dtoa_r+0x1490>
   8574c:	dcc00817 	ldw	r19,32(sp)
   85750:	d8800917 	ldw	r2,36(sp)
   85754:	d8c00817 	ldw	r3,32(sp)
   85758:	8009883a 	mov	r4,r16
   8575c:	01400044 	movi	r5,1
   85760:	1887883a 	add	r3,r3,r2
   85764:	d8c00815 	stw	r3,32(sp)
   85768:	a8ab883a 	add	r21,r21,r2
   8576c:	00885900 	call	88590 <__i2b>
   85770:	1023883a 	mov	r17,r2
   85774:	98000826 	beq	r19,zero,85798 <_dtoa_r+0xa28>
   85778:	0540070e 	bge	zero,r21,85798 <_dtoa_r+0xa28>
   8577c:	a805883a 	mov	r2,r21
   85780:	9d411716 	blt	r19,r21,85be0 <_dtoa_r+0xe70>
   85784:	d9000817 	ldw	r4,32(sp)
   85788:	98a7c83a 	sub	r19,r19,r2
   8578c:	a8abc83a 	sub	r21,r21,r2
   85790:	2089c83a 	sub	r4,r4,r2
   85794:	d9000815 	stw	r4,32(sp)
   85798:	d9800a17 	ldw	r6,40(sp)
   8579c:	0180140e 	bge	zero,r6,857f0 <_dtoa_r+0xa80>
   857a0:	d9c00c17 	ldw	r7,48(sp)
   857a4:	3801d626 	beq	r7,zero,85f00 <_dtoa_r+0x1190>
   857a8:	05000e0e 	bge	zero,r20,857e4 <_dtoa_r+0xa74>
   857ac:	880b883a 	mov	r5,r17
   857b0:	8009883a 	mov	r4,r16
   857b4:	a00d883a 	mov	r6,r20
   857b8:	00888380 	call	88838 <__pow5mult>
   857bc:	e00d883a 	mov	r6,fp
   857c0:	8009883a 	mov	r4,r16
   857c4:	100b883a 	mov	r5,r2
   857c8:	1023883a 	mov	r17,r2
   857cc:	00885cc0 	call	885cc <__multiply>
   857d0:	102d883a 	mov	r22,r2
   857d4:	e00b883a 	mov	r5,fp
   857d8:	8009883a 	mov	r4,r16
   857dc:	00882080 	call	88208 <_Bfree>
   857e0:	b039883a 	mov	fp,r22
   857e4:	d8800a17 	ldw	r2,40(sp)
   857e8:	150dc83a 	sub	r6,r2,r20
   857ec:	30011f1e 	bne	r6,zero,85c6c <_dtoa_r+0xefc>
   857f0:	8009883a 	mov	r4,r16
   857f4:	01400044 	movi	r5,1
   857f8:	00885900 	call	88590 <__i2b>
   857fc:	d8c00b17 	ldw	r3,44(sp)
   85800:	1029883a 	mov	r20,r2
   85804:	00c0050e 	bge	zero,r3,8581c <_dtoa_r+0xaac>
   85808:	8009883a 	mov	r4,r16
   8580c:	100b883a 	mov	r5,r2
   85810:	180d883a 	mov	r6,r3
   85814:	00888380 	call	88838 <__pow5mult>
   85818:	1029883a 	mov	r20,r2
   8581c:	d9000417 	ldw	r4,16(sp)
   85820:	00800044 	movi	r2,1
   85824:	1100e00e 	bge	r2,r4,85ba8 <_dtoa_r+0xe38>
   85828:	0025883a 	mov	r18,zero
   8582c:	d8800b17 	ldw	r2,44(sp)
   85830:	10015f1e 	bne	r2,zero,85db0 <_dtoa_r+0x1040>
   85834:	00800044 	movi	r2,1
   85838:	1545883a 	add	r2,r2,r21
   8583c:	108007cc 	andi	r2,r2,31
   85840:	10007a26 	beq	r2,zero,85a2c <_dtoa_r+0xcbc>
   85844:	01000804 	movi	r4,32
   85848:	2089c83a 	sub	r4,r4,r2
   8584c:	00c00104 	movi	r3,4
   85850:	1902d20e 	bge	r3,r4,8639c <_dtoa_r+0x162c>
   85854:	00c00704 	movi	r3,28
   85858:	1885c83a 	sub	r2,r3,r2
   8585c:	d8c00817 	ldw	r3,32(sp)
   85860:	98a7883a 	add	r19,r19,r2
   85864:	a8ab883a 	add	r21,r21,r2
   85868:	1887883a 	add	r3,r3,r2
   8586c:	d8c00815 	stw	r3,32(sp)
   85870:	d9800817 	ldw	r6,32(sp)
   85874:	0180040e 	bge	zero,r6,85888 <_dtoa_r+0xb18>
   85878:	e00b883a 	mov	r5,fp
   8587c:	8009883a 	mov	r4,r16
   85880:	00889800 	call	88980 <__lshift>
   85884:	1039883a 	mov	fp,r2
   85888:	0540050e 	bge	zero,r21,858a0 <_dtoa_r+0xb30>
   8588c:	a00b883a 	mov	r5,r20
   85890:	8009883a 	mov	r4,r16
   85894:	a80d883a 	mov	r6,r21
   85898:	00889800 	call	88980 <__lshift>
   8589c:	1029883a 	mov	r20,r2
   858a0:	d9c00e17 	ldw	r7,56(sp)
   858a4:	3801301e 	bne	r7,zero,85d68 <_dtoa_r+0xff8>
   858a8:	d9c00917 	ldw	r7,36(sp)
   858ac:	01c1500e 	bge	zero,r7,85df0 <_dtoa_r+0x1080>
   858b0:	d8800c17 	ldw	r2,48(sp)
   858b4:	10006b1e 	bne	r2,zero,85a64 <_dtoa_r+0xcf4>
   858b8:	dc800717 	ldw	r18,28(sp)
   858bc:	dcc00917 	ldw	r19,36(sp)
   858c0:	902b883a 	mov	r21,r18
   858c4:	00000206 	br	858d0 <_dtoa_r+0xb60>
   858c8:	00882300 	call	88230 <__multadd>
   858cc:	1039883a 	mov	fp,r2
   858d0:	e009883a 	mov	r4,fp
   858d4:	a00b883a 	mov	r5,r20
   858d8:	0084b480 	call	84b48 <quorem>
   858dc:	10800c04 	addi	r2,r2,48
   858e0:	90800005 	stb	r2,0(r18)
   858e4:	94800044 	addi	r18,r18,1
   858e8:	9547c83a 	sub	r3,r18,r21
   858ec:	8009883a 	mov	r4,r16
   858f0:	e00b883a 	mov	r5,fp
   858f4:	01800284 	movi	r6,10
   858f8:	000f883a 	mov	r7,zero
   858fc:	1cfff216 	blt	r3,r19,858c8 <_gp+0xfffeb4d4>
   85900:	102f883a 	mov	r23,r2
   85904:	d8800917 	ldw	r2,36(sp)
   85908:	0082410e 	bge	zero,r2,86210 <_dtoa_r+0x14a0>
   8590c:	d9000717 	ldw	r4,28(sp)
   85910:	002b883a 	mov	r21,zero
   85914:	20ad883a 	add	r22,r4,r2
   85918:	e00b883a 	mov	r5,fp
   8591c:	8009883a 	mov	r4,r16
   85920:	01800044 	movi	r6,1
   85924:	00889800 	call	88980 <__lshift>
   85928:	1009883a 	mov	r4,r2
   8592c:	a00b883a 	mov	r5,r20
   85930:	1039883a 	mov	fp,r2
   85934:	0088ad00 	call	88ad0 <__mcmp>
   85938:	0080d10e 	bge	zero,r2,85c80 <_dtoa_r+0xf10>
   8593c:	b13fffc3 	ldbu	r4,-1(r22)
   85940:	b0ffff84 	addi	r3,r22,-2
   85944:	01800e44 	movi	r6,57
   85948:	d9c00717 	ldw	r7,28(sp)
   8594c:	00000406 	br	85960 <_dtoa_r+0xbf0>
   85950:	38813c26 	beq	r7,r2,85e44 <_dtoa_r+0x10d4>
   85954:	19000003 	ldbu	r4,0(r3)
   85958:	102d883a 	mov	r22,r2
   8595c:	18ffffc4 	addi	r3,r3,-1
   85960:	21403fcc 	andi	r5,r4,255
   85964:	2940201c 	xori	r5,r5,128
   85968:	297fe004 	addi	r5,r5,-128
   8596c:	b0bfffc4 	addi	r2,r22,-1
   85970:	29bff726 	beq	r5,r6,85950 <_gp+0xfffeb55c>
   85974:	21000044 	addi	r4,r4,1
   85978:	11000005 	stb	r4,0(r2)
   8597c:	8009883a 	mov	r4,r16
   85980:	a00b883a 	mov	r5,r20
   85984:	00882080 	call	88208 <_Bfree>
   85988:	883ea526 	beq	r17,zero,85420 <_gp+0xfffeb02c>
   8598c:	a8000426 	beq	r21,zero,859a0 <_dtoa_r+0xc30>
   85990:	ac400326 	beq	r21,r17,859a0 <_dtoa_r+0xc30>
   85994:	8009883a 	mov	r4,r16
   85998:	a80b883a 	mov	r5,r21
   8599c:	00882080 	call	88208 <_Bfree>
   859a0:	8009883a 	mov	r4,r16
   859a4:	880b883a 	mov	r5,r17
   859a8:	00882080 	call	88208 <_Bfree>
   859ac:	003e9c06 	br	85420 <_gp+0xfffeb02c>
   859b0:	01c00044 	movi	r7,1
   859b4:	d9c00e15 	stw	r7,56(sp)
   859b8:	003d9906 	br	85020 <_gp+0xfffeac2c>
   859bc:	d8c00817 	ldw	r3,32(sp)
   859c0:	d9000617 	ldw	r4,24(sp)
   859c4:	d8000b15 	stw	zero,44(sp)
   859c8:	1907c83a 	sub	r3,r3,r4
   859cc:	010dc83a 	sub	r6,zero,r4
   859d0:	d8c00815 	stw	r3,32(sp)
   859d4:	d9800a15 	stw	r6,40(sp)
   859d8:	003d9a06 	br	85044 <_gp+0xfffeac50>
   859dc:	056bc83a 	sub	r21,zero,r21
   859e0:	dd400815 	stw	r21,32(sp)
   859e4:	002b883a 	mov	r21,zero
   859e8:	003d9106 	br	85030 <_gp+0xfffeac3c>
   859ec:	d9000617 	ldw	r4,24(sp)
   859f0:	00822500 	call	82250 <__floatsidf>
   859f4:	1009883a 	mov	r4,r2
   859f8:	180b883a 	mov	r5,r3
   859fc:	980d883a 	mov	r6,r19
   85a00:	880f883a 	mov	r7,r17
   85a04:	008cfa80 	call	8cfa8 <__eqdf2>
   85a08:	103d7426 	beq	r2,zero,84fdc <_gp+0xfffeabe8>
   85a0c:	d8c00617 	ldw	r3,24(sp)
   85a10:	18ffffc4 	addi	r3,r3,-1
   85a14:	d8c00615 	stw	r3,24(sp)
   85a18:	003d7006 	br	84fdc <_gp+0xfffeabe8>
   85a1c:	dd000a17 	ldw	r20,40(sp)
   85a20:	dcc00817 	ldw	r19,32(sp)
   85a24:	0023883a 	mov	r17,zero
   85a28:	003f5206 	br	85774 <_gp+0xfffeb380>
   85a2c:	00800704 	movi	r2,28
   85a30:	d9000817 	ldw	r4,32(sp)
   85a34:	98a7883a 	add	r19,r19,r2
   85a38:	a8ab883a 	add	r21,r21,r2
   85a3c:	2089883a 	add	r4,r4,r2
   85a40:	d9000815 	stw	r4,32(sp)
   85a44:	003f8a06 	br	85870 <_gp+0xfffeb47c>
   85a48:	d9c00317 	ldw	r7,12(sp)
   85a4c:	013efb84 	movi	r4,-1042
   85a50:	2509c83a 	sub	r4,r4,r20
   85a54:	3908983a 	sll	r4,r7,r4
   85a58:	003d2c06 	br	84f0c <_gp+0xfffeab18>
   85a5c:	d8000e15 	stw	zero,56(sp)
   85a60:	003d6f06 	br	85020 <_gp+0xfffeac2c>
   85a64:	04c0050e 	bge	zero,r19,85a7c <_dtoa_r+0xd0c>
   85a68:	880b883a 	mov	r5,r17
   85a6c:	8009883a 	mov	r4,r16
   85a70:	980d883a 	mov	r6,r19
   85a74:	00889800 	call	88980 <__lshift>
   85a78:	1023883a 	mov	r17,r2
   85a7c:	9001681e 	bne	r18,zero,86020 <_dtoa_r+0x12b0>
   85a80:	8827883a 	mov	r19,r17
   85a84:	d8c00717 	ldw	r3,28(sp)
   85a88:	d9000917 	ldw	r4,36(sp)
   85a8c:	1dffffc4 	addi	r23,r3,-1
   85a90:	1825883a 	mov	r18,r3
   85a94:	d8c00317 	ldw	r3,12(sp)
   85a98:	b92f883a 	add	r23,r23,r4
   85a9c:	ddc00515 	stw	r23,20(sp)
   85aa0:	18c0004c 	andi	r3,r3,1
   85aa4:	d8c00315 	stw	r3,12(sp)
   85aa8:	e009883a 	mov	r4,fp
   85aac:	a00b883a 	mov	r5,r20
   85ab0:	0084b480 	call	84b48 <quorem>
   85ab4:	e009883a 	mov	r4,fp
   85ab8:	880b883a 	mov	r5,r17
   85abc:	102d883a 	mov	r22,r2
   85ac0:	0088ad00 	call	88ad0 <__mcmp>
   85ac4:	8009883a 	mov	r4,r16
   85ac8:	a00b883a 	mov	r5,r20
   85acc:	980d883a 	mov	r6,r19
   85ad0:	102b883a 	mov	r21,r2
   85ad4:	0088b300 	call	88b30 <__mdiff>
   85ad8:	1007883a 	mov	r3,r2
   85adc:	10800317 	ldw	r2,12(r2)
   85ae0:	b5c00c04 	addi	r23,r22,48
   85ae4:	10009b1e 	bne	r2,zero,85d54 <_dtoa_r+0xfe4>
   85ae8:	180b883a 	mov	r5,r3
   85aec:	e009883a 	mov	r4,fp
   85af0:	d8c01515 	stw	r3,84(sp)
   85af4:	0088ad00 	call	88ad0 <__mcmp>
   85af8:	d8c01517 	ldw	r3,84(sp)
   85afc:	8009883a 	mov	r4,r16
   85b00:	d8801515 	stw	r2,84(sp)
   85b04:	180b883a 	mov	r5,r3
   85b08:	00882080 	call	88208 <_Bfree>
   85b0c:	d8801517 	ldw	r2,84(sp)
   85b10:	1000041e 	bne	r2,zero,85b24 <_dtoa_r+0xdb4>
   85b14:	d9000417 	ldw	r4,16(sp)
   85b18:	2000021e 	bne	r4,zero,85b24 <_dtoa_r+0xdb4>
   85b1c:	d8c00317 	ldw	r3,12(sp)
   85b20:	18007926 	beq	r3,zero,85d08 <_dtoa_r+0xf98>
   85b24:	a8006616 	blt	r21,zero,85cc0 <_dtoa_r+0xf50>
   85b28:	a800041e 	bne	r21,zero,85b3c <_dtoa_r+0xdcc>
   85b2c:	d9000417 	ldw	r4,16(sp)
   85b30:	2000021e 	bne	r4,zero,85b3c <_dtoa_r+0xdcc>
   85b34:	d8c00317 	ldw	r3,12(sp)
   85b38:	18006126 	beq	r3,zero,85cc0 <_dtoa_r+0xf50>
   85b3c:	00814916 	blt	zero,r2,86064 <_dtoa_r+0x12f4>
   85b40:	d8c00517 	ldw	r3,20(sp)
   85b44:	95400044 	addi	r21,r18,1
   85b48:	95c00005 	stb	r23,0(r18)
   85b4c:	a82d883a 	mov	r22,r21
   85b50:	90c14c26 	beq	r18,r3,86084 <_dtoa_r+0x1314>
   85b54:	e00b883a 	mov	r5,fp
   85b58:	8009883a 	mov	r4,r16
   85b5c:	01800284 	movi	r6,10
   85b60:	000f883a 	mov	r7,zero
   85b64:	00882300 	call	88230 <__multadd>
   85b68:	1039883a 	mov	fp,r2
   85b6c:	8cc07026 	beq	r17,r19,85d30 <_dtoa_r+0xfc0>
   85b70:	880b883a 	mov	r5,r17
   85b74:	01800284 	movi	r6,10
   85b78:	000f883a 	mov	r7,zero
   85b7c:	8009883a 	mov	r4,r16
   85b80:	00882300 	call	88230 <__multadd>
   85b84:	980b883a 	mov	r5,r19
   85b88:	8009883a 	mov	r4,r16
   85b8c:	01800284 	movi	r6,10
   85b90:	000f883a 	mov	r7,zero
   85b94:	1023883a 	mov	r17,r2
   85b98:	00882300 	call	88230 <__multadd>
   85b9c:	1027883a 	mov	r19,r2
   85ba0:	a825883a 	mov	r18,r21
   85ba4:	003fc006 	br	85aa8 <_gp+0xfffeb6b4>
   85ba8:	d9800317 	ldw	r6,12(sp)
   85bac:	303f1e1e 	bne	r6,zero,85828 <_gp+0xfffeb434>
   85bb0:	00c00434 	movhi	r3,16
   85bb4:	18ffffc4 	addi	r3,r3,-1
   85bb8:	90c6703a 	and	r3,r18,r3
   85bbc:	183f1a1e 	bne	r3,zero,85828 <_gp+0xfffeb434>
   85bc0:	949ffc2c 	andhi	r18,r18,32752
   85bc4:	903f1826 	beq	r18,zero,85828 <_gp+0xfffeb434>
   85bc8:	d9c00817 	ldw	r7,32(sp)
   85bcc:	a8ab883a 	add	r21,r21,r2
   85bd0:	1025883a 	mov	r18,r2
   85bd4:	388f883a 	add	r7,r7,r2
   85bd8:	d9c00815 	stw	r7,32(sp)
   85bdc:	003f1306 	br	8582c <_gp+0xfffeb438>
   85be0:	9805883a 	mov	r2,r19
   85be4:	003ee706 	br	85784 <_gp+0xfffeb390>
   85be8:	01800044 	movi	r6,1
   85bec:	d9800c15 	stw	r6,48(sp)
   85bf0:	d8802117 	ldw	r2,132(sp)
   85bf4:	0080da0e 	bge	zero,r2,85f60 <_dtoa_r+0x11f0>
   85bf8:	100d883a 	mov	r6,r2
   85bfc:	d8800d15 	stw	r2,52(sp)
   85c00:	d8800915 	stw	r2,36(sp)
   85c04:	003d2a06 	br	850b0 <_gp+0xfffeacbc>
   85c08:	d8800917 	ldw	r2,36(sp)
   85c0c:	00be4016 	blt	zero,r2,85510 <_gp+0xfffeb11c>
   85c10:	1000b81e 	bne	r2,zero,85ef4 <_dtoa_r+0x1184>
   85c14:	8809883a 	mov	r4,r17
   85c18:	980b883a 	mov	r5,r19
   85c1c:	000d883a 	mov	r6,zero
   85c20:	01d00534 	movhi	r7,16404
   85c24:	008d1f00 	call	8d1f0 <__muldf3>
   85c28:	d9800317 	ldw	r6,12(sp)
   85c2c:	1009883a 	mov	r4,r2
   85c30:	180b883a 	mov	r5,r3
   85c34:	900f883a 	mov	r7,r18
   85c38:	008d02c0 	call	8d02c <__gedf2>
   85c3c:	0029883a 	mov	r20,zero
   85c40:	0023883a 	mov	r17,zero
   85c44:	10007716 	blt	r2,zero,85e24 <_dtoa_r+0x10b4>
   85c48:	d9002117 	ldw	r4,132(sp)
   85c4c:	dd800717 	ldw	r22,28(sp)
   85c50:	0108303a 	nor	r4,zero,r4
   85c54:	d9000615 	stw	r4,24(sp)
   85c58:	8009883a 	mov	r4,r16
   85c5c:	a00b883a 	mov	r5,r20
   85c60:	00882080 	call	88208 <_Bfree>
   85c64:	883f4e1e 	bne	r17,zero,859a0 <_gp+0xfffeb5ac>
   85c68:	003ded06 	br	85420 <_gp+0xfffeb02c>
   85c6c:	e00b883a 	mov	r5,fp
   85c70:	8009883a 	mov	r4,r16
   85c74:	00888380 	call	88838 <__pow5mult>
   85c78:	1039883a 	mov	fp,r2
   85c7c:	003edc06 	br	857f0 <_gp+0xfffeb3fc>
   85c80:	1000021e 	bne	r2,zero,85c8c <_dtoa_r+0xf1c>
   85c84:	ba40004c 	andi	r9,r23,1
   85c88:	483f2c1e 	bne	r9,zero,8593c <_gp+0xfffeb548>
   85c8c:	01000c04 	movi	r4,48
   85c90:	00000106 	br	85c98 <_dtoa_r+0xf28>
   85c94:	102d883a 	mov	r22,r2
   85c98:	b0bfffc4 	addi	r2,r22,-1
   85c9c:	10c00007 	ldb	r3,0(r2)
   85ca0:	193ffc26 	beq	r3,r4,85c94 <_gp+0xfffeb8a0>
   85ca4:	003f3506 	br	8597c <_gp+0xfffeb588>
   85ca8:	d9c00f17 	ldw	r7,60(sp)
   85cac:	38015a26 	beq	r7,zero,86218 <_dtoa_r+0x14a8>
   85cb0:	10810cc4 	addi	r2,r2,1075
   85cb4:	dd000a17 	ldw	r20,40(sp)
   85cb8:	dcc00817 	ldw	r19,32(sp)
   85cbc:	003ea506 	br	85754 <_gp+0xfffeb360>
   85cc0:	00800c0e 	bge	zero,r2,85cf4 <_dtoa_r+0xf84>
   85cc4:	e00b883a 	mov	r5,fp
   85cc8:	8009883a 	mov	r4,r16
   85ccc:	01800044 	movi	r6,1
   85cd0:	00889800 	call	88980 <__lshift>
   85cd4:	1009883a 	mov	r4,r2
   85cd8:	a00b883a 	mov	r5,r20
   85cdc:	1039883a 	mov	fp,r2
   85ce0:	0088ad00 	call	88ad0 <__mcmp>
   85ce4:	0081930e 	bge	zero,r2,86334 <_dtoa_r+0x15c4>
   85ce8:	00800e44 	movi	r2,57
   85cec:	b8800a26 	beq	r23,r2,85d18 <_dtoa_r+0xfa8>
   85cf0:	b5c00c44 	addi	r23,r22,49
   85cf4:	882b883a 	mov	r21,r17
   85cf8:	95800044 	addi	r22,r18,1
   85cfc:	95c00005 	stb	r23,0(r18)
   85d00:	9823883a 	mov	r17,r19
   85d04:	003f1d06 	br	8597c <_gp+0xfffeb588>
   85d08:	00800e44 	movi	r2,57
   85d0c:	b8800226 	beq	r23,r2,85d18 <_dtoa_r+0xfa8>
   85d10:	057ff716 	blt	zero,r21,85cf0 <_gp+0xfffeb8fc>
   85d14:	003ff706 	br	85cf4 <_gp+0xfffeb900>
   85d18:	01000e44 	movi	r4,57
   85d1c:	882b883a 	mov	r21,r17
   85d20:	95800044 	addi	r22,r18,1
   85d24:	91000005 	stb	r4,0(r18)
   85d28:	9823883a 	mov	r17,r19
   85d2c:	003f0406 	br	85940 <_gp+0xfffeb54c>
   85d30:	880b883a 	mov	r5,r17
   85d34:	8009883a 	mov	r4,r16
   85d38:	01800284 	movi	r6,10
   85d3c:	000f883a 	mov	r7,zero
   85d40:	00882300 	call	88230 <__multadd>
   85d44:	1023883a 	mov	r17,r2
   85d48:	1027883a 	mov	r19,r2
   85d4c:	a825883a 	mov	r18,r21
   85d50:	003f5506 	br	85aa8 <_gp+0xfffeb6b4>
   85d54:	8009883a 	mov	r4,r16
   85d58:	180b883a 	mov	r5,r3
   85d5c:	00882080 	call	88208 <_Bfree>
   85d60:	00800044 	movi	r2,1
   85d64:	003f6f06 	br	85b24 <_gp+0xfffeb730>
   85d68:	e009883a 	mov	r4,fp
   85d6c:	a00b883a 	mov	r5,r20
   85d70:	0088ad00 	call	88ad0 <__mcmp>
   85d74:	103ecc0e 	bge	r2,zero,858a8 <_gp+0xfffeb4b4>
   85d78:	e00b883a 	mov	r5,fp
   85d7c:	8009883a 	mov	r4,r16
   85d80:	01800284 	movi	r6,10
   85d84:	000f883a 	mov	r7,zero
   85d88:	00882300 	call	88230 <__multadd>
   85d8c:	1039883a 	mov	fp,r2
   85d90:	d8800617 	ldw	r2,24(sp)
   85d94:	d8c00c17 	ldw	r3,48(sp)
   85d98:	10bfffc4 	addi	r2,r2,-1
   85d9c:	d8800615 	stw	r2,24(sp)
   85da0:	1801681e 	bne	r3,zero,86344 <_dtoa_r+0x15d4>
   85da4:	d9800d17 	ldw	r6,52(sp)
   85da8:	d9800915 	stw	r6,36(sp)
   85dac:	003ebe06 	br	858a8 <_gp+0xfffeb4b4>
   85db0:	a0800417 	ldw	r2,16(r20)
   85db4:	10800104 	addi	r2,r2,4
   85db8:	1085883a 	add	r2,r2,r2
   85dbc:	1085883a 	add	r2,r2,r2
   85dc0:	a085883a 	add	r2,r20,r2
   85dc4:	11000017 	ldw	r4,0(r2)
   85dc8:	00884780 	call	88478 <__hi0bits>
   85dcc:	00c00804 	movi	r3,32
   85dd0:	1885c83a 	sub	r2,r3,r2
   85dd4:	003e9806 	br	85838 <_gp+0xfffeb444>
   85dd8:	d8800717 	ldw	r2,28(sp)
   85ddc:	003c1306 	br	84e2c <_gp+0xfffeaa38>
   85de0:	00800084 	movi	r2,2
   85de4:	18bdb11e 	bne	r3,r2,854ac <_gp+0xfffeb0b8>
   85de8:	d8000c15 	stw	zero,48(sp)
   85dec:	003f8006 	br	85bf0 <_gp+0xfffeb7fc>
   85df0:	d8c00417 	ldw	r3,16(sp)
   85df4:	00800084 	movi	r2,2
   85df8:	10fead0e 	bge	r2,r3,858b0 <_gp+0xfffeb4bc>
   85dfc:	383f921e 	bne	r7,zero,85c48 <_gp+0xfffeb854>
   85e00:	a00b883a 	mov	r5,r20
   85e04:	8009883a 	mov	r4,r16
   85e08:	01800144 	movi	r6,5
   85e0c:	00882300 	call	88230 <__multadd>
   85e10:	e009883a 	mov	r4,fp
   85e14:	100b883a 	mov	r5,r2
   85e18:	1029883a 	mov	r20,r2
   85e1c:	0088ad00 	call	88ad0 <__mcmp>
   85e20:	00bf890e 	bge	zero,r2,85c48 <_gp+0xfffeb854>
   85e24:	d9c00617 	ldw	r7,24(sp)
   85e28:	d9800717 	ldw	r6,28(sp)
   85e2c:	00800c44 	movi	r2,49
   85e30:	39c00044 	addi	r7,r7,1
   85e34:	35800044 	addi	r22,r6,1
   85e38:	30800005 	stb	r2,0(r6)
   85e3c:	d9c00615 	stw	r7,24(sp)
   85e40:	003f8506 	br	85c58 <_gp+0xfffeb864>
   85e44:	d9800617 	ldw	r6,24(sp)
   85e48:	d9c00717 	ldw	r7,28(sp)
   85e4c:	00800c44 	movi	r2,49
   85e50:	31800044 	addi	r6,r6,1
   85e54:	d9800615 	stw	r6,24(sp)
   85e58:	38800005 	stb	r2,0(r7)
   85e5c:	003ec706 	br	8597c <_gp+0xfffeb588>
   85e60:	df000417 	ldw	fp,16(sp)
   85e64:	dc000317 	ldw	r16,12(sp)
   85e68:	003d6d06 	br	85420 <_gp+0xfffeb02c>
   85e6c:	8809883a 	mov	r4,r17
   85e70:	00822500 	call	82250 <__floatsidf>
   85e74:	9809883a 	mov	r4,r19
   85e78:	a00b883a 	mov	r5,r20
   85e7c:	100d883a 	mov	r6,r2
   85e80:	180f883a 	mov	r7,r3
   85e84:	008d1f00 	call	8d1f0 <__muldf3>
   85e88:	1009883a 	mov	r4,r2
   85e8c:	180b883a 	mov	r5,r3
   85e90:	000d883a 	mov	r6,zero
   85e94:	01d00734 	movhi	r7,16412
   85e98:	008c72c0 	call	8c72c <__adddf3>
   85e9c:	05bf3034 	movhi	r22,64704
   85ea0:	1023883a 	mov	r17,r2
   85ea4:	1daf883a 	add	r23,r3,r22
   85ea8:	9809883a 	mov	r4,r19
   85eac:	a00b883a 	mov	r5,r20
   85eb0:	000d883a 	mov	r6,zero
   85eb4:	01d00534 	movhi	r7,16404
   85eb8:	008d9f00 	call	8d9f0 <__subdf3>
   85ebc:	1009883a 	mov	r4,r2
   85ec0:	180b883a 	mov	r5,r3
   85ec4:	880d883a 	mov	r6,r17
   85ec8:	b80f883a 	mov	r7,r23
   85ecc:	1027883a 	mov	r19,r2
   85ed0:	1829883a 	mov	r20,r3
   85ed4:	008d02c0 	call	8d02c <__gedf2>
   85ed8:	00806d16 	blt	zero,r2,86090 <_dtoa_r+0x1320>
   85edc:	b9e0003c 	xorhi	r7,r23,32768
   85ee0:	9809883a 	mov	r4,r19
   85ee4:	a00b883a 	mov	r5,r20
   85ee8:	880d883a 	mov	r6,r17
   85eec:	008d1040 	call	8d104 <__ledf2>
   85ef0:	103d7a0e 	bge	r2,zero,854dc <_gp+0xfffeb0e8>
   85ef4:	0029883a 	mov	r20,zero
   85ef8:	0023883a 	mov	r17,zero
   85efc:	003f5206 	br	85c48 <_gp+0xfffeb854>
   85f00:	d9800a17 	ldw	r6,40(sp)
   85f04:	e00b883a 	mov	r5,fp
   85f08:	8009883a 	mov	r4,r16
   85f0c:	00888380 	call	88838 <__pow5mult>
   85f10:	1039883a 	mov	fp,r2
   85f14:	003e3606 	br	857f0 <_gp+0xfffeb3fc>
   85f18:	d8000c15 	stw	zero,48(sp)
   85f1c:	003c5c06 	br	85090 <_gp+0xfffeac9c>
   85f20:	d9000a17 	ldw	r4,40(sp)
   85f24:	d9800b17 	ldw	r6,44(sp)
   85f28:	dd000a15 	stw	r20,40(sp)
   85f2c:	a105c83a 	sub	r2,r20,r4
   85f30:	308d883a 	add	r6,r6,r2
   85f34:	d9800b15 	stw	r6,44(sp)
   85f38:	0029883a 	mov	r20,zero
   85f3c:	003e0106 	br	85744 <_gp+0xfffeb350>
   85f40:	dcc00317 	ldw	r19,12(sp)
   85f44:	9029883a 	mov	r20,r18
   85f48:	04400084 	movi	r17,2
   85f4c:	003c8606 	br	85168 <_gp+0xfffead74>
   85f50:	3023883a 	mov	r17,r6
   85f54:	80001115 	stw	zero,68(r16)
   85f58:	000b883a 	mov	r5,zero
   85f5c:	003c6006 	br	850e0 <_gp+0xfffeacec>
   85f60:	04400044 	movi	r17,1
   85f64:	dc400d15 	stw	r17,52(sp)
   85f68:	dc400915 	stw	r17,36(sp)
   85f6c:	dc402115 	stw	r17,132(sp)
   85f70:	003ff806 	br	85f54 <_gp+0xfffebb60>
   85f74:	d8800617 	ldw	r2,24(sp)
   85f78:	00adc83a 	sub	r22,zero,r2
   85f7c:	b000ac26 	beq	r22,zero,86230 <_dtoa_r+0x14c0>
   85f80:	b08003cc 	andi	r2,r22,15
   85f84:	100490fa 	slli	r2,r2,3
   85f88:	00c00274 	movhi	r3,9
   85f8c:	18c21004 	addi	r3,r3,2112
   85f90:	d9000317 	ldw	r4,12(sp)
   85f94:	1885883a 	add	r2,r3,r2
   85f98:	11800017 	ldw	r6,0(r2)
   85f9c:	11c00117 	ldw	r7,4(r2)
   85fa0:	b02dd13a 	srai	r22,r22,4
   85fa4:	900b883a 	mov	r5,r18
   85fa8:	008d1f00 	call	8d1f0 <__muldf3>
   85fac:	1027883a 	mov	r19,r2
   85fb0:	1829883a 	mov	r20,r3
   85fb4:	b000ec26 	beq	r22,zero,86368 <_dtoa_r+0x15f8>
   85fb8:	05c00274 	movhi	r23,9
   85fbc:	bdc20604 	addi	r23,r23,2072
   85fc0:	04400084 	movi	r17,2
   85fc4:	b180004c 	andi	r6,r22,1
   85fc8:	1009883a 	mov	r4,r2
   85fcc:	b02dd07a 	srai	r22,r22,1
   85fd0:	180b883a 	mov	r5,r3
   85fd4:	30000426 	beq	r6,zero,85fe8 <_dtoa_r+0x1278>
   85fd8:	b9800017 	ldw	r6,0(r23)
   85fdc:	b9c00117 	ldw	r7,4(r23)
   85fe0:	8c400044 	addi	r17,r17,1
   85fe4:	008d1f00 	call	8d1f0 <__muldf3>
   85fe8:	bdc00204 	addi	r23,r23,8
   85fec:	b03ff51e 	bne	r22,zero,85fc4 <_gp+0xfffebbd0>
   85ff0:	1027883a 	mov	r19,r2
   85ff4:	1829883a 	mov	r20,r3
   85ff8:	003c7406 	br	851cc <_gp+0xfffeadd8>
   85ffc:	d9800617 	ldw	r6,24(sp)
   86000:	d9c00717 	ldw	r7,28(sp)
   86004:	00c00c04 	movi	r3,48
   86008:	31800044 	addi	r6,r6,1
   8600c:	38c00005 	stb	r3,0(r7)
   86010:	02400c44 	movi	r9,49
   86014:	d9800615 	stw	r6,24(sp)
   86018:	12400005 	stb	r9,0(r2)
   8601c:	003d0006 	br	85420 <_gp+0xfffeb02c>
   86020:	89400117 	ldw	r5,4(r17)
   86024:	8009883a 	mov	r4,r16
   86028:	00881600 	call	88160 <_Balloc>
   8602c:	89800417 	ldw	r6,16(r17)
   86030:	11000304 	addi	r4,r2,12
   86034:	89400304 	addi	r5,r17,12
   86038:	31800084 	addi	r6,r6,2
   8603c:	318d883a 	add	r6,r6,r6
   86040:	318d883a 	add	r6,r6,r6
   86044:	1025883a 	mov	r18,r2
   86048:	00825a80 	call	825a8 <memcpy>
   8604c:	8009883a 	mov	r4,r16
   86050:	900b883a 	mov	r5,r18
   86054:	01800044 	movi	r6,1
   86058:	00889800 	call	88980 <__lshift>
   8605c:	1027883a 	mov	r19,r2
   86060:	003e8806 	br	85a84 <_gp+0xfffeb690>
   86064:	00800e44 	movi	r2,57
   86068:	b8bf2b26 	beq	r23,r2,85d18 <_gp+0xfffeb924>
   8606c:	ba400044 	addi	r9,r23,1
   86070:	882b883a 	mov	r21,r17
   86074:	95800044 	addi	r22,r18,1
   86078:	92400005 	stb	r9,0(r18)
   8607c:	9823883a 	mov	r17,r19
   86080:	003e3e06 	br	8597c <_gp+0xfffeb588>
   86084:	882b883a 	mov	r21,r17
   86088:	9823883a 	mov	r17,r19
   8608c:	003e2206 	br	85918 <_gp+0xfffeb524>
   86090:	0029883a 	mov	r20,zero
   86094:	0023883a 	mov	r17,zero
   86098:	003f6206 	br	85e24 <_gp+0xfffeba30>
   8609c:	59bfffc4 	addi	r6,r11,-1
   860a0:	300490fa 	slli	r2,r6,3
   860a4:	00c00274 	movhi	r3,9
   860a8:	18c21004 	addi	r3,r3,2112
   860ac:	b80f883a 	mov	r7,r23
   860b0:	1885883a 	add	r2,r3,r2
   860b4:	11000017 	ldw	r4,0(r2)
   860b8:	11400117 	ldw	r5,4(r2)
   860bc:	d8800717 	ldw	r2,28(sp)
   860c0:	d9801015 	stw	r6,64(sp)
   860c4:	880d883a 	mov	r6,r17
   860c8:	dac01615 	stw	r11,88(sp)
   860cc:	15800044 	addi	r22,r2,1
   860d0:	008d1f00 	call	8d1f0 <__muldf3>
   860d4:	a00b883a 	mov	r5,r20
   860d8:	9809883a 	mov	r4,r19
   860dc:	d8c01215 	stw	r3,72(sp)
   860e0:	d8801115 	stw	r2,68(sp)
   860e4:	008e2780 	call	8e278 <__fixdfsi>
   860e8:	1009883a 	mov	r4,r2
   860ec:	1023883a 	mov	r17,r2
   860f0:	00822500 	call	82250 <__floatsidf>
   860f4:	9809883a 	mov	r4,r19
   860f8:	a00b883a 	mov	r5,r20
   860fc:	100d883a 	mov	r6,r2
   86100:	180f883a 	mov	r7,r3
   86104:	008d9f00 	call	8d9f0 <__subdf3>
   86108:	1815883a 	mov	r10,r3
   8610c:	d8c00717 	ldw	r3,28(sp)
   86110:	8c400c04 	addi	r17,r17,48
   86114:	102f883a 	mov	r23,r2
   86118:	1c400005 	stb	r17,0(r3)
   8611c:	dac01617 	ldw	r11,88(sp)
   86120:	00800044 	movi	r2,1
   86124:	58802426 	beq	r11,r2,861b8 <_dtoa_r+0x1448>
   86128:	d9800717 	ldw	r6,28(sp)
   8612c:	dc001415 	stw	r16,80(sp)
   86130:	b805883a 	mov	r2,r23
   86134:	32d7883a 	add	r11,r6,r11
   86138:	b027883a 	mov	r19,r22
   8613c:	5821883a 	mov	r16,r11
   86140:	5007883a 	mov	r3,r10
   86144:	902f883a 	mov	r23,r18
   86148:	000d883a 	mov	r6,zero
   8614c:	01d00934 	movhi	r7,16420
   86150:	1009883a 	mov	r4,r2
   86154:	180b883a 	mov	r5,r3
   86158:	008d1f00 	call	8d1f0 <__muldf3>
   8615c:	180b883a 	mov	r5,r3
   86160:	1009883a 	mov	r4,r2
   86164:	1829883a 	mov	r20,r3
   86168:	1025883a 	mov	r18,r2
   8616c:	008e2780 	call	8e278 <__fixdfsi>
   86170:	1009883a 	mov	r4,r2
   86174:	1023883a 	mov	r17,r2
   86178:	00822500 	call	82250 <__floatsidf>
   8617c:	9009883a 	mov	r4,r18
   86180:	a00b883a 	mov	r5,r20
   86184:	100d883a 	mov	r6,r2
   86188:	180f883a 	mov	r7,r3
   8618c:	8c400c04 	addi	r17,r17,48
   86190:	008d9f00 	call	8d9f0 <__subdf3>
   86194:	9cc00044 	addi	r19,r19,1
   86198:	9c7fffc5 	stb	r17,-1(r19)
   8619c:	9c3fea1e 	bne	r19,r16,86148 <_gp+0xfffebd54>
   861a0:	d9c01017 	ldw	r7,64(sp)
   861a4:	dc001417 	ldw	r16,80(sp)
   861a8:	b825883a 	mov	r18,r23
   861ac:	1815883a 	mov	r10,r3
   861b0:	102f883a 	mov	r23,r2
   861b4:	b1ed883a 	add	r22,r22,r7
   861b8:	d9001117 	ldw	r4,68(sp)
   861bc:	d9401217 	ldw	r5,72(sp)
   861c0:	000d883a 	mov	r6,zero
   861c4:	01cff834 	movhi	r7,16352
   861c8:	da801615 	stw	r10,88(sp)
   861cc:	008c72c0 	call	8c72c <__adddf3>
   861d0:	da801617 	ldw	r10,88(sp)
   861d4:	1009883a 	mov	r4,r2
   861d8:	180b883a 	mov	r5,r3
   861dc:	500f883a 	mov	r7,r10
   861e0:	b80d883a 	mov	r6,r23
   861e4:	008d1040 	call	8d104 <__ledf2>
   861e8:	da801617 	ldw	r10,88(sp)
   861ec:	1000330e 	bge	r2,zero,862bc <_dtoa_r+0x154c>
   861f0:	d9001317 	ldw	r4,76(sp)
   861f4:	b53fffc3 	ldbu	r20,-1(r22)
   861f8:	d9000615 	stw	r4,24(sp)
   861fc:	003d3706 	br	856dc <_gp+0xfffeb2e8>
   86200:	d8800817 	ldw	r2,32(sp)
   86204:	11e7c83a 	sub	r19,r2,r7
   86208:	0005883a 	mov	r2,zero
   8620c:	003d5106 	br	85754 <_gp+0xfffeb360>
   86210:	00800044 	movi	r2,1
   86214:	003dbd06 	br	8590c <_gp+0xfffeb518>
   86218:	d8800217 	ldw	r2,8(sp)
   8621c:	00c00d84 	movi	r3,54
   86220:	dd000a17 	ldw	r20,40(sp)
   86224:	1885c83a 	sub	r2,r3,r2
   86228:	dcc00817 	ldw	r19,32(sp)
   8622c:	003d4906 	br	85754 <_gp+0xfffeb360>
   86230:	dcc00317 	ldw	r19,12(sp)
   86234:	9029883a 	mov	r20,r18
   86238:	04400084 	movi	r17,2
   8623c:	003be306 	br	851cc <_gp+0xfffeadd8>
   86240:	d9000917 	ldw	r4,36(sp)
   86244:	203f0926 	beq	r4,zero,85e6c <_gp+0xfffeba78>
   86248:	d9800d17 	ldw	r6,52(sp)
   8624c:	01bca30e 	bge	zero,r6,854dc <_gp+0xfffeb0e8>
   86250:	a00b883a 	mov	r5,r20
   86254:	9809883a 	mov	r4,r19
   86258:	000d883a 	mov	r6,zero
   8625c:	01d00934 	movhi	r7,16420
   86260:	008d1f00 	call	8d1f0 <__muldf3>
   86264:	89000044 	addi	r4,r17,1
   86268:	1027883a 	mov	r19,r2
   8626c:	1829883a 	mov	r20,r3
   86270:	00822500 	call	82250 <__floatsidf>
   86274:	9809883a 	mov	r4,r19
   86278:	a00b883a 	mov	r5,r20
   8627c:	100d883a 	mov	r6,r2
   86280:	180f883a 	mov	r7,r3
   86284:	008d1f00 	call	8d1f0 <__muldf3>
   86288:	01d00734 	movhi	r7,16412
   8628c:	1009883a 	mov	r4,r2
   86290:	180b883a 	mov	r5,r3
   86294:	000d883a 	mov	r6,zero
   86298:	008c72c0 	call	8c72c <__adddf3>
   8629c:	d9c00617 	ldw	r7,24(sp)
   862a0:	05bf3034 	movhi	r22,64704
   862a4:	1023883a 	mov	r17,r2
   862a8:	39ffffc4 	addi	r7,r7,-1
   862ac:	d9c01315 	stw	r7,76(sp)
   862b0:	1daf883a 	add	r23,r3,r22
   862b4:	dac00d17 	ldw	r11,52(sp)
   862b8:	003be006 	br	8523c <_gp+0xfffeae48>
   862bc:	d9801117 	ldw	r6,68(sp)
   862c0:	d9c01217 	ldw	r7,72(sp)
   862c4:	0009883a 	mov	r4,zero
   862c8:	014ff834 	movhi	r5,16352
   862cc:	da801615 	stw	r10,88(sp)
   862d0:	008d9f00 	call	8d9f0 <__subdf3>
   862d4:	da801617 	ldw	r10,88(sp)
   862d8:	1009883a 	mov	r4,r2
   862dc:	180b883a 	mov	r5,r3
   862e0:	b80d883a 	mov	r6,r23
   862e4:	500f883a 	mov	r7,r10
   862e8:	008d02c0 	call	8d02c <__gedf2>
   862ec:	00bc7b0e 	bge	zero,r2,854dc <_gp+0xfffeb0e8>
   862f0:	01000c04 	movi	r4,48
   862f4:	00000106 	br	862fc <_dtoa_r+0x158c>
   862f8:	102d883a 	mov	r22,r2
   862fc:	b0bfffc4 	addi	r2,r22,-1
   86300:	10c00007 	ldb	r3,0(r2)
   86304:	193ffc26 	beq	r3,r4,862f8 <_gp+0xfffebf04>
   86308:	d9001317 	ldw	r4,76(sp)
   8630c:	d9000615 	stw	r4,24(sp)
   86310:	003c4306 	br	85420 <_gp+0xfffeb02c>
   86314:	d8c01317 	ldw	r3,76(sp)
   86318:	dc001117 	ldw	r16,68(sp)
   8631c:	d8c00615 	stw	r3,24(sp)
   86320:	003cee06 	br	856dc <_gp+0xfffeb2e8>
   86324:	dd401217 	ldw	r21,72(sp)
   86328:	dc001117 	ldw	r16,68(sp)
   8632c:	dc801417 	ldw	r18,80(sp)
   86330:	003c6a06 	br	854dc <_gp+0xfffeb0e8>
   86334:	103e6f1e 	bne	r2,zero,85cf4 <_gp+0xfffeb900>
   86338:	b880004c 	andi	r2,r23,1
   8633c:	103e6d26 	beq	r2,zero,85cf4 <_gp+0xfffeb900>
   86340:	003e6906 	br	85ce8 <_gp+0xfffeb8f4>
   86344:	8009883a 	mov	r4,r16
   86348:	880b883a 	mov	r5,r17
   8634c:	01800284 	movi	r6,10
   86350:	000f883a 	mov	r7,zero
   86354:	00882300 	call	88230 <__multadd>
   86358:	d9000d17 	ldw	r4,52(sp)
   8635c:	1023883a 	mov	r17,r2
   86360:	d9000915 	stw	r4,36(sp)
   86364:	003d5006 	br	858a8 <_gp+0xfffeb4b4>
   86368:	04400084 	movi	r17,2
   8636c:	003b9706 	br	851cc <_gp+0xfffeadd8>
   86370:	d8801317 	ldw	r2,76(sp)
   86374:	d8800615 	stw	r2,24(sp)
   86378:	003cd806 	br	856dc <_gp+0xfffeb2e8>
   8637c:	d8801317 	ldw	r2,76(sp)
   86380:	d8800615 	stw	r2,24(sp)
   86384:	003c2606 	br	85420 <_gp+0xfffeb02c>
   86388:	04c00044 	movi	r19,1
   8638c:	003b3506 	br	85064 <_gp+0xfffeac70>
   86390:	3023883a 	mov	r17,r6
   86394:	000b883a 	mov	r5,zero
   86398:	003b5106 	br	850e0 <_gp+0xfffeacec>
   8639c:	20fd3426 	beq	r4,r3,85870 <_gp+0xfffeb47c>
   863a0:	00c00f04 	movi	r3,60
   863a4:	1885c83a 	sub	r2,r3,r2
   863a8:	003da106 	br	85a30 <_gp+0xfffeb63c>

000863ac <_fflush_r>:
   863ac:	defffb04 	addi	sp,sp,-20
   863b0:	dcc00315 	stw	r19,12(sp)
   863b4:	dc400115 	stw	r17,4(sp)
   863b8:	dfc00415 	stw	ra,16(sp)
   863bc:	dc800215 	stw	r18,8(sp)
   863c0:	dc000015 	stw	r16,0(sp)
   863c4:	2027883a 	mov	r19,r4
   863c8:	2823883a 	mov	r17,r5
   863cc:	20000226 	beq	r4,zero,863d8 <_fflush_r+0x2c>
   863d0:	20800e17 	ldw	r2,56(r4)
   863d4:	10005826 	beq	r2,zero,86538 <_fflush_r+0x18c>
   863d8:	8880030b 	ldhu	r2,12(r17)
   863dc:	10ffffcc 	andi	r3,r2,65535
   863e0:	18e0001c 	xori	r3,r3,32768
   863e4:	18e00004 	addi	r3,r3,-32768
   863e8:	18002b26 	beq	r3,zero,86498 <_fflush_r+0xec>
   863ec:	10c0020c 	andi	r3,r2,8
   863f0:	1800311e 	bne	r3,zero,864b8 <_fflush_r+0x10c>
   863f4:	88c00117 	ldw	r3,4(r17)
   863f8:	10820014 	ori	r2,r2,2048
   863fc:	8880030d 	sth	r2,12(r17)
   86400:	00c05c0e 	bge	zero,r3,86574 <_fflush_r+0x1c8>
   86404:	88c00a17 	ldw	r3,40(r17)
   86408:	18002326 	beq	r3,zero,86498 <_fflush_r+0xec>
   8640c:	9c000017 	ldw	r16,0(r19)
   86410:	1104000c 	andi	r4,r2,4096
   86414:	98000015 	stw	zero,0(r19)
   86418:	20004b26 	beq	r4,zero,86548 <_fflush_r+0x19c>
   8641c:	89801417 	ldw	r6,80(r17)
   86420:	1080010c 	andi	r2,r2,4
   86424:	10000626 	beq	r2,zero,86440 <_fflush_r+0x94>
   86428:	89000117 	ldw	r4,4(r17)
   8642c:	88800c17 	ldw	r2,48(r17)
   86430:	310dc83a 	sub	r6,r6,r4
   86434:	10000226 	beq	r2,zero,86440 <_fflush_r+0x94>
   86438:	88800f17 	ldw	r2,60(r17)
   8643c:	308dc83a 	sub	r6,r6,r2
   86440:	89400717 	ldw	r5,28(r17)
   86444:	9809883a 	mov	r4,r19
   86448:	000f883a 	mov	r7,zero
   8644c:	183ee83a 	callr	r3
   86450:	00ffffc4 	movi	r3,-1
   86454:	10c04a26 	beq	r2,r3,86580 <_fflush_r+0x1d4>
   86458:	88c0030b 	ldhu	r3,12(r17)
   8645c:	89000417 	ldw	r4,16(r17)
   86460:	88000115 	stw	zero,4(r17)
   86464:	197dffcc 	andi	r5,r3,63487
   86468:	8940030d 	sth	r5,12(r17)
   8646c:	89000015 	stw	r4,0(r17)
   86470:	18c4000c 	andi	r3,r3,4096
   86474:	1800581e 	bne	r3,zero,865d8 <_fflush_r+0x22c>
   86478:	89400c17 	ldw	r5,48(r17)
   8647c:	9c000015 	stw	r16,0(r19)
   86480:	28000526 	beq	r5,zero,86498 <_fflush_r+0xec>
   86484:	88801004 	addi	r2,r17,64
   86488:	28800226 	beq	r5,r2,86494 <_fflush_r+0xe8>
   8648c:	9809883a 	mov	r4,r19
   86490:	0086b000 	call	86b00 <_free_r>
   86494:	88000c15 	stw	zero,48(r17)
   86498:	0005883a 	mov	r2,zero
   8649c:	dfc00417 	ldw	ra,16(sp)
   864a0:	dcc00317 	ldw	r19,12(sp)
   864a4:	dc800217 	ldw	r18,8(sp)
   864a8:	dc400117 	ldw	r17,4(sp)
   864ac:	dc000017 	ldw	r16,0(sp)
   864b0:	dec00504 	addi	sp,sp,20
   864b4:	f800283a 	ret
   864b8:	8c800417 	ldw	r18,16(r17)
   864bc:	903ff626 	beq	r18,zero,86498 <_gp+0xfffec0a4>
   864c0:	8c000017 	ldw	r16,0(r17)
   864c4:	108000cc 	andi	r2,r2,3
   864c8:	8c800015 	stw	r18,0(r17)
   864cc:	84a1c83a 	sub	r16,r16,r18
   864d0:	10001b26 	beq	r2,zero,86540 <_fflush_r+0x194>
   864d4:	0005883a 	mov	r2,zero
   864d8:	88800215 	stw	r2,8(r17)
   864dc:	04000316 	blt	zero,r16,864ec <_fflush_r+0x140>
   864e0:	003fed06 	br	86498 <_gp+0xfffec0a4>
   864e4:	90a5883a 	add	r18,r18,r2
   864e8:	043feb0e 	bge	zero,r16,86498 <_gp+0xfffec0a4>
   864ec:	88800917 	ldw	r2,36(r17)
   864f0:	89400717 	ldw	r5,28(r17)
   864f4:	800f883a 	mov	r7,r16
   864f8:	900d883a 	mov	r6,r18
   864fc:	9809883a 	mov	r4,r19
   86500:	103ee83a 	callr	r2
   86504:	80a1c83a 	sub	r16,r16,r2
   86508:	00bff616 	blt	zero,r2,864e4 <_gp+0xfffec0f0>
   8650c:	88c0030b 	ldhu	r3,12(r17)
   86510:	00bfffc4 	movi	r2,-1
   86514:	18c01014 	ori	r3,r3,64
   86518:	88c0030d 	sth	r3,12(r17)
   8651c:	dfc00417 	ldw	ra,16(sp)
   86520:	dcc00317 	ldw	r19,12(sp)
   86524:	dc800217 	ldw	r18,8(sp)
   86528:	dc400117 	ldw	r17,4(sp)
   8652c:	dc000017 	ldw	r16,0(sp)
   86530:	dec00504 	addi	sp,sp,20
   86534:	f800283a 	ret
   86538:	00866cc0 	call	866cc <__sinit>
   8653c:	003fa606 	br	863d8 <_gp+0xfffebfe4>
   86540:	88800517 	ldw	r2,20(r17)
   86544:	003fe406 	br	864d8 <_gp+0xfffec0e4>
   86548:	89400717 	ldw	r5,28(r17)
   8654c:	000d883a 	mov	r6,zero
   86550:	9809883a 	mov	r4,r19
   86554:	01c00044 	movi	r7,1
   86558:	183ee83a 	callr	r3
   8655c:	100d883a 	mov	r6,r2
   86560:	00bfffc4 	movi	r2,-1
   86564:	30801326 	beq	r6,r2,865b4 <_fflush_r+0x208>
   86568:	8880030b 	ldhu	r2,12(r17)
   8656c:	88c00a17 	ldw	r3,40(r17)
   86570:	003fab06 	br	86420 <_gp+0xfffec02c>
   86574:	88c00f17 	ldw	r3,60(r17)
   86578:	00ffa216 	blt	zero,r3,86404 <_gp+0xfffec010>
   8657c:	003fc606 	br	86498 <_gp+0xfffec0a4>
   86580:	98c00017 	ldw	r3,0(r19)
   86584:	183fb426 	beq	r3,zero,86458 <_gp+0xfffec064>
   86588:	01000744 	movi	r4,29
   8658c:	19000226 	beq	r3,r4,86598 <_fflush_r+0x1ec>
   86590:	01000584 	movi	r4,22
   86594:	1900121e 	bne	r3,r4,865e0 <_fflush_r+0x234>
   86598:	88c0030b 	ldhu	r3,12(r17)
   8659c:	88800417 	ldw	r2,16(r17)
   865a0:	88000115 	stw	zero,4(r17)
   865a4:	18fdffcc 	andi	r3,r3,63487
   865a8:	88c0030d 	sth	r3,12(r17)
   865ac:	88800015 	stw	r2,0(r17)
   865b0:	003fb106 	br	86478 <_gp+0xfffec084>
   865b4:	98800017 	ldw	r2,0(r19)
   865b8:	103feb26 	beq	r2,zero,86568 <_gp+0xfffec174>
   865bc:	00c00744 	movi	r3,29
   865c0:	10c00226 	beq	r2,r3,865cc <_fflush_r+0x220>
   865c4:	00c00584 	movi	r3,22
   865c8:	10ffd01e 	bne	r2,r3,8650c <_gp+0xfffec118>
   865cc:	9c000015 	stw	r16,0(r19)
   865d0:	0005883a 	mov	r2,zero
   865d4:	003fb106 	br	8649c <_gp+0xfffec0a8>
   865d8:	88801415 	stw	r2,80(r17)
   865dc:	003fa606 	br	86478 <_gp+0xfffec084>
   865e0:	88c0030b 	ldhu	r3,12(r17)
   865e4:	18c01014 	ori	r3,r3,64
   865e8:	88c0030d 	sth	r3,12(r17)
   865ec:	003fab06 	br	8649c <_gp+0xfffec0a8>

000865f0 <fflush>:
   865f0:	200b883a 	mov	r5,r4
   865f4:	20000426 	beq	r4,zero,86608 <fflush+0x18>
   865f8:	00800274 	movhi	r2,9
   865fc:	1088ff04 	addi	r2,r2,9212
   86600:	11000017 	ldw	r4,0(r2)
   86604:	00863ac1 	jmpi	863ac <_fflush_r>
   86608:	00800274 	movhi	r2,9
   8660c:	1088fe04 	addi	r2,r2,9208
   86610:	11000017 	ldw	r4,0(r2)
   86614:	01400234 	movhi	r5,8
   86618:	2958eb04 	addi	r5,r5,25516
   8661c:	00873241 	jmpi	87324 <_fwalk_reent>

00086620 <__fp_lock>:
   86620:	0005883a 	mov	r2,zero
   86624:	f800283a 	ret

00086628 <__fp_unlock>:
   86628:	0005883a 	mov	r2,zero
   8662c:	f800283a 	ret

00086630 <_cleanup_r>:
   86630:	01400274 	movhi	r5,9
   86634:	296d3c04 	addi	r5,r5,-19216
   86638:	008727c1 	jmpi	8727c <_fwalk>

0008663c <__sfmoreglue>:
   8663c:	defffc04 	addi	sp,sp,-16
   86640:	dc800215 	stw	r18,8(sp)
   86644:	2825883a 	mov	r18,r5
   86648:	dc000015 	stw	r16,0(sp)
   8664c:	01401a04 	movi	r5,104
   86650:	2021883a 	mov	r16,r4
   86654:	9009883a 	mov	r4,r18
   86658:	dfc00315 	stw	ra,12(sp)
   8665c:	dc400115 	stw	r17,4(sp)
   86660:	00825800 	call	82580 <__mulsi3>
   86664:	8009883a 	mov	r4,r16
   86668:	11400304 	addi	r5,r2,12
   8666c:	1023883a 	mov	r17,r2
   86670:	00876640 	call	87664 <_malloc_r>
   86674:	1021883a 	mov	r16,r2
   86678:	10000726 	beq	r2,zero,86698 <__sfmoreglue+0x5c>
   8667c:	11000304 	addi	r4,r2,12
   86680:	10000015 	stw	zero,0(r2)
   86684:	14800115 	stw	r18,4(r2)
   86688:	11000215 	stw	r4,8(r2)
   8668c:	000b883a 	mov	r5,zero
   86690:	880d883a 	mov	r6,r17
   86694:	008804c0 	call	8804c <memset>
   86698:	8005883a 	mov	r2,r16
   8669c:	dfc00317 	ldw	ra,12(sp)
   866a0:	dc800217 	ldw	r18,8(sp)
   866a4:	dc400117 	ldw	r17,4(sp)
   866a8:	dc000017 	ldw	r16,0(sp)
   866ac:	dec00404 	addi	sp,sp,16
   866b0:	f800283a 	ret

000866b4 <_cleanup>:
   866b4:	00800274 	movhi	r2,9
   866b8:	1088fe04 	addi	r2,r2,9208
   866bc:	11000017 	ldw	r4,0(r2)
   866c0:	01400274 	movhi	r5,9
   866c4:	296d3c04 	addi	r5,r5,-19216
   866c8:	008727c1 	jmpi	8727c <_fwalk>

000866cc <__sinit>:
   866cc:	20800e17 	ldw	r2,56(r4)
   866d0:	defff704 	addi	sp,sp,-36
   866d4:	dc800215 	stw	r18,8(sp)
   866d8:	dfc00815 	stw	ra,32(sp)
   866dc:	ddc00715 	stw	r23,28(sp)
   866e0:	dd800615 	stw	r22,24(sp)
   866e4:	dd400515 	stw	r21,20(sp)
   866e8:	dd000415 	stw	r20,16(sp)
   866ec:	dcc00315 	stw	r19,12(sp)
   866f0:	dc400115 	stw	r17,4(sp)
   866f4:	dc000015 	stw	r16,0(sp)
   866f8:	2025883a 	mov	r18,r4
   866fc:	10004f1e 	bne	r2,zero,8683c <__sinit+0x170>
   86700:	24000117 	ldw	r16,4(r4)
   86704:	00c00234 	movhi	r3,8
   86708:	18d98c04 	addi	r3,r3,26160
   8670c:	20c00f15 	stw	r3,60(r4)
   86710:	2080bb04 	addi	r2,r4,748
   86714:	00c000c4 	movi	r3,3
   86718:	05c00044 	movi	r23,1
   8671c:	20c0b915 	stw	r3,740(r4)
   86720:	2080ba15 	stw	r2,744(r4)
   86724:	25c00e15 	stw	r23,56(r4)
   86728:	2000b815 	stw	zero,736(r4)
   8672c:	00800104 	movi	r2,4
   86730:	81001704 	addi	r4,r16,92
   86734:	000b883a 	mov	r5,zero
   86738:	01800204 	movi	r6,8
   8673c:	80000015 	stw	zero,0(r16)
   86740:	80000115 	stw	zero,4(r16)
   86744:	80000215 	stw	zero,8(r16)
   86748:	8080030d 	sth	r2,12(r16)
   8674c:	80001915 	stw	zero,100(r16)
   86750:	8000038d 	sth	zero,14(r16)
   86754:	80000415 	stw	zero,16(r16)
   86758:	80000515 	stw	zero,20(r16)
   8675c:	80000615 	stw	zero,24(r16)
   86760:	008804c0 	call	8804c <memset>
   86764:	94400217 	ldw	r17,8(r18)
   86768:	05800274 	movhi	r22,9
   8676c:	b5a64904 	addi	r22,r22,-26332
   86770:	05400274 	movhi	r21,9
   86774:	ad666004 	addi	r21,r21,-26240
   86778:	05000274 	movhi	r20,9
   8677c:	a5267f04 	addi	r20,r20,-26116
   86780:	04c00274 	movhi	r19,9
   86784:	9ce69604 	addi	r19,r19,-26024
   86788:	84000715 	stw	r16,28(r16)
   8678c:	85800815 	stw	r22,32(r16)
   86790:	85400915 	stw	r21,36(r16)
   86794:	85000a15 	stw	r20,40(r16)
   86798:	84c00b15 	stw	r19,44(r16)
   8679c:	00800284 	movi	r2,10
   867a0:	89001704 	addi	r4,r17,92
   867a4:	000b883a 	mov	r5,zero
   867a8:	01800204 	movi	r6,8
   867ac:	88000015 	stw	zero,0(r17)
   867b0:	88000115 	stw	zero,4(r17)
   867b4:	88000215 	stw	zero,8(r17)
   867b8:	8880030d 	sth	r2,12(r17)
   867bc:	88001915 	stw	zero,100(r17)
   867c0:	8dc0038d 	sth	r23,14(r17)
   867c4:	88000415 	stw	zero,16(r17)
   867c8:	88000515 	stw	zero,20(r17)
   867cc:	88000615 	stw	zero,24(r17)
   867d0:	008804c0 	call	8804c <memset>
   867d4:	94000317 	ldw	r16,12(r18)
   867d8:	00800484 	movi	r2,18
   867dc:	8c400715 	stw	r17,28(r17)
   867e0:	8d800815 	stw	r22,32(r17)
   867e4:	8d400915 	stw	r21,36(r17)
   867e8:	8d000a15 	stw	r20,40(r17)
   867ec:	8cc00b15 	stw	r19,44(r17)
   867f0:	8080030d 	sth	r2,12(r16)
   867f4:	00800084 	movi	r2,2
   867f8:	80000015 	stw	zero,0(r16)
   867fc:	80000115 	stw	zero,4(r16)
   86800:	80000215 	stw	zero,8(r16)
   86804:	80001915 	stw	zero,100(r16)
   86808:	8080038d 	sth	r2,14(r16)
   8680c:	80000415 	stw	zero,16(r16)
   86810:	80000515 	stw	zero,20(r16)
   86814:	80000615 	stw	zero,24(r16)
   86818:	81001704 	addi	r4,r16,92
   8681c:	000b883a 	mov	r5,zero
   86820:	01800204 	movi	r6,8
   86824:	008804c0 	call	8804c <memset>
   86828:	84000715 	stw	r16,28(r16)
   8682c:	85800815 	stw	r22,32(r16)
   86830:	85400915 	stw	r21,36(r16)
   86834:	85000a15 	stw	r20,40(r16)
   86838:	84c00b15 	stw	r19,44(r16)
   8683c:	dfc00817 	ldw	ra,32(sp)
   86840:	ddc00717 	ldw	r23,28(sp)
   86844:	dd800617 	ldw	r22,24(sp)
   86848:	dd400517 	ldw	r21,20(sp)
   8684c:	dd000417 	ldw	r20,16(sp)
   86850:	dcc00317 	ldw	r19,12(sp)
   86854:	dc800217 	ldw	r18,8(sp)
   86858:	dc400117 	ldw	r17,4(sp)
   8685c:	dc000017 	ldw	r16,0(sp)
   86860:	dec00904 	addi	sp,sp,36
   86864:	f800283a 	ret

00086868 <__sfp>:
   86868:	defffb04 	addi	sp,sp,-20
   8686c:	00800274 	movhi	r2,9
   86870:	1088fe04 	addi	r2,r2,9208
   86874:	dc800215 	stw	r18,8(sp)
   86878:	14800017 	ldw	r18,0(r2)
   8687c:	dcc00315 	stw	r19,12(sp)
   86880:	dfc00415 	stw	ra,16(sp)
   86884:	90800e17 	ldw	r2,56(r18)
   86888:	dc400115 	stw	r17,4(sp)
   8688c:	dc000015 	stw	r16,0(sp)
   86890:	2027883a 	mov	r19,r4
   86894:	10002f26 	beq	r2,zero,86954 <__sfp+0xec>
   86898:	9480b804 	addi	r18,r18,736
   8689c:	047fffc4 	movi	r17,-1
   868a0:	91400117 	ldw	r5,4(r18)
   868a4:	94000217 	ldw	r16,8(r18)
   868a8:	297fffc4 	addi	r5,r5,-1
   868ac:	28000a16 	blt	r5,zero,868d8 <__sfp+0x70>
   868b0:	8080030f 	ldh	r2,12(r16)
   868b4:	10000c26 	beq	r2,zero,868e8 <__sfp+0x80>
   868b8:	80c01d04 	addi	r3,r16,116
   868bc:	00000206 	br	868c8 <__sfp+0x60>
   868c0:	18bfe60f 	ldh	r2,-104(r3)
   868c4:	10000826 	beq	r2,zero,868e8 <__sfp+0x80>
   868c8:	297fffc4 	addi	r5,r5,-1
   868cc:	1c3ffd04 	addi	r16,r3,-12
   868d0:	18c01a04 	addi	r3,r3,104
   868d4:	2c7ffa1e 	bne	r5,r17,868c0 <_gp+0xfffec4cc>
   868d8:	90800017 	ldw	r2,0(r18)
   868dc:	10002026 	beq	r2,zero,86960 <__sfp+0xf8>
   868e0:	1025883a 	mov	r18,r2
   868e4:	003fee06 	br	868a0 <_gp+0xfffec4ac>
   868e8:	00bfffc4 	movi	r2,-1
   868ec:	8080038d 	sth	r2,14(r16)
   868f0:	00800044 	movi	r2,1
   868f4:	8080030d 	sth	r2,12(r16)
   868f8:	80001915 	stw	zero,100(r16)
   868fc:	80000015 	stw	zero,0(r16)
   86900:	80000215 	stw	zero,8(r16)
   86904:	80000115 	stw	zero,4(r16)
   86908:	80000415 	stw	zero,16(r16)
   8690c:	80000515 	stw	zero,20(r16)
   86910:	80000615 	stw	zero,24(r16)
   86914:	81001704 	addi	r4,r16,92
   86918:	000b883a 	mov	r5,zero
   8691c:	01800204 	movi	r6,8
   86920:	008804c0 	call	8804c <memset>
   86924:	8005883a 	mov	r2,r16
   86928:	80000c15 	stw	zero,48(r16)
   8692c:	80000d15 	stw	zero,52(r16)
   86930:	80001115 	stw	zero,68(r16)
   86934:	80001215 	stw	zero,72(r16)
   86938:	dfc00417 	ldw	ra,16(sp)
   8693c:	dcc00317 	ldw	r19,12(sp)
   86940:	dc800217 	ldw	r18,8(sp)
   86944:	dc400117 	ldw	r17,4(sp)
   86948:	dc000017 	ldw	r16,0(sp)
   8694c:	dec00504 	addi	sp,sp,20
   86950:	f800283a 	ret
   86954:	9009883a 	mov	r4,r18
   86958:	00866cc0 	call	866cc <__sinit>
   8695c:	003fce06 	br	86898 <_gp+0xfffec4a4>
   86960:	9809883a 	mov	r4,r19
   86964:	01400104 	movi	r5,4
   86968:	008663c0 	call	8663c <__sfmoreglue>
   8696c:	90800015 	stw	r2,0(r18)
   86970:	103fdb1e 	bne	r2,zero,868e0 <_gp+0xfffec4ec>
   86974:	00800304 	movi	r2,12
   86978:	98800015 	stw	r2,0(r19)
   8697c:	0005883a 	mov	r2,zero
   86980:	003fed06 	br	86938 <_gp+0xfffec544>

00086984 <__sfp_lock_acquire>:
   86984:	f800283a 	ret

00086988 <__sfp_lock_release>:
   86988:	f800283a 	ret

0008698c <__sinit_lock_acquire>:
   8698c:	f800283a 	ret

00086990 <__sinit_lock_release>:
   86990:	f800283a 	ret

00086994 <__fp_lock_all>:
   86994:	00800274 	movhi	r2,9
   86998:	1088ff04 	addi	r2,r2,9212
   8699c:	11000017 	ldw	r4,0(r2)
   869a0:	01400234 	movhi	r5,8
   869a4:	29598804 	addi	r5,r5,26144
   869a8:	008727c1 	jmpi	8727c <_fwalk>

000869ac <__fp_unlock_all>:
   869ac:	00800274 	movhi	r2,9
   869b0:	1088ff04 	addi	r2,r2,9212
   869b4:	11000017 	ldw	r4,0(r2)
   869b8:	01400234 	movhi	r5,8
   869bc:	29598a04 	addi	r5,r5,26152
   869c0:	008727c1 	jmpi	8727c <_fwalk>

000869c4 <_malloc_trim_r>:
   869c4:	defffb04 	addi	sp,sp,-20
   869c8:	dcc00315 	stw	r19,12(sp)
   869cc:	dc800215 	stw	r18,8(sp)
   869d0:	dc400115 	stw	r17,4(sp)
   869d4:	dc000015 	stw	r16,0(sp)
   869d8:	2827883a 	mov	r19,r5
   869dc:	dfc00415 	stw	ra,16(sp)
   869e0:	04400274 	movhi	r17,9
   869e4:	8c437904 	addi	r17,r17,3556
   869e8:	2021883a 	mov	r16,r4
   869ec:	008e72c0 	call	8e72c <__malloc_lock>
   869f0:	88800217 	ldw	r2,8(r17)
   869f4:	14800117 	ldw	r18,4(r2)
   869f8:	00bfff04 	movi	r2,-4
   869fc:	90a4703a 	and	r18,r18,r2
   86a00:	94e7c83a 	sub	r19,r18,r19
   86a04:	9cc3fbc4 	addi	r19,r19,4079
   86a08:	9826d33a 	srli	r19,r19,12
   86a0c:	0083ffc4 	movi	r2,4095
   86a10:	9cffffc4 	addi	r19,r19,-1
   86a14:	9826933a 	slli	r19,r19,12
   86a18:	14c0060e 	bge	r2,r19,86a34 <_malloc_trim_r+0x70>
   86a1c:	8009883a 	mov	r4,r16
   86a20:	000b883a 	mov	r5,zero
   86a24:	00898c00 	call	898c0 <_sbrk_r>
   86a28:	88c00217 	ldw	r3,8(r17)
   86a2c:	1c87883a 	add	r3,r3,r18
   86a30:	10c00a26 	beq	r2,r3,86a5c <_malloc_trim_r+0x98>
   86a34:	8009883a 	mov	r4,r16
   86a38:	008e7300 	call	8e730 <__malloc_unlock>
   86a3c:	0005883a 	mov	r2,zero
   86a40:	dfc00417 	ldw	ra,16(sp)
   86a44:	dcc00317 	ldw	r19,12(sp)
   86a48:	dc800217 	ldw	r18,8(sp)
   86a4c:	dc400117 	ldw	r17,4(sp)
   86a50:	dc000017 	ldw	r16,0(sp)
   86a54:	dec00504 	addi	sp,sp,20
   86a58:	f800283a 	ret
   86a5c:	8009883a 	mov	r4,r16
   86a60:	04cbc83a 	sub	r5,zero,r19
   86a64:	00898c00 	call	898c0 <_sbrk_r>
   86a68:	00ffffc4 	movi	r3,-1
   86a6c:	10c01326 	beq	r2,r3,86abc <_malloc_trim_r+0xf8>
   86a70:	00800274 	movhi	r2,9
   86a74:	108fd904 	addi	r2,r2,16228
   86a78:	11000017 	ldw	r4,0(r2)
   86a7c:	88c00217 	ldw	r3,8(r17)
   86a80:	94e5c83a 	sub	r18,r18,r19
   86a84:	94800054 	ori	r18,r18,1
   86a88:	24e7c83a 	sub	r19,r4,r19
   86a8c:	1c800115 	stw	r18,4(r3)
   86a90:	8009883a 	mov	r4,r16
   86a94:	14c00015 	stw	r19,0(r2)
   86a98:	008e7300 	call	8e730 <__malloc_unlock>
   86a9c:	00800044 	movi	r2,1
   86aa0:	dfc00417 	ldw	ra,16(sp)
   86aa4:	dcc00317 	ldw	r19,12(sp)
   86aa8:	dc800217 	ldw	r18,8(sp)
   86aac:	dc400117 	ldw	r17,4(sp)
   86ab0:	dc000017 	ldw	r16,0(sp)
   86ab4:	dec00504 	addi	sp,sp,20
   86ab8:	f800283a 	ret
   86abc:	8009883a 	mov	r4,r16
   86ac0:	000b883a 	mov	r5,zero
   86ac4:	00898c00 	call	898c0 <_sbrk_r>
   86ac8:	88c00217 	ldw	r3,8(r17)
   86acc:	014003c4 	movi	r5,15
   86ad0:	10c9c83a 	sub	r4,r2,r3
   86ad4:	293fd70e 	bge	r5,r4,86a34 <_gp+0xfffec640>
   86ad8:	01400274 	movhi	r5,9
   86adc:	29490104 	addi	r5,r5,9220
   86ae0:	29400017 	ldw	r5,0(r5)
   86ae4:	21000054 	ori	r4,r4,1
   86ae8:	19000115 	stw	r4,4(r3)
   86aec:	1145c83a 	sub	r2,r2,r5
   86af0:	01400274 	movhi	r5,9
   86af4:	294fd904 	addi	r5,r5,16228
   86af8:	28800015 	stw	r2,0(r5)
   86afc:	003fcd06 	br	86a34 <_gp+0xfffec640>

00086b00 <_free_r>:
   86b00:	defffd04 	addi	sp,sp,-12
   86b04:	dc000015 	stw	r16,0(sp)
   86b08:	dfc00215 	stw	ra,8(sp)
   86b0c:	dc400115 	stw	r17,4(sp)
   86b10:	2821883a 	mov	r16,r5
   86b14:	28004c26 	beq	r5,zero,86c48 <_free_r+0x148>
   86b18:	2023883a 	mov	r17,r4
   86b1c:	008e72c0 	call	8e72c <__malloc_lock>
   86b20:	823fff17 	ldw	r8,-4(r16)
   86b24:	00bfff84 	movi	r2,-2
   86b28:	81bffe04 	addi	r6,r16,-8
   86b2c:	4084703a 	and	r2,r8,r2
   86b30:	3087883a 	add	r3,r6,r2
   86b34:	01400274 	movhi	r5,9
   86b38:	29437904 	addi	r5,r5,3556
   86b3c:	1a400117 	ldw	r9,4(r3)
   86b40:	29000217 	ldw	r4,8(r5)
   86b44:	01ffff04 	movi	r7,-4
   86b48:	49ce703a 	and	r7,r9,r7
   86b4c:	20c06526 	beq	r4,r3,86ce4 <_free_r+0x1e4>
   86b50:	19c00115 	stw	r7,4(r3)
   86b54:	4200004c 	andi	r8,r8,1
   86b58:	40003026 	beq	r8,zero,86c1c <_free_r+0x11c>
   86b5c:	0009883a 	mov	r4,zero
   86b60:	19d1883a 	add	r8,r3,r7
   86b64:	42000117 	ldw	r8,4(r8)
   86b68:	4200004c 	andi	r8,r8,1
   86b6c:	4000061e 	bne	r8,zero,86b88 <_free_r+0x88>
   86b70:	11c5883a 	add	r2,r2,r7
   86b74:	19c00217 	ldw	r7,8(r3)
   86b78:	20004e26 	beq	r4,zero,86cb4 <_free_r+0x1b4>
   86b7c:	18c00317 	ldw	r3,12(r3)
   86b80:	38c00315 	stw	r3,12(r7)
   86b84:	19c00215 	stw	r7,8(r3)
   86b88:	10c00054 	ori	r3,r2,1
   86b8c:	30c00115 	stw	r3,4(r6)
   86b90:	3087883a 	add	r3,r6,r2
   86b94:	18800015 	stw	r2,0(r3)
   86b98:	20001a1e 	bne	r4,zero,86c04 <_free_r+0x104>
   86b9c:	00c07fc4 	movi	r3,511
   86ba0:	18802e2e 	bgeu	r3,r2,86c5c <_free_r+0x15c>
   86ba4:	1006d27a 	srli	r3,r2,9
   86ba8:	01000104 	movi	r4,4
   86bac:	20c06636 	bltu	r4,r3,86d48 <_free_r+0x248>
   86bb0:	1008d1ba 	srli	r4,r2,6
   86bb4:	21000e04 	addi	r4,r4,56
   86bb8:	210f883a 	add	r7,r4,r4
   86bbc:	39cf883a 	add	r7,r7,r7
   86bc0:	39cf883a 	add	r7,r7,r7
   86bc4:	29cf883a 	add	r7,r5,r7
   86bc8:	38c00217 	ldw	r3,8(r7)
   86bcc:	01400274 	movhi	r5,9
   86bd0:	29437904 	addi	r5,r5,3556
   86bd4:	19c06126 	beq	r3,r7,86d5c <_free_r+0x25c>
   86bd8:	013fff04 	movi	r4,-4
   86bdc:	19400117 	ldw	r5,4(r3)
   86be0:	290a703a 	and	r5,r5,r4
   86be4:	1140022e 	bgeu	r2,r5,86bf0 <_free_r+0xf0>
   86be8:	18c00217 	ldw	r3,8(r3)
   86bec:	38fffb1e 	bne	r7,r3,86bdc <_gp+0xfffec7e8>
   86bf0:	18800317 	ldw	r2,12(r3)
   86bf4:	30800315 	stw	r2,12(r6)
   86bf8:	30c00215 	stw	r3,8(r6)
   86bfc:	11800215 	stw	r6,8(r2)
   86c00:	19800315 	stw	r6,12(r3)
   86c04:	8809883a 	mov	r4,r17
   86c08:	dfc00217 	ldw	ra,8(sp)
   86c0c:	dc400117 	ldw	r17,4(sp)
   86c10:	dc000017 	ldw	r16,0(sp)
   86c14:	dec00304 	addi	sp,sp,12
   86c18:	008e7301 	jmpi	8e730 <__malloc_unlock>
   86c1c:	813ffe17 	ldw	r4,-8(r16)
   86c20:	2a400204 	addi	r9,r5,8
   86c24:	310dc83a 	sub	r6,r6,r4
   86c28:	32000217 	ldw	r8,8(r6)
   86c2c:	1105883a 	add	r2,r2,r4
   86c30:	42404326 	beq	r8,r9,86d40 <_free_r+0x240>
   86c34:	32400317 	ldw	r9,12(r6)
   86c38:	0009883a 	mov	r4,zero
   86c3c:	42400315 	stw	r9,12(r8)
   86c40:	4a000215 	stw	r8,8(r9)
   86c44:	003fc606 	br	86b60 <_gp+0xfffec76c>
   86c48:	dfc00217 	ldw	ra,8(sp)
   86c4c:	dc400117 	ldw	r17,4(sp)
   86c50:	dc000017 	ldw	r16,0(sp)
   86c54:	dec00304 	addi	sp,sp,12
   86c58:	f800283a 	ret
   86c5c:	1004d0fa 	srli	r2,r2,3
   86c60:	02000044 	movi	r8,1
   86c64:	29c00117 	ldw	r7,4(r5)
   86c68:	1087883a 	add	r3,r2,r2
   86c6c:	18c7883a 	add	r3,r3,r3
   86c70:	18c7883a 	add	r3,r3,r3
   86c74:	28c7883a 	add	r3,r5,r3
   86c78:	1005d0ba 	srai	r2,r2,2
   86c7c:	19000217 	ldw	r4,8(r3)
   86c80:	30c00315 	stw	r3,12(r6)
   86c84:	4084983a 	sll	r2,r8,r2
   86c88:	31000215 	stw	r4,8(r6)
   86c8c:	19800215 	stw	r6,8(r3)
   86c90:	11c4b03a 	or	r2,r2,r7
   86c94:	21800315 	stw	r6,12(r4)
   86c98:	8809883a 	mov	r4,r17
   86c9c:	28800115 	stw	r2,4(r5)
   86ca0:	dfc00217 	ldw	ra,8(sp)
   86ca4:	dc400117 	ldw	r17,4(sp)
   86ca8:	dc000017 	ldw	r16,0(sp)
   86cac:	dec00304 	addi	sp,sp,12
   86cb0:	008e7301 	jmpi	8e730 <__malloc_unlock>
   86cb4:	02000274 	movhi	r8,9
   86cb8:	42037b04 	addi	r8,r8,3564
   86cbc:	3a3faf1e 	bne	r7,r8,86b7c <_gp+0xfffec788>
   86cc0:	29800515 	stw	r6,20(r5)
   86cc4:	29800415 	stw	r6,16(r5)
   86cc8:	10c00054 	ori	r3,r2,1
   86ccc:	31c00315 	stw	r7,12(r6)
   86cd0:	31c00215 	stw	r7,8(r6)
   86cd4:	30c00115 	stw	r3,4(r6)
   86cd8:	308d883a 	add	r6,r6,r2
   86cdc:	30800015 	stw	r2,0(r6)
   86ce0:	003fc806 	br	86c04 <_gp+0xfffec810>
   86ce4:	4200004c 	andi	r8,r8,1
   86ce8:	3885883a 	add	r2,r7,r2
   86cec:	4000071e 	bne	r8,zero,86d0c <_free_r+0x20c>
   86cf0:	81fffe17 	ldw	r7,-8(r16)
   86cf4:	31cdc83a 	sub	r6,r6,r7
   86cf8:	30c00317 	ldw	r3,12(r6)
   86cfc:	31000217 	ldw	r4,8(r6)
   86d00:	11c5883a 	add	r2,r2,r7
   86d04:	20c00315 	stw	r3,12(r4)
   86d08:	19000215 	stw	r4,8(r3)
   86d0c:	00c00274 	movhi	r3,9
   86d10:	18c90204 	addi	r3,r3,9224
   86d14:	11000054 	ori	r4,r2,1
   86d18:	18c00017 	ldw	r3,0(r3)
   86d1c:	31000115 	stw	r4,4(r6)
   86d20:	29800215 	stw	r6,8(r5)
   86d24:	10ffb736 	bltu	r2,r3,86c04 <_gp+0xfffec810>
   86d28:	00800274 	movhi	r2,9
   86d2c:	108fcf04 	addi	r2,r2,16188
   86d30:	11400017 	ldw	r5,0(r2)
   86d34:	8809883a 	mov	r4,r17
   86d38:	00869c40 	call	869c4 <_malloc_trim_r>
   86d3c:	003fb106 	br	86c04 <_gp+0xfffec810>
   86d40:	01000044 	movi	r4,1
   86d44:	003f8606 	br	86b60 <_gp+0xfffec76c>
   86d48:	01000504 	movi	r4,20
   86d4c:	20c00b36 	bltu	r4,r3,86d7c <_free_r+0x27c>
   86d50:	190016c4 	addi	r4,r3,91
   86d54:	210f883a 	add	r7,r4,r4
   86d58:	003f9806 	br	86bbc <_gp+0xfffec7c8>
   86d5c:	2009d0ba 	srai	r4,r4,2
   86d60:	00800044 	movi	r2,1
   86d64:	29c00117 	ldw	r7,4(r5)
   86d68:	1108983a 	sll	r4,r2,r4
   86d6c:	1805883a 	mov	r2,r3
   86d70:	21c8b03a 	or	r4,r4,r7
   86d74:	29000115 	stw	r4,4(r5)
   86d78:	003f9e06 	br	86bf4 <_gp+0xfffec800>
   86d7c:	01001504 	movi	r4,84
   86d80:	20c00436 	bltu	r4,r3,86d94 <_free_r+0x294>
   86d84:	1008d33a 	srli	r4,r2,12
   86d88:	21001b84 	addi	r4,r4,110
   86d8c:	210f883a 	add	r7,r4,r4
   86d90:	003f8a06 	br	86bbc <_gp+0xfffec7c8>
   86d94:	01005504 	movi	r4,340
   86d98:	20c00436 	bltu	r4,r3,86dac <_free_r+0x2ac>
   86d9c:	1008d3fa 	srli	r4,r2,15
   86da0:	21001dc4 	addi	r4,r4,119
   86da4:	210f883a 	add	r7,r4,r4
   86da8:	003f8406 	br	86bbc <_gp+0xfffec7c8>
   86dac:	01015504 	movi	r4,1364
   86db0:	20c00436 	bltu	r4,r3,86dc4 <_free_r+0x2c4>
   86db4:	1008d4ba 	srli	r4,r2,18
   86db8:	21001f04 	addi	r4,r4,124
   86dbc:	210f883a 	add	r7,r4,r4
   86dc0:	003f7e06 	br	86bbc <_gp+0xfffec7c8>
   86dc4:	01c03f04 	movi	r7,252
   86dc8:	01001f84 	movi	r4,126
   86dcc:	003f7b06 	br	86bbc <_gp+0xfffec7c8>

00086dd0 <__sfvwrite_r>:
   86dd0:	30800217 	ldw	r2,8(r6)
   86dd4:	defff404 	addi	sp,sp,-48
   86dd8:	dcc00515 	stw	r19,20(sp)
   86ddc:	dfc00b15 	stw	ra,44(sp)
   86de0:	df000a15 	stw	fp,40(sp)
   86de4:	ddc00915 	stw	r23,36(sp)
   86de8:	dd800815 	stw	r22,32(sp)
   86dec:	dd400715 	stw	r21,28(sp)
   86df0:	dd000615 	stw	r20,24(sp)
   86df4:	dc800415 	stw	r18,16(sp)
   86df8:	dc400315 	stw	r17,12(sp)
   86dfc:	dc000215 	stw	r16,8(sp)
   86e00:	3027883a 	mov	r19,r6
   86e04:	10001d26 	beq	r2,zero,86e7c <__sfvwrite_r+0xac>
   86e08:	2880030b 	ldhu	r2,12(r5)
   86e0c:	202b883a 	mov	r21,r4
   86e10:	2821883a 	mov	r16,r5
   86e14:	10c0020c 	andi	r3,r2,8
   86e18:	18002526 	beq	r3,zero,86eb0 <__sfvwrite_r+0xe0>
   86e1c:	28c00417 	ldw	r3,16(r5)
   86e20:	18002326 	beq	r3,zero,86eb0 <__sfvwrite_r+0xe0>
   86e24:	10c0008c 	andi	r3,r2,2
   86e28:	9c400017 	ldw	r17,0(r19)
   86e2c:	18002826 	beq	r3,zero,86ed0 <__sfvwrite_r+0x100>
   86e30:	0029883a 	mov	r20,zero
   86e34:	0025883a 	mov	r18,zero
   86e38:	05810004 	movi	r22,1024
   86e3c:	a00d883a 	mov	r6,r20
   86e40:	a809883a 	mov	r4,r21
   86e44:	90004726 	beq	r18,zero,86f64 <__sfvwrite_r+0x194>
   86e48:	900f883a 	mov	r7,r18
   86e4c:	81400717 	ldw	r5,28(r16)
   86e50:	b480012e 	bgeu	r22,r18,86e58 <__sfvwrite_r+0x88>
   86e54:	01c10004 	movi	r7,1024
   86e58:	80800917 	ldw	r2,36(r16)
   86e5c:	103ee83a 	callr	r2
   86e60:	00804c0e 	bge	zero,r2,86f94 <__sfvwrite_r+0x1c4>
   86e64:	98c00217 	ldw	r3,8(r19)
   86e68:	a0a9883a 	add	r20,r20,r2
   86e6c:	90a5c83a 	sub	r18,r18,r2
   86e70:	1885c83a 	sub	r2,r3,r2
   86e74:	98800215 	stw	r2,8(r19)
   86e78:	103ff01e 	bne	r2,zero,86e3c <_gp+0xfffeca48>
   86e7c:	0005883a 	mov	r2,zero
   86e80:	dfc00b17 	ldw	ra,44(sp)
   86e84:	df000a17 	ldw	fp,40(sp)
   86e88:	ddc00917 	ldw	r23,36(sp)
   86e8c:	dd800817 	ldw	r22,32(sp)
   86e90:	dd400717 	ldw	r21,28(sp)
   86e94:	dd000617 	ldw	r20,24(sp)
   86e98:	dcc00517 	ldw	r19,20(sp)
   86e9c:	dc800417 	ldw	r18,16(sp)
   86ea0:	dc400317 	ldw	r17,12(sp)
   86ea4:	dc000217 	ldw	r16,8(sp)
   86ea8:	dec00c04 	addi	sp,sp,48
   86eac:	f800283a 	ret
   86eb0:	a809883a 	mov	r4,r21
   86eb4:	800b883a 	mov	r5,r16
   86eb8:	0084a100 	call	84a10 <__swsetup_r>
   86ebc:	1000e81e 	bne	r2,zero,87260 <__sfvwrite_r+0x490>
   86ec0:	8080030b 	ldhu	r2,12(r16)
   86ec4:	9c400017 	ldw	r17,0(r19)
   86ec8:	10c0008c 	andi	r3,r2,2
   86ecc:	183fd81e 	bne	r3,zero,86e30 <_gp+0xfffeca3c>
   86ed0:	10c0004c 	andi	r3,r2,1
   86ed4:	002d883a 	mov	r22,zero
   86ed8:	1800331e 	bne	r3,zero,86fa8 <__sfvwrite_r+0x1d8>
   86edc:	0025883a 	mov	r18,zero
   86ee0:	90001c26 	beq	r18,zero,86f54 <__sfvwrite_r+0x184>
   86ee4:	10c0800c 	andi	r3,r2,512
   86ee8:	85000217 	ldw	r20,8(r16)
   86eec:	18006f26 	beq	r3,zero,870ac <__sfvwrite_r+0x2dc>
   86ef0:	95008936 	bltu	r18,r20,87118 <__sfvwrite_r+0x348>
   86ef4:	10c1200c 	andi	r3,r2,1152
   86ef8:	1800a11e 	bne	r3,zero,87180 <__sfvwrite_r+0x3b0>
   86efc:	81000017 	ldw	r4,0(r16)
   86f00:	a02f883a 	mov	r23,r20
   86f04:	a039883a 	mov	fp,r20
   86f08:	9029883a 	mov	r20,r18
   86f0c:	b00b883a 	mov	r5,r22
   86f10:	b80d883a 	mov	r6,r23
   86f14:	0087f100 	call	87f10 <memmove>
   86f18:	81400217 	ldw	r5,8(r16)
   86f1c:	81000017 	ldw	r4,0(r16)
   86f20:	9005883a 	mov	r2,r18
   86f24:	2f39c83a 	sub	fp,r5,fp
   86f28:	25c7883a 	add	r3,r4,r23
   86f2c:	87000215 	stw	fp,8(r16)
   86f30:	80c00015 	stw	r3,0(r16)
   86f34:	98c00217 	ldw	r3,8(r19)
   86f38:	b0ad883a 	add	r22,r22,r2
   86f3c:	90a5c83a 	sub	r18,r18,r2
   86f40:	1d29c83a 	sub	r20,r3,r20
   86f44:	9d000215 	stw	r20,8(r19)
   86f48:	a03fcc26 	beq	r20,zero,86e7c <_gp+0xfffeca88>
   86f4c:	8080030b 	ldhu	r2,12(r16)
   86f50:	903fe41e 	bne	r18,zero,86ee4 <_gp+0xfffecaf0>
   86f54:	8d800017 	ldw	r22,0(r17)
   86f58:	8c800117 	ldw	r18,4(r17)
   86f5c:	8c400204 	addi	r17,r17,8
   86f60:	003fdf06 	br	86ee0 <_gp+0xfffecaec>
   86f64:	8d000017 	ldw	r20,0(r17)
   86f68:	8c800117 	ldw	r18,4(r17)
   86f6c:	8c400204 	addi	r17,r17,8
   86f70:	003fb206 	br	86e3c <_gp+0xfffeca48>
   86f74:	00892f40 	call	892f4 <_realloc_r>
   86f78:	1039883a 	mov	fp,r2
   86f7c:	10009d1e 	bne	r2,zero,871f4 <__sfvwrite_r+0x424>
   86f80:	81400417 	ldw	r5,16(r16)
   86f84:	a809883a 	mov	r4,r21
   86f88:	0086b000 	call	86b00 <_free_r>
   86f8c:	00800304 	movi	r2,12
   86f90:	a8800015 	stw	r2,0(r21)
   86f94:	80c0030b 	ldhu	r3,12(r16)
   86f98:	00bfffc4 	movi	r2,-1
   86f9c:	18c01014 	ori	r3,r3,64
   86fa0:	80c0030d 	sth	r3,12(r16)
   86fa4:	003fb606 	br	86e80 <_gp+0xfffeca8c>
   86fa8:	0007883a 	mov	r3,zero
   86fac:	0039883a 	mov	fp,zero
   86fb0:	0025883a 	mov	r18,zero
   86fb4:	90001f26 	beq	r18,zero,87034 <__sfvwrite_r+0x264>
   86fb8:	18006826 	beq	r3,zero,8715c <__sfvwrite_r+0x38c>
   86fbc:	b02f883a 	mov	r23,r22
   86fc0:	9580012e 	bgeu	r18,r22,86fc8 <__sfvwrite_r+0x1f8>
   86fc4:	902f883a 	mov	r23,r18
   86fc8:	81000017 	ldw	r4,0(r16)
   86fcc:	80800417 	ldw	r2,16(r16)
   86fd0:	b829883a 	mov	r20,r23
   86fd4:	81800217 	ldw	r6,8(r16)
   86fd8:	81c00517 	ldw	r7,20(r16)
   86fdc:	1100022e 	bgeu	r2,r4,86fe8 <__sfvwrite_r+0x218>
   86fe0:	31d1883a 	add	r8,r6,r7
   86fe4:	45c01816 	blt	r8,r23,87048 <__sfvwrite_r+0x278>
   86fe8:	b9c03f16 	blt	r23,r7,870e8 <__sfvwrite_r+0x318>
   86fec:	80800917 	ldw	r2,36(r16)
   86ff0:	81400717 	ldw	r5,28(r16)
   86ff4:	a809883a 	mov	r4,r21
   86ff8:	d8c00115 	stw	r3,4(sp)
   86ffc:	e00d883a 	mov	r6,fp
   87000:	103ee83a 	callr	r2
   87004:	1029883a 	mov	r20,r2
   87008:	d8c00117 	ldw	r3,4(sp)
   8700c:	00bfe10e 	bge	zero,r2,86f94 <_gp+0xfffecba0>
   87010:	b52dc83a 	sub	r22,r22,r20
   87014:	b0001f26 	beq	r22,zero,87094 <__sfvwrite_r+0x2c4>
   87018:	98800217 	ldw	r2,8(r19)
   8701c:	e539883a 	add	fp,fp,r20
   87020:	9525c83a 	sub	r18,r18,r20
   87024:	1529c83a 	sub	r20,r2,r20
   87028:	9d000215 	stw	r20,8(r19)
   8702c:	a03f9326 	beq	r20,zero,86e7c <_gp+0xfffeca88>
   87030:	903fe11e 	bne	r18,zero,86fb8 <_gp+0xfffecbc4>
   87034:	8f000017 	ldw	fp,0(r17)
   87038:	8c800117 	ldw	r18,4(r17)
   8703c:	0007883a 	mov	r3,zero
   87040:	8c400204 	addi	r17,r17,8
   87044:	003fdb06 	br	86fb4 <_gp+0xfffecbc0>
   87048:	400d883a 	mov	r6,r8
   8704c:	e00b883a 	mov	r5,fp
   87050:	d8c00115 	stw	r3,4(sp)
   87054:	da000015 	stw	r8,0(sp)
   87058:	0087f100 	call	87f10 <memmove>
   8705c:	da000017 	ldw	r8,0(sp)
   87060:	80800017 	ldw	r2,0(r16)
   87064:	a809883a 	mov	r4,r21
   87068:	800b883a 	mov	r5,r16
   8706c:	1205883a 	add	r2,r2,r8
   87070:	80800015 	stw	r2,0(r16)
   87074:	da000015 	stw	r8,0(sp)
   87078:	00863ac0 	call	863ac <_fflush_r>
   8707c:	d8c00117 	ldw	r3,4(sp)
   87080:	da000017 	ldw	r8,0(sp)
   87084:	103fc31e 	bne	r2,zero,86f94 <_gp+0xfffecba0>
   87088:	4029883a 	mov	r20,r8
   8708c:	b52dc83a 	sub	r22,r22,r20
   87090:	b03fe11e 	bne	r22,zero,87018 <_gp+0xfffecc24>
   87094:	a809883a 	mov	r4,r21
   87098:	800b883a 	mov	r5,r16
   8709c:	00863ac0 	call	863ac <_fflush_r>
   870a0:	103fbc1e 	bne	r2,zero,86f94 <_gp+0xfffecba0>
   870a4:	0007883a 	mov	r3,zero
   870a8:	003fdb06 	br	87018 <_gp+0xfffecc24>
   870ac:	81000017 	ldw	r4,0(r16)
   870b0:	80800417 	ldw	r2,16(r16)
   870b4:	1100012e 	bgeu	r2,r4,870bc <__sfvwrite_r+0x2ec>
   870b8:	a4805836 	bltu	r20,r18,8721c <__sfvwrite_r+0x44c>
   870bc:	81c00517 	ldw	r7,20(r16)
   870c0:	91c01a36 	bltu	r18,r7,8712c <__sfvwrite_r+0x35c>
   870c4:	80800917 	ldw	r2,36(r16)
   870c8:	81400717 	ldw	r5,28(r16)
   870cc:	a809883a 	mov	r4,r21
   870d0:	b00d883a 	mov	r6,r22
   870d4:	103ee83a 	callr	r2
   870d8:	1029883a 	mov	r20,r2
   870dc:	00bfad0e 	bge	zero,r2,86f94 <_gp+0xfffecba0>
   870e0:	a005883a 	mov	r2,r20
   870e4:	003f9306 	br	86f34 <_gp+0xfffecb40>
   870e8:	b80d883a 	mov	r6,r23
   870ec:	e00b883a 	mov	r5,fp
   870f0:	d8c00115 	stw	r3,4(sp)
   870f4:	0087f100 	call	87f10 <memmove>
   870f8:	80800217 	ldw	r2,8(r16)
   870fc:	81000017 	ldw	r4,0(r16)
   87100:	d8c00117 	ldw	r3,4(sp)
   87104:	15c5c83a 	sub	r2,r2,r23
   87108:	25ef883a 	add	r23,r4,r23
   8710c:	80800215 	stw	r2,8(r16)
   87110:	85c00015 	stw	r23,0(r16)
   87114:	003fbe06 	br	87010 <_gp+0xfffecc1c>
   87118:	81000017 	ldw	r4,0(r16)
   8711c:	9039883a 	mov	fp,r18
   87120:	9029883a 	mov	r20,r18
   87124:	902f883a 	mov	r23,r18
   87128:	003f7806 	br	86f0c <_gp+0xfffecb18>
   8712c:	b00b883a 	mov	r5,r22
   87130:	900d883a 	mov	r6,r18
   87134:	0087f100 	call	87f10 <memmove>
   87138:	80c00217 	ldw	r3,8(r16)
   8713c:	80800017 	ldw	r2,0(r16)
   87140:	9029883a 	mov	r20,r18
   87144:	1c87c83a 	sub	r3,r3,r18
   87148:	1485883a 	add	r2,r2,r18
   8714c:	80800015 	stw	r2,0(r16)
   87150:	80c00215 	stw	r3,8(r16)
   87154:	9005883a 	mov	r2,r18
   87158:	003f7606 	br	86f34 <_gp+0xfffecb40>
   8715c:	e009883a 	mov	r4,fp
   87160:	01400284 	movi	r5,10
   87164:	900d883a 	mov	r6,r18
   87168:	0087e280 	call	87e28 <memchr>
   8716c:	10003926 	beq	r2,zero,87254 <__sfvwrite_r+0x484>
   87170:	15800044 	addi	r22,r2,1
   87174:	b72dc83a 	sub	r22,r22,fp
   87178:	00c00044 	movi	r3,1
   8717c:	003f8f06 	br	86fbc <_gp+0xfffecbc8>
   87180:	81000517 	ldw	r4,20(r16)
   87184:	81400417 	ldw	r5,16(r16)
   87188:	80c00017 	ldw	r3,0(r16)
   8718c:	210d883a 	add	r6,r4,r4
   87190:	3109883a 	add	r4,r6,r4
   87194:	2028d7fa 	srli	r20,r4,31
   87198:	196fc83a 	sub	r23,r3,r5
   8719c:	b9800044 	addi	r6,r23,1
   871a0:	a109883a 	add	r4,r20,r4
   871a4:	2029d07a 	srai	r20,r4,1
   871a8:	348d883a 	add	r6,r6,r18
   871ac:	a180272e 	bgeu	r20,r6,8724c <__sfvwrite_r+0x47c>
   871b0:	3029883a 	mov	r20,r6
   871b4:	1081000c 	andi	r2,r2,1024
   871b8:	a809883a 	mov	r4,r21
   871bc:	103f6d26 	beq	r2,zero,86f74 <_gp+0xfffecb80>
   871c0:	300b883a 	mov	r5,r6
   871c4:	00876640 	call	87664 <_malloc_r>
   871c8:	1039883a 	mov	fp,r2
   871cc:	103f6f26 	beq	r2,zero,86f8c <_gp+0xfffecb98>
   871d0:	81400417 	ldw	r5,16(r16)
   871d4:	1009883a 	mov	r4,r2
   871d8:	b80d883a 	mov	r6,r23
   871dc:	00825a80 	call	825a8 <memcpy>
   871e0:	8080030b 	ldhu	r2,12(r16)
   871e4:	00fedfc4 	movi	r3,-1153
   871e8:	10c4703a 	and	r2,r2,r3
   871ec:	10802014 	ori	r2,r2,128
   871f0:	8080030d 	sth	r2,12(r16)
   871f4:	e5c9883a 	add	r4,fp,r23
   871f8:	a5c7c83a 	sub	r3,r20,r23
   871fc:	87000415 	stw	fp,16(r16)
   87200:	85000515 	stw	r20,20(r16)
   87204:	81000015 	stw	r4,0(r16)
   87208:	9039883a 	mov	fp,r18
   8720c:	80c00215 	stw	r3,8(r16)
   87210:	9029883a 	mov	r20,r18
   87214:	902f883a 	mov	r23,r18
   87218:	003f3c06 	br	86f0c <_gp+0xfffecb18>
   8721c:	b00b883a 	mov	r5,r22
   87220:	a00d883a 	mov	r6,r20
   87224:	0087f100 	call	87f10 <memmove>
   87228:	80800017 	ldw	r2,0(r16)
   8722c:	a809883a 	mov	r4,r21
   87230:	800b883a 	mov	r5,r16
   87234:	1505883a 	add	r2,r2,r20
   87238:	80800015 	stw	r2,0(r16)
   8723c:	00863ac0 	call	863ac <_fflush_r>
   87240:	103f541e 	bne	r2,zero,86f94 <_gp+0xfffecba0>
   87244:	a005883a 	mov	r2,r20
   87248:	003f3a06 	br	86f34 <_gp+0xfffecb40>
   8724c:	a00d883a 	mov	r6,r20
   87250:	003fd806 	br	871b4 <_gp+0xfffecdc0>
   87254:	95800044 	addi	r22,r18,1
   87258:	00c00044 	movi	r3,1
   8725c:	003f5706 	br	86fbc <_gp+0xfffecbc8>
   87260:	80c0030b 	ldhu	r3,12(r16)
   87264:	00bfffc4 	movi	r2,-1
   87268:	18c01014 	ori	r3,r3,64
   8726c:	80c0030d 	sth	r3,12(r16)
   87270:	00c00244 	movi	r3,9
   87274:	a8c00015 	stw	r3,0(r21)
   87278:	003f0106 	br	86e80 <_gp+0xfffeca8c>

0008727c <_fwalk>:
   8727c:	defff904 	addi	sp,sp,-28
   87280:	dcc00315 	stw	r19,12(sp)
   87284:	24c0b804 	addi	r19,r4,736
   87288:	dd400515 	stw	r21,20(sp)
   8728c:	dd000415 	stw	r20,16(sp)
   87290:	dfc00615 	stw	ra,24(sp)
   87294:	dc800215 	stw	r18,8(sp)
   87298:	dc400115 	stw	r17,4(sp)
   8729c:	dc000015 	stw	r16,0(sp)
   872a0:	282b883a 	mov	r21,r5
   872a4:	0029883a 	mov	r20,zero
   872a8:	00869840 	call	86984 <__sfp_lock_acquire>
   872ac:	98001226 	beq	r19,zero,872f8 <_fwalk+0x7c>
   872b0:	04bfffc4 	movi	r18,-1
   872b4:	9c400117 	ldw	r17,4(r19)
   872b8:	9c000217 	ldw	r16,8(r19)
   872bc:	8c7fffc4 	addi	r17,r17,-1
   872c0:	88000b16 	blt	r17,zero,872f0 <_fwalk+0x74>
   872c4:	84000304 	addi	r16,r16,12
   872c8:	80c0000f 	ldh	r3,0(r16)
   872cc:	8c7fffc4 	addi	r17,r17,-1
   872d0:	813ffd04 	addi	r4,r16,-12
   872d4:	18000426 	beq	r3,zero,872e8 <_fwalk+0x6c>
   872d8:	80c0008f 	ldh	r3,2(r16)
   872dc:	1c800226 	beq	r3,r18,872e8 <_fwalk+0x6c>
   872e0:	a83ee83a 	callr	r21
   872e4:	a0a8b03a 	or	r20,r20,r2
   872e8:	84001a04 	addi	r16,r16,104
   872ec:	8cbff61e 	bne	r17,r18,872c8 <_gp+0xfffeced4>
   872f0:	9cc00017 	ldw	r19,0(r19)
   872f4:	983fef1e 	bne	r19,zero,872b4 <_gp+0xfffecec0>
   872f8:	00869880 	call	86988 <__sfp_lock_release>
   872fc:	a005883a 	mov	r2,r20
   87300:	dfc00617 	ldw	ra,24(sp)
   87304:	dd400517 	ldw	r21,20(sp)
   87308:	dd000417 	ldw	r20,16(sp)
   8730c:	dcc00317 	ldw	r19,12(sp)
   87310:	dc800217 	ldw	r18,8(sp)
   87314:	dc400117 	ldw	r17,4(sp)
   87318:	dc000017 	ldw	r16,0(sp)
   8731c:	dec00704 	addi	sp,sp,28
   87320:	f800283a 	ret

00087324 <_fwalk_reent>:
   87324:	defff804 	addi	sp,sp,-32
   87328:	dcc00315 	stw	r19,12(sp)
   8732c:	24c0b804 	addi	r19,r4,736
   87330:	dd800615 	stw	r22,24(sp)
   87334:	dd400515 	stw	r21,20(sp)
   87338:	dd000415 	stw	r20,16(sp)
   8733c:	dfc00715 	stw	ra,28(sp)
   87340:	dc800215 	stw	r18,8(sp)
   87344:	dc400115 	stw	r17,4(sp)
   87348:	dc000015 	stw	r16,0(sp)
   8734c:	2029883a 	mov	r20,r4
   87350:	282b883a 	mov	r21,r5
   87354:	002d883a 	mov	r22,zero
   87358:	00869840 	call	86984 <__sfp_lock_acquire>
   8735c:	98001326 	beq	r19,zero,873ac <_fwalk_reent+0x88>
   87360:	04bfffc4 	movi	r18,-1
   87364:	9c400117 	ldw	r17,4(r19)
   87368:	9c000217 	ldw	r16,8(r19)
   8736c:	8c7fffc4 	addi	r17,r17,-1
   87370:	88000c16 	blt	r17,zero,873a4 <_fwalk_reent+0x80>
   87374:	84000304 	addi	r16,r16,12
   87378:	80c0000f 	ldh	r3,0(r16)
   8737c:	8c7fffc4 	addi	r17,r17,-1
   87380:	817ffd04 	addi	r5,r16,-12
   87384:	18000526 	beq	r3,zero,8739c <_fwalk_reent+0x78>
   87388:	80c0008f 	ldh	r3,2(r16)
   8738c:	a009883a 	mov	r4,r20
   87390:	1c800226 	beq	r3,r18,8739c <_fwalk_reent+0x78>
   87394:	a83ee83a 	callr	r21
   87398:	b0acb03a 	or	r22,r22,r2
   8739c:	84001a04 	addi	r16,r16,104
   873a0:	8cbff51e 	bne	r17,r18,87378 <_gp+0xfffecf84>
   873a4:	9cc00017 	ldw	r19,0(r19)
   873a8:	983fee1e 	bne	r19,zero,87364 <_gp+0xfffecf70>
   873ac:	00869880 	call	86988 <__sfp_lock_release>
   873b0:	b005883a 	mov	r2,r22
   873b4:	dfc00717 	ldw	ra,28(sp)
   873b8:	dd800617 	ldw	r22,24(sp)
   873bc:	dd400517 	ldw	r21,20(sp)
   873c0:	dd000417 	ldw	r20,16(sp)
   873c4:	dcc00317 	ldw	r19,12(sp)
   873c8:	dc800217 	ldw	r18,8(sp)
   873cc:	dc400117 	ldw	r17,4(sp)
   873d0:	dc000017 	ldw	r16,0(sp)
   873d4:	dec00804 	addi	sp,sp,32
   873d8:	f800283a 	ret

000873dc <_setlocale_r>:
   873dc:	defffe04 	addi	sp,sp,-8
   873e0:	dc000015 	stw	r16,0(sp)
   873e4:	dfc00115 	stw	ra,4(sp)
   873e8:	3021883a 	mov	r16,r6
   873ec:	30000526 	beq	r6,zero,87404 <_setlocale_r+0x28>
   873f0:	3009883a 	mov	r4,r6
   873f4:	01400274 	movhi	r5,9
   873f8:	2941f604 	addi	r5,r5,2008
   873fc:	0089a600 	call	89a60 <strcmp>
   87400:	1000061e 	bne	r2,zero,8741c <_setlocale_r+0x40>
   87404:	00800274 	movhi	r2,9
   87408:	1081f504 	addi	r2,r2,2004
   8740c:	dfc00117 	ldw	ra,4(sp)
   87410:	dc000017 	ldw	r16,0(sp)
   87414:	dec00204 	addi	sp,sp,8
   87418:	f800283a 	ret
   8741c:	8009883a 	mov	r4,r16
   87420:	01400274 	movhi	r5,9
   87424:	2941f504 	addi	r5,r5,2004
   87428:	0089a600 	call	89a60 <strcmp>
   8742c:	103ff526 	beq	r2,zero,87404 <_gp+0xfffed010>
   87430:	8009883a 	mov	r4,r16
   87434:	01400274 	movhi	r5,9
   87438:	29425104 	addi	r5,r5,2372
   8743c:	0089a600 	call	89a60 <strcmp>
   87440:	103ff026 	beq	r2,zero,87404 <_gp+0xfffed010>
   87444:	0005883a 	mov	r2,zero
   87448:	003ff006 	br	8740c <_gp+0xfffed018>

0008744c <__locale_charset>:
   8744c:	00800274 	movhi	r2,9
   87450:	10836304 	addi	r2,r2,3468
   87454:	f800283a 	ret

00087458 <__locale_mb_cur_max>:
   87458:	00800274 	movhi	r2,9
   8745c:	10890004 	addi	r2,r2,9216
   87460:	10800017 	ldw	r2,0(r2)
   87464:	f800283a 	ret

00087468 <__locale_msgcharset>:
   87468:	00800274 	movhi	r2,9
   8746c:	10835b04 	addi	r2,r2,3436
   87470:	f800283a 	ret

00087474 <__locale_cjk_lang>:
   87474:	0005883a 	mov	r2,zero
   87478:	f800283a 	ret

0008747c <_localeconv_r>:
   8747c:	00800274 	movhi	r2,9
   87480:	10836b04 	addi	r2,r2,3500
   87484:	f800283a 	ret

00087488 <setlocale>:
   87488:	00c00274 	movhi	r3,9
   8748c:	18c8ff04 	addi	r3,r3,9212
   87490:	2005883a 	mov	r2,r4
   87494:	19000017 	ldw	r4,0(r3)
   87498:	280d883a 	mov	r6,r5
   8749c:	100b883a 	mov	r5,r2
   874a0:	00873dc1 	jmpi	873dc <_setlocale_r>

000874a4 <localeconv>:
   874a4:	00800274 	movhi	r2,9
   874a8:	10836b04 	addi	r2,r2,3500
   874ac:	f800283a 	ret

000874b0 <__smakebuf_r>:
   874b0:	2880030b 	ldhu	r2,12(r5)
   874b4:	deffec04 	addi	sp,sp,-80
   874b8:	dc000f15 	stw	r16,60(sp)
   874bc:	dfc01315 	stw	ra,76(sp)
   874c0:	dcc01215 	stw	r19,72(sp)
   874c4:	dc801115 	stw	r18,68(sp)
   874c8:	dc401015 	stw	r17,64(sp)
   874cc:	10c0008c 	andi	r3,r2,2
   874d0:	2821883a 	mov	r16,r5
   874d4:	18003a1e 	bne	r3,zero,875c0 <__smakebuf_r+0x110>
   874d8:	2940038f 	ldh	r5,14(r5)
   874dc:	2023883a 	mov	r17,r4
   874e0:	28001b16 	blt	r5,zero,87550 <__smakebuf_r+0xa0>
   874e4:	d80d883a 	mov	r6,sp
   874e8:	008b7000 	call	8b700 <_fstat_r>
   874ec:	10001716 	blt	r2,zero,8754c <__smakebuf_r+0x9c>
   874f0:	d8800117 	ldw	r2,4(sp)
   874f4:	00e00014 	movui	r3,32768
   874f8:	10bc000c 	andi	r2,r2,61440
   874fc:	10c03e26 	beq	r2,r3,875f8 <__smakebuf_r+0x148>
   87500:	80c0030b 	ldhu	r3,12(r16)
   87504:	18c20014 	ori	r3,r3,2048
   87508:	80c0030d 	sth	r3,12(r16)
   8750c:	00c80004 	movi	r3,8192
   87510:	10c0431e 	bne	r2,r3,87620 <__smakebuf_r+0x170>
   87514:	8140038f 	ldh	r5,14(r16)
   87518:	8809883a 	mov	r4,r17
   8751c:	008b7680 	call	8b768 <_isatty_r>
   87520:	10004d26 	beq	r2,zero,87658 <__smakebuf_r+0x1a8>
   87524:	80c0030b 	ldhu	r3,12(r16)
   87528:	04c00044 	movi	r19,1
   8752c:	808010c4 	addi	r2,r16,67
   87530:	1cc6b03a 	or	r3,r3,r19
   87534:	80c0030d 	sth	r3,12(r16)
   87538:	80800015 	stw	r2,0(r16)
   8753c:	80800415 	stw	r2,16(r16)
   87540:	84c00515 	stw	r19,20(r16)
   87544:	04810004 	movi	r18,1024
   87548:	00000706 	br	87568 <__smakebuf_r+0xb8>
   8754c:	8080030b 	ldhu	r2,12(r16)
   87550:	10c0200c 	andi	r3,r2,128
   87554:	1800261e 	bne	r3,zero,875f0 <__smakebuf_r+0x140>
   87558:	04810004 	movi	r18,1024
   8755c:	10820014 	ori	r2,r2,2048
   87560:	8080030d 	sth	r2,12(r16)
   87564:	0027883a 	mov	r19,zero
   87568:	8809883a 	mov	r4,r17
   8756c:	900b883a 	mov	r5,r18
   87570:	00876640 	call	87664 <_malloc_r>
   87574:	10002d26 	beq	r2,zero,8762c <__smakebuf_r+0x17c>
   87578:	80c0030b 	ldhu	r3,12(r16)
   8757c:	01000234 	movhi	r4,8
   87580:	21198c04 	addi	r4,r4,26160
   87584:	89000f15 	stw	r4,60(r17)
   87588:	18c02014 	ori	r3,r3,128
   8758c:	80c0030d 	sth	r3,12(r16)
   87590:	80800015 	stw	r2,0(r16)
   87594:	80800415 	stw	r2,16(r16)
   87598:	84800515 	stw	r18,20(r16)
   8759c:	98000d26 	beq	r19,zero,875d4 <__smakebuf_r+0x124>
   875a0:	8140038f 	ldh	r5,14(r16)
   875a4:	8809883a 	mov	r4,r17
   875a8:	008b7680 	call	8b768 <_isatty_r>
   875ac:	10000926 	beq	r2,zero,875d4 <__smakebuf_r+0x124>
   875b0:	8080030b 	ldhu	r2,12(r16)
   875b4:	10800054 	ori	r2,r2,1
   875b8:	8080030d 	sth	r2,12(r16)
   875bc:	00000506 	br	875d4 <__smakebuf_r+0x124>
   875c0:	288010c4 	addi	r2,r5,67
   875c4:	28800015 	stw	r2,0(r5)
   875c8:	28800415 	stw	r2,16(r5)
   875cc:	00800044 	movi	r2,1
   875d0:	28800515 	stw	r2,20(r5)
   875d4:	dfc01317 	ldw	ra,76(sp)
   875d8:	dcc01217 	ldw	r19,72(sp)
   875dc:	dc801117 	ldw	r18,68(sp)
   875e0:	dc401017 	ldw	r17,64(sp)
   875e4:	dc000f17 	ldw	r16,60(sp)
   875e8:	dec01404 	addi	sp,sp,80
   875ec:	f800283a 	ret
   875f0:	04801004 	movi	r18,64
   875f4:	003fd906 	br	8755c <_gp+0xfffed168>
   875f8:	81000a17 	ldw	r4,40(r16)
   875fc:	00c00274 	movhi	r3,9
   87600:	18e67f04 	addi	r3,r3,-26116
   87604:	20ffbe1e 	bne	r4,r3,87500 <_gp+0xfffed10c>
   87608:	80c0030b 	ldhu	r3,12(r16)
   8760c:	01010004 	movi	r4,1024
   87610:	81001315 	stw	r4,76(r16)
   87614:	1906b03a 	or	r3,r3,r4
   87618:	80c0030d 	sth	r3,12(r16)
   8761c:	003fbb06 	br	8750c <_gp+0xfffed118>
   87620:	0027883a 	mov	r19,zero
   87624:	04810004 	movi	r18,1024
   87628:	003fcf06 	br	87568 <_gp+0xfffed174>
   8762c:	8080030b 	ldhu	r2,12(r16)
   87630:	10c0800c 	andi	r3,r2,512
   87634:	183fe71e 	bne	r3,zero,875d4 <_gp+0xfffed1e0>
   87638:	10800094 	ori	r2,r2,2
   8763c:	80c010c4 	addi	r3,r16,67
   87640:	8080030d 	sth	r2,12(r16)
   87644:	00800044 	movi	r2,1
   87648:	80c00015 	stw	r3,0(r16)
   8764c:	80c00415 	stw	r3,16(r16)
   87650:	80800515 	stw	r2,20(r16)
   87654:	003fdf06 	br	875d4 <_gp+0xfffed1e0>
   87658:	04c00044 	movi	r19,1
   8765c:	04810004 	movi	r18,1024
   87660:	003fc106 	br	87568 <_gp+0xfffed174>

00087664 <_malloc_r>:
   87664:	defff504 	addi	sp,sp,-44
   87668:	dc800315 	stw	r18,12(sp)
   8766c:	dfc00a15 	stw	ra,40(sp)
   87670:	df000915 	stw	fp,36(sp)
   87674:	ddc00815 	stw	r23,32(sp)
   87678:	dd800715 	stw	r22,28(sp)
   8767c:	dd400615 	stw	r21,24(sp)
   87680:	dd000515 	stw	r20,20(sp)
   87684:	dcc00415 	stw	r19,16(sp)
   87688:	dc400215 	stw	r17,8(sp)
   8768c:	dc000115 	stw	r16,4(sp)
   87690:	288002c4 	addi	r2,r5,11
   87694:	00c00584 	movi	r3,22
   87698:	2025883a 	mov	r18,r4
   8769c:	18802b2e 	bgeu	r3,r2,8774c <_malloc_r+0xe8>
   876a0:	047ffe04 	movi	r17,-8
   876a4:	1462703a 	and	r17,r2,r17
   876a8:	88002a16 	blt	r17,zero,87754 <_malloc_r+0xf0>
   876ac:	89402936 	bltu	r17,r5,87754 <_malloc_r+0xf0>
   876b0:	9009883a 	mov	r4,r18
   876b4:	008e72c0 	call	8e72c <__malloc_lock>
   876b8:	00807dc4 	movi	r2,503
   876bc:	14402936 	bltu	r2,r17,87764 <_malloc_r+0x100>
   876c0:	8808d0fa 	srli	r4,r17,3
   876c4:	04c00274 	movhi	r19,9
   876c8:	9cc37904 	addi	r19,r19,3556
   876cc:	2105883a 	add	r2,r4,r4
   876d0:	1085883a 	add	r2,r2,r2
   876d4:	1085883a 	add	r2,r2,r2
   876d8:	9885883a 	add	r2,r19,r2
   876dc:	14000317 	ldw	r16,12(r2)
   876e0:	80815226 	beq	r16,r2,87c2c <_malloc_r+0x5c8>
   876e4:	81000117 	ldw	r4,4(r16)
   876e8:	00bfff04 	movi	r2,-4
   876ec:	80c00317 	ldw	r3,12(r16)
   876f0:	2084703a 	and	r2,r4,r2
   876f4:	8085883a 	add	r2,r16,r2
   876f8:	81000217 	ldw	r4,8(r16)
   876fc:	11400117 	ldw	r5,4(r2)
   87700:	20c00315 	stw	r3,12(r4)
   87704:	19000215 	stw	r4,8(r3)
   87708:	28c00054 	ori	r3,r5,1
   8770c:	10c00115 	stw	r3,4(r2)
   87710:	9009883a 	mov	r4,r18
   87714:	008e7300 	call	8e730 <__malloc_unlock>
   87718:	80800204 	addi	r2,r16,8
   8771c:	dfc00a17 	ldw	ra,40(sp)
   87720:	df000917 	ldw	fp,36(sp)
   87724:	ddc00817 	ldw	r23,32(sp)
   87728:	dd800717 	ldw	r22,28(sp)
   8772c:	dd400617 	ldw	r21,24(sp)
   87730:	dd000517 	ldw	r20,20(sp)
   87734:	dcc00417 	ldw	r19,16(sp)
   87738:	dc800317 	ldw	r18,12(sp)
   8773c:	dc400217 	ldw	r17,8(sp)
   87740:	dc000117 	ldw	r16,4(sp)
   87744:	dec00b04 	addi	sp,sp,44
   87748:	f800283a 	ret
   8774c:	04400404 	movi	r17,16
   87750:	897fd72e 	bgeu	r17,r5,876b0 <_gp+0xfffed2bc>
   87754:	00800304 	movi	r2,12
   87758:	90800015 	stw	r2,0(r18)
   8775c:	0005883a 	mov	r2,zero
   87760:	003fee06 	br	8771c <_gp+0xfffed328>
   87764:	8808d27a 	srli	r4,r17,9
   87768:	20007126 	beq	r4,zero,87930 <_malloc_r+0x2cc>
   8776c:	00800104 	movi	r2,4
   87770:	1100f536 	bltu	r2,r4,87b48 <_malloc_r+0x4e4>
   87774:	8808d1ba 	srli	r4,r17,6
   87778:	21000e04 	addi	r4,r4,56
   8777c:	210b883a 	add	r5,r4,r4
   87780:	294b883a 	add	r5,r5,r5
   87784:	294b883a 	add	r5,r5,r5
   87788:	04c00274 	movhi	r19,9
   8778c:	9cc37904 	addi	r19,r19,3556
   87790:	994b883a 	add	r5,r19,r5
   87794:	2c000317 	ldw	r16,12(r5)
   87798:	2c000e26 	beq	r5,r16,877d4 <_malloc_r+0x170>
   8779c:	80c00117 	ldw	r3,4(r16)
   877a0:	01ffff04 	movi	r7,-4
   877a4:	018003c4 	movi	r6,15
   877a8:	19c6703a 	and	r3,r3,r7
   877ac:	1c45c83a 	sub	r2,r3,r17
   877b0:	30800716 	blt	r6,r2,877d0 <_malloc_r+0x16c>
   877b4:	1000610e 	bge	r2,zero,8793c <_malloc_r+0x2d8>
   877b8:	84000317 	ldw	r16,12(r16)
   877bc:	2c000526 	beq	r5,r16,877d4 <_malloc_r+0x170>
   877c0:	80c00117 	ldw	r3,4(r16)
   877c4:	19c6703a 	and	r3,r3,r7
   877c8:	1c45c83a 	sub	r2,r3,r17
   877cc:	30bff90e 	bge	r6,r2,877b4 <_gp+0xfffed3c0>
   877d0:	213fffc4 	addi	r4,r4,-1
   877d4:	21000044 	addi	r4,r4,1
   877d8:	9c000417 	ldw	r16,16(r19)
   877dc:	00c00274 	movhi	r3,9
   877e0:	18c37904 	addi	r3,r3,3556
   877e4:	1a400204 	addi	r9,r3,8
   877e8:	82410926 	beq	r16,r9,87c10 <_malloc_r+0x5ac>
   877ec:	81400117 	ldw	r5,4(r16)
   877f0:	00bfff04 	movi	r2,-4
   877f4:	018003c4 	movi	r6,15
   877f8:	2884703a 	and	r2,r5,r2
   877fc:	144bc83a 	sub	r5,r2,r17
   87800:	3140f416 	blt	r6,r5,87bd4 <_malloc_r+0x570>
   87804:	1a400515 	stw	r9,20(r3)
   87808:	1a400415 	stw	r9,16(r3)
   8780c:	2800570e 	bge	r5,zero,8796c <_malloc_r+0x308>
   87810:	01407fc4 	movi	r5,511
   87814:	2880d436 	bltu	r5,r2,87b68 <_malloc_r+0x504>
   87818:	1004d0fa 	srli	r2,r2,3
   8781c:	02000044 	movi	r8,1
   87820:	19c00117 	ldw	r7,4(r3)
   87824:	108b883a 	add	r5,r2,r2
   87828:	294b883a 	add	r5,r5,r5
   8782c:	1005d0ba 	srai	r2,r2,2
   87830:	294b883a 	add	r5,r5,r5
   87834:	28cb883a 	add	r5,r5,r3
   87838:	29800217 	ldw	r6,8(r5)
   8783c:	4084983a 	sll	r2,r8,r2
   87840:	81400315 	stw	r5,12(r16)
   87844:	81800215 	stw	r6,8(r16)
   87848:	11c4b03a 	or	r2,r2,r7
   8784c:	2c000215 	stw	r16,8(r5)
   87850:	18800115 	stw	r2,4(r3)
   87854:	34000315 	stw	r16,12(r6)
   87858:	2007d0ba 	srai	r3,r4,2
   8785c:	01400044 	movi	r5,1
   87860:	28ca983a 	sll	r5,r5,r3
   87864:	11404936 	bltu	r2,r5,8798c <_malloc_r+0x328>
   87868:	1146703a 	and	r3,r2,r5
   8786c:	18000a1e 	bne	r3,zero,87898 <_malloc_r+0x234>
   87870:	00ffff04 	movi	r3,-4
   87874:	294b883a 	add	r5,r5,r5
   87878:	20c8703a 	and	r4,r4,r3
   8787c:	1146703a 	and	r3,r2,r5
   87880:	21000104 	addi	r4,r4,4
   87884:	1800041e 	bne	r3,zero,87898 <_malloc_r+0x234>
   87888:	294b883a 	add	r5,r5,r5
   8788c:	1146703a 	and	r3,r2,r5
   87890:	21000104 	addi	r4,r4,4
   87894:	183ffc26 	beq	r3,zero,87888 <_gp+0xfffed494>
   87898:	023fff04 	movi	r8,-4
   8789c:	01c003c4 	movi	r7,15
   878a0:	2105883a 	add	r2,r4,r4
   878a4:	1085883a 	add	r2,r2,r2
   878a8:	1085883a 	add	r2,r2,r2
   878ac:	9897883a 	add	r11,r19,r2
   878b0:	5a800304 	addi	r10,r11,12
   878b4:	2019883a 	mov	r12,r4
   878b8:	54000017 	ldw	r16,0(r10)
   878bc:	51bffd04 	addi	r6,r10,-12
   878c0:	8180041e 	bne	r16,r6,878d4 <_malloc_r+0x270>
   878c4:	0000d406 	br	87c18 <_malloc_r+0x5b4>
   878c8:	1000dd0e 	bge	r2,zero,87c40 <_malloc_r+0x5dc>
   878cc:	84000317 	ldw	r16,12(r16)
   878d0:	8180d126 	beq	r16,r6,87c18 <_malloc_r+0x5b4>
   878d4:	80c00117 	ldw	r3,4(r16)
   878d8:	1a06703a 	and	r3,r3,r8
   878dc:	1c45c83a 	sub	r2,r3,r17
   878e0:	38bff90e 	bge	r7,r2,878c8 <_gp+0xfffed4d4>
   878e4:	80c00317 	ldw	r3,12(r16)
   878e8:	81000217 	ldw	r4,8(r16)
   878ec:	89400054 	ori	r5,r17,1
   878f0:	81400115 	stw	r5,4(r16)
   878f4:	20c00315 	stw	r3,12(r4)
   878f8:	19000215 	stw	r4,8(r3)
   878fc:	8463883a 	add	r17,r16,r17
   87900:	9c400515 	stw	r17,20(r19)
   87904:	9c400415 	stw	r17,16(r19)
   87908:	10c00054 	ori	r3,r2,1
   8790c:	8a400315 	stw	r9,12(r17)
   87910:	8a400215 	stw	r9,8(r17)
   87914:	88c00115 	stw	r3,4(r17)
   87918:	88a3883a 	add	r17,r17,r2
   8791c:	88800015 	stw	r2,0(r17)
   87920:	9009883a 	mov	r4,r18
   87924:	008e7300 	call	8e730 <__malloc_unlock>
   87928:	80800204 	addi	r2,r16,8
   8792c:	003f7b06 	br	8771c <_gp+0xfffed328>
   87930:	01401f84 	movi	r5,126
   87934:	01000fc4 	movi	r4,63
   87938:	003f9106 	br	87780 <_gp+0xfffed38c>
   8793c:	80800317 	ldw	r2,12(r16)
   87940:	81000217 	ldw	r4,8(r16)
   87944:	80c7883a 	add	r3,r16,r3
   87948:	19400117 	ldw	r5,4(r3)
   8794c:	20800315 	stw	r2,12(r4)
   87950:	11000215 	stw	r4,8(r2)
   87954:	28800054 	ori	r2,r5,1
   87958:	18800115 	stw	r2,4(r3)
   8795c:	9009883a 	mov	r4,r18
   87960:	008e7300 	call	8e730 <__malloc_unlock>
   87964:	80800204 	addi	r2,r16,8
   87968:	003f6c06 	br	8771c <_gp+0xfffed328>
   8796c:	8085883a 	add	r2,r16,r2
   87970:	10c00117 	ldw	r3,4(r2)
   87974:	9009883a 	mov	r4,r18
   87978:	18c00054 	ori	r3,r3,1
   8797c:	10c00115 	stw	r3,4(r2)
   87980:	008e7300 	call	8e730 <__malloc_unlock>
   87984:	80800204 	addi	r2,r16,8
   87988:	003f6406 	br	8771c <_gp+0xfffed328>
   8798c:	9c000217 	ldw	r16,8(r19)
   87990:	00bfff04 	movi	r2,-4
   87994:	85400117 	ldw	r21,4(r16)
   87998:	a8aa703a 	and	r21,r21,r2
   8799c:	ac400336 	bltu	r21,r17,879ac <_malloc_r+0x348>
   879a0:	ac45c83a 	sub	r2,r21,r17
   879a4:	00c003c4 	movi	r3,15
   879a8:	18805d16 	blt	r3,r2,87b20 <_malloc_r+0x4bc>
   879ac:	00800274 	movhi	r2,9
   879b0:	108fcf04 	addi	r2,r2,16188
   879b4:	00c00274 	movhi	r3,9
   879b8:	18c90104 	addi	r3,r3,9220
   879bc:	15c00017 	ldw	r23,0(r2)
   879c0:	19000017 	ldw	r4,0(r3)
   879c4:	00bfffc4 	movi	r2,-1
   879c8:	8579883a 	add	fp,r16,r21
   879cc:	8def883a 	add	r23,r17,r23
   879d0:	2080e426 	beq	r4,r2,87d64 <_malloc_r+0x700>
   879d4:	bdc403c4 	addi	r23,r23,4111
   879d8:	00bc0004 	movi	r2,-4096
   879dc:	b8ae703a 	and	r23,r23,r2
   879e0:	9009883a 	mov	r4,r18
   879e4:	b80b883a 	mov	r5,r23
   879e8:	d8c00015 	stw	r3,0(sp)
   879ec:	00898c00 	call	898c0 <_sbrk_r>
   879f0:	1029883a 	mov	r20,r2
   879f4:	00bfffc4 	movi	r2,-1
   879f8:	d8c00017 	ldw	r3,0(sp)
   879fc:	a080a426 	beq	r20,r2,87c90 <_malloc_r+0x62c>
   87a00:	a700a236 	bltu	r20,fp,87c8c <_malloc_r+0x628>
   87a04:	05800274 	movhi	r22,9
   87a08:	b58fd904 	addi	r22,r22,16228
   87a0c:	b0800017 	ldw	r2,0(r22)
   87a10:	b885883a 	add	r2,r23,r2
   87a14:	b0800015 	stw	r2,0(r22)
   87a18:	e500da26 	beq	fp,r20,87d84 <_malloc_r+0x720>
   87a1c:	19000017 	ldw	r4,0(r3)
   87a20:	00ffffc4 	movi	r3,-1
   87a24:	20c0e426 	beq	r4,r3,87db8 <_malloc_r+0x754>
   87a28:	a739c83a 	sub	fp,r20,fp
   87a2c:	1705883a 	add	r2,r2,fp
   87a30:	b0800015 	stw	r2,0(r22)
   87a34:	a08001cc 	andi	r2,r20,7
   87a38:	1000b526 	beq	r2,zero,87d10 <_malloc_r+0x6ac>
   87a3c:	a0a9c83a 	sub	r20,r20,r2
   87a40:	00c40204 	movi	r3,4104
   87a44:	a5000204 	addi	r20,r20,8
   87a48:	1885c83a 	sub	r2,r3,r2
   87a4c:	a5c7883a 	add	r3,r20,r23
   87a50:	18c3ffcc 	andi	r3,r3,4095
   87a54:	10efc83a 	sub	r23,r2,r3
   87a58:	9009883a 	mov	r4,r18
   87a5c:	b80b883a 	mov	r5,r23
   87a60:	00898c00 	call	898c0 <_sbrk_r>
   87a64:	00ffffc4 	movi	r3,-1
   87a68:	10c0d026 	beq	r2,r3,87dac <_malloc_r+0x748>
   87a6c:	1505c83a 	sub	r2,r2,r20
   87a70:	b887883a 	add	r3,r23,r2
   87a74:	18c00054 	ori	r3,r3,1
   87a78:	b0800017 	ldw	r2,0(r22)
   87a7c:	9d000215 	stw	r20,8(r19)
   87a80:	a0c00115 	stw	r3,4(r20)
   87a84:	b885883a 	add	r2,r23,r2
   87a88:	b0800015 	stw	r2,0(r22)
   87a8c:	84c00e26 	beq	r16,r19,87ac8 <_malloc_r+0x464>
   87a90:	00c003c4 	movi	r3,15
   87a94:	1d40a02e 	bgeu	r3,r21,87d18 <_malloc_r+0x6b4>
   87a98:	81400117 	ldw	r5,4(r16)
   87a9c:	ad7ffd04 	addi	r21,r21,-12
   87aa0:	013ffe04 	movi	r4,-8
   87aa4:	a908703a 	and	r4,r21,r4
   87aa8:	2940004c 	andi	r5,r5,1
   87aac:	214ab03a 	or	r5,r4,r5
   87ab0:	81400115 	stw	r5,4(r16)
   87ab4:	01800144 	movi	r6,5
   87ab8:	810b883a 	add	r5,r16,r4
   87abc:	29800115 	stw	r6,4(r5)
   87ac0:	29800215 	stw	r6,8(r5)
   87ac4:	1900c036 	bltu	r3,r4,87dc8 <_malloc_r+0x764>
   87ac8:	00c00274 	movhi	r3,9
   87acc:	18cfce04 	addi	r3,r3,16184
   87ad0:	19000017 	ldw	r4,0(r3)
   87ad4:	2080012e 	bgeu	r4,r2,87adc <_malloc_r+0x478>
   87ad8:	18800015 	stw	r2,0(r3)
   87adc:	00c00274 	movhi	r3,9
   87ae0:	18cfcd04 	addi	r3,r3,16180
   87ae4:	19000017 	ldw	r4,0(r3)
   87ae8:	9c000217 	ldw	r16,8(r19)
   87aec:	2080012e 	bgeu	r4,r2,87af4 <_malloc_r+0x490>
   87af0:	18800015 	stw	r2,0(r3)
   87af4:	80c00117 	ldw	r3,4(r16)
   87af8:	00bfff04 	movi	r2,-4
   87afc:	1886703a 	and	r3,r3,r2
   87b00:	1c45c83a 	sub	r2,r3,r17
   87b04:	1c400236 	bltu	r3,r17,87b10 <_malloc_r+0x4ac>
   87b08:	00c003c4 	movi	r3,15
   87b0c:	18800416 	blt	r3,r2,87b20 <_malloc_r+0x4bc>
   87b10:	9009883a 	mov	r4,r18
   87b14:	008e7300 	call	8e730 <__malloc_unlock>
   87b18:	0005883a 	mov	r2,zero
   87b1c:	003eff06 	br	8771c <_gp+0xfffed328>
   87b20:	88c00054 	ori	r3,r17,1
   87b24:	80c00115 	stw	r3,4(r16)
   87b28:	8463883a 	add	r17,r16,r17
   87b2c:	10800054 	ori	r2,r2,1
   87b30:	9c400215 	stw	r17,8(r19)
   87b34:	88800115 	stw	r2,4(r17)
   87b38:	9009883a 	mov	r4,r18
   87b3c:	008e7300 	call	8e730 <__malloc_unlock>
   87b40:	80800204 	addi	r2,r16,8
   87b44:	003ef506 	br	8771c <_gp+0xfffed328>
   87b48:	00800504 	movi	r2,20
   87b4c:	1100482e 	bgeu	r2,r4,87c70 <_malloc_r+0x60c>
   87b50:	00801504 	movi	r2,84
   87b54:	11006836 	bltu	r2,r4,87cf8 <_malloc_r+0x694>
   87b58:	8808d33a 	srli	r4,r17,12
   87b5c:	21001b84 	addi	r4,r4,110
   87b60:	210b883a 	add	r5,r4,r4
   87b64:	003f0606 	br	87780 <_gp+0xfffed38c>
   87b68:	1006d27a 	srli	r3,r2,9
   87b6c:	01400104 	movi	r5,4
   87b70:	28c0422e 	bgeu	r5,r3,87c7c <_malloc_r+0x618>
   87b74:	01400504 	movi	r5,20
   87b78:	28c07c36 	bltu	r5,r3,87d6c <_malloc_r+0x708>
   87b7c:	194016c4 	addi	r5,r3,91
   87b80:	294d883a 	add	r6,r5,r5
   87b84:	318d883a 	add	r6,r6,r6
   87b88:	318d883a 	add	r6,r6,r6
   87b8c:	998d883a 	add	r6,r19,r6
   87b90:	30c00217 	ldw	r3,8(r6)
   87b94:	01c00274 	movhi	r7,9
   87b98:	39c37904 	addi	r7,r7,3556
   87b9c:	19806326 	beq	r3,r6,87d2c <_malloc_r+0x6c8>
   87ba0:	01ffff04 	movi	r7,-4
   87ba4:	19400117 	ldw	r5,4(r3)
   87ba8:	29ca703a 	and	r5,r5,r7
   87bac:	1140022e 	bgeu	r2,r5,87bb8 <_malloc_r+0x554>
   87bb0:	18c00217 	ldw	r3,8(r3)
   87bb4:	30fffb1e 	bne	r6,r3,87ba4 <_gp+0xfffed7b0>
   87bb8:	19400317 	ldw	r5,12(r3)
   87bbc:	98800117 	ldw	r2,4(r19)
   87bc0:	81400315 	stw	r5,12(r16)
   87bc4:	80c00215 	stw	r3,8(r16)
   87bc8:	2c000215 	stw	r16,8(r5)
   87bcc:	1c000315 	stw	r16,12(r3)
   87bd0:	003f2106 	br	87858 <_gp+0xfffed464>
   87bd4:	88800054 	ori	r2,r17,1
   87bd8:	80800115 	stw	r2,4(r16)
   87bdc:	8463883a 	add	r17,r16,r17
   87be0:	1c400515 	stw	r17,20(r3)
   87be4:	1c400415 	stw	r17,16(r3)
   87be8:	28800054 	ori	r2,r5,1
   87bec:	88800115 	stw	r2,4(r17)
   87bf0:	8a400315 	stw	r9,12(r17)
   87bf4:	8a400215 	stw	r9,8(r17)
   87bf8:	8963883a 	add	r17,r17,r5
   87bfc:	89400015 	stw	r5,0(r17)
   87c00:	9009883a 	mov	r4,r18
   87c04:	008e7300 	call	8e730 <__malloc_unlock>
   87c08:	80800204 	addi	r2,r16,8
   87c0c:	003ec306 	br	8771c <_gp+0xfffed328>
   87c10:	18800117 	ldw	r2,4(r3)
   87c14:	003f1006 	br	87858 <_gp+0xfffed464>
   87c18:	63000044 	addi	r12,r12,1
   87c1c:	608000cc 	andi	r2,r12,3
   87c20:	52800204 	addi	r10,r10,8
   87c24:	103f241e 	bne	r2,zero,878b8 <_gp+0xfffed4c4>
   87c28:	00002106 	br	87cb0 <_malloc_r+0x64c>
   87c2c:	80800204 	addi	r2,r16,8
   87c30:	84000517 	ldw	r16,20(r16)
   87c34:	143eab1e 	bne	r2,r16,876e4 <_gp+0xfffed2f0>
   87c38:	21000084 	addi	r4,r4,2
   87c3c:	003ee606 	br	877d8 <_gp+0xfffed3e4>
   87c40:	80c7883a 	add	r3,r16,r3
   87c44:	19400117 	ldw	r5,4(r3)
   87c48:	80800317 	ldw	r2,12(r16)
   87c4c:	81000217 	ldw	r4,8(r16)
   87c50:	29400054 	ori	r5,r5,1
   87c54:	19400115 	stw	r5,4(r3)
   87c58:	20800315 	stw	r2,12(r4)
   87c5c:	11000215 	stw	r4,8(r2)
   87c60:	9009883a 	mov	r4,r18
   87c64:	008e7300 	call	8e730 <__malloc_unlock>
   87c68:	80800204 	addi	r2,r16,8
   87c6c:	003eab06 	br	8771c <_gp+0xfffed328>
   87c70:	210016c4 	addi	r4,r4,91
   87c74:	210b883a 	add	r5,r4,r4
   87c78:	003ec106 	br	87780 <_gp+0xfffed38c>
   87c7c:	100ad1ba 	srli	r5,r2,6
   87c80:	29400e04 	addi	r5,r5,56
   87c84:	294d883a 	add	r6,r5,r5
   87c88:	003fbe06 	br	87b84 <_gp+0xfffed790>
   87c8c:	84ff5d26 	beq	r16,r19,87a04 <_gp+0xfffed610>
   87c90:	9c000217 	ldw	r16,8(r19)
   87c94:	00bfff04 	movi	r2,-4
   87c98:	80c00117 	ldw	r3,4(r16)
   87c9c:	1886703a 	and	r3,r3,r2
   87ca0:	003f9706 	br	87b00 <_gp+0xfffed70c>
   87ca4:	5ac00017 	ldw	r11,0(r11)
   87ca8:	213fffc4 	addi	r4,r4,-1
   87cac:	58805c1e 	bne	r11,r2,87e20 <_malloc_r+0x7bc>
   87cb0:	20c000cc 	andi	r3,r4,3
   87cb4:	58bffe04 	addi	r2,r11,-8
   87cb8:	183ffa1e 	bne	r3,zero,87ca4 <_gp+0xfffed8b0>
   87cbc:	98800117 	ldw	r2,4(r19)
   87cc0:	0146303a 	nor	r3,zero,r5
   87cc4:	1884703a 	and	r2,r3,r2
   87cc8:	98800115 	stw	r2,4(r19)
   87ccc:	294b883a 	add	r5,r5,r5
   87cd0:	117f2e36 	bltu	r2,r5,8798c <_gp+0xfffed598>
   87cd4:	283f2d26 	beq	r5,zero,8798c <_gp+0xfffed598>
   87cd8:	1146703a 	and	r3,r2,r5
   87cdc:	6009883a 	mov	r4,r12
   87ce0:	183eef1e 	bne	r3,zero,878a0 <_gp+0xfffed4ac>
   87ce4:	294b883a 	add	r5,r5,r5
   87ce8:	1146703a 	and	r3,r2,r5
   87cec:	21000104 	addi	r4,r4,4
   87cf0:	183ffc26 	beq	r3,zero,87ce4 <_gp+0xfffed8f0>
   87cf4:	003eea06 	br	878a0 <_gp+0xfffed4ac>
   87cf8:	00805504 	movi	r2,340
   87cfc:	11001336 	bltu	r2,r4,87d4c <_malloc_r+0x6e8>
   87d00:	8808d3fa 	srli	r4,r17,15
   87d04:	21001dc4 	addi	r4,r4,119
   87d08:	210b883a 	add	r5,r4,r4
   87d0c:	003e9c06 	br	87780 <_gp+0xfffed38c>
   87d10:	00840004 	movi	r2,4096
   87d14:	003f4d06 	br	87a4c <_gp+0xfffed658>
   87d18:	00800044 	movi	r2,1
   87d1c:	a0800115 	stw	r2,4(r20)
   87d20:	a021883a 	mov	r16,r20
   87d24:	0007883a 	mov	r3,zero
   87d28:	003f7506 	br	87b00 <_gp+0xfffed70c>
   87d2c:	280bd0ba 	srai	r5,r5,2
   87d30:	01800044 	movi	r6,1
   87d34:	38800117 	ldw	r2,4(r7)
   87d38:	314c983a 	sll	r6,r6,r5
   87d3c:	180b883a 	mov	r5,r3
   87d40:	3084b03a 	or	r2,r6,r2
   87d44:	38800115 	stw	r2,4(r7)
   87d48:	003f9d06 	br	87bc0 <_gp+0xfffed7cc>
   87d4c:	00815504 	movi	r2,1364
   87d50:	11001336 	bltu	r2,r4,87da0 <_malloc_r+0x73c>
   87d54:	8808d4ba 	srli	r4,r17,18
   87d58:	21001f04 	addi	r4,r4,124
   87d5c:	210b883a 	add	r5,r4,r4
   87d60:	003e8706 	br	87780 <_gp+0xfffed38c>
   87d64:	bdc00404 	addi	r23,r23,16
   87d68:	003f1d06 	br	879e0 <_gp+0xfffed5ec>
   87d6c:	01401504 	movi	r5,84
   87d70:	28c01c36 	bltu	r5,r3,87de4 <_malloc_r+0x780>
   87d74:	100ad33a 	srli	r5,r2,12
   87d78:	29401b84 	addi	r5,r5,110
   87d7c:	294d883a 	add	r6,r5,r5
   87d80:	003f8006 	br	87b84 <_gp+0xfffed790>
   87d84:	e103ffcc 	andi	r4,fp,4095
   87d88:	203f241e 	bne	r4,zero,87a1c <_gp+0xfffed628>
   87d8c:	98c00217 	ldw	r3,8(r19)
   87d90:	bd49883a 	add	r4,r23,r21
   87d94:	21000054 	ori	r4,r4,1
   87d98:	19000115 	stw	r4,4(r3)
   87d9c:	003f4a06 	br	87ac8 <_gp+0xfffed6d4>
   87da0:	01403f04 	movi	r5,252
   87da4:	01001f84 	movi	r4,126
   87da8:	003e7506 	br	87780 <_gp+0xfffed38c>
   87dac:	00c00044 	movi	r3,1
   87db0:	002f883a 	mov	r23,zero
   87db4:	003f3006 	br	87a78 <_gp+0xfffed684>
   87db8:	00800274 	movhi	r2,9
   87dbc:	10890104 	addi	r2,r2,9220
   87dc0:	15000015 	stw	r20,0(r2)
   87dc4:	003f1b06 	br	87a34 <_gp+0xfffed640>
   87dc8:	9009883a 	mov	r4,r18
   87dcc:	81400204 	addi	r5,r16,8
   87dd0:	0086b000 	call	86b00 <_free_r>
   87dd4:	00800274 	movhi	r2,9
   87dd8:	108fd904 	addi	r2,r2,16228
   87ddc:	10800017 	ldw	r2,0(r2)
   87de0:	003f3906 	br	87ac8 <_gp+0xfffed6d4>
   87de4:	01405504 	movi	r5,340
   87de8:	28c00436 	bltu	r5,r3,87dfc <_malloc_r+0x798>
   87dec:	100ad3fa 	srli	r5,r2,15
   87df0:	29401dc4 	addi	r5,r5,119
   87df4:	294d883a 	add	r6,r5,r5
   87df8:	003f6206 	br	87b84 <_gp+0xfffed790>
   87dfc:	01415504 	movi	r5,1364
   87e00:	28c00436 	bltu	r5,r3,87e14 <_malloc_r+0x7b0>
   87e04:	100ad4ba 	srli	r5,r2,18
   87e08:	29401f04 	addi	r5,r5,124
   87e0c:	294d883a 	add	r6,r5,r5
   87e10:	003f5c06 	br	87b84 <_gp+0xfffed790>
   87e14:	01803f04 	movi	r6,252
   87e18:	01401f84 	movi	r5,126
   87e1c:	003f5906 	br	87b84 <_gp+0xfffed790>
   87e20:	98800117 	ldw	r2,4(r19)
   87e24:	003fa906 	br	87ccc <_gp+0xfffed8d8>

00087e28 <memchr>:
   87e28:	208000cc 	andi	r2,r4,3
   87e2c:	2811883a 	mov	r8,r5
   87e30:	10003526 	beq	r2,zero,87f08 <memchr+0xe0>
   87e34:	30bfffc4 	addi	r2,r6,-1
   87e38:	30001b26 	beq	r6,zero,87ea8 <memchr+0x80>
   87e3c:	21800003 	ldbu	r6,0(r4)
   87e40:	28c03fcc 	andi	r3,r5,255
   87e44:	30c01a26 	beq	r6,r3,87eb0 <memchr+0x88>
   87e48:	180d883a 	mov	r6,r3
   87e4c:	00000406 	br	87e60 <memchr+0x38>
   87e50:	10001526 	beq	r2,zero,87ea8 <memchr+0x80>
   87e54:	20c00003 	ldbu	r3,0(r4)
   87e58:	10bfffc4 	addi	r2,r2,-1
   87e5c:	19801426 	beq	r3,r6,87eb0 <memchr+0x88>
   87e60:	21000044 	addi	r4,r4,1
   87e64:	20c000cc 	andi	r3,r4,3
   87e68:	183ff91e 	bne	r3,zero,87e50 <_gp+0xfffeda5c>
   87e6c:	02c000c4 	movi	r11,3
   87e70:	58801136 	bltu	r11,r2,87eb8 <memchr+0x90>
   87e74:	10000c26 	beq	r2,zero,87ea8 <memchr+0x80>
   87e78:	20c00003 	ldbu	r3,0(r4)
   87e7c:	29403fcc 	andi	r5,r5,255
   87e80:	19400b26 	beq	r3,r5,87eb0 <memchr+0x88>
   87e84:	20c00044 	addi	r3,r4,1
   87e88:	2085883a 	add	r2,r4,r2
   87e8c:	41803fcc 	andi	r6,r8,255
   87e90:	00000306 	br	87ea0 <memchr+0x78>
   87e94:	18c00044 	addi	r3,r3,1
   87e98:	197fffc3 	ldbu	r5,-1(r3)
   87e9c:	29800426 	beq	r5,r6,87eb0 <memchr+0x88>
   87ea0:	1809883a 	mov	r4,r3
   87ea4:	18bffb1e 	bne	r3,r2,87e94 <_gp+0xfffedaa0>
   87ea8:	0005883a 	mov	r2,zero
   87eac:	f800283a 	ret
   87eb0:	2005883a 	mov	r2,r4
   87eb4:	f800283a 	ret
   87eb8:	28c03fcc 	andi	r3,r5,255
   87ebc:	180c923a 	slli	r6,r3,8
   87ec0:	02bfbff4 	movhi	r10,65279
   87ec4:	52bfbfc4 	addi	r10,r10,-257
   87ec8:	02602074 	movhi	r9,32897
   87ecc:	4a602004 	addi	r9,r9,-32640
   87ed0:	30c6b03a 	or	r3,r6,r3
   87ed4:	180c943a 	slli	r6,r3,16
   87ed8:	30ccb03a 	or	r6,r6,r3
   87edc:	20c00017 	ldw	r3,0(r4)
   87ee0:	30c6f03a 	xor	r3,r6,r3
   87ee4:	1a8f883a 	add	r7,r3,r10
   87ee8:	00c6303a 	nor	r3,zero,r3
   87eec:	38c6703a 	and	r3,r7,r3
   87ef0:	1a46703a 	and	r3,r3,r9
   87ef4:	183fdf1e 	bne	r3,zero,87e74 <_gp+0xfffeda80>
   87ef8:	10bfff04 	addi	r2,r2,-4
   87efc:	21000104 	addi	r4,r4,4
   87f00:	58bff636 	bltu	r11,r2,87edc <_gp+0xfffedae8>
   87f04:	003fdb06 	br	87e74 <_gp+0xfffeda80>
   87f08:	3005883a 	mov	r2,r6
   87f0c:	003fd706 	br	87e6c <_gp+0xfffeda78>

00087f10 <memmove>:
   87f10:	2005883a 	mov	r2,r4
   87f14:	29000b2e 	bgeu	r5,r4,87f44 <memmove+0x34>
   87f18:	298f883a 	add	r7,r5,r6
   87f1c:	21c0092e 	bgeu	r4,r7,87f44 <memmove+0x34>
   87f20:	2187883a 	add	r3,r4,r6
   87f24:	198bc83a 	sub	r5,r3,r6
   87f28:	30003e26 	beq	r6,zero,88024 <memmove+0x114>
   87f2c:	39ffffc4 	addi	r7,r7,-1
   87f30:	39000003 	ldbu	r4,0(r7)
   87f34:	18ffffc4 	addi	r3,r3,-1
   87f38:	19000005 	stb	r4,0(r3)
   87f3c:	197ffb1e 	bne	r3,r5,87f2c <_gp+0xfffedb38>
   87f40:	f800283a 	ret
   87f44:	00c003c4 	movi	r3,15
   87f48:	1980372e 	bgeu	r3,r6,88028 <memmove+0x118>
   87f4c:	1146b03a 	or	r3,r2,r5
   87f50:	18c000cc 	andi	r3,r3,3
   87f54:	1800371e 	bne	r3,zero,88034 <memmove+0x124>
   87f58:	327ffc04 	addi	r9,r6,-16
   87f5c:	4812d13a 	srli	r9,r9,4
   87f60:	280f883a 	mov	r7,r5
   87f64:	1007883a 	mov	r3,r2
   87f68:	4810913a 	slli	r8,r9,4
   87f6c:	1211883a 	add	r8,r2,r8
   87f70:	42000404 	addi	r8,r8,16
   87f74:	39000017 	ldw	r4,0(r7)
   87f78:	18c00404 	addi	r3,r3,16
   87f7c:	39c00404 	addi	r7,r7,16
   87f80:	193ffc15 	stw	r4,-16(r3)
   87f84:	393ffd17 	ldw	r4,-12(r7)
   87f88:	193ffd15 	stw	r4,-12(r3)
   87f8c:	393ffe17 	ldw	r4,-8(r7)
   87f90:	193ffe15 	stw	r4,-8(r3)
   87f94:	393fff17 	ldw	r4,-4(r7)
   87f98:	193fff15 	stw	r4,-4(r3)
   87f9c:	1a3ff51e 	bne	r3,r8,87f74 <_gp+0xfffedb80>
   87fa0:	49000044 	addi	r4,r9,1
   87fa4:	2008913a 	slli	r4,r4,4
   87fa8:	328003cc 	andi	r10,r6,15
   87fac:	1107883a 	add	r3,r2,r4
   87fb0:	290b883a 	add	r5,r5,r4
   87fb4:	010000c4 	movi	r4,3
   87fb8:	2280212e 	bgeu	r4,r10,88040 <memmove+0x130>
   87fbc:	52bfff04 	addi	r10,r10,-4
   87fc0:	5014d0ba 	srli	r10,r10,2
   87fc4:	180f883a 	mov	r7,r3
   87fc8:	2809883a 	mov	r4,r5
   87fcc:	5291883a 	add	r8,r10,r10
   87fd0:	4211883a 	add	r8,r8,r8
   87fd4:	42400104 	addi	r9,r8,4
   87fd8:	1a53883a 	add	r9,r3,r9
   87fdc:	22000017 	ldw	r8,0(r4)
   87fe0:	39c00104 	addi	r7,r7,4
   87fe4:	21000104 	addi	r4,r4,4
   87fe8:	3a3fff15 	stw	r8,-4(r7)
   87fec:	3a7ffb1e 	bne	r7,r9,87fdc <_gp+0xfffedbe8>
   87ff0:	51000044 	addi	r4,r10,1
   87ff4:	2109883a 	add	r4,r4,r4
   87ff8:	2109883a 	add	r4,r4,r4
   87ffc:	318000cc 	andi	r6,r6,3
   88000:	1907883a 	add	r3,r3,r4
   88004:	290b883a 	add	r5,r5,r4
   88008:	30000c26 	beq	r6,zero,8803c <memmove+0x12c>
   8800c:	198d883a 	add	r6,r3,r6
   88010:	29c00003 	ldbu	r7,0(r5)
   88014:	18c00044 	addi	r3,r3,1
   88018:	29400044 	addi	r5,r5,1
   8801c:	19ffffc5 	stb	r7,-1(r3)
   88020:	19bffb1e 	bne	r3,r6,88010 <_gp+0xfffedc1c>
   88024:	f800283a 	ret
   88028:	1007883a 	mov	r3,r2
   8802c:	303ff71e 	bne	r6,zero,8800c <_gp+0xfffedc18>
   88030:	00000206 	br	8803c <memmove+0x12c>
   88034:	1007883a 	mov	r3,r2
   88038:	003ff406 	br	8800c <_gp+0xfffedc18>
   8803c:	f800283a 	ret
   88040:	500d883a 	mov	r6,r10
   88044:	303ff11e 	bne	r6,zero,8800c <_gp+0xfffedc18>
   88048:	003ffc06 	br	8803c <_gp+0xfffedc48>

0008804c <memset>:
   8804c:	20c000cc 	andi	r3,r4,3
   88050:	2005883a 	mov	r2,r4
   88054:	18003f26 	beq	r3,zero,88154 <memset+0x108>
   88058:	31ffffc4 	addi	r7,r6,-1
   8805c:	30003b26 	beq	r6,zero,8814c <memset+0x100>
   88060:	2813883a 	mov	r9,r5
   88064:	200d883a 	mov	r6,r4
   88068:	2007883a 	mov	r3,r4
   8806c:	00000406 	br	88080 <memset+0x34>
   88070:	3a3fffc4 	addi	r8,r7,-1
   88074:	31800044 	addi	r6,r6,1
   88078:	38003426 	beq	r7,zero,8814c <memset+0x100>
   8807c:	400f883a 	mov	r7,r8
   88080:	18c00044 	addi	r3,r3,1
   88084:	32400005 	stb	r9,0(r6)
   88088:	1a0000cc 	andi	r8,r3,3
   8808c:	403ff81e 	bne	r8,zero,88070 <_gp+0xfffedc7c>
   88090:	010000c4 	movi	r4,3
   88094:	21c0282e 	bgeu	r4,r7,88138 <memset+0xec>
   88098:	29003fcc 	andi	r4,r5,255
   8809c:	2010923a 	slli	r8,r4,8
   880a0:	4108b03a 	or	r4,r8,r4
   880a4:	2010943a 	slli	r8,r4,16
   880a8:	4110b03a 	or	r8,r8,r4
   880ac:	010003c4 	movi	r4,15
   880b0:	21c0122e 	bgeu	r4,r7,880fc <memset+0xb0>
   880b4:	3a7ffc04 	addi	r9,r7,-16
   880b8:	4812d13a 	srli	r9,r9,4
   880bc:	19000404 	addi	r4,r3,16
   880c0:	180d883a 	mov	r6,r3
   880c4:	4814913a 	slli	r10,r9,4
   880c8:	2289883a 	add	r4,r4,r10
   880cc:	32000015 	stw	r8,0(r6)
   880d0:	32000115 	stw	r8,4(r6)
   880d4:	32000215 	stw	r8,8(r6)
   880d8:	32000315 	stw	r8,12(r6)
   880dc:	31800404 	addi	r6,r6,16
   880e0:	313ffa1e 	bne	r6,r4,880cc <_gp+0xfffedcd8>
   880e4:	4a400044 	addi	r9,r9,1
   880e8:	4812913a 	slli	r9,r9,4
   880ec:	39c003cc 	andi	r7,r7,15
   880f0:	010000c4 	movi	r4,3
   880f4:	1a47883a 	add	r3,r3,r9
   880f8:	21c00f2e 	bgeu	r4,r7,88138 <memset+0xec>
   880fc:	3a7fff04 	addi	r9,r7,-4
   88100:	4812d0ba 	srli	r9,r9,2
   88104:	19000104 	addi	r4,r3,4
   88108:	180d883a 	mov	r6,r3
   8810c:	4a55883a 	add	r10,r9,r9
   88110:	5295883a 	add	r10,r10,r10
   88114:	2289883a 	add	r4,r4,r10
   88118:	32000015 	stw	r8,0(r6)
   8811c:	31800104 	addi	r6,r6,4
   88120:	313ffd1e 	bne	r6,r4,88118 <_gp+0xfffedd24>
   88124:	4a400044 	addi	r9,r9,1
   88128:	4a53883a 	add	r9,r9,r9
   8812c:	4a53883a 	add	r9,r9,r9
   88130:	1a47883a 	add	r3,r3,r9
   88134:	39c000cc 	andi	r7,r7,3
   88138:	38000526 	beq	r7,zero,88150 <memset+0x104>
   8813c:	19cf883a 	add	r7,r3,r7
   88140:	19400005 	stb	r5,0(r3)
   88144:	18c00044 	addi	r3,r3,1
   88148:	19fffd1e 	bne	r3,r7,88140 <_gp+0xfffedd4c>
   8814c:	f800283a 	ret
   88150:	f800283a 	ret
   88154:	2007883a 	mov	r3,r4
   88158:	300f883a 	mov	r7,r6
   8815c:	003fcc06 	br	88090 <_gp+0xfffedc9c>

00088160 <_Balloc>:
   88160:	20801317 	ldw	r2,76(r4)
   88164:	defffc04 	addi	sp,sp,-16
   88168:	dc400115 	stw	r17,4(sp)
   8816c:	dc000015 	stw	r16,0(sp)
   88170:	dfc00315 	stw	ra,12(sp)
   88174:	dc800215 	stw	r18,8(sp)
   88178:	2023883a 	mov	r17,r4
   8817c:	2821883a 	mov	r16,r5
   88180:	10000f26 	beq	r2,zero,881c0 <_Balloc+0x60>
   88184:	8407883a 	add	r3,r16,r16
   88188:	18c7883a 	add	r3,r3,r3
   8818c:	10c7883a 	add	r3,r2,r3
   88190:	18800017 	ldw	r2,0(r3)
   88194:	10001126 	beq	r2,zero,881dc <_Balloc+0x7c>
   88198:	11000017 	ldw	r4,0(r2)
   8819c:	19000015 	stw	r4,0(r3)
   881a0:	10000415 	stw	zero,16(r2)
   881a4:	10000315 	stw	zero,12(r2)
   881a8:	dfc00317 	ldw	ra,12(sp)
   881ac:	dc800217 	ldw	r18,8(sp)
   881b0:	dc400117 	ldw	r17,4(sp)
   881b4:	dc000017 	ldw	r16,0(sp)
   881b8:	dec00404 	addi	sp,sp,16
   881bc:	f800283a 	ret
   881c0:	01400104 	movi	r5,4
   881c4:	01800844 	movi	r6,33
   881c8:	008b2f00 	call	8b2f0 <_calloc_r>
   881cc:	88801315 	stw	r2,76(r17)
   881d0:	103fec1e 	bne	r2,zero,88184 <_gp+0xfffedd90>
   881d4:	0005883a 	mov	r2,zero
   881d8:	003ff306 	br	881a8 <_gp+0xfffeddb4>
   881dc:	01400044 	movi	r5,1
   881e0:	2c24983a 	sll	r18,r5,r16
   881e4:	8809883a 	mov	r4,r17
   881e8:	91800144 	addi	r6,r18,5
   881ec:	318d883a 	add	r6,r6,r6
   881f0:	318d883a 	add	r6,r6,r6
   881f4:	008b2f00 	call	8b2f0 <_calloc_r>
   881f8:	103ff626 	beq	r2,zero,881d4 <_gp+0xfffedde0>
   881fc:	14000115 	stw	r16,4(r2)
   88200:	14800215 	stw	r18,8(r2)
   88204:	003fe606 	br	881a0 <_gp+0xfffeddac>

00088208 <_Bfree>:
   88208:	28000826 	beq	r5,zero,8822c <_Bfree+0x24>
   8820c:	28c00117 	ldw	r3,4(r5)
   88210:	20801317 	ldw	r2,76(r4)
   88214:	18c7883a 	add	r3,r3,r3
   88218:	18c7883a 	add	r3,r3,r3
   8821c:	10c5883a 	add	r2,r2,r3
   88220:	10c00017 	ldw	r3,0(r2)
   88224:	28c00015 	stw	r3,0(r5)
   88228:	11400015 	stw	r5,0(r2)
   8822c:	f800283a 	ret

00088230 <__multadd>:
   88230:	defff604 	addi	sp,sp,-40
   88234:	dd400515 	stw	r21,20(sp)
   88238:	2d400417 	ldw	r21,16(r5)
   8823c:	df000815 	stw	fp,32(sp)
   88240:	ddc00715 	stw	r23,28(sp)
   88244:	dd800615 	stw	r22,24(sp)
   88248:	dd000415 	stw	r20,16(sp)
   8824c:	dc400115 	stw	r17,4(sp)
   88250:	dc000015 	stw	r16,0(sp)
   88254:	dfc00915 	stw	ra,36(sp)
   88258:	dcc00315 	stw	r19,12(sp)
   8825c:	dc800215 	stw	r18,8(sp)
   88260:	282d883a 	mov	r22,r5
   88264:	202f883a 	mov	r23,r4
   88268:	3029883a 	mov	r20,r6
   8826c:	3839883a 	mov	fp,r7
   88270:	2c000504 	addi	r16,r5,20
   88274:	0023883a 	mov	r17,zero
   88278:	84c00017 	ldw	r19,0(r16)
   8827c:	a00b883a 	mov	r5,r20
   88280:	8c400044 	addi	r17,r17,1
   88284:	993fffcc 	andi	r4,r19,65535
   88288:	00825800 	call	82580 <__mulsi3>
   8828c:	1725883a 	add	r18,r2,fp
   88290:	9808d43a 	srli	r4,r19,16
   88294:	9026d43a 	srli	r19,r18,16
   88298:	a00b883a 	mov	r5,r20
   8829c:	00825800 	call	82580 <__mulsi3>
   882a0:	988f883a 	add	r7,r19,r2
   882a4:	3804943a 	slli	r2,r7,16
   882a8:	94bfffcc 	andi	r18,r18,65535
   882ac:	3838d43a 	srli	fp,r7,16
   882b0:	14a5883a 	add	r18,r2,r18
   882b4:	84800015 	stw	r18,0(r16)
   882b8:	84000104 	addi	r16,r16,4
   882bc:	8d7fee16 	blt	r17,r21,88278 <_gp+0xfffede84>
   882c0:	e0000926 	beq	fp,zero,882e8 <__multadd+0xb8>
   882c4:	b0800217 	ldw	r2,8(r22)
   882c8:	a880140e 	bge	r21,r2,8831c <__multadd+0xec>
   882cc:	a8800144 	addi	r2,r21,5
   882d0:	1085883a 	add	r2,r2,r2
   882d4:	1085883a 	add	r2,r2,r2
   882d8:	b085883a 	add	r2,r22,r2
   882dc:	17000015 	stw	fp,0(r2)
   882e0:	ad400044 	addi	r21,r21,1
   882e4:	b5400415 	stw	r21,16(r22)
   882e8:	b005883a 	mov	r2,r22
   882ec:	dfc00917 	ldw	ra,36(sp)
   882f0:	df000817 	ldw	fp,32(sp)
   882f4:	ddc00717 	ldw	r23,28(sp)
   882f8:	dd800617 	ldw	r22,24(sp)
   882fc:	dd400517 	ldw	r21,20(sp)
   88300:	dd000417 	ldw	r20,16(sp)
   88304:	dcc00317 	ldw	r19,12(sp)
   88308:	dc800217 	ldw	r18,8(sp)
   8830c:	dc400117 	ldw	r17,4(sp)
   88310:	dc000017 	ldw	r16,0(sp)
   88314:	dec00a04 	addi	sp,sp,40
   88318:	f800283a 	ret
   8831c:	b1400117 	ldw	r5,4(r22)
   88320:	b809883a 	mov	r4,r23
   88324:	29400044 	addi	r5,r5,1
   88328:	00881600 	call	88160 <_Balloc>
   8832c:	b1800417 	ldw	r6,16(r22)
   88330:	b1400304 	addi	r5,r22,12
   88334:	11000304 	addi	r4,r2,12
   88338:	31800084 	addi	r6,r6,2
   8833c:	318d883a 	add	r6,r6,r6
   88340:	318d883a 	add	r6,r6,r6
   88344:	1021883a 	mov	r16,r2
   88348:	00825a80 	call	825a8 <memcpy>
   8834c:	b0c00117 	ldw	r3,4(r22)
   88350:	b8801317 	ldw	r2,76(r23)
   88354:	18c7883a 	add	r3,r3,r3
   88358:	18c7883a 	add	r3,r3,r3
   8835c:	10c5883a 	add	r2,r2,r3
   88360:	10c00017 	ldw	r3,0(r2)
   88364:	b0c00015 	stw	r3,0(r22)
   88368:	15800015 	stw	r22,0(r2)
   8836c:	802d883a 	mov	r22,r16
   88370:	003fd606 	br	882cc <_gp+0xfffeded8>

00088374 <__s2b>:
   88374:	defff904 	addi	sp,sp,-28
   88378:	dd000415 	stw	r20,16(sp)
   8837c:	dc400115 	stw	r17,4(sp)
   88380:	2829883a 	mov	r20,r5
   88384:	2023883a 	mov	r17,r4
   88388:	01400244 	movi	r5,9
   8838c:	39000204 	addi	r4,r7,8
   88390:	dcc00315 	stw	r19,12(sp)
   88394:	dc800215 	stw	r18,8(sp)
   88398:	dfc00615 	stw	ra,24(sp)
   8839c:	dd400515 	stw	r21,20(sp)
   883a0:	dc000015 	stw	r16,0(sp)
   883a4:	3827883a 	mov	r19,r7
   883a8:	3025883a 	mov	r18,r6
   883ac:	00824dc0 	call	824dc <__divsi3>
   883b0:	00c00044 	movi	r3,1
   883b4:	000b883a 	mov	r5,zero
   883b8:	1880030e 	bge	r3,r2,883c8 <__s2b+0x54>
   883bc:	18c7883a 	add	r3,r3,r3
   883c0:	29400044 	addi	r5,r5,1
   883c4:	18bffd16 	blt	r3,r2,883bc <_gp+0xfffedfc8>
   883c8:	8809883a 	mov	r4,r17
   883cc:	00881600 	call	88160 <_Balloc>
   883d0:	d8c00717 	ldw	r3,28(sp)
   883d4:	10c00515 	stw	r3,20(r2)
   883d8:	00c00044 	movi	r3,1
   883dc:	10c00415 	stw	r3,16(r2)
   883e0:	00c00244 	movi	r3,9
   883e4:	1c80210e 	bge	r3,r18,8846c <__s2b+0xf8>
   883e8:	a0eb883a 	add	r21,r20,r3
   883ec:	a821883a 	mov	r16,r21
   883f0:	a4a9883a 	add	r20,r20,r18
   883f4:	81c00007 	ldb	r7,0(r16)
   883f8:	8809883a 	mov	r4,r17
   883fc:	84000044 	addi	r16,r16,1
   88400:	100b883a 	mov	r5,r2
   88404:	01800284 	movi	r6,10
   88408:	39fff404 	addi	r7,r7,-48
   8840c:	00882300 	call	88230 <__multadd>
   88410:	853ff81e 	bne	r16,r20,883f4 <_gp+0xfffee000>
   88414:	aca1883a 	add	r16,r21,r18
   88418:	843ffe04 	addi	r16,r16,-8
   8841c:	94c00a0e 	bge	r18,r19,88448 <__s2b+0xd4>
   88420:	84e7883a 	add	r19,r16,r19
   88424:	9ca5c83a 	sub	r18,r19,r18
   88428:	81c00007 	ldb	r7,0(r16)
   8842c:	8809883a 	mov	r4,r17
   88430:	84000044 	addi	r16,r16,1
   88434:	100b883a 	mov	r5,r2
   88438:	01800284 	movi	r6,10
   8843c:	39fff404 	addi	r7,r7,-48
   88440:	00882300 	call	88230 <__multadd>
   88444:	84bff81e 	bne	r16,r18,88428 <_gp+0xfffee034>
   88448:	dfc00617 	ldw	ra,24(sp)
   8844c:	dd400517 	ldw	r21,20(sp)
   88450:	dd000417 	ldw	r20,16(sp)
   88454:	dcc00317 	ldw	r19,12(sp)
   88458:	dc800217 	ldw	r18,8(sp)
   8845c:	dc400117 	ldw	r17,4(sp)
   88460:	dc000017 	ldw	r16,0(sp)
   88464:	dec00704 	addi	sp,sp,28
   88468:	f800283a 	ret
   8846c:	a4000284 	addi	r16,r20,10
   88470:	1825883a 	mov	r18,r3
   88474:	003fe906 	br	8841c <_gp+0xfffee028>

00088478 <__hi0bits>:
   88478:	20bfffec 	andhi	r2,r4,65535
   8847c:	1000141e 	bne	r2,zero,884d0 <__hi0bits+0x58>
   88480:	2008943a 	slli	r4,r4,16
   88484:	00800404 	movi	r2,16
   88488:	20ffc02c 	andhi	r3,r4,65280
   8848c:	1800021e 	bne	r3,zero,88498 <__hi0bits+0x20>
   88490:	2008923a 	slli	r4,r4,8
   88494:	10800204 	addi	r2,r2,8
   88498:	20fc002c 	andhi	r3,r4,61440
   8849c:	1800021e 	bne	r3,zero,884a8 <__hi0bits+0x30>
   884a0:	2008913a 	slli	r4,r4,4
   884a4:	10800104 	addi	r2,r2,4
   884a8:	20f0002c 	andhi	r3,r4,49152
   884ac:	1800031e 	bne	r3,zero,884bc <__hi0bits+0x44>
   884b0:	2109883a 	add	r4,r4,r4
   884b4:	10800084 	addi	r2,r2,2
   884b8:	2109883a 	add	r4,r4,r4
   884bc:	20000316 	blt	r4,zero,884cc <__hi0bits+0x54>
   884c0:	2110002c 	andhi	r4,r4,16384
   884c4:	2000041e 	bne	r4,zero,884d8 <__hi0bits+0x60>
   884c8:	00800804 	movi	r2,32
   884cc:	f800283a 	ret
   884d0:	0005883a 	mov	r2,zero
   884d4:	003fec06 	br	88488 <_gp+0xfffee094>
   884d8:	10800044 	addi	r2,r2,1
   884dc:	f800283a 	ret

000884e0 <__lo0bits>:
   884e0:	20c00017 	ldw	r3,0(r4)
   884e4:	188001cc 	andi	r2,r3,7
   884e8:	10000826 	beq	r2,zero,8850c <__lo0bits+0x2c>
   884ec:	1880004c 	andi	r2,r3,1
   884f0:	1000211e 	bne	r2,zero,88578 <__lo0bits+0x98>
   884f4:	1880008c 	andi	r2,r3,2
   884f8:	1000211e 	bne	r2,zero,88580 <__lo0bits+0xa0>
   884fc:	1806d0ba 	srli	r3,r3,2
   88500:	00800084 	movi	r2,2
   88504:	20c00015 	stw	r3,0(r4)
   88508:	f800283a 	ret
   8850c:	18bfffcc 	andi	r2,r3,65535
   88510:	10001326 	beq	r2,zero,88560 <__lo0bits+0x80>
   88514:	0005883a 	mov	r2,zero
   88518:	19403fcc 	andi	r5,r3,255
   8851c:	2800021e 	bne	r5,zero,88528 <__lo0bits+0x48>
   88520:	1806d23a 	srli	r3,r3,8
   88524:	10800204 	addi	r2,r2,8
   88528:	194003cc 	andi	r5,r3,15
   8852c:	2800021e 	bne	r5,zero,88538 <__lo0bits+0x58>
   88530:	1806d13a 	srli	r3,r3,4
   88534:	10800104 	addi	r2,r2,4
   88538:	194000cc 	andi	r5,r3,3
   8853c:	2800021e 	bne	r5,zero,88548 <__lo0bits+0x68>
   88540:	1806d0ba 	srli	r3,r3,2
   88544:	10800084 	addi	r2,r2,2
   88548:	1940004c 	andi	r5,r3,1
   8854c:	2800081e 	bne	r5,zero,88570 <__lo0bits+0x90>
   88550:	1806d07a 	srli	r3,r3,1
   88554:	1800051e 	bne	r3,zero,8856c <__lo0bits+0x8c>
   88558:	00800804 	movi	r2,32
   8855c:	f800283a 	ret
   88560:	1806d43a 	srli	r3,r3,16
   88564:	00800404 	movi	r2,16
   88568:	003feb06 	br	88518 <_gp+0xfffee124>
   8856c:	10800044 	addi	r2,r2,1
   88570:	20c00015 	stw	r3,0(r4)
   88574:	f800283a 	ret
   88578:	0005883a 	mov	r2,zero
   8857c:	f800283a 	ret
   88580:	1806d07a 	srli	r3,r3,1
   88584:	00800044 	movi	r2,1
   88588:	20c00015 	stw	r3,0(r4)
   8858c:	f800283a 	ret

00088590 <__i2b>:
   88590:	defffd04 	addi	sp,sp,-12
   88594:	dc000015 	stw	r16,0(sp)
   88598:	04000044 	movi	r16,1
   8859c:	dc400115 	stw	r17,4(sp)
   885a0:	2823883a 	mov	r17,r5
   885a4:	800b883a 	mov	r5,r16
   885a8:	dfc00215 	stw	ra,8(sp)
   885ac:	00881600 	call	88160 <_Balloc>
   885b0:	14400515 	stw	r17,20(r2)
   885b4:	14000415 	stw	r16,16(r2)
   885b8:	dfc00217 	ldw	ra,8(sp)
   885bc:	dc400117 	ldw	r17,4(sp)
   885c0:	dc000017 	ldw	r16,0(sp)
   885c4:	dec00304 	addi	sp,sp,12
   885c8:	f800283a 	ret

000885cc <__multiply>:
   885cc:	defff004 	addi	sp,sp,-64
   885d0:	dc400715 	stw	r17,28(sp)
   885d4:	dc000615 	stw	r16,24(sp)
   885d8:	34400417 	ldw	r17,16(r6)
   885dc:	2c000417 	ldw	r16,16(r5)
   885e0:	df000e15 	stw	fp,56(sp)
   885e4:	dd000a15 	stw	r20,40(sp)
   885e8:	dfc00f15 	stw	ra,60(sp)
   885ec:	ddc00d15 	stw	r23,52(sp)
   885f0:	dd800c15 	stw	r22,48(sp)
   885f4:	dd400b15 	stw	r21,44(sp)
   885f8:	dcc00915 	stw	r19,36(sp)
   885fc:	dc800815 	stw	r18,32(sp)
   88600:	2839883a 	mov	fp,r5
   88604:	3029883a 	mov	r20,r6
   88608:	8440050e 	bge	r16,r17,88620 <__multiply+0x54>
   8860c:	8007883a 	mov	r3,r16
   88610:	3039883a 	mov	fp,r6
   88614:	8821883a 	mov	r16,r17
   88618:	2829883a 	mov	r20,r5
   8861c:	1823883a 	mov	r17,r3
   88620:	e0800217 	ldw	r2,8(fp)
   88624:	8447883a 	add	r3,r16,r17
   88628:	d8c00115 	stw	r3,4(sp)
   8862c:	e1400117 	ldw	r5,4(fp)
   88630:	10c0010e 	bge	r2,r3,88638 <__multiply+0x6c>
   88634:	29400044 	addi	r5,r5,1
   88638:	00881600 	call	88160 <_Balloc>
   8863c:	d8c00117 	ldw	r3,4(sp)
   88640:	d8800515 	stw	r2,20(sp)
   88644:	18ef883a 	add	r23,r3,r3
   88648:	bdef883a 	add	r23,r23,r23
   8864c:	10c00504 	addi	r3,r2,20
   88650:	1def883a 	add	r23,r3,r23
   88654:	d8c00015 	stw	r3,0(sp)
   88658:	ddc00215 	stw	r23,8(sp)
   8865c:	1805883a 	mov	r2,r3
   88660:	1dc0042e 	bgeu	r3,r23,88674 <__multiply+0xa8>
   88664:	d8c00217 	ldw	r3,8(sp)
   88668:	10000015 	stw	zero,0(r2)
   8866c:	10800104 	addi	r2,r2,4
   88670:	10fffc36 	bltu	r2,r3,88664 <_gp+0xfffee270>
   88674:	8c63883a 	add	r17,r17,r17
   88678:	a5000504 	addi	r20,r20,20
   8867c:	8c63883a 	add	r17,r17,r17
   88680:	e7000504 	addi	fp,fp,20
   88684:	8421883a 	add	r16,r16,r16
   88688:	a463883a 	add	r17,r20,r17
   8868c:	8421883a 	add	r16,r16,r16
   88690:	df000315 	stw	fp,12(sp)
   88694:	dc400415 	stw	r17,16(sp)
   88698:	e425883a 	add	r18,fp,r16
   8869c:	a440482e 	bgeu	r20,r17,887c0 <__multiply+0x1f4>
   886a0:	a4000017 	ldw	r16,0(r20)
   886a4:	847fffcc 	andi	r17,r16,65535
   886a8:	88001d26 	beq	r17,zero,88720 <__multiply+0x154>
   886ac:	dc000017 	ldw	r16,0(sp)
   886b0:	dcc00317 	ldw	r19,12(sp)
   886b4:	002b883a 	mov	r21,zero
   886b8:	9dc00017 	ldw	r23,0(r19)
   886bc:	85800017 	ldw	r22,0(r16)
   886c0:	880b883a 	mov	r5,r17
   886c4:	b93fffcc 	andi	r4,r23,65535
   886c8:	00825800 	call	82580 <__mulsi3>
   886cc:	b808d43a 	srli	r4,r23,16
   886d0:	b0ffffcc 	andi	r3,r22,65535
   886d4:	1885883a 	add	r2,r3,r2
   886d8:	880b883a 	mov	r5,r17
   886dc:	156b883a 	add	r21,r2,r21
   886e0:	b02cd43a 	srli	r22,r22,16
   886e4:	00825800 	call	82580 <__mulsi3>
   886e8:	a808d43a 	srli	r4,r21,16
   886ec:	b085883a 	add	r2,r22,r2
   886f0:	a8ffffcc 	andi	r3,r21,65535
   886f4:	110d883a 	add	r6,r2,r4
   886f8:	3004943a 	slli	r2,r6,16
   886fc:	9cc00104 	addi	r19,r19,4
   88700:	8009883a 	mov	r4,r16
   88704:	10c6b03a 	or	r3,r2,r3
   88708:	80c00015 	stw	r3,0(r16)
   8870c:	302ad43a 	srli	r21,r6,16
   88710:	84000104 	addi	r16,r16,4
   88714:	9cbfe836 	bltu	r19,r18,886b8 <_gp+0xfffee2c4>
   88718:	25400115 	stw	r21,4(r4)
   8871c:	a4000017 	ldw	r16,0(r20)
   88720:	8020d43a 	srli	r16,r16,16
   88724:	80002026 	beq	r16,zero,887a8 <__multiply+0x1dc>
   88728:	d8c00017 	ldw	r3,0(sp)
   8872c:	dd400317 	ldw	r21,12(sp)
   88730:	002f883a 	mov	r23,zero
   88734:	1f000017 	ldw	fp,0(r3)
   88738:	182d883a 	mov	r22,r3
   8873c:	e023883a 	mov	r17,fp
   88740:	a900000b 	ldhu	r4,0(r21)
   88744:	8822d43a 	srli	r17,r17,16
   88748:	800b883a 	mov	r5,r16
   8874c:	00825800 	call	82580 <__mulsi3>
   88750:	1445883a 	add	r2,r2,r17
   88754:	15ef883a 	add	r23,r2,r23
   88758:	b804943a 	slli	r2,r23,16
   8875c:	e1ffffcc 	andi	r7,fp,65535
   88760:	ad400104 	addi	r21,r21,4
   88764:	11ceb03a 	or	r7,r2,r7
   88768:	b1c00015 	stw	r7,0(r22)
   8876c:	a93fff17 	ldw	r4,-4(r21)
   88770:	b7000117 	ldw	fp,4(r22)
   88774:	800b883a 	mov	r5,r16
   88778:	2008d43a 	srli	r4,r4,16
   8877c:	e023883a 	mov	r17,fp
   88780:	b027883a 	mov	r19,r22
   88784:	00825800 	call	82580 <__mulsi3>
   88788:	b812d43a 	srli	r9,r23,16
   8878c:	e23fffcc 	andi	r8,fp,65535
   88790:	1205883a 	add	r2,r2,r8
   88794:	1279883a 	add	fp,r2,r9
   88798:	b5800104 	addi	r22,r22,4
   8879c:	e02ed43a 	srli	r23,fp,16
   887a0:	acbfe736 	bltu	r21,r18,88740 <_gp+0xfffee34c>
   887a4:	9f000115 	stw	fp,4(r19)
   887a8:	d8c00017 	ldw	r3,0(sp)
   887ac:	a5000104 	addi	r20,r20,4
   887b0:	18c00104 	addi	r3,r3,4
   887b4:	d8c00015 	stw	r3,0(sp)
   887b8:	d8c00417 	ldw	r3,16(sp)
   887bc:	a0ffb836 	bltu	r20,r3,886a0 <_gp+0xfffee2ac>
   887c0:	d8c00117 	ldw	r3,4(sp)
   887c4:	00c00c0e 	bge	zero,r3,887f8 <__multiply+0x22c>
   887c8:	d8c00217 	ldw	r3,8(sp)
   887cc:	18bfff17 	ldw	r2,-4(r3)
   887d0:	1dffff04 	addi	r23,r3,-4
   887d4:	10000326 	beq	r2,zero,887e4 <__multiply+0x218>
   887d8:	00000706 	br	887f8 <__multiply+0x22c>
   887dc:	b8800017 	ldw	r2,0(r23)
   887e0:	1000051e 	bne	r2,zero,887f8 <__multiply+0x22c>
   887e4:	d8c00117 	ldw	r3,4(sp)
   887e8:	bdffff04 	addi	r23,r23,-4
   887ec:	18ffffc4 	addi	r3,r3,-1
   887f0:	d8c00115 	stw	r3,4(sp)
   887f4:	183ff91e 	bne	r3,zero,887dc <_gp+0xfffee3e8>
   887f8:	d8c00517 	ldw	r3,20(sp)
   887fc:	d9000117 	ldw	r4,4(sp)
   88800:	1805883a 	mov	r2,r3
   88804:	19000415 	stw	r4,16(r3)
   88808:	dfc00f17 	ldw	ra,60(sp)
   8880c:	df000e17 	ldw	fp,56(sp)
   88810:	ddc00d17 	ldw	r23,52(sp)
   88814:	dd800c17 	ldw	r22,48(sp)
   88818:	dd400b17 	ldw	r21,44(sp)
   8881c:	dd000a17 	ldw	r20,40(sp)
   88820:	dcc00917 	ldw	r19,36(sp)
   88824:	dc800817 	ldw	r18,32(sp)
   88828:	dc400717 	ldw	r17,28(sp)
   8882c:	dc000617 	ldw	r16,24(sp)
   88830:	dec01004 	addi	sp,sp,64
   88834:	f800283a 	ret

00088838 <__pow5mult>:
   88838:	defffa04 	addi	sp,sp,-24
   8883c:	dcc00315 	stw	r19,12(sp)
   88840:	dc800215 	stw	r18,8(sp)
   88844:	dc000015 	stw	r16,0(sp)
   88848:	dfc00515 	stw	ra,20(sp)
   8884c:	dd000415 	stw	r20,16(sp)
   88850:	dc400115 	stw	r17,4(sp)
   88854:	308000cc 	andi	r2,r6,3
   88858:	3021883a 	mov	r16,r6
   8885c:	2027883a 	mov	r19,r4
   88860:	2825883a 	mov	r18,r5
   88864:	1000301e 	bne	r2,zero,88928 <__pow5mult+0xf0>
   88868:	8021d0ba 	srai	r16,r16,2
   8886c:	80001b26 	beq	r16,zero,888dc <__pow5mult+0xa4>
   88870:	9c401217 	ldw	r17,72(r19)
   88874:	88003726 	beq	r17,zero,88954 <__pow5mult+0x11c>
   88878:	80c0004c 	andi	r3,r16,1
   8887c:	1800071e 	bne	r3,zero,8889c <__pow5mult+0x64>
   88880:	8021d07a 	srai	r16,r16,1
   88884:	80001526 	beq	r16,zero,888dc <__pow5mult+0xa4>
   88888:	88800017 	ldw	r2,0(r17)
   8888c:	10001c26 	beq	r2,zero,88900 <__pow5mult+0xc8>
   88890:	1023883a 	mov	r17,r2
   88894:	80c0004c 	andi	r3,r16,1
   88898:	183ff926 	beq	r3,zero,88880 <_gp+0xfffee48c>
   8889c:	900b883a 	mov	r5,r18
   888a0:	880d883a 	mov	r6,r17
   888a4:	9809883a 	mov	r4,r19
   888a8:	00885cc0 	call	885cc <__multiply>
   888ac:	90001c26 	beq	r18,zero,88920 <__pow5mult+0xe8>
   888b0:	91000117 	ldw	r4,4(r18)
   888b4:	98c01317 	ldw	r3,76(r19)
   888b8:	8021d07a 	srai	r16,r16,1
   888bc:	2109883a 	add	r4,r4,r4
   888c0:	2109883a 	add	r4,r4,r4
   888c4:	1907883a 	add	r3,r3,r4
   888c8:	19000017 	ldw	r4,0(r3)
   888cc:	91000015 	stw	r4,0(r18)
   888d0:	1c800015 	stw	r18,0(r3)
   888d4:	1025883a 	mov	r18,r2
   888d8:	803feb1e 	bne	r16,zero,88888 <_gp+0xfffee494>
   888dc:	9005883a 	mov	r2,r18
   888e0:	dfc00517 	ldw	ra,20(sp)
   888e4:	dd000417 	ldw	r20,16(sp)
   888e8:	dcc00317 	ldw	r19,12(sp)
   888ec:	dc800217 	ldw	r18,8(sp)
   888f0:	dc400117 	ldw	r17,4(sp)
   888f4:	dc000017 	ldw	r16,0(sp)
   888f8:	dec00604 	addi	sp,sp,24
   888fc:	f800283a 	ret
   88900:	880b883a 	mov	r5,r17
   88904:	880d883a 	mov	r6,r17
   88908:	9809883a 	mov	r4,r19
   8890c:	00885cc0 	call	885cc <__multiply>
   88910:	88800015 	stw	r2,0(r17)
   88914:	10000015 	stw	zero,0(r2)
   88918:	1023883a 	mov	r17,r2
   8891c:	003fdd06 	br	88894 <_gp+0xfffee4a0>
   88920:	1025883a 	mov	r18,r2
   88924:	003fd606 	br	88880 <_gp+0xfffee48c>
   88928:	10bfffc4 	addi	r2,r2,-1
   8892c:	1085883a 	add	r2,r2,r2
   88930:	00c00274 	movhi	r3,9
   88934:	18c1f904 	addi	r3,r3,2020
   88938:	1085883a 	add	r2,r2,r2
   8893c:	1885883a 	add	r2,r3,r2
   88940:	11800017 	ldw	r6,0(r2)
   88944:	000f883a 	mov	r7,zero
   88948:	00882300 	call	88230 <__multadd>
   8894c:	1025883a 	mov	r18,r2
   88950:	003fc506 	br	88868 <_gp+0xfffee474>
   88954:	05000044 	movi	r20,1
   88958:	9809883a 	mov	r4,r19
   8895c:	a00b883a 	mov	r5,r20
   88960:	00881600 	call	88160 <_Balloc>
   88964:	1023883a 	mov	r17,r2
   88968:	00809c44 	movi	r2,625
   8896c:	88800515 	stw	r2,20(r17)
   88970:	8d000415 	stw	r20,16(r17)
   88974:	9c401215 	stw	r17,72(r19)
   88978:	88000015 	stw	zero,0(r17)
   8897c:	003fbe06 	br	88878 <_gp+0xfffee484>

00088980 <__lshift>:
   88980:	defff904 	addi	sp,sp,-28
   88984:	dd000415 	stw	r20,16(sp)
   88988:	dc400115 	stw	r17,4(sp)
   8898c:	2d000417 	ldw	r20,16(r5)
   88990:	3023d17a 	srai	r17,r6,5
   88994:	28800217 	ldw	r2,8(r5)
   88998:	dd400515 	stw	r21,20(sp)
   8899c:	8d29883a 	add	r20,r17,r20
   889a0:	dcc00315 	stw	r19,12(sp)
   889a4:	dc800215 	stw	r18,8(sp)
   889a8:	dc000015 	stw	r16,0(sp)
   889ac:	dfc00615 	stw	ra,24(sp)
   889b0:	a4000044 	addi	r16,r20,1
   889b4:	2825883a 	mov	r18,r5
   889b8:	302b883a 	mov	r21,r6
   889bc:	2027883a 	mov	r19,r4
   889c0:	29400117 	ldw	r5,4(r5)
   889c4:	1400030e 	bge	r2,r16,889d4 <__lshift+0x54>
   889c8:	1085883a 	add	r2,r2,r2
   889cc:	29400044 	addi	r5,r5,1
   889d0:	143ffd16 	blt	r2,r16,889c8 <_gp+0xfffee5d4>
   889d4:	9809883a 	mov	r4,r19
   889d8:	00881600 	call	88160 <_Balloc>
   889dc:	11000504 	addi	r4,r2,20
   889e0:	0440090e 	bge	zero,r17,88a08 <__lshift+0x88>
   889e4:	200f883a 	mov	r7,r4
   889e8:	0007883a 	mov	r3,zero
   889ec:	38000015 	stw	zero,0(r7)
   889f0:	18c00044 	addi	r3,r3,1
   889f4:	39c00104 	addi	r7,r7,4
   889f8:	1c7ffc1e 	bne	r3,r17,889ec <_gp+0xfffee5f8>
   889fc:	18c7883a 	add	r3,r3,r3
   88a00:	18c7883a 	add	r3,r3,r3
   88a04:	20c9883a 	add	r4,r4,r3
   88a08:	92400417 	ldw	r9,16(r18)
   88a0c:	90c00504 	addi	r3,r18,20
   88a10:	a98007cc 	andi	r6,r21,31
   88a14:	4a53883a 	add	r9,r9,r9
   88a18:	4a53883a 	add	r9,r9,r9
   88a1c:	1a53883a 	add	r9,r3,r9
   88a20:	30002426 	beq	r6,zero,88ab4 <__lshift+0x134>
   88a24:	01400804 	movi	r5,32
   88a28:	298bc83a 	sub	r5,r5,r6
   88a2c:	200f883a 	mov	r7,r4
   88a30:	0011883a 	mov	r8,zero
   88a34:	1a800017 	ldw	r10,0(r3)
   88a38:	3809883a 	mov	r4,r7
   88a3c:	39c00104 	addi	r7,r7,4
   88a40:	5194983a 	sll	r10,r10,r6
   88a44:	18c00104 	addi	r3,r3,4
   88a48:	4290b03a 	or	r8,r8,r10
   88a4c:	3a3fff15 	stw	r8,-4(r7)
   88a50:	1a3fff17 	ldw	r8,-4(r3)
   88a54:	4150d83a 	srl	r8,r8,r5
   88a58:	1a7ff636 	bltu	r3,r9,88a34 <_gp+0xfffee640>
   88a5c:	22000115 	stw	r8,4(r4)
   88a60:	40000126 	beq	r8,zero,88a68 <__lshift+0xe8>
   88a64:	a4000084 	addi	r16,r20,2
   88a68:	91000117 	ldw	r4,4(r18)
   88a6c:	98c01317 	ldw	r3,76(r19)
   88a70:	843fffc4 	addi	r16,r16,-1
   88a74:	2109883a 	add	r4,r4,r4
   88a78:	2109883a 	add	r4,r4,r4
   88a7c:	1907883a 	add	r3,r3,r4
   88a80:	19000017 	ldw	r4,0(r3)
   88a84:	14000415 	stw	r16,16(r2)
   88a88:	91000015 	stw	r4,0(r18)
   88a8c:	1c800015 	stw	r18,0(r3)
   88a90:	dfc00617 	ldw	ra,24(sp)
   88a94:	dd400517 	ldw	r21,20(sp)
   88a98:	dd000417 	ldw	r20,16(sp)
   88a9c:	dcc00317 	ldw	r19,12(sp)
   88aa0:	dc800217 	ldw	r18,8(sp)
   88aa4:	dc400117 	ldw	r17,4(sp)
   88aa8:	dc000017 	ldw	r16,0(sp)
   88aac:	dec00704 	addi	sp,sp,28
   88ab0:	f800283a 	ret
   88ab4:	200f883a 	mov	r7,r4
   88ab8:	19800017 	ldw	r6,0(r3)
   88abc:	39c00104 	addi	r7,r7,4
   88ac0:	18c00104 	addi	r3,r3,4
   88ac4:	39bfff15 	stw	r6,-4(r7)
   88ac8:	1a7ffb36 	bltu	r3,r9,88ab8 <_gp+0xfffee6c4>
   88acc:	003fe606 	br	88a68 <_gp+0xfffee674>

00088ad0 <__mcmp>:
   88ad0:	20800417 	ldw	r2,16(r4)
   88ad4:	28c00417 	ldw	r3,16(r5)
   88ad8:	10c5c83a 	sub	r2,r2,r3
   88adc:	1000111e 	bne	r2,zero,88b24 <__mcmp+0x54>
   88ae0:	18c7883a 	add	r3,r3,r3
   88ae4:	18c7883a 	add	r3,r3,r3
   88ae8:	21000504 	addi	r4,r4,20
   88aec:	29400504 	addi	r5,r5,20
   88af0:	20c5883a 	add	r2,r4,r3
   88af4:	28cb883a 	add	r5,r5,r3
   88af8:	00000106 	br	88b00 <__mcmp+0x30>
   88afc:	2080082e 	bgeu	r4,r2,88b20 <__mcmp+0x50>
   88b00:	10bfff04 	addi	r2,r2,-4
   88b04:	297fff04 	addi	r5,r5,-4
   88b08:	11800017 	ldw	r6,0(r2)
   88b0c:	28c00017 	ldw	r3,0(r5)
   88b10:	30fffa26 	beq	r6,r3,88afc <_gp+0xfffee708>
   88b14:	30c00436 	bltu	r6,r3,88b28 <__mcmp+0x58>
   88b18:	00800044 	movi	r2,1
   88b1c:	f800283a 	ret
   88b20:	0005883a 	mov	r2,zero
   88b24:	f800283a 	ret
   88b28:	00bfffc4 	movi	r2,-1
   88b2c:	f800283a 	ret

00088b30 <__mdiff>:
   88b30:	defffc04 	addi	sp,sp,-16
   88b34:	dc000015 	stw	r16,0(sp)
   88b38:	2821883a 	mov	r16,r5
   88b3c:	200f883a 	mov	r7,r4
   88b40:	300b883a 	mov	r5,r6
   88b44:	8009883a 	mov	r4,r16
   88b48:	dc400115 	stw	r17,4(sp)
   88b4c:	dfc00315 	stw	ra,12(sp)
   88b50:	dc800215 	stw	r18,8(sp)
   88b54:	3023883a 	mov	r17,r6
   88b58:	0088ad00 	call	88ad0 <__mcmp>
   88b5c:	10005226 	beq	r2,zero,88ca8 <__mdiff+0x178>
   88b60:	10004c16 	blt	r2,zero,88c94 <__mdiff+0x164>
   88b64:	0025883a 	mov	r18,zero
   88b68:	81400117 	ldw	r5,4(r16)
   88b6c:	3809883a 	mov	r4,r7
   88b70:	00881600 	call	88160 <_Balloc>
   88b74:	82800417 	ldw	r10,16(r16)
   88b78:	8b400417 	ldw	r13,16(r17)
   88b7c:	81000504 	addi	r4,r16,20
   88b80:	5299883a 	add	r12,r10,r10
   88b84:	6b5b883a 	add	r13,r13,r13
   88b88:	6319883a 	add	r12,r12,r12
   88b8c:	89800504 	addi	r6,r17,20
   88b90:	6b5b883a 	add	r13,r13,r13
   88b94:	14800315 	stw	r18,12(r2)
   88b98:	2319883a 	add	r12,r4,r12
   88b9c:	335b883a 	add	r13,r6,r13
   88ba0:	11400504 	addi	r5,r2,20
   88ba4:	0007883a 	mov	r3,zero
   88ba8:	00000106 	br	88bb0 <__mdiff+0x80>
   88bac:	400b883a 	mov	r5,r8
   88bb0:	22400017 	ldw	r9,0(r4)
   88bb4:	32000017 	ldw	r8,0(r6)
   88bb8:	31800104 	addi	r6,r6,4
   88bbc:	49ffffcc 	andi	r7,r9,65535
   88bc0:	42ffffcc 	andi	r11,r8,65535
   88bc4:	38c7883a 	add	r3,r7,r3
   88bc8:	1acfc83a 	sub	r7,r3,r11
   88bcc:	4010d43a 	srli	r8,r8,16
   88bd0:	4806d43a 	srli	r3,r9,16
   88bd4:	3817d43a 	srai	r11,r7,16
   88bd8:	39ffffcc 	andi	r7,r7,65535
   88bdc:	1a07c83a 	sub	r3,r3,r8
   88be0:	1ac7883a 	add	r3,r3,r11
   88be4:	1812943a 	slli	r9,r3,16
   88be8:	2a000104 	addi	r8,r5,4
   88bec:	21000104 	addi	r4,r4,4
   88bf0:	49ceb03a 	or	r7,r9,r7
   88bf4:	29c00015 	stw	r7,0(r5)
   88bf8:	1807d43a 	srai	r3,r3,16
   88bfc:	337feb36 	bltu	r6,r13,88bac <_gp+0xfffee7b8>
   88c00:	2013883a 	mov	r9,r4
   88c04:	2300342e 	bgeu	r4,r12,88cd8 <__mdiff+0x1a8>
   88c08:	400b883a 	mov	r5,r8
   88c0c:	21c00017 	ldw	r7,0(r4)
   88c10:	29400104 	addi	r5,r5,4
   88c14:	21000104 	addi	r4,r4,4
   88c18:	39bfffcc 	andi	r6,r7,65535
   88c1c:	30cd883a 	add	r6,r6,r3
   88c20:	3007d43a 	srai	r3,r6,16
   88c24:	380ed43a 	srli	r7,r7,16
   88c28:	31bfffcc 	andi	r6,r6,65535
   88c2c:	19c7883a 	add	r3,r3,r7
   88c30:	180e943a 	slli	r7,r3,16
   88c34:	1807d43a 	srai	r3,r3,16
   88c38:	398cb03a 	or	r6,r7,r6
   88c3c:	29bfff15 	stw	r6,-4(r5)
   88c40:	233ff236 	bltu	r4,r12,88c0c <_gp+0xfffee818>
   88c44:	0248303a 	nor	r4,zero,r9
   88c48:	2309883a 	add	r4,r4,r12
   88c4c:	2008d0ba 	srli	r4,r4,2
   88c50:	21000044 	addi	r4,r4,1
   88c54:	2109883a 	add	r4,r4,r4
   88c58:	2109883a 	add	r4,r4,r4
   88c5c:	4111883a 	add	r8,r8,r4
   88c60:	413fff04 	addi	r4,r8,-4
   88c64:	3000041e 	bne	r6,zero,88c78 <__mdiff+0x148>
   88c68:	213fff04 	addi	r4,r4,-4
   88c6c:	20c00017 	ldw	r3,0(r4)
   88c70:	52bfffc4 	addi	r10,r10,-1
   88c74:	183ffc26 	beq	r3,zero,88c68 <_gp+0xfffee874>
   88c78:	12800415 	stw	r10,16(r2)
   88c7c:	dfc00317 	ldw	ra,12(sp)
   88c80:	dc800217 	ldw	r18,8(sp)
   88c84:	dc400117 	ldw	r17,4(sp)
   88c88:	dc000017 	ldw	r16,0(sp)
   88c8c:	dec00404 	addi	sp,sp,16
   88c90:	f800283a 	ret
   88c94:	8005883a 	mov	r2,r16
   88c98:	04800044 	movi	r18,1
   88c9c:	8821883a 	mov	r16,r17
   88ca0:	1023883a 	mov	r17,r2
   88ca4:	003fb006 	br	88b68 <_gp+0xfffee774>
   88ca8:	3809883a 	mov	r4,r7
   88cac:	000b883a 	mov	r5,zero
   88cb0:	00881600 	call	88160 <_Balloc>
   88cb4:	00c00044 	movi	r3,1
   88cb8:	10c00415 	stw	r3,16(r2)
   88cbc:	10000515 	stw	zero,20(r2)
   88cc0:	dfc00317 	ldw	ra,12(sp)
   88cc4:	dc800217 	ldw	r18,8(sp)
   88cc8:	dc400117 	ldw	r17,4(sp)
   88ccc:	dc000017 	ldw	r16,0(sp)
   88cd0:	dec00404 	addi	sp,sp,16
   88cd4:	f800283a 	ret
   88cd8:	380d883a 	mov	r6,r7
   88cdc:	003fe006 	br	88c60 <_gp+0xfffee86c>

00088ce0 <__ulp>:
   88ce0:	295ffc2c 	andhi	r5,r5,32752
   88ce4:	00bf3034 	movhi	r2,64704
   88ce8:	2887883a 	add	r3,r5,r2
   88cec:	00c0020e 	bge	zero,r3,88cf8 <__ulp+0x18>
   88cf0:	0005883a 	mov	r2,zero
   88cf4:	f800283a 	ret
   88cf8:	00c7c83a 	sub	r3,zero,r3
   88cfc:	1805d53a 	srai	r2,r3,20
   88d00:	00c004c4 	movi	r3,19
   88d04:	18800a0e 	bge	r3,r2,88d30 <__ulp+0x50>
   88d08:	01000c84 	movi	r4,50
   88d0c:	0007883a 	mov	r3,zero
   88d10:	20800516 	blt	r4,r2,88d28 <__ulp+0x48>
   88d14:	01000cc4 	movi	r4,51
   88d18:	2085c83a 	sub	r2,r4,r2
   88d1c:	01000044 	movi	r4,1
   88d20:	2084983a 	sll	r2,r4,r2
   88d24:	f800283a 	ret
   88d28:	00800044 	movi	r2,1
   88d2c:	f800283a 	ret
   88d30:	00c00234 	movhi	r3,8
   88d34:	1887d83a 	sra	r3,r3,r2
   88d38:	0005883a 	mov	r2,zero
   88d3c:	f800283a 	ret

00088d40 <__b2d>:
   88d40:	21800417 	ldw	r6,16(r4)
   88d44:	22000504 	addi	r8,r4,20
   88d48:	deffff04 	addi	sp,sp,-4
   88d4c:	318d883a 	add	r6,r6,r6
   88d50:	318d883a 	add	r6,r6,r6
   88d54:	418d883a 	add	r6,r8,r6
   88d58:	31ffff17 	ldw	r7,-4(r6)
   88d5c:	327fff04 	addi	r9,r6,-4
   88d60:	dfc00015 	stw	ra,0(sp)
   88d64:	3809883a 	mov	r4,r7
   88d68:	00884780 	call	88478 <__hi0bits>
   88d6c:	00c00804 	movi	r3,32
   88d70:	1887c83a 	sub	r3,r3,r2
   88d74:	28c00015 	stw	r3,0(r5)
   88d78:	00c00284 	movi	r3,10
   88d7c:	18800d16 	blt	r3,r2,88db4 <__b2d+0x74>
   88d80:	010002c4 	movi	r4,11
   88d84:	2089c83a 	sub	r4,r4,r2
   88d88:	3906d83a 	srl	r3,r7,r4
   88d8c:	18cffc34 	orhi	r3,r3,16368
   88d90:	4240232e 	bgeu	r8,r9,88e20 <__b2d+0xe0>
   88d94:	317ffe17 	ldw	r5,-8(r6)
   88d98:	2908d83a 	srl	r4,r5,r4
   88d9c:	10800544 	addi	r2,r2,21
   88da0:	388e983a 	sll	r7,r7,r2
   88da4:	21c4b03a 	or	r2,r4,r7
   88da8:	dfc00017 	ldw	ra,0(sp)
   88dac:	dec00104 	addi	sp,sp,4
   88db0:	f800283a 	ret
   88db4:	42401136 	bltu	r8,r9,88dfc <__b2d+0xbc>
   88db8:	113ffd44 	addi	r4,r2,-11
   88dbc:	000b883a 	mov	r5,zero
   88dc0:	20001226 	beq	r4,zero,88e0c <__b2d+0xcc>
   88dc4:	00c00ac4 	movi	r3,43
   88dc8:	1885c83a 	sub	r2,r3,r2
   88dcc:	3906983a 	sll	r3,r7,r4
   88dd0:	288cd83a 	srl	r6,r5,r2
   88dd4:	18cffc34 	orhi	r3,r3,16368
   88dd8:	1986b03a 	or	r3,r3,r6
   88ddc:	4240122e 	bgeu	r8,r9,88e28 <__b2d+0xe8>
   88de0:	49bfff17 	ldw	r6,-4(r9)
   88de4:	3084d83a 	srl	r2,r6,r2
   88de8:	2908983a 	sll	r4,r5,r4
   88dec:	1104b03a 	or	r2,r2,r4
   88df0:	dfc00017 	ldw	ra,0(sp)
   88df4:	dec00104 	addi	sp,sp,4
   88df8:	f800283a 	ret
   88dfc:	113ffd44 	addi	r4,r2,-11
   88e00:	327ffe04 	addi	r9,r6,-8
   88e04:	317ffe17 	ldw	r5,-8(r6)
   88e08:	203fee1e 	bne	r4,zero,88dc4 <_gp+0xfffee9d0>
   88e0c:	38cffc34 	orhi	r3,r7,16368
   88e10:	2805883a 	mov	r2,r5
   88e14:	dfc00017 	ldw	ra,0(sp)
   88e18:	dec00104 	addi	sp,sp,4
   88e1c:	f800283a 	ret
   88e20:	0009883a 	mov	r4,zero
   88e24:	003fdd06 	br	88d9c <_gp+0xfffee9a8>
   88e28:	0005883a 	mov	r2,zero
   88e2c:	003fee06 	br	88de8 <_gp+0xfffee9f4>

00088e30 <__d2b>:
   88e30:	defffa04 	addi	sp,sp,-24
   88e34:	dc400315 	stw	r17,12(sp)
   88e38:	2823883a 	mov	r17,r5
   88e3c:	01400044 	movi	r5,1
   88e40:	dc800415 	stw	r18,16(sp)
   88e44:	dc000215 	stw	r16,8(sp)
   88e48:	dfc00515 	stw	ra,20(sp)
   88e4c:	3021883a 	mov	r16,r6
   88e50:	3825883a 	mov	r18,r7
   88e54:	00881600 	call	88160 <_Balloc>
   88e58:	8012907a 	slli	r9,r16,1
   88e5c:	1011883a 	mov	r8,r2
   88e60:	00800434 	movhi	r2,16
   88e64:	10bfffc4 	addi	r2,r2,-1
   88e68:	4812d57a 	srli	r9,r9,21
   88e6c:	80a0703a 	and	r16,r16,r2
   88e70:	48000126 	beq	r9,zero,88e78 <__d2b+0x48>
   88e74:	84000434 	orhi	r16,r16,16
   88e78:	dc000015 	stw	r16,0(sp)
   88e7c:	88001e26 	beq	r17,zero,88ef8 <__d2b+0xc8>
   88e80:	d9000104 	addi	r4,sp,4
   88e84:	dc400115 	stw	r17,4(sp)
   88e88:	00884e00 	call	884e0 <__lo0bits>
   88e8c:	d8c00017 	ldw	r3,0(sp)
   88e90:	10002f1e 	bne	r2,zero,88f50 <__d2b+0x120>
   88e94:	d9000117 	ldw	r4,4(sp)
   88e98:	41000515 	stw	r4,20(r8)
   88e9c:	180b003a 	cmpeq	r5,r3,zero
   88ea0:	01000084 	movi	r4,2
   88ea4:	214bc83a 	sub	r5,r4,r5
   88ea8:	40c00615 	stw	r3,24(r8)
   88eac:	41400415 	stw	r5,16(r8)
   88eb0:	4800191e 	bne	r9,zero,88f18 <__d2b+0xe8>
   88eb4:	280690ba 	slli	r3,r5,2
   88eb8:	10bef384 	addi	r2,r2,-1074
   88ebc:	90800015 	stw	r2,0(r18)
   88ec0:	40c5883a 	add	r2,r8,r3
   88ec4:	11000417 	ldw	r4,16(r2)
   88ec8:	00884780 	call	88478 <__hi0bits>
   88ecc:	280a917a 	slli	r5,r5,5
   88ed0:	d8c00617 	ldw	r3,24(sp)
   88ed4:	2885c83a 	sub	r2,r5,r2
   88ed8:	18800015 	stw	r2,0(r3)
   88edc:	4005883a 	mov	r2,r8
   88ee0:	dfc00517 	ldw	ra,20(sp)
   88ee4:	dc800417 	ldw	r18,16(sp)
   88ee8:	dc400317 	ldw	r17,12(sp)
   88eec:	dc000217 	ldw	r16,8(sp)
   88ef0:	dec00604 	addi	sp,sp,24
   88ef4:	f800283a 	ret
   88ef8:	d809883a 	mov	r4,sp
   88efc:	00884e00 	call	884e0 <__lo0bits>
   88f00:	d8c00017 	ldw	r3,0(sp)
   88f04:	01400044 	movi	r5,1
   88f08:	41400415 	stw	r5,16(r8)
   88f0c:	40c00515 	stw	r3,20(r8)
   88f10:	10800804 	addi	r2,r2,32
   88f14:	483fe726 	beq	r9,zero,88eb4 <_gp+0xfffeeac0>
   88f18:	00c00d44 	movi	r3,53
   88f1c:	4a7ef344 	addi	r9,r9,-1075
   88f20:	4893883a 	add	r9,r9,r2
   88f24:	1885c83a 	sub	r2,r3,r2
   88f28:	d8c00617 	ldw	r3,24(sp)
   88f2c:	92400015 	stw	r9,0(r18)
   88f30:	18800015 	stw	r2,0(r3)
   88f34:	4005883a 	mov	r2,r8
   88f38:	dfc00517 	ldw	ra,20(sp)
   88f3c:	dc800417 	ldw	r18,16(sp)
   88f40:	dc400317 	ldw	r17,12(sp)
   88f44:	dc000217 	ldw	r16,8(sp)
   88f48:	dec00604 	addi	sp,sp,24
   88f4c:	f800283a 	ret
   88f50:	01000804 	movi	r4,32
   88f54:	2089c83a 	sub	r4,r4,r2
   88f58:	1908983a 	sll	r4,r3,r4
   88f5c:	d9400117 	ldw	r5,4(sp)
   88f60:	1886d83a 	srl	r3,r3,r2
   88f64:	2148b03a 	or	r4,r4,r5
   88f68:	41000515 	stw	r4,20(r8)
   88f6c:	d8c00015 	stw	r3,0(sp)
   88f70:	003fca06 	br	88e9c <_gp+0xfffeeaa8>

00088f74 <__ratio>:
   88f74:	defffd04 	addi	sp,sp,-12
   88f78:	2817883a 	mov	r11,r5
   88f7c:	201b883a 	mov	r13,r4
   88f80:	d9400104 	addi	r5,sp,4
   88f84:	dfc00215 	stw	ra,8(sp)
   88f88:	0088d400 	call	88d40 <__b2d>
   88f8c:	5809883a 	mov	r4,r11
   88f90:	d80b883a 	mov	r5,sp
   88f94:	1019883a 	mov	r12,r2
   88f98:	1815883a 	mov	r10,r3
   88f9c:	0088d400 	call	88d40 <__b2d>
   88fa0:	69400417 	ldw	r5,16(r13)
   88fa4:	59000417 	ldw	r4,16(r11)
   88fa8:	d9800117 	ldw	r6,4(sp)
   88fac:	2909c83a 	sub	r4,r5,r4
   88fb0:	d9400017 	ldw	r5,0(sp)
   88fb4:	2008917a 	slli	r4,r4,5
   88fb8:	314bc83a 	sub	r5,r6,r5
   88fbc:	290b883a 	add	r5,r5,r4
   88fc0:	01400a0e 	bge	zero,r5,88fec <__ratio+0x78>
   88fc4:	280a953a 	slli	r5,r5,20
   88fc8:	6009883a 	mov	r4,r12
   88fcc:	100d883a 	mov	r6,r2
   88fd0:	2a95883a 	add	r10,r5,r10
   88fd4:	500b883a 	mov	r5,r10
   88fd8:	180f883a 	mov	r7,r3
   88fdc:	00818b40 	call	818b4 <__divdf3>
   88fe0:	dfc00217 	ldw	ra,8(sp)
   88fe4:	dec00304 	addi	sp,sp,12
   88fe8:	f800283a 	ret
   88fec:	280a953a 	slli	r5,r5,20
   88ff0:	6009883a 	mov	r4,r12
   88ff4:	100d883a 	mov	r6,r2
   88ff8:	1947c83a 	sub	r3,r3,r5
   88ffc:	180f883a 	mov	r7,r3
   89000:	500b883a 	mov	r5,r10
   89004:	00818b40 	call	818b4 <__divdf3>
   89008:	dfc00217 	ldw	ra,8(sp)
   8900c:	dec00304 	addi	sp,sp,12
   89010:	f800283a 	ret

00089014 <_mprec_log10>:
   89014:	defffe04 	addi	sp,sp,-8
   89018:	dc000015 	stw	r16,0(sp)
   8901c:	dfc00115 	stw	ra,4(sp)
   89020:	008005c4 	movi	r2,23
   89024:	2021883a 	mov	r16,r4
   89028:	11000d0e 	bge	r2,r4,89060 <_mprec_log10+0x4c>
   8902c:	0005883a 	mov	r2,zero
   89030:	00cffc34 	movhi	r3,16368
   89034:	843fffc4 	addi	r16,r16,-1
   89038:	1009883a 	mov	r4,r2
   8903c:	180b883a 	mov	r5,r3
   89040:	000d883a 	mov	r6,zero
   89044:	01d00934 	movhi	r7,16420
   89048:	008d1f00 	call	8d1f0 <__muldf3>
   8904c:	803ff91e 	bne	r16,zero,89034 <_gp+0xfffeec40>
   89050:	dfc00117 	ldw	ra,4(sp)
   89054:	dc000017 	ldw	r16,0(sp)
   89058:	dec00204 	addi	sp,sp,8
   8905c:	f800283a 	ret
   89060:	202090fa 	slli	r16,r4,3
   89064:	00800274 	movhi	r2,9
   89068:	10821004 	addi	r2,r2,2112
   8906c:	1421883a 	add	r16,r2,r16
   89070:	80800017 	ldw	r2,0(r16)
   89074:	80c00117 	ldw	r3,4(r16)
   89078:	dfc00117 	ldw	ra,4(sp)
   8907c:	dc000017 	ldw	r16,0(sp)
   89080:	dec00204 	addi	sp,sp,8
   89084:	f800283a 	ret

00089088 <__copybits>:
   89088:	297fffc4 	addi	r5,r5,-1
   8908c:	2811d17a 	srai	r8,r5,5
   89090:	31c00417 	ldw	r7,16(r6)
   89094:	30800504 	addi	r2,r6,20
   89098:	42000044 	addi	r8,r8,1
   8909c:	39cf883a 	add	r7,r7,r7
   890a0:	4211883a 	add	r8,r8,r8
   890a4:	39cf883a 	add	r7,r7,r7
   890a8:	4211883a 	add	r8,r8,r8
   890ac:	11cf883a 	add	r7,r2,r7
   890b0:	2211883a 	add	r8,r4,r8
   890b4:	11c00d2e 	bgeu	r2,r7,890ec <__copybits+0x64>
   890b8:	2007883a 	mov	r3,r4
   890bc:	11400017 	ldw	r5,0(r2)
   890c0:	18c00104 	addi	r3,r3,4
   890c4:	10800104 	addi	r2,r2,4
   890c8:	197fff15 	stw	r5,-4(r3)
   890cc:	11fffb36 	bltu	r2,r7,890bc <_gp+0xfffeecc8>
   890d0:	3985c83a 	sub	r2,r7,r6
   890d4:	10bffac4 	addi	r2,r2,-21
   890d8:	1004d0ba 	srli	r2,r2,2
   890dc:	10800044 	addi	r2,r2,1
   890e0:	1085883a 	add	r2,r2,r2
   890e4:	1085883a 	add	r2,r2,r2
   890e8:	2089883a 	add	r4,r4,r2
   890ec:	2200032e 	bgeu	r4,r8,890fc <__copybits+0x74>
   890f0:	20000015 	stw	zero,0(r4)
   890f4:	21000104 	addi	r4,r4,4
   890f8:	223ffd36 	bltu	r4,r8,890f0 <_gp+0xfffeecfc>
   890fc:	f800283a 	ret

00089100 <__any_on>:
   89100:	20800417 	ldw	r2,16(r4)
   89104:	2807d17a 	srai	r3,r5,5
   89108:	21000504 	addi	r4,r4,20
   8910c:	10c00d0e 	bge	r2,r3,89144 <__any_on+0x44>
   89110:	1085883a 	add	r2,r2,r2
   89114:	1085883a 	add	r2,r2,r2
   89118:	2085883a 	add	r2,r4,r2
   8911c:	2080182e 	bgeu	r4,r2,89180 <__any_on+0x80>
   89120:	10ffff17 	ldw	r3,-4(r2)
   89124:	10bfff04 	addi	r2,r2,-4
   89128:	1800041e 	bne	r3,zero,8913c <__any_on+0x3c>
   8912c:	2080142e 	bgeu	r4,r2,89180 <__any_on+0x80>
   89130:	10bfff04 	addi	r2,r2,-4
   89134:	10c00017 	ldw	r3,0(r2)
   89138:	183ffc26 	beq	r3,zero,8912c <_gp+0xfffeed38>
   8913c:	00800044 	movi	r2,1
   89140:	f800283a 	ret
   89144:	18800a0e 	bge	r3,r2,89170 <__any_on+0x70>
   89148:	18c7883a 	add	r3,r3,r3
   8914c:	18c7883a 	add	r3,r3,r3
   89150:	294007cc 	andi	r5,r5,31
   89154:	20c5883a 	add	r2,r4,r3
   89158:	283ff026 	beq	r5,zero,8911c <_gp+0xfffeed28>
   8915c:	10c00017 	ldw	r3,0(r2)
   89160:	194cd83a 	srl	r6,r3,r5
   89164:	314a983a 	sll	r5,r6,r5
   89168:	28fff41e 	bne	r5,r3,8913c <_gp+0xfffeed48>
   8916c:	003feb06 	br	8911c <_gp+0xfffeed28>
   89170:	18c7883a 	add	r3,r3,r3
   89174:	18c7883a 	add	r3,r3,r3
   89178:	20c5883a 	add	r2,r4,r3
   8917c:	003fe706 	br	8911c <_gp+0xfffeed28>
   89180:	0005883a 	mov	r2,zero
   89184:	f800283a 	ret

00089188 <_putc_r>:
   89188:	defffc04 	addi	sp,sp,-16
   8918c:	dc000215 	stw	r16,8(sp)
   89190:	dfc00315 	stw	ra,12(sp)
   89194:	2021883a 	mov	r16,r4
   89198:	20000226 	beq	r4,zero,891a4 <_putc_r+0x1c>
   8919c:	20800e17 	ldw	r2,56(r4)
   891a0:	10001b26 	beq	r2,zero,89210 <_putc_r+0x88>
   891a4:	30800217 	ldw	r2,8(r6)
   891a8:	10bfffc4 	addi	r2,r2,-1
   891ac:	30800215 	stw	r2,8(r6)
   891b0:	10000a16 	blt	r2,zero,891dc <_putc_r+0x54>
   891b4:	30800017 	ldw	r2,0(r6)
   891b8:	11400005 	stb	r5,0(r2)
   891bc:	30800017 	ldw	r2,0(r6)
   891c0:	10c00044 	addi	r3,r2,1
   891c4:	30c00015 	stw	r3,0(r6)
   891c8:	10800003 	ldbu	r2,0(r2)
   891cc:	dfc00317 	ldw	ra,12(sp)
   891d0:	dc000217 	ldw	r16,8(sp)
   891d4:	dec00404 	addi	sp,sp,16
   891d8:	f800283a 	ret
   891dc:	30c00617 	ldw	r3,24(r6)
   891e0:	10c00616 	blt	r2,r3,891fc <_putc_r+0x74>
   891e4:	30800017 	ldw	r2,0(r6)
   891e8:	00c00284 	movi	r3,10
   891ec:	11400005 	stb	r5,0(r2)
   891f0:	30800017 	ldw	r2,0(r6)
   891f4:	11400003 	ldbu	r5,0(r2)
   891f8:	28fff11e 	bne	r5,r3,891c0 <_gp+0xfffeedcc>
   891fc:	8009883a 	mov	r4,r16
   89200:	dfc00317 	ldw	ra,12(sp)
   89204:	dc000217 	ldw	r16,8(sp)
   89208:	dec00404 	addi	sp,sp,16
   8920c:	008b0841 	jmpi	8b084 <__swbuf_r>
   89210:	d9400015 	stw	r5,0(sp)
   89214:	d9800115 	stw	r6,4(sp)
   89218:	00866cc0 	call	866cc <__sinit>
   8921c:	d9800117 	ldw	r6,4(sp)
   89220:	d9400017 	ldw	r5,0(sp)
   89224:	003fdf06 	br	891a4 <_gp+0xfffeedb0>

00089228 <putc>:
   89228:	defffc04 	addi	sp,sp,-16
   8922c:	dc400115 	stw	r17,4(sp)
   89230:	04400274 	movhi	r17,9
   89234:	8c48ff04 	addi	r17,r17,9212
   89238:	88800017 	ldw	r2,0(r17)
   8923c:	dc800215 	stw	r18,8(sp)
   89240:	dc000015 	stw	r16,0(sp)
   89244:	dfc00315 	stw	ra,12(sp)
   89248:	2025883a 	mov	r18,r4
   8924c:	2821883a 	mov	r16,r5
   89250:	10000226 	beq	r2,zero,8925c <putc+0x34>
   89254:	10c00e17 	ldw	r3,56(r2)
   89258:	18001a26 	beq	r3,zero,892c4 <putc+0x9c>
   8925c:	80800217 	ldw	r2,8(r16)
   89260:	10bfffc4 	addi	r2,r2,-1
   89264:	80800215 	stw	r2,8(r16)
   89268:	10000c16 	blt	r2,zero,8929c <putc+0x74>
   8926c:	80800017 	ldw	r2,0(r16)
   89270:	14800005 	stb	r18,0(r2)
   89274:	80800017 	ldw	r2,0(r16)
   89278:	10c00044 	addi	r3,r2,1
   8927c:	80c00015 	stw	r3,0(r16)
   89280:	10800003 	ldbu	r2,0(r2)
   89284:	dfc00317 	ldw	ra,12(sp)
   89288:	dc800217 	ldw	r18,8(sp)
   8928c:	dc400117 	ldw	r17,4(sp)
   89290:	dc000017 	ldw	r16,0(sp)
   89294:	dec00404 	addi	sp,sp,16
   89298:	f800283a 	ret
   8929c:	80c00617 	ldw	r3,24(r16)
   892a0:	10c00b16 	blt	r2,r3,892d0 <putc+0xa8>
   892a4:	80800017 	ldw	r2,0(r16)
   892a8:	00c00284 	movi	r3,10
   892ac:	14800005 	stb	r18,0(r2)
   892b0:	80800017 	ldw	r2,0(r16)
   892b4:	11400003 	ldbu	r5,0(r2)
   892b8:	28ffef1e 	bne	r5,r3,89278 <_gp+0xfffeee84>
   892bc:	89000017 	ldw	r4,0(r17)
   892c0:	00000506 	br	892d8 <putc+0xb0>
   892c4:	1009883a 	mov	r4,r2
   892c8:	00866cc0 	call	866cc <__sinit>
   892cc:	003fe306 	br	8925c <_gp+0xfffeee68>
   892d0:	89000017 	ldw	r4,0(r17)
   892d4:	900b883a 	mov	r5,r18
   892d8:	800d883a 	mov	r6,r16
   892dc:	dfc00317 	ldw	ra,12(sp)
   892e0:	dc800217 	ldw	r18,8(sp)
   892e4:	dc400117 	ldw	r17,4(sp)
   892e8:	dc000017 	ldw	r16,0(sp)
   892ec:	dec00404 	addi	sp,sp,16
   892f0:	008b0841 	jmpi	8b084 <__swbuf_r>

000892f4 <_realloc_r>:
   892f4:	defff604 	addi	sp,sp,-40
   892f8:	dd000415 	stw	r20,16(sp)
   892fc:	dc000015 	stw	r16,0(sp)
   89300:	dfc00915 	stw	ra,36(sp)
   89304:	df000815 	stw	fp,32(sp)
   89308:	ddc00715 	stw	r23,28(sp)
   8930c:	dd800615 	stw	r22,24(sp)
   89310:	dd400515 	stw	r21,20(sp)
   89314:	dcc00315 	stw	r19,12(sp)
   89318:	dc800215 	stw	r18,8(sp)
   8931c:	dc400115 	stw	r17,4(sp)
   89320:	2821883a 	mov	r16,r5
   89324:	3029883a 	mov	r20,r6
   89328:	28009a26 	beq	r5,zero,89594 <_realloc_r+0x2a0>
   8932c:	202b883a 	mov	r21,r4
   89330:	008e72c0 	call	8e72c <__malloc_lock>
   89334:	80ffff17 	ldw	r3,-4(r16)
   89338:	047fff04 	movi	r17,-4
   8933c:	a08002c4 	addi	r2,r20,11
   89340:	01000584 	movi	r4,22
   89344:	84fffe04 	addi	r19,r16,-8
   89348:	1c62703a 	and	r17,r3,r17
   8934c:	2080372e 	bgeu	r4,r2,8942c <_realloc_r+0x138>
   89350:	04bffe04 	movi	r18,-8
   89354:	14a4703a 	and	r18,r2,r18
   89358:	9005883a 	mov	r2,r18
   8935c:	90005b16 	blt	r18,zero,894cc <_realloc_r+0x1d8>
   89360:	95005a36 	bltu	r18,r20,894cc <_realloc_r+0x1d8>
   89364:	8880340e 	bge	r17,r2,89438 <_realloc_r+0x144>
   89368:	05c00274 	movhi	r23,9
   8936c:	bdc37904 	addi	r23,r23,3556
   89370:	b9000217 	ldw	r4,8(r23)
   89374:	9c4b883a 	add	r5,r19,r17
   89378:	21409626 	beq	r4,r5,895d4 <_realloc_r+0x2e0>
   8937c:	29800117 	ldw	r6,4(r5)
   89380:	01ffff84 	movi	r7,-2
   89384:	31ce703a 	and	r7,r6,r7
   89388:	29cf883a 	add	r7,r5,r7
   8938c:	39c00117 	ldw	r7,4(r7)
   89390:	39c0004c 	andi	r7,r7,1
   89394:	38004226 	beq	r7,zero,894a0 <_realloc_r+0x1ac>
   89398:	000d883a 	mov	r6,zero
   8939c:	000b883a 	mov	r5,zero
   893a0:	18c0004c 	andi	r3,r3,1
   893a4:	18005c1e 	bne	r3,zero,89518 <_realloc_r+0x224>
   893a8:	85bffe17 	ldw	r22,-8(r16)
   893ac:	00ffff04 	movi	r3,-4
   893b0:	9dadc83a 	sub	r22,r19,r22
   893b4:	b1c00117 	ldw	r7,4(r22)
   893b8:	38c6703a 	and	r3,r7,r3
   893bc:	28005426 	beq	r5,zero,89510 <_realloc_r+0x21c>
   893c0:	1c47883a 	add	r3,r3,r17
   893c4:	2900bf26 	beq	r5,r4,896c4 <_realloc_r+0x3d0>
   893c8:	30ef883a 	add	r23,r6,r3
   893cc:	b8807e16 	blt	r23,r2,895c8 <_realloc_r+0x2d4>
   893d0:	28800317 	ldw	r2,12(r5)
   893d4:	28c00217 	ldw	r3,8(r5)
   893d8:	89bfff04 	addi	r6,r17,-4
   893dc:	01000904 	movi	r4,36
   893e0:	18800315 	stw	r2,12(r3)
   893e4:	10c00215 	stw	r3,8(r2)
   893e8:	b1400217 	ldw	r5,8(r22)
   893ec:	b0c00317 	ldw	r3,12(r22)
   893f0:	b5000204 	addi	r20,r22,8
   893f4:	28c00315 	stw	r3,12(r5)
   893f8:	19400215 	stw	r5,8(r3)
   893fc:	21808536 	bltu	r4,r6,89614 <_realloc_r+0x320>
   89400:	008004c4 	movi	r2,19
   89404:	1180932e 	bgeu	r2,r6,89654 <_realloc_r+0x360>
   89408:	80800017 	ldw	r2,0(r16)
   8940c:	b0800215 	stw	r2,8(r22)
   89410:	80800117 	ldw	r2,4(r16)
   89414:	b0800315 	stw	r2,12(r22)
   89418:	008006c4 	movi	r2,27
   8941c:	1180df36 	bltu	r2,r6,8979c <_realloc_r+0x4a8>
   89420:	b0c00404 	addi	r3,r22,16
   89424:	84000204 	addi	r16,r16,8
   89428:	00008b06 	br	89658 <_realloc_r+0x364>
   8942c:	00800404 	movi	r2,16
   89430:	1025883a 	mov	r18,r2
   89434:	003fca06 	br	89360 <_gp+0xfffeef6c>
   89438:	8029883a 	mov	r20,r16
   8943c:	8c8dc83a 	sub	r6,r17,r18
   89440:	008003c4 	movi	r2,15
   89444:	18c0004c 	andi	r3,r3,1
   89448:	11802436 	bltu	r2,r6,894dc <_realloc_r+0x1e8>
   8944c:	1c46b03a 	or	r3,r3,r17
   89450:	98c00115 	stw	r3,4(r19)
   89454:	9c63883a 	add	r17,r19,r17
   89458:	88800117 	ldw	r2,4(r17)
   8945c:	10800054 	ori	r2,r2,1
   89460:	88800115 	stw	r2,4(r17)
   89464:	a809883a 	mov	r4,r21
   89468:	008e7300 	call	8e730 <__malloc_unlock>
   8946c:	a005883a 	mov	r2,r20
   89470:	dfc00917 	ldw	ra,36(sp)
   89474:	df000817 	ldw	fp,32(sp)
   89478:	ddc00717 	ldw	r23,28(sp)
   8947c:	dd800617 	ldw	r22,24(sp)
   89480:	dd400517 	ldw	r21,20(sp)
   89484:	dd000417 	ldw	r20,16(sp)
   89488:	dcc00317 	ldw	r19,12(sp)
   8948c:	dc800217 	ldw	r18,8(sp)
   89490:	dc400117 	ldw	r17,4(sp)
   89494:	dc000017 	ldw	r16,0(sp)
   89498:	dec00a04 	addi	sp,sp,40
   8949c:	f800283a 	ret
   894a0:	01ffff04 	movi	r7,-4
   894a4:	31cc703a 	and	r6,r6,r7
   894a8:	344f883a 	add	r7,r6,r17
   894ac:	38bfbc16 	blt	r7,r2,893a0 <_gp+0xfffeefac>
   894b0:	28800317 	ldw	r2,12(r5)
   894b4:	29000217 	ldw	r4,8(r5)
   894b8:	8029883a 	mov	r20,r16
   894bc:	3823883a 	mov	r17,r7
   894c0:	20800315 	stw	r2,12(r4)
   894c4:	11000215 	stw	r4,8(r2)
   894c8:	003fdc06 	br	8943c <_gp+0xfffef048>
   894cc:	00800304 	movi	r2,12
   894d0:	a8800015 	stw	r2,0(r21)
   894d4:	0005883a 	mov	r2,zero
   894d8:	003fe506 	br	89470 <_gp+0xfffef07c>
   894dc:	1c86b03a 	or	r3,r3,r18
   894e0:	9c8b883a 	add	r5,r19,r18
   894e4:	98c00115 	stw	r3,4(r19)
   894e8:	30800054 	ori	r2,r6,1
   894ec:	28800115 	stw	r2,4(r5)
   894f0:	298d883a 	add	r6,r5,r6
   894f4:	30800117 	ldw	r2,4(r6)
   894f8:	a809883a 	mov	r4,r21
   894fc:	29400204 	addi	r5,r5,8
   89500:	10800054 	ori	r2,r2,1
   89504:	30800115 	stw	r2,4(r6)
   89508:	0086b000 	call	86b00 <_free_r>
   8950c:	003fd506 	br	89464 <_gp+0xfffef070>
   89510:	1c6f883a 	add	r23,r3,r17
   89514:	b880370e 	bge	r23,r2,895f4 <_realloc_r+0x300>
   89518:	a00b883a 	mov	r5,r20
   8951c:	a809883a 	mov	r4,r21
   89520:	00876640 	call	87664 <_malloc_r>
   89524:	1029883a 	mov	r20,r2
   89528:	1000c026 	beq	r2,zero,8982c <_realloc_r+0x538>
   8952c:	80ffff17 	ldw	r3,-4(r16)
   89530:	113ffe04 	addi	r4,r2,-8
   89534:	00bfff84 	movi	r2,-2
   89538:	1884703a 	and	r2,r3,r2
   8953c:	9885883a 	add	r2,r19,r2
   89540:	20809026 	beq	r4,r2,89784 <_realloc_r+0x490>
   89544:	89bfff04 	addi	r6,r17,-4
   89548:	00800904 	movi	r2,36
   8954c:	11805936 	bltu	r2,r6,896b4 <_realloc_r+0x3c0>
   89550:	00c004c4 	movi	r3,19
   89554:	19803636 	bltu	r3,r6,89630 <_realloc_r+0x33c>
   89558:	a005883a 	mov	r2,r20
   8955c:	8007883a 	mov	r3,r16
   89560:	19000017 	ldw	r4,0(r3)
   89564:	11000015 	stw	r4,0(r2)
   89568:	19000117 	ldw	r4,4(r3)
   8956c:	11000115 	stw	r4,4(r2)
   89570:	18c00217 	ldw	r3,8(r3)
   89574:	10c00215 	stw	r3,8(r2)
   89578:	800b883a 	mov	r5,r16
   8957c:	a809883a 	mov	r4,r21
   89580:	0086b000 	call	86b00 <_free_r>
   89584:	a809883a 	mov	r4,r21
   89588:	008e7300 	call	8e730 <__malloc_unlock>
   8958c:	a005883a 	mov	r2,r20
   89590:	003fb706 	br	89470 <_gp+0xfffef07c>
   89594:	300b883a 	mov	r5,r6
   89598:	dfc00917 	ldw	ra,36(sp)
   8959c:	df000817 	ldw	fp,32(sp)
   895a0:	ddc00717 	ldw	r23,28(sp)
   895a4:	dd800617 	ldw	r22,24(sp)
   895a8:	dd400517 	ldw	r21,20(sp)
   895ac:	dd000417 	ldw	r20,16(sp)
   895b0:	dcc00317 	ldw	r19,12(sp)
   895b4:	dc800217 	ldw	r18,8(sp)
   895b8:	dc400117 	ldw	r17,4(sp)
   895bc:	dc000017 	ldw	r16,0(sp)
   895c0:	dec00a04 	addi	sp,sp,40
   895c4:	00876641 	jmpi	87664 <_malloc_r>
   895c8:	182f883a 	mov	r23,r3
   895cc:	b8bfd216 	blt	r23,r2,89518 <_gp+0xfffef124>
   895d0:	00000806 	br	895f4 <_realloc_r+0x300>
   895d4:	21800117 	ldw	r6,4(r4)
   895d8:	017fff04 	movi	r5,-4
   895dc:	91c00404 	addi	r7,r18,16
   895e0:	314c703a 	and	r6,r6,r5
   895e4:	344b883a 	add	r5,r6,r17
   895e8:	29c0250e 	bge	r5,r7,89680 <_realloc_r+0x38c>
   895ec:	200b883a 	mov	r5,r4
   895f0:	003f6b06 	br	893a0 <_gp+0xfffeefac>
   895f4:	b0800317 	ldw	r2,12(r22)
   895f8:	b0c00217 	ldw	r3,8(r22)
   895fc:	89bfff04 	addi	r6,r17,-4
   89600:	01000904 	movi	r4,36
   89604:	18800315 	stw	r2,12(r3)
   89608:	10c00215 	stw	r3,8(r2)
   8960c:	b5000204 	addi	r20,r22,8
   89610:	21bf7b2e 	bgeu	r4,r6,89400 <_gp+0xfffef00c>
   89614:	a009883a 	mov	r4,r20
   89618:	800b883a 	mov	r5,r16
   8961c:	0087f100 	call	87f10 <memmove>
   89620:	b0c00117 	ldw	r3,4(r22)
   89624:	b823883a 	mov	r17,r23
   89628:	b027883a 	mov	r19,r22
   8962c:	003f8306 	br	8943c <_gp+0xfffef048>
   89630:	80c00017 	ldw	r3,0(r16)
   89634:	a0c00015 	stw	r3,0(r20)
   89638:	80c00117 	ldw	r3,4(r16)
   8963c:	a0c00115 	stw	r3,4(r20)
   89640:	00c006c4 	movi	r3,27
   89644:	19804736 	bltu	r3,r6,89764 <_realloc_r+0x470>
   89648:	a0800204 	addi	r2,r20,8
   8964c:	80c00204 	addi	r3,r16,8
   89650:	003fc306 	br	89560 <_gp+0xfffef16c>
   89654:	a007883a 	mov	r3,r20
   89658:	80800017 	ldw	r2,0(r16)
   8965c:	b823883a 	mov	r17,r23
   89660:	b027883a 	mov	r19,r22
   89664:	18800015 	stw	r2,0(r3)
   89668:	80800117 	ldw	r2,4(r16)
   8966c:	18800115 	stw	r2,4(r3)
   89670:	80800217 	ldw	r2,8(r16)
   89674:	18800215 	stw	r2,8(r3)
   89678:	b0c00117 	ldw	r3,4(r22)
   8967c:	003f6f06 	br	8943c <_gp+0xfffef048>
   89680:	9ca7883a 	add	r19,r19,r18
   89684:	2c85c83a 	sub	r2,r5,r18
   89688:	bcc00215 	stw	r19,8(r23)
   8968c:	10800054 	ori	r2,r2,1
   89690:	98800115 	stw	r2,4(r19)
   89694:	80bfff17 	ldw	r2,-4(r16)
   89698:	a809883a 	mov	r4,r21
   8969c:	1080004c 	andi	r2,r2,1
   896a0:	90a4b03a 	or	r18,r18,r2
   896a4:	84bfff15 	stw	r18,-4(r16)
   896a8:	008e7300 	call	8e730 <__malloc_unlock>
   896ac:	8005883a 	mov	r2,r16
   896b0:	003f6f06 	br	89470 <_gp+0xfffef07c>
   896b4:	a009883a 	mov	r4,r20
   896b8:	800b883a 	mov	r5,r16
   896bc:	0087f100 	call	87f10 <memmove>
   896c0:	003fad06 	br	89578 <_gp+0xfffef184>
   896c4:	30f9883a 	add	fp,r6,r3
   896c8:	91000404 	addi	r4,r18,16
   896cc:	e13fbe16 	blt	fp,r4,895c8 <_gp+0xfffef1d4>
   896d0:	b0800317 	ldw	r2,12(r22)
   896d4:	b0c00217 	ldw	r3,8(r22)
   896d8:	89bfff04 	addi	r6,r17,-4
   896dc:	01000904 	movi	r4,36
   896e0:	18800315 	stw	r2,12(r3)
   896e4:	10c00215 	stw	r3,8(r2)
   896e8:	b4400204 	addi	r17,r22,8
   896ec:	21804336 	bltu	r4,r6,897fc <_realloc_r+0x508>
   896f0:	008004c4 	movi	r2,19
   896f4:	11803f2e 	bgeu	r2,r6,897f4 <_realloc_r+0x500>
   896f8:	80800017 	ldw	r2,0(r16)
   896fc:	b0800215 	stw	r2,8(r22)
   89700:	80800117 	ldw	r2,4(r16)
   89704:	b0800315 	stw	r2,12(r22)
   89708:	008006c4 	movi	r2,27
   8970c:	11803f36 	bltu	r2,r6,8980c <_realloc_r+0x518>
   89710:	b0c00404 	addi	r3,r22,16
   89714:	84000204 	addi	r16,r16,8
   89718:	80800017 	ldw	r2,0(r16)
   8971c:	18800015 	stw	r2,0(r3)
   89720:	80800117 	ldw	r2,4(r16)
   89724:	18800115 	stw	r2,4(r3)
   89728:	80800217 	ldw	r2,8(r16)
   8972c:	18800215 	stw	r2,8(r3)
   89730:	b487883a 	add	r3,r22,r18
   89734:	e485c83a 	sub	r2,fp,r18
   89738:	b8c00215 	stw	r3,8(r23)
   8973c:	10800054 	ori	r2,r2,1
   89740:	18800115 	stw	r2,4(r3)
   89744:	b0800117 	ldw	r2,4(r22)
   89748:	a809883a 	mov	r4,r21
   8974c:	1080004c 	andi	r2,r2,1
   89750:	90a4b03a 	or	r18,r18,r2
   89754:	b4800115 	stw	r18,4(r22)
   89758:	008e7300 	call	8e730 <__malloc_unlock>
   8975c:	8805883a 	mov	r2,r17
   89760:	003f4306 	br	89470 <_gp+0xfffef07c>
   89764:	80c00217 	ldw	r3,8(r16)
   89768:	a0c00215 	stw	r3,8(r20)
   8976c:	80c00317 	ldw	r3,12(r16)
   89770:	a0c00315 	stw	r3,12(r20)
   89774:	30801126 	beq	r6,r2,897bc <_realloc_r+0x4c8>
   89778:	a0800404 	addi	r2,r20,16
   8977c:	80c00404 	addi	r3,r16,16
   89780:	003f7706 	br	89560 <_gp+0xfffef16c>
   89784:	a13fff17 	ldw	r4,-4(r20)
   89788:	00bfff04 	movi	r2,-4
   8978c:	8029883a 	mov	r20,r16
   89790:	2084703a 	and	r2,r4,r2
   89794:	88a3883a 	add	r17,r17,r2
   89798:	003f2806 	br	8943c <_gp+0xfffef048>
   8979c:	80800217 	ldw	r2,8(r16)
   897a0:	b0800415 	stw	r2,16(r22)
   897a4:	80800317 	ldw	r2,12(r16)
   897a8:	b0800515 	stw	r2,20(r22)
   897ac:	31000a26 	beq	r6,r4,897d8 <_realloc_r+0x4e4>
   897b0:	b0c00604 	addi	r3,r22,24
   897b4:	84000404 	addi	r16,r16,16
   897b8:	003fa706 	br	89658 <_gp+0xfffef264>
   897bc:	81000417 	ldw	r4,16(r16)
   897c0:	a0800604 	addi	r2,r20,24
   897c4:	80c00604 	addi	r3,r16,24
   897c8:	a1000415 	stw	r4,16(r20)
   897cc:	81000517 	ldw	r4,20(r16)
   897d0:	a1000515 	stw	r4,20(r20)
   897d4:	003f6206 	br	89560 <_gp+0xfffef16c>
   897d8:	80800417 	ldw	r2,16(r16)
   897dc:	84000604 	addi	r16,r16,24
   897e0:	b0c00804 	addi	r3,r22,32
   897e4:	b0800615 	stw	r2,24(r22)
   897e8:	80bfff17 	ldw	r2,-4(r16)
   897ec:	b0800715 	stw	r2,28(r22)
   897f0:	003f9906 	br	89658 <_gp+0xfffef264>
   897f4:	8807883a 	mov	r3,r17
   897f8:	003fc706 	br	89718 <_gp+0xfffef324>
   897fc:	8809883a 	mov	r4,r17
   89800:	800b883a 	mov	r5,r16
   89804:	0087f100 	call	87f10 <memmove>
   89808:	003fc906 	br	89730 <_gp+0xfffef33c>
   8980c:	80800217 	ldw	r2,8(r16)
   89810:	b0800415 	stw	r2,16(r22)
   89814:	80800317 	ldw	r2,12(r16)
   89818:	b0800515 	stw	r2,20(r22)
   8981c:	31000726 	beq	r6,r4,8983c <_realloc_r+0x548>
   89820:	b0c00604 	addi	r3,r22,24
   89824:	84000404 	addi	r16,r16,16
   89828:	003fbb06 	br	89718 <_gp+0xfffef324>
   8982c:	a809883a 	mov	r4,r21
   89830:	008e7300 	call	8e730 <__malloc_unlock>
   89834:	0005883a 	mov	r2,zero
   89838:	003f0d06 	br	89470 <_gp+0xfffef07c>
   8983c:	80800417 	ldw	r2,16(r16)
   89840:	84000604 	addi	r16,r16,24
   89844:	b0c00804 	addi	r3,r22,32
   89848:	b0800615 	stw	r2,24(r22)
   8984c:	80bfff17 	ldw	r2,-4(r16)
   89850:	b0800715 	stw	r2,28(r22)
   89854:	003fb006 	br	89718 <_gp+0xfffef324>

00089858 <__fpclassifyd>:
   89858:	00a00034 	movhi	r2,32768
   8985c:	10bfffc4 	addi	r2,r2,-1
   89860:	288a703a 	and	r5,r5,r2
   89864:	28000726 	beq	r5,zero,89884 <__fpclassifyd+0x2c>
   89868:	00bffc34 	movhi	r2,65520
   8986c:	2885883a 	add	r2,r5,r2
   89870:	00dff834 	movhi	r3,32736
   89874:	18ffffc4 	addi	r3,r3,-1
   89878:	18800636 	bltu	r3,r2,89894 <__fpclassifyd+0x3c>
   8987c:	00800104 	movi	r2,4
   89880:	f800283a 	ret
   89884:	2005003a 	cmpeq	r2,r4,zero
   89888:	00c000c4 	movi	r3,3
   8988c:	1885c83a 	sub	r2,r3,r2
   89890:	f800283a 	ret
   89894:	00800434 	movhi	r2,16
   89898:	10bfffc4 	addi	r2,r2,-1
   8989c:	11400236 	bltu	r2,r5,898a8 <__fpclassifyd+0x50>
   898a0:	008000c4 	movi	r2,3
   898a4:	f800283a 	ret
   898a8:	009ffc34 	movhi	r2,32752
   898ac:	28800226 	beq	r5,r2,898b8 <__fpclassifyd+0x60>
   898b0:	0005883a 	mov	r2,zero
   898b4:	f800283a 	ret
   898b8:	2005003a 	cmpeq	r2,r4,zero
   898bc:	f800283a 	ret

000898c0 <_sbrk_r>:
   898c0:	defffd04 	addi	sp,sp,-12
   898c4:	dc400115 	stw	r17,4(sp)
   898c8:	dc000015 	stw	r16,0(sp)
   898cc:	2023883a 	mov	r17,r4
   898d0:	04000274 	movhi	r16,9
   898d4:	840fd004 	addi	r16,r16,16192
   898d8:	2809883a 	mov	r4,r5
   898dc:	dfc00215 	stw	ra,8(sp)
   898e0:	80000015 	stw	zero,0(r16)
   898e4:	008e88c0 	call	8e88c <sbrk>
   898e8:	00ffffc4 	movi	r3,-1
   898ec:	10c00526 	beq	r2,r3,89904 <_sbrk_r+0x44>
   898f0:	dfc00217 	ldw	ra,8(sp)
   898f4:	dc400117 	ldw	r17,4(sp)
   898f8:	dc000017 	ldw	r16,0(sp)
   898fc:	dec00304 	addi	sp,sp,12
   89900:	f800283a 	ret
   89904:	80c00017 	ldw	r3,0(r16)
   89908:	183ff926 	beq	r3,zero,898f0 <_gp+0xfffef4fc>
   8990c:	88c00015 	stw	r3,0(r17)
   89910:	dfc00217 	ldw	ra,8(sp)
   89914:	dc400117 	ldw	r17,4(sp)
   89918:	dc000017 	ldw	r16,0(sp)
   8991c:	dec00304 	addi	sp,sp,12
   89920:	f800283a 	ret

00089924 <__sread>:
   89924:	defffe04 	addi	sp,sp,-8
   89928:	dc000015 	stw	r16,0(sp)
   8992c:	2821883a 	mov	r16,r5
   89930:	2940038f 	ldh	r5,14(r5)
   89934:	dfc00115 	stw	ra,4(sp)
   89938:	008b8380 	call	8b838 <_read_r>
   8993c:	10000716 	blt	r2,zero,8995c <__sread+0x38>
   89940:	80c01417 	ldw	r3,80(r16)
   89944:	1887883a 	add	r3,r3,r2
   89948:	80c01415 	stw	r3,80(r16)
   8994c:	dfc00117 	ldw	ra,4(sp)
   89950:	dc000017 	ldw	r16,0(sp)
   89954:	dec00204 	addi	sp,sp,8
   89958:	f800283a 	ret
   8995c:	80c0030b 	ldhu	r3,12(r16)
   89960:	18fbffcc 	andi	r3,r3,61439
   89964:	80c0030d 	sth	r3,12(r16)
   89968:	dfc00117 	ldw	ra,4(sp)
   8996c:	dc000017 	ldw	r16,0(sp)
   89970:	dec00204 	addi	sp,sp,8
   89974:	f800283a 	ret

00089978 <__seofread>:
   89978:	0005883a 	mov	r2,zero
   8997c:	f800283a 	ret

00089980 <__swrite>:
   89980:	2880030b 	ldhu	r2,12(r5)
   89984:	defffb04 	addi	sp,sp,-20
   89988:	dcc00315 	stw	r19,12(sp)
   8998c:	dc800215 	stw	r18,8(sp)
   89990:	dc400115 	stw	r17,4(sp)
   89994:	dc000015 	stw	r16,0(sp)
   89998:	dfc00415 	stw	ra,16(sp)
   8999c:	10c0400c 	andi	r3,r2,256
   899a0:	2821883a 	mov	r16,r5
   899a4:	2027883a 	mov	r19,r4
   899a8:	3025883a 	mov	r18,r6
   899ac:	3823883a 	mov	r17,r7
   899b0:	18000526 	beq	r3,zero,899c8 <__swrite+0x48>
   899b4:	2940038f 	ldh	r5,14(r5)
   899b8:	000d883a 	mov	r6,zero
   899bc:	01c00084 	movi	r7,2
   899c0:	008b7cc0 	call	8b7cc <_lseek_r>
   899c4:	8080030b 	ldhu	r2,12(r16)
   899c8:	8140038f 	ldh	r5,14(r16)
   899cc:	10bbffcc 	andi	r2,r2,61439
   899d0:	9809883a 	mov	r4,r19
   899d4:	900d883a 	mov	r6,r18
   899d8:	880f883a 	mov	r7,r17
   899dc:	8080030d 	sth	r2,12(r16)
   899e0:	dfc00417 	ldw	ra,16(sp)
   899e4:	dcc00317 	ldw	r19,12(sp)
   899e8:	dc800217 	ldw	r18,8(sp)
   899ec:	dc400117 	ldw	r17,4(sp)
   899f0:	dc000017 	ldw	r16,0(sp)
   899f4:	dec00504 	addi	sp,sp,20
   899f8:	008b2201 	jmpi	8b220 <_write_r>

000899fc <__sseek>:
   899fc:	defffe04 	addi	sp,sp,-8
   89a00:	dc000015 	stw	r16,0(sp)
   89a04:	2821883a 	mov	r16,r5
   89a08:	2940038f 	ldh	r5,14(r5)
   89a0c:	dfc00115 	stw	ra,4(sp)
   89a10:	008b7cc0 	call	8b7cc <_lseek_r>
   89a14:	00ffffc4 	movi	r3,-1
   89a18:	10c00826 	beq	r2,r3,89a3c <__sseek+0x40>
   89a1c:	80c0030b 	ldhu	r3,12(r16)
   89a20:	80801415 	stw	r2,80(r16)
   89a24:	18c40014 	ori	r3,r3,4096
   89a28:	80c0030d 	sth	r3,12(r16)
   89a2c:	dfc00117 	ldw	ra,4(sp)
   89a30:	dc000017 	ldw	r16,0(sp)
   89a34:	dec00204 	addi	sp,sp,8
   89a38:	f800283a 	ret
   89a3c:	80c0030b 	ldhu	r3,12(r16)
   89a40:	18fbffcc 	andi	r3,r3,61439
   89a44:	80c0030d 	sth	r3,12(r16)
   89a48:	dfc00117 	ldw	ra,4(sp)
   89a4c:	dc000017 	ldw	r16,0(sp)
   89a50:	dec00204 	addi	sp,sp,8
   89a54:	f800283a 	ret

00089a58 <__sclose>:
   89a58:	2940038f 	ldh	r5,14(r5)
   89a5c:	008b28c1 	jmpi	8b28c <_close_r>

00089a60 <strcmp>:
   89a60:	2144b03a 	or	r2,r4,r5
   89a64:	108000cc 	andi	r2,r2,3
   89a68:	1000171e 	bne	r2,zero,89ac8 <strcmp+0x68>
   89a6c:	20800017 	ldw	r2,0(r4)
   89a70:	28c00017 	ldw	r3,0(r5)
   89a74:	10c0141e 	bne	r2,r3,89ac8 <strcmp+0x68>
   89a78:	027fbff4 	movhi	r9,65279
   89a7c:	4a7fbfc4 	addi	r9,r9,-257
   89a80:	1247883a 	add	r3,r2,r9
   89a84:	0084303a 	nor	r2,zero,r2
   89a88:	1884703a 	and	r2,r3,r2
   89a8c:	02202074 	movhi	r8,32897
   89a90:	42202004 	addi	r8,r8,-32640
   89a94:	1204703a 	and	r2,r2,r8
   89a98:	10000226 	beq	r2,zero,89aa4 <strcmp+0x44>
   89a9c:	00001706 	br	89afc <strcmp+0x9c>
   89aa0:	3000161e 	bne	r6,zero,89afc <strcmp+0x9c>
   89aa4:	21000104 	addi	r4,r4,4
   89aa8:	20800017 	ldw	r2,0(r4)
   89aac:	29400104 	addi	r5,r5,4
   89ab0:	28c00017 	ldw	r3,0(r5)
   89ab4:	124f883a 	add	r7,r2,r9
   89ab8:	008c303a 	nor	r6,zero,r2
   89abc:	398c703a 	and	r6,r7,r6
   89ac0:	320c703a 	and	r6,r6,r8
   89ac4:	10fff626 	beq	r2,r3,89aa0 <_gp+0xfffef6ac>
   89ac8:	20800007 	ldb	r2,0(r4)
   89acc:	1000051e 	bne	r2,zero,89ae4 <strcmp+0x84>
   89ad0:	00000606 	br	89aec <strcmp+0x8c>
   89ad4:	21000044 	addi	r4,r4,1
   89ad8:	20800007 	ldb	r2,0(r4)
   89adc:	29400044 	addi	r5,r5,1
   89ae0:	10000226 	beq	r2,zero,89aec <strcmp+0x8c>
   89ae4:	28c00007 	ldb	r3,0(r5)
   89ae8:	10fffa26 	beq	r2,r3,89ad4 <_gp+0xfffef6e0>
   89aec:	20c00003 	ldbu	r3,0(r4)
   89af0:	28800003 	ldbu	r2,0(r5)
   89af4:	1885c83a 	sub	r2,r3,r2
   89af8:	f800283a 	ret
   89afc:	0005883a 	mov	r2,zero
   89b00:	f800283a 	ret

00089b04 <__sprint_r.part.0>:
   89b04:	28801917 	ldw	r2,100(r5)
   89b08:	defff604 	addi	sp,sp,-40
   89b0c:	dd800615 	stw	r22,24(sp)
   89b10:	dcc00315 	stw	r19,12(sp)
   89b14:	dfc00915 	stw	ra,36(sp)
   89b18:	df000815 	stw	fp,32(sp)
   89b1c:	ddc00715 	stw	r23,28(sp)
   89b20:	dd400515 	stw	r21,20(sp)
   89b24:	dd000415 	stw	r20,16(sp)
   89b28:	dc800215 	stw	r18,8(sp)
   89b2c:	dc400115 	stw	r17,4(sp)
   89b30:	dc000015 	stw	r16,0(sp)
   89b34:	1088000c 	andi	r2,r2,8192
   89b38:	2827883a 	mov	r19,r5
   89b3c:	302d883a 	mov	r22,r6
   89b40:	10002d26 	beq	r2,zero,89bf8 <__sprint_r.part.0+0xf4>
   89b44:	30800217 	ldw	r2,8(r6)
   89b48:	35c00017 	ldw	r23,0(r6)
   89b4c:	10002826 	beq	r2,zero,89bf0 <__sprint_r.part.0+0xec>
   89b50:	202b883a 	mov	r21,r4
   89b54:	bf000104 	addi	fp,r23,4
   89b58:	053fffc4 	movi	r20,-1
   89b5c:	e4800017 	ldw	r18,0(fp)
   89b60:	bc400017 	ldw	r17,0(r23)
   89b64:	0021883a 	mov	r16,zero
   89b68:	9024d0ba 	srli	r18,r18,2
   89b6c:	04800316 	blt	zero,r18,89b7c <__sprint_r.part.0+0x78>
   89b70:	00001806 	br	89bd4 <__sprint_r.part.0+0xd0>
   89b74:	8c400104 	addi	r17,r17,4
   89b78:	94001526 	beq	r18,r16,89bd0 <__sprint_r.part.0+0xcc>
   89b7c:	89400017 	ldw	r5,0(r17)
   89b80:	a809883a 	mov	r4,r21
   89b84:	980d883a 	mov	r6,r19
   89b88:	008b5040 	call	8b504 <_fputwc_r>
   89b8c:	84000044 	addi	r16,r16,1
   89b90:	153ff81e 	bne	r2,r20,89b74 <_gp+0xfffef780>
   89b94:	a005883a 	mov	r2,r20
   89b98:	b0000215 	stw	zero,8(r22)
   89b9c:	b0000115 	stw	zero,4(r22)
   89ba0:	dfc00917 	ldw	ra,36(sp)
   89ba4:	df000817 	ldw	fp,32(sp)
   89ba8:	ddc00717 	ldw	r23,28(sp)
   89bac:	dd800617 	ldw	r22,24(sp)
   89bb0:	dd400517 	ldw	r21,20(sp)
   89bb4:	dd000417 	ldw	r20,16(sp)
   89bb8:	dcc00317 	ldw	r19,12(sp)
   89bbc:	dc800217 	ldw	r18,8(sp)
   89bc0:	dc400117 	ldw	r17,4(sp)
   89bc4:	dc000017 	ldw	r16,0(sp)
   89bc8:	dec00a04 	addi	sp,sp,40
   89bcc:	f800283a 	ret
   89bd0:	b0800217 	ldw	r2,8(r22)
   89bd4:	94a5883a 	add	r18,r18,r18
   89bd8:	94a5883a 	add	r18,r18,r18
   89bdc:	1485c83a 	sub	r2,r2,r18
   89be0:	b0800215 	stw	r2,8(r22)
   89be4:	bdc00204 	addi	r23,r23,8
   89be8:	e7000204 	addi	fp,fp,8
   89bec:	103fdb1e 	bne	r2,zero,89b5c <_gp+0xfffef768>
   89bf0:	0005883a 	mov	r2,zero
   89bf4:	003fe806 	br	89b98 <_gp+0xfffef7a4>
   89bf8:	0086dd00 	call	86dd0 <__sfvwrite_r>
   89bfc:	003fe606 	br	89b98 <_gp+0xfffef7a4>

00089c00 <__sprint_r>:
   89c00:	30c00217 	ldw	r3,8(r6)
   89c04:	18000126 	beq	r3,zero,89c0c <__sprint_r+0xc>
   89c08:	0089b041 	jmpi	89b04 <__sprint_r.part.0>
   89c0c:	30000115 	stw	zero,4(r6)
   89c10:	0005883a 	mov	r2,zero
   89c14:	f800283a 	ret

00089c18 <___vfiprintf_internal_r>:
   89c18:	defec804 	addi	sp,sp,-1248
   89c1c:	dfc13715 	stw	ra,1244(sp)
   89c20:	df013615 	stw	fp,1240(sp)
   89c24:	ddc13515 	stw	r23,1236(sp)
   89c28:	dd813415 	stw	r22,1232(sp)
   89c2c:	dd413315 	stw	r21,1228(sp)
   89c30:	dd013215 	stw	r20,1224(sp)
   89c34:	dcc13115 	stw	r19,1220(sp)
   89c38:	dc813015 	stw	r18,1216(sp)
   89c3c:	dc412f15 	stw	r17,1212(sp)
   89c40:	dc012e15 	stw	r16,1208(sp)
   89c44:	d9012215 	stw	r4,1160(sp)
   89c48:	d9412015 	stw	r5,1152(sp)
   89c4c:	d9c12315 	stw	r7,1164(sp)
   89c50:	3013883a 	mov	r9,r6
   89c54:	20000226 	beq	r4,zero,89c60 <___vfiprintf_internal_r+0x48>
   89c58:	20800e17 	ldw	r2,56(r4)
   89c5c:	1000f926 	beq	r2,zero,8a044 <___vfiprintf_internal_r+0x42c>
   89c60:	d8c12017 	ldw	r3,1152(sp)
   89c64:	1880030b 	ldhu	r2,12(r3)
   89c68:	1108000c 	andi	r4,r2,8192
   89c6c:	1007883a 	mov	r3,r2
   89c70:	2000081e 	bne	r4,zero,89c94 <___vfiprintf_internal_r+0x7c>
   89c74:	d9412017 	ldw	r5,1152(sp)
   89c78:	10c80014 	ori	r3,r2,8192
   89c7c:	00b7ffc4 	movi	r2,-8193
   89c80:	29001917 	ldw	r4,100(r5)
   89c84:	28c0030d 	sth	r3,12(r5)
   89c88:	2088703a 	and	r4,r4,r2
   89c8c:	29001915 	stw	r4,100(r5)
   89c90:	1805883a 	mov	r2,r3
   89c94:	1900020c 	andi	r4,r3,8
   89c98:	2000a726 	beq	r4,zero,89f38 <___vfiprintf_internal_r+0x320>
   89c9c:	d9412017 	ldw	r5,1152(sp)
   89ca0:	29000417 	ldw	r4,16(r5)
   89ca4:	2000a426 	beq	r4,zero,89f38 <___vfiprintf_internal_r+0x320>
   89ca8:	18c0068c 	andi	r3,r3,26
   89cac:	01000284 	movi	r4,10
   89cb0:	1900ad26 	beq	r3,r4,89f68 <___vfiprintf_internal_r+0x350>
   89cb4:	d90109c4 	addi	r4,sp,1063
   89cb8:	d9410a04 	addi	r5,sp,1064
   89cbc:	2905c83a 	sub	r2,r5,r4
   89cc0:	d9011e15 	stw	r4,1144(sp)
   89cc4:	d9411f15 	stw	r5,1148(sp)
   89cc8:	dec11a15 	stw	sp,1128(sp)
   89ccc:	d8011c15 	stw	zero,1136(sp)
   89cd0:	d8011b15 	stw	zero,1132(sp)
   89cd4:	d8012715 	stw	zero,1180(sp)
   89cd8:	d8012415 	stw	zero,1168(sp)
   89cdc:	d811883a 	mov	r8,sp
   89ce0:	04c00274 	movhi	r19,9
   89ce4:	9cc24604 	addi	r19,r19,2328
   89ce8:	04000274 	movhi	r16,9
   89cec:	84024204 	addi	r16,r16,2312
   89cf0:	d8812815 	stw	r2,1184(sp)
   89cf4:	48800007 	ldb	r2,0(r9)
   89cf8:	10040126 	beq	r2,zero,8ad00 <___vfiprintf_internal_r+0x10e8>
   89cfc:	00c00944 	movi	r3,37
   89d00:	4829883a 	mov	r20,r9
   89d04:	10c0021e 	bne	r2,r3,89d10 <___vfiprintf_internal_r+0xf8>
   89d08:	00001606 	br	89d64 <___vfiprintf_internal_r+0x14c>
   89d0c:	10c00326 	beq	r2,r3,89d1c <___vfiprintf_internal_r+0x104>
   89d10:	a5000044 	addi	r20,r20,1
   89d14:	a0800007 	ldb	r2,0(r20)
   89d18:	103ffc1e 	bne	r2,zero,89d0c <_gp+0xfffef918>
   89d1c:	a263c83a 	sub	r17,r20,r9
   89d20:	88001026 	beq	r17,zero,89d64 <___vfiprintf_internal_r+0x14c>
   89d24:	d8c11c17 	ldw	r3,1136(sp)
   89d28:	d8811b17 	ldw	r2,1132(sp)
   89d2c:	42400015 	stw	r9,0(r8)
   89d30:	88c7883a 	add	r3,r17,r3
   89d34:	10800044 	addi	r2,r2,1
   89d38:	44400115 	stw	r17,4(r8)
   89d3c:	d8c11c15 	stw	r3,1136(sp)
   89d40:	d8811b15 	stw	r2,1132(sp)
   89d44:	010001c4 	movi	r4,7
   89d48:	2080760e 	bge	r4,r2,89f24 <___vfiprintf_internal_r+0x30c>
   89d4c:	1803b41e 	bne	r3,zero,8ac20 <___vfiprintf_internal_r+0x1008>
   89d50:	d8c12417 	ldw	r3,1168(sp)
   89d54:	d8011b15 	stw	zero,1132(sp)
   89d58:	d811883a 	mov	r8,sp
   89d5c:	1c47883a 	add	r3,r3,r17
   89d60:	d8c12415 	stw	r3,1168(sp)
   89d64:	a0800007 	ldb	r2,0(r20)
   89d68:	1002dc26 	beq	r2,zero,8a8dc <___vfiprintf_internal_r+0xcc4>
   89d6c:	04bfffc4 	movi	r18,-1
   89d70:	a2400044 	addi	r9,r20,1
   89d74:	a0c00047 	ldb	r3,1(r20)
   89d78:	d8011d85 	stb	zero,1142(sp)
   89d7c:	002d883a 	mov	r22,zero
   89d80:	d8012115 	stw	zero,1156(sp)
   89d84:	0023883a 	mov	r17,zero
   89d88:	05001604 	movi	r20,88
   89d8c:	05400244 	movi	r21,9
   89d90:	402f883a 	mov	r23,r8
   89d94:	900d883a 	mov	r6,r18
   89d98:	4a400044 	addi	r9,r9,1
   89d9c:	18bff804 	addi	r2,r3,-32
   89da0:	a0828736 	bltu	r20,r2,8a7c0 <___vfiprintf_internal_r+0xba8>
   89da4:	1085883a 	add	r2,r2,r2
   89da8:	1085883a 	add	r2,r2,r2
   89dac:	01000274 	movhi	r4,9
   89db0:	21277004 	addi	r4,r4,-25152
   89db4:	1105883a 	add	r2,r2,r4
   89db8:	10800017 	ldw	r2,0(r2)
   89dbc:	1000683a 	jmp	r2
   89dc0:	0008a520 	cmpeqi	zero,zero,8852
   89dc4:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89dc8:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89dcc:	0008a53c 	xorhi	zero,zero,8852
   89dd0:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89dd4:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89dd8:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89ddc:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89de0:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89de4:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89de8:	0008a5d0 	cmplti	zero,zero,8855
   89dec:	0008a5f8 	rdprs	zero,zero,8855
   89df0:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89df4:	0008a064 	muli	zero,zero,8833
   89df8:	0008a604 	movi	zero,8856
   89dfc:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89e00:	0008a070 	cmpltui	zero,zero,8833
   89e04:	0008a07c 	xorhi	zero,zero,8833
   89e08:	0008a07c 	xorhi	zero,zero,8833
   89e0c:	0008a07c 	xorhi	zero,zero,8833
   89e10:	0008a07c 	xorhi	zero,zero,8833
   89e14:	0008a07c 	xorhi	zero,zero,8833
   89e18:	0008a07c 	xorhi	zero,zero,8833
   89e1c:	0008a07c 	xorhi	zero,zero,8833
   89e20:	0008a07c 	xorhi	zero,zero,8833
   89e24:	0008a07c 	xorhi	zero,zero,8833
   89e28:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89e2c:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89e30:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89e34:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89e38:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89e3c:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89e40:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89e44:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89e48:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89e4c:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89e50:	0008a0c4 	movi	zero,8835
   89e54:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89e58:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89e5c:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89e60:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89e64:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89e68:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89e6c:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89e70:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89e74:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89e78:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89e7c:	0008a418 	cmpnei	zero,zero,8848
   89e80:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89e84:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89e88:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89e8c:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89e90:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89e94:	0008a45c 	xori	zero,zero,8849
   89e98:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89e9c:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89ea0:	0008a494 	movui	zero,8850
   89ea4:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89ea8:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89eac:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89eb0:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89eb4:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89eb8:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89ebc:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89ec0:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89ec4:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89ec8:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89ecc:	0008a4f0 	cmpltui	zero,zero,8851
   89ed0:	0008a664 	muli	zero,zero,8857
   89ed4:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89ed8:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89edc:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89ee0:	0008a658 	cmpnei	zero,zero,8857
   89ee4:	0008a664 	muli	zero,zero,8857
   89ee8:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89eec:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89ef0:	0008a548 	cmpgei	zero,zero,8853
   89ef4:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89ef8:	0008a560 	cmpeqi	zero,zero,8853
   89efc:	0008a598 	cmpnei	zero,zero,8854
   89f00:	0008a778 	rdprs	zero,zero,8861
   89f04:	0008a69c 	xori	zero,zero,8858
   89f08:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89f0c:	0008a6a8 	cmpgeui	zero,zero,8858
   89f10:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89f14:	0008a700 	call	8a70 <decrypted_A+0x270>
   89f18:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89f1c:	0008a7c0 	call	8a7c <decrypted_A+0x27c>
   89f20:	0008a738 	rdprs	zero,zero,8860
   89f24:	42000204 	addi	r8,r8,8
   89f28:	d8c12417 	ldw	r3,1168(sp)
   89f2c:	1c47883a 	add	r3,r3,r17
   89f30:	d8c12415 	stw	r3,1168(sp)
   89f34:	003f8b06 	br	89d64 <_gp+0xfffef970>
   89f38:	d9012217 	ldw	r4,1160(sp)
   89f3c:	d9412017 	ldw	r5,1152(sp)
   89f40:	da412d15 	stw	r9,1204(sp)
   89f44:	0084a100 	call	84a10 <__swsetup_r>
   89f48:	da412d17 	ldw	r9,1204(sp)
   89f4c:	1000301e 	bne	r2,zero,8a010 <___vfiprintf_internal_r+0x3f8>
   89f50:	d8c12017 	ldw	r3,1152(sp)
   89f54:	01000284 	movi	r4,10
   89f58:	1880030b 	ldhu	r2,12(r3)
   89f5c:	1007883a 	mov	r3,r2
   89f60:	18c0068c 	andi	r3,r3,26
   89f64:	193f531e 	bne	r3,r4,89cb4 <_gp+0xfffef8c0>
   89f68:	d9012017 	ldw	r4,1152(sp)
   89f6c:	20c0038b 	ldhu	r3,14(r4)
   89f70:	193fffcc 	andi	r4,r3,65535
   89f74:	2120001c 	xori	r4,r4,32768
   89f78:	21200004 	addi	r4,r4,-32768
   89f7c:	203f4d16 	blt	r4,zero,89cb4 <_gp+0xfffef8c0>
   89f80:	d9412017 	ldw	r5,1152(sp)
   89f84:	d9012217 	ldw	r4,1160(sp)
   89f88:	d9c12317 	ldw	r7,1164(sp)
   89f8c:	2b001917 	ldw	r12,100(r5)
   89f90:	2ac00717 	ldw	r11,28(r5)
   89f94:	2a800917 	ldw	r10,36(r5)
   89f98:	02010004 	movi	r8,1024
   89f9c:	10bfff4c 	andi	r2,r2,65533
   89fa0:	da0b883a 	add	r5,sp,r8
   89fa4:	480d883a 	mov	r6,r9
   89fa8:	d881030d 	sth	r2,1036(sp)
   89fac:	db011915 	stw	r12,1124(sp)
   89fb0:	d8c1038d 	sth	r3,1038(sp)
   89fb4:	dac10715 	stw	r11,1052(sp)
   89fb8:	da810915 	stw	r10,1060(sp)
   89fbc:	dec10015 	stw	sp,1024(sp)
   89fc0:	dec10415 	stw	sp,1040(sp)
   89fc4:	da010215 	stw	r8,1032(sp)
   89fc8:	da010515 	stw	r8,1044(sp)
   89fcc:	d8010615 	stw	zero,1048(sp)
   89fd0:	0089c180 	call	89c18 <___vfiprintf_internal_r>
   89fd4:	1021883a 	mov	r16,r2
   89fd8:	10000416 	blt	r2,zero,89fec <___vfiprintf_internal_r+0x3d4>
   89fdc:	d9012217 	ldw	r4,1160(sp)
   89fe0:	d9410004 	addi	r5,sp,1024
   89fe4:	00863ac0 	call	863ac <_fflush_r>
   89fe8:	10040b1e 	bne	r2,zero,8b018 <___vfiprintf_internal_r+0x1400>
   89fec:	d881030b 	ldhu	r2,1036(sp)
   89ff0:	1080100c 	andi	r2,r2,64
   89ff4:	10000426 	beq	r2,zero,8a008 <___vfiprintf_internal_r+0x3f0>
   89ff8:	d8c12017 	ldw	r3,1152(sp)
   89ffc:	1880030b 	ldhu	r2,12(r3)
   8a000:	10801014 	ori	r2,r2,64
   8a004:	1880030d 	sth	r2,12(r3)
   8a008:	8005883a 	mov	r2,r16
   8a00c:	00000106 	br	8a014 <___vfiprintf_internal_r+0x3fc>
   8a010:	00bfffc4 	movi	r2,-1
   8a014:	dfc13717 	ldw	ra,1244(sp)
   8a018:	df013617 	ldw	fp,1240(sp)
   8a01c:	ddc13517 	ldw	r23,1236(sp)
   8a020:	dd813417 	ldw	r22,1232(sp)
   8a024:	dd413317 	ldw	r21,1228(sp)
   8a028:	dd013217 	ldw	r20,1224(sp)
   8a02c:	dcc13117 	ldw	r19,1220(sp)
   8a030:	dc813017 	ldw	r18,1216(sp)
   8a034:	dc412f17 	ldw	r17,1212(sp)
   8a038:	dc012e17 	ldw	r16,1208(sp)
   8a03c:	dec13804 	addi	sp,sp,1248
   8a040:	f800283a 	ret
   8a044:	d9812d15 	stw	r6,1204(sp)
   8a048:	00866cc0 	call	866cc <__sinit>
   8a04c:	da412d17 	ldw	r9,1204(sp)
   8a050:	003f0306 	br	89c60 <_gp+0xfffef86c>
   8a054:	d9412117 	ldw	r5,1156(sp)
   8a058:	d8812315 	stw	r2,1164(sp)
   8a05c:	014bc83a 	sub	r5,zero,r5
   8a060:	d9412115 	stw	r5,1156(sp)
   8a064:	8c400114 	ori	r17,r17,4
   8a068:	48c00007 	ldb	r3,0(r9)
   8a06c:	003f4a06 	br	89d98 <_gp+0xfffef9a4>
   8a070:	8c402014 	ori	r17,r17,128
   8a074:	48c00007 	ldb	r3,0(r9)
   8a078:	003f4706 	br	89d98 <_gp+0xfffef9a4>
   8a07c:	4825883a 	mov	r18,r9
   8a080:	d8012115 	stw	zero,1156(sp)
   8a084:	1f3ff404 	addi	fp,r3,-48
   8a088:	00000106 	br	8a090 <___vfiprintf_internal_r+0x478>
   8a08c:	1025883a 	mov	r18,r2
   8a090:	d9012117 	ldw	r4,1156(sp)
   8a094:	01400284 	movi	r5,10
   8a098:	d9812b15 	stw	r6,1196(sp)
   8a09c:	00825800 	call	82580 <__mulsi3>
   8a0a0:	90c00007 	ldb	r3,0(r18)
   8a0a4:	1739883a 	add	fp,r2,fp
   8a0a8:	df012115 	stw	fp,1156(sp)
   8a0ac:	90800044 	addi	r2,r18,1
   8a0b0:	1f3ff404 	addi	fp,r3,-48
   8a0b4:	1013883a 	mov	r9,r2
   8a0b8:	d9812b17 	ldw	r6,1196(sp)
   8a0bc:	af3ff32e 	bgeu	r21,fp,8a08c <_gp+0xfffefc98>
   8a0c0:	003f3606 	br	89d9c <_gp+0xfffef9a8>
   8a0c4:	8c400414 	ori	r17,r17,16
   8a0c8:	dd811d85 	stb	r22,1142(sp)
   8a0cc:	8880080c 	andi	r2,r17,32
   8a0d0:	b811883a 	mov	r8,r23
   8a0d4:	3025883a 	mov	r18,r6
   8a0d8:	10016726 	beq	r2,zero,8a678 <___vfiprintf_internal_r+0xa60>
   8a0dc:	d8c12317 	ldw	r3,1164(sp)
   8a0e0:	18800117 	ldw	r2,4(r3)
   8a0e4:	1d000017 	ldw	r20,0(r3)
   8a0e8:	18c00204 	addi	r3,r3,8
   8a0ec:	d8c12315 	stw	r3,1164(sp)
   8a0f0:	102b883a 	mov	r21,r2
   8a0f4:	10030416 	blt	r2,zero,8ad08 <___vfiprintf_internal_r+0x10f0>
   8a0f8:	dd811d83 	ldbu	r22,1142(sp)
   8a0fc:	900f883a 	mov	r7,r18
   8a100:	00800044 	movi	r2,1
   8a104:	a548b03a 	or	r4,r20,r21
   8a108:	90000216 	blt	r18,zero,8a114 <___vfiprintf_internal_r+0x4fc>
   8a10c:	00ffdfc4 	movi	r3,-129
   8a110:	88e2703a 	and	r17,r17,r3
   8a114:	10803fcc 	andi	r2,r2,255
   8a118:	2001db1e 	bne	r4,zero,8a888 <___vfiprintf_internal_r+0xc70>
   8a11c:	9001da1e 	bne	r18,zero,8a888 <___vfiprintf_internal_r+0xc70>
   8a120:	1002ab1e 	bne	r2,zero,8abd0 <___vfiprintf_internal_r+0xfb8>
   8a124:	8880004c 	andi	r2,r17,1
   8a128:	1002a926 	beq	r2,zero,8abd0 <___vfiprintf_internal_r+0xfb8>
   8a12c:	d9c12817 	ldw	r7,1184(sp)
   8a130:	00800c04 	movi	r2,48
   8a134:	d88109c5 	stb	r2,1063(sp)
   8a138:	ddc109c4 	addi	r23,sp,1063
   8a13c:	3829883a 	mov	r20,r7
   8a140:	3c80010e 	bge	r7,r18,8a148 <___vfiprintf_internal_r+0x530>
   8a144:	9029883a 	mov	r20,r18
   8a148:	b5803fcc 	andi	r22,r22,255
   8a14c:	b580201c 	xori	r22,r22,128
   8a150:	b5bfe004 	addi	r22,r22,-128
   8a154:	b0000126 	beq	r22,zero,8a15c <___vfiprintf_internal_r+0x544>
   8a158:	a5000044 	addi	r20,r20,1
   8a15c:	8a80008c 	andi	r10,r17,2
   8a160:	50000126 	beq	r10,zero,8a168 <___vfiprintf_internal_r+0x550>
   8a164:	a5000084 	addi	r20,r20,2
   8a168:	8d40210c 	andi	r21,r17,132
   8a16c:	a801aa1e 	bne	r21,zero,8a818 <___vfiprintf_internal_r+0xc00>
   8a170:	d8c12117 	ldw	r3,1156(sp)
   8a174:	1d2dc83a 	sub	r22,r3,r20
   8a178:	0581a70e 	bge	zero,r22,8a818 <___vfiprintf_internal_r+0xc00>
   8a17c:	07000404 	movi	fp,16
   8a180:	d8c11c17 	ldw	r3,1136(sp)
   8a184:	e583780e 	bge	fp,r22,8af68 <___vfiprintf_internal_r+0x1350>
   8a188:	01400274 	movhi	r5,9
   8a18c:	29424604 	addi	r5,r5,2328
   8a190:	dc412615 	stw	r17,1176(sp)
   8a194:	d9011b17 	ldw	r4,1132(sp)
   8a198:	b023883a 	mov	r17,r22
   8a19c:	d9412515 	stw	r5,1172(sp)
   8a1a0:	030001c4 	movi	r12,7
   8a1a4:	d9c12915 	stw	r7,1188(sp)
   8a1a8:	da812a15 	stw	r10,1192(sp)
   8a1ac:	482d883a 	mov	r22,r9
   8a1b0:	00000506 	br	8a1c8 <___vfiprintf_internal_r+0x5b0>
   8a1b4:	21400084 	addi	r5,r4,2
   8a1b8:	42000204 	addi	r8,r8,8
   8a1bc:	1009883a 	mov	r4,r2
   8a1c0:	8c7ffc04 	addi	r17,r17,-16
   8a1c4:	e4400d0e 	bge	fp,r17,8a1fc <___vfiprintf_internal_r+0x5e4>
   8a1c8:	18c00404 	addi	r3,r3,16
   8a1cc:	20800044 	addi	r2,r4,1
   8a1d0:	44c00015 	stw	r19,0(r8)
   8a1d4:	47000115 	stw	fp,4(r8)
   8a1d8:	d8c11c15 	stw	r3,1136(sp)
   8a1dc:	d8811b15 	stw	r2,1132(sp)
   8a1e0:	60bff40e 	bge	r12,r2,8a1b4 <_gp+0xfffefdc0>
   8a1e4:	1801801e 	bne	r3,zero,8a7e8 <___vfiprintf_internal_r+0xbd0>
   8a1e8:	8c7ffc04 	addi	r17,r17,-16
   8a1ec:	0009883a 	mov	r4,zero
   8a1f0:	01400044 	movi	r5,1
   8a1f4:	d811883a 	mov	r8,sp
   8a1f8:	e47ff316 	blt	fp,r17,8a1c8 <_gp+0xfffefdd4>
   8a1fc:	b013883a 	mov	r9,r22
   8a200:	d9c12917 	ldw	r7,1188(sp)
   8a204:	882d883a 	mov	r22,r17
   8a208:	da812a17 	ldw	r10,1192(sp)
   8a20c:	dc412617 	ldw	r17,1176(sp)
   8a210:	d8812517 	ldw	r2,1172(sp)
   8a214:	b0c7883a 	add	r3,r22,r3
   8a218:	45800115 	stw	r22,4(r8)
   8a21c:	40800015 	stw	r2,0(r8)
   8a220:	d8c11c15 	stw	r3,1136(sp)
   8a224:	d9411b15 	stw	r5,1132(sp)
   8a228:	008001c4 	movi	r2,7
   8a22c:	11426a16 	blt	r2,r5,8abd8 <___vfiprintf_internal_r+0xfc0>
   8a230:	d9011d87 	ldb	r4,1142(sp)
   8a234:	42000204 	addi	r8,r8,8
   8a238:	28800044 	addi	r2,r5,1
   8a23c:	20017b1e 	bne	r4,zero,8a82c <___vfiprintf_internal_r+0xc14>
   8a240:	50000c26 	beq	r10,zero,8a274 <___vfiprintf_internal_r+0x65c>
   8a244:	d9011d04 	addi	r4,sp,1140
   8a248:	18c00084 	addi	r3,r3,2
   8a24c:	41000015 	stw	r4,0(r8)
   8a250:	01000084 	movi	r4,2
   8a254:	41000115 	stw	r4,4(r8)
   8a258:	d8c11c15 	stw	r3,1136(sp)
   8a25c:	d8811b15 	stw	r2,1132(sp)
   8a260:	010001c4 	movi	r4,7
   8a264:	20821716 	blt	r4,r2,8aac4 <___vfiprintf_internal_r+0xeac>
   8a268:	100b883a 	mov	r5,r2
   8a26c:	42000204 	addi	r8,r8,8
   8a270:	10800044 	addi	r2,r2,1
   8a274:	01002004 	movi	r4,128
   8a278:	a901d126 	beq	r21,r4,8a9c0 <___vfiprintf_internal_r+0xda8>
   8a27c:	91e5c83a 	sub	r18,r18,r7
   8a280:	0480290e 	bge	zero,r18,8a328 <___vfiprintf_internal_r+0x710>
   8a284:	05800404 	movi	r22,16
   8a288:	05400274 	movhi	r21,9
   8a28c:	ad424204 	addi	r21,r21,2312
   8a290:	b4801c0e 	bge	r22,r18,8a304 <___vfiprintf_internal_r+0x6ec>
   8a294:	dc412515 	stw	r17,1172(sp)
   8a298:	070001c4 	movi	fp,7
   8a29c:	9023883a 	mov	r17,r18
   8a2a0:	d9c12615 	stw	r7,1176(sp)
   8a2a4:	4825883a 	mov	r18,r9
   8a2a8:	00000506 	br	8a2c0 <___vfiprintf_internal_r+0x6a8>
   8a2ac:	28800084 	addi	r2,r5,2
   8a2b0:	42000204 	addi	r8,r8,8
   8a2b4:	200b883a 	mov	r5,r4
   8a2b8:	8c7ffc04 	addi	r17,r17,-16
   8a2bc:	b4400d0e 	bge	r22,r17,8a2f4 <___vfiprintf_internal_r+0x6dc>
   8a2c0:	18c00404 	addi	r3,r3,16
   8a2c4:	29000044 	addi	r4,r5,1
   8a2c8:	44000015 	stw	r16,0(r8)
   8a2cc:	45800115 	stw	r22,4(r8)
   8a2d0:	d8c11c15 	stw	r3,1136(sp)
   8a2d4:	d9011b15 	stw	r4,1132(sp)
   8a2d8:	e13ff40e 	bge	fp,r4,8a2ac <_gp+0xfffefeb8>
   8a2dc:	1801601e 	bne	r3,zero,8a860 <___vfiprintf_internal_r+0xc48>
   8a2e0:	8c7ffc04 	addi	r17,r17,-16
   8a2e4:	000b883a 	mov	r5,zero
   8a2e8:	00800044 	movi	r2,1
   8a2ec:	d811883a 	mov	r8,sp
   8a2f0:	b47ff316 	blt	r22,r17,8a2c0 <_gp+0xfffefecc>
   8a2f4:	9013883a 	mov	r9,r18
   8a2f8:	d9c12617 	ldw	r7,1176(sp)
   8a2fc:	8825883a 	mov	r18,r17
   8a300:	dc412517 	ldw	r17,1172(sp)
   8a304:	1c87883a 	add	r3,r3,r18
   8a308:	45400015 	stw	r21,0(r8)
   8a30c:	44800115 	stw	r18,4(r8)
   8a310:	d8c11c15 	stw	r3,1136(sp)
   8a314:	d8811b15 	stw	r2,1132(sp)
   8a318:	010001c4 	movi	r4,7
   8a31c:	20819e16 	blt	r4,r2,8a998 <___vfiprintf_internal_r+0xd80>
   8a320:	42000204 	addi	r8,r8,8
   8a324:	10800044 	addi	r2,r2,1
   8a328:	38c7883a 	add	r3,r7,r3
   8a32c:	45c00015 	stw	r23,0(r8)
   8a330:	41c00115 	stw	r7,4(r8)
   8a334:	d8c11c15 	stw	r3,1136(sp)
   8a338:	d8811b15 	stw	r2,1132(sp)
   8a33c:	010001c4 	movi	r4,7
   8a340:	20819d0e 	bge	r4,r2,8a9b8 <___vfiprintf_internal_r+0xda0>
   8a344:	1802291e 	bne	r3,zero,8abec <___vfiprintf_internal_r+0xfd4>
   8a348:	d8011b15 	stw	zero,1132(sp)
   8a34c:	d811883a 	mov	r8,sp
   8a350:	8c40010c 	andi	r17,r17,4
   8a354:	88017526 	beq	r17,zero,8a92c <___vfiprintf_internal_r+0xd14>
   8a358:	d9412117 	ldw	r5,1156(sp)
   8a35c:	2d23c83a 	sub	r17,r5,r20
   8a360:	0441720e 	bge	zero,r17,8a92c <___vfiprintf_internal_r+0xd14>
   8a364:	04800404 	movi	r18,16
   8a368:	9443170e 	bge	r18,r17,8afc8 <___vfiprintf_internal_r+0x13b0>
   8a36c:	01400274 	movhi	r5,9
   8a370:	29424604 	addi	r5,r5,2328
   8a374:	d9011b17 	ldw	r4,1132(sp)
   8a378:	d9412515 	stw	r5,1172(sp)
   8a37c:	058001c4 	movi	r22,7
   8a380:	dd412217 	ldw	r21,1160(sp)
   8a384:	ddc12017 	ldw	r23,1152(sp)
   8a388:	4839883a 	mov	fp,r9
   8a38c:	00000506 	br	8a3a4 <___vfiprintf_internal_r+0x78c>
   8a390:	21400084 	addi	r5,r4,2
   8a394:	42000204 	addi	r8,r8,8
   8a398:	1009883a 	mov	r4,r2
   8a39c:	8c7ffc04 	addi	r17,r17,-16
   8a3a0:	94400d0e 	bge	r18,r17,8a3d8 <___vfiprintf_internal_r+0x7c0>
   8a3a4:	18c00404 	addi	r3,r3,16
   8a3a8:	20800044 	addi	r2,r4,1
   8a3ac:	44c00015 	stw	r19,0(r8)
   8a3b0:	44800115 	stw	r18,4(r8)
   8a3b4:	d8c11c15 	stw	r3,1136(sp)
   8a3b8:	d8811b15 	stw	r2,1132(sp)
   8a3bc:	b0bff40e 	bge	r22,r2,8a390 <_gp+0xfffeff9c>
   8a3c0:	18016b1e 	bne	r3,zero,8a970 <___vfiprintf_internal_r+0xd58>
   8a3c4:	8c7ffc04 	addi	r17,r17,-16
   8a3c8:	0009883a 	mov	r4,zero
   8a3cc:	01400044 	movi	r5,1
   8a3d0:	d811883a 	mov	r8,sp
   8a3d4:	947ff316 	blt	r18,r17,8a3a4 <_gp+0xfffeffb0>
   8a3d8:	e013883a 	mov	r9,fp
   8a3dc:	d8812517 	ldw	r2,1172(sp)
   8a3e0:	1c47883a 	add	r3,r3,r17
   8a3e4:	44400115 	stw	r17,4(r8)
   8a3e8:	40800015 	stw	r2,0(r8)
   8a3ec:	d8c11c15 	stw	r3,1136(sp)
   8a3f0:	d9411b15 	stw	r5,1132(sp)
   8a3f4:	008001c4 	movi	r2,7
   8a3f8:	11414c0e 	bge	r2,r5,8a92c <___vfiprintf_internal_r+0xd14>
   8a3fc:	1801431e 	bne	r3,zero,8a90c <___vfiprintf_internal_r+0xcf4>
   8a400:	d8c12117 	ldw	r3,1156(sp)
   8a404:	a0c28e16 	blt	r20,r3,8ae40 <___vfiprintf_internal_r+0x1228>
   8a408:	d9012417 	ldw	r4,1168(sp)
   8a40c:	2509883a 	add	r4,r4,r20
   8a410:	d9012415 	stw	r4,1168(sp)
   8a414:	00015306 	br	8a964 <___vfiprintf_internal_r+0xd4c>
   8a418:	8c400414 	ori	r17,r17,16
   8a41c:	8880080c 	andi	r2,r17,32
   8a420:	b811883a 	mov	r8,r23
   8a424:	3025883a 	mov	r18,r6
   8a428:	10005f26 	beq	r2,zero,8a5a8 <___vfiprintf_internal_r+0x990>
   8a42c:	d8812317 	ldw	r2,1164(sp)
   8a430:	d8c12317 	ldw	r3,1164(sp)
   8a434:	15000017 	ldw	r20,0(r2)
   8a438:	15400117 	ldw	r21,4(r2)
   8a43c:	18c00204 	addi	r3,r3,8
   8a440:	0005883a 	mov	r2,zero
   8a444:	d8c12315 	stw	r3,1164(sp)
   8a448:	a548b03a 	or	r4,r20,r21
   8a44c:	d8011d85 	stb	zero,1142(sp)
   8a450:	900f883a 	mov	r7,r18
   8a454:	002d883a 	mov	r22,zero
   8a458:	003f2b06 	br	8a108 <_gp+0xfffefd14>
   8a45c:	8c400414 	ori	r17,r17,16
   8a460:	8880080c 	andi	r2,r17,32
   8a464:	b811883a 	mov	r8,r23
   8a468:	3025883a 	mov	r18,r6
   8a46c:	1000a826 	beq	r2,zero,8a710 <___vfiprintf_internal_r+0xaf8>
   8a470:	d8812317 	ldw	r2,1164(sp)
   8a474:	d8c12317 	ldw	r3,1164(sp)
   8a478:	15000017 	ldw	r20,0(r2)
   8a47c:	15400117 	ldw	r21,4(r2)
   8a480:	18c00204 	addi	r3,r3,8
   8a484:	00800044 	movi	r2,1
   8a488:	d8c12315 	stw	r3,1164(sp)
   8a48c:	a548b03a 	or	r4,r20,r21
   8a490:	003fee06 	br	8a44c <_gp+0xffff0058>
   8a494:	01400274 	movhi	r5,9
   8a498:	2941dc04 	addi	r5,r5,1904
   8a49c:	dd811d85 	stb	r22,1142(sp)
   8a4a0:	d9412715 	stw	r5,1180(sp)
   8a4a4:	8880080c 	andi	r2,r17,32
   8a4a8:	b811883a 	mov	r8,r23
   8a4ac:	3025883a 	mov	r18,r6
   8a4b0:	1000a926 	beq	r2,zero,8a758 <___vfiprintf_internal_r+0xb40>
   8a4b4:	d9412317 	ldw	r5,1164(sp)
   8a4b8:	2d000017 	ldw	r20,0(r5)
   8a4bc:	2d400117 	ldw	r21,4(r5)
   8a4c0:	29400204 	addi	r5,r5,8
   8a4c4:	d9412315 	stw	r5,1164(sp)
   8a4c8:	8880004c 	andi	r2,r17,1
   8a4cc:	1001d126 	beq	r2,zero,8ac14 <___vfiprintf_internal_r+0xffc>
   8a4d0:	a548b03a 	or	r4,r20,r21
   8a4d4:	20021626 	beq	r4,zero,8ad30 <___vfiprintf_internal_r+0x1118>
   8a4d8:	00800c04 	movi	r2,48
   8a4dc:	d8811d05 	stb	r2,1140(sp)
   8a4e0:	d8c11d45 	stb	r3,1141(sp)
   8a4e4:	8c400094 	ori	r17,r17,2
   8a4e8:	00800084 	movi	r2,2
   8a4ec:	003fd706 	br	8a44c <_gp+0xffff0058>
   8a4f0:	d9412317 	ldw	r5,1164(sp)
   8a4f4:	05000044 	movi	r20,1
   8a4f8:	b811883a 	mov	r8,r23
   8a4fc:	28800017 	ldw	r2,0(r5)
   8a500:	29400104 	addi	r5,r5,4
   8a504:	d8011d85 	stb	zero,1142(sp)
   8a508:	d8810005 	stb	r2,1024(sp)
   8a50c:	d9412315 	stw	r5,1164(sp)
   8a510:	a00f883a 	mov	r7,r20
   8a514:	ddc10004 	addi	r23,sp,1024
   8a518:	0025883a 	mov	r18,zero
   8a51c:	003f0f06 	br	8a15c <_gp+0xfffefd68>
   8a520:	b0803fcc 	andi	r2,r22,255
   8a524:	1080201c 	xori	r2,r2,128
   8a528:	10bfe004 	addi	r2,r2,-128
   8a52c:	10021f1e 	bne	r2,zero,8adac <___vfiprintf_internal_r+0x1194>
   8a530:	05800804 	movi	r22,32
   8a534:	48c00007 	ldb	r3,0(r9)
   8a538:	003e1706 	br	89d98 <_gp+0xfffef9a4>
   8a53c:	8c400054 	ori	r17,r17,1
   8a540:	48c00007 	ldb	r3,0(r9)
   8a544:	003e1406 	br	89d98 <_gp+0xfffef9a4>
   8a548:	48c00007 	ldb	r3,0(r9)
   8a54c:	01001b04 	movi	r4,108
   8a550:	4805883a 	mov	r2,r9
   8a554:	19026526 	beq	r3,r4,8aeec <___vfiprintf_internal_r+0x12d4>
   8a558:	8c400414 	ori	r17,r17,16
   8a55c:	003e0e06 	br	89d98 <_gp+0xfffef9a4>
   8a560:	dd811d85 	stb	r22,1142(sp)
   8a564:	8880080c 	andi	r2,r17,32
   8a568:	b811883a 	mov	r8,r23
   8a56c:	10020426 	beq	r2,zero,8ad80 <___vfiprintf_internal_r+0x1168>
   8a570:	d8c12317 	ldw	r3,1164(sp)
   8a574:	d9012417 	ldw	r4,1168(sp)
   8a578:	d9412317 	ldw	r5,1164(sp)
   8a57c:	18800017 	ldw	r2,0(r3)
   8a580:	2007d7fa 	srai	r3,r4,31
   8a584:	29400104 	addi	r5,r5,4
   8a588:	d9412315 	stw	r5,1164(sp)
   8a58c:	11000015 	stw	r4,0(r2)
   8a590:	10c00115 	stw	r3,4(r2)
   8a594:	003dd706 	br	89cf4 <_gp+0xfffef900>
   8a598:	8880080c 	andi	r2,r17,32
   8a59c:	b811883a 	mov	r8,r23
   8a5a0:	3025883a 	mov	r18,r6
   8a5a4:	103fa11e 	bne	r2,zero,8a42c <_gp+0xffff0038>
   8a5a8:	8880040c 	andi	r2,r17,16
   8a5ac:	1001ea26 	beq	r2,zero,8ad58 <___vfiprintf_internal_r+0x1140>
   8a5b0:	d9012317 	ldw	r4,1164(sp)
   8a5b4:	002b883a 	mov	r21,zero
   8a5b8:	0005883a 	mov	r2,zero
   8a5bc:	25000017 	ldw	r20,0(r4)
   8a5c0:	21000104 	addi	r4,r4,4
   8a5c4:	d9012315 	stw	r4,1164(sp)
   8a5c8:	a009883a 	mov	r4,r20
   8a5cc:	003f9f06 	br	8a44c <_gp+0xffff0058>
   8a5d0:	d8812317 	ldw	r2,1164(sp)
   8a5d4:	d8c12317 	ldw	r3,1164(sp)
   8a5d8:	10800017 	ldw	r2,0(r2)
   8a5dc:	d8812115 	stw	r2,1156(sp)
   8a5e0:	d9012117 	ldw	r4,1156(sp)
   8a5e4:	18800104 	addi	r2,r3,4
   8a5e8:	203e9a16 	blt	r4,zero,8a054 <_gp+0xfffefc60>
   8a5ec:	d8812315 	stw	r2,1164(sp)
   8a5f0:	48c00007 	ldb	r3,0(r9)
   8a5f4:	003de806 	br	89d98 <_gp+0xfffef9a4>
   8a5f8:	05800ac4 	movi	r22,43
   8a5fc:	48c00007 	ldb	r3,0(r9)
   8a600:	003de506 	br	89d98 <_gp+0xfffef9a4>
   8a604:	48c00007 	ldb	r3,0(r9)
   8a608:	01000a84 	movi	r4,42
   8a60c:	48800044 	addi	r2,r9,1
   8a610:	19028326 	beq	r3,r4,8b020 <___vfiprintf_internal_r+0x1408>
   8a614:	1f3ff404 	addi	fp,r3,-48
   8a618:	af027a36 	bltu	r21,fp,8b004 <___vfiprintf_internal_r+0x13ec>
   8a61c:	1025883a 	mov	r18,r2
   8a620:	0009883a 	mov	r4,zero
   8a624:	00000106 	br	8a62c <___vfiprintf_internal_r+0xa14>
   8a628:	4825883a 	mov	r18,r9
   8a62c:	01400284 	movi	r5,10
   8a630:	00825800 	call	82580 <__mulsi3>
   8a634:	90c00007 	ldb	r3,0(r18)
   8a638:	e089883a 	add	r4,fp,r2
   8a63c:	92400044 	addi	r9,r18,1
   8a640:	1f3ff404 	addi	fp,r3,-48
   8a644:	af3ff82e 	bgeu	r21,fp,8a628 <_gp+0xffff0234>
   8a648:	2025883a 	mov	r18,r4
   8a64c:	20022416 	blt	r4,zero,8aee0 <___vfiprintf_internal_r+0x12c8>
   8a650:	900d883a 	mov	r6,r18
   8a654:	003dd106 	br	89d9c <_gp+0xfffef9a8>
   8a658:	8c401014 	ori	r17,r17,64
   8a65c:	48c00007 	ldb	r3,0(r9)
   8a660:	003dcd06 	br	89d98 <_gp+0xfffef9a4>
   8a664:	dd811d85 	stb	r22,1142(sp)
   8a668:	8880080c 	andi	r2,r17,32
   8a66c:	b811883a 	mov	r8,r23
   8a670:	3025883a 	mov	r18,r6
   8a674:	103e991e 	bne	r2,zero,8a0dc <_gp+0xfffefce8>
   8a678:	8880040c 	andi	r2,r17,16
   8a67c:	1001d726 	beq	r2,zero,8addc <___vfiprintf_internal_r+0x11c4>
   8a680:	d9012317 	ldw	r4,1164(sp)
   8a684:	25000017 	ldw	r20,0(r4)
   8a688:	21000104 	addi	r4,r4,4
   8a68c:	d9012315 	stw	r4,1164(sp)
   8a690:	a02bd7fa 	srai	r21,r20,31
   8a694:	a805883a 	mov	r2,r21
   8a698:	003e9606 	br	8a0f4 <_gp+0xfffefd00>
   8a69c:	8c400814 	ori	r17,r17,32
   8a6a0:	48c00007 	ldb	r3,0(r9)
   8a6a4:	003dbc06 	br	89d98 <_gp+0xfffef9a4>
   8a6a8:	d9412317 	ldw	r5,1164(sp)
   8a6ac:	b811883a 	mov	r8,r23
   8a6b0:	d8011d85 	stb	zero,1142(sp)
   8a6b4:	2dc00017 	ldw	r23,0(r5)
   8a6b8:	3025883a 	mov	r18,r6
   8a6bc:	2d400104 	addi	r21,r5,4
   8a6c0:	b8022f26 	beq	r23,zero,8af80 <___vfiprintf_internal_r+0x1368>
   8a6c4:	b809883a 	mov	r4,r23
   8a6c8:	30020f16 	blt	r6,zero,8af08 <___vfiprintf_internal_r+0x12f0>
   8a6cc:	000b883a 	mov	r5,zero
   8a6d0:	da012b15 	stw	r8,1196(sp)
   8a6d4:	da412d15 	stw	r9,1204(sp)
   8a6d8:	0087e280 	call	87e28 <memchr>
   8a6dc:	da012b17 	ldw	r8,1196(sp)
   8a6e0:	da412d17 	ldw	r9,1204(sp)
   8a6e4:	10024226 	beq	r2,zero,8aff0 <___vfiprintf_internal_r+0x13d8>
   8a6e8:	15cfc83a 	sub	r7,r2,r23
   8a6ec:	91c1d616 	blt	r18,r7,8ae48 <___vfiprintf_internal_r+0x1230>
   8a6f0:	dd811d83 	ldbu	r22,1142(sp)
   8a6f4:	dd412315 	stw	r21,1164(sp)
   8a6f8:	0025883a 	mov	r18,zero
   8a6fc:	003e8f06 	br	8a13c <_gp+0xfffefd48>
   8a700:	8880080c 	andi	r2,r17,32
   8a704:	b811883a 	mov	r8,r23
   8a708:	3025883a 	mov	r18,r6
   8a70c:	103f581e 	bne	r2,zero,8a470 <_gp+0xffff007c>
   8a710:	8880040c 	andi	r2,r17,16
   8a714:	1001a726 	beq	r2,zero,8adb4 <___vfiprintf_internal_r+0x119c>
   8a718:	d9012317 	ldw	r4,1164(sp)
   8a71c:	002b883a 	mov	r21,zero
   8a720:	00800044 	movi	r2,1
   8a724:	25000017 	ldw	r20,0(r4)
   8a728:	21000104 	addi	r4,r4,4
   8a72c:	d9012315 	stw	r4,1164(sp)
   8a730:	a009883a 	mov	r4,r20
   8a734:	003f4506 	br	8a44c <_gp+0xffff0058>
   8a738:	01000274 	movhi	r4,9
   8a73c:	2101e104 	addi	r4,r4,1924
   8a740:	dd811d85 	stb	r22,1142(sp)
   8a744:	d9012715 	stw	r4,1180(sp)
   8a748:	8880080c 	andi	r2,r17,32
   8a74c:	b811883a 	mov	r8,r23
   8a750:	3025883a 	mov	r18,r6
   8a754:	103f571e 	bne	r2,zero,8a4b4 <_gp+0xffff00c0>
   8a758:	8880040c 	andi	r2,r17,16
   8a75c:	10017626 	beq	r2,zero,8ad38 <___vfiprintf_internal_r+0x1120>
   8a760:	d8812317 	ldw	r2,1164(sp)
   8a764:	002b883a 	mov	r21,zero
   8a768:	15000017 	ldw	r20,0(r2)
   8a76c:	10800104 	addi	r2,r2,4
   8a770:	d8812315 	stw	r2,1164(sp)
   8a774:	003f5406 	br	8a4c8 <_gp+0xffff00d4>
   8a778:	d8c12317 	ldw	r3,1164(sp)
   8a77c:	00800c04 	movi	r2,48
   8a780:	01000274 	movhi	r4,9
   8a784:	2101e104 	addi	r4,r4,1924
   8a788:	1d000017 	ldw	r20,0(r3)
   8a78c:	d8811d05 	stb	r2,1140(sp)
   8a790:	18c00104 	addi	r3,r3,4
   8a794:	00801e04 	movi	r2,120
   8a798:	d8811d45 	stb	r2,1141(sp)
   8a79c:	d9012715 	stw	r4,1180(sp)
   8a7a0:	b811883a 	mov	r8,r23
   8a7a4:	3025883a 	mov	r18,r6
   8a7a8:	002b883a 	mov	r21,zero
   8a7ac:	8c400094 	ori	r17,r17,2
   8a7b0:	d8c12315 	stw	r3,1164(sp)
   8a7b4:	00800084 	movi	r2,2
   8a7b8:	a009883a 	mov	r4,r20
   8a7bc:	003f2306 	br	8a44c <_gp+0xffff0058>
   8a7c0:	dd811d85 	stb	r22,1142(sp)
   8a7c4:	b811883a 	mov	r8,r23
   8a7c8:	18004426 	beq	r3,zero,8a8dc <___vfiprintf_internal_r+0xcc4>
   8a7cc:	05000044 	movi	r20,1
   8a7d0:	d8c10005 	stb	r3,1024(sp)
   8a7d4:	d8011d85 	stb	zero,1142(sp)
   8a7d8:	a00f883a 	mov	r7,r20
   8a7dc:	ddc10004 	addi	r23,sp,1024
   8a7e0:	0025883a 	mov	r18,zero
   8a7e4:	003e5d06 	br	8a15c <_gp+0xfffefd68>
   8a7e8:	d9012217 	ldw	r4,1160(sp)
   8a7ec:	d9412017 	ldw	r5,1152(sp)
   8a7f0:	d9811a04 	addi	r6,sp,1128
   8a7f4:	db012b15 	stw	r12,1196(sp)
   8a7f8:	0089b040 	call	89b04 <__sprint_r.part.0>
   8a7fc:	db012b17 	ldw	r12,1196(sp)
   8a800:	10003c1e 	bne	r2,zero,8a8f4 <___vfiprintf_internal_r+0xcdc>
   8a804:	d9011b17 	ldw	r4,1132(sp)
   8a808:	d8c11c17 	ldw	r3,1136(sp)
   8a80c:	d811883a 	mov	r8,sp
   8a810:	21400044 	addi	r5,r4,1
   8a814:	003e6a06 	br	8a1c0 <_gp+0xfffefdcc>
   8a818:	d9411b17 	ldw	r5,1132(sp)
   8a81c:	d8c11c17 	ldw	r3,1136(sp)
   8a820:	28800044 	addi	r2,r5,1
   8a824:	d9011d87 	ldb	r4,1142(sp)
   8a828:	203e8526 	beq	r4,zero,8a240 <_gp+0xfffefe4c>
   8a82c:	01000044 	movi	r4,1
   8a830:	d9411d84 	addi	r5,sp,1142
   8a834:	1907883a 	add	r3,r3,r4
   8a838:	41400015 	stw	r5,0(r8)
   8a83c:	41000115 	stw	r4,4(r8)
   8a840:	d8c11c15 	stw	r3,1136(sp)
   8a844:	d8811b15 	stw	r2,1132(sp)
   8a848:	014001c4 	movi	r5,7
   8a84c:	28809816 	blt	r5,r2,8aab0 <___vfiprintf_internal_r+0xe98>
   8a850:	100b883a 	mov	r5,r2
   8a854:	42000204 	addi	r8,r8,8
   8a858:	1105883a 	add	r2,r2,r4
   8a85c:	003e7806 	br	8a240 <_gp+0xfffefe4c>
   8a860:	d9012217 	ldw	r4,1160(sp)
   8a864:	d9412017 	ldw	r5,1152(sp)
   8a868:	d9811a04 	addi	r6,sp,1128
   8a86c:	0089b040 	call	89b04 <__sprint_r.part.0>
   8a870:	1000201e 	bne	r2,zero,8a8f4 <___vfiprintf_internal_r+0xcdc>
   8a874:	d9411b17 	ldw	r5,1132(sp)
   8a878:	d8c11c17 	ldw	r3,1136(sp)
   8a87c:	d811883a 	mov	r8,sp
   8a880:	28800044 	addi	r2,r5,1
   8a884:	003e8c06 	br	8a2b8 <_gp+0xfffefec4>
   8a888:	00c00044 	movi	r3,1
   8a88c:	10c0ab26 	beq	r2,r3,8ab3c <___vfiprintf_internal_r+0xf24>
   8a890:	00c00084 	movi	r3,2
   8a894:	10c0901e 	bne	r2,r3,8aad8 <___vfiprintf_internal_r+0xec0>
   8a898:	d9412717 	ldw	r5,1180(sp)
   8a89c:	d88109c4 	addi	r2,sp,1063
   8a8a0:	a0c003cc 	andi	r3,r20,15
   8a8a4:	a808973a 	slli	r4,r21,28
   8a8a8:	28c7883a 	add	r3,r5,r3
   8a8ac:	a028d13a 	srli	r20,r20,4
   8a8b0:	18c00003 	ldbu	r3,0(r3)
   8a8b4:	a82ad13a 	srli	r21,r21,4
   8a8b8:	2528b03a 	or	r20,r4,r20
   8a8bc:	10c00005 	stb	r3,0(r2)
   8a8c0:	a546b03a 	or	r3,r20,r21
   8a8c4:	102f883a 	mov	r23,r2
   8a8c8:	10bfffc4 	addi	r2,r2,-1
   8a8cc:	183ff41e 	bne	r3,zero,8a8a0 <_gp+0xffff04ac>
   8a8d0:	d8811f17 	ldw	r2,1148(sp)
   8a8d4:	15cfc83a 	sub	r7,r2,r23
   8a8d8:	003e1806 	br	8a13c <_gp+0xfffefd48>
   8a8dc:	d8811c17 	ldw	r2,1136(sp)
   8a8e0:	10000426 	beq	r2,zero,8a8f4 <___vfiprintf_internal_r+0xcdc>
   8a8e4:	d9012217 	ldw	r4,1160(sp)
   8a8e8:	d9412017 	ldw	r5,1152(sp)
   8a8ec:	d9811a04 	addi	r6,sp,1128
   8a8f0:	0089b040 	call	89b04 <__sprint_r.part.0>
   8a8f4:	d8c12017 	ldw	r3,1152(sp)
   8a8f8:	1880030b 	ldhu	r2,12(r3)
   8a8fc:	1080100c 	andi	r2,r2,64
   8a900:	103dc31e 	bne	r2,zero,8a010 <_gp+0xfffefc1c>
   8a904:	d8812417 	ldw	r2,1168(sp)
   8a908:	003dc206 	br	8a014 <_gp+0xfffefc20>
   8a90c:	d9012217 	ldw	r4,1160(sp)
   8a910:	d9412017 	ldw	r5,1152(sp)
   8a914:	d9811a04 	addi	r6,sp,1128
   8a918:	da412d15 	stw	r9,1204(sp)
   8a91c:	0089b040 	call	89b04 <__sprint_r.part.0>
   8a920:	da412d17 	ldw	r9,1204(sp)
   8a924:	103ff31e 	bne	r2,zero,8a8f4 <_gp+0xffff0500>
   8a928:	d8c11c17 	ldw	r3,1136(sp)
   8a92c:	d9412117 	ldw	r5,1156(sp)
   8a930:	a140010e 	bge	r20,r5,8a938 <___vfiprintf_internal_r+0xd20>
   8a934:	2829883a 	mov	r20,r5
   8a938:	d8812417 	ldw	r2,1168(sp)
   8a93c:	1505883a 	add	r2,r2,r20
   8a940:	d8812415 	stw	r2,1168(sp)
   8a944:	18000726 	beq	r3,zero,8a964 <___vfiprintf_internal_r+0xd4c>
   8a948:	d9012217 	ldw	r4,1160(sp)
   8a94c:	d9412017 	ldw	r5,1152(sp)
   8a950:	d9811a04 	addi	r6,sp,1128
   8a954:	da412d15 	stw	r9,1204(sp)
   8a958:	0089b040 	call	89b04 <__sprint_r.part.0>
   8a95c:	da412d17 	ldw	r9,1204(sp)
   8a960:	103fe41e 	bne	r2,zero,8a8f4 <_gp+0xffff0500>
   8a964:	d8011b15 	stw	zero,1132(sp)
   8a968:	d811883a 	mov	r8,sp
   8a96c:	003ce106 	br	89cf4 <_gp+0xfffef900>
   8a970:	a809883a 	mov	r4,r21
   8a974:	b80b883a 	mov	r5,r23
   8a978:	d9811a04 	addi	r6,sp,1128
   8a97c:	0089b040 	call	89b04 <__sprint_r.part.0>
   8a980:	103fdc1e 	bne	r2,zero,8a8f4 <_gp+0xffff0500>
   8a984:	d9011b17 	ldw	r4,1132(sp)
   8a988:	d8c11c17 	ldw	r3,1136(sp)
   8a98c:	d811883a 	mov	r8,sp
   8a990:	21400044 	addi	r5,r4,1
   8a994:	003e8106 	br	8a39c <_gp+0xfffeffa8>
   8a998:	1800cb1e 	bne	r3,zero,8acc8 <___vfiprintf_internal_r+0x10b0>
   8a99c:	00800044 	movi	r2,1
   8a9a0:	ddc00015 	stw	r23,0(sp)
   8a9a4:	d9c00115 	stw	r7,4(sp)
   8a9a8:	d9c11c15 	stw	r7,1136(sp)
   8a9ac:	d8811b15 	stw	r2,1132(sp)
   8a9b0:	3807883a 	mov	r3,r7
   8a9b4:	d811883a 	mov	r8,sp
   8a9b8:	42000204 	addi	r8,r8,8
   8a9bc:	003e6406 	br	8a350 <_gp+0xfffeff5c>
   8a9c0:	d9012117 	ldw	r4,1156(sp)
   8a9c4:	252dc83a 	sub	r22,r4,r20
   8a9c8:	05be2c0e 	bge	zero,r22,8a27c <_gp+0xfffefe88>
   8a9cc:	07000404 	movi	fp,16
   8a9d0:	e581830e 	bge	fp,r22,8afe0 <___vfiprintf_internal_r+0x13c8>
   8a9d4:	05400274 	movhi	r21,9
   8a9d8:	ad424204 	addi	r21,r21,2312
   8a9dc:	dc412515 	stw	r17,1172(sp)
   8a9e0:	028001c4 	movi	r10,7
   8a9e4:	b023883a 	mov	r17,r22
   8a9e8:	d9c12615 	stw	r7,1176(sp)
   8a9ec:	a82d883a 	mov	r22,r21
   8a9f0:	482b883a 	mov	r21,r9
   8a9f4:	00000506 	br	8aa0c <___vfiprintf_internal_r+0xdf4>
   8a9f8:	29000084 	addi	r4,r5,2
   8a9fc:	42000204 	addi	r8,r8,8
   8aa00:	100b883a 	mov	r5,r2
   8aa04:	8c7ffc04 	addi	r17,r17,-16
   8aa08:	e4400d0e 	bge	fp,r17,8aa40 <___vfiprintf_internal_r+0xe28>
   8aa0c:	18c00404 	addi	r3,r3,16
   8aa10:	28800044 	addi	r2,r5,1
   8aa14:	44000015 	stw	r16,0(r8)
   8aa18:	47000115 	stw	fp,4(r8)
   8aa1c:	d8c11c15 	stw	r3,1136(sp)
   8aa20:	d8811b15 	stw	r2,1132(sp)
   8aa24:	50bff40e 	bge	r10,r2,8a9f8 <_gp+0xffff0604>
   8aa28:	1800151e 	bne	r3,zero,8aa80 <___vfiprintf_internal_r+0xe68>
   8aa2c:	8c7ffc04 	addi	r17,r17,-16
   8aa30:	000b883a 	mov	r5,zero
   8aa34:	01000044 	movi	r4,1
   8aa38:	d811883a 	mov	r8,sp
   8aa3c:	e47ff316 	blt	fp,r17,8aa0c <_gp+0xffff0618>
   8aa40:	a813883a 	mov	r9,r21
   8aa44:	d9c12617 	ldw	r7,1176(sp)
   8aa48:	b02b883a 	mov	r21,r22
   8aa4c:	882d883a 	mov	r22,r17
   8aa50:	dc412517 	ldw	r17,1172(sp)
   8aa54:	1d87883a 	add	r3,r3,r22
   8aa58:	45400015 	stw	r21,0(r8)
   8aa5c:	45800115 	stw	r22,4(r8)
   8aa60:	d8c11c15 	stw	r3,1136(sp)
   8aa64:	d9011b15 	stw	r4,1132(sp)
   8aa68:	008001c4 	movi	r2,7
   8aa6c:	11009116 	blt	r2,r4,8acb4 <___vfiprintf_internal_r+0x109c>
   8aa70:	42000204 	addi	r8,r8,8
   8aa74:	20800044 	addi	r2,r4,1
   8aa78:	200b883a 	mov	r5,r4
   8aa7c:	003dff06 	br	8a27c <_gp+0xfffefe88>
   8aa80:	d9012217 	ldw	r4,1160(sp)
   8aa84:	d9412017 	ldw	r5,1152(sp)
   8aa88:	d9811a04 	addi	r6,sp,1128
   8aa8c:	da812c15 	stw	r10,1200(sp)
   8aa90:	0089b040 	call	89b04 <__sprint_r.part.0>
   8aa94:	da812c17 	ldw	r10,1200(sp)
   8aa98:	103f961e 	bne	r2,zero,8a8f4 <_gp+0xffff0500>
   8aa9c:	d9411b17 	ldw	r5,1132(sp)
   8aaa0:	d8c11c17 	ldw	r3,1136(sp)
   8aaa4:	d811883a 	mov	r8,sp
   8aaa8:	29000044 	addi	r4,r5,1
   8aaac:	003fd506 	br	8aa04 <_gp+0xffff0610>
   8aab0:	1800701e 	bne	r3,zero,8ac74 <___vfiprintf_internal_r+0x105c>
   8aab4:	000b883a 	mov	r5,zero
   8aab8:	2005883a 	mov	r2,r4
   8aabc:	d811883a 	mov	r8,sp
   8aac0:	003ddf06 	br	8a240 <_gp+0xfffefe4c>
   8aac4:	18005d1e 	bne	r3,zero,8ac3c <___vfiprintf_internal_r+0x1024>
   8aac8:	000b883a 	mov	r5,zero
   8aacc:	00800044 	movi	r2,1
   8aad0:	d811883a 	mov	r8,sp
   8aad4:	003de706 	br	8a274 <_gp+0xfffefe80>
   8aad8:	d8c109c4 	addi	r3,sp,1063
   8aadc:	a008d0fa 	srli	r4,r20,3
   8aae0:	a80a977a 	slli	r5,r21,29
   8aae4:	a82ad0fa 	srli	r21,r21,3
   8aae8:	a50001cc 	andi	r20,r20,7
   8aaec:	a0800c04 	addi	r2,r20,48
   8aaf0:	2928b03a 	or	r20,r5,r4
   8aaf4:	18800005 	stb	r2,0(r3)
   8aaf8:	a548b03a 	or	r4,r20,r21
   8aafc:	182f883a 	mov	r23,r3
   8ab00:	18ffffc4 	addi	r3,r3,-1
   8ab04:	203ff51e 	bne	r4,zero,8aadc <_gp+0xffff06e8>
   8ab08:	8900004c 	andi	r4,r17,1
   8ab0c:	b80b883a 	mov	r5,r23
   8ab10:	203f6f26 	beq	r4,zero,8a8d0 <_gp+0xffff04dc>
   8ab14:	10803fcc 	andi	r2,r2,255
   8ab18:	1080201c 	xori	r2,r2,128
   8ab1c:	10bfe004 	addi	r2,r2,-128
   8ab20:	01000c04 	movi	r4,48
   8ab24:	1100f526 	beq	r2,r4,8aefc <___vfiprintf_internal_r+0x12e4>
   8ab28:	293fffc5 	stb	r4,-1(r5)
   8ab2c:	d9011f17 	ldw	r4,1148(sp)
   8ab30:	182f883a 	mov	r23,r3
   8ab34:	20cfc83a 	sub	r7,r4,r3
   8ab38:	003d8006 	br	8a13c <_gp+0xfffefd48>
   8ab3c:	a800021e 	bne	r21,zero,8ab48 <___vfiprintf_internal_r+0xf30>
   8ab40:	00800244 	movi	r2,9
   8ab44:	15001d2e 	bgeu	r2,r20,8abbc <___vfiprintf_internal_r+0xfa4>
   8ab48:	dc412515 	stw	r17,1172(sp)
   8ab4c:	d88109c4 	addi	r2,sp,1063
   8ab50:	a823883a 	mov	r17,r21
   8ab54:	4039883a 	mov	fp,r8
   8ab58:	482b883a 	mov	r21,r9
   8ab5c:	a009883a 	mov	r4,r20
   8ab60:	880b883a 	mov	r5,r17
   8ab64:	01800284 	movi	r6,10
   8ab68:	000f883a 	mov	r7,zero
   8ab6c:	102f883a 	mov	r23,r2
   8ab70:	008c0f80 	call	8c0f8 <__umoddi3>
   8ab74:	10800c04 	addi	r2,r2,48
   8ab78:	a009883a 	mov	r4,r20
   8ab7c:	880b883a 	mov	r5,r17
   8ab80:	b8800005 	stb	r2,0(r23)
   8ab84:	01800284 	movi	r6,10
   8ab88:	000f883a 	mov	r7,zero
   8ab8c:	008baa40 	call	8baa4 <__udivdi3>
   8ab90:	1823883a 	mov	r17,r3
   8ab94:	10c6b03a 	or	r3,r2,r3
   8ab98:	1029883a 	mov	r20,r2
   8ab9c:	b8bfffc4 	addi	r2,r23,-1
   8aba0:	183fee1e 	bne	r3,zero,8ab5c <_gp+0xffff0768>
   8aba4:	d9411f17 	ldw	r5,1148(sp)
   8aba8:	e011883a 	mov	r8,fp
   8abac:	dc412517 	ldw	r17,1172(sp)
   8abb0:	a813883a 	mov	r9,r21
   8abb4:	2dcfc83a 	sub	r7,r5,r23
   8abb8:	003d6006 	br	8a13c <_gp+0xfffefd48>
   8abbc:	a5000c04 	addi	r20,r20,48
   8abc0:	dd0109c5 	stb	r20,1063(sp)
   8abc4:	d9c12817 	ldw	r7,1184(sp)
   8abc8:	ddc109c4 	addi	r23,sp,1063
   8abcc:	003d5b06 	br	8a13c <_gp+0xfffefd48>
   8abd0:	ddc10a04 	addi	r23,sp,1064
   8abd4:	003d5906 	br	8a13c <_gp+0xfffefd48>
   8abd8:	1800891e 	bne	r3,zero,8ae00 <___vfiprintf_internal_r+0x11e8>
   8abdc:	000b883a 	mov	r5,zero
   8abe0:	00800044 	movi	r2,1
   8abe4:	d811883a 	mov	r8,sp
   8abe8:	003f0e06 	br	8a824 <_gp+0xffff0430>
   8abec:	d9012217 	ldw	r4,1160(sp)
   8abf0:	d9412017 	ldw	r5,1152(sp)
   8abf4:	d9811a04 	addi	r6,sp,1128
   8abf8:	da412d15 	stw	r9,1204(sp)
   8abfc:	0089b040 	call	89b04 <__sprint_r.part.0>
   8ac00:	da412d17 	ldw	r9,1204(sp)
   8ac04:	103f3b1e 	bne	r2,zero,8a8f4 <_gp+0xffff0500>
   8ac08:	d8c11c17 	ldw	r3,1136(sp)
   8ac0c:	d811883a 	mov	r8,sp
   8ac10:	003dcf06 	br	8a350 <_gp+0xfffeff5c>
   8ac14:	00800084 	movi	r2,2
   8ac18:	a548b03a 	or	r4,r20,r21
   8ac1c:	003e0b06 	br	8a44c <_gp+0xffff0058>
   8ac20:	d9012217 	ldw	r4,1160(sp)
   8ac24:	d9412017 	ldw	r5,1152(sp)
   8ac28:	d9811a04 	addi	r6,sp,1128
   8ac2c:	0089b040 	call	89b04 <__sprint_r.part.0>
   8ac30:	103f301e 	bne	r2,zero,8a8f4 <_gp+0xffff0500>
   8ac34:	d811883a 	mov	r8,sp
   8ac38:	003cbb06 	br	89f28 <_gp+0xfffefb34>
   8ac3c:	d9012217 	ldw	r4,1160(sp)
   8ac40:	d9412017 	ldw	r5,1152(sp)
   8ac44:	d9811a04 	addi	r6,sp,1128
   8ac48:	d9c12b15 	stw	r7,1196(sp)
   8ac4c:	da412d15 	stw	r9,1204(sp)
   8ac50:	0089b040 	call	89b04 <__sprint_r.part.0>
   8ac54:	d9c12b17 	ldw	r7,1196(sp)
   8ac58:	da412d17 	ldw	r9,1204(sp)
   8ac5c:	103f251e 	bne	r2,zero,8a8f4 <_gp+0xffff0500>
   8ac60:	d9411b17 	ldw	r5,1132(sp)
   8ac64:	d8c11c17 	ldw	r3,1136(sp)
   8ac68:	d811883a 	mov	r8,sp
   8ac6c:	28800044 	addi	r2,r5,1
   8ac70:	003d8006 	br	8a274 <_gp+0xfffefe80>
   8ac74:	d9012217 	ldw	r4,1160(sp)
   8ac78:	d9412017 	ldw	r5,1152(sp)
   8ac7c:	d9811a04 	addi	r6,sp,1128
   8ac80:	d9c12b15 	stw	r7,1196(sp)
   8ac84:	da412d15 	stw	r9,1204(sp)
   8ac88:	da812c15 	stw	r10,1200(sp)
   8ac8c:	0089b040 	call	89b04 <__sprint_r.part.0>
   8ac90:	d9c12b17 	ldw	r7,1196(sp)
   8ac94:	da412d17 	ldw	r9,1204(sp)
   8ac98:	da812c17 	ldw	r10,1200(sp)
   8ac9c:	103f151e 	bne	r2,zero,8a8f4 <_gp+0xffff0500>
   8aca0:	d9411b17 	ldw	r5,1132(sp)
   8aca4:	d8c11c17 	ldw	r3,1136(sp)
   8aca8:	d811883a 	mov	r8,sp
   8acac:	28800044 	addi	r2,r5,1
   8acb0:	003d6306 	br	8a240 <_gp+0xfffefe4c>
   8acb4:	18009e1e 	bne	r3,zero,8af30 <___vfiprintf_internal_r+0x1318>
   8acb8:	000b883a 	mov	r5,zero
   8acbc:	00800044 	movi	r2,1
   8acc0:	d811883a 	mov	r8,sp
   8acc4:	003d6d06 	br	8a27c <_gp+0xfffefe88>
   8acc8:	d9012217 	ldw	r4,1160(sp)
   8accc:	d9412017 	ldw	r5,1152(sp)
   8acd0:	d9811a04 	addi	r6,sp,1128
   8acd4:	d9c12b15 	stw	r7,1196(sp)
   8acd8:	da412d15 	stw	r9,1204(sp)
   8acdc:	0089b040 	call	89b04 <__sprint_r.part.0>
   8ace0:	d9c12b17 	ldw	r7,1196(sp)
   8ace4:	da412d17 	ldw	r9,1204(sp)
   8ace8:	103f021e 	bne	r2,zero,8a8f4 <_gp+0xffff0500>
   8acec:	d8811b17 	ldw	r2,1132(sp)
   8acf0:	d8c11c17 	ldw	r3,1136(sp)
   8acf4:	d811883a 	mov	r8,sp
   8acf8:	10800044 	addi	r2,r2,1
   8acfc:	003d8a06 	br	8a328 <_gp+0xfffeff34>
   8ad00:	4829883a 	mov	r20,r9
   8ad04:	003c1706 	br	89d64 <_gp+0xfffef970>
   8ad08:	0529c83a 	sub	r20,zero,r20
   8ad0c:	a004c03a 	cmpne	r2,r20,zero
   8ad10:	056bc83a 	sub	r21,zero,r21
   8ad14:	a8abc83a 	sub	r21,r21,r2
   8ad18:	05800b44 	movi	r22,45
   8ad1c:	dd811d85 	stb	r22,1142(sp)
   8ad20:	900f883a 	mov	r7,r18
   8ad24:	00800044 	movi	r2,1
   8ad28:	a548b03a 	or	r4,r20,r21
   8ad2c:	003cf606 	br	8a108 <_gp+0xfffefd14>
   8ad30:	00800084 	movi	r2,2
   8ad34:	003dc506 	br	8a44c <_gp+0xffff0058>
   8ad38:	8880100c 	andi	r2,r17,64
   8ad3c:	10005a26 	beq	r2,zero,8aea8 <___vfiprintf_internal_r+0x1290>
   8ad40:	d9012317 	ldw	r4,1164(sp)
   8ad44:	002b883a 	mov	r21,zero
   8ad48:	2500000b 	ldhu	r20,0(r4)
   8ad4c:	21000104 	addi	r4,r4,4
   8ad50:	d9012315 	stw	r4,1164(sp)
   8ad54:	003ddc06 	br	8a4c8 <_gp+0xffff00d4>
   8ad58:	8880100c 	andi	r2,r17,64
   8ad5c:	10005826 	beq	r2,zero,8aec0 <___vfiprintf_internal_r+0x12a8>
   8ad60:	d9412317 	ldw	r5,1164(sp)
   8ad64:	002b883a 	mov	r21,zero
   8ad68:	0005883a 	mov	r2,zero
   8ad6c:	2d00000b 	ldhu	r20,0(r5)
   8ad70:	29400104 	addi	r5,r5,4
   8ad74:	d9412315 	stw	r5,1164(sp)
   8ad78:	a009883a 	mov	r4,r20
   8ad7c:	003db306 	br	8a44c <_gp+0xffff0058>
   8ad80:	8880040c 	andi	r2,r17,16
   8ad84:	1000411e 	bne	r2,zero,8ae8c <___vfiprintf_internal_r+0x1274>
   8ad88:	8c40100c 	andi	r17,r17,64
   8ad8c:	88008726 	beq	r17,zero,8afac <___vfiprintf_internal_r+0x1394>
   8ad90:	d9412317 	ldw	r5,1164(sp)
   8ad94:	d8c12417 	ldw	r3,1168(sp)
   8ad98:	28800017 	ldw	r2,0(r5)
   8ad9c:	29400104 	addi	r5,r5,4
   8ada0:	d9412315 	stw	r5,1164(sp)
   8ada4:	10c0000d 	sth	r3,0(r2)
   8ada8:	003bd206 	br	89cf4 <_gp+0xfffef900>
   8adac:	48c00007 	ldb	r3,0(r9)
   8adb0:	003bf906 	br	89d98 <_gp+0xfffef9a4>
   8adb4:	8880100c 	andi	r2,r17,64
   8adb8:	10002c26 	beq	r2,zero,8ae6c <___vfiprintf_internal_r+0x1254>
   8adbc:	d9412317 	ldw	r5,1164(sp)
   8adc0:	002b883a 	mov	r21,zero
   8adc4:	00800044 	movi	r2,1
   8adc8:	2d00000b 	ldhu	r20,0(r5)
   8adcc:	29400104 	addi	r5,r5,4
   8add0:	d9412315 	stw	r5,1164(sp)
   8add4:	a009883a 	mov	r4,r20
   8add8:	003d9c06 	br	8a44c <_gp+0xffff0058>
   8addc:	8880100c 	andi	r2,r17,64
   8ade0:	10001b26 	beq	r2,zero,8ae50 <___vfiprintf_internal_r+0x1238>
   8ade4:	d9412317 	ldw	r5,1164(sp)
   8ade8:	2d00000f 	ldh	r20,0(r5)
   8adec:	29400104 	addi	r5,r5,4
   8adf0:	d9412315 	stw	r5,1164(sp)
   8adf4:	a02bd7fa 	srai	r21,r20,31
   8adf8:	a805883a 	mov	r2,r21
   8adfc:	003cbd06 	br	8a0f4 <_gp+0xfffefd00>
   8ae00:	d9012217 	ldw	r4,1160(sp)
   8ae04:	d9412017 	ldw	r5,1152(sp)
   8ae08:	d9811a04 	addi	r6,sp,1128
   8ae0c:	d9c12b15 	stw	r7,1196(sp)
   8ae10:	da412d15 	stw	r9,1204(sp)
   8ae14:	da812c15 	stw	r10,1200(sp)
   8ae18:	0089b040 	call	89b04 <__sprint_r.part.0>
   8ae1c:	d9c12b17 	ldw	r7,1196(sp)
   8ae20:	da412d17 	ldw	r9,1204(sp)
   8ae24:	da812c17 	ldw	r10,1200(sp)
   8ae28:	103eb21e 	bne	r2,zero,8a8f4 <_gp+0xffff0500>
   8ae2c:	d9411b17 	ldw	r5,1132(sp)
   8ae30:	d8c11c17 	ldw	r3,1136(sp)
   8ae34:	d811883a 	mov	r8,sp
   8ae38:	28800044 	addi	r2,r5,1
   8ae3c:	003e7906 	br	8a824 <_gp+0xffff0430>
   8ae40:	1829883a 	mov	r20,r3
   8ae44:	003d7006 	br	8a408 <_gp+0xffff0014>
   8ae48:	900f883a 	mov	r7,r18
   8ae4c:	003e2806 	br	8a6f0 <_gp+0xffff02fc>
   8ae50:	d8812317 	ldw	r2,1164(sp)
   8ae54:	15000017 	ldw	r20,0(r2)
   8ae58:	10800104 	addi	r2,r2,4
   8ae5c:	d8812315 	stw	r2,1164(sp)
   8ae60:	a02bd7fa 	srai	r21,r20,31
   8ae64:	a805883a 	mov	r2,r21
   8ae68:	003ca206 	br	8a0f4 <_gp+0xfffefd00>
   8ae6c:	d8812317 	ldw	r2,1164(sp)
   8ae70:	002b883a 	mov	r21,zero
   8ae74:	15000017 	ldw	r20,0(r2)
   8ae78:	10800104 	addi	r2,r2,4
   8ae7c:	d8812315 	stw	r2,1164(sp)
   8ae80:	a009883a 	mov	r4,r20
   8ae84:	00800044 	movi	r2,1
   8ae88:	003d7006 	br	8a44c <_gp+0xffff0058>
   8ae8c:	d8c12317 	ldw	r3,1164(sp)
   8ae90:	d9012417 	ldw	r4,1168(sp)
   8ae94:	18800017 	ldw	r2,0(r3)
   8ae98:	18c00104 	addi	r3,r3,4
   8ae9c:	d8c12315 	stw	r3,1164(sp)
   8aea0:	11000015 	stw	r4,0(r2)
   8aea4:	003b9306 	br	89cf4 <_gp+0xfffef900>
   8aea8:	d9412317 	ldw	r5,1164(sp)
   8aeac:	002b883a 	mov	r21,zero
   8aeb0:	2d000017 	ldw	r20,0(r5)
   8aeb4:	29400104 	addi	r5,r5,4
   8aeb8:	d9412315 	stw	r5,1164(sp)
   8aebc:	003d8206 	br	8a4c8 <_gp+0xffff00d4>
   8aec0:	d8812317 	ldw	r2,1164(sp)
   8aec4:	002b883a 	mov	r21,zero
   8aec8:	15000017 	ldw	r20,0(r2)
   8aecc:	10800104 	addi	r2,r2,4
   8aed0:	d8812315 	stw	r2,1164(sp)
   8aed4:	a009883a 	mov	r4,r20
   8aed8:	0005883a 	mov	r2,zero
   8aedc:	003d5b06 	br	8a44c <_gp+0xffff0058>
   8aee0:	04bfffc4 	movi	r18,-1
   8aee4:	900d883a 	mov	r6,r18
   8aee8:	003bac06 	br	89d9c <_gp+0xfffef9a8>
   8aeec:	4a400044 	addi	r9,r9,1
   8aef0:	8c400814 	ori	r17,r17,32
   8aef4:	10c00047 	ldb	r3,1(r2)
   8aef8:	003ba706 	br	89d98 <_gp+0xfffef9a4>
   8aefc:	d8c11f17 	ldw	r3,1148(sp)
   8af00:	1dcfc83a 	sub	r7,r3,r23
   8af04:	003c8d06 	br	8a13c <_gp+0xfffefd48>
   8af08:	da012b15 	stw	r8,1196(sp)
   8af0c:	da412d15 	stw	r9,1204(sp)
   8af10:	008280c0 	call	8280c <strlen>
   8af14:	100f883a 	mov	r7,r2
   8af18:	dd811d83 	ldbu	r22,1142(sp)
   8af1c:	dd412315 	stw	r21,1164(sp)
   8af20:	0025883a 	mov	r18,zero
   8af24:	da012b17 	ldw	r8,1196(sp)
   8af28:	da412d17 	ldw	r9,1204(sp)
   8af2c:	003c8306 	br	8a13c <_gp+0xfffefd48>
   8af30:	d9012217 	ldw	r4,1160(sp)
   8af34:	d9412017 	ldw	r5,1152(sp)
   8af38:	d9811a04 	addi	r6,sp,1128
   8af3c:	d9c12b15 	stw	r7,1196(sp)
   8af40:	da412d15 	stw	r9,1204(sp)
   8af44:	0089b040 	call	89b04 <__sprint_r.part.0>
   8af48:	d9c12b17 	ldw	r7,1196(sp)
   8af4c:	da412d17 	ldw	r9,1204(sp)
   8af50:	103e681e 	bne	r2,zero,8a8f4 <_gp+0xffff0500>
   8af54:	d9411b17 	ldw	r5,1132(sp)
   8af58:	d8c11c17 	ldw	r3,1136(sp)
   8af5c:	d811883a 	mov	r8,sp
   8af60:	28800044 	addi	r2,r5,1
   8af64:	003cc506 	br	8a27c <_gp+0xfffefe88>
   8af68:	d9411b17 	ldw	r5,1132(sp)
   8af6c:	01000274 	movhi	r4,9
   8af70:	21024604 	addi	r4,r4,2328
   8af74:	d9012515 	stw	r4,1172(sp)
   8af78:	29400044 	addi	r5,r5,1
   8af7c:	003ca406 	br	8a210 <_gp+0xfffefe1c>
   8af80:	00800184 	movi	r2,6
   8af84:	300f883a 	mov	r7,r6
   8af88:	1180012e 	bgeu	r2,r6,8af90 <___vfiprintf_internal_r+0x1378>
   8af8c:	100f883a 	mov	r7,r2
   8af90:	3829883a 	mov	r20,r7
   8af94:	38001e16 	blt	r7,zero,8b010 <___vfiprintf_internal_r+0x13f8>
   8af98:	dd412315 	stw	r21,1164(sp)
   8af9c:	05c00274 	movhi	r23,9
   8afa0:	bdc1e604 	addi	r23,r23,1944
   8afa4:	0025883a 	mov	r18,zero
   8afa8:	003c6c06 	br	8a15c <_gp+0xfffefd68>
   8afac:	d9012317 	ldw	r4,1164(sp)
   8afb0:	d9412417 	ldw	r5,1168(sp)
   8afb4:	20800017 	ldw	r2,0(r4)
   8afb8:	21000104 	addi	r4,r4,4
   8afbc:	d9012315 	stw	r4,1164(sp)
   8afc0:	11400015 	stw	r5,0(r2)
   8afc4:	003b4b06 	br	89cf4 <_gp+0xfffef900>
   8afc8:	d9411b17 	ldw	r5,1132(sp)
   8afcc:	00800274 	movhi	r2,9
   8afd0:	10824604 	addi	r2,r2,2328
   8afd4:	d8812515 	stw	r2,1172(sp)
   8afd8:	29400044 	addi	r5,r5,1
   8afdc:	003cff06 	br	8a3dc <_gp+0xfffeffe8>
   8afe0:	1009883a 	mov	r4,r2
   8afe4:	05400274 	movhi	r21,9
   8afe8:	ad424204 	addi	r21,r21,2312
   8afec:	003e9906 	br	8aa54 <_gp+0xffff0660>
   8aff0:	900f883a 	mov	r7,r18
   8aff4:	dd811d83 	ldbu	r22,1142(sp)
   8aff8:	dd412315 	stw	r21,1164(sp)
   8affc:	0025883a 	mov	r18,zero
   8b000:	003c4e06 	br	8a13c <_gp+0xfffefd48>
   8b004:	1013883a 	mov	r9,r2
   8b008:	000d883a 	mov	r6,zero
   8b00c:	003b6306 	br	89d9c <_gp+0xfffef9a8>
   8b010:	0029883a 	mov	r20,zero
   8b014:	003fe006 	br	8af98 <_gp+0xffff0ba4>
   8b018:	043fffc4 	movi	r16,-1
   8b01c:	003bf306 	br	89fec <_gp+0xfffefbf8>
   8b020:	d9412317 	ldw	r5,1164(sp)
   8b024:	48c00043 	ldbu	r3,1(r9)
   8b028:	1013883a 	mov	r9,r2
   8b02c:	29800017 	ldw	r6,0(r5)
   8b030:	29000104 	addi	r4,r5,4
   8b034:	d9012315 	stw	r4,1164(sp)
   8b038:	30000416 	blt	r6,zero,8b04c <___vfiprintf_internal_r+0x1434>
   8b03c:	18c03fcc 	andi	r3,r3,255
   8b040:	18c0201c 	xori	r3,r3,128
   8b044:	18ffe004 	addi	r3,r3,-128
   8b048:	003b5306 	br	89d98 <_gp+0xfffef9a4>
   8b04c:	18c03fcc 	andi	r3,r3,255
   8b050:	18c0201c 	xori	r3,r3,128
   8b054:	01bfffc4 	movi	r6,-1
   8b058:	18ffe004 	addi	r3,r3,-128
   8b05c:	003b4e06 	br	89d98 <_gp+0xfffef9a4>

0008b060 <__vfiprintf_internal>:
   8b060:	00800274 	movhi	r2,9
   8b064:	1088ff04 	addi	r2,r2,9212
   8b068:	2007883a 	mov	r3,r4
   8b06c:	11000017 	ldw	r4,0(r2)
   8b070:	2805883a 	mov	r2,r5
   8b074:	300f883a 	mov	r7,r6
   8b078:	180b883a 	mov	r5,r3
   8b07c:	100d883a 	mov	r6,r2
   8b080:	0089c181 	jmpi	89c18 <___vfiprintf_internal_r>

0008b084 <__swbuf_r>:
   8b084:	defffc04 	addi	sp,sp,-16
   8b088:	dc800215 	stw	r18,8(sp)
   8b08c:	dc400115 	stw	r17,4(sp)
   8b090:	dc000015 	stw	r16,0(sp)
   8b094:	dfc00315 	stw	ra,12(sp)
   8b098:	2023883a 	mov	r17,r4
   8b09c:	2825883a 	mov	r18,r5
   8b0a0:	3021883a 	mov	r16,r6
   8b0a4:	20000226 	beq	r4,zero,8b0b0 <__swbuf_r+0x2c>
   8b0a8:	20800e17 	ldw	r2,56(r4)
   8b0ac:	10004d26 	beq	r2,zero,8b1e4 <__swbuf_r+0x160>
   8b0b0:	80800617 	ldw	r2,24(r16)
   8b0b4:	80c0030b 	ldhu	r3,12(r16)
   8b0b8:	80800215 	stw	r2,8(r16)
   8b0bc:	1880020c 	andi	r2,r3,8
   8b0c0:	10004126 	beq	r2,zero,8b1c8 <__swbuf_r+0x144>
   8b0c4:	80800417 	ldw	r2,16(r16)
   8b0c8:	10003f26 	beq	r2,zero,8b1c8 <__swbuf_r+0x144>
   8b0cc:	1908000c 	andi	r4,r3,8192
   8b0d0:	94803fcc 	andi	r18,r18,255
   8b0d4:	20001726 	beq	r4,zero,8b134 <__swbuf_r+0xb0>
   8b0d8:	80c00017 	ldw	r3,0(r16)
   8b0dc:	81000517 	ldw	r4,20(r16)
   8b0e0:	1885c83a 	sub	r2,r3,r2
   8b0e4:	11001d0e 	bge	r2,r4,8b15c <__swbuf_r+0xd8>
   8b0e8:	81000217 	ldw	r4,8(r16)
   8b0ec:	19400044 	addi	r5,r3,1
   8b0f0:	81400015 	stw	r5,0(r16)
   8b0f4:	213fffc4 	addi	r4,r4,-1
   8b0f8:	81000215 	stw	r4,8(r16)
   8b0fc:	1c800005 	stb	r18,0(r3)
   8b100:	80c00517 	ldw	r3,20(r16)
   8b104:	10800044 	addi	r2,r2,1
   8b108:	18802226 	beq	r3,r2,8b194 <__swbuf_r+0x110>
   8b10c:	8080030b 	ldhu	r2,12(r16)
   8b110:	1080004c 	andi	r2,r2,1
   8b114:	1000251e 	bne	r2,zero,8b1ac <__swbuf_r+0x128>
   8b118:	9005883a 	mov	r2,r18
   8b11c:	dfc00317 	ldw	ra,12(sp)
   8b120:	dc800217 	ldw	r18,8(sp)
   8b124:	dc400117 	ldw	r17,4(sp)
   8b128:	dc000017 	ldw	r16,0(sp)
   8b12c:	dec00404 	addi	sp,sp,16
   8b130:	f800283a 	ret
   8b134:	81401917 	ldw	r5,100(r16)
   8b138:	18c80014 	ori	r3,r3,8192
   8b13c:	0137ffc4 	movi	r4,-8193
   8b140:	2908703a 	and	r4,r5,r4
   8b144:	80c0030d 	sth	r3,12(r16)
   8b148:	80c00017 	ldw	r3,0(r16)
   8b14c:	81001915 	stw	r4,100(r16)
   8b150:	81000517 	ldw	r4,20(r16)
   8b154:	1885c83a 	sub	r2,r3,r2
   8b158:	113fe316 	blt	r2,r4,8b0e8 <_gp+0xffff0cf4>
   8b15c:	8809883a 	mov	r4,r17
   8b160:	800b883a 	mov	r5,r16
   8b164:	00863ac0 	call	863ac <_fflush_r>
   8b168:	10000e1e 	bne	r2,zero,8b1a4 <__swbuf_r+0x120>
   8b16c:	80c00017 	ldw	r3,0(r16)
   8b170:	81000217 	ldw	r4,8(r16)
   8b174:	00800044 	movi	r2,1
   8b178:	19400044 	addi	r5,r3,1
   8b17c:	213fffc4 	addi	r4,r4,-1
   8b180:	81400015 	stw	r5,0(r16)
   8b184:	81000215 	stw	r4,8(r16)
   8b188:	1c800005 	stb	r18,0(r3)
   8b18c:	80c00517 	ldw	r3,20(r16)
   8b190:	18bfde1e 	bne	r3,r2,8b10c <_gp+0xffff0d18>
   8b194:	8809883a 	mov	r4,r17
   8b198:	800b883a 	mov	r5,r16
   8b19c:	00863ac0 	call	863ac <_fflush_r>
   8b1a0:	103fdd26 	beq	r2,zero,8b118 <_gp+0xffff0d24>
   8b1a4:	00bfffc4 	movi	r2,-1
   8b1a8:	003fdc06 	br	8b11c <_gp+0xffff0d28>
   8b1ac:	00800284 	movi	r2,10
   8b1b0:	90bfd91e 	bne	r18,r2,8b118 <_gp+0xffff0d24>
   8b1b4:	8809883a 	mov	r4,r17
   8b1b8:	800b883a 	mov	r5,r16
   8b1bc:	00863ac0 	call	863ac <_fflush_r>
   8b1c0:	103fd526 	beq	r2,zero,8b118 <_gp+0xffff0d24>
   8b1c4:	003ff706 	br	8b1a4 <_gp+0xffff0db0>
   8b1c8:	8809883a 	mov	r4,r17
   8b1cc:	800b883a 	mov	r5,r16
   8b1d0:	0084a100 	call	84a10 <__swsetup_r>
   8b1d4:	80c0030b 	ldhu	r3,12(r16)
   8b1d8:	1000041e 	bne	r2,zero,8b1ec <__swbuf_r+0x168>
   8b1dc:	80800417 	ldw	r2,16(r16)
   8b1e0:	003fba06 	br	8b0cc <_gp+0xffff0cd8>
   8b1e4:	00866cc0 	call	866cc <__sinit>
   8b1e8:	003fb106 	br	8b0b0 <_gp+0xffff0cbc>
   8b1ec:	18c01014 	ori	r3,r3,64
   8b1f0:	80c0030d 	sth	r3,12(r16)
   8b1f4:	00c00244 	movi	r3,9
   8b1f8:	00bfffc4 	movi	r2,-1
   8b1fc:	88c00015 	stw	r3,0(r17)
   8b200:	003fc606 	br	8b11c <_gp+0xffff0d28>

0008b204 <__swbuf>:
   8b204:	00c00274 	movhi	r3,9
   8b208:	18c8ff04 	addi	r3,r3,9212
   8b20c:	2005883a 	mov	r2,r4
   8b210:	19000017 	ldw	r4,0(r3)
   8b214:	280d883a 	mov	r6,r5
   8b218:	100b883a 	mov	r5,r2
   8b21c:	008b0841 	jmpi	8b084 <__swbuf_r>

0008b220 <_write_r>:
   8b220:	defffd04 	addi	sp,sp,-12
   8b224:	dc400115 	stw	r17,4(sp)
   8b228:	dc000015 	stw	r16,0(sp)
   8b22c:	2023883a 	mov	r17,r4
   8b230:	04000274 	movhi	r16,9
   8b234:	840fd004 	addi	r16,r16,16192
   8b238:	2809883a 	mov	r4,r5
   8b23c:	300b883a 	mov	r5,r6
   8b240:	380d883a 	mov	r6,r7
   8b244:	dfc00215 	stw	ra,8(sp)
   8b248:	80000015 	stw	zero,0(r16)
   8b24c:	008e8d80 	call	8e8d8 <write>
   8b250:	00ffffc4 	movi	r3,-1
   8b254:	10c00526 	beq	r2,r3,8b26c <_write_r+0x4c>
   8b258:	dfc00217 	ldw	ra,8(sp)
   8b25c:	dc400117 	ldw	r17,4(sp)
   8b260:	dc000017 	ldw	r16,0(sp)
   8b264:	dec00304 	addi	sp,sp,12
   8b268:	f800283a 	ret
   8b26c:	80c00017 	ldw	r3,0(r16)
   8b270:	183ff926 	beq	r3,zero,8b258 <_gp+0xffff0e64>
   8b274:	88c00015 	stw	r3,0(r17)
   8b278:	dfc00217 	ldw	ra,8(sp)
   8b27c:	dc400117 	ldw	r17,4(sp)
   8b280:	dc000017 	ldw	r16,0(sp)
   8b284:	dec00304 	addi	sp,sp,12
   8b288:	f800283a 	ret

0008b28c <_close_r>:
   8b28c:	defffd04 	addi	sp,sp,-12
   8b290:	dc400115 	stw	r17,4(sp)
   8b294:	dc000015 	stw	r16,0(sp)
   8b298:	2023883a 	mov	r17,r4
   8b29c:	04000274 	movhi	r16,9
   8b2a0:	840fd004 	addi	r16,r16,16192
   8b2a4:	2809883a 	mov	r4,r5
   8b2a8:	dfc00215 	stw	ra,8(sp)
   8b2ac:	80000015 	stw	zero,0(r16)
   8b2b0:	008e2f80 	call	8e2f8 <close>
   8b2b4:	00ffffc4 	movi	r3,-1
   8b2b8:	10c00526 	beq	r2,r3,8b2d0 <_close_r+0x44>
   8b2bc:	dfc00217 	ldw	ra,8(sp)
   8b2c0:	dc400117 	ldw	r17,4(sp)
   8b2c4:	dc000017 	ldw	r16,0(sp)
   8b2c8:	dec00304 	addi	sp,sp,12
   8b2cc:	f800283a 	ret
   8b2d0:	80c00017 	ldw	r3,0(r16)
   8b2d4:	183ff926 	beq	r3,zero,8b2bc <_gp+0xffff0ec8>
   8b2d8:	88c00015 	stw	r3,0(r17)
   8b2dc:	dfc00217 	ldw	ra,8(sp)
   8b2e0:	dc400117 	ldw	r17,4(sp)
   8b2e4:	dc000017 	ldw	r16,0(sp)
   8b2e8:	dec00304 	addi	sp,sp,12
   8b2ec:	f800283a 	ret

0008b2f0 <_calloc_r>:
   8b2f0:	defffe04 	addi	sp,sp,-8
   8b2f4:	dc000015 	stw	r16,0(sp)
   8b2f8:	2021883a 	mov	r16,r4
   8b2fc:	2809883a 	mov	r4,r5
   8b300:	300b883a 	mov	r5,r6
   8b304:	dfc00115 	stw	ra,4(sp)
   8b308:	00825800 	call	82580 <__mulsi3>
   8b30c:	8009883a 	mov	r4,r16
   8b310:	100b883a 	mov	r5,r2
   8b314:	00876640 	call	87664 <_malloc_r>
   8b318:	1021883a 	mov	r16,r2
   8b31c:	10002826 	beq	r2,zero,8b3c0 <_calloc_r+0xd0>
   8b320:	11bfff17 	ldw	r6,-4(r2)
   8b324:	00ffff04 	movi	r3,-4
   8b328:	00800904 	movi	r2,36
   8b32c:	30cc703a 	and	r6,r6,r3
   8b330:	30cd883a 	add	r6,r6,r3
   8b334:	11801436 	bltu	r2,r6,8b388 <_calloc_r+0x98>
   8b338:	00c004c4 	movi	r3,19
   8b33c:	19800936 	bltu	r3,r6,8b364 <_calloc_r+0x74>
   8b340:	8005883a 	mov	r2,r16
   8b344:	10000015 	stw	zero,0(r2)
   8b348:	10000115 	stw	zero,4(r2)
   8b34c:	10000215 	stw	zero,8(r2)
   8b350:	8005883a 	mov	r2,r16
   8b354:	dfc00117 	ldw	ra,4(sp)
   8b358:	dc000017 	ldw	r16,0(sp)
   8b35c:	dec00204 	addi	sp,sp,8
   8b360:	f800283a 	ret
   8b364:	80000015 	stw	zero,0(r16)
   8b368:	80000115 	stw	zero,4(r16)
   8b36c:	00c006c4 	movi	r3,27
   8b370:	19800d2e 	bgeu	r3,r6,8b3a8 <_calloc_r+0xb8>
   8b374:	80000215 	stw	zero,8(r16)
   8b378:	80000315 	stw	zero,12(r16)
   8b37c:	30800c26 	beq	r6,r2,8b3b0 <_calloc_r+0xc0>
   8b380:	80800404 	addi	r2,r16,16
   8b384:	003fef06 	br	8b344 <_gp+0xffff0f50>
   8b388:	8009883a 	mov	r4,r16
   8b38c:	000b883a 	mov	r5,zero
   8b390:	008804c0 	call	8804c <memset>
   8b394:	8005883a 	mov	r2,r16
   8b398:	dfc00117 	ldw	ra,4(sp)
   8b39c:	dc000017 	ldw	r16,0(sp)
   8b3a0:	dec00204 	addi	sp,sp,8
   8b3a4:	f800283a 	ret
   8b3a8:	80800204 	addi	r2,r16,8
   8b3ac:	003fe506 	br	8b344 <_gp+0xffff0f50>
   8b3b0:	80000415 	stw	zero,16(r16)
   8b3b4:	80800604 	addi	r2,r16,24
   8b3b8:	80000515 	stw	zero,20(r16)
   8b3bc:	003fe106 	br	8b344 <_gp+0xffff0f50>
   8b3c0:	0005883a 	mov	r2,zero
   8b3c4:	003fe306 	br	8b354 <_gp+0xffff0f60>

0008b3c8 <_fclose_r>:
   8b3c8:	defffc04 	addi	sp,sp,-16
   8b3cc:	dc000015 	stw	r16,0(sp)
   8b3d0:	dfc00315 	stw	ra,12(sp)
   8b3d4:	dc800215 	stw	r18,8(sp)
   8b3d8:	dc400115 	stw	r17,4(sp)
   8b3dc:	2821883a 	mov	r16,r5
   8b3e0:	28003126 	beq	r5,zero,8b4a8 <_fclose_r+0xe0>
   8b3e4:	2023883a 	mov	r17,r4
   8b3e8:	00869840 	call	86984 <__sfp_lock_acquire>
   8b3ec:	88000226 	beq	r17,zero,8b3f8 <_fclose_r+0x30>
   8b3f0:	88800e17 	ldw	r2,56(r17)
   8b3f4:	10003326 	beq	r2,zero,8b4c4 <_fclose_r+0xfc>
   8b3f8:	8080030f 	ldh	r2,12(r16)
   8b3fc:	10002226 	beq	r2,zero,8b488 <_fclose_r+0xc0>
   8b400:	8809883a 	mov	r4,r17
   8b404:	800b883a 	mov	r5,r16
   8b408:	00863ac0 	call	863ac <_fflush_r>
   8b40c:	80c00b17 	ldw	r3,44(r16)
   8b410:	1025883a 	mov	r18,r2
   8b414:	18000426 	beq	r3,zero,8b428 <_fclose_r+0x60>
   8b418:	81400717 	ldw	r5,28(r16)
   8b41c:	8809883a 	mov	r4,r17
   8b420:	183ee83a 	callr	r3
   8b424:	10003016 	blt	r2,zero,8b4e8 <_fclose_r+0x120>
   8b428:	8080030b 	ldhu	r2,12(r16)
   8b42c:	1080200c 	andi	r2,r2,128
   8b430:	1000291e 	bne	r2,zero,8b4d8 <_fclose_r+0x110>
   8b434:	81400c17 	ldw	r5,48(r16)
   8b438:	28000526 	beq	r5,zero,8b450 <_fclose_r+0x88>
   8b43c:	80801004 	addi	r2,r16,64
   8b440:	28800226 	beq	r5,r2,8b44c <_fclose_r+0x84>
   8b444:	8809883a 	mov	r4,r17
   8b448:	0086b000 	call	86b00 <_free_r>
   8b44c:	80000c15 	stw	zero,48(r16)
   8b450:	81401117 	ldw	r5,68(r16)
   8b454:	28000326 	beq	r5,zero,8b464 <_fclose_r+0x9c>
   8b458:	8809883a 	mov	r4,r17
   8b45c:	0086b000 	call	86b00 <_free_r>
   8b460:	80001115 	stw	zero,68(r16)
   8b464:	8000030d 	sth	zero,12(r16)
   8b468:	00869880 	call	86988 <__sfp_lock_release>
   8b46c:	9005883a 	mov	r2,r18
   8b470:	dfc00317 	ldw	ra,12(sp)
   8b474:	dc800217 	ldw	r18,8(sp)
   8b478:	dc400117 	ldw	r17,4(sp)
   8b47c:	dc000017 	ldw	r16,0(sp)
   8b480:	dec00404 	addi	sp,sp,16
   8b484:	f800283a 	ret
   8b488:	00869880 	call	86988 <__sfp_lock_release>
   8b48c:	0005883a 	mov	r2,zero
   8b490:	dfc00317 	ldw	ra,12(sp)
   8b494:	dc800217 	ldw	r18,8(sp)
   8b498:	dc400117 	ldw	r17,4(sp)
   8b49c:	dc000017 	ldw	r16,0(sp)
   8b4a0:	dec00404 	addi	sp,sp,16
   8b4a4:	f800283a 	ret
   8b4a8:	0005883a 	mov	r2,zero
   8b4ac:	dfc00317 	ldw	ra,12(sp)
   8b4b0:	dc800217 	ldw	r18,8(sp)
   8b4b4:	dc400117 	ldw	r17,4(sp)
   8b4b8:	dc000017 	ldw	r16,0(sp)
   8b4bc:	dec00404 	addi	sp,sp,16
   8b4c0:	f800283a 	ret
   8b4c4:	8809883a 	mov	r4,r17
   8b4c8:	00866cc0 	call	866cc <__sinit>
   8b4cc:	8080030f 	ldh	r2,12(r16)
   8b4d0:	103fcb1e 	bne	r2,zero,8b400 <_gp+0xffff100c>
   8b4d4:	003fec06 	br	8b488 <_gp+0xffff1094>
   8b4d8:	81400417 	ldw	r5,16(r16)
   8b4dc:	8809883a 	mov	r4,r17
   8b4e0:	0086b000 	call	86b00 <_free_r>
   8b4e4:	003fd306 	br	8b434 <_gp+0xffff1040>
   8b4e8:	04bfffc4 	movi	r18,-1
   8b4ec:	003fce06 	br	8b428 <_gp+0xffff1034>

0008b4f0 <fclose>:
   8b4f0:	00800274 	movhi	r2,9
   8b4f4:	1088ff04 	addi	r2,r2,9212
   8b4f8:	200b883a 	mov	r5,r4
   8b4fc:	11000017 	ldw	r4,0(r2)
   8b500:	008b3c81 	jmpi	8b3c8 <_fclose_r>

0008b504 <_fputwc_r>:
   8b504:	3080030b 	ldhu	r2,12(r6)
   8b508:	defff804 	addi	sp,sp,-32
   8b50c:	dcc00415 	stw	r19,16(sp)
   8b510:	dc800315 	stw	r18,12(sp)
   8b514:	dc000115 	stw	r16,4(sp)
   8b518:	dfc00715 	stw	ra,28(sp)
   8b51c:	dd400615 	stw	r21,24(sp)
   8b520:	dd000515 	stw	r20,20(sp)
   8b524:	dc400215 	stw	r17,8(sp)
   8b528:	10c8000c 	andi	r3,r2,8192
   8b52c:	3021883a 	mov	r16,r6
   8b530:	2027883a 	mov	r19,r4
   8b534:	2825883a 	mov	r18,r5
   8b538:	1800051e 	bne	r3,zero,8b550 <_fputwc_r+0x4c>
   8b53c:	30c01917 	ldw	r3,100(r6)
   8b540:	10880014 	ori	r2,r2,8192
   8b544:	3080030d 	sth	r2,12(r6)
   8b548:	18880014 	ori	r2,r3,8192
   8b54c:	30801915 	stw	r2,100(r6)
   8b550:	00874580 	call	87458 <__locale_mb_cur_max>
   8b554:	00c00044 	movi	r3,1
   8b558:	10c03e26 	beq	r2,r3,8b654 <_fputwc_r+0x150>
   8b55c:	9809883a 	mov	r4,r19
   8b560:	d80b883a 	mov	r5,sp
   8b564:	900d883a 	mov	r6,r18
   8b568:	81c01704 	addi	r7,r16,92
   8b56c:	008b8a40 	call	8b8a4 <_wcrtomb_r>
   8b570:	1029883a 	mov	r20,r2
   8b574:	00bfffc4 	movi	r2,-1
   8b578:	a0802026 	beq	r20,r2,8b5fc <_fputwc_r+0xf8>
   8b57c:	d9400003 	ldbu	r5,0(sp)
   8b580:	a0001c26 	beq	r20,zero,8b5f4 <_fputwc_r+0xf0>
   8b584:	0023883a 	mov	r17,zero
   8b588:	05400284 	movi	r21,10
   8b58c:	00000906 	br	8b5b4 <_fputwc_r+0xb0>
   8b590:	80c00017 	ldw	r3,0(r16)
   8b594:	19400005 	stb	r5,0(r3)
   8b598:	80c00017 	ldw	r3,0(r16)
   8b59c:	18c00044 	addi	r3,r3,1
   8b5a0:	80c00015 	stw	r3,0(r16)
   8b5a4:	8c400044 	addi	r17,r17,1
   8b5a8:	dc47883a 	add	r3,sp,r17
   8b5ac:	8d00112e 	bgeu	r17,r20,8b5f4 <_fputwc_r+0xf0>
   8b5b0:	19400003 	ldbu	r5,0(r3)
   8b5b4:	80c00217 	ldw	r3,8(r16)
   8b5b8:	18ffffc4 	addi	r3,r3,-1
   8b5bc:	80c00215 	stw	r3,8(r16)
   8b5c0:	183ff30e 	bge	r3,zero,8b590 <_gp+0xffff119c>
   8b5c4:	80800617 	ldw	r2,24(r16)
   8b5c8:	18801916 	blt	r3,r2,8b630 <_fputwc_r+0x12c>
   8b5cc:	80800017 	ldw	r2,0(r16)
   8b5d0:	11400005 	stb	r5,0(r2)
   8b5d4:	80800017 	ldw	r2,0(r16)
   8b5d8:	10c00003 	ldbu	r3,0(r2)
   8b5dc:	10800044 	addi	r2,r2,1
   8b5e0:	1d402326 	beq	r3,r21,8b670 <_fputwc_r+0x16c>
   8b5e4:	8c400044 	addi	r17,r17,1
   8b5e8:	80800015 	stw	r2,0(r16)
   8b5ec:	dc47883a 	add	r3,sp,r17
   8b5f0:	8d3fef36 	bltu	r17,r20,8b5b0 <_gp+0xffff11bc>
   8b5f4:	9005883a 	mov	r2,r18
   8b5f8:	00000406 	br	8b60c <_fputwc_r+0x108>
   8b5fc:	80c0030b 	ldhu	r3,12(r16)
   8b600:	a005883a 	mov	r2,r20
   8b604:	18c01014 	ori	r3,r3,64
   8b608:	80c0030d 	sth	r3,12(r16)
   8b60c:	dfc00717 	ldw	ra,28(sp)
   8b610:	dd400617 	ldw	r21,24(sp)
   8b614:	dd000517 	ldw	r20,20(sp)
   8b618:	dcc00417 	ldw	r19,16(sp)
   8b61c:	dc800317 	ldw	r18,12(sp)
   8b620:	dc400217 	ldw	r17,8(sp)
   8b624:	dc000117 	ldw	r16,4(sp)
   8b628:	dec00804 	addi	sp,sp,32
   8b62c:	f800283a 	ret
   8b630:	9809883a 	mov	r4,r19
   8b634:	29403fcc 	andi	r5,r5,255
   8b638:	800d883a 	mov	r6,r16
   8b63c:	008b0840 	call	8b084 <__swbuf_r>
   8b640:	10bfffe0 	cmpeqi	r2,r2,-1
   8b644:	10803fcc 	andi	r2,r2,255
   8b648:	103fd626 	beq	r2,zero,8b5a4 <_gp+0xffff11b0>
   8b64c:	00bfffc4 	movi	r2,-1
   8b650:	003fee06 	br	8b60c <_gp+0xffff1218>
   8b654:	90ffffc4 	addi	r3,r18,-1
   8b658:	01003f84 	movi	r4,254
   8b65c:	20ffbf36 	bltu	r4,r3,8b55c <_gp+0xffff1168>
   8b660:	900b883a 	mov	r5,r18
   8b664:	dc800005 	stb	r18,0(sp)
   8b668:	1029883a 	mov	r20,r2
   8b66c:	003fc506 	br	8b584 <_gp+0xffff1190>
   8b670:	9809883a 	mov	r4,r19
   8b674:	a80b883a 	mov	r5,r21
   8b678:	800d883a 	mov	r6,r16
   8b67c:	008b0840 	call	8b084 <__swbuf_r>
   8b680:	10bfffe0 	cmpeqi	r2,r2,-1
   8b684:	003fef06 	br	8b644 <_gp+0xffff1250>

0008b688 <fputwc>:
   8b688:	defffc04 	addi	sp,sp,-16
   8b68c:	dc000115 	stw	r16,4(sp)
   8b690:	04000274 	movhi	r16,9
   8b694:	8408ff04 	addi	r16,r16,9212
   8b698:	80800017 	ldw	r2,0(r16)
   8b69c:	dc400215 	stw	r17,8(sp)
   8b6a0:	dfc00315 	stw	ra,12(sp)
   8b6a4:	2023883a 	mov	r17,r4
   8b6a8:	280d883a 	mov	r6,r5
   8b6ac:	10000d26 	beq	r2,zero,8b6e4 <fputwc+0x5c>
   8b6b0:	10c00e17 	ldw	r3,56(r2)
   8b6b4:	1009883a 	mov	r4,r2
   8b6b8:	1800041e 	bne	r3,zero,8b6cc <fputwc+0x44>
   8b6bc:	d9400015 	stw	r5,0(sp)
   8b6c0:	00866cc0 	call	866cc <__sinit>
   8b6c4:	81000017 	ldw	r4,0(r16)
   8b6c8:	d9800017 	ldw	r6,0(sp)
   8b6cc:	880b883a 	mov	r5,r17
   8b6d0:	dfc00317 	ldw	ra,12(sp)
   8b6d4:	dc400217 	ldw	r17,8(sp)
   8b6d8:	dc000117 	ldw	r16,4(sp)
   8b6dc:	dec00404 	addi	sp,sp,16
   8b6e0:	008b5041 	jmpi	8b504 <_fputwc_r>
   8b6e4:	0009883a 	mov	r4,zero
   8b6e8:	880b883a 	mov	r5,r17
   8b6ec:	dfc00317 	ldw	ra,12(sp)
   8b6f0:	dc400217 	ldw	r17,8(sp)
   8b6f4:	dc000117 	ldw	r16,4(sp)
   8b6f8:	dec00404 	addi	sp,sp,16
   8b6fc:	008b5041 	jmpi	8b504 <_fputwc_r>

0008b700 <_fstat_r>:
   8b700:	defffd04 	addi	sp,sp,-12
   8b704:	dc400115 	stw	r17,4(sp)
   8b708:	dc000015 	stw	r16,0(sp)
   8b70c:	2023883a 	mov	r17,r4
   8b710:	04000274 	movhi	r16,9
   8b714:	840fd004 	addi	r16,r16,16192
   8b718:	2809883a 	mov	r4,r5
   8b71c:	300b883a 	mov	r5,r6
   8b720:	dfc00215 	stw	ra,8(sp)
   8b724:	80000015 	stw	zero,0(r16)
   8b728:	008e3e40 	call	8e3e4 <fstat>
   8b72c:	00ffffc4 	movi	r3,-1
   8b730:	10c00526 	beq	r2,r3,8b748 <_fstat_r+0x48>
   8b734:	dfc00217 	ldw	ra,8(sp)
   8b738:	dc400117 	ldw	r17,4(sp)
   8b73c:	dc000017 	ldw	r16,0(sp)
   8b740:	dec00304 	addi	sp,sp,12
   8b744:	f800283a 	ret
   8b748:	80c00017 	ldw	r3,0(r16)
   8b74c:	183ff926 	beq	r3,zero,8b734 <_gp+0xffff1340>
   8b750:	88c00015 	stw	r3,0(r17)
   8b754:	dfc00217 	ldw	ra,8(sp)
   8b758:	dc400117 	ldw	r17,4(sp)
   8b75c:	dc000017 	ldw	r16,0(sp)
   8b760:	dec00304 	addi	sp,sp,12
   8b764:	f800283a 	ret

0008b768 <_isatty_r>:
   8b768:	defffd04 	addi	sp,sp,-12
   8b76c:	dc400115 	stw	r17,4(sp)
   8b770:	dc000015 	stw	r16,0(sp)
   8b774:	2023883a 	mov	r17,r4
   8b778:	04000274 	movhi	r16,9
   8b77c:	840fd004 	addi	r16,r16,16192
   8b780:	2809883a 	mov	r4,r5
   8b784:	dfc00215 	stw	ra,8(sp)
   8b788:	80000015 	stw	zero,0(r16)
   8b78c:	008e4780 	call	8e478 <isatty>
   8b790:	00ffffc4 	movi	r3,-1
   8b794:	10c00526 	beq	r2,r3,8b7ac <_isatty_r+0x44>
   8b798:	dfc00217 	ldw	ra,8(sp)
   8b79c:	dc400117 	ldw	r17,4(sp)
   8b7a0:	dc000017 	ldw	r16,0(sp)
   8b7a4:	dec00304 	addi	sp,sp,12
   8b7a8:	f800283a 	ret
   8b7ac:	80c00017 	ldw	r3,0(r16)
   8b7b0:	183ff926 	beq	r3,zero,8b798 <_gp+0xffff13a4>
   8b7b4:	88c00015 	stw	r3,0(r17)
   8b7b8:	dfc00217 	ldw	ra,8(sp)
   8b7bc:	dc400117 	ldw	r17,4(sp)
   8b7c0:	dc000017 	ldw	r16,0(sp)
   8b7c4:	dec00304 	addi	sp,sp,12
   8b7c8:	f800283a 	ret

0008b7cc <_lseek_r>:
   8b7cc:	defffd04 	addi	sp,sp,-12
   8b7d0:	dc400115 	stw	r17,4(sp)
   8b7d4:	dc000015 	stw	r16,0(sp)
   8b7d8:	2023883a 	mov	r17,r4
   8b7dc:	04000274 	movhi	r16,9
   8b7e0:	840fd004 	addi	r16,r16,16192
   8b7e4:	2809883a 	mov	r4,r5
   8b7e8:	300b883a 	mov	r5,r6
   8b7ec:	380d883a 	mov	r6,r7
   8b7f0:	dfc00215 	stw	ra,8(sp)
   8b7f4:	80000015 	stw	zero,0(r16)
   8b7f8:	008e6340 	call	8e634 <lseek>
   8b7fc:	00ffffc4 	movi	r3,-1
   8b800:	10c00526 	beq	r2,r3,8b818 <_lseek_r+0x4c>
   8b804:	dfc00217 	ldw	ra,8(sp)
   8b808:	dc400117 	ldw	r17,4(sp)
   8b80c:	dc000017 	ldw	r16,0(sp)
   8b810:	dec00304 	addi	sp,sp,12
   8b814:	f800283a 	ret
   8b818:	80c00017 	ldw	r3,0(r16)
   8b81c:	183ff926 	beq	r3,zero,8b804 <_gp+0xffff1410>
   8b820:	88c00015 	stw	r3,0(r17)
   8b824:	dfc00217 	ldw	ra,8(sp)
   8b828:	dc400117 	ldw	r17,4(sp)
   8b82c:	dc000017 	ldw	r16,0(sp)
   8b830:	dec00304 	addi	sp,sp,12
   8b834:	f800283a 	ret

0008b838 <_read_r>:
   8b838:	defffd04 	addi	sp,sp,-12
   8b83c:	dc400115 	stw	r17,4(sp)
   8b840:	dc000015 	stw	r16,0(sp)
   8b844:	2023883a 	mov	r17,r4
   8b848:	04000274 	movhi	r16,9
   8b84c:	840fd004 	addi	r16,r16,16192
   8b850:	2809883a 	mov	r4,r5
   8b854:	300b883a 	mov	r5,r6
   8b858:	380d883a 	mov	r6,r7
   8b85c:	dfc00215 	stw	ra,8(sp)
   8b860:	80000015 	stw	zero,0(r16)
   8b864:	008e7340 	call	8e734 <read>
   8b868:	00ffffc4 	movi	r3,-1
   8b86c:	10c00526 	beq	r2,r3,8b884 <_read_r+0x4c>
   8b870:	dfc00217 	ldw	ra,8(sp)
   8b874:	dc400117 	ldw	r17,4(sp)
   8b878:	dc000017 	ldw	r16,0(sp)
   8b87c:	dec00304 	addi	sp,sp,12
   8b880:	f800283a 	ret
   8b884:	80c00017 	ldw	r3,0(r16)
   8b888:	183ff926 	beq	r3,zero,8b870 <_gp+0xffff147c>
   8b88c:	88c00015 	stw	r3,0(r17)
   8b890:	dfc00217 	ldw	ra,8(sp)
   8b894:	dc400117 	ldw	r17,4(sp)
   8b898:	dc000017 	ldw	r16,0(sp)
   8b89c:	dec00304 	addi	sp,sp,12
   8b8a0:	f800283a 	ret

0008b8a4 <_wcrtomb_r>:
   8b8a4:	defff604 	addi	sp,sp,-40
   8b8a8:	dc800815 	stw	r18,32(sp)
   8b8ac:	dc400715 	stw	r17,28(sp)
   8b8b0:	dc000615 	stw	r16,24(sp)
   8b8b4:	00800274 	movhi	r2,9
   8b8b8:	10890304 	addi	r2,r2,9228
   8b8bc:	dfc00915 	stw	ra,36(sp)
   8b8c0:	2021883a 	mov	r16,r4
   8b8c4:	3823883a 	mov	r17,r7
   8b8c8:	14800017 	ldw	r18,0(r2)
   8b8cc:	28001426 	beq	r5,zero,8b920 <_wcrtomb_r+0x7c>
   8b8d0:	d9400415 	stw	r5,16(sp)
   8b8d4:	d9800515 	stw	r6,20(sp)
   8b8d8:	008744c0 	call	8744c <__locale_charset>
   8b8dc:	d9400417 	ldw	r5,16(sp)
   8b8e0:	d9800517 	ldw	r6,20(sp)
   8b8e4:	8009883a 	mov	r4,r16
   8b8e8:	dc400015 	stw	r17,0(sp)
   8b8ec:	100f883a 	mov	r7,r2
   8b8f0:	903ee83a 	callr	r18
   8b8f4:	00ffffc4 	movi	r3,-1
   8b8f8:	10c0031e 	bne	r2,r3,8b908 <_wcrtomb_r+0x64>
   8b8fc:	88000015 	stw	zero,0(r17)
   8b900:	00c02284 	movi	r3,138
   8b904:	80c00015 	stw	r3,0(r16)
   8b908:	dfc00917 	ldw	ra,36(sp)
   8b90c:	dc800817 	ldw	r18,32(sp)
   8b910:	dc400717 	ldw	r17,28(sp)
   8b914:	dc000617 	ldw	r16,24(sp)
   8b918:	dec00a04 	addi	sp,sp,40
   8b91c:	f800283a 	ret
   8b920:	008744c0 	call	8744c <__locale_charset>
   8b924:	8009883a 	mov	r4,r16
   8b928:	dc400015 	stw	r17,0(sp)
   8b92c:	d9400104 	addi	r5,sp,4
   8b930:	000d883a 	mov	r6,zero
   8b934:	100f883a 	mov	r7,r2
   8b938:	903ee83a 	callr	r18
   8b93c:	003fed06 	br	8b8f4 <_gp+0xffff1500>

0008b940 <wcrtomb>:
   8b940:	defff504 	addi	sp,sp,-44
   8b944:	dc400515 	stw	r17,20(sp)
   8b948:	dc000415 	stw	r16,16(sp)
   8b94c:	dfc00a15 	stw	ra,40(sp)
   8b950:	dd400915 	stw	r21,36(sp)
   8b954:	dd000815 	stw	r20,32(sp)
   8b958:	dcc00715 	stw	r19,28(sp)
   8b95c:	dc800615 	stw	r18,24(sp)
   8b960:	2021883a 	mov	r16,r4
   8b964:	3023883a 	mov	r17,r6
   8b968:	20001d26 	beq	r4,zero,8b9e0 <wcrtomb+0xa0>
   8b96c:	04800274 	movhi	r18,9
   8b970:	9488ff04 	addi	r18,r18,9212
   8b974:	95400017 	ldw	r21,0(r18)
   8b978:	00800274 	movhi	r2,9
   8b97c:	10890304 	addi	r2,r2,9228
   8b980:	15000017 	ldw	r20,0(r2)
   8b984:	2827883a 	mov	r19,r5
   8b988:	008744c0 	call	8744c <__locale_charset>
   8b98c:	a809883a 	mov	r4,r21
   8b990:	dc400015 	stw	r17,0(sp)
   8b994:	800b883a 	mov	r5,r16
   8b998:	980d883a 	mov	r6,r19
   8b99c:	100f883a 	mov	r7,r2
   8b9a0:	a03ee83a 	callr	r20
   8b9a4:	00ffffc4 	movi	r3,-1
   8b9a8:	10c0041e 	bne	r2,r3,8b9bc <wcrtomb+0x7c>
   8b9ac:	90c00017 	ldw	r3,0(r18)
   8b9b0:	01002284 	movi	r4,138
   8b9b4:	88000015 	stw	zero,0(r17)
   8b9b8:	19000015 	stw	r4,0(r3)
   8b9bc:	dfc00a17 	ldw	ra,40(sp)
   8b9c0:	dd400917 	ldw	r21,36(sp)
   8b9c4:	dd000817 	ldw	r20,32(sp)
   8b9c8:	dcc00717 	ldw	r19,28(sp)
   8b9cc:	dc800617 	ldw	r18,24(sp)
   8b9d0:	dc400517 	ldw	r17,20(sp)
   8b9d4:	dc000417 	ldw	r16,16(sp)
   8b9d8:	dec00b04 	addi	sp,sp,44
   8b9dc:	f800283a 	ret
   8b9e0:	04800274 	movhi	r18,9
   8b9e4:	9488ff04 	addi	r18,r18,9212
   8b9e8:	94c00017 	ldw	r19,0(r18)
   8b9ec:	00800274 	movhi	r2,9
   8b9f0:	10890304 	addi	r2,r2,9228
   8b9f4:	14000017 	ldw	r16,0(r2)
   8b9f8:	008744c0 	call	8744c <__locale_charset>
   8b9fc:	9809883a 	mov	r4,r19
   8ba00:	dc400015 	stw	r17,0(sp)
   8ba04:	d9400104 	addi	r5,sp,4
   8ba08:	000d883a 	mov	r6,zero
   8ba0c:	100f883a 	mov	r7,r2
   8ba10:	803ee83a 	callr	r16
   8ba14:	003fe306 	br	8b9a4 <_gp+0xffff15b0>

0008ba18 <__ascii_wctomb>:
   8ba18:	28000526 	beq	r5,zero,8ba30 <__ascii_wctomb+0x18>
   8ba1c:	00803fc4 	movi	r2,255
   8ba20:	11800536 	bltu	r2,r6,8ba38 <__ascii_wctomb+0x20>
   8ba24:	29800005 	stb	r6,0(r5)
   8ba28:	00800044 	movi	r2,1
   8ba2c:	f800283a 	ret
   8ba30:	0005883a 	mov	r2,zero
   8ba34:	f800283a 	ret
   8ba38:	00802284 	movi	r2,138
   8ba3c:	20800015 	stw	r2,0(r4)
   8ba40:	00bfffc4 	movi	r2,-1
   8ba44:	f800283a 	ret

0008ba48 <_wctomb_r>:
   8ba48:	defff904 	addi	sp,sp,-28
   8ba4c:	00800274 	movhi	r2,9
   8ba50:	10890304 	addi	r2,r2,9228
   8ba54:	dfc00615 	stw	ra,24(sp)
   8ba58:	dc400515 	stw	r17,20(sp)
   8ba5c:	dc000415 	stw	r16,16(sp)
   8ba60:	3823883a 	mov	r17,r7
   8ba64:	14000017 	ldw	r16,0(r2)
   8ba68:	d9000115 	stw	r4,4(sp)
   8ba6c:	d9400215 	stw	r5,8(sp)
   8ba70:	d9800315 	stw	r6,12(sp)
   8ba74:	008744c0 	call	8744c <__locale_charset>
   8ba78:	d9000117 	ldw	r4,4(sp)
   8ba7c:	d9400217 	ldw	r5,8(sp)
   8ba80:	d9800317 	ldw	r6,12(sp)
   8ba84:	dc400015 	stw	r17,0(sp)
   8ba88:	100f883a 	mov	r7,r2
   8ba8c:	803ee83a 	callr	r16
   8ba90:	dfc00617 	ldw	ra,24(sp)
   8ba94:	dc400517 	ldw	r17,20(sp)
   8ba98:	dc000417 	ldw	r16,16(sp)
   8ba9c:	dec00704 	addi	sp,sp,28
   8baa0:	f800283a 	ret

0008baa4 <__udivdi3>:
   8baa4:	defff504 	addi	sp,sp,-44
   8baa8:	dc800315 	stw	r18,12(sp)
   8baac:	dc400215 	stw	r17,8(sp)
   8bab0:	dfc00a15 	stw	ra,40(sp)
   8bab4:	df000915 	stw	fp,36(sp)
   8bab8:	ddc00815 	stw	r23,32(sp)
   8babc:	dd800715 	stw	r22,28(sp)
   8bac0:	dd400615 	stw	r21,24(sp)
   8bac4:	dd000515 	stw	r20,20(sp)
   8bac8:	dcc00415 	stw	r19,16(sp)
   8bacc:	dc000115 	stw	r16,4(sp)
   8bad0:	2025883a 	mov	r18,r4
   8bad4:	2823883a 	mov	r17,r5
   8bad8:	3800481e 	bne	r7,zero,8bbfc <__udivdi3+0x158>
   8badc:	3021883a 	mov	r16,r6
   8bae0:	2027883a 	mov	r19,r4
   8bae4:	29805a2e 	bgeu	r5,r6,8bc50 <__udivdi3+0x1ac>
   8bae8:	00bfffd4 	movui	r2,65535
   8baec:	2829883a 	mov	r20,r5
   8baf0:	1180b436 	bltu	r2,r6,8bdc4 <__udivdi3+0x320>
   8baf4:	00803fc4 	movi	r2,255
   8baf8:	11816736 	bltu	r2,r6,8c098 <__udivdi3+0x5f4>
   8bafc:	0005883a 	mov	r2,zero
   8bb00:	0007883a 	mov	r3,zero
   8bb04:	3084d83a 	srl	r2,r6,r2
   8bb08:	01000274 	movhi	r4,9
   8bb0c:	21019704 	addi	r4,r4,1628
   8bb10:	2085883a 	add	r2,r4,r2
   8bb14:	10800003 	ldbu	r2,0(r2)
   8bb18:	10c7883a 	add	r3,r2,r3
   8bb1c:	00800804 	movi	r2,32
   8bb20:	10c5c83a 	sub	r2,r2,r3
   8bb24:	10000526 	beq	r2,zero,8bb3c <__udivdi3+0x98>
   8bb28:	88a2983a 	sll	r17,r17,r2
   8bb2c:	90c6d83a 	srl	r3,r18,r3
   8bb30:	30a0983a 	sll	r16,r6,r2
   8bb34:	90a6983a 	sll	r19,r18,r2
   8bb38:	88e8b03a 	or	r20,r17,r3
   8bb3c:	8022d43a 	srli	r17,r16,16
   8bb40:	a009883a 	mov	r4,r20
   8bb44:	857fffcc 	andi	r21,r16,65535
   8bb48:	880b883a 	mov	r5,r17
   8bb4c:	00825780 	call	82578 <__umodsi3>
   8bb50:	a009883a 	mov	r4,r20
   8bb54:	880b883a 	mov	r5,r17
   8bb58:	102d883a 	mov	r22,r2
   8bb5c:	00825700 	call	82570 <__udivsi3>
   8bb60:	1009883a 	mov	r4,r2
   8bb64:	a80b883a 	mov	r5,r21
   8bb68:	1025883a 	mov	r18,r2
   8bb6c:	00825800 	call	82580 <__mulsi3>
   8bb70:	1009883a 	mov	r4,r2
   8bb74:	b006943a 	slli	r3,r22,16
   8bb78:	9804d43a 	srli	r2,r19,16
   8bb7c:	1886b03a 	or	r3,r3,r2
   8bb80:	1900052e 	bgeu	r3,r4,8bb98 <__udivdi3+0xf4>
   8bb84:	1c07883a 	add	r3,r3,r16
   8bb88:	90bfffc4 	addi	r2,r18,-1
   8bb8c:	1c000136 	bltu	r3,r16,8bb94 <__udivdi3+0xf0>
   8bb90:	19015636 	bltu	r3,r4,8c0ec <__udivdi3+0x648>
   8bb94:	1025883a 	mov	r18,r2
   8bb98:	1929c83a 	sub	r20,r3,r4
   8bb9c:	880b883a 	mov	r5,r17
   8bba0:	a009883a 	mov	r4,r20
   8bba4:	00825780 	call	82578 <__umodsi3>
   8bba8:	102d883a 	mov	r22,r2
   8bbac:	880b883a 	mov	r5,r17
   8bbb0:	a009883a 	mov	r4,r20
   8bbb4:	b02c943a 	slli	r22,r22,16
   8bbb8:	00825700 	call	82570 <__udivsi3>
   8bbbc:	1009883a 	mov	r4,r2
   8bbc0:	a80b883a 	mov	r5,r21
   8bbc4:	9cffffcc 	andi	r19,r19,65535
   8bbc8:	1023883a 	mov	r17,r2
   8bbcc:	b4e6b03a 	or	r19,r22,r19
   8bbd0:	00825800 	call	82580 <__mulsi3>
   8bbd4:	9880052e 	bgeu	r19,r2,8bbec <__udivdi3+0x148>
   8bbd8:	9c27883a 	add	r19,r19,r16
   8bbdc:	88ffffc4 	addi	r3,r17,-1
   8bbe0:	9c011436 	bltu	r19,r16,8c034 <__udivdi3+0x590>
   8bbe4:	9881132e 	bgeu	r19,r2,8c034 <__udivdi3+0x590>
   8bbe8:	8c7fff84 	addi	r17,r17,-2
   8bbec:	9024943a 	slli	r18,r18,16
   8bbf0:	0007883a 	mov	r3,zero
   8bbf4:	8c84b03a 	or	r2,r17,r18
   8bbf8:	00006106 	br	8bd80 <__udivdi3+0x2dc>
   8bbfc:	29c05e36 	bltu	r5,r7,8bd78 <__udivdi3+0x2d4>
   8bc00:	00bfffd4 	movui	r2,65535
   8bc04:	11c06a2e 	bgeu	r2,r7,8bdb0 <__udivdi3+0x30c>
   8bc08:	00804034 	movhi	r2,256
   8bc0c:	10bfffc4 	addi	r2,r2,-1
   8bc10:	11c11236 	bltu	r2,r7,8c05c <__udivdi3+0x5b8>
   8bc14:	00c00404 	movi	r3,16
   8bc18:	180b883a 	mov	r5,r3
   8bc1c:	38c6d83a 	srl	r3,r7,r3
   8bc20:	01000274 	movhi	r4,9
   8bc24:	21019704 	addi	r4,r4,1628
   8bc28:	04000804 	movi	r16,32
   8bc2c:	20c7883a 	add	r3,r4,r3
   8bc30:	18800003 	ldbu	r2,0(r3)
   8bc34:	1145883a 	add	r2,r2,r5
   8bc38:	80a1c83a 	sub	r16,r16,r2
   8bc3c:	80006c1e 	bne	r16,zero,8bdf0 <__udivdi3+0x34c>
   8bc40:	3c411836 	bltu	r7,r17,8c0a4 <__udivdi3+0x600>
   8bc44:	9185403a 	cmpgeu	r2,r18,r6
   8bc48:	0007883a 	mov	r3,zero
   8bc4c:	00004c06 	br	8bd80 <__udivdi3+0x2dc>
   8bc50:	3000041e 	bne	r6,zero,8bc64 <__udivdi3+0x1c0>
   8bc54:	01000044 	movi	r4,1
   8bc58:	000b883a 	mov	r5,zero
   8bc5c:	00825700 	call	82570 <__udivsi3>
   8bc60:	1021883a 	mov	r16,r2
   8bc64:	00bfffd4 	movui	r2,65535
   8bc68:	14005c2e 	bgeu	r2,r16,8bddc <__udivdi3+0x338>
   8bc6c:	00804034 	movhi	r2,256
   8bc70:	10bfffc4 	addi	r2,r2,-1
   8bc74:	14010236 	bltu	r2,r16,8c080 <__udivdi3+0x5dc>
   8bc78:	00800404 	movi	r2,16
   8bc7c:	1007883a 	mov	r3,r2
   8bc80:	8084d83a 	srl	r2,r16,r2
   8bc84:	01000274 	movhi	r4,9
   8bc88:	21019704 	addi	r4,r4,1628
   8bc8c:	2085883a 	add	r2,r4,r2
   8bc90:	10800003 	ldbu	r2,0(r2)
   8bc94:	10c7883a 	add	r3,r2,r3
   8bc98:	00800804 	movi	r2,32
   8bc9c:	10c5c83a 	sub	r2,r2,r3
   8bca0:	1000aa1e 	bne	r2,zero,8bf4c <__udivdi3+0x4a8>
   8bca4:	8028d43a 	srli	r20,r16,16
   8bca8:	8c23c83a 	sub	r17,r17,r16
   8bcac:	857fffcc 	andi	r21,r16,65535
   8bcb0:	00c00044 	movi	r3,1
   8bcb4:	8809883a 	mov	r4,r17
   8bcb8:	a00b883a 	mov	r5,r20
   8bcbc:	d8c00015 	stw	r3,0(sp)
   8bcc0:	00825780 	call	82578 <__umodsi3>
   8bcc4:	8809883a 	mov	r4,r17
   8bcc8:	a00b883a 	mov	r5,r20
   8bccc:	102d883a 	mov	r22,r2
   8bcd0:	00825700 	call	82570 <__udivsi3>
   8bcd4:	1009883a 	mov	r4,r2
   8bcd8:	a80b883a 	mov	r5,r21
   8bcdc:	1025883a 	mov	r18,r2
   8bce0:	00825800 	call	82580 <__mulsi3>
   8bce4:	1009883a 	mov	r4,r2
   8bce8:	b00e943a 	slli	r7,r22,16
   8bcec:	9804d43a 	srli	r2,r19,16
   8bcf0:	d8c00017 	ldw	r3,0(sp)
   8bcf4:	388eb03a 	or	r7,r7,r2
   8bcf8:	3900052e 	bgeu	r7,r4,8bd10 <__udivdi3+0x26c>
   8bcfc:	3c0f883a 	add	r7,r7,r16
   8bd00:	90bfffc4 	addi	r2,r18,-1
   8bd04:	3c000136 	bltu	r7,r16,8bd0c <__udivdi3+0x268>
   8bd08:	3900f536 	bltu	r7,r4,8c0e0 <__udivdi3+0x63c>
   8bd0c:	1025883a 	mov	r18,r2
   8bd10:	3923c83a 	sub	r17,r7,r4
   8bd14:	8809883a 	mov	r4,r17
   8bd18:	a00b883a 	mov	r5,r20
   8bd1c:	d8c00015 	stw	r3,0(sp)
   8bd20:	00825780 	call	82578 <__umodsi3>
   8bd24:	102d883a 	mov	r22,r2
   8bd28:	8809883a 	mov	r4,r17
   8bd2c:	a00b883a 	mov	r5,r20
   8bd30:	b02c943a 	slli	r22,r22,16
   8bd34:	00825700 	call	82570 <__udivsi3>
   8bd38:	1009883a 	mov	r4,r2
   8bd3c:	a80b883a 	mov	r5,r21
   8bd40:	9cffffcc 	andi	r19,r19,65535
   8bd44:	1023883a 	mov	r17,r2
   8bd48:	b4e6b03a 	or	r19,r22,r19
   8bd4c:	00825800 	call	82580 <__mulsi3>
   8bd50:	d8c00017 	ldw	r3,0(sp)
   8bd54:	9880052e 	bgeu	r19,r2,8bd6c <__udivdi3+0x2c8>
   8bd58:	9c27883a 	add	r19,r19,r16
   8bd5c:	893fffc4 	addi	r4,r17,-1
   8bd60:	9c00b236 	bltu	r19,r16,8c02c <__udivdi3+0x588>
   8bd64:	9880b12e 	bgeu	r19,r2,8c02c <__udivdi3+0x588>
   8bd68:	8c7fff84 	addi	r17,r17,-2
   8bd6c:	9024943a 	slli	r18,r18,16
   8bd70:	8c84b03a 	or	r2,r17,r18
   8bd74:	00000206 	br	8bd80 <__udivdi3+0x2dc>
   8bd78:	0007883a 	mov	r3,zero
   8bd7c:	0005883a 	mov	r2,zero
   8bd80:	dfc00a17 	ldw	ra,40(sp)
   8bd84:	df000917 	ldw	fp,36(sp)
   8bd88:	ddc00817 	ldw	r23,32(sp)
   8bd8c:	dd800717 	ldw	r22,28(sp)
   8bd90:	dd400617 	ldw	r21,24(sp)
   8bd94:	dd000517 	ldw	r20,20(sp)
   8bd98:	dcc00417 	ldw	r19,16(sp)
   8bd9c:	dc800317 	ldw	r18,12(sp)
   8bda0:	dc400217 	ldw	r17,8(sp)
   8bda4:	dc000117 	ldw	r16,4(sp)
   8bda8:	dec00b04 	addi	sp,sp,44
   8bdac:	f800283a 	ret
   8bdb0:	00803fc4 	movi	r2,255
   8bdb4:	11c0ac36 	bltu	r2,r7,8c068 <__udivdi3+0x5c4>
   8bdb8:	0007883a 	mov	r3,zero
   8bdbc:	000b883a 	mov	r5,zero
   8bdc0:	003f9606 	br	8bc1c <_gp+0xffff1828>
   8bdc4:	00804034 	movhi	r2,256
   8bdc8:	10bfffc4 	addi	r2,r2,-1
   8bdcc:	1180a936 	bltu	r2,r6,8c074 <__udivdi3+0x5d0>
   8bdd0:	00800404 	movi	r2,16
   8bdd4:	1007883a 	mov	r3,r2
   8bdd8:	003f4a06 	br	8bb04 <_gp+0xffff1710>
   8bddc:	00803fc4 	movi	r2,255
   8bde0:	1400aa36 	bltu	r2,r16,8c08c <__udivdi3+0x5e8>
   8bde4:	0005883a 	mov	r2,zero
   8bde8:	0007883a 	mov	r3,zero
   8bdec:	003fa406 	br	8bc80 <_gp+0xffff188c>
   8bdf0:	3c0e983a 	sll	r7,r7,r16
   8bdf4:	3086d83a 	srl	r3,r6,r2
   8bdf8:	88aed83a 	srl	r23,r17,r2
   8bdfc:	9084d83a 	srl	r2,r18,r2
   8be00:	38e6b03a 	or	r19,r7,r3
   8be04:	9828d43a 	srli	r20,r19,16
   8be08:	8c22983a 	sll	r17,r17,r16
   8be0c:	b809883a 	mov	r4,r23
   8be10:	a00b883a 	mov	r5,r20
   8be14:	342a983a 	sll	r21,r6,r16
   8be18:	88a2b03a 	or	r17,r17,r2
   8be1c:	00825780 	call	82578 <__umodsi3>
   8be20:	b809883a 	mov	r4,r23
   8be24:	a00b883a 	mov	r5,r20
   8be28:	1039883a 	mov	fp,r2
   8be2c:	9dbfffcc 	andi	r22,r19,65535
   8be30:	00825700 	call	82570 <__udivsi3>
   8be34:	1009883a 	mov	r4,r2
   8be38:	b00b883a 	mov	r5,r22
   8be3c:	102f883a 	mov	r23,r2
   8be40:	00825800 	call	82580 <__mulsi3>
   8be44:	1009883a 	mov	r4,r2
   8be48:	e00e943a 	slli	r7,fp,16
   8be4c:	8804d43a 	srli	r2,r17,16
   8be50:	388eb03a 	or	r7,r7,r2
   8be54:	3900042e 	bgeu	r7,r4,8be68 <__udivdi3+0x3c4>
   8be58:	3ccf883a 	add	r7,r7,r19
   8be5c:	b8bfffc4 	addi	r2,r23,-1
   8be60:	3cc0972e 	bgeu	r7,r19,8c0c0 <__udivdi3+0x61c>
   8be64:	102f883a 	mov	r23,r2
   8be68:	3939c83a 	sub	fp,r7,r4
   8be6c:	a00b883a 	mov	r5,r20
   8be70:	e009883a 	mov	r4,fp
   8be74:	00825780 	call	82578 <__umodsi3>
   8be78:	a00b883a 	mov	r5,r20
   8be7c:	e009883a 	mov	r4,fp
   8be80:	d8800015 	stw	r2,0(sp)
   8be84:	00825700 	call	82570 <__udivsi3>
   8be88:	1009883a 	mov	r4,r2
   8be8c:	b00b883a 	mov	r5,r22
   8be90:	1029883a 	mov	r20,r2
   8be94:	00825800 	call	82580 <__mulsi3>
   8be98:	d8c00017 	ldw	r3,0(sp)
   8be9c:	8c7fffcc 	andi	r17,r17,65535
   8bea0:	1806943a 	slli	r3,r3,16
   8bea4:	1c46b03a 	or	r3,r3,r17
   8bea8:	1880042e 	bgeu	r3,r2,8bebc <__udivdi3+0x418>
   8beac:	1cc7883a 	add	r3,r3,r19
   8beb0:	a13fffc4 	addi	r4,r20,-1
   8beb4:	1cc07e2e 	bgeu	r3,r19,8c0b0 <__udivdi3+0x60c>
   8beb8:	2029883a 	mov	r20,r4
   8bebc:	b82e943a 	slli	r23,r23,16
   8bec0:	a822d43a 	srli	r17,r21,16
   8bec4:	ad7fffcc 	andi	r21,r21,65535
   8bec8:	a5e8b03a 	or	r20,r20,r23
   8becc:	a5bfffcc 	andi	r22,r20,65535
   8bed0:	b009883a 	mov	r4,r22
   8bed4:	a80b883a 	mov	r5,r21
   8bed8:	18afc83a 	sub	r23,r3,r2
   8bedc:	a026d43a 	srli	r19,r20,16
   8bee0:	00825800 	call	82580 <__mulsi3>
   8bee4:	b009883a 	mov	r4,r22
   8bee8:	880b883a 	mov	r5,r17
   8beec:	1039883a 	mov	fp,r2
   8bef0:	00825800 	call	82580 <__mulsi3>
   8bef4:	a80b883a 	mov	r5,r21
   8bef8:	9809883a 	mov	r4,r19
   8befc:	102d883a 	mov	r22,r2
   8bf00:	00825800 	call	82580 <__mulsi3>
   8bf04:	9809883a 	mov	r4,r19
   8bf08:	880b883a 	mov	r5,r17
   8bf0c:	102b883a 	mov	r21,r2
   8bf10:	00825800 	call	82580 <__mulsi3>
   8bf14:	100b883a 	mov	r5,r2
   8bf18:	e004d43a 	srli	r2,fp,16
   8bf1c:	ad89883a 	add	r4,r21,r22
   8bf20:	2089883a 	add	r4,r4,r2
   8bf24:	2540022e 	bgeu	r4,r21,8bf30 <__udivdi3+0x48c>
   8bf28:	00800074 	movhi	r2,1
   8bf2c:	288b883a 	add	r5,r5,r2
   8bf30:	2004d43a 	srli	r2,r4,16
   8bf34:	288b883a 	add	r5,r5,r2
   8bf38:	b9404536 	bltu	r23,r5,8c050 <__udivdi3+0x5ac>
   8bf3c:	b9403f26 	beq	r23,r5,8c03c <__udivdi3+0x598>
   8bf40:	a005883a 	mov	r2,r20
   8bf44:	0007883a 	mov	r3,zero
   8bf48:	003f8d06 	br	8bd80 <_gp+0xffff198c>
   8bf4c:	80a0983a 	sll	r16,r16,r2
   8bf50:	88eed83a 	srl	r23,r17,r3
   8bf54:	90c6d83a 	srl	r3,r18,r3
   8bf58:	8028d43a 	srli	r20,r16,16
   8bf5c:	88a2983a 	sll	r17,r17,r2
   8bf60:	b809883a 	mov	r4,r23
   8bf64:	a00b883a 	mov	r5,r20
   8bf68:	88ecb03a 	or	r22,r17,r3
   8bf6c:	90a6983a 	sll	r19,r18,r2
   8bf70:	00825780 	call	82578 <__umodsi3>
   8bf74:	b809883a 	mov	r4,r23
   8bf78:	a00b883a 	mov	r5,r20
   8bf7c:	1023883a 	mov	r17,r2
   8bf80:	857fffcc 	andi	r21,r16,65535
   8bf84:	00825700 	call	82570 <__udivsi3>
   8bf88:	1009883a 	mov	r4,r2
   8bf8c:	a80b883a 	mov	r5,r21
   8bf90:	102f883a 	mov	r23,r2
   8bf94:	00825800 	call	82580 <__mulsi3>
   8bf98:	1009883a 	mov	r4,r2
   8bf9c:	880c943a 	slli	r6,r17,16
   8bfa0:	b004d43a 	srli	r2,r22,16
   8bfa4:	308cb03a 	or	r6,r6,r2
   8bfa8:	3100062e 	bgeu	r6,r4,8bfc4 <__udivdi3+0x520>
   8bfac:	340d883a 	add	r6,r6,r16
   8bfb0:	b8bfffc4 	addi	r2,r23,-1
   8bfb4:	34004836 	bltu	r6,r16,8c0d8 <__udivdi3+0x634>
   8bfb8:	3100472e 	bgeu	r6,r4,8c0d8 <__udivdi3+0x634>
   8bfbc:	bdffff84 	addi	r23,r23,-2
   8bfc0:	340d883a 	add	r6,r6,r16
   8bfc4:	3125c83a 	sub	r18,r6,r4
   8bfc8:	9009883a 	mov	r4,r18
   8bfcc:	a00b883a 	mov	r5,r20
   8bfd0:	00825780 	call	82578 <__umodsi3>
   8bfd4:	1023883a 	mov	r17,r2
   8bfd8:	9009883a 	mov	r4,r18
   8bfdc:	a00b883a 	mov	r5,r20
   8bfe0:	8822943a 	slli	r17,r17,16
   8bfe4:	00825700 	call	82570 <__udivsi3>
   8bfe8:	1009883a 	mov	r4,r2
   8bfec:	a80b883a 	mov	r5,r21
   8bff0:	b5bfffcc 	andi	r22,r22,65535
   8bff4:	1025883a 	mov	r18,r2
   8bff8:	8da2b03a 	or	r17,r17,r22
   8bffc:	00825800 	call	82580 <__mulsi3>
   8c000:	8880062e 	bgeu	r17,r2,8c01c <__udivdi3+0x578>
   8c004:	8c23883a 	add	r17,r17,r16
   8c008:	90ffffc4 	addi	r3,r18,-1
   8c00c:	8c003036 	bltu	r17,r16,8c0d0 <__udivdi3+0x62c>
   8c010:	88802f2e 	bgeu	r17,r2,8c0d0 <__udivdi3+0x62c>
   8c014:	94bfff84 	addi	r18,r18,-2
   8c018:	8c23883a 	add	r17,r17,r16
   8c01c:	b806943a 	slli	r3,r23,16
   8c020:	88a3c83a 	sub	r17,r17,r2
   8c024:	90c6b03a 	or	r3,r18,r3
   8c028:	003f2206 	br	8bcb4 <_gp+0xffff18c0>
   8c02c:	2023883a 	mov	r17,r4
   8c030:	003f4e06 	br	8bd6c <_gp+0xffff1978>
   8c034:	1823883a 	mov	r17,r3
   8c038:	003eec06 	br	8bbec <_gp+0xffff17f8>
   8c03c:	2008943a 	slli	r4,r4,16
   8c040:	9420983a 	sll	r16,r18,r16
   8c044:	e73fffcc 	andi	fp,fp,65535
   8c048:	2709883a 	add	r4,r4,fp
   8c04c:	813fbc2e 	bgeu	r16,r4,8bf40 <_gp+0xffff1b4c>
   8c050:	a0bfffc4 	addi	r2,r20,-1
   8c054:	0007883a 	mov	r3,zero
   8c058:	003f4906 	br	8bd80 <_gp+0xffff198c>
   8c05c:	00c00604 	movi	r3,24
   8c060:	180b883a 	mov	r5,r3
   8c064:	003eed06 	br	8bc1c <_gp+0xffff1828>
   8c068:	00c00204 	movi	r3,8
   8c06c:	180b883a 	mov	r5,r3
   8c070:	003eea06 	br	8bc1c <_gp+0xffff1828>
   8c074:	00800604 	movi	r2,24
   8c078:	1007883a 	mov	r3,r2
   8c07c:	003ea106 	br	8bb04 <_gp+0xffff1710>
   8c080:	00800604 	movi	r2,24
   8c084:	1007883a 	mov	r3,r2
   8c088:	003efd06 	br	8bc80 <_gp+0xffff188c>
   8c08c:	00800204 	movi	r2,8
   8c090:	1007883a 	mov	r3,r2
   8c094:	003efa06 	br	8bc80 <_gp+0xffff188c>
   8c098:	00800204 	movi	r2,8
   8c09c:	1007883a 	mov	r3,r2
   8c0a0:	003e9806 	br	8bb04 <_gp+0xffff1710>
   8c0a4:	0007883a 	mov	r3,zero
   8c0a8:	00800044 	movi	r2,1
   8c0ac:	003f3406 	br	8bd80 <_gp+0xffff198c>
   8c0b0:	18bf812e 	bgeu	r3,r2,8beb8 <_gp+0xffff1ac4>
   8c0b4:	a53fff84 	addi	r20,r20,-2
   8c0b8:	1cc7883a 	add	r3,r3,r19
   8c0bc:	003f7f06 	br	8bebc <_gp+0xffff1ac8>
   8c0c0:	393f682e 	bgeu	r7,r4,8be64 <_gp+0xffff1a70>
   8c0c4:	bdffff84 	addi	r23,r23,-2
   8c0c8:	3ccf883a 	add	r7,r7,r19
   8c0cc:	003f6606 	br	8be68 <_gp+0xffff1a74>
   8c0d0:	1825883a 	mov	r18,r3
   8c0d4:	003fd106 	br	8c01c <_gp+0xffff1c28>
   8c0d8:	102f883a 	mov	r23,r2
   8c0dc:	003fb906 	br	8bfc4 <_gp+0xffff1bd0>
   8c0e0:	94bfff84 	addi	r18,r18,-2
   8c0e4:	3c0f883a 	add	r7,r7,r16
   8c0e8:	003f0906 	br	8bd10 <_gp+0xffff191c>
   8c0ec:	94bfff84 	addi	r18,r18,-2
   8c0f0:	1c07883a 	add	r3,r3,r16
   8c0f4:	003ea806 	br	8bb98 <_gp+0xffff17a4>

0008c0f8 <__umoddi3>:
   8c0f8:	defff304 	addi	sp,sp,-52
   8c0fc:	dd000715 	stw	r20,28(sp)
   8c100:	dc800515 	stw	r18,20(sp)
   8c104:	dc400415 	stw	r17,16(sp)
   8c108:	dfc00c15 	stw	ra,48(sp)
   8c10c:	df000b15 	stw	fp,44(sp)
   8c110:	ddc00a15 	stw	r23,40(sp)
   8c114:	dd800915 	stw	r22,36(sp)
   8c118:	dd400815 	stw	r21,32(sp)
   8c11c:	dcc00615 	stw	r19,24(sp)
   8c120:	dc000315 	stw	r16,12(sp)
   8c124:	2025883a 	mov	r18,r4
   8c128:	2823883a 	mov	r17,r5
   8c12c:	2829883a 	mov	r20,r5
   8c130:	38003d1e 	bne	r7,zero,8c228 <__umoddi3+0x130>
   8c134:	3021883a 	mov	r16,r6
   8c138:	2027883a 	mov	r19,r4
   8c13c:	2980532e 	bgeu	r5,r6,8c28c <__umoddi3+0x194>
   8c140:	00bfffd4 	movui	r2,65535
   8c144:	1180a636 	bltu	r2,r6,8c3e0 <__umoddi3+0x2e8>
   8c148:	00803fc4 	movi	r2,255
   8c14c:	11816336 	bltu	r2,r6,8c6dc <__umoddi3+0x5e4>
   8c150:	0005883a 	mov	r2,zero
   8c154:	0009883a 	mov	r4,zero
   8c158:	3084d83a 	srl	r2,r6,r2
   8c15c:	00c00274 	movhi	r3,9
   8c160:	18c19704 	addi	r3,r3,1628
   8c164:	1885883a 	add	r2,r3,r2
   8c168:	10800003 	ldbu	r2,0(r2)
   8c16c:	1109883a 	add	r4,r2,r4
   8c170:	00800804 	movi	r2,32
   8c174:	1105c83a 	sub	r2,r2,r4
   8c178:	10011026 	beq	r2,zero,8c5bc <__umoddi3+0x4c4>
   8c17c:	9108d83a 	srl	r4,r18,r4
   8c180:	88a2983a 	sll	r17,r17,r2
   8c184:	30a0983a 	sll	r16,r6,r2
   8c188:	90a6983a 	sll	r19,r18,r2
   8c18c:	8928b03a 	or	r20,r17,r4
   8c190:	1025883a 	mov	r18,r2
   8c194:	8022d43a 	srli	r17,r16,16
   8c198:	a009883a 	mov	r4,r20
   8c19c:	857fffcc 	andi	r21,r16,65535
   8c1a0:	880b883a 	mov	r5,r17
   8c1a4:	00825780 	call	82578 <__umodsi3>
   8c1a8:	a009883a 	mov	r4,r20
   8c1ac:	880b883a 	mov	r5,r17
   8c1b0:	102d883a 	mov	r22,r2
   8c1b4:	00825700 	call	82570 <__udivsi3>
   8c1b8:	1009883a 	mov	r4,r2
   8c1bc:	a80b883a 	mov	r5,r21
   8c1c0:	00825800 	call	82580 <__mulsi3>
   8c1c4:	1009883a 	mov	r4,r2
   8c1c8:	b006943a 	slli	r3,r22,16
   8c1cc:	9804d43a 	srli	r2,r19,16
   8c1d0:	1886b03a 	or	r3,r3,r2
   8c1d4:	1900042e 	bgeu	r3,r4,8c1e8 <__umoddi3+0xf0>
   8c1d8:	1c07883a 	add	r3,r3,r16
   8c1dc:	1c000236 	bltu	r3,r16,8c1e8 <__umoddi3+0xf0>
   8c1e0:	1900012e 	bgeu	r3,r4,8c1e8 <__umoddi3+0xf0>
   8c1e4:	1c07883a 	add	r3,r3,r16
   8c1e8:	1929c83a 	sub	r20,r3,r4
   8c1ec:	a009883a 	mov	r4,r20
   8c1f0:	880b883a 	mov	r5,r17
   8c1f4:	00825780 	call	82578 <__umodsi3>
   8c1f8:	102d883a 	mov	r22,r2
   8c1fc:	a009883a 	mov	r4,r20
   8c200:	880b883a 	mov	r5,r17
   8c204:	b02c943a 	slli	r22,r22,16
   8c208:	00825700 	call	82570 <__udivsi3>
   8c20c:	1009883a 	mov	r4,r2
   8c210:	a80b883a 	mov	r5,r21
   8c214:	9cffffcc 	andi	r19,r19,65535
   8c218:	00825800 	call	82580 <__mulsi3>
   8c21c:	b4e6b03a 	or	r19,r22,r19
   8c220:	9880582e 	bgeu	r19,r2,8c384 <__umoddi3+0x28c>
   8c224:	00005306 	br	8c374 <__umoddi3+0x27c>
   8c228:	29c05a36 	bltu	r5,r7,8c394 <__umoddi3+0x29c>
   8c22c:	00bfffd4 	movui	r2,65535
   8c230:	11c0662e 	bgeu	r2,r7,8c3cc <__umoddi3+0x2d4>
   8c234:	00804034 	movhi	r2,256
   8c238:	10bfffc4 	addi	r2,r2,-1
   8c23c:	11c11b36 	bltu	r2,r7,8c6ac <__umoddi3+0x5b4>
   8c240:	00c00404 	movi	r3,16
   8c244:	1827883a 	mov	r19,r3
   8c248:	38c6d83a 	srl	r3,r7,r3
   8c24c:	01000274 	movhi	r4,9
   8c250:	21019704 	addi	r4,r4,1628
   8c254:	04000804 	movi	r16,32
   8c258:	20c7883a 	add	r3,r4,r3
   8c25c:	18800003 	ldbu	r2,0(r3)
   8c260:	14e7883a 	add	r19,r2,r19
   8c264:	84e1c83a 	sub	r16,r16,r19
   8c268:	8000681e 	bne	r16,zero,8c40c <__umoddi3+0x314>
   8c26c:	3c400136 	bltu	r7,r17,8c274 <__umoddi3+0x17c>
   8c270:	91812736 	bltu	r18,r6,8c710 <__umoddi3+0x618>
   8c274:	9185c83a 	sub	r2,r18,r6
   8c278:	89e3c83a 	sub	r17,r17,r7
   8c27c:	90a5803a 	cmpltu	r18,r18,r2
   8c280:	8ca9c83a 	sub	r20,r17,r18
   8c284:	a007883a 	mov	r3,r20
   8c288:	00004406 	br	8c39c <__umoddi3+0x2a4>
   8c28c:	3000041e 	bne	r6,zero,8c2a0 <__umoddi3+0x1a8>
   8c290:	01000044 	movi	r4,1
   8c294:	000b883a 	mov	r5,zero
   8c298:	00825700 	call	82570 <__udivsi3>
   8c29c:	1021883a 	mov	r16,r2
   8c2a0:	00bfffd4 	movui	r2,65535
   8c2a4:	1400542e 	bgeu	r2,r16,8c3f8 <__umoddi3+0x300>
   8c2a8:	00804034 	movhi	r2,256
   8c2ac:	10bfffc4 	addi	r2,r2,-1
   8c2b0:	14010736 	bltu	r2,r16,8c6d0 <__umoddi3+0x5d8>
   8c2b4:	00800404 	movi	r2,16
   8c2b8:	1007883a 	mov	r3,r2
   8c2bc:	8084d83a 	srl	r2,r16,r2
   8c2c0:	01000274 	movhi	r4,9
   8c2c4:	21019704 	addi	r4,r4,1628
   8c2c8:	05400804 	movi	r21,32
   8c2cc:	2085883a 	add	r2,r4,r2
   8c2d0:	10800003 	ldbu	r2,0(r2)
   8c2d4:	10c7883a 	add	r3,r2,r3
   8c2d8:	a8ebc83a 	sub	r21,r21,r3
   8c2dc:	a800b91e 	bne	r21,zero,8c5c4 <__umoddi3+0x4cc>
   8c2e0:	8028d43a 	srli	r20,r16,16
   8c2e4:	8c23c83a 	sub	r17,r17,r16
   8c2e8:	85bfffcc 	andi	r22,r16,65535
   8c2ec:	0025883a 	mov	r18,zero
   8c2f0:	8809883a 	mov	r4,r17
   8c2f4:	a00b883a 	mov	r5,r20
   8c2f8:	00825780 	call	82578 <__umodsi3>
   8c2fc:	8809883a 	mov	r4,r17
   8c300:	a00b883a 	mov	r5,r20
   8c304:	102b883a 	mov	r21,r2
   8c308:	00825700 	call	82570 <__udivsi3>
   8c30c:	1009883a 	mov	r4,r2
   8c310:	b00b883a 	mov	r5,r22
   8c314:	00825800 	call	82580 <__mulsi3>
   8c318:	1009883a 	mov	r4,r2
   8c31c:	a806943a 	slli	r3,r21,16
   8c320:	9804d43a 	srli	r2,r19,16
   8c324:	1886b03a 	or	r3,r3,r2
   8c328:	1900032e 	bgeu	r3,r4,8c338 <__umoddi3+0x240>
   8c32c:	1c07883a 	add	r3,r3,r16
   8c330:	1c000136 	bltu	r3,r16,8c338 <__umoddi3+0x240>
   8c334:	1900f436 	bltu	r3,r4,8c708 <__umoddi3+0x610>
   8c338:	1923c83a 	sub	r17,r3,r4
   8c33c:	8809883a 	mov	r4,r17
   8c340:	a00b883a 	mov	r5,r20
   8c344:	00825780 	call	82578 <__umodsi3>
   8c348:	102b883a 	mov	r21,r2
   8c34c:	8809883a 	mov	r4,r17
   8c350:	a00b883a 	mov	r5,r20
   8c354:	a82a943a 	slli	r21,r21,16
   8c358:	00825700 	call	82570 <__udivsi3>
   8c35c:	1009883a 	mov	r4,r2
   8c360:	b00b883a 	mov	r5,r22
   8c364:	9cffffcc 	andi	r19,r19,65535
   8c368:	00825800 	call	82580 <__mulsi3>
   8c36c:	ace6b03a 	or	r19,r21,r19
   8c370:	9880042e 	bgeu	r19,r2,8c384 <__umoddi3+0x28c>
   8c374:	9c27883a 	add	r19,r19,r16
   8c378:	9c000236 	bltu	r19,r16,8c384 <__umoddi3+0x28c>
   8c37c:	9880012e 	bgeu	r19,r2,8c384 <__umoddi3+0x28c>
   8c380:	9c27883a 	add	r19,r19,r16
   8c384:	9885c83a 	sub	r2,r19,r2
   8c388:	1484d83a 	srl	r2,r2,r18
   8c38c:	0007883a 	mov	r3,zero
   8c390:	00000206 	br	8c39c <__umoddi3+0x2a4>
   8c394:	2005883a 	mov	r2,r4
   8c398:	2807883a 	mov	r3,r5
   8c39c:	dfc00c17 	ldw	ra,48(sp)
   8c3a0:	df000b17 	ldw	fp,44(sp)
   8c3a4:	ddc00a17 	ldw	r23,40(sp)
   8c3a8:	dd800917 	ldw	r22,36(sp)
   8c3ac:	dd400817 	ldw	r21,32(sp)
   8c3b0:	dd000717 	ldw	r20,28(sp)
   8c3b4:	dcc00617 	ldw	r19,24(sp)
   8c3b8:	dc800517 	ldw	r18,20(sp)
   8c3bc:	dc400417 	ldw	r17,16(sp)
   8c3c0:	dc000317 	ldw	r16,12(sp)
   8c3c4:	dec00d04 	addi	sp,sp,52
   8c3c8:	f800283a 	ret
   8c3cc:	00803fc4 	movi	r2,255
   8c3d0:	11c0b336 	bltu	r2,r7,8c6a0 <__umoddi3+0x5a8>
   8c3d4:	0007883a 	mov	r3,zero
   8c3d8:	0027883a 	mov	r19,zero
   8c3dc:	003f9a06 	br	8c248 <_gp+0xffff1e54>
   8c3e0:	00804034 	movhi	r2,256
   8c3e4:	10bfffc4 	addi	r2,r2,-1
   8c3e8:	1180b336 	bltu	r2,r6,8c6b8 <__umoddi3+0x5c0>
   8c3ec:	00800404 	movi	r2,16
   8c3f0:	1009883a 	mov	r4,r2
   8c3f4:	003f5806 	br	8c158 <_gp+0xffff1d64>
   8c3f8:	00803fc4 	movi	r2,255
   8c3fc:	1400b136 	bltu	r2,r16,8c6c4 <__umoddi3+0x5cc>
   8c400:	0005883a 	mov	r2,zero
   8c404:	0007883a 	mov	r3,zero
   8c408:	003fac06 	br	8c2bc <_gp+0xffff1ec8>
   8c40c:	34c4d83a 	srl	r2,r6,r19
   8c410:	3c0e983a 	sll	r7,r7,r16
   8c414:	8cf8d83a 	srl	fp,r17,r19
   8c418:	8c22983a 	sll	r17,r17,r16
   8c41c:	38a8b03a 	or	r20,r7,r2
   8c420:	a02ad43a 	srli	r21,r20,16
   8c424:	94c4d83a 	srl	r2,r18,r19
   8c428:	e009883a 	mov	r4,fp
   8c42c:	a80b883a 	mov	r5,r21
   8c430:	342c983a 	sll	r22,r6,r16
   8c434:	88a2b03a 	or	r17,r17,r2
   8c438:	00825780 	call	82578 <__umodsi3>
   8c43c:	e009883a 	mov	r4,fp
   8c440:	a80b883a 	mov	r5,r21
   8c444:	a5ffffcc 	andi	r23,r20,65535
   8c448:	d8800215 	stw	r2,8(sp)
   8c44c:	00825700 	call	82570 <__udivsi3>
   8c450:	1009883a 	mov	r4,r2
   8c454:	b80b883a 	mov	r5,r23
   8c458:	1039883a 	mov	fp,r2
   8c45c:	00825800 	call	82580 <__mulsi3>
   8c460:	d8c00217 	ldw	r3,8(sp)
   8c464:	1009883a 	mov	r4,r2
   8c468:	8804d43a 	srli	r2,r17,16
   8c46c:	1806943a 	slli	r3,r3,16
   8c470:	9424983a 	sll	r18,r18,r16
   8c474:	1886b03a 	or	r3,r3,r2
   8c478:	1900042e 	bgeu	r3,r4,8c48c <__umoddi3+0x394>
   8c47c:	1d07883a 	add	r3,r3,r20
   8c480:	e0bfffc4 	addi	r2,fp,-1
   8c484:	1d009c2e 	bgeu	r3,r20,8c6f8 <__umoddi3+0x600>
   8c488:	1039883a 	mov	fp,r2
   8c48c:	1907c83a 	sub	r3,r3,r4
   8c490:	1809883a 	mov	r4,r3
   8c494:	a80b883a 	mov	r5,r21
   8c498:	d8c00215 	stw	r3,8(sp)
   8c49c:	00825780 	call	82578 <__umodsi3>
   8c4a0:	d8c00217 	ldw	r3,8(sp)
   8c4a4:	a80b883a 	mov	r5,r21
   8c4a8:	d8800015 	stw	r2,0(sp)
   8c4ac:	1809883a 	mov	r4,r3
   8c4b0:	00825700 	call	82570 <__udivsi3>
   8c4b4:	1009883a 	mov	r4,r2
   8c4b8:	b80b883a 	mov	r5,r23
   8c4bc:	102b883a 	mov	r21,r2
   8c4c0:	00825800 	call	82580 <__mulsi3>
   8c4c4:	d9c00017 	ldw	r7,0(sp)
   8c4c8:	8c7fffcc 	andi	r17,r17,65535
   8c4cc:	380e943a 	slli	r7,r7,16
   8c4d0:	3c4eb03a 	or	r7,r7,r17
   8c4d4:	3880042e 	bgeu	r7,r2,8c4e8 <__umoddi3+0x3f0>
   8c4d8:	3d0f883a 	add	r7,r7,r20
   8c4dc:	a8ffffc4 	addi	r3,r21,-1
   8c4e0:	3d00812e 	bgeu	r7,r20,8c6e8 <__umoddi3+0x5f0>
   8c4e4:	182b883a 	mov	r21,r3
   8c4e8:	e038943a 	slli	fp,fp,16
   8c4ec:	b010d43a 	srli	r8,r22,16
   8c4f0:	b1bfffcc 	andi	r6,r22,65535
   8c4f4:	af2ab03a 	or	r21,r21,fp
   8c4f8:	a82ed43a 	srli	r23,r21,16
   8c4fc:	ad7fffcc 	andi	r21,r21,65535
   8c500:	300b883a 	mov	r5,r6
   8c504:	a809883a 	mov	r4,r21
   8c508:	38a3c83a 	sub	r17,r7,r2
   8c50c:	d9800115 	stw	r6,4(sp)
   8c510:	da000015 	stw	r8,0(sp)
   8c514:	00825800 	call	82580 <__mulsi3>
   8c518:	da000017 	ldw	r8,0(sp)
   8c51c:	a809883a 	mov	r4,r21
   8c520:	1039883a 	mov	fp,r2
   8c524:	400b883a 	mov	r5,r8
   8c528:	da000215 	stw	r8,8(sp)
   8c52c:	00825800 	call	82580 <__mulsi3>
   8c530:	d9800117 	ldw	r6,4(sp)
   8c534:	b809883a 	mov	r4,r23
   8c538:	d8800015 	stw	r2,0(sp)
   8c53c:	300b883a 	mov	r5,r6
   8c540:	00825800 	call	82580 <__mulsi3>
   8c544:	d8c00217 	ldw	r3,8(sp)
   8c548:	b809883a 	mov	r4,r23
   8c54c:	102b883a 	mov	r21,r2
   8c550:	180b883a 	mov	r5,r3
   8c554:	00825800 	call	82580 <__mulsi3>
   8c558:	d9c00017 	ldw	r7,0(sp)
   8c55c:	1007883a 	mov	r3,r2
   8c560:	e004d43a 	srli	r2,fp,16
   8c564:	a9c9883a 	add	r4,r21,r7
   8c568:	2089883a 	add	r4,r4,r2
   8c56c:	2540022e 	bgeu	r4,r21,8c578 <__umoddi3+0x480>
   8c570:	00800074 	movhi	r2,1
   8c574:	1887883a 	add	r3,r3,r2
   8c578:	2004d43a 	srli	r2,r4,16
   8c57c:	2008943a 	slli	r4,r4,16
   8c580:	e73fffcc 	andi	fp,fp,65535
   8c584:	1887883a 	add	r3,r3,r2
   8c588:	2709883a 	add	r4,r4,fp
   8c58c:	88c03e36 	bltu	r17,r3,8c688 <__umoddi3+0x590>
   8c590:	88c06226 	beq	r17,r3,8c71c <__umoddi3+0x624>
   8c594:	88c7c83a 	sub	r3,r17,r3
   8c598:	202d883a 	mov	r22,r4
   8c59c:	95adc83a 	sub	r22,r18,r22
   8c5a0:	95a5803a 	cmpltu	r18,r18,r22
   8c5a4:	1c87c83a 	sub	r3,r3,r18
   8c5a8:	1cc4983a 	sll	r2,r3,r19
   8c5ac:	b42cd83a 	srl	r22,r22,r16
   8c5b0:	1c06d83a 	srl	r3,r3,r16
   8c5b4:	1584b03a 	or	r2,r2,r22
   8c5b8:	003f7806 	br	8c39c <_gp+0xffff1fa8>
   8c5bc:	0025883a 	mov	r18,zero
   8c5c0:	003ef406 	br	8c194 <_gp+0xffff1da0>
   8c5c4:	8560983a 	sll	r16,r16,r21
   8c5c8:	88e6d83a 	srl	r19,r17,r3
   8c5cc:	90c6d83a 	srl	r3,r18,r3
   8c5d0:	8028d43a 	srli	r20,r16,16
   8c5d4:	8d62983a 	sll	r17,r17,r21
   8c5d8:	9809883a 	mov	r4,r19
   8c5dc:	a00b883a 	mov	r5,r20
   8c5e0:	88eeb03a 	or	r23,r17,r3
   8c5e4:	00825780 	call	82578 <__umodsi3>
   8c5e8:	9809883a 	mov	r4,r19
   8c5ec:	a00b883a 	mov	r5,r20
   8c5f0:	1023883a 	mov	r17,r2
   8c5f4:	85bfffcc 	andi	r22,r16,65535
   8c5f8:	00825700 	call	82570 <__udivsi3>
   8c5fc:	1009883a 	mov	r4,r2
   8c600:	b00b883a 	mov	r5,r22
   8c604:	00825800 	call	82580 <__mulsi3>
   8c608:	1007883a 	mov	r3,r2
   8c60c:	8808943a 	slli	r4,r17,16
   8c610:	b804d43a 	srli	r2,r23,16
   8c614:	9566983a 	sll	r19,r18,r21
   8c618:	2088b03a 	or	r4,r4,r2
   8c61c:	20c0042e 	bgeu	r4,r3,8c630 <__umoddi3+0x538>
   8c620:	2409883a 	add	r4,r4,r16
   8c624:	24000236 	bltu	r4,r16,8c630 <__umoddi3+0x538>
   8c628:	20c0012e 	bgeu	r4,r3,8c630 <__umoddi3+0x538>
   8c62c:	2409883a 	add	r4,r4,r16
   8c630:	20e5c83a 	sub	r18,r4,r3
   8c634:	9009883a 	mov	r4,r18
   8c638:	a00b883a 	mov	r5,r20
   8c63c:	00825780 	call	82578 <__umodsi3>
   8c640:	1023883a 	mov	r17,r2
   8c644:	9009883a 	mov	r4,r18
   8c648:	a00b883a 	mov	r5,r20
   8c64c:	8822943a 	slli	r17,r17,16
   8c650:	00825700 	call	82570 <__udivsi3>
   8c654:	1009883a 	mov	r4,r2
   8c658:	b00b883a 	mov	r5,r22
   8c65c:	bdffffcc 	andi	r23,r23,65535
   8c660:	00825800 	call	82580 <__mulsi3>
   8c664:	8de2b03a 	or	r17,r17,r23
   8c668:	8880042e 	bgeu	r17,r2,8c67c <__umoddi3+0x584>
   8c66c:	8c23883a 	add	r17,r17,r16
   8c670:	8c000236 	bltu	r17,r16,8c67c <__umoddi3+0x584>
   8c674:	8880012e 	bgeu	r17,r2,8c67c <__umoddi3+0x584>
   8c678:	8c23883a 	add	r17,r17,r16
   8c67c:	88a3c83a 	sub	r17,r17,r2
   8c680:	a825883a 	mov	r18,r21
   8c684:	003f1a06 	br	8c2f0 <_gp+0xffff1efc>
   8c688:	25adc83a 	sub	r22,r4,r22
   8c68c:	1d07c83a 	sub	r3,r3,r20
   8c690:	2589803a 	cmpltu	r4,r4,r22
   8c694:	1907c83a 	sub	r3,r3,r4
   8c698:	88c7c83a 	sub	r3,r17,r3
   8c69c:	003fbf06 	br	8c59c <_gp+0xffff21a8>
   8c6a0:	00c00204 	movi	r3,8
   8c6a4:	1827883a 	mov	r19,r3
   8c6a8:	003ee706 	br	8c248 <_gp+0xffff1e54>
   8c6ac:	00c00604 	movi	r3,24
   8c6b0:	1827883a 	mov	r19,r3
   8c6b4:	003ee406 	br	8c248 <_gp+0xffff1e54>
   8c6b8:	00800604 	movi	r2,24
   8c6bc:	1009883a 	mov	r4,r2
   8c6c0:	003ea506 	br	8c158 <_gp+0xffff1d64>
   8c6c4:	00800204 	movi	r2,8
   8c6c8:	1007883a 	mov	r3,r2
   8c6cc:	003efb06 	br	8c2bc <_gp+0xffff1ec8>
   8c6d0:	00800604 	movi	r2,24
   8c6d4:	1007883a 	mov	r3,r2
   8c6d8:	003ef806 	br	8c2bc <_gp+0xffff1ec8>
   8c6dc:	00800204 	movi	r2,8
   8c6e0:	1009883a 	mov	r4,r2
   8c6e4:	003e9c06 	br	8c158 <_gp+0xffff1d64>
   8c6e8:	38bf7e2e 	bgeu	r7,r2,8c4e4 <_gp+0xffff20f0>
   8c6ec:	ad7fff84 	addi	r21,r21,-2
   8c6f0:	3d0f883a 	add	r7,r7,r20
   8c6f4:	003f7c06 	br	8c4e8 <_gp+0xffff20f4>
   8c6f8:	193f632e 	bgeu	r3,r4,8c488 <_gp+0xffff2094>
   8c6fc:	e73fff84 	addi	fp,fp,-2
   8c700:	1d07883a 	add	r3,r3,r20
   8c704:	003f6106 	br	8c48c <_gp+0xffff2098>
   8c708:	1c07883a 	add	r3,r3,r16
   8c70c:	003f0a06 	br	8c338 <_gp+0xffff1f44>
   8c710:	9005883a 	mov	r2,r18
   8c714:	a007883a 	mov	r3,r20
   8c718:	003f2006 	br	8c39c <_gp+0xffff1fa8>
   8c71c:	913fda36 	bltu	r18,r4,8c688 <_gp+0xffff2294>
   8c720:	202d883a 	mov	r22,r4
   8c724:	0007883a 	mov	r3,zero
   8c728:	003f9c06 	br	8c59c <_gp+0xffff21a8>

0008c72c <__adddf3>:
   8c72c:	00800434 	movhi	r2,16
   8c730:	10bfffc4 	addi	r2,r2,-1
   8c734:	defffb04 	addi	sp,sp,-20
   8c738:	2890703a 	and	r8,r5,r2
   8c73c:	2806d7fa 	srli	r3,r5,31
   8c740:	3884703a 	and	r2,r7,r2
   8c744:	2014d77a 	srli	r10,r4,29
   8c748:	3812d53a 	srli	r9,r7,20
   8c74c:	dc400115 	stw	r17,4(sp)
   8c750:	100490fa 	slli	r2,r2,3
   8c754:	2822d53a 	srli	r17,r5,20
   8c758:	380ed7fa 	srli	r7,r7,31
   8c75c:	400a90fa 	slli	r5,r8,3
   8c760:	3010d77a 	srli	r8,r6,29
   8c764:	dc800215 	stw	r18,8(sp)
   8c768:	dc000015 	stw	r16,0(sp)
   8c76c:	dfc00415 	stw	ra,16(sp)
   8c770:	dcc00315 	stw	r19,12(sp)
   8c774:	1c803fcc 	andi	r18,r3,255
   8c778:	202090fa 	slli	r16,r4,3
   8c77c:	8c41ffcc 	andi	r17,r17,2047
   8c780:	2a8ab03a 	or	r5,r5,r10
   8c784:	4901ffcc 	andi	r4,r9,2047
   8c788:	1204b03a 	or	r2,r2,r8
   8c78c:	300c90fa 	slli	r6,r6,3
   8c790:	91c07126 	beq	r18,r7,8c958 <__adddf3+0x22c>
   8c794:	8907c83a 	sub	r3,r17,r4
   8c798:	00c0a00e 	bge	zero,r3,8ca1c <__adddf3+0x2f0>
   8c79c:	2000291e 	bne	r4,zero,8c844 <__adddf3+0x118>
   8c7a0:	1188b03a 	or	r4,r2,r6
   8c7a4:	20008b1e 	bne	r4,zero,8c9d4 <__adddf3+0x2a8>
   8c7a8:	808001cc 	andi	r2,r16,7
   8c7ac:	10005a26 	beq	r2,zero,8c918 <__adddf3+0x1ec>
   8c7b0:	80c003cc 	andi	r3,r16,15
   8c7b4:	00800104 	movi	r2,4
   8c7b8:	18805726 	beq	r3,r2,8c918 <__adddf3+0x1ec>
   8c7bc:	81000104 	addi	r4,r16,4
   8c7c0:	2421803a 	cmpltu	r16,r4,r16
   8c7c4:	2c0b883a 	add	r5,r5,r16
   8c7c8:	2880202c 	andhi	r2,r5,128
   8c7cc:	9007883a 	mov	r3,r18
   8c7d0:	2021883a 	mov	r16,r4
   8c7d4:	10005326 	beq	r2,zero,8c924 <__adddf3+0x1f8>
   8c7d8:	8c400044 	addi	r17,r17,1
   8c7dc:	0081ffc4 	movi	r2,2047
   8c7e0:	8880ae26 	beq	r17,r2,8ca9c <__adddf3+0x370>
   8c7e4:	00bfe034 	movhi	r2,65408
   8c7e8:	10bfffc4 	addi	r2,r2,-1
   8c7ec:	288a703a 	and	r5,r5,r2
   8c7f0:	2804977a 	slli	r2,r5,29
   8c7f4:	280a927a 	slli	r5,r5,9
   8c7f8:	8020d0fa 	srli	r16,r16,3
   8c7fc:	280ad33a 	srli	r5,r5,12
   8c800:	1404b03a 	or	r2,r2,r16
   8c804:	8c41ffcc 	andi	r17,r17,2047
   8c808:	8822953a 	slli	r17,r17,20
   8c80c:	18c03fcc 	andi	r3,r3,255
   8c810:	180897fa 	slli	r4,r3,31
   8c814:	00c00434 	movhi	r3,16
   8c818:	18ffffc4 	addi	r3,r3,-1
   8c81c:	28c6703a 	and	r3,r5,r3
   8c820:	1c46b03a 	or	r3,r3,r17
   8c824:	1906b03a 	or	r3,r3,r4
   8c828:	dfc00417 	ldw	ra,16(sp)
   8c82c:	dcc00317 	ldw	r19,12(sp)
   8c830:	dc800217 	ldw	r18,8(sp)
   8c834:	dc400117 	ldw	r17,4(sp)
   8c838:	dc000017 	ldw	r16,0(sp)
   8c83c:	dec00504 	addi	sp,sp,20
   8c840:	f800283a 	ret
   8c844:	0101ffc4 	movi	r4,2047
   8c848:	893fd726 	beq	r17,r4,8c7a8 <_gp+0xffff23b4>
   8c84c:	10802034 	orhi	r2,r2,128
   8c850:	01000e04 	movi	r4,56
   8c854:	20c09416 	blt	r4,r3,8caa8 <__adddf3+0x37c>
   8c858:	010007c4 	movi	r4,31
   8c85c:	20c0b716 	blt	r4,r3,8cb3c <__adddf3+0x410>
   8c860:	01000804 	movi	r4,32
   8c864:	20c9c83a 	sub	r4,r4,r3
   8c868:	30ced83a 	srl	r7,r6,r3
   8c86c:	1110983a 	sll	r8,r2,r4
   8c870:	3108983a 	sll	r4,r6,r4
   8c874:	10c6d83a 	srl	r3,r2,r3
   8c878:	41c4b03a 	or	r2,r8,r7
   8c87c:	2008c03a 	cmpne	r4,r4,zero
   8c880:	110cb03a 	or	r6,r2,r4
   8c884:	818dc83a 	sub	r6,r16,r6
   8c888:	81a1803a 	cmpltu	r16,r16,r6
   8c88c:	28cbc83a 	sub	r5,r5,r3
   8c890:	2c0bc83a 	sub	r5,r5,r16
   8c894:	3021883a 	mov	r16,r6
   8c898:	2880202c 	andhi	r2,r5,128
   8c89c:	103fc226 	beq	r2,zero,8c7a8 <_gp+0xffff23b4>
   8c8a0:	04c02034 	movhi	r19,128
   8c8a4:	9cffffc4 	addi	r19,r19,-1
   8c8a8:	2ce6703a 	and	r19,r5,r19
   8c8ac:	98006c26 	beq	r19,zero,8ca60 <__adddf3+0x334>
   8c8b0:	9809883a 	mov	r4,r19
   8c8b4:	00823c00 	call	823c0 <__clzsi2>
   8c8b8:	10fffe04 	addi	r3,r2,-8
   8c8bc:	010007c4 	movi	r4,31
   8c8c0:	20c06d16 	blt	r4,r3,8ca78 <__adddf3+0x34c>
   8c8c4:	01000a04 	movi	r4,40
   8c8c8:	2085c83a 	sub	r2,r4,r2
   8c8cc:	8084d83a 	srl	r2,r16,r2
   8c8d0:	98e6983a 	sll	r19,r19,r3
   8c8d4:	80e0983a 	sll	r16,r16,r3
   8c8d8:	14c4b03a 	or	r2,r2,r19
   8c8dc:	1c406a16 	blt	r3,r17,8ca88 <__adddf3+0x35c>
   8c8e0:	1c63c83a 	sub	r17,r3,r17
   8c8e4:	89400044 	addi	r5,r17,1
   8c8e8:	00c007c4 	movi	r3,31
   8c8ec:	19408616 	blt	r3,r5,8cb08 <__adddf3+0x3dc>
   8c8f0:	1c47c83a 	sub	r3,r3,r17
   8c8f4:	8148d83a 	srl	r4,r16,r5
   8c8f8:	80e0983a 	sll	r16,r16,r3
   8c8fc:	10c6983a 	sll	r3,r2,r3
   8c900:	114ad83a 	srl	r5,r2,r5
   8c904:	8004c03a 	cmpne	r2,r16,zero
   8c908:	20e0b03a 	or	r16,r4,r3
   8c90c:	80a0b03a 	or	r16,r16,r2
   8c910:	0023883a 	mov	r17,zero
   8c914:	003fa406 	br	8c7a8 <_gp+0xffff23b4>
   8c918:	2880202c 	andhi	r2,r5,128
   8c91c:	9007883a 	mov	r3,r18
   8c920:	103fad1e 	bne	r2,zero,8c7d8 <_gp+0xffff23e4>
   8c924:	2804977a 	slli	r2,r5,29
   8c928:	8020d0fa 	srli	r16,r16,3
   8c92c:	0101ffc4 	movi	r4,2047
   8c930:	280ad0fa 	srli	r5,r5,3
   8c934:	1404b03a 	or	r2,r2,r16
   8c938:	8900031e 	bne	r17,r4,8c948 <__adddf3+0x21c>
   8c93c:	1148b03a 	or	r4,r2,r5
   8c940:	20005626 	beq	r4,zero,8ca9c <__adddf3+0x370>
   8c944:	29400234 	orhi	r5,r5,8
   8c948:	01000434 	movhi	r4,16
   8c94c:	213fffc4 	addi	r4,r4,-1
   8c950:	290a703a 	and	r5,r5,r4
   8c954:	003fab06 	br	8c804 <_gp+0xffff2410>
   8c958:	890fc83a 	sub	r7,r17,r4
   8c95c:	01c0560e 	bge	zero,r7,8cab8 <__adddf3+0x38c>
   8c960:	20002426 	beq	r4,zero,8c9f4 <__adddf3+0x2c8>
   8c964:	0101ffc4 	movi	r4,2047
   8c968:	893f8f26 	beq	r17,r4,8c7a8 <_gp+0xffff23b4>
   8c96c:	10802034 	orhi	r2,r2,128
   8c970:	01000e04 	movi	r4,56
   8c974:	21c09d0e 	bge	r4,r7,8cbec <__adddf3+0x4c0>
   8c978:	118cb03a 	or	r6,r2,r6
   8c97c:	300cc03a 	cmpne	r6,r6,zero
   8c980:	000f883a 	mov	r7,zero
   8c984:	340d883a 	add	r6,r6,r16
   8c988:	3421803a 	cmpltu	r16,r6,r16
   8c98c:	394b883a 	add	r5,r7,r5
   8c990:	2c0b883a 	add	r5,r5,r16
   8c994:	3021883a 	mov	r16,r6
   8c998:	2880202c 	andhi	r2,r5,128
   8c99c:	103f8226 	beq	r2,zero,8c7a8 <_gp+0xffff23b4>
   8c9a0:	8c400044 	addi	r17,r17,1
   8c9a4:	0081ffc4 	movi	r2,2047
   8c9a8:	8880cb26 	beq	r17,r2,8ccd8 <__adddf3+0x5ac>
   8c9ac:	00bfe034 	movhi	r2,65408
   8c9b0:	10bfffc4 	addi	r2,r2,-1
   8c9b4:	288a703a 	and	r5,r5,r2
   8c9b8:	8006d07a 	srli	r3,r16,1
   8c9bc:	280497fa 	slli	r2,r5,31
   8c9c0:	8400004c 	andi	r16,r16,1
   8c9c4:	80e0b03a 	or	r16,r16,r3
   8c9c8:	80a0b03a 	or	r16,r16,r2
   8c9cc:	280ad07a 	srli	r5,r5,1
   8c9d0:	003f7506 	br	8c7a8 <_gp+0xffff23b4>
   8c9d4:	18ffffc4 	addi	r3,r3,-1
   8c9d8:	1800481e 	bne	r3,zero,8cafc <__adddf3+0x3d0>
   8c9dc:	818dc83a 	sub	r6,r16,r6
   8c9e0:	81a1803a 	cmpltu	r16,r16,r6
   8c9e4:	288bc83a 	sub	r5,r5,r2
   8c9e8:	2c0bc83a 	sub	r5,r5,r16
   8c9ec:	3021883a 	mov	r16,r6
   8c9f0:	003fa906 	br	8c898 <_gp+0xffff24a4>
   8c9f4:	1188b03a 	or	r4,r2,r6
   8c9f8:	203f6b26 	beq	r4,zero,8c7a8 <_gp+0xffff23b4>
   8c9fc:	39ffffc4 	addi	r7,r7,-1
   8ca00:	3800931e 	bne	r7,zero,8cc50 <__adddf3+0x524>
   8ca04:	340d883a 	add	r6,r6,r16
   8ca08:	3421803a 	cmpltu	r16,r6,r16
   8ca0c:	114b883a 	add	r5,r2,r5
   8ca10:	2c0b883a 	add	r5,r5,r16
   8ca14:	3021883a 	mov	r16,r6
   8ca18:	003fdf06 	br	8c998 <_gp+0xffff25a4>
   8ca1c:	1800531e 	bne	r3,zero,8cb6c <__adddf3+0x440>
   8ca20:	88c00044 	addi	r3,r17,1
   8ca24:	18c1ffcc 	andi	r3,r3,2047
   8ca28:	01000044 	movi	r4,1
   8ca2c:	20c0a00e 	bge	r4,r3,8ccb0 <__adddf3+0x584>
   8ca30:	8187c83a 	sub	r3,r16,r6
   8ca34:	80c9803a 	cmpltu	r4,r16,r3
   8ca38:	28a7c83a 	sub	r19,r5,r2
   8ca3c:	9927c83a 	sub	r19,r19,r4
   8ca40:	9900202c 	andhi	r4,r19,128
   8ca44:	20006226 	beq	r4,zero,8cbd0 <__adddf3+0x4a4>
   8ca48:	3421c83a 	sub	r16,r6,r16
   8ca4c:	1145c83a 	sub	r2,r2,r5
   8ca50:	340d803a 	cmpltu	r6,r6,r16
   8ca54:	11a7c83a 	sub	r19,r2,r6
   8ca58:	3825883a 	mov	r18,r7
   8ca5c:	983f941e 	bne	r19,zero,8c8b0 <_gp+0xffff24bc>
   8ca60:	8009883a 	mov	r4,r16
   8ca64:	00823c00 	call	823c0 <__clzsi2>
   8ca68:	10800804 	addi	r2,r2,32
   8ca6c:	10fffe04 	addi	r3,r2,-8
   8ca70:	010007c4 	movi	r4,31
   8ca74:	20ff930e 	bge	r4,r3,8c8c4 <_gp+0xffff24d0>
   8ca78:	10bff604 	addi	r2,r2,-40
   8ca7c:	8084983a 	sll	r2,r16,r2
   8ca80:	0021883a 	mov	r16,zero
   8ca84:	1c7f960e 	bge	r3,r17,8c8e0 <_gp+0xffff24ec>
   8ca88:	017fe034 	movhi	r5,65408
   8ca8c:	297fffc4 	addi	r5,r5,-1
   8ca90:	88e3c83a 	sub	r17,r17,r3
   8ca94:	114a703a 	and	r5,r2,r5
   8ca98:	003f4306 	br	8c7a8 <_gp+0xffff23b4>
   8ca9c:	000b883a 	mov	r5,zero
   8caa0:	0005883a 	mov	r2,zero
   8caa4:	003f5706 	br	8c804 <_gp+0xffff2410>
   8caa8:	118cb03a 	or	r6,r2,r6
   8caac:	300cc03a 	cmpne	r6,r6,zero
   8cab0:	0007883a 	mov	r3,zero
   8cab4:	003f7306 	br	8c884 <_gp+0xffff2490>
   8cab8:	3800961e 	bne	r7,zero,8cd14 <__adddf3+0x5e8>
   8cabc:	89000044 	addi	r4,r17,1
   8cac0:	2201ffcc 	andi	r8,r4,2047
   8cac4:	01c00044 	movi	r7,1
   8cac8:	3a00680e 	bge	r7,r8,8cc6c <__adddf3+0x540>
   8cacc:	01c1ffc4 	movi	r7,2047
   8cad0:	21c0a726 	beq	r4,r7,8cd70 <__adddf3+0x644>
   8cad4:	340d883a 	add	r6,r6,r16
   8cad8:	3421803a 	cmpltu	r16,r6,r16
   8cadc:	114b883a 	add	r5,r2,r5
   8cae0:	2c0b883a 	add	r5,r5,r16
   8cae4:	282097fa 	slli	r16,r5,31
   8cae8:	300cd07a 	srli	r6,r6,1
   8caec:	280ad07a 	srli	r5,r5,1
   8caf0:	2023883a 	mov	r17,r4
   8caf4:	81a0b03a 	or	r16,r16,r6
   8caf8:	003f2b06 	br	8c7a8 <_gp+0xffff23b4>
   8cafc:	0101ffc4 	movi	r4,2047
   8cb00:	893f531e 	bne	r17,r4,8c850 <_gp+0xffff245c>
   8cb04:	003f2806 	br	8c7a8 <_gp+0xffff23b4>
   8cb08:	893ff844 	addi	r4,r17,-31
   8cb0c:	00c00804 	movi	r3,32
   8cb10:	1108d83a 	srl	r4,r2,r4
   8cb14:	28c05126 	beq	r5,r3,8cc5c <__adddf3+0x530>
   8cb18:	00c00fc4 	movi	r3,63
   8cb1c:	1c63c83a 	sub	r17,r3,r17
   8cb20:	1444983a 	sll	r2,r2,r17
   8cb24:	1420b03a 	or	r16,r2,r16
   8cb28:	8020c03a 	cmpne	r16,r16,zero
   8cb2c:	8120b03a 	or	r16,r16,r4
   8cb30:	000b883a 	mov	r5,zero
   8cb34:	0023883a 	mov	r17,zero
   8cb38:	003f1b06 	br	8c7a8 <_gp+0xffff23b4>
   8cb3c:	193ff804 	addi	r4,r3,-32
   8cb40:	01c00804 	movi	r7,32
   8cb44:	1108d83a 	srl	r4,r2,r4
   8cb48:	19c04626 	beq	r3,r7,8cc64 <__adddf3+0x538>
   8cb4c:	01c01004 	movi	r7,64
   8cb50:	38c7c83a 	sub	r3,r7,r3
   8cb54:	10c4983a 	sll	r2,r2,r3
   8cb58:	118cb03a 	or	r6,r2,r6
   8cb5c:	300cc03a 	cmpne	r6,r6,zero
   8cb60:	310cb03a 	or	r6,r6,r4
   8cb64:	0007883a 	mov	r3,zero
   8cb68:	003f4606 	br	8c884 <_gp+0xffff2490>
   8cb6c:	88002b26 	beq	r17,zero,8cc1c <__adddf3+0x4f0>
   8cb70:	0201ffc4 	movi	r8,2047
   8cb74:	22002f26 	beq	r4,r8,8cc34 <__adddf3+0x508>
   8cb78:	00c7c83a 	sub	r3,zero,r3
   8cb7c:	29402034 	orhi	r5,r5,128
   8cb80:	02000e04 	movi	r8,56
   8cb84:	40c07616 	blt	r8,r3,8cd60 <__adddf3+0x634>
   8cb88:	020007c4 	movi	r8,31
   8cb8c:	40c0d216 	blt	r8,r3,8ced8 <__adddf3+0x7ac>
   8cb90:	02000804 	movi	r8,32
   8cb94:	40d1c83a 	sub	r8,r8,r3
   8cb98:	2a14983a 	sll	r10,r5,r8
   8cb9c:	80d2d83a 	srl	r9,r16,r3
   8cba0:	8210983a 	sll	r8,r16,r8
   8cba4:	28cad83a 	srl	r5,r5,r3
   8cba8:	5252b03a 	or	r9,r10,r9
   8cbac:	4006c03a 	cmpne	r3,r8,zero
   8cbb0:	48e0b03a 	or	r16,r9,r3
   8cbb4:	3421c83a 	sub	r16,r6,r16
   8cbb8:	114bc83a 	sub	r5,r2,r5
   8cbbc:	340d803a 	cmpltu	r6,r6,r16
   8cbc0:	298bc83a 	sub	r5,r5,r6
   8cbc4:	2023883a 	mov	r17,r4
   8cbc8:	3825883a 	mov	r18,r7
   8cbcc:	003f3206 	br	8c898 <_gp+0xffff24a4>
   8cbd0:	98c4b03a 	or	r2,r19,r3
   8cbd4:	10001c1e 	bne	r2,zero,8cc48 <__adddf3+0x51c>
   8cbd8:	0007883a 	mov	r3,zero
   8cbdc:	000b883a 	mov	r5,zero
   8cbe0:	0021883a 	mov	r16,zero
   8cbe4:	0023883a 	mov	r17,zero
   8cbe8:	003f4e06 	br	8c924 <_gp+0xffff2530>
   8cbec:	010007c4 	movi	r4,31
   8cbf0:	21c03c16 	blt	r4,r7,8cce4 <__adddf3+0x5b8>
   8cbf4:	01000804 	movi	r4,32
   8cbf8:	21c9c83a 	sub	r4,r4,r7
   8cbfc:	31d0d83a 	srl	r8,r6,r7
   8cc00:	1112983a 	sll	r9,r2,r4
   8cc04:	3108983a 	sll	r4,r6,r4
   8cc08:	11ced83a 	srl	r7,r2,r7
   8cc0c:	4a04b03a 	or	r2,r9,r8
   8cc10:	2008c03a 	cmpne	r4,r4,zero
   8cc14:	110cb03a 	or	r6,r2,r4
   8cc18:	003f5a06 	br	8c984 <_gp+0xffff2590>
   8cc1c:	2c10b03a 	or	r8,r5,r16
   8cc20:	40000426 	beq	r8,zero,8cc34 <__adddf3+0x508>
   8cc24:	00c6303a 	nor	r3,zero,r3
   8cc28:	183fe226 	beq	r3,zero,8cbb4 <_gp+0xffff27c0>
   8cc2c:	0201ffc4 	movi	r8,2047
   8cc30:	223fd31e 	bne	r4,r8,8cb80 <_gp+0xffff278c>
   8cc34:	100b883a 	mov	r5,r2
   8cc38:	3021883a 	mov	r16,r6
   8cc3c:	2023883a 	mov	r17,r4
   8cc40:	3825883a 	mov	r18,r7
   8cc44:	003ed806 	br	8c7a8 <_gp+0xffff23b4>
   8cc48:	1821883a 	mov	r16,r3
   8cc4c:	003f1706 	br	8c8ac <_gp+0xffff24b8>
   8cc50:	0101ffc4 	movi	r4,2047
   8cc54:	893f461e 	bne	r17,r4,8c970 <_gp+0xffff257c>
   8cc58:	003ed306 	br	8c7a8 <_gp+0xffff23b4>
   8cc5c:	0005883a 	mov	r2,zero
   8cc60:	003fb006 	br	8cb24 <_gp+0xffff2730>
   8cc64:	0005883a 	mov	r2,zero
   8cc68:	003fbb06 	br	8cb58 <_gp+0xffff2764>
   8cc6c:	2c06b03a 	or	r3,r5,r16
   8cc70:	8800841e 	bne	r17,zero,8ce84 <__adddf3+0x758>
   8cc74:	1800b226 	beq	r3,zero,8cf40 <__adddf3+0x814>
   8cc78:	1186b03a 	or	r3,r2,r6
   8cc7c:	183eca26 	beq	r3,zero,8c7a8 <_gp+0xffff23b4>
   8cc80:	340d883a 	add	r6,r6,r16
   8cc84:	114b883a 	add	r5,r2,r5
   8cc88:	3421803a 	cmpltu	r16,r6,r16
   8cc8c:	2c0b883a 	add	r5,r5,r16
   8cc90:	2880202c 	andhi	r2,r5,128
   8cc94:	1000c026 	beq	r2,zero,8cf98 <__adddf3+0x86c>
   8cc98:	00bfe034 	movhi	r2,65408
   8cc9c:	10bfffc4 	addi	r2,r2,-1
   8cca0:	288a703a 	and	r5,r5,r2
   8cca4:	3021883a 	mov	r16,r6
   8cca8:	3823883a 	mov	r17,r7
   8ccac:	003ebe06 	br	8c7a8 <_gp+0xffff23b4>
   8ccb0:	2c06b03a 	or	r3,r5,r16
   8ccb4:	8800221e 	bne	r17,zero,8cd40 <__adddf3+0x614>
   8ccb8:	1800481e 	bne	r3,zero,8cddc <__adddf3+0x6b0>
   8ccbc:	1186b03a 	or	r3,r2,r6
   8ccc0:	18000426 	beq	r3,zero,8ccd4 <__adddf3+0x5a8>
   8ccc4:	100b883a 	mov	r5,r2
   8ccc8:	3021883a 	mov	r16,r6
   8cccc:	3825883a 	mov	r18,r7
   8ccd0:	003eb506 	br	8c7a8 <_gp+0xffff23b4>
   8ccd4:	0007883a 	mov	r3,zero
   8ccd8:	000b883a 	mov	r5,zero
   8ccdc:	0021883a 	mov	r16,zero
   8cce0:	003f1006 	br	8c924 <_gp+0xffff2530>
   8cce4:	393ff804 	addi	r4,r7,-32
   8cce8:	02000804 	movi	r8,32
   8ccec:	1108d83a 	srl	r4,r2,r4
   8ccf0:	3a007726 	beq	r7,r8,8ced0 <__adddf3+0x7a4>
   8ccf4:	02001004 	movi	r8,64
   8ccf8:	41cfc83a 	sub	r7,r8,r7
   8ccfc:	11c4983a 	sll	r2,r2,r7
   8cd00:	118cb03a 	or	r6,r2,r6
   8cd04:	300cc03a 	cmpne	r6,r6,zero
   8cd08:	310cb03a 	or	r6,r6,r4
   8cd0c:	000f883a 	mov	r7,zero
   8cd10:	003f1c06 	br	8c984 <_gp+0xffff2590>
   8cd14:	88001a1e 	bne	r17,zero,8cd80 <__adddf3+0x654>
   8cd18:	2c10b03a 	or	r8,r5,r16
   8cd1c:	40005526 	beq	r8,zero,8ce74 <__adddf3+0x748>
   8cd20:	01ce303a 	nor	r7,zero,r7
   8cd24:	3800511e 	bne	r7,zero,8ce6c <__adddf3+0x740>
   8cd28:	81a1883a 	add	r16,r16,r6
   8cd2c:	114b883a 	add	r5,r2,r5
   8cd30:	818d803a 	cmpltu	r6,r16,r6
   8cd34:	298b883a 	add	r5,r5,r6
   8cd38:	2023883a 	mov	r17,r4
   8cd3c:	003f1606 	br	8c998 <_gp+0xffff25a4>
   8cd40:	1800341e 	bne	r3,zero,8ce14 <__adddf3+0x6e8>
   8cd44:	1186b03a 	or	r3,r2,r6
   8cd48:	18006f26 	beq	r3,zero,8cf08 <__adddf3+0x7dc>
   8cd4c:	100b883a 	mov	r5,r2
   8cd50:	3021883a 	mov	r16,r6
   8cd54:	3825883a 	mov	r18,r7
   8cd58:	0441ffc4 	movi	r17,2047
   8cd5c:	003e9206 	br	8c7a8 <_gp+0xffff23b4>
   8cd60:	2c20b03a 	or	r16,r5,r16
   8cd64:	8020c03a 	cmpne	r16,r16,zero
   8cd68:	000b883a 	mov	r5,zero
   8cd6c:	003f9106 	br	8cbb4 <_gp+0xffff27c0>
   8cd70:	2023883a 	mov	r17,r4
   8cd74:	000b883a 	mov	r5,zero
   8cd78:	0021883a 	mov	r16,zero
   8cd7c:	003ee906 	br	8c924 <_gp+0xffff2530>
   8cd80:	0201ffc4 	movi	r8,2047
   8cd84:	22003b26 	beq	r4,r8,8ce74 <__adddf3+0x748>
   8cd88:	01cfc83a 	sub	r7,zero,r7
   8cd8c:	29402034 	orhi	r5,r5,128
   8cd90:	02000e04 	movi	r8,56
   8cd94:	41c06216 	blt	r8,r7,8cf20 <__adddf3+0x7f4>
   8cd98:	020007c4 	movi	r8,31
   8cd9c:	41c07016 	blt	r8,r7,8cf60 <__adddf3+0x834>
   8cda0:	02000804 	movi	r8,32
   8cda4:	41d1c83a 	sub	r8,r8,r7
   8cda8:	2a14983a 	sll	r10,r5,r8
   8cdac:	81d2d83a 	srl	r9,r16,r7
   8cdb0:	8210983a 	sll	r8,r16,r8
   8cdb4:	29cad83a 	srl	r5,r5,r7
   8cdb8:	5252b03a 	or	r9,r10,r9
   8cdbc:	400ec03a 	cmpne	r7,r8,zero
   8cdc0:	49e0b03a 	or	r16,r9,r7
   8cdc4:	81a1883a 	add	r16,r16,r6
   8cdc8:	2885883a 	add	r2,r5,r2
   8cdcc:	818d803a 	cmpltu	r6,r16,r6
   8cdd0:	118b883a 	add	r5,r2,r6
   8cdd4:	2023883a 	mov	r17,r4
   8cdd8:	003eef06 	br	8c998 <_gp+0xffff25a4>
   8cddc:	1186b03a 	or	r3,r2,r6
   8cde0:	183e7126 	beq	r3,zero,8c7a8 <_gp+0xffff23b4>
   8cde4:	8187c83a 	sub	r3,r16,r6
   8cde8:	80d1803a 	cmpltu	r8,r16,r3
   8cdec:	2889c83a 	sub	r4,r5,r2
   8cdf0:	2209c83a 	sub	r4,r4,r8
   8cdf4:	2200202c 	andhi	r8,r4,128
   8cdf8:	40005426 	beq	r8,zero,8cf4c <__adddf3+0x820>
   8cdfc:	3421c83a 	sub	r16,r6,r16
   8ce00:	114bc83a 	sub	r5,r2,r5
   8ce04:	340d803a 	cmpltu	r6,r6,r16
   8ce08:	298bc83a 	sub	r5,r5,r6
   8ce0c:	3825883a 	mov	r18,r7
   8ce10:	003e6506 	br	8c7a8 <_gp+0xffff23b4>
   8ce14:	1186b03a 	or	r3,r2,r6
   8ce18:	18002b26 	beq	r3,zero,8cec8 <__adddf3+0x79c>
   8ce1c:	2806d0fa 	srli	r3,r5,3
   8ce20:	8020d0fa 	srli	r16,r16,3
   8ce24:	280a977a 	slli	r5,r5,29
   8ce28:	1900022c 	andhi	r4,r3,8
   8ce2c:	2c20b03a 	or	r16,r5,r16
   8ce30:	20000826 	beq	r4,zero,8ce54 <__adddf3+0x728>
   8ce34:	1008d0fa 	srli	r4,r2,3
   8ce38:	2140022c 	andhi	r5,r4,8
   8ce3c:	2800051e 	bne	r5,zero,8ce54 <__adddf3+0x728>
   8ce40:	300cd0fa 	srli	r6,r6,3
   8ce44:	1004977a 	slli	r2,r2,29
   8ce48:	2007883a 	mov	r3,r4
   8ce4c:	3825883a 	mov	r18,r7
   8ce50:	11a0b03a 	or	r16,r2,r6
   8ce54:	800ad77a 	srli	r5,r16,29
   8ce58:	180690fa 	slli	r3,r3,3
   8ce5c:	802090fa 	slli	r16,r16,3
   8ce60:	0441ffc4 	movi	r17,2047
   8ce64:	28cab03a 	or	r5,r5,r3
   8ce68:	003e4f06 	br	8c7a8 <_gp+0xffff23b4>
   8ce6c:	0201ffc4 	movi	r8,2047
   8ce70:	223fc71e 	bne	r4,r8,8cd90 <_gp+0xffff299c>
   8ce74:	100b883a 	mov	r5,r2
   8ce78:	3021883a 	mov	r16,r6
   8ce7c:	2023883a 	mov	r17,r4
   8ce80:	003e4906 	br	8c7a8 <_gp+0xffff23b4>
   8ce84:	18002a26 	beq	r3,zero,8cf30 <__adddf3+0x804>
   8ce88:	1186b03a 	or	r3,r2,r6
   8ce8c:	18000e26 	beq	r3,zero,8cec8 <__adddf3+0x79c>
   8ce90:	2806d0fa 	srli	r3,r5,3
   8ce94:	8020d0fa 	srli	r16,r16,3
   8ce98:	280a977a 	slli	r5,r5,29
   8ce9c:	1900022c 	andhi	r4,r3,8
   8cea0:	2c20b03a 	or	r16,r5,r16
   8cea4:	203feb26 	beq	r4,zero,8ce54 <_gp+0xffff2a60>
   8cea8:	1008d0fa 	srli	r4,r2,3
   8ceac:	2140022c 	andhi	r5,r4,8
   8ceb0:	283fe81e 	bne	r5,zero,8ce54 <_gp+0xffff2a60>
   8ceb4:	300cd0fa 	srli	r6,r6,3
   8ceb8:	1004977a 	slli	r2,r2,29
   8cebc:	2007883a 	mov	r3,r4
   8cec0:	11a0b03a 	or	r16,r2,r6
   8cec4:	003fe306 	br	8ce54 <_gp+0xffff2a60>
   8cec8:	0441ffc4 	movi	r17,2047
   8cecc:	003e3606 	br	8c7a8 <_gp+0xffff23b4>
   8ced0:	0005883a 	mov	r2,zero
   8ced4:	003f8a06 	br	8cd00 <_gp+0xffff290c>
   8ced8:	1a3ff804 	addi	r8,r3,-32
   8cedc:	02400804 	movi	r9,32
   8cee0:	2a10d83a 	srl	r8,r5,r8
   8cee4:	1a402a26 	beq	r3,r9,8cf90 <__adddf3+0x864>
   8cee8:	02401004 	movi	r9,64
   8ceec:	48c7c83a 	sub	r3,r9,r3
   8cef0:	28ca983a 	sll	r5,r5,r3
   8cef4:	2c20b03a 	or	r16,r5,r16
   8cef8:	8020c03a 	cmpne	r16,r16,zero
   8cefc:	8220b03a 	or	r16,r16,r8
   8cf00:	000b883a 	mov	r5,zero
   8cf04:	003f2b06 	br	8cbb4 <_gp+0xffff27c0>
   8cf08:	0007883a 	mov	r3,zero
   8cf0c:	01402034 	movhi	r5,128
   8cf10:	297fffc4 	addi	r5,r5,-1
   8cf14:	043ffe04 	movi	r16,-8
   8cf18:	0441ffc4 	movi	r17,2047
   8cf1c:	003e8106 	br	8c924 <_gp+0xffff2530>
   8cf20:	2c20b03a 	or	r16,r5,r16
   8cf24:	8020c03a 	cmpne	r16,r16,zero
   8cf28:	000b883a 	mov	r5,zero
   8cf2c:	003fa506 	br	8cdc4 <_gp+0xffff29d0>
   8cf30:	100b883a 	mov	r5,r2
   8cf34:	3021883a 	mov	r16,r6
   8cf38:	0441ffc4 	movi	r17,2047
   8cf3c:	003e1a06 	br	8c7a8 <_gp+0xffff23b4>
   8cf40:	100b883a 	mov	r5,r2
   8cf44:	3021883a 	mov	r16,r6
   8cf48:	003e1706 	br	8c7a8 <_gp+0xffff23b4>
   8cf4c:	20c4b03a 	or	r2,r4,r3
   8cf50:	103f6026 	beq	r2,zero,8ccd4 <_gp+0xffff28e0>
   8cf54:	200b883a 	mov	r5,r4
   8cf58:	1821883a 	mov	r16,r3
   8cf5c:	003e1206 	br	8c7a8 <_gp+0xffff23b4>
   8cf60:	3a3ff804 	addi	r8,r7,-32
   8cf64:	02400804 	movi	r9,32
   8cf68:	2a10d83a 	srl	r8,r5,r8
   8cf6c:	3a400c26 	beq	r7,r9,8cfa0 <__adddf3+0x874>
   8cf70:	02401004 	movi	r9,64
   8cf74:	49cfc83a 	sub	r7,r9,r7
   8cf78:	29ca983a 	sll	r5,r5,r7
   8cf7c:	2c20b03a 	or	r16,r5,r16
   8cf80:	8020c03a 	cmpne	r16,r16,zero
   8cf84:	8220b03a 	or	r16,r16,r8
   8cf88:	000b883a 	mov	r5,zero
   8cf8c:	003f8d06 	br	8cdc4 <_gp+0xffff29d0>
   8cf90:	000b883a 	mov	r5,zero
   8cf94:	003fd706 	br	8cef4 <_gp+0xffff2b00>
   8cf98:	3021883a 	mov	r16,r6
   8cf9c:	003e0206 	br	8c7a8 <_gp+0xffff23b4>
   8cfa0:	000b883a 	mov	r5,zero
   8cfa4:	003ff506 	br	8cf7c <_gp+0xffff2b88>

0008cfa8 <__eqdf2>:
   8cfa8:	2806d53a 	srli	r3,r5,20
   8cfac:	3810d53a 	srli	r8,r7,20
   8cfb0:	00800434 	movhi	r2,16
   8cfb4:	10bfffc4 	addi	r2,r2,-1
   8cfb8:	18c1ffcc 	andi	r3,r3,2047
   8cfbc:	0241ffc4 	movi	r9,2047
   8cfc0:	2894703a 	and	r10,r5,r2
   8cfc4:	4201ffcc 	andi	r8,r8,2047
   8cfc8:	3884703a 	and	r2,r7,r2
   8cfcc:	280ad7fa 	srli	r5,r5,31
   8cfd0:	380ed7fa 	srli	r7,r7,31
   8cfd4:	1a400f26 	beq	r3,r9,8d014 <__eqdf2+0x6c>
   8cfd8:	0241ffc4 	movi	r9,2047
   8cfdc:	42400326 	beq	r8,r9,8cfec <__eqdf2+0x44>
   8cfe0:	1a000526 	beq	r3,r8,8cff8 <__eqdf2+0x50>
   8cfe4:	00800044 	movi	r2,1
   8cfe8:	f800283a 	ret
   8cfec:	1192b03a 	or	r9,r2,r6
   8cff0:	483ffc1e 	bne	r9,zero,8cfe4 <_gp+0xffff2bf0>
   8cff4:	1a3ffb1e 	bne	r3,r8,8cfe4 <_gp+0xffff2bf0>
   8cff8:	50bffa1e 	bne	r10,r2,8cfe4 <_gp+0xffff2bf0>
   8cffc:	21bff91e 	bne	r4,r6,8cfe4 <_gp+0xffff2bf0>
   8d000:	29c00826 	beq	r5,r7,8d024 <__eqdf2+0x7c>
   8d004:	183ff71e 	bne	r3,zero,8cfe4 <_gp+0xffff2bf0>
   8d008:	5104b03a 	or	r2,r10,r4
   8d00c:	1004c03a 	cmpne	r2,r2,zero
   8d010:	f800283a 	ret
   8d014:	5112b03a 	or	r9,r10,r4
   8d018:	483fef26 	beq	r9,zero,8cfd8 <_gp+0xffff2be4>
   8d01c:	00800044 	movi	r2,1
   8d020:	f800283a 	ret
   8d024:	0005883a 	mov	r2,zero
   8d028:	f800283a 	ret

0008d02c <__gedf2>:
   8d02c:	2804d53a 	srli	r2,r5,20
   8d030:	3810d53a 	srli	r8,r7,20
   8d034:	00c00434 	movhi	r3,16
   8d038:	18ffffc4 	addi	r3,r3,-1
   8d03c:	1081ffcc 	andi	r2,r2,2047
   8d040:	0241ffc4 	movi	r9,2047
   8d044:	28d4703a 	and	r10,r5,r3
   8d048:	4201ffcc 	andi	r8,r8,2047
   8d04c:	38c6703a 	and	r3,r7,r3
   8d050:	280ad7fa 	srli	r5,r5,31
   8d054:	380ed7fa 	srli	r7,r7,31
   8d058:	12401b26 	beq	r2,r9,8d0c8 <__gedf2+0x9c>
   8d05c:	0241ffc4 	movi	r9,2047
   8d060:	42400926 	beq	r8,r9,8d088 <__gedf2+0x5c>
   8d064:	10000c1e 	bne	r2,zero,8d098 <__gedf2+0x6c>
   8d068:	5112b03a 	or	r9,r10,r4
   8d06c:	4813003a 	cmpeq	r9,r9,zero
   8d070:	4817883a 	mov	r11,r9
   8d074:	40000a26 	beq	r8,zero,8d0a0 <__gedf2+0x74>
   8d078:	48001626 	beq	r9,zero,8d0d4 <__gedf2+0xa8>
   8d07c:	38000d1e 	bne	r7,zero,8d0b4 <__gedf2+0x88>
   8d080:	00bfffc4 	movi	r2,-1
   8d084:	f800283a 	ret
   8d088:	1992b03a 	or	r9,r3,r6
   8d08c:	483ff526 	beq	r9,zero,8d064 <_gp+0xffff2c70>
   8d090:	00bfff84 	movi	r2,-2
   8d094:	f800283a 	ret
   8d098:	40000e1e 	bne	r8,zero,8d0d4 <__gedf2+0xa8>
   8d09c:	0017883a 	mov	r11,zero
   8d0a0:	1992b03a 	or	r9,r3,r6
   8d0a4:	4813003a 	cmpeq	r9,r9,zero
   8d0a8:	5800041e 	bne	r11,zero,8d0bc <__gedf2+0x90>
   8d0ac:	48000926 	beq	r9,zero,8d0d4 <__gedf2+0xa8>
   8d0b0:	283ff31e 	bne	r5,zero,8d080 <_gp+0xffff2c8c>
   8d0b4:	00800044 	movi	r2,1
   8d0b8:	f800283a 	ret
   8d0bc:	483fef26 	beq	r9,zero,8d07c <_gp+0xffff2c88>
   8d0c0:	0005883a 	mov	r2,zero
   8d0c4:	f800283a 	ret
   8d0c8:	5112b03a 	or	r9,r10,r4
   8d0cc:	483fe326 	beq	r9,zero,8d05c <_gp+0xffff2c68>
   8d0d0:	003fef06 	br	8d090 <_gp+0xffff2c9c>
   8d0d4:	29fff61e 	bne	r5,r7,8d0b0 <_gp+0xffff2cbc>
   8d0d8:	40bff516 	blt	r8,r2,8d0b0 <_gp+0xffff2cbc>
   8d0dc:	12000316 	blt	r2,r8,8d0ec <__gedf2+0xc0>
   8d0e0:	1abff336 	bltu	r3,r10,8d0b0 <_gp+0xffff2cbc>
   8d0e4:	50c00326 	beq	r10,r3,8d0f4 <__gedf2+0xc8>
   8d0e8:	50fff52e 	bgeu	r10,r3,8d0c0 <_gp+0xffff2ccc>
   8d0ec:	283fe426 	beq	r5,zero,8d080 <_gp+0xffff2c8c>
   8d0f0:	003ff006 	br	8d0b4 <_gp+0xffff2cc0>
   8d0f4:	313fee36 	bltu	r6,r4,8d0b0 <_gp+0xffff2cbc>
   8d0f8:	21bff12e 	bgeu	r4,r6,8d0c0 <_gp+0xffff2ccc>
   8d0fc:	283fe026 	beq	r5,zero,8d080 <_gp+0xffff2c8c>
   8d100:	003fec06 	br	8d0b4 <_gp+0xffff2cc0>

0008d104 <__ledf2>:
   8d104:	2806d53a 	srli	r3,r5,20
   8d108:	3810d53a 	srli	r8,r7,20
   8d10c:	00800434 	movhi	r2,16
   8d110:	10bfffc4 	addi	r2,r2,-1
   8d114:	18c1ffcc 	andi	r3,r3,2047
   8d118:	0241ffc4 	movi	r9,2047
   8d11c:	2894703a 	and	r10,r5,r2
   8d120:	4201ffcc 	andi	r8,r8,2047
   8d124:	3884703a 	and	r2,r7,r2
   8d128:	280ad7fa 	srli	r5,r5,31
   8d12c:	380ed7fa 	srli	r7,r7,31
   8d130:	1a402026 	beq	r3,r9,8d1b4 <__ledf2+0xb0>
   8d134:	0241ffc4 	movi	r9,2047
   8d138:	42401726 	beq	r8,r9,8d198 <__ledf2+0x94>
   8d13c:	18000b26 	beq	r3,zero,8d16c <__ledf2+0x68>
   8d140:	29403fcc 	andi	r5,r5,255
   8d144:	39c03fcc 	andi	r7,r7,255
   8d148:	40000f1e 	bne	r8,zero,8d188 <__ledf2+0x84>
   8d14c:	0017883a 	mov	r11,zero
   8d150:	1192b03a 	or	r9,r2,r6
   8d154:	4813003a 	cmpeq	r9,r9,zero
   8d158:	58001326 	beq	r11,zero,8d1a8 <__ledf2+0xa4>
   8d15c:	48001e1e 	bne	r9,zero,8d1d8 <__ledf2+0xd4>
   8d160:	38000b1e 	bne	r7,zero,8d190 <__ledf2+0x8c>
   8d164:	00bfffc4 	movi	r2,-1
   8d168:	f800283a 	ret
   8d16c:	5112b03a 	or	r9,r10,r4
   8d170:	4813003a 	cmpeq	r9,r9,zero
   8d174:	4817883a 	mov	r11,r9
   8d178:	29403fcc 	andi	r5,r5,255
   8d17c:	39c03fcc 	andi	r7,r7,255
   8d180:	403ff326 	beq	r8,zero,8d150 <_gp+0xffff2d5c>
   8d184:	483ff61e 	bne	r9,zero,8d160 <_gp+0xffff2d6c>
   8d188:	29c00e26 	beq	r5,r7,8d1c4 <__ledf2+0xc0>
   8d18c:	283ff51e 	bne	r5,zero,8d164 <_gp+0xffff2d70>
   8d190:	00800044 	movi	r2,1
   8d194:	f800283a 	ret
   8d198:	1192b03a 	or	r9,r2,r6
   8d19c:	483fe726 	beq	r9,zero,8d13c <_gp+0xffff2d48>
   8d1a0:	00800084 	movi	r2,2
   8d1a4:	f800283a 	ret
   8d1a8:	483ff726 	beq	r9,zero,8d188 <_gp+0xffff2d94>
   8d1ac:	283ff826 	beq	r5,zero,8d190 <_gp+0xffff2d9c>
   8d1b0:	003fec06 	br	8d164 <_gp+0xffff2d70>
   8d1b4:	5112b03a 	or	r9,r10,r4
   8d1b8:	483fde26 	beq	r9,zero,8d134 <_gp+0xffff2d40>
   8d1bc:	00800084 	movi	r2,2
   8d1c0:	f800283a 	ret
   8d1c4:	40fff116 	blt	r8,r3,8d18c <_gp+0xffff2d98>
   8d1c8:	1a000716 	blt	r3,r8,8d1e8 <__ledf2+0xe4>
   8d1cc:	12bfef36 	bltu	r2,r10,8d18c <_gp+0xffff2d98>
   8d1d0:	50800326 	beq	r10,r2,8d1e0 <__ledf2+0xdc>
   8d1d4:	50800436 	bltu	r10,r2,8d1e8 <__ledf2+0xe4>
   8d1d8:	0005883a 	mov	r2,zero
   8d1dc:	f800283a 	ret
   8d1e0:	313fea36 	bltu	r6,r4,8d18c <_gp+0xffff2d98>
   8d1e4:	21bffc2e 	bgeu	r4,r6,8d1d8 <_gp+0xffff2de4>
   8d1e8:	283fde26 	beq	r5,zero,8d164 <_gp+0xffff2d70>
   8d1ec:	003fe806 	br	8d190 <_gp+0xffff2d9c>

0008d1f0 <__muldf3>:
   8d1f0:	deffee04 	addi	sp,sp,-72
   8d1f4:	dc400915 	stw	r17,36(sp)
   8d1f8:	2822d53a 	srli	r17,r5,20
   8d1fc:	dc000815 	stw	r16,32(sp)
   8d200:	2820d7fa 	srli	r16,r5,31
   8d204:	df001015 	stw	fp,64(sp)
   8d208:	dd000c15 	stw	r20,48(sp)
   8d20c:	dcc00b15 	stw	r19,44(sp)
   8d210:	dfc01115 	stw	ra,68(sp)
   8d214:	04c00434 	movhi	r19,16
   8d218:	9cffffc4 	addi	r19,r19,-1
   8d21c:	ddc00f15 	stw	r23,60(sp)
   8d220:	dd800e15 	stw	r22,56(sp)
   8d224:	dd400d15 	stw	r21,52(sp)
   8d228:	dc800a15 	stw	r18,40(sp)
   8d22c:	8c41ffcc 	andi	r17,r17,2047
   8d230:	2029883a 	mov	r20,r4
   8d234:	2ce6703a 	and	r19,r5,r19
   8d238:	8039883a 	mov	fp,r16
   8d23c:	82003fcc 	andi	r8,r16,255
   8d240:	88005d26 	beq	r17,zero,8d3b8 <__muldf3+0x1c8>
   8d244:	0081ffc4 	movi	r2,2047
   8d248:	202f883a 	mov	r23,r4
   8d24c:	88803326 	beq	r17,r2,8d31c <__muldf3+0x12c>
   8d250:	98800434 	orhi	r2,r19,16
   8d254:	100490fa 	slli	r2,r2,3
   8d258:	2026d77a 	srli	r19,r4,29
   8d25c:	202e90fa 	slli	r23,r4,3
   8d260:	8c7f0044 	addi	r17,r17,-1023
   8d264:	14e6b03a 	or	r19,r2,r19
   8d268:	002d883a 	mov	r22,zero
   8d26c:	000b883a 	mov	r5,zero
   8d270:	3804d53a 	srli	r2,r7,20
   8d274:	3828d7fa 	srli	r20,r7,31
   8d278:	04800434 	movhi	r18,16
   8d27c:	94bfffc4 	addi	r18,r18,-1
   8d280:	1081ffcc 	andi	r2,r2,2047
   8d284:	302b883a 	mov	r21,r6
   8d288:	3ca4703a 	and	r18,r7,r18
   8d28c:	a2403fcc 	andi	r9,r20,255
   8d290:	10006826 	beq	r2,zero,8d434 <__muldf3+0x244>
   8d294:	00c1ffc4 	movi	r3,2047
   8d298:	10c06026 	beq	r2,r3,8d41c <__muldf3+0x22c>
   8d29c:	90c00434 	orhi	r3,r18,16
   8d2a0:	180690fa 	slli	r3,r3,3
   8d2a4:	3024d77a 	srli	r18,r6,29
   8d2a8:	302a90fa 	slli	r21,r6,3
   8d2ac:	10bf0044 	addi	r2,r2,-1023
   8d2b0:	1ca4b03a 	or	r18,r3,r18
   8d2b4:	0007883a 	mov	r3,zero
   8d2b8:	1d88b03a 	or	r4,r3,r22
   8d2bc:	2109883a 	add	r4,r4,r4
   8d2c0:	2109883a 	add	r4,r4,r4
   8d2c4:	01800274 	movhi	r6,9
   8d2c8:	31b4b704 	addi	r6,r6,-11556
   8d2cc:	2189883a 	add	r4,r4,r6
   8d2d0:	21000017 	ldw	r4,0(r4)
   8d2d4:	852cf03a 	xor	r22,r16,r20
   8d2d8:	2000683a 	jmp	r4
   8d2dc:	0008d524 	muli	zero,zero,9044
   8d2e0:	0008d514 	movui	zero,9044
   8d2e4:	0008d514 	movui	zero,9044
   8d2e8:	0008d500 	call	8d50 <decrypted_A+0x550>
   8d2ec:	0008d33c 	xorhi	zero,zero,9036
   8d2f0:	0008d33c 	xorhi	zero,zero,9036
   8d2f4:	0008d4e8 	cmpgeui	zero,zero,9043
   8d2f8:	0008d500 	call	8d50 <decrypted_A+0x550>
   8d2fc:	0008d33c 	xorhi	zero,zero,9036
   8d300:	0008d4e8 	cmpgeui	zero,zero,9043
   8d304:	0008d33c 	xorhi	zero,zero,9036
   8d308:	0008d500 	call	8d50 <decrypted_A+0x550>
   8d30c:	0008d338 	rdprs	zero,zero,9036
   8d310:	0008d338 	rdprs	zero,zero,9036
   8d314:	0008d338 	rdprs	zero,zero,9036
   8d318:	0008d83c 	xorhi	zero,zero,9056
   8d31c:	9904b03a 	or	r2,r19,r4
   8d320:	10006e1e 	bne	r2,zero,8d4dc <__muldf3+0x2ec>
   8d324:	05800204 	movi	r22,8
   8d328:	0027883a 	mov	r19,zero
   8d32c:	002f883a 	mov	r23,zero
   8d330:	01400084 	movi	r5,2
   8d334:	003fce06 	br	8d270 <_gp+0xffff2e7c>
   8d338:	402d883a 	mov	r22,r8
   8d33c:	00800084 	movi	r2,2
   8d340:	28805626 	beq	r5,r2,8d49c <__muldf3+0x2ac>
   8d344:	008000c4 	movi	r2,3
   8d348:	2881a226 	beq	r5,r2,8d9d4 <__muldf3+0x7e4>
   8d34c:	00800044 	movi	r2,1
   8d350:	28811d1e 	bne	r5,r2,8d7c8 <__muldf3+0x5d8>
   8d354:	b039883a 	mov	fp,r22
   8d358:	0005883a 	mov	r2,zero
   8d35c:	0027883a 	mov	r19,zero
   8d360:	002f883a 	mov	r23,zero
   8d364:	1004953a 	slli	r2,r2,20
   8d368:	e7003fcc 	andi	fp,fp,255
   8d36c:	e03897fa 	slli	fp,fp,31
   8d370:	00c00434 	movhi	r3,16
   8d374:	18ffffc4 	addi	r3,r3,-1
   8d378:	98e6703a 	and	r19,r19,r3
   8d37c:	9886b03a 	or	r3,r19,r2
   8d380:	1f06b03a 	or	r3,r3,fp
   8d384:	b805883a 	mov	r2,r23
   8d388:	dfc01117 	ldw	ra,68(sp)
   8d38c:	df001017 	ldw	fp,64(sp)
   8d390:	ddc00f17 	ldw	r23,60(sp)
   8d394:	dd800e17 	ldw	r22,56(sp)
   8d398:	dd400d17 	ldw	r21,52(sp)
   8d39c:	dd000c17 	ldw	r20,48(sp)
   8d3a0:	dcc00b17 	ldw	r19,44(sp)
   8d3a4:	dc800a17 	ldw	r18,40(sp)
   8d3a8:	dc400917 	ldw	r17,36(sp)
   8d3ac:	dc000817 	ldw	r16,32(sp)
   8d3b0:	dec01204 	addi	sp,sp,72
   8d3b4:	f800283a 	ret
   8d3b8:	9904b03a 	or	r2,r19,r4
   8d3bc:	10004226 	beq	r2,zero,8d4c8 <__muldf3+0x2d8>
   8d3c0:	98013426 	beq	r19,zero,8d894 <__muldf3+0x6a4>
   8d3c4:	9809883a 	mov	r4,r19
   8d3c8:	d9800515 	stw	r6,20(sp)
   8d3cc:	d9c00415 	stw	r7,16(sp)
   8d3d0:	da000615 	stw	r8,24(sp)
   8d3d4:	00823c00 	call	823c0 <__clzsi2>
   8d3d8:	d9800517 	ldw	r6,20(sp)
   8d3dc:	d9c00417 	ldw	r7,16(sp)
   8d3e0:	da000617 	ldw	r8,24(sp)
   8d3e4:	00c009c4 	movi	r3,39
   8d3e8:	18812616 	blt	r3,r2,8d884 <__muldf3+0x694>
   8d3ec:	00c00a04 	movi	r3,40
   8d3f0:	15fffe04 	addi	r23,r2,-8
   8d3f4:	1887c83a 	sub	r3,r3,r2
   8d3f8:	9de6983a 	sll	r19,r19,r23
   8d3fc:	a0c6d83a 	srl	r3,r20,r3
   8d400:	a5ee983a 	sll	r23,r20,r23
   8d404:	1ce6b03a 	or	r19,r3,r19
   8d408:	047f0344 	movi	r17,-1011
   8d40c:	88a3c83a 	sub	r17,r17,r2
   8d410:	002d883a 	mov	r22,zero
   8d414:	000b883a 	mov	r5,zero
   8d418:	003f9506 	br	8d270 <_gp+0xffff2e7c>
   8d41c:	9186b03a 	or	r3,r18,r6
   8d420:	1800271e 	bne	r3,zero,8d4c0 <__muldf3+0x2d0>
   8d424:	0025883a 	mov	r18,zero
   8d428:	002b883a 	mov	r21,zero
   8d42c:	00c00084 	movi	r3,2
   8d430:	003fa106 	br	8d2b8 <_gp+0xffff2ec4>
   8d434:	9186b03a 	or	r3,r18,r6
   8d438:	18001d26 	beq	r3,zero,8d4b0 <__muldf3+0x2c0>
   8d43c:	90012226 	beq	r18,zero,8d8c8 <__muldf3+0x6d8>
   8d440:	9009883a 	mov	r4,r18
   8d444:	d9400415 	stw	r5,16(sp)
   8d448:	d9800515 	stw	r6,20(sp)
   8d44c:	da000615 	stw	r8,24(sp)
   8d450:	da400715 	stw	r9,28(sp)
   8d454:	00823c00 	call	823c0 <__clzsi2>
   8d458:	d9400417 	ldw	r5,16(sp)
   8d45c:	d9800517 	ldw	r6,20(sp)
   8d460:	da000617 	ldw	r8,24(sp)
   8d464:	da400717 	ldw	r9,28(sp)
   8d468:	00c009c4 	movi	r3,39
   8d46c:	18811216 	blt	r3,r2,8d8b8 <__muldf3+0x6c8>
   8d470:	01c00a04 	movi	r7,40
   8d474:	157ffe04 	addi	r21,r2,-8
   8d478:	388fc83a 	sub	r7,r7,r2
   8d47c:	9564983a 	sll	r18,r18,r21
   8d480:	31ced83a 	srl	r7,r6,r7
   8d484:	356a983a 	sll	r21,r6,r21
   8d488:	3ca4b03a 	or	r18,r7,r18
   8d48c:	00ff0344 	movi	r3,-1011
   8d490:	1885c83a 	sub	r2,r3,r2
   8d494:	0007883a 	mov	r3,zero
   8d498:	003f8706 	br	8d2b8 <_gp+0xffff2ec4>
   8d49c:	b039883a 	mov	fp,r22
   8d4a0:	0081ffc4 	movi	r2,2047
   8d4a4:	0027883a 	mov	r19,zero
   8d4a8:	002f883a 	mov	r23,zero
   8d4ac:	003fad06 	br	8d364 <_gp+0xffff2f70>
   8d4b0:	0025883a 	mov	r18,zero
   8d4b4:	002b883a 	mov	r21,zero
   8d4b8:	00c00044 	movi	r3,1
   8d4bc:	003f7e06 	br	8d2b8 <_gp+0xffff2ec4>
   8d4c0:	00c000c4 	movi	r3,3
   8d4c4:	003f7c06 	br	8d2b8 <_gp+0xffff2ec4>
   8d4c8:	05800104 	movi	r22,4
   8d4cc:	0027883a 	mov	r19,zero
   8d4d0:	002f883a 	mov	r23,zero
   8d4d4:	01400044 	movi	r5,1
   8d4d8:	003f6506 	br	8d270 <_gp+0xffff2e7c>
   8d4dc:	05800304 	movi	r22,12
   8d4e0:	014000c4 	movi	r5,3
   8d4e4:	003f6206 	br	8d270 <_gp+0xffff2e7c>
   8d4e8:	0039883a 	mov	fp,zero
   8d4ec:	04c00434 	movhi	r19,16
   8d4f0:	9cffffc4 	addi	r19,r19,-1
   8d4f4:	05ffffc4 	movi	r23,-1
   8d4f8:	0081ffc4 	movi	r2,2047
   8d4fc:	003f9906 	br	8d364 <_gp+0xffff2f70>
   8d500:	9027883a 	mov	r19,r18
   8d504:	a82f883a 	mov	r23,r21
   8d508:	482d883a 	mov	r22,r9
   8d50c:	180b883a 	mov	r5,r3
   8d510:	003f8a06 	br	8d33c <_gp+0xffff2f48>
   8d514:	9027883a 	mov	r19,r18
   8d518:	a82f883a 	mov	r23,r21
   8d51c:	180b883a 	mov	r5,r3
   8d520:	003f8606 	br	8d33c <_gp+0xffff2f48>
   8d524:	a828d43a 	srli	r20,r21,16
   8d528:	b820d43a 	srli	r16,r23,16
   8d52c:	ad7fffcc 	andi	r21,r21,65535
   8d530:	bdffffcc 	andi	r23,r23,65535
   8d534:	8885883a 	add	r2,r17,r2
   8d538:	a809883a 	mov	r4,r21
   8d53c:	b80b883a 	mov	r5,r23
   8d540:	d8800015 	stw	r2,0(sp)
   8d544:	00825800 	call	82580 <__mulsi3>
   8d548:	a009883a 	mov	r4,r20
   8d54c:	b80b883a 	mov	r5,r23
   8d550:	d8800415 	stw	r2,16(sp)
   8d554:	00825800 	call	82580 <__mulsi3>
   8d558:	a809883a 	mov	r4,r21
   8d55c:	800b883a 	mov	r5,r16
   8d560:	d8800615 	stw	r2,24(sp)
   8d564:	00825800 	call	82580 <__mulsi3>
   8d568:	a009883a 	mov	r4,r20
   8d56c:	800b883a 	mov	r5,r16
   8d570:	1023883a 	mov	r17,r2
   8d574:	00825800 	call	82580 <__mulsi3>
   8d578:	d9c00417 	ldw	r7,16(sp)
   8d57c:	da000617 	ldw	r8,24(sp)
   8d580:	1039883a 	mov	fp,r2
   8d584:	3804d43a 	srli	r2,r7,16
   8d588:	8a07883a 	add	r3,r17,r8
   8d58c:	1887883a 	add	r3,r3,r2
   8d590:	1c40022e 	bgeu	r3,r17,8d59c <__muldf3+0x3ac>
   8d594:	00800074 	movhi	r2,1
   8d598:	e0b9883a 	add	fp,fp,r2
   8d59c:	1804943a 	slli	r2,r3,16
   8d5a0:	1806d43a 	srli	r3,r3,16
   8d5a4:	9022d43a 	srli	r17,r18,16
   8d5a8:	39ffffcc 	andi	r7,r7,65535
   8d5ac:	94bfffcc 	andi	r18,r18,65535
   8d5b0:	11cf883a 	add	r7,r2,r7
   8d5b4:	b80b883a 	mov	r5,r23
   8d5b8:	9009883a 	mov	r4,r18
   8d5bc:	d8c00215 	stw	r3,8(sp)
   8d5c0:	d9c00315 	stw	r7,12(sp)
   8d5c4:	00825800 	call	82580 <__mulsi3>
   8d5c8:	b80b883a 	mov	r5,r23
   8d5cc:	8809883a 	mov	r4,r17
   8d5d0:	d8800415 	stw	r2,16(sp)
   8d5d4:	00825800 	call	82580 <__mulsi3>
   8d5d8:	9009883a 	mov	r4,r18
   8d5dc:	800b883a 	mov	r5,r16
   8d5e0:	d8800715 	stw	r2,28(sp)
   8d5e4:	00825800 	call	82580 <__mulsi3>
   8d5e8:	8809883a 	mov	r4,r17
   8d5ec:	800b883a 	mov	r5,r16
   8d5f0:	102f883a 	mov	r23,r2
   8d5f4:	00825800 	call	82580 <__mulsi3>
   8d5f8:	d9c00417 	ldw	r7,16(sp)
   8d5fc:	da400717 	ldw	r9,28(sp)
   8d600:	1011883a 	mov	r8,r2
   8d604:	3804d43a 	srli	r2,r7,16
   8d608:	ba47883a 	add	r3,r23,r9
   8d60c:	1887883a 	add	r3,r3,r2
   8d610:	1dc0022e 	bgeu	r3,r23,8d61c <__muldf3+0x42c>
   8d614:	00800074 	movhi	r2,1
   8d618:	4091883a 	add	r8,r8,r2
   8d61c:	1804d43a 	srli	r2,r3,16
   8d620:	182e943a 	slli	r23,r3,16
   8d624:	9820d43a 	srli	r16,r19,16
   8d628:	9cffffcc 	andi	r19,r19,65535
   8d62c:	39ffffcc 	andi	r7,r7,65535
   8d630:	4085883a 	add	r2,r8,r2
   8d634:	a809883a 	mov	r4,r21
   8d638:	980b883a 	mov	r5,r19
   8d63c:	b9ef883a 	add	r23,r23,r7
   8d640:	d8800115 	stw	r2,4(sp)
   8d644:	00825800 	call	82580 <__mulsi3>
   8d648:	a009883a 	mov	r4,r20
   8d64c:	980b883a 	mov	r5,r19
   8d650:	d8800415 	stw	r2,16(sp)
   8d654:	00825800 	call	82580 <__mulsi3>
   8d658:	a809883a 	mov	r4,r21
   8d65c:	800b883a 	mov	r5,r16
   8d660:	d8800715 	stw	r2,28(sp)
   8d664:	00825800 	call	82580 <__mulsi3>
   8d668:	a009883a 	mov	r4,r20
   8d66c:	800b883a 	mov	r5,r16
   8d670:	102b883a 	mov	r21,r2
   8d674:	00825800 	call	82580 <__mulsi3>
   8d678:	d9c00417 	ldw	r7,16(sp)
   8d67c:	da400717 	ldw	r9,28(sp)
   8d680:	1011883a 	mov	r8,r2
   8d684:	3804d43a 	srli	r2,r7,16
   8d688:	aa47883a 	add	r3,r21,r9
   8d68c:	1887883a 	add	r3,r3,r2
   8d690:	1d40022e 	bgeu	r3,r21,8d69c <__muldf3+0x4ac>
   8d694:	00800074 	movhi	r2,1
   8d698:	4091883a 	add	r8,r8,r2
   8d69c:	1828d43a 	srli	r20,r3,16
   8d6a0:	1806943a 	slli	r3,r3,16
   8d6a4:	39ffffcc 	andi	r7,r7,65535
   8d6a8:	9009883a 	mov	r4,r18
   8d6ac:	980b883a 	mov	r5,r19
   8d6b0:	19eb883a 	add	r21,r3,r7
   8d6b4:	4529883a 	add	r20,r8,r20
   8d6b8:	00825800 	call	82580 <__mulsi3>
   8d6bc:	980b883a 	mov	r5,r19
   8d6c0:	8809883a 	mov	r4,r17
   8d6c4:	d8800415 	stw	r2,16(sp)
   8d6c8:	00825800 	call	82580 <__mulsi3>
   8d6cc:	9009883a 	mov	r4,r18
   8d6d0:	800b883a 	mov	r5,r16
   8d6d4:	1027883a 	mov	r19,r2
   8d6d8:	00825800 	call	82580 <__mulsi3>
   8d6dc:	8809883a 	mov	r4,r17
   8d6e0:	800b883a 	mov	r5,r16
   8d6e4:	1025883a 	mov	r18,r2
   8d6e8:	00825800 	call	82580 <__mulsi3>
   8d6ec:	d9c00417 	ldw	r7,16(sp)
   8d6f0:	1011883a 	mov	r8,r2
   8d6f4:	94c7883a 	add	r3,r18,r19
   8d6f8:	3804d43a 	srli	r2,r7,16
   8d6fc:	1887883a 	add	r3,r3,r2
   8d700:	1c80022e 	bgeu	r3,r18,8d70c <__muldf3+0x51c>
   8d704:	00800074 	movhi	r2,1
   8d708:	4091883a 	add	r8,r8,r2
   8d70c:	1804943a 	slli	r2,r3,16
   8d710:	d9400217 	ldw	r5,8(sp)
   8d714:	39ffffcc 	andi	r7,r7,65535
   8d718:	11cf883a 	add	r7,r2,r7
   8d71c:	d8800117 	ldw	r2,4(sp)
   8d720:	b949883a 	add	r4,r23,r5
   8d724:	2739883a 	add	fp,r4,fp
   8d728:	e5ef803a 	cmpltu	r23,fp,r23
   8d72c:	388f883a 	add	r7,r7,r2
   8d730:	3dcb883a 	add	r5,r7,r23
   8d734:	a149883a 	add	r4,r20,r5
   8d738:	2def803a 	cmpltu	r23,r5,r23
   8d73c:	d9400117 	ldw	r5,4(sp)
   8d740:	e579883a 	add	fp,fp,r21
   8d744:	e56b803a 	cmpltu	r21,fp,r21
   8d748:	1804d43a 	srli	r2,r3,16
   8d74c:	394f803a 	cmpltu	r7,r7,r5
   8d750:	2547883a 	add	r3,r4,r21
   8d754:	b9e6b03a 	or	r19,r23,r7
   8d758:	1d6b803a 	cmpltu	r21,r3,r21
   8d75c:	2529803a 	cmpltu	r20,r4,r20
   8d760:	98a7883a 	add	r19,r19,r2
   8d764:	ad2ab03a 	or	r21,r21,r20
   8d768:	9d67883a 	add	r19,r19,r21
   8d76c:	e02e927a 	slli	r23,fp,9
   8d770:	9a27883a 	add	r19,r19,r8
   8d774:	d9000317 	ldw	r4,12(sp)
   8d778:	1804d5fa 	srli	r2,r3,23
   8d77c:	9826927a 	slli	r19,r19,9
   8d780:	e038d5fa 	srli	fp,fp,23
   8d784:	b92eb03a 	or	r23,r23,r4
   8d788:	1806927a 	slli	r3,r3,9
   8d78c:	98a6b03a 	or	r19,r19,r2
   8d790:	b82ec03a 	cmpne	r23,r23,zero
   8d794:	bf2eb03a 	or	r23,r23,fp
   8d798:	9880402c 	andhi	r2,r19,256
   8d79c:	b8eeb03a 	or	r23,r23,r3
   8d7a0:	10000926 	beq	r2,zero,8d7c8 <__muldf3+0x5d8>
   8d7a4:	b806d07a 	srli	r3,r23,1
   8d7a8:	bdc0004c 	andi	r23,r23,1
   8d7ac:	980497fa 	slli	r2,r19,31
   8d7b0:	b8eeb03a 	or	r23,r23,r3
   8d7b4:	d8c00017 	ldw	r3,0(sp)
   8d7b8:	9826d07a 	srli	r19,r19,1
   8d7bc:	b8aeb03a 	or	r23,r23,r2
   8d7c0:	18c00044 	addi	r3,r3,1
   8d7c4:	d8c00015 	stw	r3,0(sp)
   8d7c8:	d8c00017 	ldw	r3,0(sp)
   8d7cc:	1880ffc4 	addi	r2,r3,1023
   8d7d0:	0080490e 	bge	zero,r2,8d8f8 <__muldf3+0x708>
   8d7d4:	b8c001cc 	andi	r3,r23,7
   8d7d8:	18000726 	beq	r3,zero,8d7f8 <__muldf3+0x608>
   8d7dc:	b90003cc 	andi	r4,r23,15
   8d7e0:	00c00104 	movi	r3,4
   8d7e4:	20c00426 	beq	r4,r3,8d7f8 <__muldf3+0x608>
   8d7e8:	b8c7883a 	add	r3,r23,r3
   8d7ec:	1def803a 	cmpltu	r23,r3,r23
   8d7f0:	9de7883a 	add	r19,r19,r23
   8d7f4:	182f883a 	mov	r23,r3
   8d7f8:	98c0402c 	andhi	r3,r19,256
   8d7fc:	18000526 	beq	r3,zero,8d814 <__muldf3+0x624>
   8d800:	d8c00017 	ldw	r3,0(sp)
   8d804:	00bfc034 	movhi	r2,65280
   8d808:	10bfffc4 	addi	r2,r2,-1
   8d80c:	98a6703a 	and	r19,r19,r2
   8d810:	18810004 	addi	r2,r3,1024
   8d814:	00c1ff84 	movi	r3,2046
   8d818:	18bf2016 	blt	r3,r2,8d49c <_gp+0xffff30a8>
   8d81c:	9806977a 	slli	r3,r19,29
   8d820:	b82ed0fa 	srli	r23,r23,3
   8d824:	9826927a 	slli	r19,r19,9
   8d828:	1081ffcc 	andi	r2,r2,2047
   8d82c:	1deeb03a 	or	r23,r3,r23
   8d830:	9826d33a 	srli	r19,r19,12
   8d834:	b039883a 	mov	fp,r22
   8d838:	003eca06 	br	8d364 <_gp+0xffff2f70>
   8d83c:	9880022c 	andhi	r2,r19,8
   8d840:	10000a26 	beq	r2,zero,8d86c <__muldf3+0x67c>
   8d844:	9080022c 	andhi	r2,r18,8
   8d848:	1000081e 	bne	r2,zero,8d86c <__muldf3+0x67c>
   8d84c:	00800434 	movhi	r2,16
   8d850:	10bfffc4 	addi	r2,r2,-1
   8d854:	94c00234 	orhi	r19,r18,8
   8d858:	98a6703a 	and	r19,r19,r2
   8d85c:	a039883a 	mov	fp,r20
   8d860:	a82f883a 	mov	r23,r21
   8d864:	0081ffc4 	movi	r2,2047
   8d868:	003ebe06 	br	8d364 <_gp+0xffff2f70>
   8d86c:	00800434 	movhi	r2,16
   8d870:	10bfffc4 	addi	r2,r2,-1
   8d874:	9cc00234 	orhi	r19,r19,8
   8d878:	98a6703a 	and	r19,r19,r2
   8d87c:	0081ffc4 	movi	r2,2047
   8d880:	003eb806 	br	8d364 <_gp+0xffff2f70>
   8d884:	14fff604 	addi	r19,r2,-40
   8d888:	a4e6983a 	sll	r19,r20,r19
   8d88c:	002f883a 	mov	r23,zero
   8d890:	003edd06 	br	8d408 <_gp+0xffff3014>
   8d894:	d9800515 	stw	r6,20(sp)
   8d898:	d9c00415 	stw	r7,16(sp)
   8d89c:	da000615 	stw	r8,24(sp)
   8d8a0:	00823c00 	call	823c0 <__clzsi2>
   8d8a4:	10800804 	addi	r2,r2,32
   8d8a8:	da000617 	ldw	r8,24(sp)
   8d8ac:	d9c00417 	ldw	r7,16(sp)
   8d8b0:	d9800517 	ldw	r6,20(sp)
   8d8b4:	003ecb06 	br	8d3e4 <_gp+0xffff2ff0>
   8d8b8:	14bff604 	addi	r18,r2,-40
   8d8bc:	34a4983a 	sll	r18,r6,r18
   8d8c0:	002b883a 	mov	r21,zero
   8d8c4:	003ef106 	br	8d48c <_gp+0xffff3098>
   8d8c8:	3009883a 	mov	r4,r6
   8d8cc:	d9400415 	stw	r5,16(sp)
   8d8d0:	d9800515 	stw	r6,20(sp)
   8d8d4:	da000615 	stw	r8,24(sp)
   8d8d8:	da400715 	stw	r9,28(sp)
   8d8dc:	00823c00 	call	823c0 <__clzsi2>
   8d8e0:	10800804 	addi	r2,r2,32
   8d8e4:	da400717 	ldw	r9,28(sp)
   8d8e8:	da000617 	ldw	r8,24(sp)
   8d8ec:	d9800517 	ldw	r6,20(sp)
   8d8f0:	d9400417 	ldw	r5,16(sp)
   8d8f4:	003edc06 	br	8d468 <_gp+0xffff3074>
   8d8f8:	d8c00017 	ldw	r3,0(sp)
   8d8fc:	00bf0084 	movi	r2,-1022
   8d900:	10c5c83a 	sub	r2,r2,r3
   8d904:	00c00e04 	movi	r3,56
   8d908:	18be9216 	blt	r3,r2,8d354 <_gp+0xffff2f60>
   8d90c:	00c007c4 	movi	r3,31
   8d910:	18801916 	blt	r3,r2,8d978 <__muldf3+0x788>
   8d914:	d9000017 	ldw	r4,0(sp)
   8d918:	b88ad83a 	srl	r5,r23,r2
   8d91c:	9884d83a 	srl	r2,r19,r2
   8d920:	20c10784 	addi	r3,r4,1054
   8d924:	98c8983a 	sll	r4,r19,r3
   8d928:	b8c6983a 	sll	r3,r23,r3
   8d92c:	2908b03a 	or	r4,r5,r4
   8d930:	1806c03a 	cmpne	r3,r3,zero
   8d934:	20c6b03a 	or	r3,r4,r3
   8d938:	190001cc 	andi	r4,r3,7
   8d93c:	20000726 	beq	r4,zero,8d95c <__muldf3+0x76c>
   8d940:	194003cc 	andi	r5,r3,15
   8d944:	01000104 	movi	r4,4
   8d948:	29000426 	beq	r5,r4,8d95c <__muldf3+0x76c>
   8d94c:	1909883a 	add	r4,r3,r4
   8d950:	20c7803a 	cmpltu	r3,r4,r3
   8d954:	10c5883a 	add	r2,r2,r3
   8d958:	2007883a 	mov	r3,r4
   8d95c:	1100202c 	andhi	r4,r2,128
   8d960:	20001226 	beq	r4,zero,8d9ac <__muldf3+0x7bc>
   8d964:	b039883a 	mov	fp,r22
   8d968:	00800044 	movi	r2,1
   8d96c:	0027883a 	mov	r19,zero
   8d970:	002f883a 	mov	r23,zero
   8d974:	003e7b06 	br	8d364 <_gp+0xffff2f70>
   8d978:	d9400017 	ldw	r5,0(sp)
   8d97c:	00fef884 	movi	r3,-1054
   8d980:	01000804 	movi	r4,32
   8d984:	1947c83a 	sub	r3,r3,r5
   8d988:	98c6d83a 	srl	r3,r19,r3
   8d98c:	11000f26 	beq	r2,r4,8d9cc <__muldf3+0x7dc>
   8d990:	28810f84 	addi	r2,r5,1086
   8d994:	9884983a 	sll	r2,r19,r2
   8d998:	15c4b03a 	or	r2,r2,r23
   8d99c:	1004c03a 	cmpne	r2,r2,zero
   8d9a0:	10c6b03a 	or	r3,r2,r3
   8d9a4:	0005883a 	mov	r2,zero
   8d9a8:	003fe306 	br	8d938 <_gp+0xffff3544>
   8d9ac:	102e977a 	slli	r23,r2,29
   8d9b0:	1806d0fa 	srli	r3,r3,3
   8d9b4:	1004927a 	slli	r2,r2,9
   8d9b8:	b039883a 	mov	fp,r22
   8d9bc:	b8eeb03a 	or	r23,r23,r3
   8d9c0:	1026d33a 	srli	r19,r2,12
   8d9c4:	0005883a 	mov	r2,zero
   8d9c8:	003e6606 	br	8d364 <_gp+0xffff2f70>
   8d9cc:	0005883a 	mov	r2,zero
   8d9d0:	003ff106 	br	8d998 <_gp+0xffff35a4>
   8d9d4:	00800434 	movhi	r2,16
   8d9d8:	10bfffc4 	addi	r2,r2,-1
   8d9dc:	9cc00234 	orhi	r19,r19,8
   8d9e0:	98a6703a 	and	r19,r19,r2
   8d9e4:	b039883a 	mov	fp,r22
   8d9e8:	0081ffc4 	movi	r2,2047
   8d9ec:	003e5d06 	br	8d364 <_gp+0xffff2f70>

0008d9f0 <__subdf3>:
   8d9f0:	02000434 	movhi	r8,16
   8d9f4:	423fffc4 	addi	r8,r8,-1
   8d9f8:	defffb04 	addi	sp,sp,-20
   8d9fc:	2a06703a 	and	r3,r5,r8
   8da00:	3a10703a 	and	r8,r7,r8
   8da04:	3804d53a 	srli	r2,r7,20
   8da08:	dc800215 	stw	r18,8(sp)
   8da0c:	dc400115 	stw	r17,4(sp)
   8da10:	2824d7fa 	srli	r18,r5,31
   8da14:	2822d53a 	srli	r17,r5,20
   8da18:	401090fa 	slli	r8,r8,3
   8da1c:	180a90fa 	slli	r5,r3,3
   8da20:	3006d77a 	srli	r3,r6,29
   8da24:	2014d77a 	srli	r10,r4,29
   8da28:	dc000015 	stw	r16,0(sp)
   8da2c:	40d0b03a 	or	r8,r8,r3
   8da30:	dfc00415 	stw	ra,16(sp)
   8da34:	dcc00315 	stw	r19,12(sp)
   8da38:	1081ffcc 	andi	r2,r2,2047
   8da3c:	00c1ffc4 	movi	r3,2047
   8da40:	9013883a 	mov	r9,r18
   8da44:	8c41ffcc 	andi	r17,r17,2047
   8da48:	94803fcc 	andi	r18,r18,255
   8da4c:	2a8ab03a 	or	r5,r5,r10
   8da50:	202090fa 	slli	r16,r4,3
   8da54:	380ed7fa 	srli	r7,r7,31
   8da58:	300c90fa 	slli	r6,r6,3
   8da5c:	10c02e26 	beq	r2,r3,8db18 <__subdf3+0x128>
   8da60:	39c0005c 	xori	r7,r7,1
   8da64:	8887c83a 	sub	r3,r17,r2
   8da68:	91c03026 	beq	r18,r7,8db2c <__subdf3+0x13c>
   8da6c:	00c0a40e 	bge	zero,r3,8dd00 <__subdf3+0x310>
   8da70:	10004c1e 	bne	r2,zero,8dba4 <__subdf3+0x1b4>
   8da74:	4184b03a 	or	r2,r8,r6
   8da78:	10008f1e 	bne	r2,zero,8dcb8 <__subdf3+0x2c8>
   8da7c:	808001cc 	andi	r2,r16,7
   8da80:	10007d26 	beq	r2,zero,8dc78 <__subdf3+0x288>
   8da84:	80c003cc 	andi	r3,r16,15
   8da88:	00800104 	movi	r2,4
   8da8c:	18807a26 	beq	r3,r2,8dc78 <__subdf3+0x288>
   8da90:	80c00104 	addi	r3,r16,4
   8da94:	1c21803a 	cmpltu	r16,r3,r16
   8da98:	2c0b883a 	add	r5,r5,r16
   8da9c:	2880202c 	andhi	r2,r5,128
   8daa0:	9240004c 	andi	r9,r18,1
   8daa4:	1821883a 	mov	r16,r3
   8daa8:	10007626 	beq	r2,zero,8dc84 <__subdf3+0x294>
   8daac:	8c400044 	addi	r17,r17,1
   8dab0:	0081ffc4 	movi	r2,2047
   8dab4:	8880b226 	beq	r17,r2,8dd80 <__subdf3+0x390>
   8dab8:	00bfe034 	movhi	r2,65408
   8dabc:	10bfffc4 	addi	r2,r2,-1
   8dac0:	288a703a 	and	r5,r5,r2
   8dac4:	2804977a 	slli	r2,r5,29
   8dac8:	280a927a 	slli	r5,r5,9
   8dacc:	8020d0fa 	srli	r16,r16,3
   8dad0:	280ad33a 	srli	r5,r5,12
   8dad4:	1404b03a 	or	r2,r2,r16
   8dad8:	8c41ffcc 	andi	r17,r17,2047
   8dadc:	8822953a 	slli	r17,r17,20
   8dae0:	4a403fcc 	andi	r9,r9,255
   8dae4:	481297fa 	slli	r9,r9,31
   8dae8:	00c00434 	movhi	r3,16
   8daec:	18ffffc4 	addi	r3,r3,-1
   8daf0:	28c6703a 	and	r3,r5,r3
   8daf4:	1c46b03a 	or	r3,r3,r17
   8daf8:	1a46b03a 	or	r3,r3,r9
   8dafc:	dfc00417 	ldw	ra,16(sp)
   8db00:	dcc00317 	ldw	r19,12(sp)
   8db04:	dc800217 	ldw	r18,8(sp)
   8db08:	dc400117 	ldw	r17,4(sp)
   8db0c:	dc000017 	ldw	r16,0(sp)
   8db10:	dec00504 	addi	sp,sp,20
   8db14:	f800283a 	ret
   8db18:	4186b03a 	or	r3,r8,r6
   8db1c:	183fd026 	beq	r3,zero,8da60 <_gp+0xffff366c>
   8db20:	39c03fcc 	andi	r7,r7,255
   8db24:	8887c83a 	sub	r3,r17,r2
   8db28:	91ffd01e 	bne	r18,r7,8da6c <_gp+0xffff3678>
   8db2c:	00c09b0e 	bge	zero,r3,8dd9c <__subdf3+0x3ac>
   8db30:	10006926 	beq	r2,zero,8dcd8 <__subdf3+0x2e8>
   8db34:	0081ffc4 	movi	r2,2047
   8db38:	88bfd026 	beq	r17,r2,8da7c <_gp+0xffff3688>
   8db3c:	42002034 	orhi	r8,r8,128
   8db40:	00800e04 	movi	r2,56
   8db44:	10c0e20e 	bge	r2,r3,8ded0 <__subdf3+0x4e0>
   8db48:	418cb03a 	or	r6,r8,r6
   8db4c:	300cc03a 	cmpne	r6,r6,zero
   8db50:	0007883a 	mov	r3,zero
   8db54:	340d883a 	add	r6,r6,r16
   8db58:	3421803a 	cmpltu	r16,r6,r16
   8db5c:	194b883a 	add	r5,r3,r5
   8db60:	2c0b883a 	add	r5,r5,r16
   8db64:	3021883a 	mov	r16,r6
   8db68:	2880202c 	andhi	r2,r5,128
   8db6c:	103fc326 	beq	r2,zero,8da7c <_gp+0xffff3688>
   8db70:	8c400044 	addi	r17,r17,1
   8db74:	0081ffc4 	movi	r2,2047
   8db78:	88811026 	beq	r17,r2,8dfbc <__subdf3+0x5cc>
   8db7c:	00bfe034 	movhi	r2,65408
   8db80:	10bfffc4 	addi	r2,r2,-1
   8db84:	288a703a 	and	r5,r5,r2
   8db88:	8006d07a 	srli	r3,r16,1
   8db8c:	280497fa 	slli	r2,r5,31
   8db90:	8400004c 	andi	r16,r16,1
   8db94:	80e0b03a 	or	r16,r16,r3
   8db98:	80a0b03a 	or	r16,r16,r2
   8db9c:	280ad07a 	srli	r5,r5,1
   8dba0:	003fb606 	br	8da7c <_gp+0xffff3688>
   8dba4:	0081ffc4 	movi	r2,2047
   8dba8:	88bfb426 	beq	r17,r2,8da7c <_gp+0xffff3688>
   8dbac:	42002034 	orhi	r8,r8,128
   8dbb0:	00800e04 	movi	r2,56
   8dbb4:	10c07516 	blt	r2,r3,8dd8c <__subdf3+0x39c>
   8dbb8:	008007c4 	movi	r2,31
   8dbbc:	10c09816 	blt	r2,r3,8de20 <__subdf3+0x430>
   8dbc0:	00800804 	movi	r2,32
   8dbc4:	10c5c83a 	sub	r2,r2,r3
   8dbc8:	30c8d83a 	srl	r4,r6,r3
   8dbcc:	408e983a 	sll	r7,r8,r2
   8dbd0:	3084983a 	sll	r2,r6,r2
   8dbd4:	40c6d83a 	srl	r3,r8,r3
   8dbd8:	3908b03a 	or	r4,r7,r4
   8dbdc:	1004c03a 	cmpne	r2,r2,zero
   8dbe0:	208cb03a 	or	r6,r4,r2
   8dbe4:	818dc83a 	sub	r6,r16,r6
   8dbe8:	81a1803a 	cmpltu	r16,r16,r6
   8dbec:	28cbc83a 	sub	r5,r5,r3
   8dbf0:	2c0bc83a 	sub	r5,r5,r16
   8dbf4:	3021883a 	mov	r16,r6
   8dbf8:	2880202c 	andhi	r2,r5,128
   8dbfc:	103f9f26 	beq	r2,zero,8da7c <_gp+0xffff3688>
   8dc00:	04c02034 	movhi	r19,128
   8dc04:	9cffffc4 	addi	r19,r19,-1
   8dc08:	2ce6703a 	and	r19,r5,r19
   8dc0c:	98004d26 	beq	r19,zero,8dd44 <__subdf3+0x354>
   8dc10:	9809883a 	mov	r4,r19
   8dc14:	00823c00 	call	823c0 <__clzsi2>
   8dc18:	10fffe04 	addi	r3,r2,-8
   8dc1c:	010007c4 	movi	r4,31
   8dc20:	20c04e16 	blt	r4,r3,8dd5c <__subdf3+0x36c>
   8dc24:	01000a04 	movi	r4,40
   8dc28:	2085c83a 	sub	r2,r4,r2
   8dc2c:	8084d83a 	srl	r2,r16,r2
   8dc30:	98e6983a 	sll	r19,r19,r3
   8dc34:	80e0983a 	sll	r16,r16,r3
   8dc38:	14c4b03a 	or	r2,r2,r19
   8dc3c:	1c404b16 	blt	r3,r17,8dd6c <__subdf3+0x37c>
   8dc40:	1c63c83a 	sub	r17,r3,r17
   8dc44:	89400044 	addi	r5,r17,1
   8dc48:	00c007c4 	movi	r3,31
   8dc4c:	19406716 	blt	r3,r5,8ddec <__subdf3+0x3fc>
   8dc50:	1c47c83a 	sub	r3,r3,r17
   8dc54:	8148d83a 	srl	r4,r16,r5
   8dc58:	80e0983a 	sll	r16,r16,r3
   8dc5c:	10c6983a 	sll	r3,r2,r3
   8dc60:	114ad83a 	srl	r5,r2,r5
   8dc64:	8004c03a 	cmpne	r2,r16,zero
   8dc68:	20e0b03a 	or	r16,r4,r3
   8dc6c:	80a0b03a 	or	r16,r16,r2
   8dc70:	0023883a 	mov	r17,zero
   8dc74:	003f8106 	br	8da7c <_gp+0xffff3688>
   8dc78:	2880202c 	andhi	r2,r5,128
   8dc7c:	9240004c 	andi	r9,r18,1
   8dc80:	103f8a1e 	bne	r2,zero,8daac <_gp+0xffff36b8>
   8dc84:	2804977a 	slli	r2,r5,29
   8dc88:	8020d0fa 	srli	r16,r16,3
   8dc8c:	00c1ffc4 	movi	r3,2047
   8dc90:	280ad0fa 	srli	r5,r5,3
   8dc94:	1404b03a 	or	r2,r2,r16
   8dc98:	88c0031e 	bne	r17,r3,8dca8 <__subdf3+0x2b8>
   8dc9c:	1146b03a 	or	r3,r2,r5
   8dca0:	18003726 	beq	r3,zero,8dd80 <__subdf3+0x390>
   8dca4:	29400234 	orhi	r5,r5,8
   8dca8:	00c00434 	movhi	r3,16
   8dcac:	18ffffc4 	addi	r3,r3,-1
   8dcb0:	28ca703a 	and	r5,r5,r3
   8dcb4:	003f8806 	br	8dad8 <_gp+0xffff36e4>
   8dcb8:	18ffffc4 	addi	r3,r3,-1
   8dcbc:	1800481e 	bne	r3,zero,8dde0 <__subdf3+0x3f0>
   8dcc0:	818dc83a 	sub	r6,r16,r6
   8dcc4:	81a1803a 	cmpltu	r16,r16,r6
   8dcc8:	2a0bc83a 	sub	r5,r5,r8
   8dccc:	2c0bc83a 	sub	r5,r5,r16
   8dcd0:	3021883a 	mov	r16,r6
   8dcd4:	003fc806 	br	8dbf8 <_gp+0xffff3804>
   8dcd8:	4184b03a 	or	r2,r8,r6
   8dcdc:	103f6726 	beq	r2,zero,8da7c <_gp+0xffff3688>
   8dce0:	18ffffc4 	addi	r3,r3,-1
   8dce4:	1800931e 	bne	r3,zero,8df34 <__subdf3+0x544>
   8dce8:	340d883a 	add	r6,r6,r16
   8dcec:	3421803a 	cmpltu	r16,r6,r16
   8dcf0:	414b883a 	add	r5,r8,r5
   8dcf4:	2c0b883a 	add	r5,r5,r16
   8dcf8:	3021883a 	mov	r16,r6
   8dcfc:	003f9a06 	br	8db68 <_gp+0xffff3774>
   8dd00:	1800531e 	bne	r3,zero,8de50 <__subdf3+0x460>
   8dd04:	88800044 	addi	r2,r17,1
   8dd08:	1081ffcc 	andi	r2,r2,2047
   8dd0c:	00c00044 	movi	r3,1
   8dd10:	1880a00e 	bge	r3,r2,8df94 <__subdf3+0x5a4>
   8dd14:	8185c83a 	sub	r2,r16,r6
   8dd18:	8087803a 	cmpltu	r3,r16,r2
   8dd1c:	2a27c83a 	sub	r19,r5,r8
   8dd20:	98e7c83a 	sub	r19,r19,r3
   8dd24:	98c0202c 	andhi	r3,r19,128
   8dd28:	18006226 	beq	r3,zero,8deb4 <__subdf3+0x4c4>
   8dd2c:	3421c83a 	sub	r16,r6,r16
   8dd30:	414bc83a 	sub	r5,r8,r5
   8dd34:	340d803a 	cmpltu	r6,r6,r16
   8dd38:	29a7c83a 	sub	r19,r5,r6
   8dd3c:	3825883a 	mov	r18,r7
   8dd40:	983fb31e 	bne	r19,zero,8dc10 <_gp+0xffff381c>
   8dd44:	8009883a 	mov	r4,r16
   8dd48:	00823c00 	call	823c0 <__clzsi2>
   8dd4c:	10800804 	addi	r2,r2,32
   8dd50:	10fffe04 	addi	r3,r2,-8
   8dd54:	010007c4 	movi	r4,31
   8dd58:	20ffb20e 	bge	r4,r3,8dc24 <_gp+0xffff3830>
   8dd5c:	10bff604 	addi	r2,r2,-40
   8dd60:	8084983a 	sll	r2,r16,r2
   8dd64:	0021883a 	mov	r16,zero
   8dd68:	1c7fb50e 	bge	r3,r17,8dc40 <_gp+0xffff384c>
   8dd6c:	017fe034 	movhi	r5,65408
   8dd70:	297fffc4 	addi	r5,r5,-1
   8dd74:	88e3c83a 	sub	r17,r17,r3
   8dd78:	114a703a 	and	r5,r2,r5
   8dd7c:	003f3f06 	br	8da7c <_gp+0xffff3688>
   8dd80:	000b883a 	mov	r5,zero
   8dd84:	0005883a 	mov	r2,zero
   8dd88:	003f5306 	br	8dad8 <_gp+0xffff36e4>
   8dd8c:	418cb03a 	or	r6,r8,r6
   8dd90:	300cc03a 	cmpne	r6,r6,zero
   8dd94:	0007883a 	mov	r3,zero
   8dd98:	003f9206 	br	8dbe4 <_gp+0xffff37f0>
   8dd9c:	1800961e 	bne	r3,zero,8dff8 <__subdf3+0x608>
   8dda0:	88800044 	addi	r2,r17,1
   8dda4:	1101ffcc 	andi	r4,r2,2047
   8dda8:	00c00044 	movi	r3,1
   8ddac:	1900680e 	bge	r3,r4,8df50 <__subdf3+0x560>
   8ddb0:	00c1ffc4 	movi	r3,2047
   8ddb4:	10c0b626 	beq	r2,r3,8e090 <__subdf3+0x6a0>
   8ddb8:	340d883a 	add	r6,r6,r16
   8ddbc:	3421803a 	cmpltu	r16,r6,r16
   8ddc0:	414b883a 	add	r5,r8,r5
   8ddc4:	2c0b883a 	add	r5,r5,r16
   8ddc8:	282097fa 	slli	r16,r5,31
   8ddcc:	300cd07a 	srli	r6,r6,1
   8ddd0:	280ad07a 	srli	r5,r5,1
   8ddd4:	1023883a 	mov	r17,r2
   8ddd8:	81a0b03a 	or	r16,r16,r6
   8dddc:	003f2706 	br	8da7c <_gp+0xffff3688>
   8dde0:	0081ffc4 	movi	r2,2047
   8dde4:	88bf721e 	bne	r17,r2,8dbb0 <_gp+0xffff37bc>
   8dde8:	003f2406 	br	8da7c <_gp+0xffff3688>
   8ddec:	893ff844 	addi	r4,r17,-31
   8ddf0:	00c00804 	movi	r3,32
   8ddf4:	1108d83a 	srl	r4,r2,r4
   8ddf8:	28c05126 	beq	r5,r3,8df40 <__subdf3+0x550>
   8ddfc:	00c00fc4 	movi	r3,63
   8de00:	1c63c83a 	sub	r17,r3,r17
   8de04:	1444983a 	sll	r2,r2,r17
   8de08:	1420b03a 	or	r16,r2,r16
   8de0c:	8020c03a 	cmpne	r16,r16,zero
   8de10:	8120b03a 	or	r16,r16,r4
   8de14:	000b883a 	mov	r5,zero
   8de18:	0023883a 	mov	r17,zero
   8de1c:	003f1706 	br	8da7c <_gp+0xffff3688>
   8de20:	18bff804 	addi	r2,r3,-32
   8de24:	01000804 	movi	r4,32
   8de28:	4084d83a 	srl	r2,r8,r2
   8de2c:	19004626 	beq	r3,r4,8df48 <__subdf3+0x558>
   8de30:	01001004 	movi	r4,64
   8de34:	20c7c83a 	sub	r3,r4,r3
   8de38:	40d0983a 	sll	r8,r8,r3
   8de3c:	418cb03a 	or	r6,r8,r6
   8de40:	300cc03a 	cmpne	r6,r6,zero
   8de44:	308cb03a 	or	r6,r6,r2
   8de48:	0007883a 	mov	r3,zero
   8de4c:	003f6506 	br	8dbe4 <_gp+0xffff37f0>
   8de50:	88002b26 	beq	r17,zero,8df00 <__subdf3+0x510>
   8de54:	0101ffc4 	movi	r4,2047
   8de58:	11002f26 	beq	r2,r4,8df18 <__subdf3+0x528>
   8de5c:	00c7c83a 	sub	r3,zero,r3
   8de60:	29402034 	orhi	r5,r5,128
   8de64:	01000e04 	movi	r4,56
   8de68:	20c08516 	blt	r4,r3,8e080 <__subdf3+0x690>
   8de6c:	010007c4 	movi	r4,31
   8de70:	20c0cd16 	blt	r4,r3,8e1a8 <__subdf3+0x7b8>
   8de74:	01000804 	movi	r4,32
   8de78:	20c9c83a 	sub	r4,r4,r3
   8de7c:	2914983a 	sll	r10,r5,r4
   8de80:	80d2d83a 	srl	r9,r16,r3
   8de84:	8108983a 	sll	r4,r16,r4
   8de88:	28cad83a 	srl	r5,r5,r3
   8de8c:	5252b03a 	or	r9,r10,r9
   8de90:	2006c03a 	cmpne	r3,r4,zero
   8de94:	48e0b03a 	or	r16,r9,r3
   8de98:	3421c83a 	sub	r16,r6,r16
   8de9c:	414bc83a 	sub	r5,r8,r5
   8dea0:	340d803a 	cmpltu	r6,r6,r16
   8dea4:	298bc83a 	sub	r5,r5,r6
   8dea8:	1023883a 	mov	r17,r2
   8deac:	3825883a 	mov	r18,r7
   8deb0:	003f5106 	br	8dbf8 <_gp+0xffff3804>
   8deb4:	9886b03a 	or	r3,r19,r2
   8deb8:	18001c1e 	bne	r3,zero,8df2c <__subdf3+0x53c>
   8debc:	0013883a 	mov	r9,zero
   8dec0:	000b883a 	mov	r5,zero
   8dec4:	0021883a 	mov	r16,zero
   8dec8:	0023883a 	mov	r17,zero
   8decc:	003f6d06 	br	8dc84 <_gp+0xffff3890>
   8ded0:	008007c4 	movi	r2,31
   8ded4:	10c03c16 	blt	r2,r3,8dfc8 <__subdf3+0x5d8>
   8ded8:	00800804 	movi	r2,32
   8dedc:	10c5c83a 	sub	r2,r2,r3
   8dee0:	30c8d83a 	srl	r4,r6,r3
   8dee4:	408e983a 	sll	r7,r8,r2
   8dee8:	3084983a 	sll	r2,r6,r2
   8deec:	40c6d83a 	srl	r3,r8,r3
   8def0:	3908b03a 	or	r4,r7,r4
   8def4:	1004c03a 	cmpne	r2,r2,zero
   8def8:	208cb03a 	or	r6,r4,r2
   8defc:	003f1506 	br	8db54 <_gp+0xffff3760>
   8df00:	2c08b03a 	or	r4,r5,r16
   8df04:	20000426 	beq	r4,zero,8df18 <__subdf3+0x528>
   8df08:	00c6303a 	nor	r3,zero,r3
   8df0c:	183fe226 	beq	r3,zero,8de98 <_gp+0xffff3aa4>
   8df10:	0101ffc4 	movi	r4,2047
   8df14:	113fd31e 	bne	r2,r4,8de64 <_gp+0xffff3a70>
   8df18:	400b883a 	mov	r5,r8
   8df1c:	3021883a 	mov	r16,r6
   8df20:	1023883a 	mov	r17,r2
   8df24:	3825883a 	mov	r18,r7
   8df28:	003ed406 	br	8da7c <_gp+0xffff3688>
   8df2c:	1021883a 	mov	r16,r2
   8df30:	003f3606 	br	8dc0c <_gp+0xffff3818>
   8df34:	0081ffc4 	movi	r2,2047
   8df38:	88bf011e 	bne	r17,r2,8db40 <_gp+0xffff374c>
   8df3c:	003ecf06 	br	8da7c <_gp+0xffff3688>
   8df40:	0005883a 	mov	r2,zero
   8df44:	003fb006 	br	8de08 <_gp+0xffff3a14>
   8df48:	0011883a 	mov	r8,zero
   8df4c:	003fbb06 	br	8de3c <_gp+0xffff3a48>
   8df50:	2c04b03a 	or	r2,r5,r16
   8df54:	88007f1e 	bne	r17,zero,8e154 <__subdf3+0x764>
   8df58:	1000a926 	beq	r2,zero,8e200 <__subdf3+0x810>
   8df5c:	4184b03a 	or	r2,r8,r6
   8df60:	103ec626 	beq	r2,zero,8da7c <_gp+0xffff3688>
   8df64:	340d883a 	add	r6,r6,r16
   8df68:	414b883a 	add	r5,r8,r5
   8df6c:	3421803a 	cmpltu	r16,r6,r16
   8df70:	2c0b883a 	add	r5,r5,r16
   8df74:	2880202c 	andhi	r2,r5,128
   8df78:	1000bb26 	beq	r2,zero,8e268 <__subdf3+0x878>
   8df7c:	00bfe034 	movhi	r2,65408
   8df80:	10bfffc4 	addi	r2,r2,-1
   8df84:	288a703a 	and	r5,r5,r2
   8df88:	3021883a 	mov	r16,r6
   8df8c:	1823883a 	mov	r17,r3
   8df90:	003eba06 	br	8da7c <_gp+0xffff3688>
   8df94:	2c04b03a 	or	r2,r5,r16
   8df98:	8800311e 	bne	r17,zero,8e060 <__subdf3+0x670>
   8df9c:	1000451e 	bne	r2,zero,8e0b4 <__subdf3+0x6c4>
   8dfa0:	4184b03a 	or	r2,r8,r6
   8dfa4:	10000426 	beq	r2,zero,8dfb8 <__subdf3+0x5c8>
   8dfa8:	400b883a 	mov	r5,r8
   8dfac:	3021883a 	mov	r16,r6
   8dfb0:	3825883a 	mov	r18,r7
   8dfb4:	003eb106 	br	8da7c <_gp+0xffff3688>
   8dfb8:	0013883a 	mov	r9,zero
   8dfbc:	000b883a 	mov	r5,zero
   8dfc0:	0021883a 	mov	r16,zero
   8dfc4:	003f2f06 	br	8dc84 <_gp+0xffff3890>
   8dfc8:	18bff804 	addi	r2,r3,-32
   8dfcc:	01000804 	movi	r4,32
   8dfd0:	4084d83a 	srl	r2,r8,r2
   8dfd4:	19007226 	beq	r3,r4,8e1a0 <__subdf3+0x7b0>
   8dfd8:	01001004 	movi	r4,64
   8dfdc:	20c7c83a 	sub	r3,r4,r3
   8dfe0:	40d0983a 	sll	r8,r8,r3
   8dfe4:	418cb03a 	or	r6,r8,r6
   8dfe8:	300cc03a 	cmpne	r6,r6,zero
   8dfec:	308cb03a 	or	r6,r6,r2
   8dff0:	0007883a 	mov	r3,zero
   8dff4:	003ed706 	br	8db54 <_gp+0xffff3760>
   8dff8:	8800291e 	bne	r17,zero,8e0a0 <__subdf3+0x6b0>
   8dffc:	2c08b03a 	or	r4,r5,r16
   8e000:	20005026 	beq	r4,zero,8e144 <__subdf3+0x754>
   8e004:	00c6303a 	nor	r3,zero,r3
   8e008:	18000f26 	beq	r3,zero,8e048 <__subdf3+0x658>
   8e00c:	0101ffc4 	movi	r4,2047
   8e010:	11004c26 	beq	r2,r4,8e144 <__subdf3+0x754>
   8e014:	01000e04 	movi	r4,56
   8e018:	20c07516 	blt	r4,r3,8e1f0 <__subdf3+0x800>
   8e01c:	010007c4 	movi	r4,31
   8e020:	20c08316 	blt	r4,r3,8e230 <__subdf3+0x840>
   8e024:	01000804 	movi	r4,32
   8e028:	20c9c83a 	sub	r4,r4,r3
   8e02c:	2914983a 	sll	r10,r5,r4
   8e030:	80ced83a 	srl	r7,r16,r3
   8e034:	8108983a 	sll	r4,r16,r4
   8e038:	28cad83a 	srl	r5,r5,r3
   8e03c:	51ceb03a 	or	r7,r10,r7
   8e040:	2006c03a 	cmpne	r3,r4,zero
   8e044:	38e0b03a 	or	r16,r7,r3
   8e048:	81a1883a 	add	r16,r16,r6
   8e04c:	2a0b883a 	add	r5,r5,r8
   8e050:	818d803a 	cmpltu	r6,r16,r6
   8e054:	298b883a 	add	r5,r5,r6
   8e058:	1023883a 	mov	r17,r2
   8e05c:	003ec206 	br	8db68 <_gp+0xffff3774>
   8e060:	1000221e 	bne	r2,zero,8e0ec <__subdf3+0x6fc>
   8e064:	4184b03a 	or	r2,r8,r6
   8e068:	10005b26 	beq	r2,zero,8e1d8 <__subdf3+0x7e8>
   8e06c:	400b883a 	mov	r5,r8
   8e070:	3021883a 	mov	r16,r6
   8e074:	3825883a 	mov	r18,r7
   8e078:	0441ffc4 	movi	r17,2047
   8e07c:	003e7f06 	br	8da7c <_gp+0xffff3688>
   8e080:	2c20b03a 	or	r16,r5,r16
   8e084:	8020c03a 	cmpne	r16,r16,zero
   8e088:	000b883a 	mov	r5,zero
   8e08c:	003f8206 	br	8de98 <_gp+0xffff3aa4>
   8e090:	1023883a 	mov	r17,r2
   8e094:	000b883a 	mov	r5,zero
   8e098:	0021883a 	mov	r16,zero
   8e09c:	003ef906 	br	8dc84 <_gp+0xffff3890>
   8e0a0:	0101ffc4 	movi	r4,2047
   8e0a4:	11002726 	beq	r2,r4,8e144 <__subdf3+0x754>
   8e0a8:	00c7c83a 	sub	r3,zero,r3
   8e0ac:	29402034 	orhi	r5,r5,128
   8e0b0:	003fd806 	br	8e014 <_gp+0xffff3c20>
   8e0b4:	4184b03a 	or	r2,r8,r6
   8e0b8:	103e7026 	beq	r2,zero,8da7c <_gp+0xffff3688>
   8e0bc:	8185c83a 	sub	r2,r16,r6
   8e0c0:	8089803a 	cmpltu	r4,r16,r2
   8e0c4:	2a07c83a 	sub	r3,r5,r8
   8e0c8:	1907c83a 	sub	r3,r3,r4
   8e0cc:	1900202c 	andhi	r4,r3,128
   8e0d0:	20005226 	beq	r4,zero,8e21c <__subdf3+0x82c>
   8e0d4:	3421c83a 	sub	r16,r6,r16
   8e0d8:	414bc83a 	sub	r5,r8,r5
   8e0dc:	340d803a 	cmpltu	r6,r6,r16
   8e0e0:	298bc83a 	sub	r5,r5,r6
   8e0e4:	3825883a 	mov	r18,r7
   8e0e8:	003e6406 	br	8da7c <_gp+0xffff3688>
   8e0ec:	4184b03a 	or	r2,r8,r6
   8e0f0:	10002926 	beq	r2,zero,8e198 <__subdf3+0x7a8>
   8e0f4:	2804d0fa 	srli	r2,r5,3
   8e0f8:	8020d0fa 	srli	r16,r16,3
   8e0fc:	280a977a 	slli	r5,r5,29
   8e100:	10c0022c 	andhi	r3,r2,8
   8e104:	2c20b03a 	or	r16,r5,r16
   8e108:	18000826 	beq	r3,zero,8e12c <__subdf3+0x73c>
   8e10c:	4006d0fa 	srli	r3,r8,3
   8e110:	1900022c 	andhi	r4,r3,8
   8e114:	2000051e 	bne	r4,zero,8e12c <__subdf3+0x73c>
   8e118:	300cd0fa 	srli	r6,r6,3
   8e11c:	4010977a 	slli	r8,r8,29
   8e120:	1805883a 	mov	r2,r3
   8e124:	3825883a 	mov	r18,r7
   8e128:	41a0b03a 	or	r16,r8,r6
   8e12c:	800ad77a 	srli	r5,r16,29
   8e130:	100490fa 	slli	r2,r2,3
   8e134:	802090fa 	slli	r16,r16,3
   8e138:	0441ffc4 	movi	r17,2047
   8e13c:	288ab03a 	or	r5,r5,r2
   8e140:	003e4e06 	br	8da7c <_gp+0xffff3688>
   8e144:	400b883a 	mov	r5,r8
   8e148:	3021883a 	mov	r16,r6
   8e14c:	1023883a 	mov	r17,r2
   8e150:	003e4a06 	br	8da7c <_gp+0xffff3688>
   8e154:	10002d26 	beq	r2,zero,8e20c <__subdf3+0x81c>
   8e158:	4184b03a 	or	r2,r8,r6
   8e15c:	10000e26 	beq	r2,zero,8e198 <__subdf3+0x7a8>
   8e160:	2804d0fa 	srli	r2,r5,3
   8e164:	8020d0fa 	srli	r16,r16,3
   8e168:	280a977a 	slli	r5,r5,29
   8e16c:	10c0022c 	andhi	r3,r2,8
   8e170:	2c20b03a 	or	r16,r5,r16
   8e174:	183fed26 	beq	r3,zero,8e12c <_gp+0xffff3d38>
   8e178:	4006d0fa 	srli	r3,r8,3
   8e17c:	1900022c 	andhi	r4,r3,8
   8e180:	203fea1e 	bne	r4,zero,8e12c <_gp+0xffff3d38>
   8e184:	300cd0fa 	srli	r6,r6,3
   8e188:	4010977a 	slli	r8,r8,29
   8e18c:	1805883a 	mov	r2,r3
   8e190:	41a0b03a 	or	r16,r8,r6
   8e194:	003fe506 	br	8e12c <_gp+0xffff3d38>
   8e198:	0441ffc4 	movi	r17,2047
   8e19c:	003e3706 	br	8da7c <_gp+0xffff3688>
   8e1a0:	0011883a 	mov	r8,zero
   8e1a4:	003f8f06 	br	8dfe4 <_gp+0xffff3bf0>
   8e1a8:	193ff804 	addi	r4,r3,-32
   8e1ac:	02400804 	movi	r9,32
   8e1b0:	2908d83a 	srl	r4,r5,r4
   8e1b4:	1a402a26 	beq	r3,r9,8e260 <__subdf3+0x870>
   8e1b8:	02401004 	movi	r9,64
   8e1bc:	48c7c83a 	sub	r3,r9,r3
   8e1c0:	28ca983a 	sll	r5,r5,r3
   8e1c4:	2c20b03a 	or	r16,r5,r16
   8e1c8:	8020c03a 	cmpne	r16,r16,zero
   8e1cc:	8120b03a 	or	r16,r16,r4
   8e1d0:	000b883a 	mov	r5,zero
   8e1d4:	003f3006 	br	8de98 <_gp+0xffff3aa4>
   8e1d8:	0013883a 	mov	r9,zero
   8e1dc:	01402034 	movhi	r5,128
   8e1e0:	297fffc4 	addi	r5,r5,-1
   8e1e4:	043ffe04 	movi	r16,-8
   8e1e8:	0441ffc4 	movi	r17,2047
   8e1ec:	003ea506 	br	8dc84 <_gp+0xffff3890>
   8e1f0:	2c20b03a 	or	r16,r5,r16
   8e1f4:	8020c03a 	cmpne	r16,r16,zero
   8e1f8:	000b883a 	mov	r5,zero
   8e1fc:	003f9206 	br	8e048 <_gp+0xffff3c54>
   8e200:	400b883a 	mov	r5,r8
   8e204:	3021883a 	mov	r16,r6
   8e208:	003e1c06 	br	8da7c <_gp+0xffff3688>
   8e20c:	400b883a 	mov	r5,r8
   8e210:	3021883a 	mov	r16,r6
   8e214:	0441ffc4 	movi	r17,2047
   8e218:	003e1806 	br	8da7c <_gp+0xffff3688>
   8e21c:	1888b03a 	or	r4,r3,r2
   8e220:	203f6526 	beq	r4,zero,8dfb8 <_gp+0xffff3bc4>
   8e224:	180b883a 	mov	r5,r3
   8e228:	1021883a 	mov	r16,r2
   8e22c:	003e1306 	br	8da7c <_gp+0xffff3688>
   8e230:	193ff804 	addi	r4,r3,-32
   8e234:	01c00804 	movi	r7,32
   8e238:	2908d83a 	srl	r4,r5,r4
   8e23c:	19c00c26 	beq	r3,r7,8e270 <__subdf3+0x880>
   8e240:	01c01004 	movi	r7,64
   8e244:	38c7c83a 	sub	r3,r7,r3
   8e248:	28ca983a 	sll	r5,r5,r3
   8e24c:	2c20b03a 	or	r16,r5,r16
   8e250:	8020c03a 	cmpne	r16,r16,zero
   8e254:	8120b03a 	or	r16,r16,r4
   8e258:	000b883a 	mov	r5,zero
   8e25c:	003f7a06 	br	8e048 <_gp+0xffff3c54>
   8e260:	000b883a 	mov	r5,zero
   8e264:	003fd706 	br	8e1c4 <_gp+0xffff3dd0>
   8e268:	3021883a 	mov	r16,r6
   8e26c:	003e0306 	br	8da7c <_gp+0xffff3688>
   8e270:	000b883a 	mov	r5,zero
   8e274:	003ff506 	br	8e24c <_gp+0xffff3e58>

0008e278 <__fixdfsi>:
   8e278:	2806d53a 	srli	r3,r5,20
   8e27c:	00800434 	movhi	r2,16
   8e280:	10bfffc4 	addi	r2,r2,-1
   8e284:	0180ff84 	movi	r6,1022
   8e288:	18c1ffcc 	andi	r3,r3,2047
   8e28c:	2884703a 	and	r2,r5,r2
   8e290:	280ad7fa 	srli	r5,r5,31
   8e294:	30c0120e 	bge	r6,r3,8e2e0 <__fixdfsi+0x68>
   8e298:	01810744 	movi	r6,1053
   8e29c:	30c00c16 	blt	r6,r3,8e2d0 <__fixdfsi+0x58>
   8e2a0:	01810cc4 	movi	r6,1075
   8e2a4:	30cdc83a 	sub	r6,r6,r3
   8e2a8:	01c007c4 	movi	r7,31
   8e2ac:	10800434 	orhi	r2,r2,16
   8e2b0:	39800d16 	blt	r7,r6,8e2e8 <__fixdfsi+0x70>
   8e2b4:	18fefb44 	addi	r3,r3,-1043
   8e2b8:	2188d83a 	srl	r4,r4,r6
   8e2bc:	10c4983a 	sll	r2,r2,r3
   8e2c0:	2084b03a 	or	r2,r4,r2
   8e2c4:	28000726 	beq	r5,zero,8e2e4 <__fixdfsi+0x6c>
   8e2c8:	0085c83a 	sub	r2,zero,r2
   8e2cc:	f800283a 	ret
   8e2d0:	00a00034 	movhi	r2,32768
   8e2d4:	10bfffc4 	addi	r2,r2,-1
   8e2d8:	2885883a 	add	r2,r5,r2
   8e2dc:	f800283a 	ret
   8e2e0:	0005883a 	mov	r2,zero
   8e2e4:	f800283a 	ret
   8e2e8:	010104c4 	movi	r4,1043
   8e2ec:	20c7c83a 	sub	r3,r4,r3
   8e2f0:	10c4d83a 	srl	r2,r2,r3
   8e2f4:	003ff306 	br	8e2c4 <_gp+0xffff3ed0>

0008e2f8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   8e2f8:	defffd04 	addi	sp,sp,-12
   8e2fc:	dc000015 	stw	r16,0(sp)
   8e300:	dfc00215 	stw	ra,8(sp)
   8e304:	dc400115 	stw	r17,4(sp)
   8e308:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   8e30c:	20001b16 	blt	r4,zero,8e37c <close+0x84>
   8e310:	01400304 	movi	r5,12
   8e314:	00825800 	call	82580 <__mulsi3>
   8e318:	01000274 	movhi	r4,9
   8e31c:	21047b04 	addi	r4,r4,4588
   8e320:	2089883a 	add	r4,r4,r2
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8e324:	20800017 	ldw	r2,0(r4)
   8e328:	10c00417 	ldw	r3,16(r2)
   8e32c:	18000b26 	beq	r3,zero,8e35c <close+0x64>
   8e330:	183ee83a 	callr	r3

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8e334:	8009883a 	mov	r4,r16
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   8e338:	1023883a 	mov	r17,r2

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8e33c:	008e8300 	call	8e830 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
   8e340:	0005883a 	mov	r2,zero
    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
   8e344:	88001916 	blt	r17,zero,8e3ac <close+0xb4>
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
   8e348:	dfc00217 	ldw	ra,8(sp)
   8e34c:	dc400117 	ldw	r17,4(sp)
   8e350:	dc000017 	ldw	r16,0(sp)
   8e354:	dec00304 	addi	sp,sp,12
   8e358:	f800283a 	ret

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   8e35c:	8009883a 	mov	r4,r16
   8e360:	008e8300 	call	8e830 <alt_release_fd>
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
      return -1;
    }
    return 0;
   8e364:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
   8e368:	dfc00217 	ldw	ra,8(sp)
   8e36c:	dc400117 	ldw	r17,4(sp)
   8e370:	dc000017 	ldw	r16,0(sp)
   8e374:	dec00304 	addi	sp,sp,12
   8e378:	f800283a 	ret

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
   8e37c:	00800274 	movhi	r2,9
   8e380:	10890904 	addi	r2,r2,9252
   8e384:	10800017 	ldw	r2,0(r2)
   8e388:	10000226 	beq	r2,zero,8e394 <close+0x9c>
   8e38c:	103ee83a 	callr	r2
   8e390:	00000206 	br	8e39c <close+0xa4>
   8e394:	00800274 	movhi	r2,9
   8e398:	108fd004 	addi	r2,r2,16192
    }
    return 0;
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8e39c:	00c01444 	movi	r3,81
   8e3a0:	10c00015 	stw	r3,0(r2)
    return -1;
   8e3a4:	00bfffc4 	movi	r2,-1
   8e3a8:	003fe706 	br	8e348 <_gp+0xffff3f54>
   8e3ac:	00800274 	movhi	r2,9
   8e3b0:	10890904 	addi	r2,r2,9252
   8e3b4:	10800017 	ldw	r2,0(r2)
   8e3b8:	10000526 	beq	r2,zero,8e3d0 <close+0xd8>
   8e3bc:	103ee83a 	callr	r2
    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    if (rval < 0)
    {
      ALT_ERRNO = -rval;
   8e3c0:	0463c83a 	sub	r17,zero,r17
   8e3c4:	14400015 	stw	r17,0(r2)
      return -1;
   8e3c8:	00bfffc4 	movi	r2,-1
   8e3cc:	003fde06 	br	8e348 <_gp+0xffff3f54>
   8e3d0:	00800274 	movhi	r2,9
   8e3d4:	108fd004 	addi	r2,r2,16192
   8e3d8:	003ff906 	br	8e3c0 <_gp+0xffff3fcc>

0008e3dc <alt_dev_null_write>:
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  return len;
}
   8e3dc:	3005883a 	mov	r2,r6
   8e3e0:	f800283a 	ret

0008e3e4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   8e3e4:	defffe04 	addi	sp,sp,-8
   8e3e8:	dfc00115 	stw	ra,4(sp)
   8e3ec:	dc000015 	stw	r16,0(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e3f0:	20001516 	blt	r4,zero,8e448 <fstat+0x64>
   8e3f4:	2821883a 	mov	r16,r5
   8e3f8:	01400304 	movi	r5,12
   8e3fc:	00825800 	call	82580 <__mulsi3>
   8e400:	01000274 	movhi	r4,9
   8e404:	21047b04 	addi	r4,r4,4588
   8e408:	2089883a 	add	r4,r4,r2
  
  if (fd)
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   8e40c:	20800017 	ldw	r2,0(r4)
   8e410:	10c00817 	ldw	r3,32(r2)
   8e414:	18000526 	beq	r3,zero,8e42c <fstat+0x48>
    {
      return fd->dev->fstat(fd, st);
   8e418:	800b883a 	mov	r5,r16
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
   8e41c:	dfc00117 	ldw	ra,4(sp)
   8e420:	dc000017 	ldw	r16,0(sp)
   8e424:	dec00204 	addi	sp,sp,8
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    {
      return fd->dev->fstat(fd, st);
   8e428:	1800683a 	jmp	r3
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   8e42c:	00880004 	movi	r2,8192
   8e430:	80800115 	stw	r2,4(r16)
      return 0;
   8e434:	0005883a 	mov	r2,zero
  else
  {
    ALT_ERRNO = EBADFD;
    return -1;
  }
}
   8e438:	dfc00117 	ldw	ra,4(sp)
   8e43c:	dc000017 	ldw	r16,0(sp)
   8e440:	dec00204 	addi	sp,sp,8
   8e444:	f800283a 	ret
   8e448:	00800274 	movhi	r2,9
   8e44c:	10890904 	addi	r2,r2,9252
   8e450:	10800017 	ldw	r2,0(r2)
   8e454:	10000226 	beq	r2,zero,8e460 <fstat+0x7c>
   8e458:	103ee83a 	callr	r2
   8e45c:	00000206 	br	8e468 <fstat+0x84>
   8e460:	00800274 	movhi	r2,9
   8e464:	108fd004 	addi	r2,r2,16192
      return 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8e468:	00c01444 	movi	r3,81
   8e46c:	10c00015 	stw	r3,0(r2)
    return -1;
   8e470:	00bfffc4 	movi	r2,-1
   8e474:	003ff006 	br	8e438 <_gp+0xffff4044>

0008e478 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   8e478:	deffef04 	addi	sp,sp,-68
   8e47c:	dc000f15 	stw	r16,60(sp)
   8e480:	dfc01015 	stw	ra,64(sp)
   8e484:	2021883a 	mov	r16,r4
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e488:	20001116 	blt	r4,zero,8e4d0 <isatty+0x58>
   8e48c:	01400304 	movi	r5,12
   8e490:	00825800 	call	82580 <__mulsi3>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   8e494:	00c00274 	movhi	r3,9
   8e498:	18c47b04 	addi	r3,r3,4588
   8e49c:	1885883a 	add	r2,r3,r2
   8e4a0:	10800017 	ldw	r2,0(r2)
   8e4a4:	10800817 	ldw	r2,32(r2)
   8e4a8:	10001526 	beq	r2,zero,8e500 <isatty+0x88>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   8e4ac:	8009883a 	mov	r4,r16
   8e4b0:	d80b883a 	mov	r5,sp
   8e4b4:	008e3e40 	call	8e3e4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   8e4b8:	d8800117 	ldw	r2,4(sp)
   8e4bc:	10880020 	cmpeqi	r2,r2,8192
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
   8e4c0:	dfc01017 	ldw	ra,64(sp)
   8e4c4:	dc000f17 	ldw	r16,60(sp)
   8e4c8:	dec01104 	addi	sp,sp,68
   8e4cc:	f800283a 	ret
   8e4d0:	00800274 	movhi	r2,9
   8e4d4:	10890904 	addi	r2,r2,9252
   8e4d8:	10800017 	ldw	r2,0(r2)
   8e4dc:	10000d26 	beq	r2,zero,8e514 <isatty+0x9c>
   8e4e0:	103ee83a 	callr	r2
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   8e4e4:	00c01444 	movi	r3,81
   8e4e8:	10c00015 	stw	r3,0(r2)
    return 0;
   8e4ec:	0005883a 	mov	r2,zero
  }
}
   8e4f0:	dfc01017 	ldw	ra,64(sp)
   8e4f4:	dc000f17 	ldw	r16,60(sp)
   8e4f8:	dec01104 	addi	sp,sp,68
   8e4fc:	f800283a 	ret
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    {
      return 1;
   8e500:	00800044 	movi	r2,1
  else
  {
    ALT_ERRNO = EBADFD;
    return 0;
  }
}
   8e504:	dfc01017 	ldw	ra,64(sp)
   8e508:	dc000f17 	ldw	r16,60(sp)
   8e50c:	dec01104 	addi	sp,sp,68
   8e510:	f800283a 	ret
   8e514:	00800274 	movhi	r2,9
   8e518:	108fd004 	addi	r2,r2,16192
   8e51c:	003ff106 	br	8e4e4 <_gp+0xffff40f0>

0008e520 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   8e520:	deffff04 	addi	sp,sp,-4
   8e524:	dfc00015 	stw	ra,0(sp)

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   8e528:	01400274 	movhi	r5,9
   8e52c:	29425204 	addi	r5,r5,2376
   8e530:	01800274 	movhi	r6,9
   8e534:	31890e04 	addi	r6,r6,9272
   8e538:	29801026 	beq	r5,r6,8e57c <alt_load+0x5c>
  {
    while( to != end )
   8e53c:	00800274 	movhi	r2,9
   8e540:	10890e04 	addi	r2,r2,9272
   8e544:	28800d26 	beq	r5,r2,8e57c <alt_load+0x5c>
   8e548:	29c00104 	addi	r7,r5,4
   8e54c:	11cfc83a 	sub	r7,r2,r7
   8e550:	380ed0ba 	srli	r7,r7,2
   8e554:	0005883a 	mov	r2,zero
   8e558:	39c00044 	addi	r7,r7,1
   8e55c:	39cf883a 	add	r7,r7,r7
   8e560:	39cf883a 	add	r7,r7,r7
   8e564:	3087883a 	add	r3,r6,r2
    {
      *to++ = *from++;
   8e568:	19000017 	ldw	r4,0(r3)
   8e56c:	2887883a 	add	r3,r5,r2
   8e570:	10800104 	addi	r2,r2,4
   8e574:	19000015 	stw	r4,0(r3)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8e578:	11fffa1e 	bne	r2,r7,8e564 <_gp+0xffff4170>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   8e57c:	01400234 	movhi	r5,8
   8e580:	29400804 	addi	r5,r5,32
   8e584:	01800234 	movhi	r6,8
   8e588:	31800804 	addi	r6,r6,32
   8e58c:	29801026 	beq	r5,r6,8e5d0 <alt_load+0xb0>
  {
    while( to != end )
   8e590:	00800234 	movhi	r2,8
   8e594:	1080c704 	addi	r2,r2,796
   8e598:	28800d26 	beq	r5,r2,8e5d0 <alt_load+0xb0>
   8e59c:	29c00104 	addi	r7,r5,4
   8e5a0:	11cfc83a 	sub	r7,r2,r7
   8e5a4:	380ed0ba 	srli	r7,r7,2
   8e5a8:	0005883a 	mov	r2,zero
   8e5ac:	39c00044 	addi	r7,r7,1
   8e5b0:	39cf883a 	add	r7,r7,r7
   8e5b4:	39cf883a 	add	r7,r7,r7
   8e5b8:	3087883a 	add	r3,r6,r2
    {
      *to++ = *from++;
   8e5bc:	19000017 	ldw	r4,0(r3)
   8e5c0:	2887883a 	add	r3,r5,r2
   8e5c4:	10800104 	addi	r2,r2,4
   8e5c8:	19000015 	stw	r4,0(r3)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8e5cc:	11fffa1e 	bne	r2,r7,8e5b8 <_gp+0xffff41c4>

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   8e5d0:	01400274 	movhi	r5,9
   8e5d4:	297f5f04 	addi	r5,r5,-644
   8e5d8:	01800274 	movhi	r6,9
   8e5dc:	31bf5f04 	addi	r6,r6,-644
   8e5e0:	29801026 	beq	r5,r6,8e624 <alt_load+0x104>
  {
    while( to != end )
   8e5e4:	00800274 	movhi	r2,9
   8e5e8:	10825204 	addi	r2,r2,2376
   8e5ec:	28800d26 	beq	r5,r2,8e624 <alt_load+0x104>
   8e5f0:	29c00104 	addi	r7,r5,4
   8e5f4:	11cfc83a 	sub	r7,r2,r7
   8e5f8:	380ed0ba 	srli	r7,r7,2
   8e5fc:	0005883a 	mov	r2,zero
   8e600:	39c00044 	addi	r7,r7,1
   8e604:	39cf883a 	add	r7,r7,r7
   8e608:	39cf883a 	add	r7,r7,r7
   8e60c:	3087883a 	add	r3,r6,r2
    {
      *to++ = *from++;
   8e610:	19000017 	ldw	r4,0(r3)
   8e614:	2887883a 	add	r3,r5,r2
   8e618:	10800104 	addi	r2,r2,4
   8e61c:	19000015 	stw	r4,0(r3)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   8e620:	11fffa1e 	bne	r2,r7,8e60c <_gp+0xffff4218>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   8e624:	008f1cc0 	call	8f1cc <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   8e628:	dfc00017 	ldw	ra,0(sp)
   8e62c:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   8e630:	008f3101 	jmpi	8f310 <alt_icache_flush_all>

0008e634 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   8e634:	defffd04 	addi	sp,sp,-12
   8e638:	dfc00215 	stw	ra,8(sp)
   8e63c:	dc000115 	stw	r16,4(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e640:	20001216 	blt	r4,zero,8e68c <lseek+0x58>
   8e644:	2821883a 	mov	r16,r5
   8e648:	01400304 	movi	r5,12
   8e64c:	d9800015 	stw	r6,0(sp)
   8e650:	00825800 	call	82580 <__mulsi3>
   8e654:	01000274 	movhi	r4,9
   8e658:	21047b04 	addi	r4,r4,4588
   8e65c:	2089883a 	add	r4,r4,r2
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   8e660:	20800017 	ldw	r2,0(r4)
   8e664:	d9800017 	ldw	r6,0(sp)
   8e668:	10c00717 	ldw	r3,28(r2)
   8e66c:	18001026 	beq	r3,zero,8e6b0 <lseek+0x7c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   8e670:	800b883a 	mov	r5,r16
   8e674:	183ee83a 	callr	r3
  else  
  {
    rc = -EBADFD;
  }

  if (rc < 0)
   8e678:	10001216 	blt	r2,zero,8e6c4 <lseek+0x90>
    ALT_ERRNO = -rc;
    rc = -1;
  }

  return rc;
}
   8e67c:	dfc00217 	ldw	ra,8(sp)
   8e680:	dc000117 	ldw	r16,4(sp)
   8e684:	dec00304 	addi	sp,sp,12
   8e688:	f800283a 	ret
   8e68c:	04001444 	movi	r16,81
   8e690:	00800274 	movhi	r2,9
   8e694:	10890904 	addi	r2,r2,9252
   8e698:	10800017 	ldw	r2,0(r2)
   8e69c:	10000626 	beq	r2,zero,8e6b8 <lseek+0x84>
   8e6a0:	103ee83a 	callr	r2
    rc = -EBADFD;
  }

  if (rc < 0)
  {
    ALT_ERRNO = -rc;
   8e6a4:	14000015 	stw	r16,0(r2)
    rc = -1;
   8e6a8:	00bfffc4 	movi	r2,-1
   8e6ac:	003ff306 	br	8e67c <_gp+0xffff4288>
   8e6b0:	04002184 	movi	r16,134
   8e6b4:	003ff606 	br	8e690 <_gp+0xffff429c>
   8e6b8:	00800274 	movhi	r2,9
   8e6bc:	108fd004 	addi	r2,r2,16192
   8e6c0:	003ff806 	br	8e6a4 <_gp+0xffff42b0>
   8e6c4:	00a1c83a 	sub	r16,zero,r2
   8e6c8:	003ff106 	br	8e690 <_gp+0xffff429c>

0008e6cc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8e6cc:	defffe04 	addi	sp,sp,-8
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8e6d0:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   8e6d4:	dfc00115 	stw	ra,4(sp)
   8e6d8:	dc000015 	stw	r16,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   8e6dc:	008e9d00 	call	8e9d0 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   8e6e0:	008e9f00 	call	8e9f0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   8e6e4:	01000274 	movhi	r4,9
   8e6e8:	21024d04 	addi	r4,r4,2356
   8e6ec:	200b883a 	mov	r5,r4
   8e6f0:	200d883a 	mov	r6,r4
   8e6f4:	008f4b00 	call	8f4b0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   8e6f8:	008f2480 	call	8f248 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   8e6fc:	01000274 	movhi	r4,9
   8e700:	213cab04 	addi	r4,r4,-3412
   8e704:	008f9e00 	call	8f9e0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8e708:	d126d617 	ldw	r4,-25768(gp)
   8e70c:	d166d517 	ldw	r5,-25772(gp)
   8e710:	d1a6d417 	ldw	r6,-25776(gp)
   8e714:	00803580 	call	80358 <main>
  close(STDOUT_FILENO);
   8e718:	01000044 	movi	r4,1
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   8e71c:	1021883a 	mov	r16,r2
  close(STDOUT_FILENO);
   8e720:	008e2f80 	call	8e2f8 <close>
  exit (result);
   8e724:	8009883a 	mov	r4,r16
   8e728:	008f9f40 	call	8f9f4 <exit>

0008e72c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   8e72c:	f800283a 	ret

0008e730 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   8e730:	f800283a 	ret

0008e734 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   8e734:	defffd04 	addi	sp,sp,-12
   8e738:	dfc00215 	stw	ra,8(sp)
   8e73c:	dc000115 	stw	r16,4(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e740:	20001716 	blt	r4,zero,8e7a0 <read+0x6c>
   8e744:	2821883a 	mov	r16,r5
   8e748:	01400304 	movi	r5,12
   8e74c:	d9800015 	stw	r6,0(sp)
   8e750:	00825800 	call	82580 <__mulsi3>
   8e754:	01000274 	movhi	r4,9
   8e758:	21047b04 	addi	r4,r4,4588
   8e75c:	2089883a 	add	r4,r4,r2
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8e760:	20c00217 	ldw	r3,8(r4)
   8e764:	00800044 	movi	r2,1
   8e768:	d9800017 	ldw	r6,0(sp)
   8e76c:	18c000cc 	andi	r3,r3,3
   8e770:	18801726 	beq	r3,r2,8e7d0 <read+0x9c>
        (fd->dev->read))
   8e774:	20800017 	ldw	r2,0(r4)
   8e778:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   8e77c:	10001426 	beq	r2,zero,8e7d0 <read+0x9c>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   8e780:	800b883a 	mov	r5,r16
   8e784:	103ee83a 	callr	r2
   8e788:	1021883a 	mov	r16,r2
   8e78c:	80001916 	blt	r16,zero,8e7f4 <read+0xc0>
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
   8e790:	dfc00217 	ldw	ra,8(sp)
   8e794:	dc000117 	ldw	r16,4(sp)
   8e798:	dec00304 	addi	sp,sp,12
   8e79c:	f800283a 	ret
   8e7a0:	00800274 	movhi	r2,9
   8e7a4:	10890904 	addi	r2,r2,9252
   8e7a8:	10800017 	ldw	r2,0(r2)
   8e7ac:	10000226 	beq	r2,zero,8e7b8 <read+0x84>
   8e7b0:	103ee83a 	callr	r2
   8e7b4:	00000206 	br	8e7c0 <read+0x8c>
   8e7b8:	00800274 	movhi	r2,9
   8e7bc:	108fd004 	addi	r2,r2,16192
        ALT_ERRNO = EACCES;
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   8e7c0:	00c01444 	movi	r3,81
   8e7c4:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   8e7c8:	00bfffc4 	movi	r2,-1
   8e7cc:	003ff006 	br	8e790 <_gp+0xffff439c>
   8e7d0:	00800274 	movhi	r2,9
   8e7d4:	10890904 	addi	r2,r2,9252
   8e7d8:	10800017 	ldw	r2,0(r2)
   8e7dc:	10000e26 	beq	r2,zero,8e818 <read+0xe4>
   8e7e0:	103ee83a 	callr	r2
        }
        return rval;
      }
      else
      {
        ALT_ERRNO = EACCES;
   8e7e4:	00c00344 	movi	r3,13
   8e7e8:	10c00015 	stw	r3,0(r2)
    }
  else
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
   8e7ec:	00bfffc4 	movi	r2,-1
   8e7f0:	003fe706 	br	8e790 <_gp+0xffff439c>
   8e7f4:	00800274 	movhi	r2,9
   8e7f8:	10890904 	addi	r2,r2,9252
   8e7fc:	10800017 	ldw	r2,0(r2)
   8e800:	10000826 	beq	r2,zero,8e824 <read+0xf0>
   8e804:	103ee83a 	callr	r2
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
        {
          ALT_ERRNO = -rval;
   8e808:	0421c83a 	sub	r16,zero,r16
   8e80c:	14000015 	stw	r16,0(r2)
          return -1;
   8e810:	00bfffc4 	movi	r2,-1
   8e814:	003fde06 	br	8e790 <_gp+0xffff439c>
   8e818:	00800274 	movhi	r2,9
   8e81c:	108fd004 	addi	r2,r2,16192
   8e820:	003ff006 	br	8e7e4 <_gp+0xffff43f0>
   8e824:	00800274 	movhi	r2,9
   8e828:	108fd004 	addi	r2,r2,16192
   8e82c:	003ff606 	br	8e808 <_gp+0xffff4414>

0008e830 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8e830:	defffd04 	addi	sp,sp,-12
   8e834:	dc000015 	stw	r16,0(sp)
   8e838:	dfc00215 	stw	ra,8(sp)
   8e83c:	dc400115 	stw	r17,4(sp)
  if (fd > 2)
   8e840:	00800084 	movi	r2,2
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   8e844:	2021883a 	mov	r16,r4
  if (fd > 2)
   8e848:	11000b0e 	bge	r2,r4,8e878 <alt_release_fd+0x48>
  {
    alt_fd_list[fd].fd_flags = 0;
   8e84c:	01400304 	movi	r5,12
   8e850:	00825800 	call	82580 <__mulsi3>
   8e854:	04400274 	movhi	r17,9
   8e858:	8c447b04 	addi	r17,r17,4588
   8e85c:	8885883a 	add	r2,r17,r2
    alt_fd_list[fd].dev      = 0;
   8e860:	8009883a 	mov	r4,r16
   8e864:	01400304 	movi	r5,12

void alt_release_fd (int fd)
{
  if (fd > 2)
  {
    alt_fd_list[fd].fd_flags = 0;
   8e868:	10000215 	stw	zero,8(r2)
    alt_fd_list[fd].dev      = 0;
   8e86c:	00825800 	call	82580 <__mulsi3>
   8e870:	8885883a 	add	r2,r17,r2
   8e874:	10000015 	stw	zero,0(r2)
  }
}
   8e878:	dfc00217 	ldw	ra,8(sp)
   8e87c:	dc400117 	ldw	r17,4(sp)
   8e880:	dc000017 	ldw	r16,0(sp)
   8e884:	dec00304 	addi	sp,sp,12
   8e888:	f800283a 	ret

0008e88c <sbrk>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8e88c:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8e890:	00bfff84 	movi	r2,-2
   8e894:	1884703a 	and	r2,r3,r2
   8e898:	1001703a 	wrctl	status,r2
  char *prev_heap_end; 

  context = alt_irq_disable_all();

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   8e89c:	d0a00d17 	ldw	r2,-32716(gp)
   8e8a0:	017fff04 	movi	r5,-4
   8e8a4:	108000c4 	addi	r2,r2,3
   8e8a8:	1144703a 	and	r2,r2,r5
   8e8ac:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   8e8b0:	1109883a 	add	r4,r2,r4
   8e8b4:	01400034 	movhi	r5,0
   8e8b8:	29500004 	addi	r5,r5,16384
   8e8bc:	29000336 	bltu	r5,r4,8e8cc <sbrk+0x40>
    return (caddr_t)-1;
  }
#endif

  prev_heap_end = heap_end; 
  heap_end += incr; 
   8e8c0:	d1200d15 	stw	r4,-32716(gp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8e8c4:	1801703a 	wrctl	status,r3
#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
} 
   8e8c8:	f800283a 	ret
   8e8cc:	1801703a 	wrctl	status,r3
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   8e8d0:	00bfffc4 	movi	r2,-1
   8e8d4:	f800283a 	ret

0008e8d8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   8e8d8:	defffd04 	addi	sp,sp,-12
   8e8dc:	dfc00215 	stw	ra,8(sp)
   8e8e0:	dc000115 	stw	r16,4(sp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   8e8e4:	20001616 	blt	r4,zero,8e940 <write+0x68>
   8e8e8:	2821883a 	mov	r16,r5
   8e8ec:	01400304 	movi	r5,12
   8e8f0:	d9800015 	stw	r6,0(sp)
   8e8f4:	00825800 	call	82580 <__mulsi3>
   8e8f8:	01000274 	movhi	r4,9
   8e8fc:	21047b04 	addi	r4,r4,4588
   8e900:	2089883a 	add	r4,r4,r2
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   8e904:	20800217 	ldw	r2,8(r4)
   8e908:	d9800017 	ldw	r6,0(sp)
   8e90c:	108000cc 	andi	r2,r2,3
   8e910:	10001726 	beq	r2,zero,8e970 <write+0x98>
   8e914:	20800017 	ldw	r2,0(r4)
   8e918:	10800617 	ldw	r2,24(r2)
   8e91c:	10001426 	beq	r2,zero,8e970 <write+0x98>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   8e920:	800b883a 	mov	r5,r16
   8e924:	103ee83a 	callr	r2
   8e928:	1021883a 	mov	r16,r2
   8e92c:	80001c16 	blt	r16,zero,8e9a0 <write+0xc8>
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
}
   8e930:	dfc00217 	ldw	ra,8(sp)
   8e934:	dc000117 	ldw	r16,4(sp)
   8e938:	dec00304 	addi	sp,sp,12
   8e93c:	f800283a 	ret
   8e940:	00800274 	movhi	r2,9
   8e944:	10890904 	addi	r2,r2,9252
   8e948:	10800017 	ldw	r2,0(r2)
   8e94c:	10000226 	beq	r2,zero,8e958 <write+0x80>
   8e950:	103ee83a 	callr	r2
   8e954:	00000206 	br	8e960 <write+0x88>
   8e958:	00800274 	movhi	r2,9
   8e95c:	108fd004 	addi	r2,r2,16192
      ALT_ERRNO = EACCES;
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   8e960:	00c01444 	movi	r3,81
   8e964:	10c00015 	stw	r3,0(r2)
  }
  return -1;
   8e968:	00bfffc4 	movi	r2,-1
   8e96c:	003ff006 	br	8e930 <_gp+0xffff453c>
   8e970:	00800274 	movhi	r2,9
   8e974:	10890904 	addi	r2,r2,9252
   8e978:	10800017 	ldw	r2,0(r2)
   8e97c:	10000526 	beq	r2,zero,8e994 <write+0xbc>
   8e980:	103ee83a 	callr	r2
      }
      return rval;
    }
    else
    {
      ALT_ERRNO = EACCES;
   8e984:	00c00344 	movi	r3,13
   8e988:	10c00015 	stw	r3,0(r2)
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  }
  return -1;
   8e98c:	00bfffc4 	movi	r2,-1
   8e990:	003fe706 	br	8e930 <_gp+0xffff453c>
   8e994:	00800274 	movhi	r2,9
   8e998:	108fd004 	addi	r2,r2,16192
   8e99c:	003ff906 	br	8e984 <_gp+0xffff4590>
   8e9a0:	00800274 	movhi	r2,9
   8e9a4:	10890904 	addi	r2,r2,9252
   8e9a8:	10800017 	ldw	r2,0(r2)
   8e9ac:	10000526 	beq	r2,zero,8e9c4 <write+0xec>
   8e9b0:	103ee83a 	callr	r2
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
      {
        ALT_ERRNO = -rval;
   8e9b4:	0421c83a 	sub	r16,zero,r16
   8e9b8:	14000015 	stw	r16,0(r2)
        return -1;
   8e9bc:	00bfffc4 	movi	r2,-1
   8e9c0:	003fdb06 	br	8e930 <_gp+0xffff453c>
   8e9c4:	00800274 	movhi	r2,9
   8e9c8:	108fd004 	addi	r2,r2,16192
   8e9cc:	003ff906 	br	8e9b4 <_gp+0xffff45c0>

0008e9d0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   8e9d0:	deffff04 	addi	sp,sp,-4
   8e9d4:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
   8e9d8:	008f7d00 	call	8f7d0 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   8e9dc:	00800044 	movi	r2,1
   8e9e0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   8e9e4:	dfc00017 	ldw	ra,0(sp)
   8e9e8:	dec00104 	addi	sp,sp,4
   8e9ec:	f800283a 	ret

0008e9f0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8e9f0:	defffe04 	addi	sp,sp,-8
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   8e9f4:	01c0fa04 	movi	r7,1000
   8e9f8:	01341014 	movui	r4,53312
   8e9fc:	000b883a 	mov	r5,zero
   8ea00:	01800044 	movi	r6,1
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   8ea04:	dfc00115 	stw	ra,4(sp)
   8ea08:	dc000015 	stw	r16,0(sp)
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   8ea0c:	008f0280 	call	8f028 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP_TIMER, timestamp_timer);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   8ea10:	04000274 	movhi	r16,9
   8ea14:	8404ef04 	addi	r16,r16,5052
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP_TIMER, timestamp_timer);
   8ea18:	00f40014 	movui	r3,53248
   8ea1c:	00800274 	movhi	r2,9
   8ea20:	108fd504 	addi	r2,r2,16212
   8ea24:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   8ea28:	8009883a 	mov	r4,r16
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP_TIMER, timestamp_timer);
   8ea2c:	00c0bef4 	movhi	r3,763
   8ea30:	18fc2004 	addi	r3,r3,-3968
   8ea34:	00800274 	movhi	r2,9
   8ea38:	108fd404 	addi	r2,r2,16208
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   8ea3c:	000b883a 	mov	r5,zero
   8ea40:	000d883a 	mov	r6,zero
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_TIMER_INIT ( TIMESTAMP_TIMER, timestamp_timer);
   8ea44:	10c00015 	stw	r3,0(r2)
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   8ea48:	008ec000 	call	8ec00 <altera_avalon_jtag_uart_init>

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   8ea4c:	813ff604 	addi	r4,r16,-40
   8ea50:	01400274 	movhi	r5,9
   8ea54:	29490504 	addi	r5,r5,9236
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
}
   8ea58:	dfc00117 	ldw	ra,4(sp)
   8ea5c:	dc000017 	ldw	r16,0(sp)
   8ea60:	dec00204 	addi	sp,sp,8
   8ea64:	008f1d01 	jmpi	8f1d0 <alt_dev_llist_insert>

0008ea68 <altera_avalon_jtag_uart_read_fd>:
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   8ea68:	20800017 	ldw	r2,0(r4)
   8ea6c:	21c00217 	ldw	r7,8(r4)
   8ea70:	11000a04 	addi	r4,r2,40
   8ea74:	008ed281 	jmpi	8ed28 <altera_avalon_jtag_uart_read>

0008ea78 <altera_avalon_jtag_uart_write_fd>:
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   8ea78:	20800017 	ldw	r2,0(r4)
   8ea7c:	21c00217 	ldw	r7,8(r4)
   8ea80:	11000a04 	addi	r4,r2,40
   8ea84:	008ee641 	jmpi	8ee64 <altera_avalon_jtag_uart_write>

0008ea88 <altera_avalon_jtag_uart_close_fd>:
int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   8ea88:	20800017 	ldw	r2,0(r4)
   8ea8c:	21400217 	ldw	r5,8(r4)
   8ea90:	11000a04 	addi	r4,r2,40
   8ea94:	008ec801 	jmpi	8ec80 <altera_avalon_jtag_uart_close>

0008ea98 <altera_avalon_jtag_uart_ioctl_fd>:
int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   8ea98:	21000017 	ldw	r4,0(r4)
   8ea9c:	21000a04 	addi	r4,r4,40
   8eaa0:	008ecb41 	jmpi	8ecb4 <altera_avalon_jtag_uart_ioctl>

0008eaa4 <altera_avalon_jtag_uart_timeout>:
static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   8eaa4:	20800017 	ldw	r2,0(r4)
   8eaa8:	10c00137 	ldwio	r3,4(r2)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   8eaac:	18c1000c 	andi	r3,r3,1024
   8eab0:	18000a1e 	bne	r3,zero,8eadc <altera_avalon_jtag_uart_timeout+0x38>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    sp->host_inactive = 0;
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   8eab4:	20800917 	ldw	r2,36(r4)
   8eab8:	00e00034 	movhi	r3,32768
   8eabc:	18ffff04 	addi	r3,r3,-4
   8eac0:	18800236 	bltu	r3,r2,8eacc <altera_avalon_jtag_uart_timeout+0x28>
    sp->host_inactive++;
   8eac4:	10800044 	addi	r2,r2,1
   8eac8:	20800915 	stw	r2,36(r4)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8eacc:	00800274 	movhi	r2,9
   8ead0:	108fd804 	addi	r2,r2,16224
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   8ead4:	10800017 	ldw	r2,0(r2)
   8ead8:	f800283a 	ret

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   8eadc:	20c00817 	ldw	r3,32(r4)
   8eae0:	18c10014 	ori	r3,r3,1024
   8eae4:	10c00135 	stwio	r3,4(r2)
   8eae8:	00800274 	movhi	r2,9
   8eaec:	108fd804 	addi	r2,r2,16224
    sp->host_inactive = 0;
   8eaf0:	20000915 	stw	zero,36(r4)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   8eaf4:	10800017 	ldw	r2,0(r2)
   8eaf8:	f800283a 	ret

0008eafc <altera_avalon_jtag_uart_irq>:
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  unsigned int base = sp->base;
   8eafc:	21c00017 	ldw	r7,0(r4)
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8eb00:	02bfff84 	movi	r10,-2
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8eb04:	02ffff44 	movi	r11,-3
   8eb08:	3a400104 	addi	r9,r7,4
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8eb0c:	4a000037 	ldwio	r8,0(r9)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8eb10:	4080c00c 	andi	r2,r8,768
   8eb14:	10003326 	beq	r2,zero,8ebe4 <altera_avalon_jtag_uart_irq+0xe8>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   8eb18:	4080400c 	andi	r2,r8,256
   8eb1c:	10001626 	beq	r2,zero,8eb78 <altera_avalon_jtag_uart_irq+0x7c>
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8eb20:	20800a17 	ldw	r2,40(r4)
        if (next == sp->rx_out)
   8eb24:	21800b17 	ldw	r6,44(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8eb28:	10800044 	addi	r2,r2,1
   8eb2c:	1081ffcc 	andi	r2,r2,2047
        if (next == sp->rx_out)
   8eb30:	30800c1e 	bne	r6,r2,8eb64 <altera_avalon_jtag_uart_irq+0x68>
   8eb34:	00002c06 	br	8ebe8 <altera_avalon_jtag_uart_irq+0xec>
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8eb38:	21400a17 	ldw	r5,40(r4)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8eb3c:	20c00a17 	ldw	r3,40(r4)
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8eb40:	214b883a 	add	r5,r4,r5
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8eb44:	18c00044 	addi	r3,r3,1
   8eb48:	18c1ffcc 	andi	r3,r3,2047
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   8eb4c:	28800e05 	stb	r2,56(r5)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8eb50:	20c00a15 	stw	r3,40(r4)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8eb54:	20c00a17 	ldw	r3,40(r4)
   8eb58:	18c00044 	addi	r3,r3,1
   8eb5c:	18c1ffcc 	andi	r3,r3,2047
        if (next == sp->rx_out)
   8eb60:	30c00326 	beq	r6,r3,8eb70 <altera_avalon_jtag_uart_irq+0x74>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   8eb64:	38800037 	ldwio	r2,0(r7)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   8eb68:	10e0000c 	andi	r3,r2,32768
   8eb6c:	183ff21e 	bne	r3,zero,8eb38 <_gp+0xffff4744>

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   8eb70:	10bfffec 	andhi	r2,r2,65535
   8eb74:	10001c1e 	bne	r2,zero,8ebe8 <altera_avalon_jtag_uart_irq+0xec>
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   8eb78:	4080800c 	andi	r2,r8,512
   8eb7c:	103fe326 	beq	r2,zero,8eb0c <_gp+0xffff4718>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   8eb80:	4010d43a 	srli	r8,r8,16

      while (space > 0 && sp->tx_out != sp->tx_in)
   8eb84:	40000b1e 	bne	r8,zero,8ebb4 <altera_avalon_jtag_uart_irq+0xb8>
   8eb88:	003fe006 	br	8eb0c <_gp+0xffff4718>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   8eb8c:	20800d17 	ldw	r2,52(r4)
   8eb90:	2085883a 	add	r2,r4,r2
   8eb94:	10820e07 	ldb	r2,2104(r2)
   8eb98:	38800035 	stwio	r2,0(r7)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8eb9c:	20800d17 	ldw	r2,52(r4)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   8eba0:	423fffc4 	addi	r8,r8,-1

      while (space > 0 && sp->tx_out != sp->tx_in)
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8eba4:	10800044 	addi	r2,r2,1
   8eba8:	1081ffcc 	andi	r2,r2,2047
   8ebac:	20800d15 	stw	r2,52(r4)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   8ebb0:	403fd626 	beq	r8,zero,8eb0c <_gp+0xffff4718>
   8ebb4:	20c00d17 	ldw	r3,52(r4)
   8ebb8:	20800c17 	ldw	r2,48(r4)
   8ebbc:	18bff31e 	bne	r3,r2,8eb8c <_gp+0xffff4798>
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8ebc0:	20800817 	ldw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8ebc4:	20c00017 	ldw	r3,0(r4)
      }

      if (space > 0)
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8ebc8:	12c4703a 	and	r2,r2,r11
   8ebcc:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8ebd0:	18800135 	stwio	r2,4(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8ebd4:	48800037 	ldwio	r2,0(r9)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8ebd8:	4a000037 	ldwio	r8,0(r9)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   8ebdc:	4080c00c 	andi	r2,r8,768
   8ebe0:	103fcd1e 	bne	r2,zero,8eb18 <_gp+0xffff4724>
   8ebe4:	f800283a 	ret
      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8ebe8:	20800817 	ldw	r2,32(r4)
   8ebec:	1284703a 	and	r2,r2,r10
   8ebf0:	20800815 	stw	r2,32(r4)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   8ebf4:	48800035 	stwio	r2,0(r9)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   8ebf8:	48800037 	ldwio	r2,0(r9)
   8ebfc:	003fde06 	br	8eb78 <_gp+0xffff4784>

0008ec00 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8ec00:	defffd04 	addi	sp,sp,-12
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8ec04:	20c00017 	ldw	r3,0(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8ec08:	dc000115 	stw	r16,4(sp)
   8ec0c:	dfc00215 	stw	ra,8(sp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8ec10:	00800044 	movi	r2,1
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8ec14:	2021883a 	mov	r16,r4
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8ec18:	20800815 	stw	r2,32(r4)
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   8ec1c:	2809883a 	mov	r4,r5
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   8ec20:	18800135 	stwio	r2,4(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   8ec24:	300b883a 	mov	r5,r6
   8ec28:	800f883a 	mov	r7,r16
   8ec2c:	01800274 	movhi	r6,9
   8ec30:	31babf04 	addi	r6,r6,-5380
   8ec34:	d8000015 	stw	zero,0(sp)
   8ec38:	008f3140 	call	8f314 <alt_ic_isr_register>
   8ec3c:	00800274 	movhi	r2,9
   8ec40:	108fd804 	addi	r2,r2,16224
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8ec44:	11400017 	ldw	r5,0(r2)
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   8ec48:	80000915 	stw	zero,36(r16)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   8ec4c:	81000204 	addi	r4,r16,8
   8ec50:	01800274 	movhi	r6,9
   8ec54:	31baa904 	addi	r6,r6,-5468
   8ec58:	800f883a 	mov	r7,r16
   8ec5c:	008f1380 	call	8f138 <alt_alarm_start>
   8ec60:	1000030e 	bge	r2,zero,8ec70 <altera_avalon_jtag_uart_init+0x70>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   8ec64:	00a00034 	movhi	r2,32768
   8ec68:	10bfffc4 	addi	r2,r2,-1
   8ec6c:	80800115 	stw	r2,4(r16)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   8ec70:	dfc00217 	ldw	ra,8(sp)
   8ec74:	dc000117 	ldw	r16,4(sp)
   8ec78:	dec00304 	addi	sp,sp,12
   8ec7c:	f800283a 	ret

0008ec80 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   8ec80:	21800c17 	ldw	r6,48(r4)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    if (flags & O_NONBLOCK) {
   8ec84:	2950000c 	andi	r5,r5,16384
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8ec88:	00000406 	br	8ec9c <altera_avalon_jtag_uart_close+0x1c>
   8ec8c:	20c00917 	ldw	r3,36(r4)
   8ec90:	20800117 	ldw	r2,4(r4)
   8ec94:	1880032e 	bgeu	r3,r2,8eca4 <altera_avalon_jtag_uart_close+0x24>
    if (flags & O_NONBLOCK) {
   8ec98:	2800041e 	bne	r5,zero,8ecac <altera_avalon_jtag_uart_close+0x2c>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   8ec9c:	20800d17 	ldw	r2,52(r4)
   8eca0:	11bffa1e 	bne	r2,r6,8ec8c <_gp+0xffff4898>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   8eca4:	0005883a 	mov	r2,zero
}
   8eca8:	f800283a 	ret
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
   8ecac:	00bffd44 	movi	r2,-11
   8ecb0:	f800283a 	ret

0008ecb4 <altera_avalon_jtag_uart_ioctl>:
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;

  switch (req)
   8ecb4:	009a8044 	movi	r2,27137
   8ecb8:	28800d26 	beq	r5,r2,8ecf0 <altera_avalon_jtag_uart_ioctl+0x3c>
   8ecbc:	009a8084 	movi	r2,27138
   8ecc0:	2880091e 	bne	r5,r2,8ece8 <altera_avalon_jtag_uart_ioctl+0x34>
    }
    break;

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   8ecc4:	20c00117 	ldw	r3,4(r4)
   8ecc8:	00a00034 	movhi	r2,32768
   8eccc:	10bfffc4 	addi	r2,r2,-1
   8ecd0:	18800526 	beq	r3,r2,8ece8 <altera_avalon_jtag_uart_ioctl+0x34>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8ecd4:	21000917 	ldw	r4,36(r4)
      rc = 0;
   8ecd8:	0005883a 	mov	r2,zero

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   8ecdc:	20c7803a 	cmpltu	r3,r4,r3
   8ece0:	30c00015 	stw	r3,0(r6)
   8ece4:	f800283a 	ret

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  int rc = -ENOTTY;
   8ece8:	00bff9c4 	movi	r2,-25
  default:
    break;
  }

  return rc;
}
   8ecec:	f800283a 	ret

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   8ecf0:	20c00117 	ldw	r3,4(r4)
   8ecf4:	00a00034 	movhi	r2,32768
   8ecf8:	10bfffc4 	addi	r2,r2,-1
   8ecfc:	18bffa26 	beq	r3,r2,8ece8 <_gp+0xffff48f4>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   8ed00:	30800017 	ldw	r2,0(r6)
   8ed04:	01600034 	movhi	r5,32768
   8ed08:	297fff04 	addi	r5,r5,-4
   8ed0c:	10ffff84 	addi	r3,r2,-2
   8ed10:	28c0022e 	bgeu	r5,r3,8ed1c <altera_avalon_jtag_uart_ioctl+0x68>
   8ed14:	00a00034 	movhi	r2,32768
   8ed18:	10bfff84 	addi	r2,r2,-2
   8ed1c:	20800115 	stw	r2,4(r4)
      rc = 0;
   8ed20:	0005883a 	mov	r2,zero
   8ed24:	f800283a 	ret

0008ed28 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8ed28:	defff604 	addi	sp,sp,-40
   8ed2c:	dcc00315 	stw	r19,12(sp)
   8ed30:	dfc00915 	stw	ra,36(sp)
   8ed34:	df000815 	stw	fp,32(sp)
   8ed38:	ddc00715 	stw	r23,28(sp)
   8ed3c:	dd800615 	stw	r22,24(sp)
   8ed40:	dd400515 	stw	r21,20(sp)
   8ed44:	dd000415 	stw	r20,16(sp)
   8ed48:	dc800215 	stw	r18,8(sp)
   8ed4c:	dc400115 	stw	r17,4(sp)
   8ed50:	dc000015 	stw	r16,0(sp)
   8ed54:	3027883a 	mov	r19,r6
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8ed58:	0180270e 	bge	zero,r6,8edf8 <altera_avalon_jtag_uart_read+0xd0>
   8ed5c:	2025883a 	mov	r18,r4
   8ed60:	282d883a 	mov	r22,r5
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8ed64:	05420004 	movi	r21,2048
    /* If we read any data then return it */
    if (ptr != buffer)
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8ed68:	3dd0000c 	andi	r23,r7,16384
   8ed6c:	94000b17 	ldw	r16,44(r18)
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   8ed70:	b039883a 	mov	fp,r22
   8ed74:	00000a06 	br	8eda0 <altera_avalon_jtag_uart_read+0x78>
   8ed78:	9880012e 	bgeu	r19,r2,8ed80 <altera_avalon_jtag_uart_read+0x58>
   8ed7c:	9823883a 	mov	r17,r19

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8ed80:	8c21883a 	add	r16,r17,r16
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   8ed84:	880d883a 	mov	r6,r17
      ptr   += n;
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8ed88:	8401ffcc 	andi	r16,r16,2047
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   8ed8c:	00825a80 	call	825a8 <memcpy>
      ptr   += n;
      space -= n;
   8ed90:	9c67c83a 	sub	r19,r19,r17

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8ed94:	94000b15 	stw	r16,44(r18)

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
      ptr   += n;
   8ed98:	e479883a 	add	fp,fp,r17
      space -= n;

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);
   8ed9c:	04c0090e 	bge	zero,r19,8edc4 <altera_avalon_jtag_uart_read+0x9c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   8eda0:	95000a17 	ldw	r20,40(r18)
      out = sp->rx_out;

      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   8eda4:	ac05c83a 	sub	r2,r21,r16
    do
    {
      in  = sp->rx_in;
      out = sp->rx_out;

      if (in >= out)
   8eda8:	a4000136 	bltu	r20,r16,8edb0 <altera_avalon_jtag_uart_read+0x88>
        n = in - out;
   8edac:	a405c83a 	sub	r2,r20,r16
        break; /* No more data available */

      if (n > space)
        n = space;

      memcpy(ptr, sp->rx_buf + out, n);
   8edb0:	81400e04 	addi	r5,r16,56
   8edb4:	e009883a 	mov	r4,fp
   8edb8:	914b883a 	add	r5,r18,r5
   8edbc:	1023883a 	mov	r17,r2
      if (in >= out)
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
   8edc0:	103fed1e 	bne	r2,zero,8ed78 <_gp+0xffff4984>
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   8edc4:	e5801b1e 	bne	fp,r22,8ee34 <altera_avalon_jtag_uart_read+0x10c>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   8edc8:	b8000426 	beq	r23,zero,8eddc <altera_avalon_jtag_uart_read+0xb4>
   8edcc:	00000c06 	br	8ee00 <altera_avalon_jtag_uart_read+0xd8>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   8edd0:	90c00917 	ldw	r3,36(r18)
   8edd4:	90800117 	ldw	r2,4(r18)
   8edd8:	1880022e 	bgeu	r3,r2,8ede4 <altera_avalon_jtag_uart_read+0xbc>
   8eddc:	90800a17 	ldw	r2,40(r18)
   8ede0:	a0bffb26 	beq	r20,r2,8edd0 <_gp+0xffff49dc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   8ede4:	90800a17 	ldw	r2,40(r18)
   8ede8:	a0800126 	beq	r20,r2,8edf0 <altera_avalon_jtag_uart_read+0xc8>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   8edec:	04ffdf16 	blt	zero,r19,8ed6c <_gp+0xffff4978>
  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
    return -EWOULDBLOCK;
  else
    return -EIO;
   8edf0:	00bffec4 	movi	r2,-5
   8edf4:	00000306 	br	8ee04 <altera_avalon_jtag_uart_read+0xdc>
   8edf8:	39d0000c 	andi	r7,r7,16384
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
  else if (flags & O_NONBLOCK)
   8edfc:	383ffc26 	beq	r7,zero,8edf0 <_gp+0xffff49fc>
    return -EWOULDBLOCK;
   8ee00:	00bffd44 	movi	r2,-11
  else
    return -EIO;
}
   8ee04:	dfc00917 	ldw	ra,36(sp)
   8ee08:	df000817 	ldw	fp,32(sp)
   8ee0c:	ddc00717 	ldw	r23,28(sp)
   8ee10:	dd800617 	ldw	r22,24(sp)
   8ee14:	dd400517 	ldw	r21,20(sp)
   8ee18:	dd000417 	ldw	r20,16(sp)
   8ee1c:	dcc00317 	ldw	r19,12(sp)
   8ee20:	dc800217 	ldw	r18,8(sp)
   8ee24:	dc400117 	ldw	r17,4(sp)
   8ee28:	dc000017 	ldw	r16,0(sp)
   8ee2c:	dec00a04 	addi	sp,sp,40
   8ee30:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ee34:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ee38:	00ffff84 	movi	r3,-2
   8ee3c:	10c6703a 	and	r3,r2,r3
   8ee40:	1801703a 	wrctl	status,r3

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8ee44:	90c00817 	ldw	r3,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8ee48:	91000017 	ldw	r4,0(r18)

  if (ptr != buffer)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   8ee4c:	18c00054 	ori	r3,r3,1
   8ee50:	90c00815 	stw	r3,32(r18)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8ee54:	20c00135 	stwio	r3,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ee58:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    return ptr - buffer;
   8ee5c:	e585c83a 	sub	r2,fp,r22
   8ee60:	003fe806 	br	8ee04 <_gp+0xffff4a10>

0008ee64 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   8ee64:	defff404 	addi	sp,sp,-48
   8ee68:	dd400715 	stw	r21,28(sp)
   8ee6c:	dc000215 	stw	r16,8(sp)
   8ee70:	dfc00b15 	stw	ra,44(sp)
   8ee74:	df000a15 	stw	fp,40(sp)
   8ee78:	ddc00915 	stw	r23,36(sp)
   8ee7c:	dd800815 	stw	r22,32(sp)
   8ee80:	dd000615 	stw	r20,24(sp)
   8ee84:	dcc00515 	stw	r19,20(sp)
   8ee88:	dc800415 	stw	r18,16(sp)
   8ee8c:	dc400315 	stw	r17,12(sp)
   8ee90:	d9400015 	stw	r5,0(sp)
   8ee94:	d9c00115 	stw	r7,4(sp)
   8ee98:	302b883a 	mov	r21,r6
   8ee9c:	2021883a 	mov	r16,r4
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8eea0:	01804e0e 	bge	zero,r6,8efdc <altera_avalon_jtag_uart_write+0x178>
   8eea4:	282d883a 	mov	r22,r5
      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8eea8:	0501ffc4 	movi	r20,2047
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8eeac:	04c20004 	movi	r19,2048
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8eeb0:	04bfff84 	movi	r18,-2
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
   8eeb4:	3c50000c 	andi	r17,r7,16384
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   8eeb8:	85c00c17 	ldw	r23,48(r16)
      out = sp->tx_out;
   8eebc:	80c00d17 	ldw	r3,52(r16)

      if (in < out)
   8eec0:	b8c0412e 	bgeu	r23,r3,8efc8 <altera_avalon_jtag_uart_write+0x164>
        n = out - 1 - in;
   8eec4:	1f3fffc4 	addi	fp,r3,-1
   8eec8:	e5f9c83a 	sub	fp,fp,r23
      else if (out > 0)
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
   8eecc:	e0002626 	beq	fp,zero,8ef68 <altera_avalon_jtag_uart_write+0x104>
   8eed0:	af00012e 	bgeu	r21,fp,8eed8 <altera_avalon_jtag_uart_write+0x74>
   8eed4:	a839883a 	mov	fp,r21
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   8eed8:	b9020e04 	addi	r4,r23,2104
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8eedc:	e5ef883a 	add	r23,fp,r23
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   8eee0:	b00b883a 	mov	r5,r22
   8eee4:	8109883a 	add	r4,r16,r4
   8eee8:	e00d883a 	mov	r6,fp
      ptr   += n;
      count -= n;

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8eeec:	bdc1ffcc 	andi	r23,r23,2047
        break;

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
   8eef0:	00825a80 	call	825a8 <memcpy>
      ptr   += n;
      count -= n;
   8eef4:	af2bc83a 	sub	r21,r21,fp

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   8eef8:	85c00c15 	stw	r23,48(r16)

      if (n > count)
        n = count;

      memcpy(sp->tx_buf + in, ptr, n);
      ptr   += n;
   8eefc:	b72d883a 	add	r22,r22,fp
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8ef00:	057fed16 	blt	zero,r21,8eeb8 <_gp+0xffff4ac4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ef04:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ef08:	00ffff84 	movi	r3,-2
   8ef0c:	10c6703a 	and	r3,r2,r3
   8ef10:	1801703a 	wrctl	status,r3
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8ef14:	80c00817 	ldw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8ef18:	81000017 	ldw	r4,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8ef1c:	18c00094 	ori	r3,r3,2
   8ef20:	80c00815 	stw	r3,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8ef24:	20c00135 	stwio	r3,4(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ef28:	1001703a 	wrctl	status,r2
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   8ef2c:	d8c00017 	ldw	r3,0(sp)
   8ef30:	b0c02026 	beq	r22,r3,8efb4 <altera_avalon_jtag_uart_write+0x150>
    return ptr - start;
   8ef34:	b0c5c83a 	sub	r2,r22,r3
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
}
   8ef38:	dfc00b17 	ldw	ra,44(sp)
   8ef3c:	df000a17 	ldw	fp,40(sp)
   8ef40:	ddc00917 	ldw	r23,36(sp)
   8ef44:	dd800817 	ldw	r22,32(sp)
   8ef48:	dd400717 	ldw	r21,28(sp)
   8ef4c:	dd000617 	ldw	r20,24(sp)
   8ef50:	dcc00517 	ldw	r19,20(sp)
   8ef54:	dc800417 	ldw	r18,16(sp)
   8ef58:	dc400317 	ldw	r17,12(sp)
   8ef5c:	dc000217 	ldw	r16,8(sp)
   8ef60:	dec00c04 	addi	sp,sp,48
   8ef64:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8ef68:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8ef6c:	1488703a 	and	r4,r2,r18
   8ef70:	2001703a 	wrctl	status,r4
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8ef74:	81000817 	ldw	r4,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8ef78:	81400017 	ldw	r5,0(r16)
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   8ef7c:	21000094 	ori	r4,r4,2
   8ef80:	81000815 	stw	r4,32(r16)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   8ef84:	29000135 	stwio	r4,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8ef88:	1001703a 	wrctl	status,r2
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
   8ef8c:	883fe71e 	bne	r17,zero,8ef2c <_gp+0xffff4b38>
   8ef90:	81000917 	ldw	r4,36(r16)
   8ef94:	00000206 	br	8efa0 <altera_avalon_jtag_uart_write+0x13c>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   8ef98:	80800117 	ldw	r2,4(r16)
   8ef9c:	2080022e 	bgeu	r4,r2,8efa8 <altera_avalon_jtag_uart_write+0x144>
   8efa0:	80800d17 	ldw	r2,52(r16)
   8efa4:	18bffc26 	beq	r3,r2,8ef98 <_gp+0xffff4ba4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   8efa8:	203fe01e 	bne	r4,zero,8ef2c <_gp+0xffff4b38>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8efac:	057fc216 	blt	zero,r21,8eeb8 <_gp+0xffff4ac4>
   8efb0:	003fd406 	br	8ef04 <_gp+0xffff4b10>
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    return ptr - start;
  else if (flags & O_NONBLOCK)
   8efb4:	d8c00117 	ldw	r3,4(sp)
   8efb8:	1d90000c 	andi	r22,r3,16384
   8efbc:	b0000926 	beq	r22,zero,8efe4 <altera_avalon_jtag_uart_write+0x180>
    return -EWOULDBLOCK;
   8efc0:	00bffd44 	movi	r2,-11
   8efc4:	003fdc06 	br	8ef38 <_gp+0xffff4b44>
      in  = sp->tx_in;
      out = sp->tx_out;

      if (in < out)
        n = out - 1 - in;
      else if (out > 0)
   8efc8:	18000226 	beq	r3,zero,8efd4 <altera_avalon_jtag_uart_write+0x170>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   8efcc:	9df9c83a 	sub	fp,r19,r23
   8efd0:	003fbe06 	br	8eecc <_gp+0xffff4ad8>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   8efd4:	a5f9c83a 	sub	fp,r20,r23
   8efd8:	003fbc06 	br	8eecc <_gp+0xffff4ad8>
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   8efdc:	dd800017 	ldw	r22,0(sp)
   8efe0:	003fc806 	br	8ef04 <_gp+0xffff4b10>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   8efe4:	00bffec4 	movi	r2,-5
   8efe8:	003fd306 	br	8ef38 <_gp+0xffff4b44>

0008efec <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   8efec:	defffe04 	addi	sp,sp,-8
   8eff0:	dfc00115 	stw	ra,4(sp)
   8eff4:	dc000015 	stw	r16,0(sp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   8eff8:	20000035 	stwio	zero,0(r4)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   8effc:	20800137 	ldwio	r2,4(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f000:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f004:	00bfff84 	movi	r2,-2
   8f008:	8084703a 	and	r2,r16,r2
   8f00c:	1001703a 	wrctl	status,r2
  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  alt_tick ();
   8f010:	008f6e00 	call	8f6e0 <alt_tick>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f014:	8001703a 	wrctl	status,r16
  alt_irq_enable_all(cpu_sr);
}
   8f018:	dfc00117 	ldw	ra,4(sp)
   8f01c:	dc000017 	ldw	r16,0(sp)
   8f020:	dec00204 	addi	sp,sp,8
   8f024:	f800283a 	ret

0008f028 <alt_avalon_timer_sc_init>:
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   8f028:	00c00274 	movhi	r3,9
   8f02c:	18cfd804 	addi	r3,r3,16224
   8f030:	1a000017 	ldw	r8,0(r3)
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   8f034:	defffe04 	addi	sp,sp,-8
   8f038:	dfc00115 	stw	ra,4(sp)
   8f03c:	2005883a 	mov	r2,r4
   8f040:	2809883a 	mov	r4,r5
   8f044:	4000011e 	bne	r8,zero,8f04c <alt_avalon_timer_sc_init+0x24>
  {
    _alt_tick_rate = nticks;
   8f048:	19c00015 	stw	r7,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   8f04c:	00c001c4 	movi	r3,7
   8f050:	10c00135 	stwio	r3,4(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   8f054:	300b883a 	mov	r5,r6
   8f058:	d8000015 	stw	zero,0(sp)
   8f05c:	01800274 	movhi	r6,9
   8f060:	31bbfb04 	addi	r6,r6,-4116
   8f064:	100f883a 	mov	r7,r2
   8f068:	008f3140 	call	8f314 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   8f06c:	dfc00117 	ldw	ra,4(sp)
   8f070:	dec00204 	addi	sp,sp,8
   8f074:	f800283a 	ret

0008f078 <alt_timestamp_start>:

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
   8f078:	00800274 	movhi	r2,9
   8f07c:	108fd404 	addi	r2,r2,16208
   8f080:	10c00017 	ldw	r3,0(r2)
 * device has not been registered. 
 */

int alt_timestamp_start(void)
{
  void* base = altera_avalon_timer_ts_base;
   8f084:	00800274 	movhi	r2,9
   8f088:	108fd504 	addi	r2,r2,16212
   8f08c:	10800017 	ldw	r2,0(r2)

  if (!altera_avalon_timer_ts_freq)
   8f090:	18000c26 	beq	r3,zero,8f0c4 <alt_timestamp_start+0x4c>
    return -1;
  }
  else
  {
    if(ALT_TIMESTAMP_COUNTER_SIZE == 64) {
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base,ALTERA_AVALON_TIMER_CONTROL_STOP_MSK);
   8f094:	10c00104 	addi	r3,r2,4
   8f098:	01000204 	movi	r4,8
   8f09c:	19000035 	stwio	r4,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_0 (base, 0xFFFF);
   8f0a0:	013fffd4 	movui	r4,65535
   8f0a4:	11000235 	stwio	r4,8(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_1 (base, 0xFFFF);;
   8f0a8:	11000335 	stwio	r4,12(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_2 (base, 0xFFFF);
   8f0ac:	11000435 	stwio	r4,16(r2)
        IOWR_ALTERA_AVALON_TIMER_PERIOD_3 (base, 0xFFFF);
   8f0b0:	11000535 	stwio	r4,20(r2)
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK);
   8f0b4:	00800104 	movi	r2,4
   8f0b8:	18800035 	stwio	r2,0(r3)
        IOWR_ALTERA_AVALON_TIMER_PERIODL (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    } 
  }
  return 0;
   8f0bc:	0005883a 	mov	r2,zero
   8f0c0:	f800283a 	ret
{
  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
  {
    return -1;
   8f0c4:	00bfffc4 	movi	r2,-1
        IOWR_ALTERA_AVALON_TIMER_PERIODH (base, 0xFFFF);
        IOWR_ALTERA_AVALON_TIMER_CONTROL (base, ALTERA_AVALON_TIMER_CONTROL_START_MSK); 
    } 
  }
  return 0;
}
   8f0c8:	f800283a 	ret

0008f0cc <alt_timestamp>:
alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;

  if (!altera_avalon_timer_ts_freq)
   8f0cc:	00800274 	movhi	r2,9
   8f0d0:	108fd404 	addi	r2,r2,16208
   8f0d4:	10800017 	ldw	r2,0(r2)
 */

alt_timestamp_type alt_timestamp(void)
{

  void* base = altera_avalon_timer_ts_base;
   8f0d8:	00c00274 	movhi	r3,9
   8f0dc:	18cfd504 	addi	r3,r3,16212
   8f0e0:	19000017 	ldw	r4,0(r3)

  if (!altera_avalon_timer_ts_freq)
   8f0e4:	1000031e 	bne	r2,zero,8f0f4 <alt_timestamp+0x28>
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        return 0xFFFFFFFFFFFFFFFFULL;
   8f0e8:	00bfffc4 	movi	r2,-1
   8f0ec:	1007883a 	mov	r3,r2
        alt_timestamp_type upper = IORD_ALTERA_AVALON_TIMER_SNAPH(base) & ALTERA_AVALON_TIMER_SNAPH_MSK;
        
        return (0xFFFFFFFF - ((upper << 16) | lower)); 
#endif
  }
}
   8f0f0:	f800283a 	ret
#endif
  }
  else
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        IOWR_ALTERA_AVALON_TIMER_SNAP_0 (base, 0);
   8f0f4:	20800604 	addi	r2,r4,24
   8f0f8:	10000035 	stwio	zero,0(r2)
        alt_timestamp_type snap_0 = IORD_ALTERA_AVALON_TIMER_SNAP_0(base) & ALTERA_AVALON_TIMER_SNAP_0_MSK;
   8f0fc:	10800037 	ldwio	r2,0(r2)
        alt_timestamp_type snap_1 = IORD_ALTERA_AVALON_TIMER_SNAP_1(base) & ALTERA_AVALON_TIMER_SNAP_1_MSK;
   8f100:	21400737 	ldwio	r5,28(r4)
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
   8f104:	20c00837 	ldwio	r3,32(r4)
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
   8f108:	21000937 	ldwio	r4,36(r4)
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
   8f10c:	2008943a 	slli	r4,r4,16
   8f110:	280a943a 	slli	r5,r5,16
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        IOWR_ALTERA_AVALON_TIMER_SNAP_0 (base, 0);
        alt_timestamp_type snap_0 = IORD_ALTERA_AVALON_TIMER_SNAP_0(base) & ALTERA_AVALON_TIMER_SNAP_0_MSK;
        alt_timestamp_type snap_1 = IORD_ALTERA_AVALON_TIMER_SNAP_1(base) & ALTERA_AVALON_TIMER_SNAP_1_MSK;
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
   8f114:	18ffffcc 	andi	r3,r3,65535
  }
  else
  {
#if (ALT_TIMESTAMP_COUNTER_SIZE == 64)
        IOWR_ALTERA_AVALON_TIMER_SNAP_0 (base, 0);
        alt_timestamp_type snap_0 = IORD_ALTERA_AVALON_TIMER_SNAP_0(base) & ALTERA_AVALON_TIMER_SNAP_0_MSK;
   8f118:	10bfffcc 	andi	r2,r2,65535
        alt_timestamp_type snap_1 = IORD_ALTERA_AVALON_TIMER_SNAP_1(base) & ALTERA_AVALON_TIMER_SNAP_1_MSK;
        alt_timestamp_type snap_2 = IORD_ALTERA_AVALON_TIMER_SNAP_2(base) & ALTERA_AVALON_TIMER_SNAP_2_MSK;
        alt_timestamp_type snap_3 = IORD_ALTERA_AVALON_TIMER_SNAP_3(base) & ALTERA_AVALON_TIMER_SNAP_3_MSK;
        
        return (0xFFFFFFFFFFFFFFFFULL - ( (snap_3 << 48) | (snap_2 << 32) | (snap_1 << 16) | (snap_0) ));
   8f11c:	1144303a 	nor	r2,r2,r5
   8f120:	20c6303a 	nor	r3,r4,r3
   8f124:	f800283a 	ret

0008f128 <alt_timestamp_freq>:
 * timestamp device has been registered.
 */

alt_u32 alt_timestamp_freq(void)
{
  return altera_avalon_timer_ts_freq;
   8f128:	00800274 	movhi	r2,9
   8f12c:	108fd404 	addi	r2,r2,16208
}
   8f130:	10800017 	ldw	r2,0(r2)
   8f134:	f800283a 	ret

0008f138 <alt_alarm_start>:
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   8f138:	00800274 	movhi	r2,9
   8f13c:	108fd804 	addi	r2,r2,16224
                     void* context)
{
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  
  if (alt_ticks_per_second ())
   8f140:	10800017 	ldw	r2,0(r2)
   8f144:	10001d26 	beq	r2,zero,8f1bc <alt_alarm_start+0x84>
  {
    if (alarm)
   8f148:	20001e26 	beq	r4,zero,8f1c4 <alt_alarm_start+0x8c>
    {
      alarm->callback = callback;
   8f14c:	21800315 	stw	r6,12(r4)
      alarm->context  = context;
   8f150:	21c00515 	stw	r7,20(r4)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f154:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f158:	00bfff84 	movi	r2,-2
   8f15c:	1884703a 	and	r2,r3,r2
   8f160:	1001703a 	wrctl	status,r2
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   8f164:	00800274 	movhi	r2,9
   8f168:	108fd704 	addi	r2,r2,16220
   8f16c:	10800017 	ldw	r2,0(r2)
 
      irq_context = alt_irq_disable_all ();
      
      current_nticks = alt_nticks();
      
      alarm->time = nticks + current_nticks + 1; 
   8f170:	11800044 	addi	r6,r2,1
   8f174:	314b883a 	add	r5,r6,r5
   8f178:	21400215 	stw	r5,8(r4)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   8f17c:	28800c36 	bltu	r5,r2,8f1b0 <alt_alarm_start+0x78>
      {
        alarm->rollover = 1;
      }
      else
      {
        alarm->rollover = 0;
   8f180:	20000405 	stb	zero,16(r4)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8f184:	00800274 	movhi	r2,9
   8f188:	10890c04 	addi	r2,r2,9264
  entry->next     = list->next;
   8f18c:	11400017 	ldw	r5,0(r2)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8f190:	20800115 	stw	r2,4(r4)
  entry->next     = list->next;
   8f194:	21400015 	stw	r5,0(r4)

  list->next->previous = entry;
   8f198:	11400017 	ldw	r5,0(r2)
  list->next           = entry;
   8f19c:	11000015 	stw	r4,0(r2)
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;

  list->next->previous = entry;
   8f1a0:	29000115 	stw	r4,4(r5)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f1a4:	1801703a 	wrctl	status,r3
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
      alt_irq_enable_all (irq_context);

      return 0;
   8f1a8:	0005883a 	mov	r2,zero
   8f1ac:	f800283a 	ret
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
      {
        alarm->rollover = 1;
   8f1b0:	00800044 	movi	r2,1
   8f1b4:	20800405 	stb	r2,16(r4)
   8f1b8:	003ff206 	br	8f184 <_gp+0xffff4d90>
      return -EINVAL;
    }
  }
  else
  {
    return -ENOTSUP;
   8f1bc:	00bfde84 	movi	r2,-134
   8f1c0:	f800283a 	ret

      return 0;
    }
    else
    {
      return -EINVAL;
   8f1c4:	00bffa84 	movi	r2,-22
  }
  else
  {
    return -ENOTSUP;
  }
}
   8f1c8:	f800283a 	ret

0008f1cc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   8f1cc:	f800283a 	ret

0008f1d0 <alt_dev_llist_insert>:
{
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   8f1d0:	20000a26 	beq	r4,zero,8f1fc <alt_dev_llist_insert+0x2c>
   8f1d4:	20800217 	ldw	r2,8(r4)
   8f1d8:	10000826 	beq	r2,zero,8f1fc <alt_dev_llist_insert+0x2c>

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  entry->next     = list->next;
   8f1dc:	28c00017 	ldw	r3,0(r5)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   8f1e0:	21400115 	stw	r5,4(r4)
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
   8f1e4:	0005883a 	mov	r2,zero
  entry->next     = list->next;
   8f1e8:	20c00015 	stw	r3,0(r4)

  list->next->previous = entry;
   8f1ec:	28c00017 	ldw	r3,0(r5)
   8f1f0:	19000115 	stw	r4,4(r3)
  list->next           = entry;
   8f1f4:	29000015 	stw	r4,0(r5)
   8f1f8:	f800283a 	ret
   8f1fc:	00800274 	movhi	r2,9
   8f200:	10890904 	addi	r2,r2,9252
   8f204:	10800017 	ldw	r2,0(r2)
   8f208:	10000926 	beq	r2,zero,8f230 <alt_dev_llist_insert+0x60>
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   8f20c:	deffff04 	addi	sp,sp,-4
   8f210:	dfc00015 	stw	ra,0(sp)
   8f214:	103ee83a 	callr	r2
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   8f218:	00c00584 	movi	r3,22
   8f21c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   8f220:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   8f224:	dfc00017 	ldw	ra,0(sp)
   8f228:	dec00104 	addi	sp,sp,4
   8f22c:	f800283a 	ret
   8f230:	00800274 	movhi	r2,9
   8f234:	108fd004 	addi	r2,r2,16192
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  {
    ALT_ERRNO = EINVAL;
   8f238:	00c00584 	movi	r3,22
   8f23c:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
   8f240:	00bffa84 	movi	r2,-22
   */
  
  alt_llist_insert(list, &dev->llist);

  return 0;  
}
   8f244:	f800283a 	ret

0008f248 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   8f248:	defffc04 	addi	sp,sp,-16
   8f24c:	dc800215 	stw	r18,8(sp)
   8f250:	dc000015 	stw	r16,0(sp)
   8f254:	dfc00315 	stw	ra,12(sp)
   8f258:	dc400115 	stw	r17,4(sp)
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8f25c:	04000274 	movhi	r16,9
   8f260:	843f5e04 	addi	r16,r16,-648
   8f264:	04800274 	movhi	r18,9
   8f268:	94bf5f04 	addi	r18,r18,-644
   8f26c:	84800936 	bltu	r16,r18,8f294 <_do_ctors+0x4c>
   8f270:	84a5c83a 	sub	r18,r16,r18
   8f274:	9024d0ba 	srli	r18,r18,2
   8f278:	0023883a 	mov	r17,zero
   8f27c:	94800044 	addi	r18,r18,1
        (*ctor) (); 
   8f280:	80800017 	ldw	r2,0(r16)
   8f284:	8c400044 	addi	r17,r17,1

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8f288:	843fff04 	addi	r16,r16,-4
        (*ctor) (); 
   8f28c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   8f290:	8cbffb1e 	bne	r17,r18,8f280 <_gp+0xffff4e8c>
        (*ctor) (); 
}
   8f294:	dfc00317 	ldw	ra,12(sp)
   8f298:	dc800217 	ldw	r18,8(sp)
   8f29c:	dc400117 	ldw	r17,4(sp)
   8f2a0:	dc000017 	ldw	r16,0(sp)
   8f2a4:	dec00404 	addi	sp,sp,16
   8f2a8:	f800283a 	ret

0008f2ac <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   8f2ac:	defffc04 	addi	sp,sp,-16
   8f2b0:	dc800215 	stw	r18,8(sp)
   8f2b4:	dc000015 	stw	r16,0(sp)
   8f2b8:	dfc00315 	stw	ra,12(sp)
   8f2bc:	dc400115 	stw	r17,4(sp)
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8f2c0:	04000274 	movhi	r16,9
   8f2c4:	843f5e04 	addi	r16,r16,-648
   8f2c8:	04800274 	movhi	r18,9
   8f2cc:	94bf5f04 	addi	r18,r18,-644
   8f2d0:	84800936 	bltu	r16,r18,8f2f8 <_do_dtors+0x4c>
   8f2d4:	84a5c83a 	sub	r18,r16,r18
   8f2d8:	9024d0ba 	srli	r18,r18,2
   8f2dc:	0023883a 	mov	r17,zero
   8f2e0:	94800044 	addi	r18,r18,1
        (*dtor) (); 
   8f2e4:	80800017 	ldw	r2,0(r16)
   8f2e8:	8c400044 	addi	r17,r17,1

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8f2ec:	843fff04 	addi	r16,r16,-4
        (*dtor) (); 
   8f2f0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   8f2f4:	8cbffb1e 	bne	r17,r18,8f2e4 <_gp+0xffff4ef0>
        (*dtor) (); 
}
   8f2f8:	dfc00317 	ldw	ra,12(sp)
   8f2fc:	dc800217 	ldw	r18,8(sp)
   8f300:	dc400117 	ldw	r17,4(sp)
   8f304:	dc000017 	ldw	r16,0(sp)
   8f308:	dec00404 	addi	sp,sp,16
   8f30c:	f800283a 	ret

0008f310 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   8f310:	f800283a 	ret

0008f314 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   8f314:	008f3b01 	jmpi	8f3b0 <alt_iic_isr_register>

0008f318 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f318:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f31c:	00bfff84 	movi	r2,-2
   8f320:	1884703a 	and	r2,r3,r2
   8f324:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
   8f328:	00800274 	movhi	r2,9
   8f32c:	108fd604 	addi	r2,r2,16216
   8f330:	01800044 	movi	r6,1
   8f334:	11000017 	ldw	r4,0(r2)
   8f338:	314a983a 	sll	r5,r6,r5
   8f33c:	290ab03a 	or	r5,r5,r4
   8f340:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8f344:	10800017 	ldw	r2,0(r2)
   8f348:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f34c:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
   8f350:	0005883a 	mov	r2,zero
   8f354:	f800283a 	ret

0008f358 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f358:	0007303a 	rdctl	r3,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f35c:	00bfff84 	movi	r2,-2
   8f360:	1884703a 	and	r2,r3,r2
   8f364:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
   8f368:	00800274 	movhi	r2,9
   8f36c:	108fd604 	addi	r2,r2,16216
   8f370:	01bfff84 	movi	r6,-2
   8f374:	11000017 	ldw	r4,0(r2)
   8f378:	314a183a 	rol	r5,r6,r5
   8f37c:	290a703a 	and	r5,r5,r4
   8f380:	11400015 	stw	r5,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   8f384:	10800017 	ldw	r2,0(r2)
   8f388:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f38c:	1801703a 	wrctl	status,r3
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
   8f390:	0005883a 	mov	r2,zero
   8f394:	f800283a 	ret

0008f398 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   8f398:	000530fa 	rdctl	r2,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
   8f39c:	00c00044 	movi	r3,1
   8f3a0:	194a983a 	sll	r5,r3,r5
   8f3a4:	1144703a 	and	r2,r2,r5
}
   8f3a8:	1004c03a 	cmpne	r2,r2,zero
   8f3ac:	f800283a 	ret

0008f3b0 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
   8f3b0:	008007c4 	movi	r2,31
   8f3b4:	11401a16 	blt	r2,r5,8f420 <alt_iic_isr_register+0x70>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   8f3b8:	defffe04 	addi	sp,sp,-8
   8f3bc:	dfc00115 	stw	ra,4(sp)
   8f3c0:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f3c4:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f3c8:	00bfff84 	movi	r2,-2
   8f3cc:	8084703a 	and	r2,r16,r2
   8f3d0:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
   8f3d4:	280490fa 	slli	r2,r5,3
   8f3d8:	00c00274 	movhi	r3,9
   8f3dc:	18cfe304 	addi	r3,r3,16268
   8f3e0:	1885883a 	add	r2,r3,r2
   8f3e4:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
   8f3e8:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8f3ec:	30000626 	beq	r6,zero,8f408 <alt_iic_isr_register+0x58>
   8f3f0:	008f3180 	call	8f318 <alt_ic_irq_enable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f3f4:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
   8f3f8:	dfc00117 	ldw	ra,4(sp)
   8f3fc:	dc000017 	ldw	r16,0(sp)
   8f400:	dec00204 	addi	sp,sp,8
   8f404:	f800283a 	ret
    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    alt_irq[id].context = isr_context;

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   8f408:	008f3580 	call	8f358 <alt_ic_irq_disable>
   8f40c:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
   8f410:	dfc00117 	ldw	ra,4(sp)
   8f414:	dc000017 	ldw	r16,0(sp)
   8f418:	dec00204 	addi	sp,sp,8
   8f41c:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
   8f420:	00bffa84 	movi	r2,-22
   8f424:	f800283a 	ret

0008f428 <alt_open_fd.constprop.0>:
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
   8f428:	defffd04 	addi	sp,sp,-12
   8f42c:	dc400115 	stw	r17,4(sp)
   8f430:	2023883a 	mov	r17,r4
{
  int old;

  old = open (name, flags, mode);
   8f434:	2809883a 	mov	r4,r5
   8f438:	300b883a 	mov	r5,r6
   8f43c:	01807fc4 	movi	r6,511
 *
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
   8f440:	dc000015 	stw	r16,0(sp)
   8f444:	dfc00215 	stw	ra,8(sp)
{
  int old;

  old = open (name, flags, mode);
   8f448:	008f5280 	call	8f528 <open>
   8f44c:	1021883a 	mov	r16,r2

  if (old >= 0)
   8f450:	10001216 	blt	r2,zero,8f49c <alt_open_fd.constprop.0+0x74>
  {
    fd->dev      = alt_fd_list[old].dev;
   8f454:	1009883a 	mov	r4,r2
   8f458:	01400304 	movi	r5,12
   8f45c:	00825800 	call	82580 <__mulsi3>
   8f460:	00c00274 	movhi	r3,9
   8f464:	18c47b04 	addi	r3,r3,4588
   8f468:	1885883a 	add	r2,r3,r2
   8f46c:	11000017 	ldw	r4,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   8f470:	10c00117 	ldw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   8f474:	10800217 	ldw	r2,8(r2)

  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
   8f478:	89000015 	stw	r4,0(r17)
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
   8f47c:	8009883a 	mov	r4,r16
  old = open (name, flags, mode);

  if (old >= 0)
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
   8f480:	88c00115 	stw	r3,4(r17)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   8f484:	88800215 	stw	r2,8(r17)

    alt_release_fd (old);
  }
} 
   8f488:	dfc00217 	ldw	ra,8(sp)
   8f48c:	dc400117 	ldw	r17,4(sp)
   8f490:	dc000017 	ldw	r16,0(sp)
   8f494:	dec00304 	addi	sp,sp,12
  {
    fd->dev      = alt_fd_list[old].dev;
    fd->priv     = alt_fd_list[old].priv;
    fd->fd_flags = alt_fd_list[old].fd_flags;

    alt_release_fd (old);
   8f498:	008e8301 	jmpi	8e830 <alt_release_fd>
  }
} 
   8f49c:	dfc00217 	ldw	ra,8(sp)
   8f4a0:	dc400117 	ldw	r17,4(sp)
   8f4a4:	dc000017 	ldw	r16,0(sp)
   8f4a8:	dec00304 	addi	sp,sp,12
   8f4ac:	f800283a 	ret

0008f4b0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   8f4b0:	defffb04 	addi	sp,sp,-20
   8f4b4:	2005883a 	mov	r2,r4
   8f4b8:	dc400115 	stw	r17,4(sp)
   8f4bc:	dc000015 	stw	r16,0(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   8f4c0:	04400044 	movi	r17,1
   8f4c4:	04000274 	movhi	r16,9
   8f4c8:	84047e04 	addi	r16,r16,4600
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   8f4cc:	dcc00315 	stw	r19,12(sp)
   8f4d0:	dc800215 	stw	r18,8(sp)
   8f4d4:	2827883a 	mov	r19,r5
   8f4d8:	3025883a 	mov	r18,r6
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   8f4dc:	100b883a 	mov	r5,r2
   8f4e0:	8009883a 	mov	r4,r16
   8f4e4:	880d883a 	mov	r6,r17
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   8f4e8:	dfc00415 	stw	ra,16(sp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   8f4ec:	008f4280 	call	8f428 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   8f4f0:	813ffd04 	addi	r4,r16,-12
   8f4f4:	980b883a 	mov	r5,r19
   8f4f8:	000d883a 	mov	r6,zero
   8f4fc:	008f4280 	call	8f428 <alt_open_fd.constprop.0>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   8f500:	81000304 	addi	r4,r16,12
   8f504:	900b883a 	mov	r5,r18
   8f508:	880d883a 	mov	r6,r17
}  
   8f50c:	dfc00417 	ldw	ra,16(sp)
   8f510:	dcc00317 	ldw	r19,12(sp)
   8f514:	dc800217 	ldw	r18,8(sp)
   8f518:	dc400117 	ldw	r17,4(sp)
   8f51c:	dc000017 	ldw	r16,0(sp)
   8f520:	dec00504 	addi	sp,sp,20
{
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   8f524:	008f4281 	jmpi	8f428 <alt_open_fd.constprop.0>

0008f528 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   8f528:	defff904 	addi	sp,sp,-28
   8f52c:	dc400115 	stw	r17,4(sp)
   8f530:	2823883a 	mov	r17,r5
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   8f534:	01400274 	movhi	r5,9
   8f538:	29490504 	addi	r5,r5,9236
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   8f53c:	dd400515 	stw	r21,20(sp)
   8f540:	dcc00315 	stw	r19,12(sp)
   8f544:	dc800215 	stw	r18,8(sp)
   8f548:	dc000015 	stw	r16,0(sp)
   8f54c:	dfc00615 	stw	ra,24(sp)
   8f550:	dd000415 	stw	r20,16(sp)
   8f554:	2025883a 	mov	r18,r4
   8f558:	3027883a 	mov	r19,r6
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   8f55c:	008f7d80 	call	8f7d8 <alt_find_dev>
   8f560:	1021883a 	mov	r16,r2
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  int status = -ENODEV;
  int isafs = 0;
   8f564:	002b883a 	mov	r21,zero
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   8f568:	10004226 	beq	r2,zero,8f674 <open+0x14c>
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  {
    if ((index = alt_get_fd (dev)) < 0)
   8f56c:	8009883a 	mov	r4,r16
   8f570:	008f9340 	call	8f934 <alt_get_fd>
   8f574:	1029883a 	mov	r20,r2
   8f578:	10003116 	blt	r2,zero,8f640 <open+0x118>
    {
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
   8f57c:	1009883a 	mov	r4,r2
   8f580:	01400304 	movi	r5,12
   8f584:	00825800 	call	82580 <__mulsi3>
   8f588:	00c00274 	movhi	r3,9
   8f58c:	18c47b04 	addi	r3,r3,4588
   8f590:	1889883a 	add	r4,r3,r2
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   8f594:	00900034 	movhi	r2,16384
   8f598:	10bfffc4 	addi	r2,r2,-1
   8f59c:	8884703a 	and	r2,r17,r2
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   8f5a0:	a8001326 	beq	r21,zero,8f5f0 <open+0xc8>
      status = index;
    }
    else
    {
      fd = &alt_fd_list[index];
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   8f5a4:	20800215 	stw	r2,8(r4)
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   8f5a8:	80800317 	ldw	r2,12(r16)
   8f5ac:	10002f26 	beq	r2,zero,8f66c <open+0x144>
   8f5b0:	900b883a 	mov	r5,r18
   8f5b4:	880d883a 	mov	r6,r17
   8f5b8:	980f883a 	mov	r7,r19
   8f5bc:	103ee83a 	callr	r2
   8f5c0:	1007883a 	mov	r3,r2
   8f5c4:	a005883a 	mov	r2,r20
    status = -ENODEV;
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   8f5c8:	18003416 	blt	r3,zero,8f69c <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
}
   8f5cc:	dfc00617 	ldw	ra,24(sp)
   8f5d0:	dd400517 	ldw	r21,20(sp)
   8f5d4:	dd000417 	ldw	r20,16(sp)
   8f5d8:	dcc00317 	ldw	r19,12(sp)
   8f5dc:	dc800217 	ldw	r18,8(sp)
   8f5e0:	dc400117 	ldw	r17,4(sp)
   8f5e4:	dc000017 	ldw	r16,0(sp)
   8f5e8:	dec00704 	addi	sp,sp,28
   8f5ec:	f800283a 	ret
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8f5f0:	01400274 	movhi	r5,9
   8f5f4:	29490404 	addi	r5,r5,9232

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   8f5f8:	10900034 	orhi	r2,r2,16384
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8f5fc:	29400017 	ldw	r5,0(r5)
   8f600:	22c00017 	ldw	r11,0(r4)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   8f604:	20800215 	stw	r2,8(r4)
   8f608:	1a400204 	addi	r9,r3,8
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8f60c:	0011883a 	mov	r8,zero
   8f610:	00000306 	br	8f620 <open+0xf8>
   8f614:	18c00304 	addi	r3,r3,12
   8f618:	4a400304 	addi	r9,r9,12
   8f61c:	2a3fe236 	bltu	r5,r8,8f5a8 <_gp+0xffff51b4>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8f620:	1a800017 	ldw	r10,0(r3)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   8f624:	42000044 	addi	r8,r8,1
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   8f628:	5abffa1e 	bne	r11,r10,8f614 <_gp+0xffff5220>
   8f62c:	48800017 	ldw	r2,0(r9)
   8f630:	103ff80e 	bge	r2,zero,8f614 <_gp+0xffff5220>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   8f634:	193ff726 	beq	r3,r4,8f614 <_gp+0xffff5220>
   8f638:	04000344 	movi	r16,13
   8f63c:	00000106 	br	8f644 <open+0x11c>
   8f640:	00a1c83a 	sub	r16,zero,r2

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  {
    alt_release_fd (index);  
   8f644:	a009883a 	mov	r4,r20
   8f648:	008e8300 	call	8e830 <alt_release_fd>
   8f64c:	00800274 	movhi	r2,9
   8f650:	10890904 	addi	r2,r2,9252
   8f654:	10800017 	ldw	r2,0(r2)
   8f658:	10000d26 	beq	r2,zero,8f690 <open+0x168>
   8f65c:	103ee83a 	callr	r2
    ALT_ERRNO = -status;
   8f660:	14000015 	stw	r16,0(r2)
    return -1;
   8f664:	00bfffc4 	movi	r2,-1
   8f668:	003fd806 	br	8f5cc <_gp+0xffff51d8>
   8f66c:	a005883a 	mov	r2,r20
   8f670:	003fd606 	br	8f5cc <_gp+0xffff51d8>
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   8f674:	9009883a 	mov	r4,r18
   8f678:	008f8680 	call	8f868 <alt_find_file>
   8f67c:	1021883a 	mov	r16,r2

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   8f680:	1000081e 	bne	r2,zero,8f6a4 <open+0x17c>
   8f684:	040004c4 	movi	r16,19
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   8f688:	053fffc4 	movi	r20,-1
   8f68c:	003fed06 	br	8f644 <_gp+0xffff5250>
   8f690:	00800274 	movhi	r2,9
   8f694:	108fd004 	addi	r2,r2,16192
   8f698:	003ff106 	br	8f660 <_gp+0xffff526c>
   8f69c:	00e1c83a 	sub	r16,zero,r3
   8f6a0:	003fe806 	br	8f644 <_gp+0xffff5250>
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    isafs = 1;
   8f6a4:	05400044 	movi	r21,1
   8f6a8:	003fb006 	br	8f56c <_gp+0xffff5178>

0008f6ac <alt_alarm_stop>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f6ac:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f6b0:	00ffff84 	movi	r3,-2
   8f6b4:	10c6703a 	and	r3,r2,r3
   8f6b8:	1801703a 	wrctl	status,r3
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8f6bc:	21400117 	ldw	r5,4(r4)
   8f6c0:	20c00017 	ldw	r3,0(r4)
   8f6c4:	19400115 	stw	r5,4(r3)
  entry->previous->next = entry->next;
   8f6c8:	21400117 	ldw	r5,4(r4)
   8f6cc:	28c00015 	stw	r3,0(r5)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   8f6d0:	21000115 	stw	r4,4(r4)
  entry->next     = entry;
   8f6d4:	21000015 	stw	r4,0(r4)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f6d8:	1001703a 	wrctl	status,r2
   8f6dc:	f800283a 	ret

0008f6e0 <alt_tick>:

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   8f6e0:	d0a6da17 	ldw	r2,-25752(gp)
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   8f6e4:	defffa04 	addi	sp,sp,-24
   8f6e8:	dc000015 	stw	r16,0(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   8f6ec:	d4200f17 	ldw	r16,-32708(gp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   8f6f0:	10800044 	addi	r2,r2,1
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   8f6f4:	dc800215 	stw	r18,8(sp)
   8f6f8:	dfc00515 	stw	ra,20(sp)
   8f6fc:	dd000415 	stw	r20,16(sp)
   8f700:	dcc00315 	stw	r19,12(sp)
   8f704:	dc400115 	stw	r17,4(sp)
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   8f708:	d4a00f04 	addi	r18,gp,-32708

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   8f70c:	d0a6da15 	stw	r2,-25752(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8f710:	84801b26 	beq	r16,r18,8f780 <alt_tick+0xa0>
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
        {
          alarm->rollover = 1;
   8f714:	04c00044 	movi	r19,1
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f718:	053fff84 	movi	r20,-2
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8f71c:	80800403 	ldbu	r2,16(r16)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  {
    next = (alt_alarm*) alarm->llist.next;
   8f720:	84400017 	ldw	r17,0(r16)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   8f724:	10000326 	beq	r2,zero,8f734 <alt_tick+0x54>
   8f728:	d0a6da17 	ldw	r2,-25752(gp)
   8f72c:	1000011e 	bne	r2,zero,8f734 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   8f730:	80000405 	stb	zero,16(r16)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   8f734:	d0e6da17 	ldw	r3,-25752(gp)
   8f738:	80800217 	ldw	r2,8(r16)
   8f73c:	18800236 	bltu	r3,r2,8f748 <alt_tick+0x68>
   8f740:	80800403 	ldbu	r2,16(r16)
   8f744:	10000326 	beq	r2,zero,8f754 <alt_tick+0x74>

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8f748:	8c800d26 	beq	r17,r18,8f780 <alt_tick+0xa0>
   8f74c:	8821883a 	mov	r16,r17
   8f750:	003ff206 	br	8f71c <_gp+0xffff5328>
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    {
      next_callback = alarm->callback (alarm->context);
   8f754:	80800317 	ldw	r2,12(r16)
   8f758:	81000517 	ldw	r4,20(r16)
   8f75c:	103ee83a 	callr	r2

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   8f760:	10000f26 	beq	r2,zero,8f7a0 <alt_tick+0xc0>
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
   8f764:	81000217 	ldw	r4,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   8f768:	d0e6da17 	ldw	r3,-25752(gp)
      {
        alt_alarm_stop (alarm);
      }
      else
      {
        alarm->time += next_callback;
   8f76c:	1105883a 	add	r2,r2,r4
   8f770:	80800215 	stw	r2,8(r16)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   8f774:	10fff42e 	bgeu	r2,r3,8f748 <_gp+0xffff5354>
        {
          alarm->rollover = 1;
   8f778:	84c00405 	stb	r19,16(r16)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   8f77c:	8cbff31e 	bne	r17,r18,8f74c <_gp+0xffff5358>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
   8f780:	dfc00517 	ldw	ra,20(sp)
   8f784:	dd000417 	ldw	r20,16(sp)
   8f788:	dcc00317 	ldw	r19,12(sp)
   8f78c:	dc800217 	ldw	r18,8(sp)
   8f790:	dc400117 	ldw	r17,4(sp)
   8f794:	dc000017 	ldw	r16,0(sp)
   8f798:	dec00604 	addi	sp,sp,24
   8f79c:	f800283a 	ret
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   8f7a0:	0005303a 	rdctl	r2,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   8f7a4:	1506703a 	and	r3,r2,r20
   8f7a8:	1801703a 	wrctl	status,r3
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   8f7ac:	81000117 	ldw	r4,4(r16)
   8f7b0:	80c00017 	ldw	r3,0(r16)
   8f7b4:	19000115 	stw	r4,4(r3)
  entry->previous->next = entry->next;
   8f7b8:	81000117 	ldw	r4,4(r16)
   8f7bc:	20c00015 	stw	r3,0(r4)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   8f7c0:	84000115 	stw	r16,4(r16)
  entry->next     = entry;
   8f7c4:	84000015 	stw	r16,0(r16)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   8f7c8:	1001703a 	wrctl	status,r2
   8f7cc:	003fde06 	br	8f748 <_gp+0xffff5354>

0008f7d0 <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   8f7d0:	000170fa 	wrctl	ienable,zero
   8f7d4:	f800283a 	ret

0008f7d8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   8f7d8:	defffb04 	addi	sp,sp,-20
   8f7dc:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) llist->next;
   8f7e0:	2c000017 	ldw	r16,0(r5)
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   8f7e4:	dcc00315 	stw	r19,12(sp)
   8f7e8:	dc800215 	stw	r18,8(sp)
   8f7ec:	dc400115 	stw	r17,4(sp)
   8f7f0:	dfc00415 	stw	ra,16(sp)
   8f7f4:	2823883a 	mov	r17,r5
   8f7f8:	2027883a 	mov	r19,r4
  alt_dev* next = (alt_dev*) llist->next;
  alt_32 len;

  len  = strlen(name) + 1;
   8f7fc:	008280c0 	call	8280c <strlen>
   8f800:	14800044 	addi	r18,r2,1
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8f804:	8c00031e 	bne	r17,r16,8f814 <alt_find_dev+0x3c>
   8f808:	00000f06 	br	8f848 <alt_find_dev+0x70>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   8f80c:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   8f810:	8c000d26 	beq	r17,r16,8f848 <alt_find_dev+0x70>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   8f814:	81000217 	ldw	r4,8(r16)
   8f818:	980b883a 	mov	r5,r19
   8f81c:	900d883a 	mov	r6,r18
   8f820:	008fa2c0 	call	8fa2c <memcmp>
   8f824:	103ff91e 	bne	r2,zero,8f80c <_gp+0xffff5418>
   8f828:	8005883a 	mov	r2,r16
  }
  
  /* No match found */
  
  return NULL;
}
   8f82c:	dfc00417 	ldw	ra,16(sp)
   8f830:	dcc00317 	ldw	r19,12(sp)
   8f834:	dc800217 	ldw	r18,8(sp)
   8f838:	dc400117 	ldw	r17,4(sp)
   8f83c:	dc000017 	ldw	r16,0(sp)
   8f840:	dec00504 	addi	sp,sp,20
   8f844:	f800283a 	ret
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   8f848:	0005883a 	mov	r2,zero
}
   8f84c:	dfc00417 	ldw	ra,16(sp)
   8f850:	dcc00317 	ldw	r19,12(sp)
   8f854:	dc800217 	ldw	r18,8(sp)
   8f858:	dc400117 	ldw	r17,4(sp)
   8f85c:	dc000017 	ldw	r16,0(sp)
   8f860:	dec00504 	addi	sp,sp,20
   8f864:	f800283a 	ret

0008f868 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   8f868:	defffa04 	addi	sp,sp,-24
   8f86c:	dd000415 	stw	r20,16(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   8f870:	05000274 	movhi	r20,9
   8f874:	a5090704 	addi	r20,r20,9244
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   8f878:	dc000015 	stw	r16,0(sp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   8f87c:	a4000017 	ldw	r16,0(r20)
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   8f880:	dfc00515 	stw	ra,20(sp)
   8f884:	dcc00315 	stw	r19,12(sp)
   8f888:	dc800215 	stw	r18,8(sp)
   8f88c:	dc400115 	stw	r17,4(sp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8f890:	85001626 	beq	r16,r20,8f8ec <alt_find_file+0x84>
   8f894:	2025883a 	mov	r18,r4
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
   8f898:	04c00bc4 	movi	r19,47
   8f89c:	00000806 	br	8f8c0 <alt_find_file+0x58>
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8f8a0:	9185883a 	add	r2,r18,r6
   8f8a4:	10800007 	ldb	r2,0(r2)
   8f8a8:	14c00126 	beq	r2,r19,8f8b0 <alt_find_file+0x48>
   8f8ac:	1000021e 	bne	r2,zero,8f8b8 <alt_find_file+0x50>
        !memcmp (next->name, name, len))
   8f8b0:	008fa2c0 	call	8fa2c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   8f8b4:	10001626 	beq	r2,zero,8f910 <alt_find_file+0xa8>
    {
      /* match found */

      return next;
    }
    next = (alt_dev*) next->llist.next;
   8f8b8:	84000017 	ldw	r16,0(r16)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   8f8bc:	85000b26 	beq	r16,r20,8f8ec <alt_find_file+0x84>
  {
    len = strlen(next->name);
   8f8c0:	84400217 	ldw	r17,8(r16)
   8f8c4:	8809883a 	mov	r4,r17
   8f8c8:	008280c0 	call	8280c <strlen>
   8f8cc:	100d883a 	mov	r6,r2
    
    if (next->name[len-1] == '/')
   8f8d0:	8885883a 	add	r2,r17,r2
   8f8d4:	10bfffc7 	ldb	r2,-1(r2)
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
        !memcmp (next->name, name, len))
   8f8d8:	8809883a 	mov	r4,r17
   8f8dc:	900b883a 	mov	r5,r18
 
  while (next != (alt_dev*) &alt_fs_list)
  {
    len = strlen(next->name);
    
    if (next->name[len-1] == '/')
   8f8e0:	14ffef1e 	bne	r2,r19,8f8a0 <_gp+0xffff54ac>
    {
      len -= 1;
   8f8e4:	31bfffc4 	addi	r6,r6,-1
   8f8e8:	003fed06 	br	8f8a0 <_gp+0xffff54ac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   8f8ec:	0005883a 	mov	r2,zero
}
   8f8f0:	dfc00517 	ldw	ra,20(sp)
   8f8f4:	dd000417 	ldw	r20,16(sp)
   8f8f8:	dcc00317 	ldw	r19,12(sp)
   8f8fc:	dc800217 	ldw	r18,8(sp)
   8f900:	dc400117 	ldw	r17,4(sp)
   8f904:	dc000017 	ldw	r16,0(sp)
   8f908:	dec00604 	addi	sp,sp,24
   8f90c:	f800283a 	ret
   8f910:	8005883a 	mov	r2,r16
   8f914:	dfc00517 	ldw	ra,20(sp)
   8f918:	dd000417 	ldw	r20,16(sp)
   8f91c:	dcc00317 	ldw	r19,12(sp)
   8f920:	dc800217 	ldw	r18,8(sp)
   8f924:	dc400117 	ldw	r17,4(sp)
   8f928:	dc000017 	ldw	r16,0(sp)
   8f92c:	dec00604 	addi	sp,sp,24
   8f930:	f800283a 	ret

0008f934 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   8f934:	defffb04 	addi	sp,sp,-20
   8f938:	dcc00315 	stw	r19,12(sp)
   8f93c:	dc800215 	stw	r18,8(sp)
   8f940:	dc400115 	stw	r17,4(sp)
   8f944:	dc000015 	stw	r16,0(sp)
   8f948:	dfc00415 	stw	ra,16(sp)
   8f94c:	2027883a 	mov	r19,r4
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   8f950:	0021883a 	mov	r16,zero
   8f954:	04400274 	movhi	r17,9
   8f958:	8c447b04 	addi	r17,r17,4588
   8f95c:	04800804 	movi	r18,32
   8f960:	00000206 	br	8f96c <alt_get_fd+0x38>
   8f964:	84000044 	addi	r16,r16,1
   8f968:	84801426 	beq	r16,r18,8f9bc <alt_get_fd+0x88>
   8f96c:	8009883a 	mov	r4,r16
   8f970:	01400304 	movi	r5,12
   8f974:	00825800 	call	82580 <__mulsi3>
   8f978:	8885883a 	add	r2,r17,r2
  {
    if (!alt_fd_list[i].dev)
   8f97c:	10c00017 	ldw	r3,0(r2)
   8f980:	183ff81e 	bne	r3,zero,8f964 <_gp+0xffff5570>
    {
      alt_fd_list[i].dev = dev;
      if (i > alt_max_fd)
   8f984:	00c00274 	movhi	r3,9
   8f988:	18c90404 	addi	r3,r3,9232
   8f98c:	19000017 	ldw	r4,0(r3)

  for (i = 0; i < ALT_MAX_FD; i++)
  {
    if (!alt_fd_list[i].dev)
    {
      alt_fd_list[i].dev = dev;
   8f990:	14c00015 	stw	r19,0(r2)
      if (i > alt_max_fd)
   8f994:	2400010e 	bge	r4,r16,8f99c <alt_get_fd+0x68>
      {
        alt_max_fd = i;
   8f998:	1c000015 	stw	r16,0(r3)
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
   8f99c:	8005883a 	mov	r2,r16
   8f9a0:	dfc00417 	ldw	ra,16(sp)
   8f9a4:	dcc00317 	ldw	r19,12(sp)
   8f9a8:	dc800217 	ldw	r18,8(sp)
   8f9ac:	dc400117 	ldw	r17,4(sp)
   8f9b0:	dc000017 	ldw	r16,0(sp)
   8f9b4:	dec00504 	addi	sp,sp,20
   8f9b8:	f800283a 	ret
 */

int alt_get_fd (alt_dev* dev)
{
  alt_32 i;
  int rc = -EMFILE;
   8f9bc:	043ffa04 	movi	r16,-24
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
}
   8f9c0:	8005883a 	mov	r2,r16
   8f9c4:	dfc00417 	ldw	ra,16(sp)
   8f9c8:	dcc00317 	ldw	r19,12(sp)
   8f9cc:	dc800217 	ldw	r18,8(sp)
   8f9d0:	dc400117 	ldw	r17,4(sp)
   8f9d4:	dc000017 	ldw	r16,0(sp)
   8f9d8:	dec00504 	addi	sp,sp,20
   8f9dc:	f800283a 	ret

0008f9e0 <atexit>:
   8f9e0:	200b883a 	mov	r5,r4
   8f9e4:	000d883a 	mov	r6,zero
   8f9e8:	0009883a 	mov	r4,zero
   8f9ec:	000f883a 	mov	r7,zero
   8f9f0:	008faa81 	jmpi	8faa8 <__register_exitproc>

0008f9f4 <exit>:
   8f9f4:	defffe04 	addi	sp,sp,-8
   8f9f8:	000b883a 	mov	r5,zero
   8f9fc:	dc000015 	stw	r16,0(sp)
   8fa00:	dfc00115 	stw	ra,4(sp)
   8fa04:	2021883a 	mov	r16,r4
   8fa08:	008fbc40 	call	8fbc4 <__call_exitprocs>
   8fa0c:	00800274 	movhi	r2,9
   8fa10:	1088fe04 	addi	r2,r2,9208
   8fa14:	11000017 	ldw	r4,0(r2)
   8fa18:	20800f17 	ldw	r2,60(r4)
   8fa1c:	10000126 	beq	r2,zero,8fa24 <exit+0x30>
   8fa20:	103ee83a 	callr	r2
   8fa24:	8009883a 	mov	r4,r16
   8fa28:	008fd680 	call	8fd68 <_exit>

0008fa2c <memcmp>:
   8fa2c:	01c000c4 	movi	r7,3
   8fa30:	3980192e 	bgeu	r7,r6,8fa98 <memcmp+0x6c>
   8fa34:	2144b03a 	or	r2,r4,r5
   8fa38:	11c4703a 	and	r2,r2,r7
   8fa3c:	10000f26 	beq	r2,zero,8fa7c <memcmp+0x50>
   8fa40:	21c00003 	ldbu	r7,0(r4)
   8fa44:	28800003 	ldbu	r2,0(r5)
   8fa48:	3880151e 	bne	r7,r2,8faa0 <memcmp+0x74>
   8fa4c:	30ffff84 	addi	r3,r6,-2
   8fa50:	01bfffc4 	movi	r6,-1
   8fa54:	00000406 	br	8fa68 <memcmp+0x3c>
   8fa58:	21c00003 	ldbu	r7,0(r4)
   8fa5c:	28800003 	ldbu	r2,0(r5)
   8fa60:	18ffffc4 	addi	r3,r3,-1
   8fa64:	38800e1e 	bne	r7,r2,8faa0 <memcmp+0x74>
   8fa68:	21000044 	addi	r4,r4,1
   8fa6c:	29400044 	addi	r5,r5,1
   8fa70:	19bff91e 	bne	r3,r6,8fa58 <_gp+0xffff5664>
   8fa74:	0005883a 	mov	r2,zero
   8fa78:	f800283a 	ret
   8fa7c:	20c00017 	ldw	r3,0(r4)
   8fa80:	28800017 	ldw	r2,0(r5)
   8fa84:	1880041e 	bne	r3,r2,8fa98 <memcmp+0x6c>
   8fa88:	31bfff04 	addi	r6,r6,-4
   8fa8c:	21000104 	addi	r4,r4,4
   8fa90:	29400104 	addi	r5,r5,4
   8fa94:	39bff936 	bltu	r7,r6,8fa7c <_gp+0xffff5688>
   8fa98:	303fe91e 	bne	r6,zero,8fa40 <_gp+0xffff564c>
   8fa9c:	003ff506 	br	8fa74 <_gp+0xffff5680>
   8faa0:	3885c83a 	sub	r2,r7,r2
   8faa4:	f800283a 	ret

0008faa8 <__register_exitproc>:
   8faa8:	defffa04 	addi	sp,sp,-24
   8faac:	00800274 	movhi	r2,9
   8fab0:	1088fe04 	addi	r2,r2,9208
   8fab4:	dc000315 	stw	r16,12(sp)
   8fab8:	14000017 	ldw	r16,0(r2)
   8fabc:	dc400415 	stw	r17,16(sp)
   8fac0:	dfc00515 	stw	ra,20(sp)
   8fac4:	80805217 	ldw	r2,328(r16)
   8fac8:	2023883a 	mov	r17,r4
   8facc:	10003a26 	beq	r2,zero,8fbb8 <__register_exitproc+0x110>
   8fad0:	10c00117 	ldw	r3,4(r2)
   8fad4:	020007c4 	movi	r8,31
   8fad8:	40c0190e 	bge	r8,r3,8fb40 <__register_exitproc+0x98>
   8fadc:	00800034 	movhi	r2,0
   8fae0:	10800004 	addi	r2,r2,0
   8fae4:	1000061e 	bne	r2,zero,8fb00 <__register_exitproc+0x58>
   8fae8:	00bfffc4 	movi	r2,-1
   8faec:	dfc00517 	ldw	ra,20(sp)
   8faf0:	dc400417 	ldw	r17,16(sp)
   8faf4:	dc000317 	ldw	r16,12(sp)
   8faf8:	dec00604 	addi	sp,sp,24
   8fafc:	f800283a 	ret
   8fb00:	01006404 	movi	r4,400
   8fb04:	d9400015 	stw	r5,0(sp)
   8fb08:	d9800115 	stw	r6,4(sp)
   8fb0c:	d9c00215 	stw	r7,8(sp)
   8fb10:	00000000 	call	0 <alt_exception_muldiv>
   8fb14:	d9400017 	ldw	r5,0(sp)
   8fb18:	d9800117 	ldw	r6,4(sp)
   8fb1c:	d9c00217 	ldw	r7,8(sp)
   8fb20:	103ff126 	beq	r2,zero,8fae8 <_gp+0xffff56f4>
   8fb24:	81005217 	ldw	r4,328(r16)
   8fb28:	10000115 	stw	zero,4(r2)
   8fb2c:	0007883a 	mov	r3,zero
   8fb30:	11000015 	stw	r4,0(r2)
   8fb34:	80805215 	stw	r2,328(r16)
   8fb38:	10006215 	stw	zero,392(r2)
   8fb3c:	10006315 	stw	zero,396(r2)
   8fb40:	88000d1e 	bne	r17,zero,8fb78 <__register_exitproc+0xd0>
   8fb44:	19000084 	addi	r4,r3,2
   8fb48:	2109883a 	add	r4,r4,r4
   8fb4c:	18c00044 	addi	r3,r3,1
   8fb50:	2109883a 	add	r4,r4,r4
   8fb54:	10c00115 	stw	r3,4(r2)
   8fb58:	1105883a 	add	r2,r2,r4
   8fb5c:	11400015 	stw	r5,0(r2)
   8fb60:	0005883a 	mov	r2,zero
   8fb64:	dfc00517 	ldw	ra,20(sp)
   8fb68:	dc400417 	ldw	r17,16(sp)
   8fb6c:	dc000317 	ldw	r16,12(sp)
   8fb70:	dec00604 	addi	sp,sp,24
   8fb74:	f800283a 	ret
   8fb78:	18c9883a 	add	r4,r3,r3
   8fb7c:	2109883a 	add	r4,r4,r4
   8fb80:	1109883a 	add	r4,r2,r4
   8fb84:	21802215 	stw	r6,136(r4)
   8fb88:	01800044 	movi	r6,1
   8fb8c:	12006217 	ldw	r8,392(r2)
   8fb90:	30cc983a 	sll	r6,r6,r3
   8fb94:	4190b03a 	or	r8,r8,r6
   8fb98:	12006215 	stw	r8,392(r2)
   8fb9c:	21c04215 	stw	r7,264(r4)
   8fba0:	01000084 	movi	r4,2
   8fba4:	893fe71e 	bne	r17,r4,8fb44 <_gp+0xffff5750>
   8fba8:	11006317 	ldw	r4,396(r2)
   8fbac:	218cb03a 	or	r6,r4,r6
   8fbb0:	11806315 	stw	r6,396(r2)
   8fbb4:	003fe306 	br	8fb44 <_gp+0xffff5750>
   8fbb8:	80805304 	addi	r2,r16,332
   8fbbc:	80805215 	stw	r2,328(r16)
   8fbc0:	003fc306 	br	8fad0 <_gp+0xffff56dc>

0008fbc4 <__call_exitprocs>:
   8fbc4:	00800274 	movhi	r2,9
   8fbc8:	1088fe04 	addi	r2,r2,9208
   8fbcc:	10800017 	ldw	r2,0(r2)
   8fbd0:	defff304 	addi	sp,sp,-52
   8fbd4:	df000b15 	stw	fp,44(sp)
   8fbd8:	d8800015 	stw	r2,0(sp)
   8fbdc:	10805204 	addi	r2,r2,328
   8fbe0:	dd400815 	stw	r21,32(sp)
   8fbe4:	dfc00c15 	stw	ra,48(sp)
   8fbe8:	ddc00a15 	stw	r23,40(sp)
   8fbec:	dd800915 	stw	r22,36(sp)
   8fbf0:	dd000715 	stw	r20,28(sp)
   8fbf4:	dcc00615 	stw	r19,24(sp)
   8fbf8:	dc800515 	stw	r18,20(sp)
   8fbfc:	dc400415 	stw	r17,16(sp)
   8fc00:	dc000315 	stw	r16,12(sp)
   8fc04:	d9000115 	stw	r4,4(sp)
   8fc08:	2839883a 	mov	fp,r5
   8fc0c:	d8800215 	stw	r2,8(sp)
   8fc10:	057fffc4 	movi	r21,-1
   8fc14:	d8800017 	ldw	r2,0(sp)
   8fc18:	14805217 	ldw	r18,328(r2)
   8fc1c:	90001826 	beq	r18,zero,8fc80 <__call_exitprocs+0xbc>
   8fc20:	ddc00217 	ldw	r23,8(sp)
   8fc24:	90c00117 	ldw	r3,4(r18)
   8fc28:	1c3fffc4 	addi	r16,r3,-1
   8fc2c:	80001116 	blt	r16,zero,8fc74 <__call_exitprocs+0xb0>
   8fc30:	18c00044 	addi	r3,r3,1
   8fc34:	8427883a 	add	r19,r16,r16
   8fc38:	18c7883a 	add	r3,r3,r3
   8fc3c:	95802204 	addi	r22,r18,136
   8fc40:	9ce7883a 	add	r19,r19,r19
   8fc44:	18c7883a 	add	r3,r3,r3
   8fc48:	b4e7883a 	add	r19,r22,r19
   8fc4c:	90e3883a 	add	r17,r18,r3
   8fc50:	e0001726 	beq	fp,zero,8fcb0 <__call_exitprocs+0xec>
   8fc54:	8c87c83a 	sub	r3,r17,r18
   8fc58:	b0c7883a 	add	r3,r22,r3
   8fc5c:	18c01e17 	ldw	r3,120(r3)
   8fc60:	1f001326 	beq	r3,fp,8fcb0 <__call_exitprocs+0xec>
   8fc64:	843fffc4 	addi	r16,r16,-1
   8fc68:	9cffff04 	addi	r19,r19,-4
   8fc6c:	8c7fff04 	addi	r17,r17,-4
   8fc70:	857ff71e 	bne	r16,r21,8fc50 <_gp+0xffff585c>
   8fc74:	00800034 	movhi	r2,0
   8fc78:	10800004 	addi	r2,r2,0
   8fc7c:	10002a1e 	bne	r2,zero,8fd28 <__call_exitprocs+0x164>
   8fc80:	dfc00c17 	ldw	ra,48(sp)
   8fc84:	df000b17 	ldw	fp,44(sp)
   8fc88:	ddc00a17 	ldw	r23,40(sp)
   8fc8c:	dd800917 	ldw	r22,36(sp)
   8fc90:	dd400817 	ldw	r21,32(sp)
   8fc94:	dd000717 	ldw	r20,28(sp)
   8fc98:	dcc00617 	ldw	r19,24(sp)
   8fc9c:	dc800517 	ldw	r18,20(sp)
   8fca0:	dc400417 	ldw	r17,16(sp)
   8fca4:	dc000317 	ldw	r16,12(sp)
   8fca8:	dec00d04 	addi	sp,sp,52
   8fcac:	f800283a 	ret
   8fcb0:	91000117 	ldw	r4,4(r18)
   8fcb4:	88c00017 	ldw	r3,0(r17)
   8fcb8:	213fffc4 	addi	r4,r4,-1
   8fcbc:	24001526 	beq	r4,r16,8fd14 <__call_exitprocs+0x150>
   8fcc0:	88000015 	stw	zero,0(r17)
   8fcc4:	183fe726 	beq	r3,zero,8fc64 <_gp+0xffff5870>
   8fcc8:	00800044 	movi	r2,1
   8fccc:	1408983a 	sll	r4,r2,r16
   8fcd0:	91406217 	ldw	r5,392(r18)
   8fcd4:	95000117 	ldw	r20,4(r18)
   8fcd8:	214a703a 	and	r5,r4,r5
   8fcdc:	28000b26 	beq	r5,zero,8fd0c <__call_exitprocs+0x148>
   8fce0:	91406317 	ldw	r5,396(r18)
   8fce4:	2148703a 	and	r4,r4,r5
   8fce8:	20000c1e 	bne	r4,zero,8fd1c <__call_exitprocs+0x158>
   8fcec:	99400017 	ldw	r5,0(r19)
   8fcf0:	d9000117 	ldw	r4,4(sp)
   8fcf4:	183ee83a 	callr	r3
   8fcf8:	90c00117 	ldw	r3,4(r18)
   8fcfc:	1d3fc51e 	bne	r3,r20,8fc14 <_gp+0xffff5820>
   8fd00:	b8c00017 	ldw	r3,0(r23)
   8fd04:	1cbfd726 	beq	r3,r18,8fc64 <_gp+0xffff5870>
   8fd08:	003fc206 	br	8fc14 <_gp+0xffff5820>
   8fd0c:	183ee83a 	callr	r3
   8fd10:	003ff906 	br	8fcf8 <_gp+0xffff5904>
   8fd14:	94000115 	stw	r16,4(r18)
   8fd18:	003fea06 	br	8fcc4 <_gp+0xffff58d0>
   8fd1c:	99000017 	ldw	r4,0(r19)
   8fd20:	183ee83a 	callr	r3
   8fd24:	003ff406 	br	8fcf8 <_gp+0xffff5904>
   8fd28:	90c00117 	ldw	r3,4(r18)
   8fd2c:	1800081e 	bne	r3,zero,8fd50 <__call_exitprocs+0x18c>
   8fd30:	90c00017 	ldw	r3,0(r18)
   8fd34:	18000a26 	beq	r3,zero,8fd60 <__call_exitprocs+0x19c>
   8fd38:	9009883a 	mov	r4,r18
   8fd3c:	b8c00015 	stw	r3,0(r23)
   8fd40:	00000000 	call	0 <alt_exception_muldiv>
   8fd44:	bc800017 	ldw	r18,0(r23)
   8fd48:	903fb61e 	bne	r18,zero,8fc24 <_gp+0xffff5830>
   8fd4c:	003fcc06 	br	8fc80 <_gp+0xffff588c>
   8fd50:	90c00017 	ldw	r3,0(r18)
   8fd54:	902f883a 	mov	r23,r18
   8fd58:	1825883a 	mov	r18,r3
   8fd5c:	003ffa06 	br	8fd48 <_gp+0xffff5954>
   8fd60:	0007883a 	mov	r3,zero
   8fd64:	003ffb06 	br	8fd54 <_gp+0xffff5960>

0008fd68 <_exit>:
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   8fd68:	20000226 	beq	r4,zero,8fd74 <_exit+0xc>
    ALT_SIM_FAIL();
   8fd6c:	002af070 	cmpltui	zero,zero,43969
   8fd70:	003fff06 	br	8fd70 <_gp+0xffff597c>
  } else {
    ALT_SIM_PASS();
   8fd74:	002af0b0 	cmpltui	zero,zero,43970
   8fd78:	003ffd06 	br	8fd70 <_gp+0xffff597c>
